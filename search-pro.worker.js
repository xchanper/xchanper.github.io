const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":1882,\"nextId\":1882,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2#概述\",\"3\":\"2#类结构\",\"4\":\"2#队列构造\",\"5\":\"2#核心方法\",\"6\":\"2#acquire\",\"7\":\"2#release\",\"8\":\"2#条件队列\",\"9\":\"2#同步器实现\",\"10\":\"2#参考\",\"11\":\"2@0\",\"12\":\"2@1\",\"13\":\"3\",\"14\":\"3#短信验证码\",\"15\":\"3#oauth2\",\"16\":\"3#分布式会话\",\"17\":\"3#session-原理\",\"18\":\"3#分布式-session\",\"19\":\"3#方案-1-session-复制\",\"20\":\"3#方案-2-客户端存储\",\"21\":\"3#方案-3-哈希一致性\",\"22\":\"3#方案-4-统一存储\",\"23\":\"3#spring-session\",\"24\":\"3#使用\",\"25\":\"3#原理\",\"26\":\"3#jwt\",\"27\":\"3#sso\",\"28\":\"3@0\",\"29\":\"3@1\",\"30\":\"4\",\"31\":\"4#概述\",\"32\":\"4#概念\",\"33\":\"4#集群\",\"34\":\"4#术语\",\"35\":\"4#倒排索引\",\"36\":\"4#mapping\",\"37\":\"4#存储结构\",\"38\":\"4#基本使用\",\"39\":\"4#引入依赖\",\"40\":\"4#注入客户端\",\"41\":\"4#索引操作\",\"42\":\"4#创建\",\"43\":\"4#查询\",\"44\":\"4#删除\",\"45\":\"4#修改\",\"46\":\"4#文档操作\",\"47\":\"4#创建-1\",\"48\":\"4#查询-1\",\"49\":\"4#删除-1\",\"50\":\"4#修改-1\",\"51\":\"4#搜索\",\"52\":\"4#lucene\",\"53\":\"4#功能\",\"54\":\"4@0\",\"55\":\"4@1\",\"56\":\"5\",\"57\":\"5#基本工具\",\"58\":\"5#optional\",\"59\":\"5#preconditions\",\"60\":\"5#objects\",\"61\":\"5#ordering\",\"62\":\"5#throwables\",\"63\":\"5#集合\",\"64\":\"5#immutable\",\"65\":\"5#新集合类型\",\"66\":\"5#multiset\",\"67\":\"5#multimap\",\"68\":\"5#bimap\",\"69\":\"5#table\",\"70\":\"5#其它\",\"71\":\"5#集合工具\",\"72\":\"5#缓存✨\",\"73\":\"5#使用\",\"74\":\"5#失效\",\"75\":\"5#图\",\"76\":\"5#并发\",\"77\":\"5#listenablefuture\",\"78\":\"5#service\",\"79\":\"5#strings\",\"80\":\"5#基本类型工具\",\"81\":\"5#range\",\"82\":\"5#io\",\"83\":\"5#hash\",\"84\":\"5#eventbus\",\"85\":\"5#参考\",\"86\":\"5@0\",\"87\":\"5@1\",\"88\":\"6\",\"89\":\"6#项目结构\",\"90\":\"6#服务端\",\"91\":\"6#容器加载\",\"92\":\"6#注册服务\",\"93\":\"6#netty-server\",\"94\":\"6#idlestatehandler\",\"95\":\"6#rpcmessageencoder\",\"96\":\"6#rpcmessagedecoder\",\"97\":\"6#nettyrpcserverhandler\",\"98\":\"6#客户端\",\"99\":\"6#容器加载-1\",\"100\":\"6#netty-client\",\"101\":\"6#完整的-rpc-过程\",\"102\":\"6@0\",\"103\":\"6@1\",\"104\":\"7\",\"105\":\"7#基于语法描述说明\",\"106\":\"7#数据库操作\",\"107\":\"7#创建数据库\",\"108\":\"7#删除数据库\",\"109\":\"7#数据库修改location\",\"110\":\"7#选择数据库\",\"111\":\"7#表操作\",\"112\":\"7#数据类型\",\"113\":\"7#基础建表\",\"114\":\"7#基于其它表的结构建表\",\"115\":\"7#基于查询结果建表\",\"116\":\"7#删除表\",\"117\":\"7#修改表\",\"118\":\"7#分区操作\",\"119\":\"7#分桶操作\",\"120\":\"7#数据加载\",\"121\":\"7#数据导出\",\"122\":\"7#复杂类型\",\"123\":\"7#查询-sql\",\"124\":\"7#基本查询\",\"125\":\"7#rlike\",\"126\":\"7#union联合\",\"127\":\"7#sampling采样\",\"128\":\"7#虚拟列\",\"129\":\"7#函数\",\"130\":\"7#hive列注释、表注释等乱码解决方案\",\"131\":\"7@0\",\"132\":\"7@1\",\"133\":\"8\",\"134\":\"8#基本概念\",\"135\":\"8#同步基础\",\"136\":\"8#thread\",\"137\":\"8#线程间通信\",\"138\":\"8#synchronized\",\"139\":\"8#wait-notify\",\"140\":\"8#park-unpark\",\"141\":\"8#内存模型\",\"142\":\"8#jmm\",\"143\":\"8#重排序\",\"144\":\"8#三大特性\",\"145\":\"8#volatile\",\"146\":\"8#不可变\",\"147\":\"8#无锁并发\",\"148\":\"8#cas\",\"149\":\"8#unsafe\",\"150\":\"8#原子工具\",\"151\":\"8#jdk-并发工具\",\"152\":\"8#线程池\",\"153\":\"8#forkjoin\",\"154\":\"8#threadlocal\",\"155\":\"8#aqs\",\"156\":\"8#reentrantlock\",\"157\":\"8#reentrantreadwritelock\",\"158\":\"8#stampedlock\",\"159\":\"8#semaphore\",\"160\":\"8#countdownlatch\",\"161\":\"8#cyclicbarrier\",\"162\":\"8#线程安全集合\",\"163\":\"8#异步编排\",\"164\":\"8@0\",\"165\":\"8@1\",\"166\":\"9\",\"167\":\"9#垃圾回收算法\",\"168\":\"9#标记-清除\",\"169\":\"9#标记-复制\",\"170\":\"9#标记-整理\",\"171\":\"9#分代收集\",\"172\":\"9#垃圾回收实现\",\"173\":\"9#serial\",\"174\":\"9#parnew\",\"175\":\"9#parallel\",\"176\":\"9#cms\",\"177\":\"9#g1\",\"178\":\"9#shenandoah\",\"179\":\"9#zgc\",\"180\":\"9@0\",\"181\":\"9@1\",\"182\":\"10\",\"183\":\"10#引用概述\",\"184\":\"10#referencequeue\",\"185\":\"10#reference\",\"186\":\"10#引用状态\",\"187\":\"10#成员和构造\",\"188\":\"10#referencehandler\",\"189\":\"10#其它方法\",\"190\":\"10#引用实现\",\"191\":\"10#强引用\",\"192\":\"10#软引用\",\"193\":\"10#弱引用\",\"194\":\"10#虚引用\",\"195\":\"10#cleaner\",\"196\":\"10#finalizer\",\"197\":\"10#参考\",\"198\":\"10@0\",\"199\":\"10@1\",\"200\":\"11\",\"201\":\"11#jvm内存演进\",\"202\":\"11#程序计数器\",\"203\":\"11#虚拟机栈\",\"204\":\"11#局部变量表\",\"205\":\"11#动态链接\",\"206\":\"11#方法返回地址\",\"207\":\"11#操作数栈\",\"208\":\"11#附加信息\",\"209\":\"11#本地方法栈\",\"210\":\"11#堆\",\"211\":\"11#方法区\",\"212\":\"11#直接内存\",\"213\":\"11#虚拟机对象\",\"214\":\"11#对象创建\",\"215\":\"11#对象内存布局\",\"216\":\"11#对象访问定位\",\"217\":\"11@0\",\"218\":\"11@1\",\"219\":\"12\",\"220\":\"12#内存结构\",\"221\":\"12#垃圾回收\",\"222\":\"12#对象存活判断\",\"223\":\"12#引用计数法\",\"224\":\"12#可达性分析算法\",\"225\":\"12#引用类型\",\"226\":\"12#垃圾回收算法\",\"227\":\"12#垃圾回收实现\",\"228\":\"12#jvm-工具\",\"229\":\"12#jps\",\"230\":\"12#jstat\",\"231\":\"12#jinfo\",\"232\":\"12#jmap\",\"233\":\"12#jhat\",\"234\":\"12#jstack\",\"235\":\"12#jhsdb\",\"236\":\"12#jconsole\",\"237\":\"12#visualvm\",\"238\":\"12#java-mission-control\",\"239\":\"12#类文件和字节码\",\"240\":\"12#类文件结构\",\"241\":\"12#字节码指令\",\"242\":\"12#字节码执行引擎\",\"243\":\"12#方法调用\",\"244\":\"12#解析\",\"245\":\"12#分派\",\"246\":\"12#类加载机制\",\"247\":\"12#类加载时机\",\"248\":\"12#类加载过程\",\"249\":\"12#加载\",\"250\":\"12#验证\",\"251\":\"12#准备\",\"252\":\"12#解析-1\",\"253\":\"12#初始化\",\"254\":\"12#类加载器\",\"255\":\"12#前期编译\",\"256\":\"12#解析与填充符号表\",\"257\":\"12#词法分析\",\"258\":\"12#语法分析\",\"259\":\"12#填充符号表\",\"260\":\"12#注解处理器\",\"261\":\"12#语义分析与字节码生成\",\"262\":\"12#语义分析\",\"263\":\"12#语法糖\",\"264\":\"12#字节码生成\",\"265\":\"12#后期编译\",\"266\":\"12#即时编译器\",\"267\":\"12#分层编译\",\"268\":\"12#编译对象与触发条件\",\"269\":\"12#编译过程\",\"270\":\"12#提前编译器\",\"271\":\"12#优点\",\"272\":\"12#缺点\",\"273\":\"12#应用场景\",\"274\":\"12#编译优化技术\",\"275\":\"12#内存模型\",\"276\":\"12#多线程\",\"277\":\"12#线程实现\",\"278\":\"12#内核线程\",\"279\":\"12#用户线程\",\"280\":\"12#混合线程\",\"281\":\"12#锁优化\",\"282\":\"12#协程\",\"283\":\"12#参考\",\"284\":\"12@0\",\"285\":\"12@1\",\"286\":\"13\",\"287\":\"13#数据类型\",\"288\":\"13#运算符\",\"289\":\"13#代码块\",\"290\":\"13#单例模式\",\"291\":\"13#继承\",\"292\":\"13#接口\",\"293\":\"13#多态\",\"294\":\"13#内部类\",\"295\":\"13#_1-静态内部类\",\"296\":\"13#_2-成员内部类\",\"297\":\"13#_3-局部内部类\",\"298\":\"13#_4-匿名内部类\",\"299\":\"13#字符串\",\"300\":\"13#两种创建过程\",\"301\":\"13#疑难点\",\"302\":\"13#stringbuilder-拼接字符串\",\"303\":\"13#集合\",\"304\":\"13#collection\",\"305\":\"13#map\",\"306\":\"13#泛型\",\"307\":\"13#反射\",\"308\":\"13#获取class对象\",\"309\":\"13#获取构造器\",\"310\":\"13#获取成员变量\",\"311\":\"13#获取方法对象\",\"312\":\"13#stream-流\",\"313\":\"13#文件\",\"314\":\"13#file类\",\"315\":\"13#字符集\",\"316\":\"13#io-流\",\"317\":\"13#字节流\",\"318\":\"13#字符流\",\"319\":\"13#缓冲流\",\"320\":\"13#转换流\",\"321\":\"13#对象字节流-序列化\",\"322\":\"13#打印流\",\"323\":\"13#io-库\",\"324\":\"13#nio\",\"325\":\"13#多线程\",\"326\":\"13#多线程的创建\",\"327\":\"13#_1-继承thread类\",\"328\":\"13#_2-实现runnable接口\",\"329\":\"13#_3-实现callable接口\",\"330\":\"13#thread常用api\",\"331\":\"13#线程安全\",\"332\":\"13#线程池\",\"333\":\"13#补充\",\"334\":\"13#定时器\",\"335\":\"13#并行与并发\",\"336\":\"13#线程的生命周期\",\"337\":\"13#网络通信\",\"338\":\"13#三要素\",\"339\":\"13#ip地址\",\"340\":\"13#端口\",\"341\":\"13#协议\",\"342\":\"13#udp-通信\",\"343\":\"13#tcp-通信\",\"344\":\"13#异常\",\"345\":\"13#异常体系\",\"346\":\"13#异常处理\",\"347\":\"13#自定义异常\",\"348\":\"13#注解\",\"349\":\"13#动态代理\",\"350\":\"13#常用api\",\"351\":\"13#bigdecimal\",\"352\":\"13#枚举\",\"353\":\"13#日期与时间\",\"354\":\"13#正则表达式\",\"355\":\"13#日志\",\"356\":\"13#单元测试\",\"357\":\"13#xml\",\"358\":\"13#设计模式\",\"359\":\"13#内存图\",\"360\":\"13@0\",\"361\":\"14\",\"362\":\"14#概述\",\"363\":\"14#park\",\"364\":\"14#unpark\",\"365\":\"14#对比\",\"366\":\"14#原理\",\"367\":\"14#参考\",\"368\":\"14@0\",\"369\":\"14@1\",\"370\":\"15\",\"371\":\"15#日志框架\",\"372\":\"15#设计模式\",\"373\":\"15#门面模式\",\"374\":\"15#适配模式\",\"375\":\"15#桥接模式\",\"376\":\"15#发展史\",\"377\":\"15#进化史\",\"378\":\"15#直接日志实现\",\"379\":\"15#接入-jcl\",\"380\":\"15#接入-slf4j\",\"381\":\"15#日志门面-slf4j\",\"382\":\"15#处理依赖\",\"383\":\"15#绑定原理\",\"384\":\"15#api\",\"385\":\"15#日志实现-log4j2\",\"386\":\"15#配置\",\"387\":\"15#configuration\",\"388\":\"15#appenders\",\"389\":\"15#loggers\",\"390\":\"15#日志级别\",\"391\":\"15#最佳实践\",\"392\":\"15#参考\",\"393\":\"15@0\",\"394\":\"15@1\",\"395\":\"16\",\"396\":\"16#介绍\",\"397\":\"16#作用和问题\",\"398\":\"16#异步处理\",\"399\":\"16#应用解耦\",\"400\":\"16#流量削峰\",\"401\":\"16#新的问题\",\"402\":\"16#mq-协议\",\"403\":\"16#jms\",\"404\":\"16#amqp\",\"405\":\"16#架构\",\"406\":\"16#模型\",\"407\":\"16#mqtt\",\"408\":\"16#stomp\",\"409\":\"16#xmpp\",\"410\":\"16#常见-mq\",\"411\":\"16#rabbitmq\",\"412\":\"16#主要特性\",\"413\":\"16#核心概念\",\"414\":\"16#路由规则\",\"415\":\"16#spring-整合\",\"416\":\"16#引入依赖\",\"417\":\"16#配置-rabbitmq\",\"418\":\"16#基本使用\",\"419\":\"16#消息确认\",\"420\":\"16#confirmcallback\",\"421\":\"16#returncallback\",\"422\":\"16#consumer-ack\",\"423\":\"16#延迟队列\",\"424\":\"16#ttl\",\"425\":\"16#死信\",\"426\":\"16#rocketmq\",\"427\":\"16#基本组件\",\"428\":\"16#主要特性-1\",\"429\":\"16#kafka\",\"430\":\"16#基本组件-1\",\"431\":\"16#主要特性-2\",\"432\":\"16#activemq\",\"433\":\"16#基本组成\",\"434\":\"16#主要特性-3\",\"435\":\"16#mq-对比\",\"436\":\"16@0\",\"437\":\"16@1\",\"438\":\"17\",\"439\":\"17#简介\",\"440\":\"17#应用场景\",\"441\":\"17#日志同步\",\"442\":\"17#实时计算\",\"443\":\"17#基础架构\",\"444\":\"17#安装使用\",\"445\":\"17#配置\",\"446\":\"17#命令\",\"447\":\"17#监控工具\",\"448\":\"17#kraft\",\"449\":\"17#producer\",\"450\":\"17#发送流程\",\"451\":\"17#分区策略\",\"452\":\"17#defaultpartitioner\",\"453\":\"17#自定义分区器\",\"454\":\"17#java客户端\",\"455\":\"17#引入依赖\",\"456\":\"17#原生客户端\",\"457\":\"17#springboot-客户端\",\"458\":\"17#生产经验\",\"459\":\"17#提高吞吐量\",\"460\":\"17#数据可靠\",\"461\":\"17#数据重复\",\"462\":\"17#数据有序\",\"463\":\"17#broker\",\"464\":\"17#工作流程\",\"465\":\"17#zk-存储数据\",\"466\":\"17#整理流程\",\"467\":\"17#重要参数\",\"468\":\"17#副本\",\"469\":\"17#基本信息\",\"470\":\"17#选举\",\"471\":\"17#故障恢复\",\"472\":\"17#副本分配\",\"473\":\"17#持久化\",\"474\":\"17#消息结构\",\"475\":\"17#日志结构\",\"476\":\"17#索引定位\",\"477\":\"17#日志清理\",\"478\":\"17#高效读写\",\"479\":\"17#consumer\",\"480\":\"17#消费方式\",\"481\":\"17#消费规则\",\"482\":\"17#工作流程-1\",\"483\":\"17#初始化\",\"484\":\"17#拉取消息\",\"485\":\"17#消费参数\",\"486\":\"17#java客户端-1\",\"487\":\"17#引入依赖-1\",\"488\":\"17#原生客户端-1\",\"489\":\"17#springboot-客户端-1\",\"490\":\"17#offset\",\"491\":\"17#自动提交\",\"492\":\"17#手动提交\",\"493\":\"17#指定-offset\",\"494\":\"17#分区分配\",\"495\":\"17#range\",\"496\":\"17#roundrobin\",\"497\":\"17#sticky\",\"498\":\"17#生产经验-1\",\"499\":\"17#消费者事务\",\"500\":\"17#数据积压\",\"501\":\"17@0\",\"502\":\"17@1\",\"503\":\"18\",\"504\":\"18#api-使用\",\"505\":\"18#依赖\",\"506\":\"18#配置\",\"507\":\"18#使用\",\"508\":\"18#sqlsession\",\"509\":\"18#语句执行\",\"510\":\"18#映射器\",\"511\":\"18#事务控制\",\"512\":\"18#本地缓存\",\"513\":\"18#刷写批量更新\",\"514\":\"18#确保关闭\",\"515\":\"18#动态-sql\",\"516\":\"18#配置文件\",\"517\":\"18#结构\",\"518\":\"18#properties\",\"519\":\"18#settings\",\"520\":\"18#typealiases\",\"521\":\"18#typehandlers\",\"522\":\"18#objectfactory\",\"523\":\"18#plugins\",\"524\":\"18#environments\",\"525\":\"18#transactionmanager\",\"526\":\"18#datasource\",\"527\":\"18#databaseidprovider\",\"528\":\"18#mappers\",\"529\":\"18#mapper\",\"530\":\"18#crud\",\"531\":\"18#sql\",\"532\":\"18#resultmap\",\"533\":\"18#cache\",\"534\":\"18#动态-sql-1\",\"535\":\"18#if\",\"536\":\"18#choose\",\"537\":\"18#trim\",\"538\":\"18#foreach\",\"539\":\"18#源码分析\",\"540\":\"18#重要组件\",\"541\":\"18#初始化\",\"542\":\"18#创建会话\",\"543\":\"18#获取-mapper\",\"544\":\"18#执行-sql\",\"545\":\"18#其它模块\",\"546\":\"18#参考资料\",\"547\":\"18@0\",\"548\":\"18@1\",\"549\":\"19\",\"550\":\"19#全局锁\",\"551\":\"19#表级锁\",\"552\":\"19#表锁\",\"553\":\"19#元数据锁\",\"554\":\"19#行级锁\",\"555\":\"19#记录锁\",\"556\":\"19#间隙锁\",\"557\":\"19#临键锁\",\"558\":\"19#加锁总结\",\"559\":\"19#其它锁\",\"560\":\"19#意向锁\",\"561\":\"19#插入意向锁\",\"562\":\"19#auto-inc锁\",\"563\":\"19#页级锁\",\"564\":\"19#锁的内存结构\",\"565\":\"19#参考文档\",\"566\":\"19@0\",\"567\":\"19@1\",\"568\":\"20\",\"569\":\"20#概述\",\"570\":\"20#体系结构\",\"571\":\"20#sql\",\"572\":\"20#分类\",\"573\":\"20#ddl-数据定义语言\",\"574\":\"20#数据库操作\",\"575\":\"20#表操作\",\"576\":\"20#字段操作\",\"577\":\"20#dml-数据操作语言\",\"578\":\"20#添加数据\",\"579\":\"20#更新数据\",\"580\":\"20#删除数据\",\"581\":\"20#dql-数据查询语言\",\"582\":\"20#基础查询\",\"583\":\"20#条件查询\",\"584\":\"20#聚合查询-聚合函数\",\"585\":\"20#分组查询\",\"586\":\"20#排序查询\",\"587\":\"20#分页查询\",\"588\":\"20#dql执行顺序\",\"589\":\"20#dcl-数据控制语言\",\"590\":\"20#用户管理\",\"591\":\"20#权限控制\",\"592\":\"20#函数\",\"593\":\"20#字符串函数\",\"594\":\"20#数值函数\",\"595\":\"20#日期函数\",\"596\":\"20#流程函数\",\"597\":\"20#约束\",\"598\":\"20#概述-1\",\"599\":\"20#外键\",\"600\":\"20#多表\",\"601\":\"20#多表关系\",\"602\":\"20#合并查询\",\"603\":\"20#内连接查询\",\"604\":\"20#外连接查询\",\"605\":\"20#自连接查询\",\"606\":\"20#联合查询-union-union-all\",\"607\":\"20#子查询\",\"608\":\"20#标量子查询\",\"609\":\"20#列子查询\",\"610\":\"20#行子查询\",\"611\":\"20#表子查询\",\"612\":\"20#sql性能分析\",\"613\":\"20#sql-优化\",\"614\":\"20#insert-优化\",\"615\":\"20#主键优化\",\"616\":\"20#order-by-优化\",\"617\":\"20#group-by-优化\",\"618\":\"20#limit-优化\",\"619\":\"20#count-优化\",\"620\":\"20#update-优化\",\"621\":\"20#视图\",\"622\":\"20#语法\",\"623\":\"20#检查选项\",\"624\":\"20#更新条件\",\"625\":\"20#作用\",\"626\":\"20#存储过程\",\"627\":\"20#概念\",\"628\":\"20#基本语法\",\"629\":\"20#控制语句\",\"630\":\"20#if\",\"631\":\"20#参数\",\"632\":\"20#case\",\"633\":\"20#循环\",\"634\":\"20#游标\",\"635\":\"20#存储函数\",\"636\":\"20#触发器\",\"637\":\"20#innodb-引擎架构\",\"638\":\"20#内存结构\",\"639\":\"20#磁盘结构\",\"640\":\"20#后台线程\",\"641\":\"20#日志\",\"642\":\"20#错误日志\",\"643\":\"20#二进制日志\",\"644\":\"20#查询日志\",\"645\":\"20#慢查询日志\",\"646\":\"20#主从复制\",\"647\":\"20#概念-1\",\"648\":\"20#原理\",\"649\":\"20#搭建\",\"650\":\"20#分库分表\",\"651\":\"20#问题分析\",\"652\":\"20#拆分策略\",\"653\":\"20#实现技术-mycat\",\"654\":\"20#概述-2\",\"655\":\"20#结构\",\"656\":\"20#分片规则\",\"657\":\"20#管理与监控\",\"658\":\"20#读写分离\",\"659\":\"20#附录\",\"660\":\"20#数据类型\",\"661\":\"20#整型\",\"662\":\"20#浮点型\",\"663\":\"20#字符串\",\"664\":\"20#二进制类型\",\"665\":\"20#日期和时间\",\"666\":\"20#图形化界面工具\",\"667\":\"20#参考\",\"668\":\"20@0\",\"669\":\"20@1\",\"670\":\"21\",\"671\":\"21#配置文件与变量\",\"672\":\"21#通信流程\",\"673\":\"21#数据目录\",\"674\":\"21#字符集和比较规则\",\"675\":\"21#系统工具\",\"676\":\"21#存储引擎\",\"677\":\"21#mysql三大存储引擎\",\"678\":\"21#innodb\",\"679\":\"21#myisam\",\"680\":\"21#memory\",\"681\":\"21#存储引擎特点\",\"682\":\"21#存储引擎选择\",\"683\":\"21#innodb-记录格式\",\"684\":\"21#compact-行格式\",\"685\":\"21#redundant-行格式\",\"686\":\"21#行溢出\",\"687\":\"21#dynamic-和-compressed-行格式\",\"688\":\"21#innodb-数据页\",\"689\":\"21#user-records\",\"690\":\"21#page-directory\",\"691\":\"21#其它部分\",\"692\":\"21#innodb-表空间\",\"693\":\"21#区-extent\",\"694\":\"21#段-segment\",\"695\":\"21#表空间-tablespace\",\"696\":\"21#索引原理⭐\",\"697\":\"21#索引概述\",\"698\":\"21#索引结构\",\"699\":\"21#索引分类\",\"700\":\"21#索引用法\",\"701\":\"21#索引语法\",\"702\":\"21#最左前缀法则\",\"703\":\"21#索引失效情况\",\"704\":\"21#优化方案\",\"705\":\"21#指定索引\",\"706\":\"21#覆盖索引\",\"707\":\"21#前缀索引\",\"708\":\"21#设计原则\",\"709\":\"21#单表查询\",\"710\":\"21#访问方法\",\"711\":\"21#注意事项\",\"712\":\"21#多表查询\",\"713\":\"21#多表连接\",\"714\":\"21#连接原理\",\"715\":\"21#基于成本的优化\",\"716\":\"21#成本常数\",\"717\":\"21#单表查询的成本\",\"718\":\"21#多表查询的成本\",\"719\":\"21#innodb-统计数据\",\"720\":\"21#永久性数据\",\"721\":\"21#非永久性数据\",\"722\":\"21#重复值的说明\",\"723\":\"21#基于规则的优化\",\"724\":\"21#条件化简\",\"725\":\"21#外连接消除\",\"726\":\"21#子查询优化\",\"727\":\"21#explain-执行计划\",\"728\":\"21#字段含义\",\"729\":\"21#查询成本\",\"730\":\"21#innodb-缓冲池\",\"731\":\"21#buffer-pool结构\",\"732\":\"21#lru-链表\",\"733\":\"21#事务⭐\",\"734\":\"21#事务语法\",\"735\":\"21#四大特性-acid\",\"736\":\"21#并发问题\",\"737\":\"21#隔离级别\",\"738\":\"21#redo-log\",\"739\":\"21#redo日志格式\",\"740\":\"21#log-sequence-number\",\"741\":\"21#checkpoint\",\"742\":\"21#崩溃恢复\",\"743\":\"21#undo-log\",\"744\":\"21#事务id\",\"745\":\"21#undo日志格式\",\"746\":\"21#insert-undo日志\",\"747\":\"21#delete-undo日志\",\"748\":\"21#update-undo日志\",\"749\":\"21#日志存储\",\"750\":\"21#页面重用\",\"751\":\"21#回滚段\",\"752\":\"21#mvvc\",\"753\":\"21#版本链\",\"754\":\"21#readview\",\"755\":\"21#锁机制⭐\",\"756\":\"21@0\",\"757\":\"21@1\",\"758\":\"22\",\"759\":\"22#三大组件\",\"760\":\"22#channel\",\"761\":\"22#buffer\",\"762\":\"22#selector\",\"763\":\"22#多线程\",\"764\":\"22#线程池\",\"765\":\"22#多路复用\",\"766\":\"22#bytebuffer\",\"767\":\"22#使用姿势\",\"768\":\"22#数据结构\",\"769\":\"22#api\",\"770\":\"22#分配空间\",\"771\":\"22#写入数据\",\"772\":\"22#读取数据\",\"773\":\"22#指定索引\",\"774\":\"22#字符串互转\",\"775\":\"22#文件编程\",\"776\":\"22#获取通道\",\"777\":\"22#api-1\",\"778\":\"22#path\",\"779\":\"22#files\",\"780\":\"22#网络编程\",\"781\":\"22#阻塞-vs-非阻塞\",\"782\":\"22#阻塞\",\"783\":\"22#非阻塞\",\"784\":\"22#selector-1\",\"785\":\"22#api-2\",\"786\":\"22#处理事件\",\"787\":\"22#处理-accept\",\"788\":\"22#处理-read\",\"789\":\"22#处理-write\",\"790\":\"22#多线程优化\",\"791\":\"22#💡-利用多线程优化\",\"792\":\"22#udp\",\"793\":\"22#io-模型\",\"794\":\"22#分类\",\"795\":\"22#aio\",\"796\":\"22#文件-aio\",\"797\":\"22#网络-aio\",\"798\":\"22#零拷贝\",\"799\":\"22#传统-io\",\"800\":\"22#directbytebuffer\",\"801\":\"22#transferto\",\"802\":\"22#零拷贝-1\",\"803\":\"22@0\",\"804\":\"22@1\",\"805\":\"23\",\"806\":\"23#概述\",\"807\":\"23#netty-是什么\",\"808\":\"23#netty-的地位\",\"809\":\"23#netty-的优势\",\"810\":\"23#hello-world\",\"811\":\"23#服务端\",\"812\":\"23#客户端\",\"813\":\"23#流程梳理\",\"814\":\"23#模型概念\",\"815\":\"23#eventloop\",\"816\":\"23#eventloop-1\",\"817\":\"23#eventloopgroup\",\"818\":\"23#绑定-channel\",\"819\":\"23#channel\",\"820\":\"23#channelfuture\",\"821\":\"23#closefuture\",\"822\":\"23#future-promise\",\"823\":\"23#handler-pipeline\",\"824\":\"23#bytebuf\",\"825\":\"23#特点\",\"826\":\"23#创建\",\"827\":\"23#结构\",\"828\":\"23#读写\",\"829\":\"23#内存回收\",\"830\":\"23#零拷贝\",\"831\":\"23#切片\",\"832\":\"23#复制\",\"833\":\"23#组合\",\"834\":\"23#unpooled\",\"835\":\"23@0\",\"836\":\"23@1\",\"837\":\"24\",\"838\":\"24#粘包半包\",\"839\":\"24#现象\",\"840\":\"24#解决方案\",\"841\":\"24#短连接\",\"842\":\"24#定长消息\",\"843\":\"24#指定分隔符\",\"844\":\"24#声明长度\",\"845\":\"24#协议设计\",\"846\":\"24#协议举例\",\"847\":\"24#自定义协议\",\"848\":\"24#协议格式\",\"849\":\"24#编解码器\",\"850\":\"24#测试\",\"851\":\"24#sharable\",\"852\":\"24#实战-聊天室-rpc\",\"853\":\"24#参数调优\",\"854\":\"24#参数配置\",\"855\":\"24#connect-timeout-millis\",\"856\":\"24#so-backlog\",\"857\":\"24#ulimit-n\",\"858\":\"24#tcp-nodelay\",\"859\":\"24#so-sndbuf-so-rcvbuf\",\"860\":\"24#allocator\",\"861\":\"24#rcvbuf-allocator\",\"862\":\"24#源码分析\",\"863\":\"24#启动流程\",\"864\":\"24#init\",\"865\":\"24#register\",\"866\":\"24#bind\",\"867\":\"24#interestops\",\"868\":\"24#nioeventloop\",\"869\":\"24#成员对象\",\"870\":\"24#构造方法\",\"871\":\"24#启动线程\",\"872\":\"24#监听事件\",\"873\":\"24#处理事件\",\"874\":\"24@0\",\"875\":\"24@1\",\"876\":\"26\",\"877\":\"26#简单动态字符串\",\"878\":\"26#定义\",\"879\":\"26#与c字符串的区别\",\"880\":\"26#链表\",\"881\":\"26#字典\",\"882\":\"26#字典实现\",\"883\":\"26#哈希算法\",\"884\":\"26#跳表\",\"885\":\"26#概念\",\"886\":\"26#实现\",\"887\":\"26#整数集合\",\"888\":\"26#实现-1\",\"889\":\"26#数组升级\",\"890\":\"26#压缩列表\",\"891\":\"26#实现-2\",\"892\":\"26#列表节点\",\"893\":\"26#连锁更新\",\"894\":\"26#对象\",\"895\":\"26#对象类型和编码\",\"896\":\"26#字符串对象\",\"897\":\"26#列表对象\",\"898\":\"26#哈希对象\",\"899\":\"26#集合对象\",\"900\":\"26#有序集合对象\",\"901\":\"26#对象其它属性\",\"902\":\"26@0\",\"903\":\"26@1\",\"904\":\"27\",\"905\":\"27#数据库\",\"906\":\"27#实现\",\"907\":\"27#键空间\",\"908\":\"27#过期回收\",\"909\":\"27#数据库通知\",\"910\":\"27#rdb-持久化\",\"911\":\"27#创建与载入\",\"912\":\"27#自动保存\",\"913\":\"27#rdb文件结构\",\"914\":\"27#分析rdb文件\",\"915\":\"27#aof-持久化\",\"916\":\"27#实现-1\",\"917\":\"27#aof-重写\",\"918\":\"27#事件\",\"919\":\"27#文件事件\",\"920\":\"27#时间事件\",\"921\":\"27#事件调度与执行\",\"922\":\"27#客户端\",\"923\":\"27#通用属性\",\"924\":\"27#创建与连接\",\"925\":\"27#服务器\",\"926\":\"27#命令执行过程\",\"927\":\"27#命令执行器\",\"928\":\"27#servercron函数\",\"929\":\"27#初始化服务器\",\"930\":\"27@0\",\"931\":\"27@1\",\"932\":\"28\",\"933\":\"28#复制\",\"934\":\"28#旧版复制实现\",\"935\":\"28#新版复制实现\",\"936\":\"28#复制完整逻辑\",\"937\":\"28#心跳检测\",\"938\":\"28#sentinel\",\"939\":\"28#启动和初始化\",\"940\":\"28#通信连接\",\"941\":\"28#检测下线状态\",\"942\":\"28#选举领头sentinel\",\"943\":\"28#故障转移\",\"944\":\"28#集群\",\"945\":\"28#节点\",\"946\":\"28#分片与槽\",\"947\":\"28#集群中执行命令\",\"948\":\"28#复制与故障转移\",\"949\":\"28#消息\",\"950\":\"28@0\",\"951\":\"28@1\",\"952\":\"29\",\"953\":\"29#发布与订阅\",\"954\":\"29#频道\",\"955\":\"29#模式\",\"956\":\"29#发送消息\",\"957\":\"29#查看订阅\",\"958\":\"29#事务\",\"959\":\"29#事务实现\",\"960\":\"29#watch-命令\",\"961\":\"29#事务的acid\",\"962\":\"29#lua脚本\",\"963\":\"29#创建lua环境\",\"964\":\"29#协作组件\",\"965\":\"29#eval-命令\",\"966\":\"29#脚本管理命令\",\"967\":\"29#脚本复制\",\"968\":\"29#排序\",\"969\":\"29#sort-命令\",\"970\":\"29#底层实现\",\"971\":\"29#执行顺序\",\"972\":\"29#二进制位数组\",\"973\":\"29#位数组的表示\",\"974\":\"29#getbit\",\"975\":\"29#setbit\",\"976\":\"29#bitcount\",\"977\":\"29#bitop\",\"978\":\"29#慢查询日志\",\"979\":\"29#监视器\",\"980\":\"29@0\",\"981\":\"29@1\",\"982\":\"30\",\"983\":\"30#数据结构\",\"984\":\"30#数组-array或arraylist\",\"985\":\"30#链表-linkedlist\",\"986\":\"30#栈-arraydeque\",\"987\":\"30#队列-linkedlist\",\"988\":\"30#双端队列-deque\",\"989\":\"30#快排\",\"990\":\"30#滑动窗口\",\"991\":\"30#kmp\",\"992\":\"30#动态规划\",\"993\":\"30#最长回文子串\",\"994\":\"30#最长上升子序列-dp\",\"995\":\"30#最长上升子序列-贪心-二分\",\"996\":\"30#最长公共子序列\",\"997\":\"30#搜索\",\"998\":\"30#二分查找\",\"999\":\"30#二叉树\",\"1000\":\"30#dfs\",\"1001\":\"30#bfs\",\"1002\":\"30#lru\",\"1003\":\"30@0\",\"1004\":\"31\",\"1005\":\"31#ioc-部分\",\"1006\":\"31#beanfactory-类图\",\"1007\":\"31#策略设计模式\",\"1008\":\"31#资源加载策略\",\"1009\":\"31#对象实例化策略\",\"1010\":\"31#factorybean\",\"1011\":\"31#applicationcontext\",\"1012\":\"31#refresh-流程\",\"1013\":\"31#aop-部分\",\"1014\":\"31#动态代理\",\"1015\":\"31#jdk-动态代理\",\"1016\":\"31#cglib-动态代理\",\"1017\":\"31#aop-实现\",\"1018\":\"31#pointcut\",\"1019\":\"31#advisedsupport\",\"1020\":\"31#proxyfactory\",\"1021\":\"31#jdkdynamicaopproxy\",\"1022\":\"31#cglib2aopproxy\",\"1023\":\"31#myspring-整合-aop\",\"1024\":\"31#注解扫描\",\"1025\":\"31#注解注入\",\"1026\":\"31#propertyplaceholderconfigurer\",\"1027\":\"31#其它\",\"1028\":\"31#三级缓存解决循环依赖\",\"1029\":\"31@0\",\"1030\":\"32\",\"1031\":\"32#事务基础\",\"1032\":\"32#四大特性-acid\",\"1033\":\"32#sql-事务语句\",\"1034\":\"32#mysql-实现事务\",\"1035\":\"32#隔离级别\",\"1036\":\"32#spring-事务使用方法\",\"1037\":\"32#编程式\",\"1038\":\"32#transactionmanager\",\"1039\":\"32#transactiontemplate\",\"1040\":\"32#声明式\",\"1041\":\"32#传播行为\",\"1042\":\"32#spring-事务管理接口\",\"1043\":\"32#transactiondefinition\",\"1044\":\"32#transactionstatus\",\"1045\":\"32#transactionsynchronizationmanager\",\"1046\":\"32#transactionmanager-1\",\"1047\":\"32#platformtransactionmanager\",\"1048\":\"32#abstractplatformtransactionmanager\",\"1049\":\"32#开启事务\",\"1050\":\"32#事务提交\",\"1051\":\"32#事务回滚\",\"1052\":\"32#datasourcetransactionmanager\",\"1053\":\"32#springtemplate-原理\",\"1054\":\"32#容器注入\",\"1055\":\"32#事务管理流程\",\"1056\":\"32#transactional-原理\",\"1057\":\"32#transactionalmanagement\",\"1058\":\"32#proxycreator\",\"1059\":\"32#transactionadvisor\",\"1060\":\"32#总结\",\"1061\":\"32#事务失效\",\"1062\":\"32@0\",\"1063\":\"32@1\",\"1064\":\"33\",\"1065\":\"33#介绍\",\"1066\":\"33#基本使用\",\"1067\":\"33#创建\",\"1068\":\"33#操作\",\"1069\":\"33#参考\",\"1070\":\"33@0\",\"1071\":\"33@1\",\"1072\":\"34\",\"1073\":\"34#使用方式\",\"1074\":\"34#原理-monitor\",\"1075\":\"34#锁优化\",\"1076\":\"34#轻量级锁\",\"1077\":\"34#偏向锁\",\"1078\":\"34#其它\",\"1079\":\"34#自旋锁\",\"1080\":\"34#锁消除\",\"1081\":\"34#锁粗化\",\"1082\":\"34#完整流程\",\"1083\":\"34#参考\",\"1084\":\"34@0\",\"1085\":\"34@1\",\"1086\":\"35\",\"1087\":\"35#成员\",\"1088\":\"35#构造器\",\"1089\":\"35#线程状态\",\"1090\":\"35#start\",\"1091\":\"35#join\",\"1092\":\"35#interrupt\",\"1093\":\"35#exit\",\"1094\":\"35#其它\",\"1095\":\"35#工具方法\",\"1096\":\"35#异常\",\"1097\":\"35#安全审计\",\"1098\":\"35#已废弃\",\"1099\":\"35#threadgroup\",\"1100\":\"35#参考\",\"1101\":\"35@0\",\"1102\":\"35@1\",\"1103\":\"36\",\"1104\":\"36#概述\",\"1105\":\"36#使用\",\"1106\":\"36#创建线程池\",\"1107\":\"36#任务队列\",\"1108\":\"36#线程工厂\",\"1109\":\"36#拒绝策略\",\"1110\":\"36#executors\",\"1111\":\"36#类层级结构\",\"1112\":\"36#ctl-变量\",\"1113\":\"36#提交任务\",\"1114\":\"36#addworker\",\"1115\":\"36#runworker\",\"1116\":\"36#关闭\",\"1117\":\"36#整体逻辑框图\",\"1118\":\"36#应用\",\"1119\":\"36#线程数量\",\"1120\":\"36#动态线程池参数\",\"1121\":\"36#参考\",\"1122\":\"36@0\",\"1123\":\"36@1\",\"1124\":\"37\",\"1125\":\"37#使用步骤\",\"1126\":\"37#框架层次\",\"1127\":\"37#传输形式\",\"1128\":\"37#数据类型\",\"1129\":\"37#协议\",\"1130\":\"37#传输层\",\"1131\":\"37#服务端类型\",\"1132\":\"37@0\",\"1133\":\"37@1\",\"1134\":\"38\",\"1135\":\"38#获取对象\",\"1136\":\"38#内存操作\",\"1137\":\"38#cas-相关\",\"1138\":\"38#线程调度\",\"1139\":\"38#class-相关\",\"1140\":\"38#对象操作\",\"1141\":\"38#数组相关\",\"1142\":\"38#内存屏障\",\"1143\":\"38#系统相关\",\"1144\":\"38#参考\",\"1145\":\"38@0\",\"1146\":\"38@1\",\"1147\":\"39\",\"1148\":\"39#step0-调整wsl下mysql的密码安全策略-可选\",\"1149\":\"39#step1-windows-连接-wsl2-中的mysql服务\",\"1150\":\"39#取消地址绑定\",\"1151\":\"39#创建远程连接用户\",\"1152\":\"39#通过wsl地址连接服务\",\"1153\":\"39#step2-配置主从同步\",\"1154\":\"39#主库-master-配置\",\"1155\":\"39#从库-slave-配置\",\"1156\":\"39#参考\",\"1157\":\"39@0\",\"1158\":\"39@1\",\"1159\":\"40\",\"1160\":\"40#基本介绍\",\"1161\":\"40#概念\",\"1162\":\"40#应用场景\",\"1163\":\"40#安装搭建\",\"1164\":\"40#配置文件\",\"1165\":\"40#操作命令\",\"1166\":\"40#数据模型\",\"1167\":\"40#整体模型\",\"1168\":\"40#节点结构\",\"1169\":\"40#节点类型\",\"1170\":\"40#持久化\",\"1171\":\"40#网络模式\",\"1172\":\"40#zkcli-客户端\",\"1173\":\"40#创建节点\",\"1174\":\"40#查看节点\",\"1175\":\"40#修改节点\",\"1176\":\"40#删除节点\",\"1177\":\"40#设置权限\",\"1178\":\"40#curator-客户端\",\"1179\":\"40#依赖\",\"1180\":\"40#配置\",\"1181\":\"40#api\",\"1182\":\"40#分布式锁\",\"1183\":\"40#锁的种类\",\"1184\":\"40#加读锁\",\"1185\":\"40#加写锁\",\"1186\":\"40#羊群效应\",\"1187\":\"40#对比-redis\",\"1188\":\"40#curator-加锁\",\"1189\":\"40#watch-机制\",\"1190\":\"40#实现原理\",\"1191\":\"40#zkcli-监听\",\"1192\":\"40#curator-监听\",\"1193\":\"40#集群\",\"1194\":\"40#集群角色\",\"1195\":\"40#集群搭建\",\"1196\":\"40#创建-zoo-cfg\",\"1197\":\"40#创建-myid\",\"1198\":\"40#启动所有-zk-实例\",\"1199\":\"40#连接-zk-集群\",\"1200\":\"40#zab-协议\",\"1201\":\"40#节点状态\",\"1202\":\"40#选举过程\",\"1203\":\"40#启动时选举\",\"1204\":\"40#leader-宕机时选举\",\"1205\":\"40#数据读写\",\"1206\":\"40#cap-理论\",\"1207\":\"40#base-理论\",\"1208\":\"40@0\",\"1209\":\"40@1\",\"1210\":\"41\",\"1211\":\"41#大数据\",\"1212\":\"41#_5v-特性\",\"1213\":\"41#生态体系\",\"1214\":\"41#hadoop\",\"1215\":\"41#hdfs\",\"1216\":\"41#基础架构\",\"1217\":\"41#安装配置\",\"1218\":\"41#文件操作\",\"1219\":\"41#存储原理\",\"1220\":\"41#读写过程\",\"1221\":\"41#mapreduce\",\"1222\":\"41#yarn\",\"1223\":\"41#hive\",\"1224\":\"41#基础架构-1\",\"1225\":\"41#安装配置-1\",\"1226\":\"41#基本操作\",\"1227\":\"41#复合字段\",\"1228\":\"41#表类型\",\"1229\":\"41#虚拟列\",\"1230\":\"41@0\",\"1231\":\"41@1\",\"1232\":\"42\",\"1233\":\"42#背景\",\"1234\":\"42#总体规划\",\"1235\":\"42#双写阶段\",\"1236\":\"42#迁移读逻辑\",\"1237\":\"42#清理代码\",\"1238\":\"42#分布式锁\",\"1239\":\"42#双写加锁\",\"1240\":\"42#迁移\",\"1241\":\"42@0\",\"1242\":\"42@1\",\"1243\":\"43\",\"1244\":\"43#风格\",\"1245\":\"43#规范\",\"1246\":\"43#effective-java\",\"1247\":\"43#其它\",\"1248\":\"44\",\"1249\":\"44#缓存分类\",\"1250\":\"44#客户端缓存\",\"1251\":\"44#cdn-缓存\",\"1252\":\"44#服务端缓存\",\"1253\":\"44#本地缓存\",\"1254\":\"44#分布式缓存\",\"1255\":\"44#缓存问题\",\"1256\":\"44#缓存穿透\",\"1257\":\"44#缓存击穿\",\"1258\":\"44#缓存雪崩\",\"1259\":\"44#缓存污染\",\"1260\":\"44#锁机制\",\"1261\":\"44#本地锁\",\"1262\":\"44#分布式锁\",\"1263\":\"44#redis-lua\",\"1264\":\"44#redisson\",\"1265\":\"44#缓存一致性\",\"1266\":\"44#更新数据库-删除缓存\",\"1267\":\"44#删除缓存-更新数据库\",\"1268\":\"44#设计思路\",\"1269\":\"44#spring-cache\",\"1270\":\"44@0\",\"1271\":\"44@1\",\"1272\":\"45\",\"1273\":\"45#本地事务\",\"1274\":\"45#事务特征\",\"1275\":\"45#隔离级别\",\"1276\":\"45#传播行为\",\"1277\":\"45#分布式事务\",\"1278\":\"45#cap-定理\",\"1279\":\"45#base-理论\",\"1280\":\"45#paxos\",\"1281\":\"45#raft\",\"1282\":\"45#事务方案\",\"1283\":\"45#_2pc-二阶段提交\",\"1284\":\"45#tcc-事务\",\"1285\":\"45#柔性事务-最大努力通知\",\"1286\":\"45#柔性事务-可靠消息-最终一致性\",\"1287\":\"45#seata\",\"1288\":\"45#mq-实现最终一致性\",\"1289\":\"45#订单业务\",\"1290\":\"45#库存锁定\",\"1291\":\"45#优惠券业务\",\"1292\":\"45@0\",\"1293\":\"45@1\",\"1294\":\"46\",\"1295\":\"46#网关概述\",\"1296\":\"46#四层网关\",\"1297\":\"46#七层网关\",\"1298\":\"46#api-网关\",\"1299\":\"46#负载均衡\",\"1300\":\"46#业务实践\",\"1301\":\"46#mgw\",\"1302\":\"46#oceanus\",\"1303\":\"46#shepherd\",\"1304\":\"46#参考\",\"1305\":\"46@0\",\"1306\":\"46@1\",\"1307\":\"47\",\"1308\":\"47#起步\",\"1309\":\"47#特点\",\"1310\":\"47#三种状态\",\"1311\":\"47#配置文件\",\"1312\":\"47#基础\",\"1313\":\"47#本地命令\",\"1314\":\"47#clone\",\"1315\":\"47#add\",\"1316\":\"47#status\",\"1317\":\"47#diff\",\"1318\":\"47#commit\",\"1319\":\"47#rm\",\"1320\":\"47#restore\",\"1321\":\"47#mv\",\"1322\":\"47#log\",\"1323\":\"47#amend\",\"1324\":\"47#reset\",\"1325\":\"47#远程仓库\",\"1326\":\"47#remote\",\"1327\":\"47#fetch\",\"1328\":\"47#push\",\"1329\":\"47#标签\",\"1330\":\"47#gitignore-规则\",\"1331\":\"47#分支\",\"1332\":\"47#分支结构\",\"1333\":\"47#分支管理\",\"1334\":\"47#分支合并\",\"1335\":\"47#fast-forward\",\"1336\":\"47#recursive\",\"1337\":\"47#变基\",\"1338\":\"47#远程分支\",\"1339\":\"47#高级工具\",\"1340\":\"47#提交引用\",\"1341\":\"47#单提交\",\"1342\":\"47#多提交\",\"1343\":\"47#贮藏清理\",\"1344\":\"47#重写历史\",\"1345\":\"47#hooks\",\"1346\":\"47#数据恢复\",\"1347\":\"47#其它\",\"1348\":\"47#内部原理\",\"1349\":\"47#目录结构\",\"1350\":\"47#git-对象\",\"1351\":\"47#git-引用\",\"1352\":\"47@0\",\"1353\":\"47@1\",\"1354\":\"48\",\"1355\":\"48#实习-目的地搜索优化\",\"1356\":\"48#数据库设计\",\"1357\":\"48#scenic-data\",\"1358\":\"48#scenic-near-airports\",\"1359\":\"48#核心逻辑\",\"1360\":\"48#景点-邻近机场落库\",\"1361\":\"48#本地缓存-搜索树\",\"1362\":\"48#搜索逻辑\",\"1363\":\"48#多线程使用\",\"1364\":\"48#项目\",\"1365\":\"48#酷安好物\",\"1366\":\"48#nginx-反向代理\",\"1367\":\"48#jvm-调优\",\"1368\":\"48#缓存\",\"1369\":\"48#多线程使用-1\",\"1370\":\"48#订单、库存\",\"1371\":\"48#订单业务\",\"1372\":\"48#库存锁定\",\"1373\":\"48#优惠券业务\",\"1374\":\"48#mq\",\"1375\":\"48#秒杀设计\",\"1376\":\"48#手写spring\",\"1377\":\"48#ioc\",\"1378\":\"48#beanfactory\",\"1379\":\"48#applicationcontext\",\"1380\":\"48#aop\",\"1381\":\"48#bean-生命周期\",\"1382\":\"48#循环依赖\",\"1383\":\"48#事务管理\",\"1384\":\"48#数据结构\",\"1385\":\"48#排序算法\",\"1386\":\"48#查找算法\",\"1387\":\"48#满二叉树和完全二叉树\",\"1388\":\"48#图\",\"1389\":\"48#哈希冲突\",\"1390\":\"48#布隆过滤器\",\"1391\":\"48#计网\",\"1392\":\"48#基础\",\"1393\":\"48#tcp-ip-网络模型\",\"1394\":\"48#键入网址到网页显示\",\"1395\":\"48#内核收发数据包\",\"1396\":\"48#网络分析\",\"1397\":\"48#http\",\"1398\":\"48#http-协议\",\"1399\":\"48#http-缓存\",\"1400\":\"48#http-优化\",\"1401\":\"48#https-协议\",\"1402\":\"48#tls-握手\",\"1403\":\"48#数字证书\",\"1404\":\"48#http-演进\",\"1405\":\"48#get-和-post\",\"1406\":\"48#对比-rpc\",\"1407\":\"48#tcp\",\"1408\":\"48#tcp-udp-区别\",\"1409\":\"48#三次握手\",\"1410\":\"48#四次挥手\",\"1411\":\"48#重传机制\",\"1412\":\"48#流量控制\",\"1413\":\"48#拥塞控制\",\"1414\":\"48#半-全连接队列\",\"1415\":\"48#tcp-优化\",\"1416\":\"48#分片问题\",\"1417\":\"48#粘包问题\",\"1418\":\"48#序列号和确认号\",\"1419\":\"48#保活机制\",\"1420\":\"48#关闭连接\",\"1421\":\"48#ip\",\"1422\":\"48#ip-地址\",\"1423\":\"48#ip-和-mac-地址\",\"1424\":\"48#dns\",\"1425\":\"48#arp\",\"1426\":\"48#dhcp\",\"1427\":\"48#icmp\",\"1428\":\"48#nat\",\"1429\":\"48#igmp\",\"1430\":\"48#操作系统\",\"1431\":\"48#硬件结构\",\"1432\":\"48#冯诺依曼结构\",\"1433\":\"48#指令\",\"1434\":\"48#多级存储器\",\"1435\":\"48#cpu-cache\",\"1436\":\"48#cpu-调度\",\"1437\":\"48#中断\",\"1438\":\"48#数值存储\",\"1439\":\"48#os-结构\",\"1440\":\"48#内核态和用户态\",\"1441\":\"48#内核设计\",\"1442\":\"48#内存管理\",\"1443\":\"48#虚拟内存\",\"1444\":\"48#linux-内存管理\",\"1445\":\"48#内存分配\",\"1446\":\"48#内存回收\",\"1447\":\"48#swap-机制\",\"1448\":\"48#缓存命中率\",\"1449\":\"48#进程管理\",\"1450\":\"48#进程\",\"1451\":\"48#线程\",\"1452\":\"48#进程和线程对比\",\"1453\":\"48#线程和协程对比\",\"1454\":\"48#上下文切换\",\"1455\":\"48#进程间通信\",\"1456\":\"48#管道-pipe\",\"1457\":\"48#命名管道-named-pipe\",\"1458\":\"48#消息队列-message-queue\",\"1459\":\"48#共享内存-shared-memory\",\"1460\":\"48#信号量-semaphore\",\"1461\":\"48#套接字-socket\",\"1462\":\"48#信号-signal\",\"1463\":\"48#线程间通信\",\"1464\":\"48#线程创建数量\",\"1465\":\"48#关闭进程\",\"1466\":\"48#死锁\",\"1467\":\"48#经典同步问题\",\"1468\":\"48#锁机制\",\"1469\":\"48#调度算法\",\"1470\":\"48#进程调度\",\"1471\":\"48#页面调度\",\"1472\":\"48#磁盘调度\",\"1473\":\"48#文件系统\",\"1474\":\"48#基本组成\",\"1475\":\"48#文件使用\",\"1476\":\"48#文件存储\",\"1477\":\"48#空闲空间管理\",\"1478\":\"48#文件-io\",\"1479\":\"48#page-cache\",\"1480\":\"48#设备管理\",\"1481\":\"48#设备控制器\",\"1482\":\"48#设备驱动程序\",\"1483\":\"48#通用块层\",\"1484\":\"48#linux-io-分层\",\"1485\":\"48#网络系统\",\"1486\":\"48#零拷贝\",\"1487\":\"48#i-o-多路复用\",\"1488\":\"48#网络模式\",\"1489\":\"48#一致性哈希\",\"1490\":\"48#网络性能\",\"1491\":\"48#java\",\"1492\":\"48#集合\",\"1493\":\"48#arraylist\",\"1494\":\"48#hashmap\",\"1495\":\"48#hashtable-treemap\",\"1496\":\"48#set\",\"1497\":\"48#concurrenthashmap\",\"1498\":\"48#copyonwritearraylist\",\"1499\":\"48#并发安全的-queue\",\"1500\":\"48#concurrentskiplistmap\",\"1501\":\"48#io\",\"1502\":\"48#java-io-体系\",\"1503\":\"48#io-中的设计模式\",\"1504\":\"48#io-模型\",\"1505\":\"48#并发\",\"1506\":\"48#线程安全的三大特性\",\"1507\":\"48#volatile-关键字\",\"1508\":\"48#创建线程的方式\",\"1509\":\"48#线程生命周期\",\"1510\":\"48#减少线程切换\",\"1511\":\"48#线程池\",\"1512\":\"48#sleep-和wait-对比\",\"1513\":\"48#cas-底层实现\",\"1514\":\"48#threadlocal-原理\",\"1515\":\"48#synchronized-锁机制\",\"1516\":\"48#aqs\",\"1517\":\"48#reentrantlock-原理\",\"1518\":\"48#公平锁和非公平锁的实现\",\"1519\":\"48#jvm\",\"1520\":\"48#内存区域\",\"1521\":\"48#对象创建\",\"1522\":\"48#对象存活判断\",\"1523\":\"48#gc-算法\",\"1524\":\"48#gc-分类\",\"1525\":\"48#gc-实现\",\"1526\":\"48#类文件结构\",\"1527\":\"48#类加载过程\",\"1528\":\"48#类加载器\",\"1529\":\"48#内存排查工具\",\"1530\":\"48#其它\",\"1531\":\"48#反射机制\",\"1532\":\"48#代理模式\",\"1533\":\"48#异常机制\",\"1534\":\"48#static-关键字\",\"1535\":\"48#equals-和-hashcode\",\"1536\":\"48#string-类型\",\"1537\":\"48#mysql\",\"1538\":\"48#三范式\",\"1539\":\"48#sql-注入\",\"1540\":\"48#架构\",\"1541\":\"48#innodb-和-myisam-区别\",\"1542\":\"48#myisam-的优势\",\"1543\":\"48#对比-nosql\",\"1544\":\"48#索引\",\"1545\":\"48#索引类型\",\"1546\":\"48#b-树-对比\",\"1547\":\"48#索引失效情况\",\"1548\":\"48#索引优化\",\"1549\":\"48#事务\",\"1550\":\"48#四个特征\",\"1551\":\"48#并发问题\",\"1552\":\"48#隔离级别\",\"1553\":\"48#三大日志\",\"1554\":\"48#undo-log\",\"1555\":\"48#redo-log\",\"1556\":\"48#bin-log\",\"1557\":\"48#mvvc-机制\",\"1558\":\"48#锁机制-1\",\"1559\":\"48#全局锁\",\"1560\":\"48#表级锁\",\"1561\":\"48#行级锁\",\"1562\":\"48#加锁语句\",\"1563\":\"48#主从同步\",\"1564\":\"48#分库分表\",\"1565\":\"48#sql-语句\",\"1566\":\"48#执行过程\",\"1567\":\"48#语法语句\",\"1568\":\"48#count-效率\",\"1569\":\"48#redis\",\"1570\":\"48#数据结构-1\",\"1571\":\"48#速度快的原因\",\"1572\":\"48#线程模型\",\"1573\":\"48#过期删除策略\",\"1574\":\"48#缓存淘汰机制\",\"1575\":\"48#持久化机制\",\"1576\":\"48#rdb-快照\",\"1577\":\"48#aof-仅追加文件\",\"1578\":\"48#缓存三大问题\",\"1579\":\"48#缓存穿透\",\"1580\":\"48#缓存击穿\",\"1581\":\"48#缓存雪崩\",\"1582\":\"48#分布式锁\",\"1583\":\"48#缓存一致性问题\",\"1584\":\"48#更新数据库-删除缓存\",\"1585\":\"48#删除缓存-更新数据库\",\"1586\":\"48#设计思路\",\"1587\":\"48#高可用模式\",\"1588\":\"48#主从复制\",\"1589\":\"48#哨兵模式\",\"1590\":\"48#集群模式\",\"1591\":\"48#spring\",\"1592\":\"48#ioc-1\",\"1593\":\"48#ioc-理解\",\"1594\":\"48#声明-bean\",\"1595\":\"48#注入-bean\",\"1596\":\"48#bean-作用域\",\"1597\":\"48#bean-生命周期-1\",\"1598\":\"48#自动装配\",\"1599\":\"48#解决循环依赖\",\"1600\":\"48#aop-1\",\"1601\":\"48#aop-理解\",\"1602\":\"48#通知类型\",\"1603\":\"48#mvc\",\"1604\":\"48#mvc-理解\",\"1605\":\"48#核心组件和原理\",\"1606\":\"48#其它-1\",\"1607\":\"48#spring-启动流程\",\"1608\":\"48#常用注解\",\"1609\":\"48#springboot-优势\",\"1610\":\"48#springboot-缺点\",\"1611\":\"48#事务传播行为\",\"1612\":\"48#事务隔离级别\",\"1613\":\"48#spring-cache\",\"1614\":\"48#spring-单例并发问题\",\"1615\":\"48#jpa-取消持久化\",\"1616\":\"48#分布式\",\"1617\":\"48#概念\",\"1618\":\"48#cap-和-base\",\"1619\":\"48#paxos\",\"1620\":\"48#raft\",\"1621\":\"48#api-网关\",\"1622\":\"48#分布式-id\",\"1623\":\"48#rpc\",\"1624\":\"48#消息队列\",\"1625\":\"48#基本概念\",\"1626\":\"48#kafka\",\"1627\":\"48#rabbitmq\",\"1628\":\"48#概念-1\",\"1629\":\"48#常见问题\",\"1630\":\"48#开发工具\",\"1631\":\"48#linux\",\"1632\":\"48#maven\",\"1633\":\"48#git\",\"1634\":\"48#docker\",\"1635\":\"48#系统设计\",\"1636\":\"48#熔断降级\",\"1637\":\"48#服务限流\",\"1638\":\"48#高可用\",\"1639\":\"48#性能测试\",\"1640\":\"48#restful\",\"1641\":\"48#软件工程\",\"1642\":\"48#认证授权\",\"1643\":\"48#sso\",\"1644\":\"48#设计模式\",\"1645\":\"48#单例\",\"1646\":\"48#工厂模式\",\"1647\":\"48#适配器模式\",\"1648\":\"48#策略模式\",\"1649\":\"48#代理模式-1\",\"1650\":\"48#手撕算法\",\"1651\":\"48#lru\",\"1652\":\"48#堆排\",\"1653\":\"48#快排\",\"1654\":\"48#归并排序\",\"1655\":\"48#背包\",\"1656\":\"48#斐波那契\",\"1657\":\"48#二分细节\",\"1658\":\"48#场景题\",\"1659\":\"48@0\",\"1660\":\"48@1\",\"1661\":\"49\",\"1662\":\"49#解法1-异或运算\",\"1663\":\"49#解法2-哈希表\",\"1664\":\"49#方法1-移位\",\"1665\":\"49#方法二-brian-kernighan-算法\",\"1666\":\"49#方法3-分治-variable-precision-swar-算法\",\"1667\":\"49@0\",\"1668\":\"49@1\",\"1669\":\"50\",\"1670\":\"50#子集\",\"1671\":\"50#组合\",\"1672\":\"50#排列\",\"1673\":\"50#子集-1\",\"1674\":\"50#组合-1\",\"1675\":\"50#排列-1\",\"1676\":\"50#组合-2\",\"1677\":\"50#排列-2\",\"1678\":\"50@0\",\"1679\":\"50@1\",\"1680\":\"51\",\"1681\":\"51#more\",\"1682\":\"51#mkdir\",\"1683\":\"51#find\",\"1684\":\"51#grep\",\"1685\":\"51#wc\",\"1686\":\"51#tail\",\"1687\":\"51#tr\",\"1688\":\"51#tar\",\"1689\":\"51#vim\",\"1690\":\"51#终端操作\",\"1691\":\"51#su-sudo\",\"1692\":\"51#用户管理\",\"1693\":\"51#权限管理\",\"1694\":\"51#软件管理\",\"1695\":\"51#systemctl\",\"1696\":\"51#ln\",\"1697\":\"51#date\",\"1698\":\"51#网络通信\",\"1699\":\"51#进程管理\",\"1700\":\"51#系统状态\",\"1701\":\"51#环境变量\",\"1702\":\"51@0\",\"1703\":\"51@1\",\"1704\":\"52\",\"1705\":\"52#前言\",\"1706\":\"52#mock测试\",\"1707\":\"52#引入依赖\",\"1708\":\"52#常用注解\",\"1709\":\"52#初始化\",\"1710\":\"52#打桩\",\"1711\":\"52#模拟返回\",\"1712\":\"52#参数匹配\",\"1713\":\"52#模拟异常\",\"1714\":\"52#调用验证\",\"1715\":\"52#参数捕获\",\"1716\":\"52#springboot测试\",\"1717\":\"52#引入依赖-1\",\"1718\":\"52#编写用例\",\"1719\":\"52@0\",\"1720\":\"52@1\",\"1721\":\"53\",\"1722\":\"53#民航信息化\",\"1723\":\"53#pss-旅客服务系统\",\"1724\":\"53#gds-全球分销系统\",\"1725\":\"53#机票分销\",\"1726\":\"53#分销模式\",\"1727\":\"53#业务模式\",\"1728\":\"53#核心数据\",\"1729\":\"53#航班-sk\",\"1730\":\"53#航班时刻\",\"1731\":\"53#航班状态\",\"1732\":\"53#运价-fd\",\"1733\":\"53#票价\",\"1734\":\"53#舱位-av\",\"1735\":\"53#舱位分类\",\"1736\":\"53#舱位状态\",\"1737\":\"53#舱位缓存\",\"1738\":\"53#专业术语\",\"1739\":\"53#舱位介绍\",\"1740\":\"53#舱位状态-1\",\"1741\":\"53#九大航权\",\"1742\":\"53#第一航权-领空飞越权\",\"1743\":\"53#第二航权-技术经停权\",\"1744\":\"53#第三航权-目的地下客权\",\"1745\":\"53#第四航权-目的地上客权\",\"1746\":\"53#第五航权-中间点权或延远权\",\"1747\":\"53#第六航权-桥梁权\",\"1748\":\"53#第七航权-完全第三国运输权\",\"1749\":\"53#第八航权-境内运输权-连续的国内运输\",\"1750\":\"53#第九航权-完全境内运输权-独立的国内运输\",\"1751\":\"53#国际运价计算引擎\",\"1752\":\"53#技术挑战\",\"1753\":\"53@0\",\"1754\":\"53@1\",\"1755\":\"54\",\"1756\":\"54@0\",\"1757\":\"55\",\"1758\":\"55#犹太教-judaism\",\"1759\":\"55#基督教-christianity\",\"1760\":\"55#东正教-orthodoxy\",\"1761\":\"55#天主教-catholicism\",\"1762\":\"55#马龙派\",\"1763\":\"55#新教-protestantism\",\"1764\":\"55#伊斯兰教-islam\",\"1765\":\"55#什叶派-shiism\",\"1766\":\"55#逊尼派-sunnism\",\"1767\":\"55#其它分支\",\"1768\":\"55@0\",\"1769\":\"55@1\",\"1770\":\"56\",\"1771\":\"56#新的开始\",\"1772\":\"56#入职前的快乐\",\"1773\":\"56#开始痛苦\",\"1774\":\"56#第一个周末\",\"1775\":\"56#第二周啦\",\"1776\":\"56#端午假期\",\"1777\":\"56#第三周\",\"1778\":\"56#第四周\",\"1779\":\"56#第五周\",\"1780\":\"56#第六周\",\"1781\":\"56#第七周\",\"1782\":\"56#第八周\",\"1783\":\"56#第九周\",\"1784\":\"56#第十周\",\"1785\":\"56#第十一周\",\"1786\":\"56#last-week\",\"1787\":\"56@0\",\"1788\":\"56@1\",\"1789\":\"57\",\"1790\":\"57#背景\",\"1791\":\"57#折腾\",\"1792\":\"57#vercel-部署\",\"1793\":\"57#参考\",\"1794\":\"57@0\",\"1795\":\"57@1\",\"1796\":\"58\",\"1797\":\"58@0\",\"1798\":\"58@1\",\"1799\":\"59\",\"1800\":\"59@0\",\"1801\":\"59@1\",\"1802\":\"60\",\"1803\":\"60#爱优b腾\",\"1804\":\"60#在线影视站\",\"1805\":\"60#网盘\",\"1806\":\"60#网盘进阶\",\"1807\":\"60#alist\",\"1808\":\"60#vidhub\",\"1809\":\"60#emby-plex-jellyfin\",\"1810\":\"60#下载站\",\"1811\":\"60#总结对比\",\"1812\":\"60@0\",\"1813\":\"60@1\",\"1814\":\"61\",\"1815\":\"61#时间线\",\"1816\":\"61#旅行\",\"1817\":\"61#书影音\",\"1818\":\"61#运动\",\"1819\":\"61#数码\",\"1820\":\"61#爱情\",\"1821\":\"61@0\",\"1822\":\"61@1\",\"1823\":\"62\",\"1824\":\"62#时间线\",\"1825\":\"62#旅行\",\"1826\":\"62#书影音\",\"1827\":\"62#运动\",\"1828\":\"62#数码\",\"1829\":\"62#爱情\",\"1830\":\"62@0\",\"1831\":\"62@1\",\"1832\":\"63\",\"1833\":\"63#进藏\",\"1834\":\"63#拉萨的第一天\",\"1835\":\"63#拉萨一日游\",\"1836\":\"63#扎基寺\",\"1837\":\"63#西藏博物馆\",\"1838\":\"63#八廓街\",\"1839\":\"63#布达拉宫\",\"1840\":\"63#跟团六日游\",\"1841\":\"63#day01-6-6\",\"1842\":\"63#day02-6-7\",\"1843\":\"63#day03-6-8\",\"1844\":\"63#day04-6-9\",\"1845\":\"63#day05-6-10\",\"1846\":\"63#day06-6-11\",\"1847\":\"63#拉萨的最后一天\",\"1848\":\"63#出藏\",\"1849\":\"63#后记\",\"1850\":\"63@0\",\"1851\":\"63@1\",\"1852\":\"64\",\"1853\":\"64#_1-获取音视频设备\",\"1854\":\"64#_2-获取音视频访问-约束\",\"1855\":\"64#_3-视频特效\",\"1856\":\"64#_4-截取视频帧\",\"1857\":\"64#_5-mediastream-api\",\"1858\":\"64#_6-音视频录制-mediarecorder\",\"1859\":\"64#_7-socketio\",\"1860\":\"64#_8-stun-turn-ice\",\"1861\":\"64#_9-媒体协商过程\",\"1862\":\"64#_10-sdp规范\",\"1863\":\"64@0\",\"1864\":\"64@1\",\"1865\":\"65\",\"1866\":\"65#_1-dash简介\",\"1867\":\"65#_2-配置环境\",\"1868\":\"65#_3-对视频进行编码\",\"1869\":\"65#_4-视频切片\",\"1870\":\"65#_5-编写简易网页播放器\",\"1871\":\"65#_6-配置nginx服务器\",\"1872\":\"65#_7-验证\",\"1873\":\"65#参考\",\"1874\":\"65@0\",\"1875\":\"65@1\",\"1876\":\"66\",\"1877\":\"66#youtube-dl\",\"1878\":\"66#ffmpeg\",\"1879\":\"66@0\",\"1880\":\"66@1\",\"1881\":\"67\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,23],\"1\":[2,20],\"2\":[1,29],\"3\":[1,87],\"4\":[1,21],\"5\":[1,53],\"6\":[1,178],\"7\":[1,40],\"8\":[1,117],\"9\":[1,143],\"10\":[1,47],\"11\":[null,null,1],\"12\":[null,null,1],\"13\":[1],\"14\":[1,179],\"15\":[1,161],\"16\":[1],\"17\":[2,48],\"18\":[2],\"19\":[4,17],\"20\":[3,22],\"21\":[3,21],\"22\":[3,18],\"23\":[2],\"24\":[1,76],\"25\":[1,53],\"26\":[1,25],\"27\":[1,56],\"28\":[null,null,1],\"29\":[null,null,1],\"30\":[2],\"31\":[1,50],\"32\":[1],\"33\":[1,48],\"34\":[1,125],\"35\":[1,18],\"36\":[1,37],\"37\":[1,56],\"38\":[1,52],\"39\":[1,22],\"40\":[1,17],\"41\":[1],\"42\":[1,71],\"43\":[1,25],\"44\":[1,17],\"45\":[1,11],\"46\":[1],\"47\":[1,36],\"48\":[1,33],\"49\":[1,4],\"50\":[1,19],\"51\":[1,103],\"52\":[1,13],\"53\":[1,45],\"54\":[null,null,1],\"55\":[null,null,1],\"56\":[2],\"57\":[1],\"58\":[1,79],\"59\":[1,35],\"60\":[1,31],\"61\":[1,62],\"62\":[1,26],\"63\":[1],\"64\":[1,58],\"65\":[1],\"66\":[1,35],\"67\":[1,55],\"68\":[1,39],\"69\":[1,62],\"70\":[1,54],\"71\":[1,57],\"72\":[1,11],\"73\":[1,91],\"74\":[1,38],\"75\":[1,19],\"76\":[1],\"77\":[1,84],\"78\":[1,46],\"79\":[1,111],\"80\":[1,32],\"81\":[1,28],\"82\":[1,42],\"83\":[1,95],\"84\":[1,55],\"85\":[1,17],\"86\":[null,null,1],\"87\":[null,null,1],\"88\":[3,4],\"89\":[1,25],\"90\":[1,38],\"91\":[1,72],\"92\":[1,31],\"93\":[2,90],\"94\":[1,1],\"95\":[1,52],\"96\":[1,6],\"97\":[1,19],\"98\":[1,23],\"99\":[1,49],\"100\":[2,14],\"101\":[3,51],\"102\":[null,null,1],\"103\":[null,null,1],\"104\":[3,6],\"105\":[1,41],\"106\":[1],\"107\":[1,22],\"108\":[1,13],\"109\":[1,13],\"110\":[1,14],\"111\":[1],\"112\":[1,77],\"113\":[1,53],\"114\":[1,7],\"115\":[1,7],\"116\":[1,4],\"117\":[1,31],\"118\":[1,90],\"119\":[1,44],\"120\":[1,27],\"121\":[1,29],\"122\":[1,58],\"123\":[2],\"124\":[1,145],\"125\":[1,43],\"126\":[1,45],\"127\":[1,39],\"128\":[1,33],\"129\":[1,99],\"130\":[2,35],\"131\":[null,null,1],\"132\":[null,null,2],\"133\":[2],\"134\":[1,110],\"135\":[1],\"136\":[1,21],\"137\":[1,42],\"138\":[1,3],\"139\":[2,76],\"140\":[2,2],\"141\":[1],\"142\":[1,20],\"143\":[1,82],\"144\":[1,24],\"145\":[1,58],\"146\":[1,56],\"147\":[1],\"148\":[1,76],\"149\":[1,15],\"150\":[1,45],\"151\":[2],\"152\":[1,3],\"153\":[1,95],\"154\":[1,188],\"155\":[1,7],\"156\":[1,69],\"157\":[1,43],\"158\":[1,38],\"159\":[1,32],\"160\":[1,25],\"161\":[1,40],\"162\":[1,56],\"163\":[1,72],\"164\":[null,null,1],\"165\":[null,null,1],\"166\":[2],\"167\":[1],\"168\":[2,10],\"169\":[2,19],\"170\":[2,13],\"171\":[1,43],\"172\":[1,35],\"173\":[1,15],\"174\":[1,13],\"175\":[1,31],\"176\":[1,50],\"177\":[1,38],\"178\":[1,44],\"179\":[1,36],\"180\":[null,null,1],\"181\":[null,null,1],\"182\":[2],\"183\":[1,84],\"184\":[1,123],\"185\":[1,5],\"186\":[1,36],\"187\":[1,55],\"188\":[1,130],\"189\":[1,38],\"190\":[1],\"191\":[1,17],\"192\":[1,44],\"193\":[1,25],\"194\":[1,41],\"195\":[1,76],\"196\":[1,184],\"197\":[1,8],\"198\":[null,null,1],\"199\":[null,null,1],\"200\":[2],\"201\":[1,4],\"202\":[1,11],\"203\":[1,23],\"204\":[1,15],\"205\":[1,4],\"206\":[1,6],\"207\":[1,6],\"208\":[1,5],\"209\":[1,18],\"210\":[1,41],\"211\":[1,69],\"212\":[1,31],\"213\":[1],\"214\":[1,42],\"215\":[1,38],\"216\":[1,15],\"217\":[null,null,1],\"218\":[null,null,1],\"219\":[2],\"220\":[1,3],\"221\":[1],\"222\":[1],\"223\":[1,20],\"224\":[1,42],\"225\":[1,3],\"226\":[1,3],\"227\":[1,3],\"228\":[2,67],\"229\":[1,26],\"230\":[1,34],\"231\":[1,29],\"232\":[1,42],\"233\":[1,30],\"234\":[1,26],\"235\":[1,43],\"236\":[1,37],\"237\":[1,41],\"238\":[3,56],\"239\":[1,9],\"240\":[1,187],\"241\":[1,61],\"242\":[1,78],\"243\":[1,10],\"244\":[1,19],\"245\":[1,20],\"246\":[1,8],\"247\":[1,30],\"248\":[1,8],\"249\":[1,15],\"250\":[1,15],\"251\":[1,5],\"252\":[1,10],\"253\":[1,20],\"254\":[1,83],\"255\":[1,28],\"256\":[1],\"257\":[1,4],\"258\":[1,9],\"259\":[1,5],\"260\":[1,11],\"261\":[1],\"262\":[1,15],\"263\":[1,89],\"264\":[1,13],\"265\":[1,11],\"266\":[1,12],\"267\":[1,30],\"268\":[1,44],\"269\":[1,27],\"270\":[1,17],\"271\":[1,15],\"272\":[1,11],\"273\":[1,5],\"274\":[1,22],\"275\":[1,3],\"276\":[1],\"277\":[1,19],\"278\":[1,9],\"279\":[1,10],\"280\":[1,7],\"281\":[1,4],\"282\":[1,44],\"283\":[1,22],\"284\":[null,null,1],\"285\":[null,null,1],\"286\":[2],\"287\":[1,31],\"288\":[1,5],\"289\":[1,20],\"290\":[1,34],\"291\":[1,32],\"292\":[1,24],\"293\":[1,10],\"294\":[1],\"295\":[2,10],\"296\":[2,30],\"297\":[2,7],\"298\":[2,23],\"299\":[1],\"300\":[1,11],\"301\":[1,49],\"302\":[2,12],\"303\":[1],\"304\":[1,68],\"305\":[1,51],\"306\":[1,24],\"307\":[1,2],\"308\":[1,8],\"309\":[1,16],\"310\":[1,15],\"311\":[1,14],\"312\":[2,43],\"313\":[1],\"314\":[1,14],\"315\":[1,24],\"316\":[2,3],\"317\":[1,28],\"318\":[1,33],\"319\":[1,17],\"320\":[1,10],\"321\":[2,21],\"322\":[1,15],\"323\":[2,8],\"324\":[1,33],\"325\":[1],\"326\":[1],\"327\":[2,14],\"328\":[2,13],\"329\":[2,18],\"330\":[1,12],\"331\":[1,30],\"332\":[1,93],\"333\":[1],\"334\":[1,25],\"335\":[1,4],\"336\":[1,10],\"337\":[1],\"338\":[1],\"339\":[1,17],\"340\":[1,22],\"341\":[1,10],\"342\":[2,32],\"343\":[2,18],\"344\":[1],\"345\":[1,20],\"346\":[1,17],\"347\":[1,7],\"348\":[1,65],\"349\":[1,27],\"350\":[1],\"351\":[1,14],\"352\":[1,10],\"353\":[1,35],\"354\":[1,9],\"355\":[1,46],\"356\":[1,28],\"357\":[1,103],\"358\":[1,9],\"359\":[1,36],\"360\":[null,null,1],\"361\":[2],\"362\":[1,69],\"363\":[1,44],\"364\":[1,16],\"365\":[1,42],\"366\":[1,40],\"367\":[1,10],\"368\":[null,null,1],\"369\":[null,null,1],\"370\":[2],\"371\":[1],\"372\":[1,5],\"373\":[1,36],\"374\":[1,26],\"375\":[1,21],\"376\":[1,93],\"377\":[1],\"378\":[1,16],\"379\":[2,13],\"380\":[2,22],\"381\":[2],\"382\":[1,128],\"383\":[1,160],\"384\":[1,26],\"385\":[2,23],\"386\":[1,7],\"387\":[1,16],\"388\":[1,93],\"389\":[1,34],\"390\":[1,27],\"391\":[1,99],\"392\":[1,14],\"393\":[null,null,1],\"394\":[null,null,1],\"395\":[1],\"396\":[1,14],\"397\":[1],\"398\":[1,10],\"399\":[1,16],\"400\":[1,9],\"401\":[1,13],\"402\":[2],\"403\":[1,20],\"404\":[1,32],\"405\":[1,17],\"406\":[1,18],\"407\":[1,53],\"408\":[1,39],\"409\":[1,23],\"410\":[2,41],\"411\":[1,17],\"412\":[1,35],\"413\":[1,40],\"414\":[1,53],\"415\":[2],\"416\":[1,20],\"417\":[2,87],\"418\":[1,115],\"419\":[1,18],\"420\":[1,60],\"421\":[1,47],\"422\":[2,46],\"423\":[1,10],\"424\":[1,31],\"425\":[1,27],\"426\":[1,12],\"427\":[1,34],\"428\":[1,16],\"429\":[1,6],\"430\":[1,23],\"431\":[1,27],\"432\":[1,32],\"433\":[1,22],\"434\":[1,54],\"435\":[2,82],\"436\":[null,null,1],\"437\":[null,null,1],\"438\":[2],\"439\":[1,12],\"440\":[1,9],\"441\":[1,10],\"442\":[1,14],\"443\":[1,52],\"444\":[1],\"445\":[1,71],\"446\":[1,55],\"447\":[1,6],\"448\":[1,29],\"449\":[1],\"450\":[1,152],\"451\":[1,12],\"452\":[1,31],\"453\":[1,53],\"454\":[1],\"455\":[1,20],\"456\":[1,77],\"457\":[2,29],\"458\":[1],\"459\":[1,42],\"460\":[1,103],\"461\":[1,132],\"462\":[1,52],\"463\":[1],\"464\":[1],\"465\":[2,38],\"466\":[1,28],\"467\":[1,48],\"468\":[1],\"469\":[1,33],\"470\":[1,54],\"471\":[1,92],\"472\":[1,14],\"473\":[1],\"474\":[1,45],\"475\":[1,48],\"476\":[1,103],\"477\":[1,41],\"478\":[1,19],\"479\":[1],\"480\":[1,29],\"481\":[1,18],\"482\":[1],\"483\":[1,53],\"484\":[1,16],\"485\":[1,54],\"486\":[1],\"487\":[1,20],\"488\":[1,62],\"489\":[2,34],\"490\":[1,53],\"491\":[1,13],\"492\":[1,19],\"493\":[2,22],\"494\":[1,33],\"495\":[1,35],\"496\":[1,21],\"497\":[1,12],\"498\":[1],\"499\":[1,21],\"500\":[1,10],\"501\":[null,null,1],\"502\":[null,null,1],\"503\":[2,21],\"504\":[2],\"505\":[1,23],\"506\":[1,98],\"507\":[1,71],\"508\":[1,28],\"509\":[1,33],\"510\":[1,25],\"511\":[1,14],\"512\":[1,25],\"513\":[1,11],\"514\":[1,13],\"515\":[2,58],\"516\":[1],\"517\":[1,1],\"518\":[1,47],\"519\":[1,21],\"520\":[1,28],\"521\":[1,44],\"522\":[1,44],\"523\":[1,70],\"524\":[1,36],\"525\":[1,22],\"526\":[1,29],\"527\":[1,6],\"528\":[1,35],\"529\":[1,31],\"530\":[1,103],\"531\":[1,36],\"532\":[1,59],\"533\":[1,46],\"534\":[2,6],\"535\":[1,30],\"536\":[1,39],\"537\":[1,50],\"538\":[1,46],\"539\":[1],\"540\":[1,46],\"541\":[1,176],\"542\":[1,88],\"543\":[2,41],\"544\":[2,114],\"545\":[1,28],\"546\":[1,28],\"547\":[null,null,1],\"548\":[null,null,1],\"549\":[2,43],\"550\":[1,50],\"551\":[1,10],\"552\":[1,46],\"553\":[1,43],\"554\":[1,27],\"555\":[1,16],\"556\":[1,19],\"557\":[1,23],\"558\":[1,28],\"559\":[1],\"560\":[1,54],\"561\":[1,26],\"562\":[2,8],\"563\":[1,14],\"564\":[1,60],\"565\":[1,22],\"566\":[null,null,1],\"567\":[null,null,1],\"568\":[2],\"569\":[1,62],\"570\":[1,91],\"571\":[1],\"572\":[1,25],\"573\":[2],\"574\":[1,25],\"575\":[1,39],\"576\":[1,31],\"577\":[2],\"578\":[1,16],\"579\":[1,21],\"580\":[1,19],\"581\":[2,16],\"582\":[1,18],\"583\":[1,82],\"584\":[3,38],\"585\":[1,55],\"586\":[1,30],\"587\":[1,27],\"588\":[1,10],\"589\":[2],\"590\":[1,38],\"591\":[1,44],\"592\":[1,6],\"593\":[1,44],\"594\":[1,37],\"595\":[1,38],\"596\":[1,54],\"597\":[1],\"598\":[1,65],\"599\":[1,74],\"600\":[1],\"601\":[1,21],\"602\":[1,12],\"603\":[1,35],\"604\":[1,41],\"605\":[1,31],\"606\":[3,17],\"607\":[1,28],\"608\":[1,27],\"609\":[1,36],\"610\":[1,21],\"611\":[1,34],\"612\":[1,37],\"613\":[2],\"614\":[2,46],\"615\":[1,55],\"616\":[3,37],\"617\":[3,8],\"618\":[2,45],\"619\":[2,63],\"620\":[2,25],\"621\":[1,13],\"622\":[1,52],\"623\":[1,73],\"624\":[1,17],\"625\":[1,16],\"626\":[1],\"627\":[1,12],\"628\":[1,36],\"629\":[1],\"630\":[1,9],\"631\":[1,48],\"632\":[1,29],\"633\":[1,31],\"634\":[1,112],\"635\":[1,30],\"636\":[1,47],\"637\":[2,7],\"638\":[1,102],\"639\":[1,74],\"640\":[1,53],\"641\":[1],\"642\":[1,16],\"643\":[1,97],\"644\":[1,13],\"645\":[1,15],\"646\":[1],\"647\":[1,22],\"648\":[1,16],\"649\":[1,42],\"650\":[1],\"651\":[1,27],\"652\":[1,34],\"653\":[2,16],\"654\":[1,16],\"655\":[1,8],\"656\":[1,29],\"657\":[1,23],\"658\":[1,33],\"659\":[1],\"660\":[1],\"661\":[1,28],\"662\":[1,18],\"663\":[1,48],\"664\":[1,32],\"665\":[1,37],\"666\":[1,31],\"667\":[1,26],\"668\":[null,null,1],\"669\":[null,null,1],\"670\":[2],\"671\":[1,40],\"672\":[1,53],\"673\":[1,51],\"674\":[1,44],\"675\":[1,151],\"676\":[1],\"677\":[1,20],\"678\":[1,32],\"679\":[1,18],\"680\":[1,14],\"681\":[1,33],\"682\":[1,26],\"683\":[2,15],\"684\":[2,33],\"685\":[2,5],\"686\":[1,15],\"687\":[4,10],\"688\":[2,41],\"689\":[2,49],\"690\":[2,33],\"691\":[1,16],\"692\":[2,1],\"693\":[2,42],\"694\":[2,18],\"695\":[2,23],\"696\":[1],\"697\":[1,60],\"698\":[1,110],\"699\":[1,72],\"700\":[1],\"701\":[1,42],\"702\":[1,28],\"703\":[1,44],\"704\":[1],\"705\":[1,22],\"706\":[1,20],\"707\":[1,58],\"708\":[1,38],\"709\":[1],\"710\":[1,28],\"711\":[1,21],\"712\":[1],\"713\":[1,34],\"714\":[1,19],\"715\":[1],\"716\":[1,14],\"717\":[1,36],\"718\":[1,20],\"719\":[2,13],\"720\":[1,38],\"721\":[1,8],\"722\":[1,16],\"723\":[1],\"724\":[1,13],\"725\":[1,11],\"726\":[1,43],\"727\":[2,17],\"728\":[1,99],\"729\":[1,60],\"730\":[2,14],\"731\":[2,42],\"732\":[2,64],\"733\":[1,12],\"734\":[1,70],\"735\":[2,26],\"736\":[1,16],\"737\":[1,42],\"738\":[2,13],\"739\":[1,135],\"740\":[3,26],\"741\":[1,28],\"742\":[1,44],\"743\":[2],\"744\":[1,13],\"745\":[1,12],\"746\":[2,12],\"747\":[2,44],\"748\":[2,34],\"749\":[1,116],\"750\":[1,25],\"751\":[1,61],\"752\":[1,14],\"753\":[1,9],\"754\":[1,75],\"755\":[1,3],\"756\":[null,null,1],\"757\":[null,null,1],\"758\":[2],\"759\":[1],\"760\":[1,39],\"761\":[1,14],\"762\":[1,7],\"763\":[1,9],\"764\":[1,8],\"765\":[1,16],\"766\":[1],\"767\":[1,54],\"768\":[1,45],\"769\":[1],\"770\":[1,29],\"771\":[1,32],\"772\":[1,39],\"773\":[1,36],\"774\":[1,33],\"775\":[1,8],\"776\":[1,16],\"777\":[1,52],\"778\":[1,33],\"779\":[1,66],\"780\":[1],\"781\":[3],\"782\":[1,79],\"783\":[1,71],\"784\":[1,26],\"785\":[1,69],\"786\":[1,72],\"787\":[2,28],\"788\":[2,145],\"789\":[2,100],\"790\":[1],\"791\":[2,157],\"792\":[1,57],\"793\":[2],\"794\":[1,34],\"795\":[1,29],\"796\":[2,53],\"797\":[2,83],\"798\":[1],\"799\":[2,79],\"800\":[1,35],\"801\":[1,33],\"802\":[1,51],\"803\":[null,null,1],\"804\":[null,null,1],\"805\":[3],\"806\":[1],\"807\":[3,46],\"808\":[2,36],\"809\":[2,43],\"810\":[2,15],\"811\":[1,56],\"812\":[1,44],\"813\":[1,40],\"814\":[1,49],\"815\":[1],\"816\":[1,29],\"817\":[1,60],\"818\":[2,91],\"819\":[1,22],\"820\":[1,70],\"821\":[1,35],\"822\":[2,136],\"823\":[2,106],\"824\":[1,13],\"825\":[1,23],\"826\":[1,74],\"827\":[1,54],\"828\":[1,92],\"829\":[1,111],\"830\":[1,11],\"831\":[1,45],\"832\":[1,13],\"833\":[1,29],\"834\":[1,29],\"835\":[null,null,1],\"836\":[null,null,1],\"837\":[3],\"838\":[1],\"839\":[1,125],\"840\":[1],\"841\":[1,6],\"842\":[1,49],\"843\":[1,48],\"844\":[1,58],\"845\":[1,12],\"846\":[1,95],\"847\":[1],\"848\":[1,39],\"849\":[1,76],\"850\":[1,53],\"851\":[2,49],\"852\":[3,12],\"853\":[1],\"854\":[1,18],\"855\":[3,26],\"856\":[2,71],\"857\":[2,11],\"858\":[2,24],\"859\":[3,18],\"860\":[1,24],\"861\":[2,15],\"862\":[1],\"863\":[1,76],\"864\":[1,47],\"865\":[1,75],\"866\":[1,35],\"867\":[1,51],\"868\":[1,6],\"869\":[1,30],\"870\":[1,57],\"871\":[1,42],\"872\":[1,56],\"873\":[1,175],\"874\":[null,null,1],\"875\":[null,null,1],\"876\":[2],\"877\":[1],\"878\":[1,14],\"879\":[1,30],\"880\":[1,12],\"881\":[1],\"882\":[1,39],\"883\":[1,73],\"884\":[1],\"885\":[1,9],\"886\":[1,41],\"887\":[1,3],\"888\":[1,19],\"889\":[1,19],\"890\":[1,3],\"891\":[1,2],\"892\":[1,52],\"893\":[1,10],\"894\":[1],\"895\":[1,29],\"896\":[1,32],\"897\":[1,15],\"898\":[1,19],\"899\":[1,16],\"900\":[1,35],\"901\":[1,28],\"902\":[null,null,1],\"903\":[null,null,1],\"904\":[2],\"905\":[1],\"906\":[1,14],\"907\":[1,21],\"908\":[1,75],\"909\":[1,22],\"910\":[2,5],\"911\":[1,20],\"912\":[1,29],\"913\":[1,109],\"914\":[1,8],\"915\":[2,7],\"916\":[1,33],\"917\":[2,35],\"918\":[1,7],\"919\":[1,53],\"920\":[1,46],\"921\":[1,17],\"922\":[1,5],\"923\":[1,56],\"924\":[1,23],\"925\":[1],\"926\":[1,21],\"927\":[1,35],\"928\":[1,48],\"929\":[1,44],\"930\":[null,null,1],\"931\":[null,null,1],\"932\":[2],\"933\":[1,11],\"934\":[1,27],\"935\":[1,50],\"936\":[1,28],\"937\":[1,21],\"938\":[1,10],\"939\":[1,39],\"940\":[1,94],\"941\":[1,53],\"942\":[1,50],\"943\":[1,26],\"944\":[1],\"945\":[1,62],\"946\":[1,86],\"947\":[1,61],\"948\":[1,89],\"949\":[1,50],\"950\":[null,null,1],\"951\":[null,null,1],\"952\":[2],\"953\":[1,10],\"954\":[1,15],\"955\":[1,14],\"956\":[1,10],\"957\":[1,13],\"958\":[1,8],\"959\":[1,22],\"960\":[2,32],\"961\":[1,52],\"962\":[1],\"963\":[1,17],\"964\":[1,23],\"965\":[2,40],\"966\":[1,36],\"967\":[1,54],\"968\":[1],\"969\":[2,28],\"970\":[1,27],\"971\":[1,25],\"972\":[1,5],\"973\":[1,3],\"974\":[1,32],\"975\":[1,54],\"976\":[1,39],\"977\":[1,12],\"978\":[1,19],\"979\":[1,20],\"980\":[null,null,1],\"981\":[null,null,1],\"982\":[1],\"983\":[1,10],\"984\":[2,9],\"985\":[2,23],\"986\":[2,23],\"987\":[2,30],\"988\":[2,32],\"989\":[1,45],\"990\":[1,40],\"991\":[1,23],\"992\":[1],\"993\":[1,67],\"994\":[2,27],\"995\":[2,28],\"996\":[1,52],\"997\":[1],\"998\":[1,49],\"999\":[1,21],\"1000\":[1,27],\"1001\":[1,36],\"1002\":[1,55],\"1003\":[null,null,1],\"1004\":[3,15],\"1005\":[2],\"1006\":[2,33],\"1007\":[1,7],\"1008\":[1,72],\"1009\":[1,74],\"1010\":[1,44],\"1011\":[1,16],\"1012\":[2,78],\"1013\":[2],\"1014\":[1,27],\"1015\":[2,137],\"1016\":[2,104],\"1017\":[2],\"1018\":[1,16],\"1019\":[1,21],\"1020\":[1,7],\"1021\":[1,24],\"1022\":[1,22],\"1023\":[3,32],\"1024\":[1,19],\"1025\":[1,20],\"1026\":[1,25],\"1027\":[1],\"1028\":[1,76],\"1029\":[null,null,1],\"1030\":[2],\"1031\":[1,16],\"1032\":[2,23],\"1033\":[2,22],\"1034\":[2,20],\"1035\":[1,28],\"1036\":[2,12],\"1037\":[1,3],\"1038\":[1,48],\"1039\":[1,47],\"1040\":[1,40],\"1041\":[1,48],\"1042\":[2,29],\"1043\":[1,9],\"1044\":[1,45],\"1045\":[1,58],\"1046\":[1],\"1047\":[1,27],\"1048\":[1,7],\"1049\":[1,150],\"1050\":[1,78],\"1051\":[1,54],\"1052\":[1,10],\"1053\":[2,5],\"1054\":[1,48],\"1055\":[1,71],\"1056\":[3,10],\"1057\":[1,56],\"1058\":[1,56],\"1059\":[1,183],\"1060\":[1,33],\"1061\":[1,34],\"1062\":[null,null,1],\"1063\":[null,null,1],\"1064\":[2],\"1065\":[1,19],\"1066\":[1],\"1067\":[1,58],\"1068\":[1,111],\"1069\":[1,8],\"1070\":[null,null,1],\"1071\":[null,null,1],\"1072\":[2,10],\"1073\":[1,29],\"1074\":[2,84],\"1075\":[1,22],\"1076\":[1,78],\"1077\":[1,95],\"1078\":[1],\"1079\":[1,15],\"1080\":[1,11],\"1081\":[1,12],\"1082\":[1],\"1083\":[1,25],\"1084\":[null,null,1],\"1085\":[null,null,1],\"1086\":[2,12],\"1087\":[1,104],\"1088\":[1,88],\"1089\":[1,32],\"1090\":[1,57],\"1091\":[1,56],\"1092\":[1,65],\"1093\":[1,41],\"1094\":[1],\"1095\":[1,98],\"1096\":[1,31],\"1097\":[1,23],\"1098\":[1,17],\"1099\":[1,62],\"1100\":[1,12],\"1101\":[null,null,1],\"1102\":[null,null,1],\"1103\":[2],\"1104\":[1,53],\"1105\":[1],\"1106\":[1,63],\"1107\":[1,28],\"1108\":[1,53],\"1109\":[1,36],\"1110\":[1,82],\"1111\":[1,23],\"1112\":[2,84],\"1113\":[1,106],\"1114\":[1,136],\"1115\":[1,132],\"1116\":[1,97],\"1117\":[1,10],\"1118\":[1],\"1119\":[1,51],\"1120\":[1,95],\"1121\":[1,15],\"1122\":[null,null,1],\"1123\":[null,null,1],\"1124\":[2,7],\"1125\":[1,62],\"1126\":[1,23],\"1127\":[1],\"1128\":[1,15],\"1129\":[1,25],\"1130\":[1,21],\"1131\":[1,9],\"1132\":[null,null,1],\"1133\":[null,null,1],\"1134\":[2,23],\"1135\":[1,89],\"1136\":[1,139],\"1137\":[2,45],\"1138\":[1,17],\"1139\":[2,36],\"1140\":[1,33],\"1141\":[1,11],\"1142\":[1,26],\"1143\":[1,14],\"1144\":[1,18],\"1145\":[null,null,1],\"1146\":[null,null,1],\"1147\":[3,9],\"1148\":[3,72],\"1149\":[5],\"1150\":[1,16],\"1151\":[1,29],\"1152\":[1,12],\"1153\":[2,9],\"1154\":[3,66],\"1155\":[3,77],\"1156\":[1,25],\"1157\":[null,null,1],\"1158\":[null,null,1],\"1159\":[2],\"1160\":[1],\"1161\":[1,13],\"1162\":[1,44],\"1163\":[1],\"1164\":[1,33],\"1165\":[1,13],\"1166\":[1],\"1167\":[1,20],\"1168\":[1,46],\"1169\":[1,45],\"1170\":[1,34],\"1171\":[1,12],\"1172\":[2],\"1173\":[1,15],\"1174\":[1,54],\"1175\":[1,11],\"1176\":[1,12],\"1177\":[1,16],\"1178\":[2,18],\"1179\":[1,23],\"1180\":[1,45],\"1181\":[1,53],\"1182\":[1],\"1183\":[1,9],\"1184\":[1,14],\"1185\":[1,13],\"1186\":[1,14],\"1187\":[2,25],\"1188\":[2,58],\"1189\":[2,21],\"1190\":[1,16],\"1191\":[2,14],\"1192\":[2,33],\"1193\":[1],\"1194\":[1,27],\"1195\":[1],\"1196\":[3,31],\"1197\":[2,16],\"1198\":[3,8],\"1199\":[3,8],\"1200\":[2,26],\"1201\":[1,8],\"1202\":[1,28],\"1203\":[1,64],\"1204\":[2,33],\"1205\":[1,24],\"1206\":[2,21],\"1207\":[2,42],\"1208\":[null,null,1],\"1209\":[null,null,1],\"1210\":[3],\"1211\":[1,23],\"1212\":[2,43],\"1213\":[1,50],\"1214\":[1,61],\"1215\":[1,27],\"1216\":[1,13],\"1217\":[1,52],\"1218\":[1,125],\"1219\":[1,74],\"1220\":[1,44],\"1221\":[1,51],\"1222\":[1,51],\"1223\":[1,22],\"1224\":[1,67],\"1225\":[1,31],\"1226\":[1,122],\"1227\":[1,41],\"1228\":[1,97],\"1229\":[1,21],\"1230\":[null,null,1],\"1231\":[null,null,1],\"1232\":[2],\"1233\":[1,10],\"1234\":[1,35],\"1235\":[1,22],\"1236\":[1,31],\"1237\":[1,4],\"1238\":[1,20],\"1239\":[1,20],\"1240\":[1,45],\"1241\":[null,null,1],\"1242\":[null,null,1],\"1243\":[2],\"1244\":[1,29],\"1245\":[1,23],\"1246\":[2,17],\"1247\":[1,6],\"1248\":[1],\"1249\":[1,13],\"1250\":[1,35],\"1251\":[2,12],\"1252\":[1],\"1253\":[1,22],\"1254\":[1,14],\"1255\":[1],\"1256\":[1,28],\"1257\":[1,19],\"1258\":[1,17],\"1259\":[1,27],\"1260\":[1],\"1261\":[1,46],\"1262\":[1,13],\"1263\":[3,108],\"1264\":[1,83],\"1265\":[1,4],\"1266\":[3,10],\"1267\":[3,9],\"1268\":[1,17],\"1269\":[2,115],\"1270\":[null,null,1],\"1271\":[null,null,1],\"1272\":[1],\"1273\":[1,4],\"1274\":[1,15],\"1275\":[1,20],\"1276\":[1,35],\"1277\":[1,9],\"1278\":[2,40],\"1279\":[2,36],\"1280\":[1,47],\"1281\":[1,86],\"1282\":[1,9],\"1283\":[2,48],\"1284\":[2,35],\"1285\":[2,3],\"1286\":[2,11],\"1287\":[1,30],\"1288\":[2,14],\"1289\":[1,16],\"1290\":[1,34],\"1291\":[1,19],\"1292\":[null,null,1],\"1293\":[null,null,1],\"1294\":[1],\"1295\":[1],\"1296\":[1,30],\"1297\":[1,32],\"1298\":[2,21],\"1299\":[1,21],\"1300\":[1,34],\"1301\":[1,51],\"1302\":[1,24],\"1303\":[1,32],\"1304\":[1,34],\"1305\":[null,null,1],\"1306\":[null,null,1],\"1307\":[3,7],\"1308\":[1],\"1309\":[1,24],\"1310\":[1,37],\"1311\":[1,32],\"1312\":[1],\"1313\":[1],\"1314\":[1,24],\"1315\":[1,9],\"1316\":[1,19],\"1317\":[1,7],\"1318\":[1,6],\"1319\":[1,20],\"1320\":[1,13],\"1321\":[1,12],\"1322\":[1,48],\"1323\":[1,10],\"1324\":[1,13],\"1325\":[1],\"1326\":[1,64],\"1327\":[1,6],\"1328\":[1,10],\"1329\":[1,51],\"1330\":[3,42],\"1331\":[1,10],\"1332\":[1,53],\"1333\":[1,56],\"1334\":[1],\"1335\":[2,27],\"1336\":[1,47],\"1337\":[1,55],\"1338\":[1,68],\"1339\":[1,5],\"1340\":[1],\"1341\":[1,37],\"1342\":[1,25],\"1343\":[1,40],\"1344\":[1,98],\"1345\":[1,56],\"1346\":[1,28],\"1347\":[1,101],\"1348\":[1,6],\"1349\":[1,26],\"1350\":[2,65],\"1351\":[2,94],\"1352\":[null,null,1],\"1353\":[null,null,1],\"1354\":[1],\"1355\":[2,19],\"1356\":[1],\"1357\":[2,48],\"1358\":[3,47],\"1359\":[1],\"1360\":[2,14],\"1361\":[2,46],\"1362\":[1,16],\"1363\":[1,41],\"1364\":[1],\"1365\":[1,27],\"1366\":[2,42],\"1367\":[2,86],\"1368\":[1,91],\"1369\":[1,107],\"1370\":[2,16],\"1371\":[1,16],\"1372\":[1,34],\"1373\":[1,19],\"1374\":[1,40],\"1375\":[1,38],\"1376\":[1],\"1377\":[1],\"1378\":[1,28],\"1379\":[1,58],\"1380\":[1,29],\"1381\":[2,9],\"1382\":[1,60],\"1383\":[1,52],\"1384\":[1],\"1385\":[1,10],\"1386\":[1,8],\"1387\":[1,19],\"1388\":[1,10],\"1389\":[1,11],\"1390\":[1,19],\"1391\":[1],\"1392\":[1],\"1393\":[3,25],\"1394\":[1,51],\"1395\":[1,71],\"1396\":[1,38],\"1397\":[1],\"1398\":[2,58],\"1399\":[2,29],\"1400\":[2,73],\"1401\":[2,38],\"1402\":[2,74],\"1403\":[1,22],\"1404\":[2,87],\"1405\":[3,33],\"1406\":[2,43],\"1407\":[1],\"1408\":[3,19],\"1409\":[1,103],\"1410\":[1,88],\"1411\":[1,48],\"1412\":[1,67],\"1413\":[1,67],\"1414\":[2,36],\"1415\":[2,26],\"1416\":[1,19],\"1417\":[1,32],\"1418\":[1,52],\"1419\":[1,23],\"1420\":[1,76],\"1421\":[1],\"1422\":[2,41],\"1423\":[4,31],\"1424\":[1,15],\"1425\":[1,14],\"1426\":[1,33],\"1427\":[1,29],\"1428\":[1,19],\"1429\":[1,6],\"1430\":[1],\"1431\":[1],\"1432\":[1,24],\"1433\":[1,16],\"1434\":[1,40],\"1435\":[2,133],\"1436\":[2,42],\"1437\":[1,38],\"1438\":[1,29],\"1439\":[2],\"1440\":[1,21],\"1441\":[1,10],\"1442\":[1],\"1443\":[1,132],\"1444\":[2,48],\"1445\":[1,58],\"1446\":[1,136],\"1447\":[2,27],\"1448\":[1,64],\"1449\":[1],\"1450\":[1,44],\"1451\":[1,24],\"1452\":[1,12],\"1453\":[1,13],\"1454\":[1,35],\"1455\":[1,5],\"1456\":[3,12],\"1457\":[4,10],\"1458\":[4,12],\"1459\":[4,19],\"1460\":[3,42],\"1461\":[3,50],\"1462\":[3,24],\"1463\":[1,54],\"1464\":[1,33],\"1465\":[1,42],\"1466\":[1,48],\"1467\":[1,34],\"1468\":[1,62],\"1469\":[1],\"1470\":[1,84],\"1471\":[1,37],\"1472\":[1,23],\"1473\":[1,8],\"1474\":[1,80],\"1475\":[1,19],\"1476\":[1,43],\"1477\":[1,18],\"1478\":[2,72],\"1479\":[2,53],\"1480\":[1,12],\"1481\":[1,39],\"1482\":[1,16],\"1483\":[1,35],\"1484\":[3,26],\"1485\":[1],\"1486\":[1,80],\"1487\":[3,143],\"1488\":[1,103],\"1489\":[1,27],\"1490\":[1,31],\"1491\":[1],\"1492\":[1],\"1493\":[1,19],\"1494\":[1,37],\"1495\":[2,11],\"1496\":[1,13],\"1497\":[1,79],\"1498\":[1,19],\"1499\":[2,48],\"1500\":[1,10],\"1501\":[1],\"1502\":[3,36],\"1503\":[2,28],\"1504\":[2,31],\"1505\":[1],\"1506\":[1,31],\"1507\":[2,9],\"1508\":[1,16],\"1509\":[1,21],\"1510\":[1,5],\"1511\":[1,133],\"1512\":[3,31],\"1513\":[2,23],\"1514\":[2,155],\"1515\":[2,50],\"1516\":[1,54],\"1517\":[2,29],\"1518\":[1,32],\"1519\":[1],\"1520\":[1,57],\"1521\":[1,53],\"1522\":[1,34],\"1523\":[2,42],\"1524\":[2,93],\"1525\":[2,100],\"1526\":[1,12],\"1527\":[1,62],\"1528\":[1,39],\"1529\":[1,54],\"1530\":[1],\"1531\":[1,23],\"1532\":[1,71],\"1533\":[1,66],\"1534\":[2,33],\"1535\":[4,24],\"1536\":[2,42],\"1537\":[1],\"1538\":[1,12],\"1539\":[2,37],\"1540\":[1,37],\"1541\":[4,15],\"1542\":[2,18],\"1543\":[2,32],\"1544\":[1],\"1545\":[1,11],\"1546\":[2,40],\"1547\":[1,24],\"1548\":[1,29],\"1549\":[1],\"1550\":[1,15],\"1551\":[1,12],\"1552\":[1,25],\"1553\":[1,9],\"1554\":[2,29],\"1555\":[2,69],\"1556\":[2,89],\"1557\":[2,112],\"1558\":[1,5],\"1559\":[1,12],\"1560\":[1,25],\"1561\":[1,27],\"1562\":[1,17],\"1563\":[1,89],\"1564\":[1,41],\"1565\":[2],\"1566\":[1,32],\"1567\":[1,166],\"1568\":[2,14],\"1569\":[1],\"1570\":[1,39],\"1571\":[1,33],\"1572\":[1,29],\"1573\":[1,29],\"1574\":[1,36],\"1575\":[1],\"1576\":[2,26],\"1577\":[2,56],\"1578\":[1],\"1579\":[1,28],\"1580\":[1,19],\"1581\":[1,17],\"1582\":[1,46],\"1583\":[1,4],\"1584\":[3,10],\"1585\":[3,9],\"1586\":[1,17],\"1587\":[1],\"1588\":[1,17],\"1589\":[1,15],\"1590\":[1,17],\"1591\":[1],\"1592\":[1],\"1593\":[2,12],\"1594\":[2,36],\"1595\":[2,26],\"1596\":[2,24],\"1597\":[2,26],\"1598\":[1,71],\"1599\":[1,98],\"1600\":[1],\"1601\":[2,16],\"1602\":[1,10],\"1603\":[1],\"1604\":[2,21],\"1605\":[1,26],\"1606\":[1],\"1607\":[2,19],\"1608\":[1,107],\"1609\":[2,22],\"1610\":[2,7],\"1611\":[1,36],\"1612\":[1,33],\"1613\":[2,109],\"1614\":[2,22],\"1615\":[2,15],\"1616\":[1],\"1617\":[1,21],\"1618\":[3,71],\"1619\":[1,47],\"1620\":[1,86],\"1621\":[2,18],\"1622\":[2,50],\"1623\":[1,68],\"1624\":[1],\"1625\":[1,79],\"1626\":[1,49],\"1627\":[1],\"1628\":[1,99],\"1629\":[1,105],\"1630\":[1],\"1631\":[1,104],\"1632\":[1,86],\"1633\":[1,47],\"1634\":[1,136],\"1635\":[1],\"1636\":[1,42],\"1637\":[1,33],\"1638\":[1,35],\"1639\":[1,15],\"1640\":[1,29],\"1641\":[1,24],\"1642\":[1,52],\"1643\":[1,56],\"1644\":[1],\"1645\":[1,39],\"1646\":[1,3],\"1647\":[1,1],\"1648\":[1,12],\"1649\":[1,5],\"1650\":[1],\"1651\":[1,56],\"1652\":[1,31],\"1653\":[1,42],\"1654\":[1,36],\"1655\":[1,23],\"1656\":[1,10],\"1657\":[1,29],\"1658\":[1,87],\"1659\":[null,null,1],\"1660\":[null,null,1],\"1661\":[2,11],\"1662\":[2,31],\"1663\":[2,39],\"1664\":[2,47],\"1665\":[4,34],\"1666\":[7,75],\"1667\":[null,null,1],\"1668\":[null,null,1],\"1669\":[2,49],\"1670\":[1,36],\"1671\":[1,35],\"1672\":[1,47],\"1673\":[1,50],\"1674\":[1,54],\"1675\":[1,69],\"1676\":[1,48],\"1677\":[1,49],\"1678\":[null,null,1],\"1679\":[null,null,1],\"1680\":[2],\"1681\":[1,7],\"1682\":[1,5],\"1683\":[1,17],\"1684\":[1,7],\"1685\":[1,24],\"1686\":[1,11],\"1687\":[1,13],\"1688\":[1,48],\"1689\":[1,11],\"1690\":[1,22],\"1691\":[2,14],\"1692\":[1,45],\"1693\":[1,21],\"1694\":[1,9],\"1695\":[1,13],\"1696\":[1,15],\"1697\":[1,26],\"1698\":[1,31],\"1699\":[1,15],\"1700\":[1,24],\"1701\":[1,29],\"1702\":[null,null,1],\"1703\":[null,null,1],\"1704\":[2],\"1705\":[1,32],\"1706\":[1,7],\"1707\":[1,21],\"1708\":[1,28],\"1709\":[1,23],\"1710\":[1],\"1711\":[1,42],\"1712\":[1,67],\"1713\":[1,33],\"1714\":[1,46],\"1715\":[1,46],\"1716\":[1,46],\"1717\":[1,33],\"1718\":[1,32],\"1719\":[null,null,1],\"1720\":[null,null,1],\"1721\":[1,12],\"1722\":[1,39],\"1723\":[2,46],\"1724\":[2,27],\"1725\":[1],\"1726\":[1,35],\"1727\":[1,18],\"1728\":[1,25],\"1729\":[2,20],\"1730\":[1,46],\"1731\":[1,8],\"1732\":[2,50],\"1733\":[1,11],\"1734\":[2,26],\"1735\":[1,49],\"1736\":[1,29],\"1737\":[1,46],\"1738\":[1,35],\"1739\":[1,26],\"1740\":[2,18],\"1741\":[1,16],\"1742\":[2,4],\"1743\":[2,11],\"1744\":[2,4],\"1745\":[2,6],\"1746\":[2,16],\"1747\":[2,5],\"1748\":[2,2],\"1749\":[4,3],\"1750\":[4,3],\"1751\":[1,19],\"1752\":[1,34],\"1753\":[null,null,1],\"1754\":[null,null,1],\"1755\":[1],\"1756\":[null,null,1],\"1757\":[1],\"1758\":[2,9],\"1759\":[2,19],\"1760\":[2,3],\"1761\":[2,10],\"1762\":[1,11],\"1763\":[2,6],\"1764\":[2,16],\"1765\":[2,14],\"1766\":[2,6],\"1767\":[1,132],\"1768\":[null,null,1],\"1769\":[null,null,1],\"1770\":[1],\"1771\":[1,31],\"1772\":[1,12],\"1773\":[1,39],\"1774\":[1,15],\"1775\":[1,18],\"1776\":[1,17],\"1777\":[1,10],\"1778\":[1,17],\"1779\":[1,25],\"1780\":[1,3],\"1781\":[1,56],\"1782\":[1,11],\"1783\":[1,16],\"1784\":[1,9],\"1785\":[1,28],\"1786\":[2,107],\"1787\":[null,null,1],\"1788\":[null,null,1],\"1789\":[5],\"1790\":[1,48],\"1791\":[1,221],\"1792\":[2,110],\"1793\":[1,24],\"1794\":[null,null,1],\"1795\":[null,null,1],\"1796\":[1,85],\"1797\":[null,null,1],\"1798\":[null,null,1],\"1799\":[1,56],\"1800\":[null,null,1],\"1801\":[null,null,1],\"1802\":[1],\"1803\":[1,36],\"1804\":[1,21],\"1805\":[1,42],\"1806\":[1,6],\"1807\":[1,9],\"1808\":[1,15],\"1809\":[3,31],\"1810\":[1,51],\"1811\":[1,63],\"1812\":[null,null,1],\"1813\":[null,null,1],\"1814\":[2],\"1815\":[1,39],\"1816\":[1,25],\"1817\":[1,40],\"1818\":[1,18],\"1819\":[1,30],\"1820\":[1,1],\"1821\":[null,null,1],\"1822\":[null,null,1],\"1823\":[2],\"1824\":[1,11],\"1825\":[1,102],\"1826\":[1,48],\"1827\":[1,17],\"1828\":[1,47],\"1829\":[1,3],\"1830\":[null,null,1],\"1831\":[null,null,1],\"1832\":[2,15],\"1833\":[1,110],\"1834\":[1,44],\"1835\":[1],\"1836\":[1,33],\"1837\":[1,35],\"1838\":[1,14],\"1839\":[1,11],\"1840\":[1,12],\"1841\":[2,62],\"1842\":[3,40],\"1843\":[3,53],\"1844\":[3,75],\"1845\":[3,15],\"1846\":[3,50],\"1847\":[1,31],\"1848\":[1,25],\"1849\":[1,58],\"1850\":[null,null,1],\"1851\":[null,null,1],\"1852\":[2],\"1853\":[2,8],\"1854\":[2,28],\"1855\":[2,36],\"1856\":[2,10],\"1857\":[3,11],\"1858\":[3,51],\"1859\":[2,39],\"1860\":[4,48],\"1861\":[2,43],\"1862\":[2,90],\"1863\":[null,null,1],\"1864\":[null,null,1],\"1865\":[1],\"1866\":[2,16],\"1867\":[2,31],\"1868\":[2,61],\"1869\":[2,24],\"1870\":[2,66],\"1871\":[2,60],\"1872\":[2,9],\"1873\":[1,25],\"1874\":[null,null,1],\"1875\":[null,null,1],\"1876\":[4],\"1877\":[2,27],\"1878\":[1,40],\"1879\":[null,null,1],\"1880\":[null,null,1],\"1881\":[1,3]},\"averageFieldLength\":[1.2656008103790246,38.30146009210817,0.38640999380445773],\"storedFields\":{\"0\":{\"h\":\"个人主页\",\"t\":[\"酷安\",\"玩机数码社区\",\"豆瓣\",\"已标记 702 部影视【科幻 -> 历史 -> 战争】\",\"Keep\",\"跑步1354公里，骑行1087公里。有氧 > 撸铁\",\"500px\",\"摄影学习ing，尼康风光狗\",\"足迹\",\"游历 36 城，人生梦想318\"]},\"1\":{\"h\":\"AQS 源码解析\",\"t\":[\"JDK 14 的 AQS 相比 JDK 8 有了较大的改进，之后一直到 JDK 17 都没有改动，本文以 JDK 17 的源码为例，学习 AQS 的设计。前置知识：CLH 锁、LockSupport、常用的锁工具如ReentrantLock基本用法。\"]},\"2\":{\"h\":\"概述\",\"t\":[\"AbstractQueuedSynchronizer（AQS）是 Java 并发包中提供的一个用于构建锁和其他同步器的框架。AQS 采用了基于 CLH 锁的 FIFO 等待队列，通过队列中的节点来管理等待线程。当一个线程尝试获取锁但失败时，它会被包装成一个节点并加入等待队列，然后进入自旋等待状态。当持有锁的线程释放锁时，它会唤醒等待队列中的第一个节点，使其有机会获取锁。\",\"AQS 的主要目标是提供一种灵活的、可重用的框架，使得开发人员能够相对容易地构建各种形式的同步器，例如 ReentrantLock、Semaphore、CountDownLatch 等，不同类型的同步器只需要实现获取锁和释放锁的逻辑即可，而其它部分则由 AQS 提供了通用的框架。\"]},\"3\":{\"h\":\"类结构\",\"t\":[\"顶层的AbstractOwnableSynchronizer很简单，里面定义了一个exclusiveOwnerThread 排他性的拥有者线程，表示当前拥有锁的线程实例，但是在 AQS 中并没有使用，子类实现的具体的同步器可能会用到。\",\"public abstract class AbstractOwnableSynchronizer implements java.io.Serializable { private transient Thread exclusiveOwnerThread; }\",\"子类AbstractQueuedSynchronizer内部定义了队列的节点 Node，通过 prev/next 串联起来构成等待队列，并扩展出三个子类:\",\"ExclusiveNode 排他节点\",\"SharedNode 共享节点\",\"ConditionNode 条件节点\",\"AQS 队列本身主要有 head, tail, state 三个重要属性：\",\"public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer { private transient volatile Node head; // 等待队列的对头 private transient volatile Node tail; // 等待队列的队尾 private volatile int state; // 队列的同步状态 // 队列节点所关联线程的几个状态常量（注意和队列的状态区别开） static final int WAITING = 1; // must be 1 线程等待 static final int CANCELLED = 0x80000000; // must be negative 取消等待 static final int COND = 2; // in a condition wait 条件等待 // 抽象队列节点 abstract static class Node { volatile Node prev; volatile Node next; // 节点关联的请求线程 Thread waiter; // 节点状态，非负值表示正常 volatile int status; // written by owner, atomic bit ops by others // 配套工具方法 } // Condition 实现 public class ConditionObject implements Condition { private transient ConditionNode firstWaiter; private transient ConditionNode lastWaiter; // Condition 配套方法 } }\"]},\"4\":{\"h\":\"队列构造\",\"t\":[\"当第一次有线程获取不到锁，关联的节点需要暂时入队时，会初始化同步器，也就是 AQS 等待队列，对应tryInitializeHead()方法，初始化之后队列的头尾节点指向同一个 ExclusiveNode，这个头节点只是作为占位的虚拟节点，并不实际代表某个线程。\",\"然后再次尝试获取锁，如果还是拿不到就真的要把当前线程封装成 Node 入队了，后续如果有更多线程竞争资源，也是一样的放到队尾，只不过源码中入队的操作很克制，只有多次自旋拿不到资源才会真的入队。\"]},\"5\":{\"h\":\"核心方法\",\"t\":[\"以 ReentrantLock 可重入锁为例，当执行 lock 加锁时，就会间接调用 AQS 的核心acquire/acquireInterruptibly/tryAcquireNanos 这些获取方式去尝试竞争资源，内部会通过具体的子类定义的tryAcquire去尝试修改 state 表示获取资源。\",\"而执行 unlock 解锁时，就会通过 AQS 的release -> tryRelease方法修改 state 变量以释放资源，然后通过signalNext唤醒下一个等待队列中的线程，完成共享资源的竞争和释放。因此说，AQS 提供的一种模板方法。\",\"通常，同步器需要重写的模板调用方法有五个：\",\"方法名\",\"描述\",\"boolean tryAcquire(int)\",\"独占式获取同步状态，实现此方法需要查询当前状态并判断同步状是否符合预期，然后再进行CAS设置同步状态\",\"boolean tryRelease(int)\",\"独占式释放同步状态，等待获取同步状态的线程将有机会获取同步状态\",\"boolean isHeldExclusively()\",\"当前同步器是否在独占模式下被线程占用，一般此方法表示是否被当前线程所独占\",\"int tryAcquireShared(int)\",\"共享式获取同步状态，反加大于等于0(等于0表示下个等待节点可能获取锁失败，大于0表示后面的等待节点获取锁很可能成功)，表示获取成功，反之，获取失败。\",\"boolean tryReleaseShared(int)\",\"共享式释放同步状态\"]},\"6\":{\"h\":\"acquire\",\"t\":[\"final int acquire(Node node, // 一般是 null，除非是 ConditionNode int arg, // 请求参数，例如重入次数 boolean shared, // 排他/共享 boolean interruptible, // 是否可中断 boolean timed, // 是否超时 long time) { // 超时事件，单位纳秒 Thread current = Thread.currentThread(); byte spins = 0, postSpins = 0; // retries upon unpark of first thread boolean interrupted = false, first = false; // 入队之后当前线程关联节点的前继 Node pred = null; for (;;) { if (!first && (pred = (node == null) ? null : node.prev) != null // 入队前 node = null 跳过这里 && !(first = (head == pred))) // 入队后如果当前线程不是 head 的直接后继，即队列里还有其它线程在等待走这段逻辑 { // 前继已经取消，需要清理已经取消的节点，然后重新循环 if (pred.status < 0) { cleanQueue(); continue; } else if (pred.prev == null) { // 前继已经是 head 队头了 Thread.onSpinWait(); continue; } } // 没入队，或者入队后是 head 的直接后继 if (first || pred == null) { // 尝试获取资源 // 例如 ReentrantLock 校验 state 修改 exclusiveOwnerThread 为本线程来获取锁 boolean acquired; try { if (shared) acquired = (tryAcquireShared(arg) >= 0); else acquired = tryAcquire(arg); } catch (Throwable ex) { cancelAcquire(node, interrupted, false); throw ex; } // 拿到锁了就返回，整个方法唯一的正常结束点 // 其它分支都会继续循环，除非超时/中断/异常 if (acquired) { // 如果当前是头节点的直接后继，head 出队，node 成为新的 head（head 出队，而不是 node 出队，应该是可以简化指针的切换） if (first) { node.prev = null; head = node; pred.next = null; node.waiter = null; if (shared) signalNextIfShared(node); if (interrupted) current.interrupt(); } return 1; } } // 资源正被其它线程占有，当前线程需要关联一个节点入队 if (node == null) { if (shared) node = new SharedNode(); else node = new ExclusiveNode(); } else if (pred == null) { // 这里是 else，也就是说，真正入队之前会再自旋一次，因为入队的开销是比较大的 // 如果只有一个等待的线程，那么 pred 一直为 null，一直在这里循环 node.waiter = current; Node t = tail; node.setPrevRelaxed(t); if (t == null) // 第一次有节点入队才初始化 AQS 队列，初始化完了之后再自旋一次 tryInitializeHead(); else if (!casTail(t, node)) // 将 tail 指向 node，如果失败设置 pred = node.prev = null 后重试 node.setPrevRelaxed(null); else // 原来队尾的 next 指向 node 完成入队 t.next = node; } else if (first && spins != 0) { // 被 unpark 唤醒后又没抢到资源，尝试多次自旋 --spins; Thread.onSpinWait(); // CPU 指令，高效自旋 } else if (node.status == 0) { // 自旋完了还是没抢到，修改 state 状态后再自旋一次；如果还是抢不到，就又要被 park 了.../(ㄒoㄒ)/~~ node.status = WAITING; } else { // 拿锁失败，park long nanos; // 自旋次数 = 2^n + 1 随着被 park 次数增加而增加，使得长期未拿到资源的线程有更多自旋机会，更容易拿到 spins = postSpins = (byte)((postSpins << 1) | 1); // 一直到这里都还没拿到资源，就会 park 暂停线程，等待其它线程 unpark if (!timed) LockSupport.park(this); else if ((nanos = time - System.nanoTime()) > 0L) LockSupport.parkNanos(this, nanos); else break; // 到这里说明其它某个线程执行了 unpark，当前线程清除 state 状态开始竞争资源 node.clearStatus(); if ((interrupted |= Thread.interrupted()) && interruptible) break; } } // 异常/超时/中断，取消竞争 return cancelAcquire(node, interrupted, interruptible); }\",\"关于cleanQueue方法，在多线程下麻烦死的指针变换可以看这里：Jdk17 AQS cleanQueue方法源码分析\"]},\"7\":{\"h\":\"release\",\"t\":[\"// AQS#release public final boolean release(int arg) { if (tryRelease(arg)) { // 由实现类定义 signalNext(head); return true; } return false; } // AQS#signalNext // h 一般就是对头 head，除了在 cleanQueue 里是要清除的已取消节点 private static void signalNext(Node h) { Node s; if (h != null && (s = h.next) != null && s.status != 0) { // 修改后继节点的 state = ~WAITING s.getAndUnsetStatus(WAITING); // 唤醒等待的线程 LockSupport.unpark(s.waiter); } }\"]},\"8\":{\"h\":\"条件队列\",\"t\":[\"AQS 里面还定义了一个 ConditionObject 条件对象，JDK 里面唯一的 Condition 接口实现类，和 ConditionNode 一起构建条件队列，应用于各种 BlockingQueue、CyclicBarrier 等工具。\",\"条件队列入对的对外接口是各种await方法，将线程关联的节点移出 AQS 的等待队列，移入某个条件对象的条件队列：\",\"public final void await() throws InterruptedException { if (Thread.interrupted()) throw new InterruptedException(); ConditionNode node = new ConditionNode(); // 进入条件队列，并释放所持有的资源 int savedState = enableWait(node); // 设置当前对象为阻塞资源 LockSupport.setCurrentBlocker(this); boolean interrupted = false, cancelled = false, rejected = false; // 必须不在 AQS 的等待队列里 while (!canReacquire(node)) { if (interrupted |= Thread.interrupted()) { if (cancelled = (node.getAndUnsetStatus(COND) & COND) != 0) break; } else if ((node.status & COND) != 0) { try { // 阻塞关联线程 if (rejected) node.block(); else ForkJoinPool.managedBlock(node); } catch (RejectedExecutionException ex) { rejected = true; } catch (InterruptedException ie) { interrupted = true; } } else Thread.onSpinWait(); // awoke while enqueuing } // 到这里说明其它线程 unpark 了，撤销阻塞对象，清除状态后竞争资源 LockSupport.setCurrentBlocker(null); node.clearStatus(); acquire(node, savedState, false, false, false, 0L); if (interrupted) { if (cancelled) { unlinkCancelledWaiters(node); throw new InterruptedException(); } Thread.currentThread().interrupt(); } }\",\"反之，唤醒则对应signal->doSignal方法，从条件队列中移出，进入 AQS 等待队列中，之后便拥有竞争锁的权利：\",\"// ConditionObject#doSignal private void doSignal(ConditionNode first, boolean all) { while (first != null) { ConditionNode next = first.nextWaiter; if ((firstWaiter = next) == null) lastWaiter = null; if ((first.getAndUnsetStatus(COND) & COND) != 0) { enqueue(first); if (!all) break; } first = next; } } // AQS#enqueue final void enqueue(Node node) { if (node != null) { for (;;) { Node t = tail; node.setPrevRelaxed(t); // avoid unnecessary fence if (t == null) // initialize tryInitializeHead(); else if (casTail(t, node)) { t.next = node; if (t.status < 0) // wake up to clean link LockSupport.unpark(node.waiter); break; } } } }\"]},\"9\":{\"h\":\"同步器实现\",\"t\":[\"JUC 包里的很多同步器都是基于 AQS 暴露的 API 实现的，通过在内部定义一个继承自 AQS 的 Sync 实例，重写 acquire/release 等方法。不同的同步器主要的区别就在于对队列同步状态的不同定义：\",\"Synchronizer\",\"State Definition\",\"ReentrantLock\",\"资源表示独占锁。state 为 0 表示锁可用；为 1 表示被占用；为 N 表示重入次数\",\"CountDownLatch\",\"资源表示倒数计数器。state 为 0 表示计数器归零；所有线程都可以访问资源；为 N 表示计数器未归零，所有线程都需要阻塞\",\"Semaphore\",\"资源表示信号量/令牌。state ≤ 0 表示没有令牌可用，所有线程都需要阻塞；大于 0 表示由令牌可用，线程每获取一个令牌 state减 1，线程没释放一个令牌，state 加 1\",\"ReentrantReadWriteLock\",\"资源表示共享的读锁和独占的写锁。state 逻辑上被分成两个 16 位的 unsigned short，分别记录读锁被多少线程使用和写锁被重入的次数\",\"以 ReentrantLock 为例，里面定义了 Sync 同步器继承自 AQS，实现了tryLock快速尝试加锁方法，以及initialTryLock抽象方法用于校验可重入性，以及支持是否公平，在任何 lock 方法执行前，都要前执行该方法尝试是否能加锁。其他的还有一些用于提供支持，以及超时、中断相关的方法。\",\"abstract static class Sync extends AbstractQueuedSynchronizer { final boolean tryLock() { Thread current = Thread.currentThread(); int c = getState(); if (c == 0) { // 尝试直接加锁 if (compareAndSetState(0, 1)) { setExclusiveOwnerThread(current); return true; } } else if (getExclusiveOwnerThread() == current) { // 重入 if (++c < 0) // state 是 int 型，因此支持最多重入 Integer.MAX_VALUE 次 throw new Error(\\\"Maximum lock count exceeded\\\"); setState(c); return true; } return false; } abstract boolean initialTryLock(); // ....... }\",\"非公平锁实现 NonfairSync 很简单，initialTryLock 就是简单的校验 state 数值然后直接去加锁：\",\"static final class NonfairSync extends Sync { final boolean initialTryLock() { Thread current = Thread.currentThread(); if (compareAndSetState(0, 1)) { setExclusiveOwnerThread(current); return true; } else if (getExclusiveOwnerThread() == current) { int c = getState() + 1; if (c < 0) // overflow throw new Error(\\\"Maximum lock count exceeded\\\"); setState(c); return true; } else return false; } protected final boolean tryAcquire(int acquires) { if (getState() == 0 && compareAndSetState(0, acquires)) { setExclusiveOwnerThread(Thread.currentThread()); return true; } return false; } }\",\"而在公平锁 FairSync 实现的 initialTryLock 和 tryAcquire 里，如果当前线程没有持有锁，那么必须等 AQS 的等待队列为空才可以去加锁，保证了先来后到：\",\"static final class FairSync extends Sync { final boolean initialTryLock() { Thread current = Thread.currentThread(); int c = getState(); if (c == 0) { // 等待队列为空，且没有被其它线程持有 if (!hasQueuedThreads() && compareAndSetState(0, 1)) { setExclusiveOwnerThread(current); return true; } } else if (getExclusiveOwnerThread() == current) { if (++c < 0) // overflow throw new Error(\\\"Maximum lock count exceeded\\\"); setState(c); return true; } return false; } protected final boolean tryAcquire(int acquires) { // 等待队列为空，且没有被其它线程持有 if (getState() == 0 && !hasQueuedPredecessors() && compareAndSetState(0, acquires)) { setExclusiveOwnerThread(Thread.currentThread()); return true; } return false; } }\",\"另外可以发现，JUC 中基于 AQS 的所有工具类都并非直接继承自 AQS，而是将具体的功能以委托的形式交给内部的子类，这样的设计可以保证工具类对外接口的简洁性，并且可以防止开发人员误用 AQS 的公有方法而破坏同步器的状态。读完 AQS 的源码，再去看这些工具类的源码，不过是洒洒水了~\"]},\"10\":{\"h\":\"参考\",\"t\":[\"[1]. 自旋锁、排队自旋锁、MCS锁、CLH锁 [2]. https://www.lilinchao.com/archives/2511.html [3]. https://blog.csdn.net/weixin_49561445/article/details/120598020 [4]. https://www.iotxing.com/AQS源码分析/ [5]. https://blog.csdn.net/yxl626571494/article/details/129959583\",\"PS：花了一天时间把这一通代码读下来，神清气爽，跟之前看 Spring 事务源码一样，没看之前感觉好可怕，但只要静下心慢慢看，其实也还好。其实一开始想看看美团的动态线程池设计的，然后就回过去看了一下线程池源码，然后就来到 AQS 了... 欠下的债总有一天是要还的 读这种复杂源码才发现，不可变的定义有多好，不怕它莫名其妙冒出个子类或者中途在某个地方改了。\"]},\"11\":{\"c\":[\"Java\"]},\"12\":{\"c\":[\"并发\"]},\"13\":{\"h\":\"认证登录\"},\"14\":{\"h\":\"短信验证码\",\"t\":[\"前端通过阿里云 API 发送短信验证码，并缓存到 Redis（根据缓存时间防止接口被刷）\",\"用户点击注册后校验验证码和其它信息\",\"校验通过后，用 Spring Security 对密码进行 MD5 加盐加密，最后存入 DB\",\"登录时同样用 Spring Security 对加盐加密的密码进行校验\",\"// 接收前端发来的发短信请求 @ResponseBody @GetMapping(\\\"/sms/sendcode\\\") public R sendCode(@RequestParam(\\\"phone\\\") String phone) { // 接口防刷，先获取 reids 缓存：sms:code:phone String redisCode = stringRedisTemplate.opsForValue().get(AuthServerConstant.SMS_CODE_CACHE_PREFIX); if(redisCode != null && redisCode.length() > 0) { long curTime = Long.parseLong(redisCode.split(\\\"_\\\")[1]); if(System.currentTimeMillis() - curTime < 60 * 1000) { return R.error(BizCodeEnum.SMS_CODE_EXCEPTION.getCode(), BizCodeEnum.SMS_CODE_EXCEPTION.getMsg()); } } // 生成验证码 String code = \\\"123456\\\"; String redis_code = code + \\\"_\\\" + System.currentTimeMillis(); // 缓存验证码 stringRedisTemplate.opsForValue().set(AuthServerConstant.SMS_CODE_CACHE_PREFIX + phone, redis_code, 10, TimeUnit.MINUTES); try { // 调用第三方短信服务 return thirdPartFeignService.sendSmsCode(phone, code); } catch (Exception e) { log.warn(\\\"远程调用不知名错误 【无需解决】\\\"); } return R.ok(); } // 阿里云短信 API public String sendSmsCode(String phone, String code){ com.aliyun.dysmsapi20170525.models.SendSmsRequest sendSmsRequest = new com.aliyun.dysmsapi20170525.models.SendSmsRequest() .setSignName(\\\"阿里云短信测试\\\") .setTemplateCode(\\\"SMS_154950909\\\") .setPhoneNumbers(phone) .setTemplateParam(\\\"{\\\\\\\"code\\\\\\\":\\\\\\\"\\\" + code + \\\"\\\\\\\"}\\\"); com.aliyun.teautil.models.RuntimeOptions runtime = new com.aliyun.teautil.models.RuntimeOptions(); SendSmsResponse sendSmsResponse = null; try { sendSmsResponse = smsClient.sendSmsWithOptions(sendSmsRequest, runtime); return String.valueOf(sendSmsResponse.statusCode); } catch (TeaException error) { com.aliyun.teautil.Common.assertAsString(error.message); return \\\"fail\\\"; } catch (Exception _error) { TeaException error = new TeaException(_error.getMessage(), _error); com.aliyun.teautil.Common.assertAsString(error.message); } return \\\"fail_\\\" + sendSmsResponse.getStatusCode(); } // 验证通过后注册 @Override public void register(UserRegisterVo userRegisterVo) throws PhoneExistException, UserNameExistException { MemberEntity entity = new MemberEntity(); // 检查手机号、用户名是否唯一 checkPhone(userRegisterVo.getPhone()); checkUserName(userRegisterVo.getUserName()); entity.setMobile(userRegisterVo.getPhone()); entity.setUsername(userRegisterVo.getUserName()); // 密码加盐加密 BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder(); entity.setPassword(bCryptPasswordEncoder.encode(userRegisterVo.getPassword()));、 // 其它默认信息 entity.setCreateTime(new Date()); baseMapper.insert(entity); }\",\"MD5 是经典的消息摘要算法，可以根据输入产生一个 128 位的信息摘要，换算十六进制得到 32 的字符串，即最终的数字指纹。\",\"特点： \",\"压缩性：结果总是 128 位\",\"容易计算\",\"抗修改：原数据进行修改会导致结果变化很大\",\"弱抗碰撞：很难找到相同 MD5 的数据\",\"强抗碰撞：找到两个不同数据的 MD5 值相同是非常困难的\",\"破解方法：彩虹表，搜集各种数据的 MD5 值作为字典\",\"加盐：哈希前加入一些随机数（盐值），加强安全性。例如 Spring Security 提供的 BCryptPasswordEncoder 提供的加密方法\"]},\"15\":{\"h\":\"OAuth2\",\"t\":[\"OAuth2 是一个业界标准的授权协议，通过为第三方应用颁发一个 Token 令牌，使得其能够获取相关资源。常用于第三方账号登录。\",\"OAuth2\",\"Client 请求认证服务器的授权（用户登录授权）\",\"Client 获得授权许可，一般是一个 Authorization Code 授权码\",\"Client 通过 Authorization Code 换取一个附带有效期的 Access Token 访问令牌\",\"Client 通过 Access Token 从 Resource Server 获取相关资源\",\"// 点击第三方登陆后，用户输入第三方的账号密码进行授权 // 然后第三方回调本应用的请求地址，并携带 Code 授权码 @GetMapping(\\\"/gitee/success\\\") public String giteeLogin(@RequestParam(\\\"code\\\") String code, HttpSession session, HttpServletResponse servletResponse) throws Exception { Map<String, String> param = new HashMap<>(); param.put(\\\"client_id\\\", \\\"<client_id>\\\"); param.put(\\\"redirect_uri\\\", \\\"http://auth.gulimall.com/oauth2/gitee/success\\\"); param.put(\\\"client_secret\\\", \\\"<client_secret>\\\"); param.put(\\\"code\\\", code); param.put(\\\"grant_type\\\", \\\"authorization_code\\\"); // code 换取 Access Token HttpResponse response = HttpUtils.doPost(\\\"https://gitee.com\\\", \\\"/oauth/token\\\", \\\"post\\\", new HashMap<>(), null, param); if(response.getStatusLine().getStatusCode() == 200){ // 获取响应体： Access Token String giteeInfo = EntityUtils.toString(response.getEntity()); R login = memberFeignService.giteeLogin(giteeInfo); if(login.getCode() == 0) { // 将登陆用户信息放入 session MemberRespVo respVo = login.getData(\\\"data\\\" ,new TypeReference<MemberRespVo>() {}); session.setAttribute(AuthServerConstant.LOGIN_USER, respVo); // 登录成功 跳回首页 return \\\"redirect:http://gulimall.com\\\"; } } else { // 失败返回登录页 return \\\"redirect:http://auth.gulimall.com/login.html\\\"; } } // 根据 Token 识别用户并登录 @Override public MemberEntity giteeLogin(String giteeInfo) throws Exception { // 拿到 accesstoken，获取用户基本信息 JSONObject baseJson = JSON.parseObject(giteeInfo); String accessToken = baseJson.getString(\\\"access_token\\\"); String expiresIn = baseJson.getString(\\\"expires_in\\\"); Map<String, String> params = new HashMap<>(); params.put(\\\"access_token\\\", baseJson.getString(\\\"access_token\\\")); // 校验用户信息 HttpResponse response = HttpUtils.doGet(\\\"https://gitee.com\\\", \\\"/api/v5/user\\\", \\\"get\\\", new HashMap<>(), params); Assert.isTrue(response.getStatusLine().getStatusCode() == 200, String.valueOf(BizCodeEnum.SOCIALUSER_LOGIN_ERROR)); String s = EntityUtils.toString(response.getEntity()); JSONObject jsonObject = JSON.parseObject(s); String id = jsonObject.getString(\\\"id\\\"); MemberEntity member = this.getOne(new QueryWrapper<MemberEntity>().eq(\\\"social_uid\\\", \\\"gitee_\\\" + id)); if(member != null) { // 已经注册过，更新令牌、过期时间 MemberEntity newMember = new MemberEntity(); newMember.setId(member.getId()); newMember.setAccessToken(accessToken); newMember.setExpiresIn(expiresIn); this.updateById(member); return member; } else { // 第一次授权登录，需要注册 MemberEntity newMember = new MemberEntity(); newMember.setSocialUid(\\\"gitee_\\\" + id); newMember.setNickname(jsonObject.getString(\\\"name\\\")); newMember.setAccessToken(accessToken); newMember.setExpiresIn(expiresIn); this.save(newMember); return newMember; } }\"]},\"16\":{\"h\":\"分布式会话\"},\"17\":{\"h\":\"Session 原理\",\"t\":[\"HTTP 协议本身是无状态的，客户端和服务器都不记录彼此的历史信息，每次请求都是独立的。但很多 Web 场景下需要维护用户状态，例如是否登录、记住密码、浏览历史等。因此出现了 Cookie 和 Session 技术。\",\"Cookie 是客户端存储 HTTP 状态的解决方案，客户端每次发送请求都会携带这些数据。Cookie 在不同浏览器之间不共享，存在有效期，且有安全隐患。\",\"而 Session 是服务端存储 HTTP 状态的方案，服务端为每个客户端创建一个 session 对象维护该用户状态，可以存储在 内存/文件/缓存 中。在客户端用 Cookie 保存对应的 SessionId，每次请求携带 sessionId 来标识该用户。\",\"session原理\",\"问题：服务器管理 Session 开销大。而且 Session 仅适用于当前域名下的用户跟踪，在分布式场景，不同服务无法共享 Session 以跟踪用户。\"]},\"18\":{\"h\":\"分布式 Session\"},\"19\":{\"h\":\"方案 1：Session 复制\",\"t\":[\"复制session\",\"优点： \",\"Web-Server 原生支持，只需要修改配置文件即可实现\",\"缺点： \",\"session 同步占用带宽，降低业务处理能力\",\"任意一台服务器需要保存所有服务器集群的 session 总和，对内存压力过大，无法水平扩展\",\"因此只适用于小型业务场景，大型服务器集群不适用。\"]},\"20\":{\"h\":\"方案 2：客户端存储\",\"t\":[\"客户端存储session\",\"优点： \",\"服务器不需要存储 Session，客户端自己保存，节省服务器资源\",\"缺点： \",\"每次请求都得携带用户 Cookie 完整数据，浪费带宽\",\"session 存储在 Cookie 中，有长度限制（4KB），不能保存大量信息\",\"Cookie 存在泄漏、篡改、窃取等安全隐患\",\"因此此方案基本不会使用。\"]},\"21\":{\"h\":\"方案 3：哈希一致性\",\"t\":[\"通过 Nginx 根据请求来源做路由配置。\",\"哈希一致性session\",\"优点： \",\"只需要修改 Nginx 配置，无需修改代码\",\"支持负载均衡\",\"支持服务器水平扩展\",\"缺点： \",\"session 还是存储在服务器中，重启可能部分丢失，暂时影响业务\",\"水平扩展后需要 Rehash，暂时影响业务\",\"因此本方案还可以，session 本身是有有效期的，缺点影响不大。\"]},\"22\":{\"h\":\"方案 4：统一存储\",\"t\":[\"统一存储session\",\"优点： \",\"安全性高\",\"支持水平扩展\",\"服务器重启/扩容都不会丢失 session\",\"缺点： \",\"需要修改代码，增加了网络调用\",\"本方案在请求时需要携带上一个服务器发送的 session 信息，因此需要在同一个域名下。为此需要放大域名的作用域。Spring Session 框架正好提供了解决方案。\"]},\"23\":{\"h\":\"Spring Session\"},\"24\":{\"h\":\"使用\",\"t\":[\"引入依赖\",\"<!-- Spring Session --> <dependency> <groupId>org.springframework.session</groupId> <artifactId>spring-session-data-redis</artifactId> <version>2.1.1.RELEASE</version> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency>\",\"配置\",\"spring: session: store-type: redis # 将session保存到什么位置。支持 Redis、MongoDB、JDBC 等 servlet: servlet: session: timeout: 30m # session的超时时间，非必选 # Redis 配置 (略)\",\"开启 Spring Session\",\"// 主启动类 @SpringBootApplication @EnableRedisHttpSession public class GulimallAuthApplication { public static void main(String[] args) { SpringApplication.run(GulimallAuthApplication.class, args); } } // 配置类 @Configuration public class AuthSessionConfig { /** * 为Session扩大作用域 */ @Bean public CookieSerializer cookieSerializer(){ DefaultCookieSerializer cookieSerializer = new DefaultCookieSerializer(); cookieSerializer.setDomainName(\\\"gulimall.com\\\"); cookieSerializer.setCookieName(\\\"GULISESSION\\\"); return cookieSerializer; } /** * 自定义序列化机制: redis的json序列化 */ @Bean public RedisSerializer<Object> springSessionDefaultRedisSerializer(){ return new GenericJackson2JsonRedisSerializer(); } }\"]},\"25\":{\"h\":\"原理\",\"t\":[\"@EnableRedisHttpSession 导入了 RedisHttpSessionConfiguration.class 配置 \",\"导入了 RedisOperationsSessionRepository，即 Redis 操作 Session 的工具类\",\"RedisHttpSessionConfiguration 继承自 SpringHttpSessionConfiguration \",\"负责构造 CookieSerializer 序列化器\",\"负责监听服务器停机、Session 序列/反序列化等过程\",\"初始化 SessionRepositoryFilter 过滤所有请求，重写了 doFilterInternal() \",\"首先将当前的 sessionRepository 放入当前请求的共享数据中\",\"封装原生的 Request、Reponse（装饰者模式）\",\"放行。后面的执行链需要使用 session 时，会调用装饰类内部获取 session 的具体策略，例如通过 RedisOperationsSessionRepository 从 Redis 中获取\",\"Spring Session 核心原理就是装饰者模式，修改了获取 session 的具体逻辑，模拟了 session 的完整功能。只要浏览器不关，就可以为 session 自动续期，关闭后就走 redis 的过期策略。\"]},\"26\":{\"h\":\"JWT\",\"t\":[\"Json Web Token 是一种替换 Session 实现数据共享的方案。基于 Token 的身份验证方法，不需要在服务端存储用户登录记录。\",\"服务端验证客户端身份，计算生成 Token 返回给客户端\",\"客户端保存 Token，之后请求时携带该 Token\",\"服务端收到请求后验证 Token，合法即可返回数据\",\"优点：\",\"无状态，可扩展\",\"安全，能够防止 CSRF 跨站请求伪造\",\"可提供接口给第三方\",\"多平台跨域\"]},\"27\":{\"h\":\"SSO\",\"t\":[\"Single Sign On 单点登录，在多个应用的系统中，只需要登陆一次，就可以访问其它相互信任的应用系统。对于同域下的不同服务，只要扩大 Cookie 作用域到顶域，然后共享 session 即可（Redis 统一存储 Session）。但对于不同域下的服务，需要单独部署 SSO 系统，只要登录了这个公共的登陆服务就代表对应的服务群都登录了。\",\"SSO\",\"跨域 SSO\",\"用户访问 app1 系统，app1 没有登录，跳转到SSO\",\"SSO 也没有登录，弹出用户登录页\",\"用户填写用户名、密码，SSO 进行认证后，将登录状态写入 SSO 的 session，并通知浏览器中写入 SSO 域下的 Cookie\",\"SSO 登录完成后会生成一个 ST (Service Ticket)，携带并跳转到 app1 系统\",\"app1 拿到 ST 后，向 SSO 发送请求验证 ST 是否有效\",\"验证通过后，app1 将登录状态写入 Session 并设置 app1 域下的 Cookie\",\"访问 App2\",\"用户访问 app2 系统，app2 没有登录，跳转到SSO\",\"由于 SSO 已经登录了，不需要重新登录认证\",\"SSO 生成 ST，携带并跳转到 app2 系统\",\"app2 拿到 ST 后，向 SSO 发送请求验证 ST 是否有效\",\"验证成功后，app2 将登录状态写入 Session 并设置 app2 域下的 Cookie\"]},\"28\":{\"c\":[\"分布式\"]},\"29\":{\"c\":[\"鉴权\"]},\"30\":{\"h\":\"Elasticsearch 学习\"},\"31\":{\"h\":\"概述\",\"t\":[\"Elasticsearch（简称ES）是一个分布式、高扩展、近实时的搜索与数据分析引擎，它能很方便的使大量数据具有搜索、分析和探索的能力，充分利用Elasticsearch的水平伸缩性，能使数据在生产环境变得更有价值。ES的使用场景非常丰富，即可用作传统的海量数据的检索引擎，也可以用作时序分析、大数据分析、NoSQL的索引引擎、日志存储等等。\",\"Elasticsearch、Kibana、Beats 和 Logstash 四大金刚构成 ES 技术服务栈，分别负责不同领域，囊括了大数据处理领域的方方面面，包括数据收集、写入、检索、监控、处理、分析、安全等：\",\"Elasticsearch：负责数据存储、分析、检索\",\"Kibana：可视化工具，可以实时呈现Elastichsearch聚合分析的数据，看到数据的趋势，为决策提供依据\",\"Beats：轻量型采集器的平台，集合了多种轻量级的、单一的数据采集器，几乎可以兼容所有的数据类型，这些采集器可以从成千上万的系统中采集数据并向Logstash和Elasticsearch发送数据\",\"LogStash：开源的服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到支持的存储库中，包括ES、Redis、DB、Kafka等\"]},\"32\":{\"h\":\"概念\"},\"33\":{\"h\":\"集群\",\"t\":[\"ES 集群一般是由多个节点共同组成的分布式集群，节点之间互通，彼此配合，共同对外提供搜索和索引服务。不同的节点会负责不同的角色，有的负责一个，有的可能负责多个：\",\"数据节点：负责数据存储、数据处理的工作，例如 CRUD、搜索、聚合等各种 I/O、内存和 CPU 密集型操作。服务过载时可以通过添加数据节点进行扩容，保障集群的稳定性\",\"主节点：负责轻量化整个集群范围内的操作，例如创建或删除索引、跟踪哪些节点是集群的一部分以及决定将哪些分片分配给哪些节点\",\"Ingest节点：负责预处理文档，然后将其索引到 Elasticsearch 中\",\"Coordinating节点：路由索引和搜索请求，处理搜索结果集\",\"集群组：由多个集群组成的一个集合，这些集群的Appkey都是一样的，我们使用集群组进行集群内部流量路由、熔断降级，数据平台服务绑定等\",\"健康状态：Green,表示集群所有数据完好，没有丢失；Yellow,集群至少有一个索引的数据副本丢失；Red,集群至少有一个索引的Primary数据有丢失\"]},\"34\":{\"h\":\"术语\",\"t\":[\"ES作为一个数据存储系统，和 MySQL 有很多相似的地方，但是MySQL更擅长事务类型操作，可以确保数据的安全和一致性，ES更擅长海量数据的搜索、分析和计算。\",\"和很多分布式系统一样，ES 也有很多相似的理念，比如数据分片、副本，还有类似计算机组成的概念如分段。\",\"术语\",\"描述\",\"用法\",\"数据库对比概念\",\"Index 索引\",\"相同类型的文档的集合\",\"例如把所有订单放在一个索引里，即订单索引\",\"表\",\"Document 文档\",\"ES是面向文档存储的，文档是可搜索的结构化数据单元，由多个字段组成，用于描述一整条记录。文档会被序列化为Json存储在ES中\",\"例如一条商户信息、一个订单信息\",\"记录行\",\"Field 字段\",\"用于表述每一个列的名字，字段是文档的组成单元，包含字段名称、字段属性和字段内容\",\"例如订单号，订单金额等\",\"列\",\"Mapping 映射\",\"描述字段的约束信息\",\"例如字段类型、是否索引、分词类型、子字段等\",\"表的结构约束 Schema\",\"正排\",\"文档到字段对应关系组成的链表，勾选可过滤后会构建正排链表。doc1->id,type,create_time…\",\"设置docvalues=true\",\"行记录\",\"倒排\",\"词组到文档的对应关系组成的链表，勾选可搜索后会构建倒排链表。term1->doc1,doc2,doc3；term2->doc1,doc2\",\"设置index=true，如果为false，对应的字段域将不能进行检索(即执行各种Query后返回的结果为空，或者直接报错)\",\"类似B+树索引。Mysql不设置索引还是可以进行查询，但是ES不设置，查询结果为空\",\"Analyzer\",\"分词器模式\",\"请求的时候指定分词模式，如ik_max_word\",\"召回\",\"通过用户查询的关键词进行分词，将分词后的词组通过查找倒排链表快速定位到文档，这个过程称为召回。\",\"查询过程\",\"召回量\",\"召回得到的文档数为召回量，即 totalHits\",\"查询返回的结果数\",\"段(Segment)\",\"分片的组成单元，即多个段构成一个分片，段是检索的基本单元，所有的查询/更新都是基于段来查询的\",\"段合并\",\"Lucene的删除是标记删除，更新是先删后增，随着数据不断的更新，一个分片中会累积很多段(这些段里存在很多已经删掉的文档)，段太多会导致查询性能变慢，因此我们需要一个段合并的过程，将那些没有用的数据清除，减少段的个数\",\"副本 Replicas\",\"ES 可以设置多个索引的副本，提高系统的容错性，并且支持负载均衡以提高查询效率。\",\"分片(Shard)\",\"一个索引由多个分片组成，分布到不同的节点上，构成分布式搜索。分片的数量只能在创建索引前指定。\",\"一个索引分成N个shard，每一个Shard的内容就是这个完整索内容的1/N\"]},\"35\":{\"h\":\"倒排索引\",\"t\":[\"MySQL那样的索引是普通的正向索引，根据索引查找速度很快，但是如果用不上索引，比如模糊查询，性能就很低。（根据文档找词条） 而ES使用的倒排索引，会将每一个文档的数据利用分词算法计算得到一个个词条 term，然后创建词条到文档id的表索引。查询的时候，根据用户输入进行分词，用词条索引去查询文档id，再去查找具体文档。词条和文档id都建立了索引，所以查询速度非常快。（根据词条找文档）\"]},\"36\":{\"h\":\"Mapping\",\"t\":[\"映射属性，是对索引库中文档的约束，常见的包括：\",\"type：字段数据类型，常见的简单类型有： \",\"字符串：text 可分词的文本、keyword 精确值，例如：品牌、国家、ip地址（keyword只能整体搜索，不支持分词）\",\"数值：long、integer、short、byte、double、float、\",\"布尔：boolean\",\"日期：date\",\"对象：object\",\"index：是否创建索引，默认为true\",\"analyzer：使用哪种分词器\",\"properties：该字段的子字段\"]},\"37\":{\"h\":\"存储结构\",\"t\":[\"从整体结构上来看，Lucene的文件可以分为3个不同的层次：\",\"Segment_N：全局的索引文件元数据描述，其中 N 是下一个段号（36进制）。描述了当前索引的版本，最小兼容版本，包括哪些段(段号、段名、编码等信息)，以及用户自定义的数据。\",\"x.si：段元数据相关信息，其中 x 表示段名。每个段都有自己对应的元数据文件，记录版本、大小、文件组成方式、诊断信息如OS、JVM、创建时间，以及 IndexSort 等信息\",\"段相关文件：最复杂，也最重要的一些列文件，包括倒排索引(词典tim、tip，倒排链doc，位置相关pos，payload/offset相关pay,词向量相关的tvd、tvx、tvm,正则化相关的nvd、nvm)、正排数据(行存相关的fdt、fdx、fdm，列存相关的dvd、dvx，多维点模型的kvd、kdi、kvm)、数据实时变更的存活DocID集合(liv文件)、域元数据信息fnm等等\"]},\"38\":{\"h\":\"基本使用\",\"t\":[\"ES服务器提供了HTTP接口来对索引和文档进行CRUD，同时ES官方也提供了各种不同语言的客户端SDK，来操作ES，SDK本质上是组装DSL语句，再发送HTTP请求。其中，Java 客户端包括Transport和Rest，Rest又分为 Java Rest Low Level Client（RLLC）和 Java Rest High Level Client（RHLC），后者相比前者封装更高级，隐藏了大部分ES细节，实际也可以通过HLRC获得RLLC，不过这三者全都已经被官方废弃了。目前ES官方推出了 Java Api Client 作为替代方案。\",\"客户端\",\"说明\",\"备注\",\"TransportClient客户端\",\"底层跟集群交换数据是通过自定义的二进制协议通信，这个会导致不同的集群版本需要不同的TransportClient版本，不利于集群的平滑升级\",\"es7.x版本已经废除，停止迭代\",\"RestClient客户端\",\"对官方客户端简单封装，里面涵盖了一些已经废弃的功能以及许多比较危险的操作，支持向后兼容(目前仅支持5.x和2.x版本)\",\"2019年6月不再维护\",\"Poros客户端\",\"集成了官方的ES客户端，对其查询做了限制，并不断新增新的功能特性，支持向后兼容(支持es 5.x，6.x，7.x版本)\",\"长期持续维护中\"]},\"39\":{\"h\":\"引入依赖\",\"t\":[\"客户端版本需要和使用的ES集群版本一致，还要排除掉其中的elasticsearch-rest-client。稳定版本号见：https://km.sankuai.com/collabpage/1127183403\",\"<dependency> <groupId>org.elasticsearch.client</groupId> <artifactId>elasticsearch-rest-high-level-client</artifactId> </dependency>\"]},\"40\":{\"h\":\"注入客户端\",\"t\":[\"@Bean public RestHighLevelClient client(){ return new RestHighLevelClient(RestClient.builder( HttpHost.create(\\\"http://192.168.150.101:9200\\\") )); }\"]},\"41\":{\"h\":\"索引操作\"},\"42\":{\"h\":\"创建\",\"t\":[\"ES的一个索引由三部分组成：\",\"mappings：包括三部分 \",\"dynamic mapping：设置动态映射（自动推断用户定义的字段）的行为，true动态添加，false忽略，strict抛异常\",\"metadata：元数据域，包括index所属索引、id唯一标识、source等\",\"properties：核心数据，定义索引的字段\",\"settings：描述该索引的全局配置，包括副本数、分片数等\",\"aliases：索引别名，可以关联一个或多个物理索引\",\"// HTTP DSL PUT /索引库名 { //字段配置 \\\"mappings\\\":{ \\\"properties\\\":{ \\\"address\\\":{ \\\"type\\\":\\\"text\\\", \\\"index\\\": \\\"true\\\", \\\"analyzer\\\":\\\"ik_smart\\\" }, \\\"email\\\":{ \\\"type\\\":\\\"keyword\\\" } } }, //索引的一些配置 \\\"settings\\\":{ \\\"index\\\":{ \\\"number_of_shards\\\":2, \\\"number_of_replicas\\\":1 } }, //别名配置 \\\"aliases\\\":{ } } // 1.创建Request对象，指定索引名 CreateIndexRequest request = new CreateIndexRequest(\\\"hotel\\\"); // 2.准备请求的参数：DSL语句和格式 request.source(MAPPING_TEMPLATE, XContentType.JSON); // 3.发送请求 client.indices().create(request, RequestOptions.DEFAULT);\"]},\"43\":{\"h\":\"查询\",\"t\":[\"GET /order // 1.创建Request对象 GetIndexRequest request = new GetIndexRequest(\\\"hotel\\\"); // 2.发送请求 boolean exists = client.indices().exists(request, RequestOptions.DEFAULT); // 3.输出 System.err.println(exists ? \\\"索引库已经存在！\\\" : \\\"索引库不存在！\\\");\"]},\"44\":{\"h\":\"删除\",\"t\":[\"DELETE /order // 1.创建Request对象 DeleteIndexRequest request = new DeleteIndexRequest(\\\"hotel\\\"); // 2.发送请求 client.indices().delete(request, RequestOptions.DEFAULT);\"]},\"45\":{\"h\":\"修改\",\"t\":[\"修改只能新增字段到mapping中。索引库一旦创建无法修改已有的mapping，否则需要重新创建索引。\",\"PUT /索引库名/_mapping { \\\"properties\\\": { \\\"新字段名\\\":{ \\\"type\\\": \\\"integer\\\" } } }\"]},\"46\":{\"h\":\"文档操作\"},\"47\":{\"h\":\"创建\",\"t\":[\"POST /索引库名/_doc/文档id { \\\"info\\\": \\\"真相只有一个！\\\", \\\"email\\\": \\\"zy@itcast.cn\\\", \\\"name\\\": { \\\"firstName\\\": \\\"柯\\\", \\\"lastName\\\": \\\"南\\\" } } // 1.创建Request IndexRequest request = new IndexRequest(\\\"indexName\\\").id(\\\"1\\\"); // 2.准备Json参数 request.source(JSON_DOC, XContentType.JSON); // 3.发送请求 client.index(request, RequestOptions.DEFAULT);\"]},\"48\":{\"h\":\"查询\",\"t\":[\"GET /{索引库名称}/_doc/{id} //批量查询：查询该索引库下的全部文档 GET /{索引库名称}/_search // 1.准备Request GetRequest request = new GetRequest(\\\"hotel\\\", \\\"61082\\\"); // 2.发送请求，得到响应 GetResponse response = client.get(request, RequestOptions.DEFAULT); // 3.解析响应结果 HotelDoc hotelDoc = JSON.parseObject(response.getSourceAsString(), HotelDoc.class);\"]},\"49\":{\"h\":\"删除\",\"t\":[\"DELETE /{索引库名}/_doc/id值\"]},\"50\":{\"h\":\"修改\",\"t\":[\"// 全量修改，本质是删除旧id的文档，新增一个新文档 PUT /{索引库名}/_doc/文档id { \\\"字段1\\\": \\\"值1\\\", \\\"字段2\\\": \\\"值2\\\", // ... 略 } // 增量修改，只修改指定id文档的部分字段 POST /{索引库名}/_update/文档id { \\\"doc\\\": { \\\"字段名\\\": \\\"新的值\\\", } }\"]},\"51\":{\"h\":\"搜索\",\"t\":[\"基本步骤：\",\"创建 SearchRequest\",\"构造查询条件\",\"发送请求\",\"解析\",\"// 1. 创建SearchRequest对象 SearchRequest searchRequest = new SearchRequest(\\\"hotel\\\"); // 2. 准备 DSL - Request.source(),QueryBuilders来构建查询条件 request.source().query(QueryBuilders.matchAllQuery()); // 3. 发送请求 SearchResponse response = client.search(request, RequestOptions.DEFAULT); // 4. 解析结果（参考JSON结果，从外到内，逐层解析） SearchHits searchHits = response.getHits(); long total = searchHits.getTotalHits().value; System.out.println(\\\"共搜索到\\\" + total + \\\"条数据\\\"); SearchHit[] hits = searchHits.getHits(); for (SearchHit hit : hits) { String json = hit.getSourceAsString(); HotelDoc hotelDoc = JSON.parseObject(json, HotelDoc.class); System.out.println(\\\"hotelDoc = \\\" + hotelDoc); } // 全文检索 QueryBuilders.matchQuery(\\\"all\\\", \\\"如家\\\"); QueryBuilders.multiMatchQuery(\\\"如家\\\", \\\"field1\\\", \\\"field2\\\"); // 精准查询 QueryBuilders.termQuery(\\\"city\\\", \\\"杭州\\\"); // 范围 QueryBuilders.rangeQuery(\\\"price\\\").gts(100).lte(150); // 布尔 BoolQueryBuilder boolQuery = QueryBuilders.boolQuery(); boolQuery.must(QueryBuilders.termQuery(\\\"city\\\", \\\"杭州\\\")); // 聚合 request.source().aggregation(AggregationBuilders .terms(\\\"brandAgg\\\") .field(\\\"brand\\\") .size(100)); // 排序 request.source().sort(\\\"price\\\", SortOrder.ASC); // 分页 request.source().from((page - 1) * size).size(size); // 高亮 request.source().highlighter(new HighlightBuilder().field(\\\"name\\\").requireFieldMatch(false));\"]},\"52\":{\"h\":\"Lucene\",\"t\":[\"Elasticsearch 基于 Lucene 作为底层的检索库，Lucene是一个高效的，可扩展的，全文检索库，全部用Java实现，无需配置。Lucene仅支持纯文本文件的索引和搜索，不负责由其他格式的文件抽取纯文本文件，或从网络中抓取文件的过程。\"]},\"53\":{\"h\":\"功能\",\"t\":[\"Lucene 的功能包括创建索引和搜索两步：\",\"创建索引\",\"创建一个 IndexWriter 用来写索引文件\",\"创建一个 Document 代表我们要索引的文档\",\"将不同类型的信息 Field 加入到文档中\",\"IndexWriter 调用函数 addDocument 将索引写到索引文件夹中\",\"搜索\",\"IndexReader 将磁盘上的索引信息读入到内存\",\"创建 IndexSearcher 准备进行搜索\",\"创建 Analyer 用来对查询语句进行词法分析和语言处理\",\"创建 QueryParser 用来对查询语句进行语法分析\",\"QueryParser 调用 parser 进行语法分析，形成查询语法树，放到 Query，即用户查询中\",\"IndexSearcher 调用 search 对查询语法树Query 进行搜索，得到结果 TopScoreDocCollector\",\"参考：\",\"https://www.cnblogs.com/buczhizicai/p/17093719.html\"]},\"54\":{\"c\":[\"分布式\"]},\"55\":{\"c\":[\"ES\"]},\"56\":{\"h\":\"Guava 笔记\"},\"57\":{\"h\":\"基本工具\"},\"58\":{\"h\":\"Optional\",\"t\":[\"Guava 的Optional<T>是用来处理可能为 null 值的容器类，在业务代码里，应该明确区分 null 和 空 的含义，避免混淆null/空的语义，提高程序的健壮性。JDK 8 开始也提供了 Optional 提供相同的功能，而且支持函数式编程的特性，因此建议使用 JDK 标准自带的 Optional。\",\"// 1. 创建包含非空值的 Optional Optional<String> optional = Optional.of(\\\"Hello\\\"); // 2. 创建可能为 null 的 Optional Optional<String> optional = Optional.ofNullable(null); // 3. 创建空的 Optional Optional<String> emptyOptional = Optional.empty(); // 4. 判断 Optional 是否包含值并取值，空 Optional 调用 get 会抛出 NoSuchElementException if(optional.isPresent()) System.out.println(optional.get()); // 5. 提供默认值 String value = optional.orElse(\\\"Default Value\\\"); // 6. 提供默认 Supplier String value = optional.orElseGet(() -> generateDefaultValue()); // 7. 空 Optional 抛异常 String value = optional.orElseThrow(() -> new IllegalStateException(\\\"Value not present\\\")); // 8. Function 映射，并用 Optional 包装映射结果 Optional<String> transformedOptional = optional.map(value -> value.toUpperCase()); // 9. Function 扁平映射，不会嵌套包装 Optional<String> transformedOptional = optional.flatMap(value -> Optional.of(value.toUpperCase()));\"]},\"59\":{\"h\":\"Preconditions\",\"t\":[\"Preconditions提供了若干前置条件判断的使用方法，每个方法都有三种参数重载：\",\"仅 boolean 校验，抛出异常，没有错误消息\",\"指定 Object 对象，其 toString() 的结果作为错误消息\",\"指定 String 格式化串作为错误消息，并且可以附加 Object 作为消息的参数\",\"// 校验参数 checkArgument(boolean) // 校验空值 checkNotNull(T) // 校验索引 checkElementIndex(int index, int size) // ......\",\"JDK 7 开始提供的 Objects 类也提供了一些类似的功能，具体可以参考 JDK Doc。\"]},\"60\":{\"h\":\"Objects\",\"t\":[\"// 避免空指针异常 Objects.equal(\\\"a\\\", \\\"a\\\"); Objects.hashCode(o1, o2); MoreObjects.toStringHelper(object).add(\\\"key\\\", \\\"val\\\").addValue(\\\"End\\\").toString(); // 比较器链，从前往后直到比较到非零的结果结束 ComparisonChain.start() .compare(this.aString, that.aString) .compare(this.anInt, that.anInt) .compare(this.anEnum, that.anEnum, Ordering.natural().nullsLast()) .result();\"]},\"61\":{\"h\":\"Ordering\",\"t\":[\"Guava Fluent 风格的比较器实现，可以构建复杂的逻辑完成集合排序。内置的排序器有以下几个：\",\"ARBITRARY_ORDERING\",\"随机排序\",\"NaturalOrdering\",\"自然排序\",\"AllEqualOrdering\",\"全等排序，包括 null\",\"UsingToStringOrdering\",\"按对象的 toString() 做字典排序\",\"当然也可以通过继承 Ording 抽象类，以及各种 API 自定义排序逻辑。\",\"// 对元素执行 Function -> null 元素前置 -> 自然排序 -> 逆序 Ordering<Foo> ordering = Ordering.natural().reverse().nullsFirst().onResultOf(new Function<Foo, String>() { public String apply(Foo foo) { return foo.sortedBy; } }); // 获取可迭代对象中，按排序器的逻辑最大的 k 个元素 ordering.greatest(Iterator, k); // 是否已经按排序器有序 ordering.isOrdered(Iterable); // 按排序器逻辑最小的元素 ordering.min(a, b, c...);\"]},\"62\":{\"h\":\"Throwables\",\"t\":[\"看了一下文档和 API，Throwables 工具类貌似没什么实用的意义，官方文档也在考虑这个类的作用，新版已经废弃了一部分 API，参考：Why we deprecated Throwables.propagate\",\"// 如果 t 是 Error/RuntimeException 直接抛出，否则包装成 RuntimeException 抛出 Throwables.propagate(t); // t 为 aClass 类型才抛出 Throwables.propagateIfInstanceOf(t, aClass); // t 为 aClass/Error/RuntimeException 才抛出 Throwables.propagateIfPossible(t, aClass);\"]},\"63\":{\"h\":\"集合\"},\"64\":{\"h\":\"Immutable\",\"t\":[\"在程序设计中使用不可变对象，可以提高代码的可靠性和可维护性，其优势包括：\",\"线程安全性（Thread Safety）：不可变对象是线程安全的，无需同步操作，避免了竞态条件\",\"安全性：可以防止在程序运行时被意外修改，提高了程序的安全性\",\"易于理解和测试：不可变对象在创建后不会发生变化，更容易理解和测试\",\"克隆和拷贝：不可变对象不需要实现可变对象的复制（Clone）和拷贝（Copy）逻辑，因为它们的状态不可变，克隆即是自己\",\"JDK 的 Collections 提供了 Unmodified Collections 不可变集合，但仅仅是通过装饰器模式提供了一个只读的视图，并没有阻止对原始集合的修改操作，并且效率较低。而 Guava 提供的不可变集合更加简单高效，确保了真正的不可变性。\",\"// copyOf 会尝试在安全的时候避免做拷贝 ImmutableList<String> immutableList1 = ImmutableList.copyOf(origin); ImmutableList<String> immutableList2 = ImmutableList.of(\\\"A\\\", \\\"B\\\", \\\"C\\\"); ImmutableList<String> immutableList3 = ImmutableList.<String>builder() .add(\\\"A\\\", \\\"B\\\", \\\"C\\\") .build(); // 任何不可变集合可以转变为 ImmutableList，且该列表视图通常性能很好 ImmutableList<String> list = immutable.asList();\"]},\"65\":{\"h\":\"新集合类型\"},\"66\":{\"h\":\"Multiset\",\"t\":[\"Multiset 是一个新的集合类型，可以多次添加相等的元素，既可以看成是无序的列表，也可以看成存储元素和对应数量的键值对映射[E1: cnt1; E2:cnt2]。常用实现包括 HashMultiset, TreeMultiset, LinkedHashMultiset...\",\"Multiset<String> multiset = HashMultiset.create(); multiset.add(\\\"A\\\"); multiset.add(\\\"A\\\"); multiset.add(\\\"B\\\"); // 输出：[A x 2, B] log.debug(\\\"{}\\\", multiset); // 元素总数 log.debug(\\\"{}\\\", multiset.size()); // 不重复元素个数 log.debug(\\\"{}\\\", multiset.elementSet().size()); // 设置元素计数 multiset.setCount(\\\"A\\\", 3); // 获取元素个数 log.debug(\\\"{}\\\", multiset.count(\\\"A\\\"));\"]},\"67\":{\"h\":\"Multimap\",\"t\":[\"支持将 key 映射到多个 value 的方式，而不用定义Map<K, List<V>> 或 Map<K, Set<V>>这样的哈皮形式。实现类包括ArrayListMultimap, HashMultimap, LinkedListMultimap, TreeMultimap...\",\"// 列表实现 ListMultimap<String, Integer> listMultimap = MultimapBuilder.hashKeys().arrayListValues().build(); // 集合实现 SetMultimap<String, Integer> setMultimap = MultimapBuilder.treeKeys().hashSetValues().build(); listMultimap.put(\\\"A\\\", 1); listMultimap.put(\\\"A\\\", 2); listMultimap.put(\\\"B\\\", 1); // {A=[1, 2], B=[1, 2]} log.debug(\\\"{}\\\", listMultimap); // [1, 2]，不存在则返回一个空集合 log.debug(\\\"{}\\\", listMultimap.get(\\\"A\\\")); // [1, 2] 移除 key 关联的所有 value List<Integer> valList = listMultimap.removeAll(\\\"A\\\"); // 返回普通 map 的视图，仅支持 remove，不能 put，且会更新原始的 listMultimap Map<String, Collection<Integer>> map = listMultimap.asMap();\"]},\"68\":{\"h\":\"BiMap\",\"t\":[\"Map 可以实现 key -> value 的映射，如果想要 value -> key 的映射，就需要定义两个 Map，并且同步更新，很不优雅。Guava 提供了 BiMap 支持支持双向的映射关系，常用实现有HashMap, EnumBiMap, EnumHashBiMap...\",\"BiMap<String, Integer> biMap = HashBiMap.create(); biMap.put(\\\"A\\\", 100); // 删除已存在的 KV，重新添加 KV biMap.forcePut(\\\"A\\\", 200); // 获取反向映射 BiMap<Integer, String> inverse = biMap.inverse(); log.debug(\\\"{}\\\", inverse.get(100));\"]},\"69\":{\"h\":\"Table\",\"t\":[\"当需要同时对多个 key 进行索引时，需要定义Map<key1, Map<key2, val>>这样的形式，ugly and awkward。Guava 提供了 Table 用于支持类似 row、column 的双键映射。实现包括HashBasedTable, TreeBasedTable, ArrayTable...\",\"// Table<R, C, V> Table<String, String, Integer> table = HashBasedTable.create(); table.put(\\\"row1\\\", \\\"col1\\\", 1); table.put(\\\"row1\\\", \\\"col2\\\", 2); table.put(\\\"row2\\\", \\\"col1\\\", 3); table.put(\\\"row2\\\", \\\"col2\\\", 4); // 获取类似 Map.Entry 的 Table.Cell<R, C, V> table.cellSet().forEach(System.out::println); // Map<R, Map<C, V>> 视图 Map<String, Map<String, Integer>> rowMap = table.rowMap(); Set<String> rowKeySet = table.rowKeySet(); // Map<C, Map<R, V>> 视图（基于列的索引效率通常比行低） Map<String, Map<String, Integer>> columnMap = table.columnMap(); Set<String> columnedKeySet = table.columnKeySet();\"]},\"70\":{\"h\":\"其它\",\"t\":[\"ClassToInstanceMap：Class -> Instance 的映射，可以避免强制类型转换\",\"RangeSet (Beta状态)：范围集合，自动合并、分解范围区间\",\"RangeSet<Integer> rangeSet = TreeRangeSet.create(); rangeSet.add(Range.closed(1, 10)); // {[1, 10]} rangeSet.add(Range.closedOpen(11, 15)); // disconnected range: {[1, 10], [11, 15)} rangeSet.add(Range.closedOpen(15, 20)); // connected range; {[1, 10], [11, 20)} rangeSet.add(Range.openClosed(0, 0)); // empty range; {[1, 10], [11, 20)} rangeSet.remove(Range.open(5, 10)); // splits [1, 10]; {[1, 5], [10, 10], [11, 20)} // [[1..5], [10..10], [11..20)] System.out.println(rangeSet);\",\"RangeMap (Beta状态)：range -> value 的映射，不会自动合并区间\",\"RangeMap<Integer, String> rangeMap = TreeRangeMap.create(); rangeMap.put(Range.closed(1, 10), \\\"foo\\\"); // {[1, 10] => \\\"foo\\\"} rangeMap.put(Range.open(3, 6), \\\"bar\\\"); // {[1, 3] => \\\"foo\\\", (3, 6) => \\\"bar\\\", [6, 10] => \\\"foo\\\"} rangeMap.put(Range.open(10, 20), \\\"foo\\\"); // {[1, 3] => \\\"foo\\\", (3, 6) => \\\"bar\\\", [6, 10] => \\\"foo\\\", (10, 20) => \\\"foo\\\"} rangeMap.remove(Range.closed(5, 11)); // {[1, 3] => \\\"foo\\\", (3, 5) => \\\"bar\\\", (11, 20) => \\\"foo\\\"} // [[1..3]=foo, (3..5)=bar, (11..20)=foo] System.out.println(rangeMap);\"]},\"71\":{\"h\":\"集合工具\",\"t\":[\"JDK 自带的java.util.Collections提供了很多实用的功能，而 Guava 针对特定接口提供了更多工具，例如：\",\"提供很多静态工厂方法、包装器\",\"Iterables 支持懒加载的集合视图操作\",\"Sets 提供集合论运算\",\"Maps 提供 diff 计算\",\"Multimaps 提供 Map -> Multimap 的转换，并支持反向映射\",\"Tables 提供行列转置 | Interface | JDK or Guava | Guava Utility Class | | --- | --- | --- | | Collection | JDK | Collections2 | | List | JDK | Lists | | Set | JDK | Sets | | Map | JDK | Maps | | Queue | JDK | Queues | | Multiset | Guava | Multisets | | Multimap | Guava | Multimaps | | BiMap | Guava | Maps | | Table | Guava | Tables |\",\"另外，还可以继承 Forwarding 通过装饰器模式装饰特殊实现，PeekingIterator 可以 peek 下一次返回的元素，AbstractIterator 自定义迭代方式等等。（PS：这些东西也许有点用，可是能用吗，业务里写这种代码怕是要被人喷死...）\"]},\"72\":{\"h\":\"缓存✨\",\"t\":[\"Guava 提供的 Cache 按照 **有则取值，无则计算 **的逻辑，支持自动装载，自动移除等扩展功能，比传统的ConcurrentHashMap功能更加强大。\"]},\"73\":{\"h\":\"使用\",\"t\":[\"除了继承 AbstractCache 自定义缓存实现外，通常可以直接使用 CacheBuilder 构建一个 LocalLoadingCache 缓存，通过 key 来懒加载相关联的 value。如果 key-value 没有关联关系可以使用无参的 build 方法返回一个LocalManualCache对象，等调用 get 时再传递一个 callable 对象获取 value。\",\"LoadingCache<String, Integer> loadingCache = CacheBuilder.newBuilder() // 最大容量 .maximumSize(1000) // 定时刷新 .refreshAfterWrite(10, TimeUnit.MINUTES) // 添加移除时的监听器 .removalListener(notification -> System.out.println( notification.getKey() + \\\" -> \\\" + notification.getValue() + \\\" is removed by \\\" + notification.getCause())) // 并发等级 .concurrencyLevel(4) // 开启统计功能 .recordStats() .build( new CacheLoader<String, Integer>() { @Override public Integer load(String key) { System.out.println(\\\"Loading key: \\\" + key); return Integer.parseInt(key); } }); loadingCache.get(\\\"key\\\"); // 使失效 loadingCache.invalidate(\\\"key\\\"); // get with callable loadingCache.get(\\\"key\\\", () -> 2)); // 刷新缓存 loadingCache.refresh(\\\"key\\\"); // 返回一个 map 视图 ConcurrentMap<String, Integer> map = loadingCache.asMap();\",\"LocalLoadingCache继承自 LocalManualCache，里面封装了一个继承自 Map 的localCache成员存储实际的 KV 并通过分段锁实现线程安全，另外实现了 Cache 接口定义了一系列缓存操作。\",\"class LocalCache<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V>\"]},\"74\":{\"h\":\"失效\",\"t\":[\"Guava 提供了三种基础的失效策略：\",\"基于容量失效： \",\"maximumSize(long) 指定最大容量\",\"weigher(Weigher)实现自定义权重，配合maximumWeight(long)以权重作为容量\",\"基于时间失效：在写入、偶尔读取期间执行定期维护 \",\"expireAfterAccess(long, timeUnit) 读写后超出指定时间即失效\",\"expireAfterWrite(long, timeUnit) 写后超出指定时间即失效\",\"基于引用失效： \",\"weakKeys()通过弱引用存储 key\",\"weakValues()通过弱引用存储 value\",\"softValues() 通过软引用包装 value，以 LRU 方式进行 GC\",\"另外，也可以通过invalidate手动清除缓存。缓存不会自动进行清理，Guava 会在写操作期间，或者偶尔在读操作时进行过期失效的维护工作。缓存刷新操作的时机也是类似的。\"]},\"75\":{\"h\":\"图\",\"t\":[\"com.google.common.graph提供了多种图的实现：\",\"Graph 边是匿名的，且不关联任何信息\",\"ValueGraph 边拥有自己的值，如权重、标签\",\"**Network **边对象唯一，且期望实施对其引用的查询\",\"整体看下来，感觉还是挺复杂的，不太常用。等有需要再学习吧...\"]},\"76\":{\"h\":\"并发\"},\"77\":{\"h\":\"ListenableFuture\",\"t\":[\"JUC 的 Future 接口提供了一种异步获取任务执行结果的机制，表示一个异步计算的结果。\",\"ExecutorService executor = Executors.newFixedThreadPool(1); Future<String> future = executor.submit(() -> { // 执行异步任务，返回一个结果 return \\\"Task completed\\\"; }); // Blocked String result = future.get();\",\"Executor 实际返回的是实现类 FutureTask，它同时实现了 Runnable 接口，因此可以手动创建异步任务。\",\"FutureTask<String> futureTask = new FutureTask<>(new Callable<String>() { @Override public String call() throws Exception { return \\\"Hello\\\"; } }); new Thread(futureTask).start(); System.out.println(futureTask.get());\",\"而 Guava 提供的 ListenableFuture 更进一步，允许注册回调，在任务完成后自动执行，实际也是使用它的实现类 ListenableFutureTask。\",\"// 装饰原始的线程池 ListeningExecutorService listeningExecutorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(1)); ListenableFuture<String> future = listeningExecutorService.submit(() -> { // int i = 1 / 0; return \\\"Hello\\\"; }); // 添加回调 1 Futures.addCallback(future, new FutureCallback<String>() { // 任务成功时的回调 @Override public void onSuccess(String result) { System.out.println(result); } // 任务失败时的回调 @Override public void onFailure(Throwable t) { System.out.println(\\\"Error: \\\" + t.getMessage()); } }, listeningExecutorService); // 添加回调 2 future.addListener(new Runnable() { @Override public void run() { System.out.println(\\\"Done\\\"); } }, listeningExecutorService);\"]},\"78\":{\"h\":\"Service\",\"t\":[\"Guava 的 Service 框架是一个用于管理服务生命周期的轻量级框架。它提供了一个抽象类 AbstractService 和一个接口 Service，可以通过继承 AbstractService 或者直接实现 Service 接口来创建自定义的服务，并使用 ServiceManager 来管理这些服务的生命周期。\",\"public class MyService extends AbstractService { @Override protected void doStart() { // 在这里执行启动服务的逻辑 System.out.println(\\\"MyService is starting...\\\"); notifyStarted(); } @Override protected void doStop() { // 在这里执行停止服务的逻辑 System.out.println(\\\"MyService is stopping...\\\"); notifyStopped(); } } @Test public void testService() { Service service = new MyService(); ServiceManager serviceManager = new ServiceManager(List.of(service)); serviceManager.startAsync().awaitHealthy(); // 主线程逻辑 serviceManager.stopAsync().awaitStopped(); }\"]},\"79\":{\"h\":\"Strings\",\"t\":[\"Guava 提供了一系列用于字符串处理的工具：\",\"Joiner：字符串拼接工具，创建的都是不可变实例\",\"Joiner joiner = Joiner.on(\\\";\\\").useForNull(\\\"^\\\"); // \\\"A;B;^;D\\\" String joined = joiner.join(\\\"A\\\", \\\"B\\\", null, \\\"D\\\");\",\"Splitter: 字符串分割工具，创建的也是不可变实例\",\"// String#split 反直觉的输出：[\\\"\\\", \\\"a\\\", \\\"\\\", \\\"b\\\"] Arrays.stream(\\\",a,,b,\\\".split(\\\",\\\")).toList().forEach(System.out::println); // [\\\"foo\\\", \\\"bar\\\", \\\"qux\\\"] Iterable<String> split = Splitter.on(\\\",\\\") // 结果自动 trim .trimResults() // 忽略结果中的空串 .omitEmptyStrings() // 限制分割数 .limit(3) .split(\\\"foo,bar,, qux\\\"); Map<String, String> splitMap = Splitter.on(\\\";\\\") // 指定 K-V 的分隔符可以将键值对的串解析为 Map .withKeyValueSeparator(\\\"->\\\") .split(\\\"A->1;B->2\\\");\",\"CharMatchers：字符序列匹配和处理的工具，内置了大量常用的匹配器。使用上通常分两步： \",\"确定匹配的字符和模式\",\"用匹配的字符做处理\",\"// 确定匹配的字符和模式，例如 anyOf, none, whitespace, digit, javaLetter, javaIsoControl... CharMatcher matcher = CharMatcher.anyOf(\\\"abc\\\"); // defg log.debug(\\\"{}\\\", matcher.removeFrom(\\\"abcdefg\\\")); // abc log.debug(\\\"{}\\\", matcher.retainFrom(\\\"abcdefg\\\")); // true log.debug(\\\"{}\\\", matcher.matchesAllOf(\\\"abc\\\")); // hhh log.debug(\\\"{}\\\", matcher.trimFrom(\\\"abchhhabc\\\")); // ___hhh___ log.debug(\\\"{}\\\", matcher.replaceFrom(\\\"abc hhh abc\\\", \\\"_\\\"));\",\"Charsets: 提供了6种标准的字符集常量引用，例如Charsets.UTF_8。JDK 7 以后建议使用内置的 StandardCharsets\",\"CaseFormat: 大小写转换的工具\",\"// UPPER_UNDERSCORE -> LOWER_CAMEL CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, \\\"CONSTANT_NAME\\\"));\",\"Format\",\"Example\",\"LOWER_CAMEL\",\"lowerCamel\",\"LOWER_HYPHEN\",\"lower-hyphen\",\"LOWER_UNDERSCORE\",\"lower_underscore\",\"UPPER_CAMEL\",\"UpperCamel\",\"UPPER_UNDERSCORE\",\"UPPER_UNDERSCORE\",\"Strings：也提供了几个没什么大用的小工具\"]},\"80\":{\"h\":\"基本类型工具\",\"t\":[\"Java 的基本类型包括8个：byte、short、int、long、float、double、char、boolean。Guava 提供了若干工具以支持基本类型和集合 API 的交互、字节数组转换、无符号形式的支持等等。\",\"基本类型\",\"Guava 工具类\",\"byte\",\"Bytes, SignedBytes, UnsignedBytes\",\"short\",\"Shorts\",\"int\",\"Ints, UnsignedInteger, UnsignedInts\",\"long\",\"Longs, UnsignedLong, UnsignedLongs\",\"float\",\"Floats\",\"double\",\"Doubles\",\"char\",\"Chars\",\"boolean\",\"Booleans\"]},\"81\":{\"h\":\"Range\",\"t\":[\"Guava 提供了 Range 类以支持范围类型，并且支持范围的运算，比如包含、交集、并集、查询等等。\",\"Range.open(a, b); // (a, b) Range.closed(a, b); // [a..b] Range.closedOpen(a, b); // [a..b) Range.openClosed(a, b); // (a..b] Range.greaterThan(a); // (a..+∞) Range.atLeast(a); // [a..+∞) Range.lessThan(a); // (-∞..b) Range.atMost(a); // (-∞..b] Range.all(); // (-∞..+∞) // 通用创建方式 Range.range(a, BoundType.CLOSED, b, BoundType.OPEN);\"]},\"82\":{\"h\":\"IO\",\"t\":[\"Guava 使用术语 **流 **来表示可关闭的，并且在底层资源中有位置状态的 I/O 数据流。字节流对应的工具类为 ByteSterams，字符流对应的工具类为 CharStreams。Guava 中为了避免和流直接打交道，抽象出可读的 源 source 和可写的 汇 sink 两个概念，指可以从中打开流的资源，比如 File、URL，同样也分别有字节和字符对应的源和汇，定义了一系列读写的方法。除此之外，Files 工具类提供了对文件的操作。（PS：个人觉得，JDK 的 IO 流已经够麻烦的了，又来一套 API 太乱了，而且也没有更好用吧。还是先统一用 JDK 标准库里的好一点。）\"]},\"83\":{\"h\":\"Hash\",\"t\":[\"JDK 内置的哈希限定为 32 位的 int 类型，虽然速度很快但质量一般，容易产生碰撞。为此 Guava 提供了自己的 Hash 包。\",\"Hashing 类内置了一系列的散列函数对象 HashFunction，包括 murmur3, sha256, adler32, crc32等等。\",\"确定 HashFunction 后进而拿到继承自 PrimitiveSink 的 Hasher 对象。\",\"作为一个汇，可以往 Hasher 里输入数据，可以是内置类型，也可以是自定义类型，但需要传递一个 Funnel 定义对象分解的方式。\",\"最后计算得到 HashCode 对象。\",\"HashFunction hf = Hashing.adler32(); User user = new User(\\\"chanper\\\", 24); HashCode hash = hf.newHasher() .putLong(20L) .putString(\\\"chanper\\\", StandardCharsets.UTF_8) // 输入自定义类，同时需要一个 Funnel .putObject(user, userFunnel) .hash(); // Funnel 定义对象分解的方式 Funnel<User> userFunnel = new Funnel<>() { @Override public void funnel(User user, PrimitiveSink into) { into .putString(user.name(), StandardCharsets.UTF_8) .putInt(user.age()); } };\",\"另外，Guava 库也内置了一个使用简便布隆过滤器。\",\"// funnel 对象，预期的插入数量，false positive probability BloomFilter<User> friends = BloomFilter.create(userFunnel, 500, 0.01); for (int i = 0; i < 1000; i++) { friends.put(new User(\\\"user_\\\" + i, 24)); } if(friends.mightContain(somebody)) { System.out.println(\\\"somebody is in friends\\\"); }\"]},\"84\":{\"h\":\"EventBus\",\"t\":[\"EventBus 是 Guava 提供的一个事件总线库，用于简化组件之间的通信。通过 EventBus，你可以实现发布/订阅模式，组件之间可以松散地耦合，使得事件的发布者（Producer）和订阅者（Subscriber）之间不需要直接依赖彼此。 使用时注意：\",\"一个订阅者可以处理多个不同的事件，取决于处理方法的参数，并且支持泛型的通配符\",\"没有对应的监听者则会把事件封装为DeadEvent，可以定义对应的监听器\",\"// 事件类型 public record MessageEvent(String message) {} public class MessageSubscriber { // 事件处理方法标记 @Subscribe public void handleMessageEvent(MessageEvent event) { System.out.println(\\\"Received message: \\\" + event.message()); } // 一个订阅者可以处理多个事件 @Subscribe public void handleMessageEvent(MessageEvent2 event2) { System.out.println(\\\"Received message2: \\\" + event2.message()); } } @Test public void testEvnetBus() { // 创建EventBus实例 EventBus eventBus = new EventBus(); // 注册订阅者 MessageSubscriber subscriber = new MessageSubscriber(); eventBus.register(subscriber); // 发布事件 MessageEvent event = new MessageEvent(\\\"Hello, EventBus!\\\"); eventBus.post(event); }\"]},\"85\":{\"h\":\"参考\",\"t\":[\"https://guava.dev/\",\"https://github.com/google/guava\",\"Google Guava官方教程（中文版） | Google Guava 中文教程 (旧版)\",\"（Guava 译文系列）Guava 用户手册 （新版）\"]},\"86\":{\"c\":[\"工具\"]},\"87\":{\"c\":[\"Guava\"]},\"88\":{\"h\":\"Guide-RPC 代码阅读\",\"t\":[\"项目地址：guide-rpc-framework\"]},\"89\":{\"h\":\"项目结构\",\"t\":[\"example-client: 客户端示例 \",\"HelloController\",\"NettyClient\",\"SocketClient\",\"examle-server：服务端示例 \",\"HelloServiceImpl\",\"NettyServer\",\"SocketServer\",\"hello-service-api：对外提供的服务接口 \",\"HelloService\",\"rpc-framework-common：实体对象、枚举、工具\",\"rpc-framework-simple：核心实现\"]},\"90\":{\"h\":\"服务端\",\"t\":[\"@RpcScan(basePackage = {\\\"github.javaguide\\\"}) public class NettyServerMain { public static void main(String[] args) { // Register service via annotation AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(NettyServerMain.class); NettyRpcServer nettyRpcServer = (NettyRpcServer) applicationContext.getBean(\\\"nettyRpcServer\\\"); // Register service manually HelloService helloService2 = new HelloServiceImpl2(); RpcServiceConfig rpcServiceConfig = RpcServiceConfig.builder() .group(\\\"test2\\\").version(\\\"version2\\\").service(helloService2).build(); nettyRpcServer.registerService(rpcServiceConfig); nettyRpcServer.start(); } }\"]},\"91\":{\"h\":\"容器加载\",\"t\":[\"在 refresh - invokeBeanFactoryPostProcessors 时，基于 Import-Registrar 机制注入 basePackage 下 @Component 和 @RpcService 注解的所有 Bean（仅注册，尚未实例化），包括：\",\"NettyRpcServer\",\"自定义的 SpringBeanPostProcessor\",\"HelloServiceImpl\",\"在 refresh - registerBeanPostProcessors 时，利用 SpringBeanPostProcessor 加载 ExtensionLoader，从 META-INF 目录下读取配置，缓存 SPI 机制支持的实现类：\",\"ServiceRegistry - ZkServiceRegistry 服务注册\",\"ServiceDiscovery - ZkServiceDiscovery 服务发现\",\"LoadBalance - ConsistentHashLoadBalance 负载均衡器\",\"RpcRequestTransport - Netty/Socket 客户端类型\",\"Serializer - Hessian/Kryo/Protostuff 序列化器\",\"Compress - GzipCompress 压缩类型\",\"在 refresh - finishBeanFactoryInitialization - preInstantiateSingletons：\",\"@RpcService: 创建 zk 持久节点，注册到 ServiceProvider 中\",\" @RpcReference: 创建动态代理对象 ClientProxy，替换 Bean 中的被调服务（如 Client 中的 HelloService）\"]},\"92\":{\"h\":\"注册服务\",\"t\":[\"构建 HelloService2 的 RpcServiceConfig，手动注册第二个 HelloService。NettyRpcServer#registerService 中把该服务注册到 ServiceProvider，具体的：\",\"serviceProvider::publishService\",\"加入服务的本地缓存 serviceMap 中，服务名即 key = serviceName_group_version\",\"zkServiceRegistry::registerService 创建 zk 持久节点，记录服务名和 ip:port（端口统一是Netty服务端口）\",\"zk-registry\"]},\"93\":{\"h\":\"Netty Server\",\"t\":[\"常规 ServerBootstrap 启动步骤，关键在于添加的处理器链。\",\"public void start() { CustomShutdownHook.getCustomShutdownHook().clearAll(); String host = InetAddress.getLocalHost().getHostAddress(); EventLoopGroup bossGroup = new NioEventLoopGroup(1); EventLoopGroup workerGroup = new NioEventLoopGroup(); DefaultEventExecutorGroup serviceHandlerGroup = new DefaultEventExecutorGroup( RuntimeUtil.cpus() * 2, ThreadPoolFactoryUtil.createThreadFactory(\\\"service-handler-group\\\", false) ); try { ServerBootstrap b = new ServerBootstrap(); b.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) .childOption(ChannelOption.TCP_NODELAY, true) .childOption(ChannelOption.SO_KEEPALIVE, true) .option(ChannelOption.SO_BACKLOG, 128) .handler(new LoggingHandler(LogLevel.INFO)) .childHandler(new ChannelInitializer<SocketChannel>() { @Override protected void initChannel(SocketChannel ch) { ChannelPipeline p = ch.pipeline(); p.addLast(new IdleStateHandler(30, 0, 0, TimeUnit.SECONDS)); p.addLast(new RpcMessageEncoder()); p.addLast(new RpcMessageDecoder()); p.addLast(serviceHandlerGroup, new NettyRpcServerHandler()); } }); ChannelFuture f = b.bind(host, PORT).sync(); f.channel().closeFuture().sync(); } catch (InterruptedException e) { log.error(\\\"occur exception when start server:\\\", e); } finally { log.error(\\\"shutdown bossGroup and workerGroup\\\"); bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); serviceHandlerGroup.shutdownGracefully(); } }\"]},\"94\":{\"h\":\"IdleStateHandler\",\"t\":[\"处理连接空闲状态\"]},\"95\":{\"h\":\"RpcMessageEncoder\",\"t\":[\"出站处理，负责 RpcMessage -> 协议定义的 ByteBuf\",\"RpcMessageEncoder\",\"协议格式\",\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 +-----+-----+-----+-----+--------+----+----+----+------+-----------+-------+----- --+-----+-----+-------+ | magic code |version | full length | messageType| codec|compress| RequestId | +-----------------------+--------+---------------------+-----------+-----------+-----------+------------+ | | | body | | | | ... ... | +-------------------------------------------------------------------------------------------------------+ * 4B magic code（魔法数） 1B version（版本） 4B full length（消息长度） 1B messageType（消息类型） * 1B compress（压缩类型） 1B codec（序列化类型） 4B requestId（请求的Id） * body（object类型数据）\"]},\"96\":{\"h\":\"RpcMessageDecoder\",\"t\":[\"入站处理，负责解析协议定义的 ByteBuf -> RpcMessage\",\"RpcMessageDecoder\"]},\"97\":{\"h\":\"NettyRpcServerHandler\",\"t\":[\"继承自 ChannelInboundHandlerAdapter 的入站处理，主要负责业务逻辑处理\",\"根据接收到的消息提取 RpcRequest 交由 RpcRequestHandler 执行业务逻辑\",\"RpcRequestHandler 根据 RpcRequest 从 ServiceProvider 中找到对应的服务，通过反射执行对应方法\",\"执行结果 -> RpcResponse -> RpcMessage 返回出去\"]},\"98\":{\"h\":\"客户端\",\"t\":[\"@RpcScan(basePackage = {\\\"github.javaguide\\\"}) public class NettyClientMain { public static void main(String[] args) throws InterruptedException { AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(NettyClientMain.class); HelloController helloController = (HelloController) applicationContext.getBean(\\\"helloController\\\"); helloController.test(); } }\"]},\"99\":{\"h\":\"容器加载\",\"t\":[\"和 Server 端一样，加载@Component 和 @RpcService 注解的所有 Bean。区别在于注入了HelloController并解析@RpcReference注解：\",\"@RpcReference的 version、group 属性决定了 HelloService 接口实际执行时的实现类\",\"SpringBeanPostProcessor 负责解析@RpcReference\",\"JDK动态代理接口，封装到继承了 InvocationHandler 的 RpcClientProxy\",\"在 RpcClientProxy#invoke 中构建 RpcRequest，通过 RpcRequestTransport#sendRpcRequest 发送调用请求\",\"拿到服务端响应的 RpcResponse 后返回 (Netty异步，Socket同步)\",\"RpcClientProxy\",\"SpringBeanPostProcessor 实例化时从 ExtensionLoader 获取并缓存了 RpcClient，后续创建 RPC 代理时注入到每个 ClientProxy 代理对象，实际远程调用时通过 RpcClient 发送调用请求并获取结果。\"]},\"100\":{\"h\":\"Netty Client\",\"t\":[\"客户端 Bootstrap 加载了 IdleStateHandler、RpcMessageEncoder、RpcMessageDecoder、NettyRpcClientHandler 四个处理器，和服务端相比有两个区别：\",\"封装了 UnprocessedRequests 记录处理中的请求\",\"NettyRpcClientHandler 中触发空闲事件时会主动发送 heartbeat\"]},\"101\":{\"h\":\"完整的 RPC 过程\",\"t\":[\"RPC过程\",\"Client 从 HelloService 接口开始，进入代理对象的 invoke 方法，由封装的 RpcClient 构造并发送 RPC 请求，期间需要从 ZK 获取服务节点，并根据负载均衡选择节点，经 Encoder 序列化、压缩后发送 Netty 请求。\",\"Server 接收到请求后，经 Decoder 反序列化、解压后交给 ServerHandler，由 RpcRequestHandler 处理请求，期间需要从 ServiceProvider 获取对应的服务，然后通过反射调用执行对应方法，执行的结果同样经 Encoder 序列化、压缩后通过 Netty 响应给客户端。\",\"Client 接收到响应后，经 Decoder 反序列化、解压后，交给 ClientHandler 取出 data 数据返回出去，最后回到 HelloService 继续执行。至此，一个简化的，完整的 RPC 请求调用过程执行完毕。\"]},\"102\":{\"c\":[\"分布式\"]},\"103\":{\"c\":[\"RPC\"]},\"104\":{\"h\":\"Hive SQL 语法大全\",\"t\":[\"本文档基于黑马程序员-大数据课程 + Hive官方文档 整理。\"]},\"105\":{\"h\":\"基于语法描述说明\",\"t\":[\"CREATE DATABASE [IF NOT EXISTS] db_name [LOCATION] 'path'; SELECT expr, ... FROM tbl ORDER BY col_name [ASC | DESC] (A | B | C)\",\"如上语法，在语法描述中出现：\",\"[]，表示可选，如上[LOCATION] 表示可写、可不写\",\"|，表示或，如上ASC | DESC，表示二选一\",\"...，表示序列，即未完结，如上SELECT expr, ... 表示在SELECT后可以跟多个expr（查询表达式），以逗号隔开\",\"()，表示必填，如上(A | B | C)表示此处必填，填入内容在A、B、C中三选一\"]},\"106\":{\"h\":\"数据库操作\"},\"107\":{\"h\":\"创建数据库\",\"t\":[\"CREATE DATABASE [IF NOT EXISTS] db_name [LOCATION 'path'] [COMMENT database_comment];\",\"IF NOT EXISTS，如存在同名数据库不执行任何操作，否则执行创建数据库操作\",\"[LOCATION]，自定义数据库存储位置，如不填写，默认数据库在HDFS的路径为：/user/hive/warehouse\",\"[COMMENT database_comment]，可选，数据库注释\"]},\"108\":{\"h\":\"删除数据库\",\"t\":[\"DROP DATABASE [IF EXISTS] db_name [CASCADE];\",\"[IF EXISTS]，可选，如果存在此数据库执行删除，不存在不执行任何操作\",\"[CASCADE]，可选，级联删除，即数据库内存在表，使用CASCADE可以强制删除数据库\"]},\"109\":{\"h\":\"数据库修改LOCATION\",\"t\":[\"ALTER DATABASE database_name SET LOCATION hdfs_path;\",\"注意：不会在HDFS对数据库所在目录进行改名，只是修改location后，新创建的表在新的路径，旧的不变\"]},\"110\":{\"h\":\"选择数据库\",\"t\":[\"USE db_name;\",\"选择数据库后，后续SQL操作基于当前选择的库执行\",\"如不使用use，默认在default库执行\",\"若想切换回使用default库\",\"USE DEFAULT;\",\"查询当前USE的数据库\",\"SELECT current_database();\"]},\"111\":{\"h\":\"表操作\"},\"112\":{\"h\":\"数据类型\",\"t\":[\"分类\",\"类型\",\"描述\",\"字面量示例\",\"原始类型\",\"BOOLEAN\",\"true/false\",\"TRUE\",\"TINYINT\",\"1字节的有符号整数 -128~127\",\"1Y\",\"SMALLINT\",\"2个字节的有符号整数，-32768~32767\",\"1S\",\"INT\",\"4个字节的带符号整数\",\"1\",\"BIGINT\",\"8字节带符号整数\",\"1L\",\"FLOAT\",\"4字节单精度浮点数1.0\",\"DOUBLE\",\"8字节双精度浮点数\",\"1.0\",\"DEICIMAL\",\"任意精度的带符号小数\",\"1.0\",\"STRING\",\"字符串，变长\",\"“a”,’b’\",\"VARCHAR\",\"变长字符串\",\"“a”,’b’\",\"CHAR\",\"固定长度字符串\",\"“a”,’b’\",\"BINARY\",\"字节数组\",\"TIMESTAMP\",\"时间戳，毫秒值精度\",\"122327493795\",\"DATE\",\"日期\",\"‘2016-03-29’\",\"时间频率间隔\",\"复杂类型\",\"ARRAY\",\"有序的的同类型的集合\",\"array(1,2)\",\"MAP\",\"key-value,key必须为原始类型，value可以任意类型\",\"map(‘a’,1,’b’,2)\",\"STRUCT\",\"字段集合,类型可以不同\",\"struct(‘1’,1,1.0), named_stract(‘col1’,’1’,’col2’,1,’clo3’,1.0)\",\"UNION\",\"在有限取值范围内的一个值\",\"create_union(1,’a’,63)\"]},\"113\":{\"h\":\"基础建表\",\"t\":[\"CREATE [EXTERNAL] TABLE tb_name (col_name col_type [COMMENT col_comment], ......) [COMMENT tb_comment] [PARTITIONED BY(col_name, col_type, ......)] [CLUSTERED BY(col_name, col_type, ......) INTO num BUCKETS] [ROW FORMAT DELIMITED FIELDS TERMINATED BY ''] [LOCATION 'path']\",\"[EXTERNAL]，外部表，需搭配\",\"[ROW FORMAT DELIMITED FIELDS TERMINATED BY '']指定列分隔符\",\"[LOCATION 'path']表数据路径\",\"外部表示意\",\"CREATE EXTERNAL TABLE test_ext(id int) COMMENT 'external table' ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\\\t' LOCATION 'hdfs://node1:8020/tmp/test_ext';\",\"[COMMENT tb_comment]表注释，可选\",\"[PARTITIONED BY(col_name, col_type, ......)]基于列分区\",\"-- 分区表示意 CREATE TABLE test_ext(id int) COMMENT 'partitioned table' PARTITION BY(year string, month string, day string) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\\\t';\",\"[CLUSTERED BY(col_name, col_type, ......)]基于列分桶\",\"CREATE TABLE course (c_id string,c_name string,t_id string) CLUSTERED BY(c_id) INTO 3 BUCKETS ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\\\t';\"]},\"114\":{\"h\":\"基于其它表的结构建表\",\"t\":[\"CREATE TABLE tbl_name LIKE other_tbl;\"]},\"115\":{\"h\":\"基于查询结果建表\",\"t\":[\"CREATE TABLE tbl_name AS SELECT ...;\"]},\"116\":{\"h\":\"删除表\",\"t\":[\"DROP TABLE tbl;\"]},\"117\":{\"h\":\"修改表\",\"t\":[\"重命名\",\"ALTER TABLE old RENAME TO new;\",\"修改属性\",\"ALTER TABLE tbl SET TBLPROPERTIES(key=value); -- 常用属性 (\\\"EXTERNAL\\\"=\\\"TRUE\\\") -- 内外部表，TRUE表示外部表 ('comment' = new_comment) -- 修改表注释 -- 其余属性参见 https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-listTableProperties\"]},\"118\":{\"h\":\"分区操作\",\"t\":[\"创建分区表\",\"-- 分区表示意 CREATE TABLE test_ext(id int) COMMENT 'partitioned table' PARTITION BY(year string, month string, day string) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\\\t';\",\"添加分区\",\"ALTER TABLE tablename ADD PARTITION (partition_key='partition_value', ......);\",\"修改分区值\",\"ALTER TABLE tablename PARTITION (partition_key='old_partition_value') RENAME TO PARTITION (partition_key='new_partition_value');\",\"注意\",\"只会在元数据中修改，不会同步修改HDFS路径吗，如：\",\"原分区路径为：/user/hive/warehouse/test.db/test_table/month=201910，分区名：month='201910'\",\"将分区名修改为：201911后，分区所在路径不变，依旧是：/user/hive/warehouse/test.db/test_table/month=201910\",\"如果希望修改分区名后，同步修改HDFS的路径，并保证正常可用，需要：\",\"在元数据库中：找到SDS表 -> 找到LOCATION列 -> 找到对应分区的路径记录进行修改\",\"如将记录的：/user/hive/warehouse/test.db/test_table/month=201910 修改为：/user/hive/warehouse/test.db/test_table/month=201911\",\"在HDFS中，同步修改文件夹名 \",\"如将文件夹：/user/hive/warehouse/test.db/test_table/month=201910 修改为：/user/hive/warehouse/test.db/test_table/month=201911\",\"删除分区\",\"ALTER TABLE tablename DROP PARTITION (partition_key='partition_value');\",\"删除分区后，只是在元数据中删除，即删除元数据库中：\",\"PARTITION表\",\"SDS表\",\"相关记录，但分区所在的HDFS文件夹依旧保留\",\"加载数据\",\"LOAD DATA\",\"LOAD DATA [LOCAL] INPATH 'path' INTO TABLE tbl PARTITION(partition_key='partition_value');\",\"INSERT SELECT\",\"INSERT (OVERWRITE | INTO) TABLE tbl PARTITION(partition_key='partition_value') SELECT ... FROM ...;\"]},\"119\":{\"h\":\"分桶操作\",\"t\":[\"建表\",\"CREATE TABLE course (c_id string,c_name string,t_id string) [PARTITION(partition_key='partition_value')] CLUSTERED BY(c_id) INTO 3 BUCKETS ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\\\t';\",\"CLUSTERED BY(col) 指定分桶列\",\"INTO 3 BUCKETS，设定3个桶\",\"分桶表需要开启：\",\"set hive.enforce.bucketing=true;\",\"设置自动匹配桶数量的reduces task数量\",\"数据加载\",\"INSERT (OVERWRITE | INTO) TABLE tbl [PARTITION(partition_key='partition_value')] SELECT ... FROM ... CLUSTER BY(col);\",\"注意：分桶表无法使用LOAD DATA进行数据加载\"]},\"120\":{\"h\":\"数据加载\",\"t\":[\"LOAD DATA\",\"将数据文件加载到表\",\"LOAD DATA [LOCAL] INPATH 'path' INTO TABLE tbl [PARTITION(partition_key='partition_value')]; -- 指定分区可选\",\"INSERT SELECT\",\"将其它表数据，加载到目标表\",\"INSERT (OVERWRITE | INTO) TABLE tbl [PARTITION(partition_key='partition_value')] -- 指定分区，可选 SELECT ... FROM ... [CLUSTER BY(col)]; -- 指定分桶列，可选\"]},\"121\":{\"h\":\"数据导出\",\"t\":[\"INSERT OVERWRITE SELECT\",\"INSERT OVERWRITE [LOCAL] DIRECTORY ‘path’ -- LOCAL可选，带LOCAL导出Linux本地，不带LOCAL导出到HDFS [ROW FORMAT DELIMITED FIELDS TERMINATED BY ''] -- 可选，自定义列分隔符 SELECT ... FROM ...;\",\"bin/hive\",\"bin/hive -e 'sql' > export_file 将sql结果重定向到导出文件中\",\"bin/hive -f 'sql_script_file' > export_file 将sql脚本执行的结果重定向到导出文件中\"]},\"122\":{\"h\":\"复杂类型\",\"t\":[\"类型\",\"定义\",\"示例\",\"内含元素类型\",\"元素个数\",\"取元素\",\"可用函数\",\"array\",\"array<类型>\",\"如定义为array<int>数据为：1,2,3,4,5\",\"单值，类型取决于定义\",\"动态，不限制\",\"array[数字序号] 序号从0开始\",\"size统计元素个数 array_contains判断是否包含指定数据\",\"map\",\"map<key类型, value类型>\",\"如定义为：map<string, int>数据为：{’a’: 1, ‘b’: 2, ‘c’: 3}\",\"键值对，K-V，K和V类型取决于定义\",\"动态，不限制\",\"map[key] 取出对应key的value\",\"size统计元素个数array_contains判断是否包含指定数据 map_keys取出全部key，返回array map_values取出全部values，返回array\",\"struct\",\"struct<子列名 类型, 子列名 类型...>\",\"如定义为：struct<c1 string, c2 int, c3 date>数据为：’a’, 1, ‘2000-01-01’\",\"单值，类型取决于定义\",\"固定，取决于定义的子列数量\",\"struct.子列名 通过子列名取出子列值\",\"暂无\"]},\"123\":{\"h\":\"查询 SQL\"},\"124\":{\"h\":\"基本查询\",\"t\":[\"create database itheima; use itheima; CREATE TABLE itheima.orders ( orderId bigint COMMENT '订单id', orderNo string COMMENT '订单编号', shopId bigint COMMENT '门店id', userId bigint COMMENT '用户id', orderStatus tinyint COMMENT '订单状态 -3:用户拒收 -2:未付款的订单 -1：用户取消 0:待发货 1:配送中 2:用户确认收货', goodsMoney double COMMENT '商品金额', deliverMoney double COMMENT '运费', totalMoney double COMMENT '订单金额（包括运费）', realTotalMoney double COMMENT '实际订单金额（折扣后金额）', payType tinyint COMMENT '支付方式,0:未知;1:支付宝，2：微信;3、现金；4、其他', isPay tinyint COMMENT '是否支付 0:未支付 1:已支付', userName string COMMENT '收件人姓名', userAddress string COMMENT '收件人地址', userPhone string COMMENT '收件人电话', createTime timestamp COMMENT '下单时间', payTime timestamp COMMENT '支付时间', totalPayFee int COMMENT '总支付金额' ) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\\\t'; load data local inpath '/home/hadoop/itheima_orders.txt' into table itheima.orders; CREATE TABLE itheima.users ( userId int, loginName string, loginSecret int, loginPwd string, userSex tinyint, userName string, trueName string, brithday date, userPhoto string, userQQ string, userPhone string, userScore int, userTotalScore int, userFrom tinyint, userMoney double, lockMoney double, createTime timestamp, payPwd string, rechargeMoney double ) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\\\t'; load data local inpath '/home/hadoop/itheima_users.txt' into table itheima.users; -- 查询全表数据 SELECT * FROM itheima.orders; -- 查询单列信息 SELECT orderid, userid, totalmoney FROM itheima.orders o ; -- 查询表有多少条数据 SELECT COUNT(*) FROM itheima.orders; -- 过滤广东省的订单 SELECT * FROM itheima.orders WHERE useraddress LIKE '%广东%'; -- 找出广东省单笔营业额最大的订单 SELECT * FROM itheima.orders WHERE useraddress LIKE '%广东%' ORDER BY totalmoney DESC LIMIT 1; -- 统计未支付、已支付各自的人数 SELECT ispay, COUNT(*) FROM itheima.orders o GROUP BY ispay ; -- 在已付款的订单中，统计每个用户最高的一笔消费金额 SELECT userid, MAX(totalmoney) FROM itheima.orders WHERE ispay = 1 GROUP BY userid; -- 统计每个用户的平均订单消费额 SELECT userid, AVG(totalmoney) FROM itheima.orders GROUP BY userid; -- 统计每个用户的平均订单消费额，并过滤大于10000的数据 SELECT userid, AVG(totalmoney) AS avg_money FROM itheima.orders GROUP BY userid HAVING avg_money > 10000; -- 订单表和用户表JOIN 找出用户username SELECT o.orderid, o.userid, u.username FROM itheima.orders o JOIN itheima.users u ON o.userid = u.userid; SELECT o.orderid, o.userid, u.username FROM itheima.orders o LEFT JOIN itheima.users u ON o.userid = u.userid;\"]},\"125\":{\"h\":\"RLIKE\",\"t\":[\"正则规则表：https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\",\"-- 查找广东省数据 SELECT * FROM itheima.orders WHERE useraddress RLIKE '.*广东.*'; -- 查找用户地址是：xx省 xx市 xx区 SELECT * FROM itheima.orders WHERE useraddress RLIKE '..省 ..市 ..区'; -- 查找用户姓为：张、王、邓 SELECT * FROM itheima.orders WHERE username RLIKE '[张王邓]\\\\\\\\S+'; -- 查找手机号符合：188****0*** 规则 SELECT * FROM itheima.orders WHERE userphone RLIKE '188\\\\\\\\S{4}0[0-9]{3}';\"]},\"126\":{\"h\":\"UNION联合\",\"t\":[\"CREATE TABLE itheima.course( c_id string, c_name string, t_id string) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\\\t'; LOAD DATA LOCAL INPATH '/home/hadoop/course.txt' INTO TABLE itheima.course; -- 基础UNION SELECT * FROM itheima.course WHERE t_id = '周杰轮' UNION SELECT * FROM itheima.course WHERE t_id = '王力鸿'; -- 去重演示 SELECT * FROM itheima.course UNION SELECT * FROM itheima.course; -- 不去重 SELECT * FROM itheima.course UNION ALL SELECT * FROM itheima.course; -- UNION写在FROM中 UNION写在子查询中 SELECT t_id, COUNT(*) FROM ( SELECT * FROM itheima.course WHERE t_id = '周杰轮' UNION ALL SELECT * FROM itheima.course WHERE t_id = '王力鸿' ) AS u GROUP BY t_id; -- 用于INSERT SELECT INSERT OVERWRITE TABLE itheima.course2 SELECT * FROM itheima.course UNION SELECT * FROM itheima.course;\"]},\"127\":{\"h\":\"Sampling采样\",\"t\":[\"# 随机桶抽取， 分配桶是有规则的 # 可以按照列的hash取模分桶 # 按照完全随机分桶 -- 其它条件不变的话，每一次运行结果一致 select username, orderId, totalmoney FROM itheima.orders tablesample(bucket 3 out of 10 on username); -- 完全随机，每一次运行结果不同 select * from itheima.orders tablesample(bucket 3 out of 10 on rand()); # 数据块抽取，按顺序抽取，每次条件不变，抽取结果不变 -- 抽取100条 select * from itheima.orders tablesample(100 rows); -- 取1%数据 select * from itheima.orders tablesample(1 percent); -- 取 1KB数据 select * from itheima.orders tablesample(1K);\"]},\"128\":{\"h\":\"虚拟列\",\"t\":[\"虚拟列是Hive内置的可以在查询语句中使用的特殊标记，可以查询数据本身的详细参数。\",\"Hive目前可用3个虚拟列：\",\"- INPUT__FILE__NAME，显示数据行所在的具体文件 - BLOCK__OFFSET__INSIDE__FILE，显示数据行所在文件的偏移量 - ROW__OFFSET__INSIDE__BLOCK，显示数据所在HDFS块的偏移量 此虚拟列需要设置：SET hive.exec.rowoffset=true 才可使用\",\"SET hive.exec.rowoffset=true; SELECT orderid, username, INPUT__FILE__NAME, BLOCK__OFFSET__INSIDE__FILE, ROW__OFFSET__INSIDE__BLOCK FROM itheima.orders; SELECT *, BLOCK__OFFSET__INSIDE__FILE FROM itheima.orders WHERE BLOCK__OFFSET__INSIDE__FILE < 1000; SELECT orderid, username, INPUT__FILE__NAME, BLOCK__OFFSET__INSIDE__FILE, ROW__OFFSET__INSIDE__BLOCK FROM itheima.orders_bucket; SELECT INPUT__FILE__NAME, COUNT(*) FROM itheima.orders_bucket GROUP BY INPUT__FILE__NAME;\"]},\"129\":{\"h\":\"函数\",\"t\":[\"数值、集合、转换、日期函数\",\"-- 查看所有可用函数 show functions; -- 查看函数使用方式 describe function extended count; -- 数值函数 -- round 取整，设置小数精度 select round(3.1415926); -- 取整(四舍五入) select round(3.1415926, 4); -- 设置小数精度4位(四舍五入) -- 随机数 select rand(); -- 完全随机 select rand(3); -- 设置随机数种子，设置种子后每次运行结果一致的 -- 绝对值 select abs(-3); -- 求PI select pi(); -- 集合函数 -- 求元素个数 select size(work_locations) from test_array; select size(members) from test_map; -- 取出map的全部key select map_keys(members) from test_map; -- 取出map的全部value select map_values(members) from test_map; -- 查询array内是否包含指定元素，是就返回True select * from test_array where ARRAY_CONTAINS(work_locations, 'tianjin'); -- 排序 select *, sort_array(work_locations) from test_array; -- 类型转换函数 -- 转二进制 select binary('hadoop'); -- 自由转换，类型转换失败报错或返回NULL select cast('1' as bigint); -- 日期函数 -- 当前时间戳 select current_timestamp(); -- 当前日期 select current_date(); -- 时间戳转日期 select to_date(current_timestamp()); -- 年月日季度等 select year('2020-01-11'); select month('2020-01-11'); select day('2020-01-11'); select quarter('2020-05-11'); select dayofmonth('2020-05-11'); select hour('2020-05-11 10:36:59'); select minute('2020-05-11 10:36:59'); select second('2020-05-11 10:36:59'); select weekofyear('2020-05-11 10:36:59'); -- 日期之间的天数 select datediff('2022-12-31', '2019-12-31'); -- 日期相加、相减 select date_add('2022-12-31', 5); select date_sub('2022-12-31', 5);\"]},\"130\":{\"h\":\"Hive列注释、表注释等乱码解决方案\",\"t\":[\"-- 在Hive的MySQL元数据库中执行 use hive; 1).修改字段注释字符集 alter table COLUMNS_V2 modify column COMMENT varchar(256) character set utf8; 2).修改表注释字符集 alter table TABLE_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8; 3).修改分区表参数，以支持分区键能够用中文表示 alter table PARTITION_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8; alter table PARTITION_KEYS modify column PKEY_COMMENT varchar(4000) character set utf8; 4).修改索引注解 mysql>alter table INDEX_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;\"]},\"131\":{\"c\":[\"大数据\"]},\"132\":{\"c\":[\"Hadoop\",\"Hive\"]},\"133\":{\"h\":\"Java 并发学习\"},\"134\":{\"h\":\"基本概念\",\"t\":[\"并发：多个任务交替执行 (微观串行，宏观并行)\",\"并行：多个任务同时执行\",\"同步：一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为\",\"异步：一旦开始，调用就会立即返回，调用者可以继续后续的操作\",\"临界区：存在对共享资源进行多线程读写操作的代码块\",\"竞态条件：多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称为发生了竞态条件 Race Condition\",\"阻塞：一个线程占用了临界区资源，其它线程必须等待，导致线程挂起，就是阻塞\",\"非阻塞：没有一个线程可以防碍其他线程执行，所有线程都会尝试不断前进\",\"多线程的活跃性问题：\",\"死锁：多个线程都占有其它线程需要的资源，且都不释放，从而没有一个线程可以同时拿到所有资源，造成所有线程都进入等待\",\"饥饿：某一个或多个线程因为种种原因无法获得所需要的资源，导致一直无法执行\",\"活锁：多个线程在竞争资源时，都主动释放给其它线程使用，导致资源不断在两个线程间跳动，从而没有一个线程可以同时拿到所有资源\",\"进程 & 线程\",\"为了提高OS的工作效率，人们先后提出了批处理OS、进程、线程、协程。\",\"进程：应用程序分配资源的单位，也就是正在运行的程序。各个进程之间互不干扰，保存着程序运行的状态\",\"线程：一个进程之内可以分为若干个线程，每个线程负责一个单独的子任务，是 CPU 调度的基本单位\",\"协程：一种运行在线程之上的用户态模型，也称纤程，在线程的基础上通过时分复用的方式运行多个协程\",\"进程让操作系统的并发性成为了可能，而线程让进程的内部并发成为了可能。二者的本质区别在于是否单独占用内存地址及其它系统资源：\",\"进程单独占有一定的内存地址空间，所以进程间存在内存隔离，数据是分开的，数据共享复杂但是同步简单，各个进程之间互不干扰；而线程共享所属进程占有的内存地址空间和资源，数据共享简单，但是同步复杂。\",\"进程单独占有一定的内存地址空间，一个进程出现问题不会影响其他进程，不影响主程序的稳定性，可靠性高；一个线程崩溃可能影响整个程序的稳定性，可靠性较低。\",\"进程单独占有一定的内存地址空间，进程的创建和销毁不仅需要保存寄存器和栈信息，还需要资源的分配回收以及页调度，开销较大；线程只需要保存寄存器和栈信息，开销较小。\",\"总而言之，线程的优势是通信简单、上下文切换开销低。\",\"上下文切换\",\"由于某些原因导致 CPU 不再执行当前的线程，转而执行另一个线程的代码，例如：\",\"线程的 cpu 时间片用完\",\"垃圾回收\",\"有更高优先级的线程需要运行\",\"线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法\",\"当发送上下文切换时，OS 需要保存当前线程的状态，并恢复另一个线程的状态，JVM 中对应的就是线程私有的程序计数器，以及栈帧等信息，频繁的上下文切换会影响性能。\"]},\"135\":{\"h\":\"同步基础\"},\"136\":{\"h\":\"Thread\",\"t\":[\"关于 Java 线程：Thread 源码阅读\",\"Java 中创建主要基于 Thread 和 Running，其中直接创建 Thread 方式实际是合并了 Running 对象，通常更推荐使用 Runnable 接口创建线程，因为：\",\"Java 单继承多实现的特性使得 Runnable 接口使用起来比 Thread 更灵活\",\"Runnable 更符合面向对象，将线程对象单独进行封装。\",\"Runnable 降低了线程对象和线程任务的耦合性\"]},\"137\":{\"h\":\"线程间通信\",\"t\":[\"锁 Java 中的锁都是基于对象的，因此也称对象锁。而同步指线程之间按照一定的顺序执行。基本的加锁使用 synchronized 关键字。\",\"等待/通知 基于 Object::wait(), notify(), notifyAll() 方法实现\",\"信号量 JDK 提供 Semaphore 类，或者通过 volatile 关键字实现。volatile 保证内存的可见性，一个变量在一个线程里改变，其它线程立即可知。\",\"管道 基于管道流的通信方式，使用 JDK 提供的 PipedWriter, PipedReader, PipedOutputStream, PipedInputStream 等\",\"其它 还有等待其它线程完成的 join(), sleep()，本地线程副本变量工具 ThreadLocal 等\"]},\"138\":{\"h\":\"Synchronized\",\"t\":[\"见 Synchronized 锁机制\"]},\"139\":{\"h\":\"wait/notify\",\"t\":[\"Object 对象上了提供了几个 API 用于实现等待唤醒机制，相比于简单的 sleep 更加灵活高效。这些方法底层基于 Object 和 Monitor，因此必须配合 Synchronzied 一起使用：\",\"obj.wait() 让拿到 obj 监视器的线程进入 waitSet 等待\",\"obj.wait(long n) 让拿到 obj 监视器的线程到 waitSet 有限等待\",\"obj.notify() 在 obj 关联的 monitor::waitSet 线程集合中挑一个唤醒\",\"obj.notifyAll() 让 obj 关联的 monitor::waitSet 线程集合全部被唤醒\",\"注意：\",\"sleep 是 Thread 方法，而 wait 是 Object 的方法\",\"wait 需要配合 Synchronized 并且会释放对象锁，而 sleep()不会释放锁资源，仅让出CPU，且不能被唤醒\",\"notify 不会立即释放CPU和锁资源，而是等同步代码执行完毕才释放\",\"原理：\",\"对 obj 上锁的线程（monitor 的 Owner 线程）发现条件不满足，调用 wait 后会释放 obj 的锁资源，让其它线程竞争，然后进入 monitor 的 waitSet 集合中，转为 WAITING 状态。EntryList 里的 Blocked 线程和 waitSet 里的 WAITING 线程都处于阻塞状态，不会占用 CPU 时间片。\",\"waitSet 中的线程会在新的 Owner 线程调用 notify/notifyAll 时被唤醒，接着进入 EntryList 列表中和 Blocked 线程一起竞争锁资源。\"]},\"140\":{\"h\":\"park/unpark\",\"t\":[\"见 LockSupport\"]},\"141\":{\"h\":\"内存模型\"},\"142\":{\"h\":\"JMM\",\"t\":[\"Java 线程之间的通信由 Java 内存模型（Java Memory Model，JMM）控制，JMM 是一个抽象模型，定义了主存、工作内存抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、CPU 指令优化等。\",\"特点：\",\"线程间通信必须经过主内存\",\"线程对共享变量的所有操作必须在自己的本地内存中进行，不能直接操作主内存\"]},\"143\":{\"h\":\"重排序\",\"t\":[\"由于流水线技术的产生和中断对流水线的影响，人们提出了指令重排，在不改变程序结果的前提下，通过重排序和组合来实现指令级并行，大幅提高 CPU 吞吐量。具体分三种：\",\"编译器优化重排 编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序\",\"指令并行重排 现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性(即后一个执行的语句无需依赖前面执行的语句的结果)，处理器可以改变语句对应的机器指令的执行顺序\",\"内存系统重排 由于处理器使用缓存和读写缓存冲区，这使得加载(load)和存储(store)操作看上去可能是在乱序执行，因为三级缓存的存在，导致内存与缓存的数据同步存在时间差\",\"指令重排可以保证串行语义一致，但是没有义务保证多线程间的语义也一致。因此多线程下指令重排可能导致内存可见性问题，需要一些规则来限制。\",\"Happens-Before\",\"JMM 认为，只要不改变程序的执行结果（单线程程序和正确同步了的多线程程序），编译器和处理器怎么优化都行。JMM 使用 happens-before 规则规定了对共享变量的写操作对其它线程的读操作可见，它是可见性与有序性的一套规则总结。包括如下几条：\",\"程序顺序规则：一个线程中的每一个操作，happens-before 于该线程中的任意后续操作。\",\"锁规则：对一个锁的解锁，happens-before 于随后对这个锁的加锁。\",\"volatile 规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。\",\"传递性：如果 A happens-before B，且 B happens-before C，那么 A happens-before C。\",\"start 规则：如果线程 A 执行操作 ThreadB.start() 启动线程 B，那么 A 线程的 ThreadB.start() 操作 happens-before 于线程 B 中的任意操作\",\"join 规则：如果线程 A 执行操作 ThreadB.join() 并成功返回，那么线程 B 中的任意操作 happens-before 于线程 A 从 ThreadB.join() 操作成功返回\",\"interrupt 规则：线程的中断interrupt()先于被中断线程的代码\",\"finalize 规则：对象构造函数的执行、结束先于finalize()\"]},\"144\":{\"h\":\"三大特性\",\"t\":[\"由于上述的 Java 内存模型、指令重排序，以及各种优化措施，可以引出线程安全的三大特性\",\"原子性： \",\"若干个操作要么全部执行，要么全部不执行\",\"即要保证指令不会受到线程上下文切换的影响\",\"可见性： \",\"当一个线程修改了共享变量的值，其他线程能够立即看到这个修改\",\"即要保证指令不会受 cpu 缓存的影响\",\"有序性： \",\"程序的执行顺序与代码的顺序相同\",\"即要保证指令不会受 cpu 指令并行优化的影响\",\"要编写线程安全的代码，其核心在于要对状态访问操作进行管理，特别是对共享的、可变的状态的访问。\"]},\"145\":{\"h\":\"Volatile\",\"t\":[\"Java 语言规定，如果一个字段被声明成 volatile，Java 线程内存模型将基于写屏障 store fence、读屏障 load fence，确保所有线程看到这个变量的值都是一致的，从而保证可见性和有序性（Synchronized 保证了原子性、可见性，以及临界区前后的有序性）。\",\"可见性原理\",\"一个线程对 volatile 变量进行读操作时，JMM 会把立即该线程对应的本地内存置为无效，从主内存中读取共享变量的值（MESI 缓存一致性协议）\",\"一个线程对 volatile 变量进行写操作时，JMM 会立即把该线程对应的本地内存中共享变量的值刷新到主内存\",\"Synchronized 和 volatile 提供的可见性保证基于内存栅栏 Memory Barrier指令，它可以刷新缓存，使缓存无效，刷新硬件的写缓存，以及停止执行管道。另一方面，内存栅栏可能会间接影响性能，因为它们将抑制一些编译器优化操作，并且大多数操作不能被重排序。\",\"有序性原理\",\"基于读屏障，不会将读屏障之后的代码排在读屏障之前\",\"基于写屏障，不会将写屏障之前的代码排在写屏障之后\",\"在保证内存可见性上，volatile 有着与锁相同的内存语义，所以可以作为一个轻量级的锁来使用。但由于 volatile 仅仅保证对单个 volatile 变量的读/写具有原子性，不能解决多线程指令交错产生的并发问题，而锁可以保证整个临界区代码的执行具有原子性。所以在功能上 synchronized 锁比 volatile 更强大，而性能上 volatile 更有优势。\"]},\"146\":{\"h\":\"不可变\",\"t\":[\"如果一个对象是不可变的，那它天生就是线程安全的，因为不存在并发修改的问题。例如 String, DateTimeFormatter 等不可变的类，以及用 final 实现不可变。\",\"Defensive Copy\",\"构造新对象时，通过拷贝创建副本对象，来避免共享的手段称为Defensive Copy 保护性拷贝。典型的例子是 String 字符串类型。\",\"Flyweight Pattern\",\"需要重用数量有限的同一类对象时，通过与其他类似对象共享尽可能多的数据，来最小化内存使用的一种设计模式，称为 Flyweight Patern 享元模式。典型的是 Boolean（缓存 TRUE, FALSE）, Integer（缓存 -128-127）, Long（缓存 -128-127）, Character（缓存 0-127） 等包装类型。\",\"Final\",\"final 关键字可以保护数据的一致性，对引用变量来说是引用地址的一致性，对基本类型来说就是值的一致性。底层通过写屏障保证 final 变量的可见性。\",\"例如匿名内部类访问局部变量，要求变量必须是 final 的，底层会通过匿名内部类的构造器拷贝传入该变量值，因此必须保证该变量为 final 不可变，才能保证后续运行结果一致。\",\"无状态\",\"特殊的不可变，没有任何成员变量的这种无状态类，也是线程安全的。\"]},\"147\":{\"h\":\"无锁并发\"},\"148\":{\"h\":\"CAS\",\"t\":[\"Synchronized 是一种悲观锁，认为每次访问共享资源时都会发生冲突，所以必须对每次数据操作加上锁，以保证临界区的程序同一时间只能有一个线程在执行。\",\"而乐观锁总是假设对共享资源的访问没有冲突，线程可以不停地执行，无需加锁也无需等待，真正发生冲突时再处理。比较并交换 CAS就是一种典型的基于乐观锁的同步机制，它是一个原子操作，基于 CPU 提供的 CMPXCHG 原子指令实现。其中，有三个值：\",\"V：要更新的变量 (var)\",\"E：预期值 (expected)\",\"N：新值 (new)\",\"执行时，先判断 V 是否等于 E，如果相等，将 V 的值设置为 N；如果不等，说明已经有其它线程更新了 V，则当前线程放弃更新，什么都不做。\",\"但普通的CAS存在一些问题：\",\"ABA 问题，可以使用时间戳/版本号解决，如 JDK 提供的 AtomicStampedReference\",\"自旋循环时间过长，可以结合处理器的 pause 指令\",\"只能保证一个共享变量的原子操作，可以使用 AtomicReference 或 锁机制\",\"CAS 无锁的方式对死锁天然免疫，没有锁竞争带来的开销，也没有线程间频繁调度的开销，因此比基于锁的 synchronized 方式拥有更优越的性能，但如果竞争激烈，还是会发生频繁的重试，同样影响效率，而且 CAS 把处理竞争的问题（重试、回退、放弃，当然原子工具类已经帮我们处理好了）留给了调用者。因此 CAS 适合线程数少、竞争不太激烈的场景。\"]},\"149\":{\"h\":\"Unsafe\",\"t\":[\"CAS 是一种实现无锁的思想，CPU 层面提供了实现可能。在 Java 层面，JDK 提供了 Unsafe 类用于实现多样的 CAS 操作，具体见Unsafe 源码阅读。\"]},\"150\":{\"h\":\"原子工具\",\"t\":[\"在Unsafe类和CAS 思想的基础之上，JDK 提供了更多方便易用的无锁并发工具类。\",\"原子整数\",\"AtomicBoolean\",\"AtomicInteger\",\"AtomicLong\",\"原子引用\",\"AtomicReference\",\"AtomicStampedReference (维护版本号，解决了 ABA 问题)\",\"AtomicMarkableReference (简化带版本号的 CAS，只关注是否修改过)\",\"原子数组\",\"AtomicIntegerArray\",\"AtomicLongArray\",\"AtomicReferenceArray\",\"原子域更新器（针对对象的 volatile 域）\",\"AtomicIntegerFieldUpdater\",\"AtomicLongFieldUpdater\",\"AtomicReferenceFieldUpdater\",\"原子累加器（基于分治思想，类似 fork/join，分 cell 累加最后汇总）\",\"DoubleAdder (仅相加)\",\"DoubleAccumulator (自定义累加规则)\",\"LongAdder (仅相加)\",\"LongAccumulator (自定义累加规则)\"]},\"151\":{\"h\":\"JDK 并发工具\"},\"152\":{\"h\":\"线程池\",\"t\":[\"见 ThreadPoolExecutor 源码分析\"]},\"153\":{\"h\":\"ForkJoin\",\"t\":[\"Fork/Join 是 JDK 1.7 新加入的线程池实现，基于分治思想，把每个任务的分解和合并交给不同的线程来完成，以最大化利用多核处理器提高应用程序的性能，适用于能够进行任务拆分的 CPU 密集型运算。\",\"fork_join流程图\",\"Fork/Join框架会将任务分配给线程池中的线程，执行任务时会使用工作窃取算法：\",\"工作窃取算法运行流程图\",\"// 任务类需要继承：有返回值的 RecursiveTask / 无返回值的 RecursiveAction class AddTask extends RecursiveTask<Integer> { int n; public AddTask(int n) { this.n = n; } // 重写 compute @Override protected Integer compute() { if (n == 1) { log.debug(\\\"join() {}\\\", n); return n; } // 拆分任务：fork() 使用线程池中的空闲线程异步提交任务 AddTask t = new AddTask(n - 1); t1.fork(); log.debug(\\\"fork() {} + {}\\\", n, t1); // 合并结果：join() 等待处理任务的线程执行完毕，获得返回值 int result = n + t1.join(); log.debug(\\\"join() {} + {} = {}\\\", n, t1, result); return result; } } // 创建并行度 4 的 ForkJoin 线程池 ForkJoinPool pool = new ForkJoinPool(4); // 提交可分解的任务 System.out.println(pool.invoke(new AddTask(5)));\",\"Java 8 开始的 Stream 接口默认是使用串行的方式，通过 parallel() 可以使计算并行化，一个 Java 进程的 Stream 并行计算任务共享一个线程池。其底层就是使用了 ForkJoin 框架，根据是否是 parallel 创建流对应的任务ReduceTask -> AbstractTask -> CountedCompleter -> ForkJoinTask，执行时间接调用了ForkJoinTask::invoke()。\",\"stream.parallel()\",\"list.parallelStream()\",\"Arrays.parallelSort(arr)\",\"Arrays.parallelSetAll(arr, generator)\",\"......\"]},\"154\":{\"h\":\"ThreadLocal\",\"t\":[\"ThreadLocal 可以提供线程专属变量，每个线程拥有一份自己的数据，多个线程之间互不干扰。\",\"ThreadLocal结构\",\"每个 Thread 内部都有一个 ThreadLocalMap 对象 threadLocals，本质上是一个键值对的映射，其中 key 是共享的 ThreadLocal 实例对象本身的弱引用，value 是该线程内部的变量值。因此，在不同线程中访问同一个 ThreadLocal 对象时，实际上是访问了各个 Thread-ThreadLocalMap 对象中的不同 value，从而避免了多线程之间对变量的共享和访问冲突。\",\"// java.lang.Thread ThreadLocal.ThreadLocalMap threadLocals = null; // java.lang.ThreadLocal.ThreadLocalMap static class ThreadLocalMap { // 注意 key 是弱引用 static class Entry extends WeakReference<ThreadLocal<?>> { Object value; Entry(ThreadLocal<?> k, Object v) { super(k); value = v; } } ... } // java.lang.ThreadLocal#get public T get() { Thread t = Thread.currentThread(); // 获取线程 t 的 threadLocals ThreadLocalMap map = getMap(t); if (map != null) { ThreadLocalMap.Entry e = map.getEntry(this); if (e != null) { T result = (T)e.value; return result; } } return setInitialValue(); }\",\"为什么是弱引用\",\"假如使用强引用，当ThreadLocal不再使用需要回收时，发现某个线程中ThreadLocalMap存在该ThreadLocal的强引用，无法回收，从而造成内存泄漏。\",\"使用弱引用可以防止长期存在的线程（通常使用了线程池）导致ThreadLocal无法回收造成内存泄漏。\",\"内存泄露问题\",\"主要由两个强引用关系造成：\",\"ThreadLocal 强引用：由声明位置决定（全局变量或局部变量）\",\"ThreadLocalMap 强引用：由线程对象决定（线程何时执行完成）\",\"为了使 ThreadLocal 对象在线程间重复使用，通常会将其声明为全局变量。此时，ThreadLocal 强引用关系永远不会断开，那么存储的对象永远不会被回收。在使用线程池情况下，工作线程会重复使用，此时 ThreadLocalMap 不会被回收，造成内存泄漏。\",\"因此，在使用完 ThreadLocal 后应手动调用 remove() 进行回收，避免内存泄漏。\",\"使用场景\",\"例如 SimpleDateFormat/Random 这样的工具类，每个线程都要用到，如果每个线程都 new 一个很麻烦，因此可以改成static共用。但是可能会线程不安全，因此可以使用 threadLocal 每个线程分配一个，保证线程安全\",\"对于同一个线程内所有方法需要共享的资源，比如用户信息，为了避免参数一层层显式传递，同时保证线程的安全，可以使用 threadLocal 保存。这样每个线程内访问的都是相同的资源，不同线程访问的是不同资源。\",\"Set() 实现\",\"计算 key 的哈希，内部的 nextHashCode() 每次添加时自增一个斐波那契数，来和数组/槽容量相与（使得哈希分布更均匀）\",\"如果哈希对应的槽为空，直接新建 Entry 放入\",\"槽非空的情况下 \",\"如果 key 相同，那么直接覆盖更新\",\"如果 key 为 null，说明被 GC 了，替换过期的本地变量，\",\"否则使用线性探测法，直到找到合适的位置\",\"执行 cleanSomeSlots() 清理 key 为 null 的 Entry，如果没有需要清理的，且 size 超过阈值（容量的2/3），进行 rehash\",\"过期 key 的清理\",\"replaceStaleEntry()\",\"从 staleSlot 向前迭代找过期槽，更新 slotToExpunge，直到空槽\",\"从 staleSlot 向后迭代找 key 相同的，执行更新，直到空槽\",\"最后从 slotToExpunge 开始执行启发式过期数据清理\",\"启发式清理 - cleanSomeSlots()\",\"当容量/2的位置开始探测式清理\",\"探测式清理 - expungeStaleEntry()\",\"以当前 Entry 往后清理，遇到值为 null 则结束清理，属于线性探测清理\",\"get() 实现\",\"根据当前线程拿到 ThreadLocalMap 对象\",\"计算 ThreadLocal 这个 key 的哈希定位 Slot\",\"从 ThreadLocalMap 拿到 value，如果不匹配则线性探测，同时清理无效本地变量\",\"InheritableThreadLocal\",\"ThreadLocal 无法在异步场景下给子线程共享父线程中创建的线程副本，可以使用 InheritableThreadLocal，在 Thread 构造方法中传递数据。 但一般异步处理都使用线程池复用，存在数据不一致问题，可以用阿里开源的 TransmittableThreadLocal 组件。\"]},\"155\":{\"h\":\"AQS\",\"t\":[\"AQS 是众多 JDK 并发工具的底层基础，代码非常精妙，具体见 AQS 源码解析\"]},\"156\":{\"h\":\"ReentrantLock\",\"t\":[\"可重入锁 ReentrantLock 是 Lock 锁接口的默认实现，内部基于 AQS->Sync->NonfairSync/FairSync 两个同步器，都是独占式的排它锁。相比于原始的 Synchronized 锁机制，ReentrackLock 的特点包括：\",\"可中断\",\"支持超时时间\",\"支持公平/非公平\",\"支持多条件变量\",\"核心 API\",\"// 创建基于 NonfairSync 的非公平锁 ReentrantLock lock = new ReentrantLock(); // 创建基于 FairSync 的公平锁 ReentrantLock lock = new ReentrantLock(true); // 加锁，如果锁已经被占用则等待（默认不可中断，永久阻塞） lock.lock(); // 解锁 lock.unlock(); // 加可中断锁 // 没有竞争直接获得锁，有竞争则进入阻塞队列，但可以被 interrupt 中断 lock.lockInterruptibly(); // 尝试加锁，失败会立刻返回 lock.tryLock(); // 支持超时设置 lock.tryLock(time, TimeUnit); // 创建重入锁关联的条件变量 Condition cond = lock.newCondition(); // 当前线程（已上锁）释放锁，进入 conditionObject 等待 cond.await(); // 等待，但不响应中断 cond.awaitUninterruptibly(); // 随机唤醒该条件变量上等待的线程 cond.signal(); // 唤醒该条件变量上等待的所有线程 cond.signalAll();\"]},\"157\":{\"h\":\"ReentrantReadWriteLock\",\"t\":[\"ReentrantReadWriteLock 是 JDK 5 提供的ReadWriteLock读写锁接口的默认实现，底层同样是基于 AQS->Sync->NonfairSync/FairSync 两个同步器。当读操作远远高于写操作时，可以让读-读并发，有效减少锁竞争，提升系统性能，并且支持可重入、公平/非公平。\",\"核心 API\",\"// 默认基于 NonfairSync 的非公平锁 ReentrantReadWriteLock rw = new ReentrantReadWriteLock(); // 基于 FairSync 的公平锁 ReentrantReadWriteLock rw = new ReentrantReadWriteLock(true); // 获取读锁 ReentrantReadWriteLock.ReadLock r = rw.readLock(); // 获取写锁 ReentrantReadWriteLock.WriteLock w = rw.writeLock(); // 上锁 r.lock(); // 解锁 r.unlock();\"]},\"158\":{\"h\":\"StampedLock\",\"t\":[\"StampedLock 是 Java 8 引入的一个新的同步工具，性能十分优异，可以取代ReentrantReadWriteLock。它提供了乐观读、悲观读和写锁的语义，特点是在使用读锁、写锁时都必须配合Stamp 戳使用加解读锁，以支持更细粒度的锁定。底层基于 CAS 操作和锁状态的原子操作，并借鉴了 AQS 的实现。\",\"核心 API\",\"StampedLock stampedLock = new StampedLock(); long stamp = stampedLock.readLock(); // 乐观读锁 long stamp = stampedLock.tryOptimisticRead(); // 尝试乐观读锁 stampedLock.unlockRead(stamp); // 释放乐观读锁 long stamp = stampedLock.writeLock(); // 获取写锁 stampedLock.unlockWrite(stamp); // 释放写锁 stampedLock.validate(stamp) // 检查是否有其他线程修改了数据\"]},\"159\":{\"h\":\"Semaphore\",\"t\":[\"Semaphore 信号量是一种基于 AQS 实现的同步工具，用于控制对共享资源的访问，它是锁机制的扩展，允许多个线程同时访问共享资源。实现上，它使用一个计数器来跟踪可用的资源数量，当一个线程需要访问资源时，它首先尝试获取一个许可证，如果计数器为零，则该线程将被阻塞，直到其他线程释放一个许可证。\",\"核心 API\",\"// 创建一个初始许可证数量为 5 的Semaphore，默认非公平 Semaphore semaphore = new Semaphore(5); // 获取许可证 semaphore.acquire(); semaphore.tryAcquire(timeout, TimeUnit); semaphore.acquireUninterruptibly() // 释放许可证 semaphore.release();\"]},\"160\":{\"h\":\"CountdownLatch\",\"t\":[\"CountdownLatch 倒计数器（Latch：门闩）。同样是基于 AQS 实现的同步器，用于在并行计算中同步线程，使一个或多个线程等待其他线程完成操作。\",\"核心 API\",\"// // 创建一个初始计数为 3 的 CountDownLatch CountDownLatch latch = new CountDownLatch(3); // 减少计数（其它线程） latch.countDown(); // 等待计数归零（等待线程） latch.await();\"]},\"161\":{\"h\":\"CyclicBarrier\",\"t\":[\"CyclicBarrier 循环栅栏，允许一组线程互相等待，直到所有线程都达到某个状态后再一起继续执行，并且计数器可以复用（类似人满发车的概念）。底层基于 ReentrantLock 和 Condition 实现等待/通知模式。\",\"核心 API\",\"// 创建一个初始线程数为 3 的 CyclicBarrier，以及对应的回调任务 CyclicBarrier cyclicBarrier = new CyclicBarrier(3, () -> {...}); try { // 设置 Barrier，阻止线程继续执行，直到指定数量的线程执行完成 cyclicBarrier.await(); } catch (InterruptedException | BrokenBarrierException e) { // BrokenBarrierException 表示当前 Barrier 已经破损，可能无法等待所有线程到齐 // 例如一个线程被中断，其它线程就会收到该异常 e.printStackTrace(); }\"]},\"162\":{\"h\":\"线程安全集合\",\"t\":[\"线程安全的集合可以分为三大类：\",\"遗留的同步安全集合\",\"如 Hashtable, Vetor，内部直接使用加锁方式保证线程安全，性能差，不推荐使用\",\"Collections 装饰的安全集合\",\"通过装饰模式，将非线程安全的集合封闭起来，并暴露加锁的对外方法，来构造线程安全的集合。\",\"Collections.synchronizedCollection\",\"Collections.synchronizedList\",\"Collections.synchronizedMap\",\"Collections.synchronizedSet\",\"Collections.synchronizedNavigableMap\",\"Collections.synchronizedNavigableSet\",\"Collections.synchronizedSortedMap\",\"Collections.synchronizedSortedSet\",\"JUC 下的并发安全集合\",\"Blocking： \",\"阻塞式集合，大部分基于锁实现\",\"队列已满时，put 将阻塞直到有空间可用；队列为空时，take 将阻塞直到有元素可用\",\"CopyOnWrite： \",\"写时复制容器，即添加元素时先 copy 当前容器并添加元素，再替换原来的引用，实现不需要加锁的并发读\",\"修改的开销相对较重，适用于迭代操作远多于修改的场景\",\"Concurrent： \",\"大量使用 CAS 优化，可以提供很高的吞吐量\",\"遍历/计算容量/读取时弱一致性（相比于非安全的容器，并发修改会 fail-fast 抛出ConcurrentModifificationException）\",\"并发容器\"]},\"163\":{\"h\":\"异步编排\",\"t\":[\"Java 8 新增，继承自 CompletionStage 接口，实现了 50 多种方法，用于函数式异步编程的流式调用，支持回调处理执行结果，并且提供了转换和组合 CompletableFuture 的方法。\",\"创建\",\"// 没有指定 Executor 则使用 ForkJoinPool.commonPool() 作为默认线程池 // runAsync 不支持返回值，supply 支持返回值 static CompletableFuture<Void> runAsync(Runnable runnable) public static CompletableFuture<Void> runAsync(Runnable runnable, Executor executor) public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier) public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier, Executor executor)\",\"处理结果\",\"// Async 方式是将任务提交线程池执行，否则在当前线程执行 public CompletableFuture<T> whenComplete(BiConsumer<? super T,? super Throwable> action); public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T,? super Throwable> action); public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T,? super Throwable> action, Executor executor); public CompletableFuture<T> exceptionally(Function<Throwable,? extends T> fn); public <U> CompletionStage<U> handle(BiFunction<? super T, Throwable, ? extends U> fn); public <U> CompletionStage<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn); public <U> CompletionStage<U> handleAsync(BiFunction<? super T, Throwable, ? extends U> fn,Executor executor);\",\"线程串行化\",\"public <U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn) public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn) public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn, Executor executor) public CompletionStage<Void> thenAccept(Consumer<? super T> action); public CompletionStage<Void> thenAcceptAsync(Consumer<? super T> action); public CompletionStage<Void> thenAcceptAsync(Consumer<? super T> action,Executor executor); public CompletionStage<Void> thenRun(Runnable action); public CompletionStage<Void> thenRunAsync(Runnable action); public CompletionStage<Void> thenRunAsync(Runnable action,Executor executor);\",\"只有当大量相互独立且同构的任务可以并发进行处理时，才能体现出任务并行化带来的性能提升。\"]},\"164\":{\"c\":[\"Java\"]},\"165\":{\"c\":[\"并发\"]},\"166\":{\"h\":\"JVM 垃圾回收\"},\"167\":{\"h\":\"垃圾回收算法\"},\"168\":{\"h\":\"标记-清除\",\"t\":[\"Mark-Sweep，分为两步：首先标记出需要回收的对象；标记完成后，统一回收被标记的对象。实现简单，但两个过程的执行效率都随对象数量增长而降低，并且会造成内存碎片。\",\"标记清除算法\"]},\"169\":{\"h\":\"标记-复制\",\"t\":[\"Mark-Copy，核心思想是半区复制，即将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当一块内存用完，就将还存活的对象复制到另一块上面；然后把已使用的内存块一次性清理掉；最后交换两个内存块的角色。\",\"优点是实现简单，运行速度快，复制保证了空间的连续性，没有内存碎片；但缺点也很明显，将可用内存缩小为原来的一半。适合对象快速迭代，垃圾对象较多的场景，可以减少复制操作。\",\"标记复制算法\"]},\"170\":{\"h\":\"标记-整理\",\"t\":[\"Mark-Compact，分为两步：首先标记出需要回收的对象；然后让所有存活对象都向内存空间的一端移动，最后直接清理掉边界以外的内存。\",\"优点是不会产生内存碎片，缺点是需要移动大量对象，处理效率比较低，需要 STW。是一种适合老年区的移动式算法。\",\"标记整理算法\"]},\"171\":{\"h\":\"分代收集\",\"t\":[\"分代收集的理论基于两个假说：\",\"弱分代假说：绝大多数对象都是朝生夕灭的\",\"强分代假说：熬过越多次垃圾收集过程的对象就越难以消亡\",\"因此，JVM GC的设计原则：收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄(熬过垃圾收集过程的次数)分配到不同的区域之中存储：\",\"新生代：每次垃圾收集都会有大批对象死去（适合标记-复制算法）\",\"老年代：新生代中每次回收后存活的少量对象，将会逐步晋升到老年代（适合标记-清除/整理算法）\",\"针对不同的分代，可以分别进行垃圾回收，例如新生代收集Minor GC，老年代收集Major GC，混合收集 Mixed GC，以及整堆收集 Full GC。\",\"Hotspot 的堆内存结构就是基于分代的设计：\",\"新生代划分为一块较大的Eden空间和两块较小的Survivor空间，每次分配只是用Eden和其中一块Survivor\",\"GC时，将Eden和Survivor中存活对象一次性复制到另一块Survivor，然后清理Eden和原先的Survivor\",\"最后交换两个survivor区的角色\",\"逃生门设计：当Survivor不足以容纳一次GC的存活对象时，需要依赖其它内存区域(如老年代)进行分配担保\"]},\"172\":{\"h\":\"垃圾回收实现\",\"t\":[\"基于上述的垃圾回收算法，结合分代回收的理论，针对不同分代的特点，设计出了不同的垃圾收集器：\",\"新生代收集器：Serial、ParNew、Parallel Scavenge\",\"老年代收集器：Serial old、Parallel old、CMS\",\"整堆收集器：G1\",\"新一代收集器：Shenandoah、ZGC\",\"Safe Point：垃圾回收的安全点是指程序执行时，程序能够安全地停止下来进行垃圾回收的位置。在Java虚拟机中，安全点通常是指一组特定的指令位置，在这些位置上，虚拟机能够保证对象引用关系的一致性，即对象引用关系不会发生变化。常见的安全点选择策略包括轮询（Polling）、中断（Interrupt）和内存屏障（Memory Barrier）等。\"]},\"173\":{\"h\":\"Serial\",\"t\":[\"Serial 是经典的串行垃圾收集器，主要用于新生代，采用标记-复制算法。垃圾回收时 STW 直到收集结束。\",\"Serial Old 是 Serial 的老年代版本，同样是单线程串行并且会 STW，但采用标记-整理算法。\",\"Serial收集器\"]},\"174\":{\"h\":\"ParNew\",\"t\":[\"ParNew 是 Serial 的多线程版本，它充分利用多核处理器的优势，通过并行的方式进行垃圾回收，专注于提供更低的垃圾收集停顿时间。主要用于新生代，采用标记-复制算法。另外，除Serial外只有ParNew可以和CMS配合使用。\",\"ParNew收集器\"]},\"175\":{\"h\":\"Parallel\",\"t\":[\"Parallel Scavenge 是一种以吞吐量为主要设计目标的并行垃圾收集器，对于单次垃圾收集造成的暂停时间可能会略高于ParNew收集器，但在整体吞吐量上会更加高效。主要用于新生代，采用标记-复制算法。\",\"$$ \\\\text{吞吐量} = \\\\frac{\\\\text{运行用户代码时间}}{\\\\text{运行用户代码时间} + \\\\text{运行垃圾收集时间}} $$\",\"Parallel Old 是 Parallel 的老年代版本，同样是多线程并行，注重吞吐量，但采用标记-整理算法。\",\"ParallelOld收集器\",\"ParNew 更适合那些对垃圾收集停顿时间要求较高的应用场景，例如需要与用户交互的程序，良好的响应速度能提升用户体验。 Parallel 更适合那些对整体吞吐量要求较高的场景，尽快完成程序的运算任务，例如后台运算而不需要太多交互\"]},\"176\":{\"h\":\"CMS\",\"t\":[\"Concurrent Mark Sweep，是一种以低停顿时间为目标的垃圾收集器，其最大特点是不会 STW，而是通过并发的方式来进行标记和清除，以尽量减少应用程序的停顿时间。主要用于老年代，采用标记-清除算法。\",\"四个步骤：\",\"初始标记：标记GC Roots能直接关联的对象。暂停用户线程\",\"并发标记：遍历对象图。与用户线程并发\",\"重新标记：修正并发标记阶段产生的标记变动(因用户线程的并发执行)。暂停用户线程\",\"并发清除：清理标记死亡的对象。与用户线程并发\",\"CMS收集器\",\"CMS 的优点是并发收集，低停顿。但也存在缺点：\",\"对处理器资源非常敏感\",\"无法处理浮动垃圾\",\"容易产生大量内存碎片空间\",\"浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾（产生了新对象），这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，CMS 收集需要预留出一部分内存，不能等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS，导致很长的停顿时间。\"]},\"177\":{\"h\":\"G1\",\"t\":[\"G1 是一种面向服务端应用的垃圾收集器，它的设计目标是在尽量短的停顿时间内达到尽可能高的吞吐量。G1 采用分代收集和区域化的思想，将整个堆空间划分为多个小块（Region），并根据各个区域的垃圾回收效率来动态调整回收策略，从而实现更加均衡和可控的垃圾回收。G1 同时应用于新生代和老年代，采用标记-整理算法，JDK9 以后已经默认使用 G1。\",\"Region：\",\"连续的Java堆划分为多个大小相等的独立Region，每个Region根据需要扮演Eden/Survivor/老年代\",\"Humongous区域专门存储大对象\",\"G1 跟踪各个Region里面的垃圾堆积的价值大小（价值即回收所获得的空间大小以及回收所需时间的经验值，后台维护一个优先级列表）\",\"四个步骤：\",\"初始标记：标记GC Roots能直接关联的对象，并修改TAMS指针以便正确分配对象。暂停用户线程。\",\"并发标记：遍历对象图。与用户线程并发。(用SATB原始快照处理引用变化)\",\"最终标记：处理并发阶段结束后遗留的少量SATB记录。暂停用户线程。\",\"筛选回收：更新Region的统计数据，根据优先级选择Region回收集，移动存活对象并清理旧Region的全部空间。暂停用户线程。\",\"G1收集器\"]},\"178\":{\"h\":\"Shenandoah\",\"t\":[\"Shenandoah 是一种由Red Hat开发的低延迟垃圾收集器，旨在降低Java应用程序的停顿时间。它是一种全新的垃圾收集器，旨在解决在大内存堆上的垃圾收集延迟问题。Shenandoah的设计目标是在提供低延迟的同时，保持高吞吐量。特点是支持并发，默认不使用分代收集，改用Connection Matrix全局数据结构来记录跨Region的引用关系\",\"九个步骤：\",\"初始标记：标记GC Roots能直接关联的对象。暂停用户线程\",\"并发标记：遍历对象图。与用户线程并发(时间取决于堆中存活对象的数量和对象图的复杂程度)\",\"最终标记：处理剩余的SATB扫描，并统计回收价值最高的Region构成回收集。短暂停顿\",\"并发清理：清理没有存活对象的Region\",\"并发回收：核心特点。借助读屏障、Brooks Pointers把回收集里的存活对象复制到未被使用的Region\",\"初始引用更新：把堆中所有指向旧对象的引用修正到复制后的新地址(引用更新)。短暂停顿\",\"并发引用更新：真正开始引用更新。与用户线程并发。时间取决于涉及的引用数量\",\"最终引用更新：修正存在于GC Roots中的引用。短暂停顿\",\"并发清理：回收剩余的回收集中的Region，供以后对象分配使用\",\"Shenandoah工作流程\"]},\"179\":{\"h\":\"ZGC\",\"t\":[\"Z Garbage Collector，由Oracle开发的一种低延迟的垃圾收集器，旨在降低Java应用程序的停顿时间。它是一种全新的垃圾收集器，于JDK 11中首次发布。ZGC 基于Region内存布局，分大、中、小三类容量，不设分代，使用读屏障、染色指针、内存多重映射等技术。ZGC 可并发，采用标记-整理算法。\",\"四个过程：\",\"并发标记：遍历对象图做可达性分析，特殊点在于标记是在指针上而不是在对象上。需短暂停顿\",\"并发预备重分配：根据特定查询条件确定回收集\",\"并发重分配：核心。把重分配集中的存活对象复制到新的Region上，并为重分配集中的每个Region维护一个转发表，记录从旧对象到新对象的转向关系(用于指针自愈)\",\"并发重映射：修正整个堆中指向重分配集中旧对象的所有引用\",\"ZGC收集器\"]},\"180\":{\"c\":[\"Java\"]},\"181\":{\"c\":[\"JVM\"]},\"182\":{\"h\":\"Java 引用类型\"},\"183\":{\"h\":\"引用概述\",\"t\":[\"Java中有四种引用类型，它们分别是强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）和虚引用（Phantom Reference）。每种引用类型都有其特定的使用场景和行为，提供了对对象生命周期的不同管理方式，它们对垃圾回收器的行为有不同的影响。\",\"引用类型\",\"被垃圾回收的时机\",\"主要用途\",\"生存周期\",\"强引用\",\"直到内存溢出也不会回收\",\"普遍对象的状态\",\"从创建到JVM实例终止运行\",\"软引用\",\"垃圾回收并且内存不足时\",\"有用但非必须的对象缓存\",\"从创建到垃圾回收并且内存不足时\",\"弱引用\",\"垃圾回收时\",\"非必须的对象缓存\",\"上一次垃圾回收结束到下一次垃圾回收开始\",\"虚引用\",\"-\",\"关联的对象被垃圾收集器回收时候得到一个系统通知\",\"-\",\"案例：\",\"public static void main(String[] args) { // 强引用 Object strongRef = new Object(); // 软引用 SoftReference<Object> softRef = new SoftReference<>(new Object()); // 弱引用 WeakReference<Object> weakRef = new WeakReference<>(new Object()); // 虚引用 ReferenceQueue<Object> queue = new ReferenceQueue<>(); PhantomReference<Object> phantomRef = new PhantomReference<>(new Object(), queue); // 打印各引用的状态 System.out.println(\\\"Strong reference: \\\" + strongRef); System.out.println(\\\"Soft reference: \\\" + softRef.get()); System.out.println(\\\"Weak reference: \\\" + weakRef.get()); System.out.println(\\\"Phantom reference: \\\" + phantomRef.get()); // 使强引用失效 strongRef = null; // 手动触发GC，以便查看软引用和弱引用的回收情况 System.gc(); // 等待一段时间，确保垃圾回收线程完成回收操作 try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } // 打印各引用的状态 System.out.println(\\\"Strong reference after nullification: \\\" + strongRef); System.out.println(\\\"Soft reference after GC: \\\" + softRef.get()); System.out.println(\\\"Weak reference after GC: \\\" + weakRef.get()); System.out.println(\\\"Phantom reference after GC: \\\" + phantomRef.get()); // 检查虚引用是否已经进入引用队列 Reference<?> refFromQueue = queue.poll(); System.out.println(\\\"Phantom reference from queue: \\\" + refFromQueue); }\"]},\"184\":{\"h\":\"ReferenceQueue\",\"t\":[\"在看几个 Reference 源码之前，需要先了解 ReferenceQueue，引用队列是Java中用于配合软引用、弱引用、虚引用等引用类型的一个辅助类。它主要用于在对象被垃圾回收前，提供一种机制来通知程序，从而执行一些必要的清理或其他操作。\",\"public class ReferenceQueue<T> { // 构造器 public ReferenceQueue() { } // 表示特殊含义的引用队列类型 private static class Null extends ReferenceQueue<Object> { boolean enqueue(Reference<?> r) { return false; } } // 特殊含义值，表示引用实例不用注册，或已经从某个引用队列中移除 static final ReferenceQueue<Object> NULL = new Null(); // 特殊含义值，表示引用实例已经添加到某个引用队列 static final ReferenceQueue<Object> ENQUEUED = new Null(); private static class Lock { }; private final Lock lock = new Lock(); // 队头引用实例 private volatile Reference<? extends T> head; // 队列长度 private long queueLength = 0; // 把引用实例 r 入队，即关联到本引用队列 boolean enqueue(Reference<? extends T> r) { synchronized (lock) { // 校验是否已经关联，或不需要关联，或已被移除 ReferenceQueue<?> queue = r.queue; if ((queue == NULL) || (queue == ENQUEUED)) { return false; } // 判断注册目标是否是本引用队列 assert queue == this; // 头插法 r.next = (head == null) ? r : head; head = r; // 队列长度 +1 queueLength++; // 用特殊队列标记已入队 r.queue = ENQUEUED; // 终结器计数 if (r instanceof FinalReference) { VM.addFinalRefCount(1); } // 通知等待的线程 lock.notifyAll(); return true; } } // 将队头的引用移除，队空则返回 null，后面的 poll/remove 最终都是执行本方法 private Reference<? extends T> reallyPoll() { Reference<? extends T> r = head; // 队列非空 if (r != null) { // 用特殊队列标记该引用已出队 r.queue = NULL; Reference<? extends T> rn = r.next; // 处理自循环 r.next = r，即队列中只有一个元素 head = (rn == r) ? null : rn; // 对移除的引用设置自循环，主要是确保 FinalReference inactive 状态 r.next = r; // 队列长度 -1 queueLength--; // 终结器计数 if (r instanceof FinalReference) { VM.addFinalRefCount(-1); } return r; } return null; } // 移除一个元素，为空时直接返回 public Reference<? extends T> poll(); // 移除队列中的一个元素，可以指定阻塞式/超时 public Reference<? extends T> remove(long timeout); // 遍历队列元素 void forEach(Consumer<? super Reference<? extends T>> action); }\",\"引用在创建时可以指定需要注册的 ReferenceQueue，如果不指定，那么清理工作完全交给 GC，无法收到通知进行其它工作。一个引用只能唯一注册到某个 ReferenceQueue，且出队后不可再次进入。需要注意的是，ReferenceQueue 实际只是某个引用队列的队头，即 head 成员和某个引用关联，而队列中的所有引用则是通过各自的 next 指针串成了一个链表，ReferenceQueue 提供了对链表的入队、移出、移除等操作。\"]},\"185\":{\"h\":\"Reference\",\"t\":[\"Reference 是除强引用外，其余三种引用类型的抽象基类，定义了引用实例的通用操作。\"]},\"186\":{\"h\":\"引用状态\",\"t\":[\"根据引用实例是否在队列中以及引用实例所引用的对象是否被回收，可以将Reference对象的状态分为以下几种：\",\"Active：表示引用实例已经被创建，但是它所引用的对象尚未被回收，并且未被加入引用队列\",\"GC 检测到关联对象的可达性发生特定变化后，会通知引用实例改变状态\",\"Pending：表示引用实例所引用的对象已经被回收，但是引用实例尚未加入引用队列中\",\"pending 元素通过reference#discovered串成队列，等待 ReferenceHandler 线程处理\",\"Inactive：引用实例处于非Active和非Pending状态\",\"Registered：引用实例创建的时候关联到一个引用队列实例，但尚未入队\",\"Enqueued：表示引用实例已经被加入引用队列中\",\"Dequeued：引用实例曾经添加到和它关联的引用队列中，并且已经被移除\",\"Unregistered：引用实例不存在关联的引用队列\",\"创建引用时如果使用了 ReferenceQueue，则状态转换如下： \",\"创建引用时没有使用 ReferenceQueue 的状态转换关系如下： \"]},\"187\":{\"h\":\"成员和构造\",\"t\":[\"从 Reference 类结构看，除了标记位processPendingActive、锁对象processPendingLock外，有四个成员变量：\",\"referent 泛型，表示该引用实例关联的实际对象（以下简称关联对象）\",\"queue 引用实例注册的引用队列，如果实际对象将被 GC，那么引用将被放入该引用队列，可以从中得到或监控相应的引用实例\",\"next 引用类型的指针，可以构成引用实例链\",\"discovered 基于状态表示不同链表中的下一个待处理的对象，主要是pending-reference列表的下一个元素，通过JVM直接调用赋值\",\"public abstract class Reference<T> { private T referent; volatile ReferenceQueue<? super T> queue; volatile Reference next; private transient Reference<?> discovered; private static final Object processPendingLock = new Object(); private static boolean processPendingActive = false; Reference(T referent) { this(referent, null); } // 如果没有注册，则赋值特殊的 NULL 队列 Reference(T referent, ReferenceQueue<? super T> queue) { this.referent = referent; this.queue = (queue == null) ? ReferenceQueue.NULL : queue; } }\"]},\"188\":{\"h\":\"ReferenceHandler\",\"t\":[\"ReferenceHandler 是 Reference 静态代码块中初始化的一个线程，该线程拥有最高优先级，并且是一个守护线程，是 Java 程序运行时默认启动的几个线程之一。Reference Handler线程负责处理软引用、弱引用、虚引用等引用类型的引用实例。当这些引用实例所引用的对象被垃圾回收器回收时，Reference Handler线程会将其放入对应的引用队列中。\",\"static { // 获取当前线程的顶层线程组 ThreadGroup tg = Thread.currentThread().getThreadGroup(); for (ThreadGroup tgn = tg; tgn != null; tg = tgn, tgn = tg.getParent()); // 创建引用处理线程 Thread handler = new ReferenceHandler(tg, \\\"Reference Handler\\\"); handler.setPriority(Thread.MAX_PRIORITY); handler.setDaemon(true); handler.start(); // 安全策略处理 SharedSecrets.setJavaLangRefAccess(new JavaLangRefAccess() { @Override public boolean waitForReferenceProcessing() throws InterruptedException { return Reference.waitForReferenceProcessing(); } @Override public void runFinalization() { Finalizer.runFinalization(); } }); } // 确保 pending 的引用实例能够入队的高优先级线程 private static class ReferenceHandler extends Thread { // 确保类已加载 private static void ensureClassInitialized(Class<?> clazz) { try { Class.forName(clazz.getName(), true, clazz.getClassLoader()); } catch (ClassNotFoundException e) { throw (Error) new NoClassDefFoundError(e.getMessage()).initCause(e); } } static { ensureClassInitialized(Cleaner.class); } ReferenceHandler(ThreadGroup g, String name) { super(g, null, name, 0, false); } public void run() { // 不断循环处理 pending 引用实例 while (true) { processPendingReferences(); } } }\",\"可以看到，ReferenceHandler 本身是一个守护线程，在一个无限循环里处理 pending 等待入队的引用实例，核心就是 processPendingReferences() 方法。\",\"private static void processPendingReferences() { // native，阻塞等待直到 pending 状态的引用实例链不为 null（discovered域） waitForReferencePendingList(); Reference<?> pendingList; // 加锁获取 pending 链，执行清理，并标记清理中状态 synchronized (processPendingLock) { pendingList = getAndClearReferencePendingList(); processPendingActive = true; } while (pendingList != null) { // 虽然是个链，但实际上是拿到的队头，元素间通过 discovered 串联起来 Reference<?> ref = pendingList; // 后继 pending 引用 pendingList = ref.discovered; ref.discovered = null; // Cleaner 类型要执行 clean 方法 if (ref instanceof Cleaner) { ((Cleaner)ref).clean(); synchronized (processPendingLock) { processPendingLock.notifyAll(); } } else { // 非 Cleaner 的引用，如果注册的 referenceQueue 不为 NULL 则入队 ref.enqueueFromPending(); } } // 当此循环结束前唤醒阻塞的其它线程 synchronized (processPendingLock) { processPendingActive = false; processPendingLock.notifyAll(); } }\"]},\"189\":{\"h\":\"其它方法\",\"t\":[\"// 获取关联对象 public T get() { return this.referent; } // refersTo -> refersToImpl -> refersTo0 由子类实现 public final boolean refersTo(T obj) { return refersToImpl(obj); } boolean refersToImpl(T obj) { return refersTo0(obj); } private native boolean refersTo0(Object o); // clear -> clear0 由子类实现 public void clear() { clear0(); } private native void clear0(); // 判断是否入队，入队后 queue 域应该是特殊的 ENQUEUED 队列 public boolean isEnqueued() { return (this.queue == ReferenceQueue.ENQUEUED); } // 入队操作 public boolean enqueue() { clear0(); return this.queue.enqueue(this); } // 确保给定的引用实例是强可达的 public static void reachabilityFence(Object ref) { }\"]},\"190\":{\"h\":\"引用实现\"},\"191\":{\"h\":\"强引用\",\"t\":[\"强引用是最常见的引用类型，如果一个对象具有强引用，垃圾回收器就不会回收该对象。当内存空间不足时，JVM 宁愿抛出 OOM 也不会回收强引用实例。通常用于确保对象不会被意外地回收，需要长时间持有对象的场景。\",\"// 一般情况下 new 创建的对象都是强引用 Object obj = new Object();\"]},\"192\":{\"h\":\"软引用\",\"t\":[\"软引用用于描述一些还有用但不是必需的对象，当内存不足时，垃圾回收器可能会回收这些对象，回收后内存仍不足将抛出 OOM。通常用于对内存敏感的缓存场景，允许系统根据内存情况自动释放缓存对象。\",\"实现上，软引用增加了一个时间戳标记，用于帮助 GC 选择回收的对象。\",\"public class SoftReference<T> extends Reference<T> { // 所有实例共享的时间戳，由 GC 更新 private static long clock; // 本引用实例的时间戳，调用 get() 时自动更新 private long timestamp; public SoftReference(T referent) { super(referent); this.timestamp = clock; } public SoftReference(T referent, ReferenceQueue<? super T> q) { super(referent, q); this.timestamp = clock; } public T get() { T o = super.get(); // 更新时间戳 if (o != null && this.timestamp != clock) this.timestamp = clock; return o; } }\"]},\"193\":{\"h\":\"弱引用\",\"t\":[\"弱引用用于描述非必需对象，它的强度比软引用更弱。如果一个对象只被弱引用指向，那么在下一次垃圾回收时，该对象就会被回收。弱引用通常用于避免内存泄漏，例如，缓存某个对象，但不希望该对象因为被缓存而阻止它被垃圾回收。\",\"Java 层面的实现上，弱引用并没有特殊设计。\",\"public class WeakReference<T> extends Reference<T> { public WeakReference(T referent) { super(referent); } public WeakReference(T referent, ReferenceQueue<? super T> q) { super(referent, q); } }\"]},\"194\":{\"h\":\"虚引用\",\"t\":[\"虚引用是最弱的一种引用类型，无法通过虚引用来获取对象实例。虚引用在对象被 GC 之前会被放入一个引用队列中，可以通过检查这个引用队列，来了解对象的回收状态。通常用于执行某些清理工作或其他操作，例如，NIO中的DirectByteBuffer对象使用虚引用来跟踪对象的回收情况，以便在内存被回收时释放相关资源。\",\"实现上，虚引用也没什么特殊的，但注意无法通过虚引用来获取对象实例。\",\"public class PhantomReference<T> extends Reference<T> { // 永远返回 null public T get() { return null; } @Override boolean refersToImpl(T obj) { return refersTo0(obj); } @IntrinsicCandidate private native boolean refersTo0(Object o); public PhantomReference(T referent, ReferenceQueue<? super T> q) { super(referent, q); } }\"]},\"195\":{\"h\":\"Cleaner\",\"t\":[\"Cleaner 是 PhantomReference 的子类，在 ReferenceHandler 线程中提供了一种更加灵活地执行对象清理操作的机制，相比于 Finalizer 线程中已被标记废弃的 finalize() 机制更加安全可靠，不依赖于对象生命周期，但仍是不可预知的。\",\"所有的 Cleaner 对象通过 next, prev 构成一个双向链表，在 java.lang.ref.Reference#processPendingReferences 方法中将执行 Cleaner#clean 执行清理工作。\",\"public class Cleaner extends PhantomReference<Object> { // 无用，仅是为了执行 PhantomReference 的构造器 private static final ReferenceQueue<Object> dummyQueue = new ReferenceQueue<>(); // 头节点 private static Cleaner first = null; // 双向链表结构 private Cleaner next = null, prev = null; // 头插法 private static synchronized Cleaner add(Cleaner cl) { if (first != null) { cl.next = first; first.prev = cl; } first = cl; return cl; } private static synchronized boolean remove(Cleaner cl) { if (cl.next == cl) return false; if (first == cl) { if (cl.next != null) first = cl.next; else first = cl.prev; } if (cl.next != null) cl.next.prev = cl.prev; if (cl.prev != null) cl.prev.next = cl.next; // 自循环说明已被移除 cl.next = cl; cl.prev = cl; return true; } // 清理工作 private final Runnable thunk; // 私有，外部只能通过 create 静态方法创建 Cleaner 实例 private Cleaner(Object referent, Runnable thunk) { super(referent, dummyQueue); this.thunk = thunk; } // 创建时需要指定清理的工作，并自动加入 Cleaner 链表 public static Cleaner create(Object ob, Runnable thunk) { if (thunk == null) return null; return add(new Cleaner(ob, thunk)); } }\"]},\"196\":{\"h\":\"Finalizer\",\"t\":[\"在Java中，Finalizer是一个特殊的方法，用于对象被垃圾回收器回收之前的清理工作。该过程分为两步，首先第一步是判断是否有必要执行 finalize()，JVM 把以下两种情况认为没有必要：\",\"对象没有覆盖继承自Object类的finalize()方法\",\"对象的finalize()方法已经被JVM调用过\",\"如果被判定为有必要执行 finalize()，那么该对象会被封装成 Finalizer 放入一个 ReferenceQueue，稍后由一个叫 Finalizer 的线程取出并执行它的 finalize() 方法。如果在 finalize() 方法中，对象将自身重新与引用链建立了关联，那么将逃逸成功，避免稍后被回收。\",\"Finalization 机制性能一般而且存在不确定性，因此已经被标记废弃，更推荐使用 Cleaner。\",\"在Java的代码实现上，Finalizer 继承自 FinalReference，它的 get()/clear() 都是调用父类 Reference 里面两个专门留给 FinalReference 的特殊方法，用于获取和移除 inactive 引用的关联对象。\",\"class FinalReference<T> extends Reference<T> { public FinalReference(T referent, ReferenceQueue<? super T> q) { super(referent, q); } // 仅引用是 inactive 状态时可以获取 @Override public T get() { return getFromInactiveFinalReference(); } // 仅引用是 inactive 状态时可以获取 @Override public void clear() { clearInactiveFinalReference(); } // 已经是 final 的引用不应再入队了 @Override public boolean enqueue() { throw new InternalError(\\\"should never reach here\\\"); } }\",\"Finalizer 是 Finalization 机制的核心，它会在加载时创建一个 Finalizer 终结器线程，不断地从 unfinalized 链表中获取引用实例，执行它们实际关联对象的 finalize() 方法。\",\"final class Finalizer extends FinalReference<Object> { // 关联的 ReferenceQueue private static ReferenceQueue<Object> queue = new ReferenceQueue<>(); static ReferenceQueue<Object> getQueue() { return queue; } // unfinalized 双向链表的表头，以及前后引用 private static Finalizer unfinalized = null; private Finalizer next, prev; private static final Object lock = new Object(); // 私有构造器，只能通过 register 方法创建 Finalizer private Finalizer(Object finalizee) { super(finalizee, queue); // 创建完成后，头插法加入 unfinalized 链表等待处理 synchronized (lock) { if (unfinalized != null) { this.next = unfinalized; unfinalized.prev = this; } unfinalized = this; } } // 由 JVM 直接调用 static void register(Object finalizee) { new Finalizer(finalizee); } private void runFinalizer(JavaLangAccess jla) { synchronized (lock) { // 循环引用表示已经终结了 if (this.next == this) return; // 修改链表指针 if (unfinalized == this) // 当前是链表表头 unfinalized = this.next; else // 不是表头 this.prev.next = this.next; if (this.next != null) this.next.prev = this.prev; // 设置循环引用，标记已被终结 this.prev = null; this.next = this; } // 获取关联对象，执行其 finalize 方法 try { Object finalizee = this.get(); assert finalizee != null; if (!(finalizee instanceof java.lang.Enum)) { // 调用对象的 finalize 方法 jla.invokeFinalize(finalizee); // 手动置 null 帮助清理 finalizee = null; } } catch (Throwable x) { } // 执行完毕做一次清理，即 Reference#clearInactiveFinalReference() super.clear(); } static { ThreadGroup tg = Thread.currentThread().getThreadGroup(); // 获取顶级线程组，创建并开启 Fianlizer 线程 for (ThreadGroup tgn = tg; tgn != null; tg = tgn, tgn = tg.getParent()); Thread finalizer = new FinalizerThread(tg); finalizer.setPriority(Thread.MAX_PRIORITY - 2); finalizer.setDaemon(true); finalizer.start(); } // Finalizer 守护线程 private static class FinalizerThread extends Thread { private volatile boolean running; FinalizerThread(ThreadGroup g) { super(g, null, \\\"Finalizer\\\", 0, false); } public void run() { if (running) return; while (VM.initLevel() == 0) { try { VM.awaitInitLevel(1); } catch (InterruptedException x) { // ignore and continue } } final JavaLangAccess jla = SharedSecrets.getJavaLangAccess(); running = true; // 不断地从 ReferenceQueue 里面获取 Finalizer 对象执行它们的 finalize 方法 for (;;) { try { // 阻塞式移除获取（ReferenceHandler 负责放入） Finalizer f = (Finalizer)queue.remove(); f.runFinalizer(jla); } catch (InterruptedException x) { // ignore and continue } } } } }\"]},\"197\":{\"h\":\"参考\",\"t\":[\"深入理解JDK中的Reference原理和源码实现 写的很棒👍\",\"Java 类 Reference 的源码分析\",\"JAVA几种引用及源码简析\",\"一文读懂java中的Reference和引用类型\",\"深入理解JDK中的Reference原理和源码实现\"]},\"198\":{\"c\":[\"Java\"]},\"199\":{\"c\":[\"JVM\"]},\"200\":{\"h\":\"JVM 运行时数据区\"},\"201\":{\"h\":\"JVM内存演进\",\"t\":[\"下图是JDK8的内存分布图，我们后续以JDK8的内存分布进行学习，更新的JDK也并没有太大的变化。\"]},\"202\":{\"h\":\"程序计数器\",\"t\":[\"Program Counter Register，是当前线程所执行的字节码的行号指示器，字节码解释器通过改变该寄存器的值，来定位下一条将要执行的字节码指令。\",\"特点：\",\"线程私有，各线程之间的计数器互不影响，独立存储\",\"不会产生OutOfMemoryError\"]},\"203\":{\"h\":\"虚拟机栈\",\"t\":[\"Java Virtual Machine Stacks，虚拟机栈描述的是线程中方法的内存模型，每执行一个方法，虚拟机栈中会同步创建一个栈帧，其中包括局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。\",\"一个方法的执行到结束，对应着一个栈帧在虚拟机中从入栈到出栈的过程，而栈顶即活动栈帧，对应着当前正在执行的方法。\",\"特点：\",\"线程私有，随线程生灭\",\"栈帧过多可能导致StackOverflowError，栈空间不足可能导致OutOfMemoryError\",\"-Xss size 指定线程的最大栈空间\"]},\"204\":{\"h\":\"局部变量表\",\"t\":[\"存储方法里的基本数据类型以及对象的引用。\",\"容量以变量槽Slot为最小单位 \",\"除了long double需要2个Slot外，其余数据类型都需要1个Slot\",\"Slot根据变量作用范围可复用\",\"JVM通过索引定位的方法使用局部变量表，范围从0开始至局部变量表最大的变量槽数量\",\"JVM实现通过引用应完成两件事： \",\"根据引用直接或间接找到对象在Java堆种数据存放的起始地址或索引\",\"根据引用直接或间接找到对象所属数据类型在方法区中存储的类型信息\",\"类字段有两次赋初始值的过程，一次是准备阶段赋系统初始值，另一次是初始化阶段赋程序定义初始值。但局部变量没有初始化就不能使用\"]},\"205\":{\"h\":\"动态链接\",\"t\":[\"指向运行时常量池的方法引用，每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，以便支持调用过程中的动态连接。\"]},\"206\":{\"h\":\"方法返回地址\",\"t\":[\"方法正常退出或异常退出的地址，有两种退出方法执行的方式：\",\"正常调用完成，正常向主调函数提供返回值\",\"异常调用完成，不会提供任何返回值\"]},\"207\":{\"h\":\"操作数栈\",\"t\":[\"32位数据栈容量为1，64位栈容量为2\",\"优化处理：两个不同的栈帧会出现一部分重叠，节约空间，且可以共享一部分数据\"]},\"208\":{\"h\":\"附加信息\",\"t\":[\"JVM规范没有描述的信息，如调试、性能收集相关信息\",\"一般把动态连接、方法返回地址以及其它附加信息全部归为栈帧信息\"]},\"209\":{\"h\":\"本地方法栈\",\"t\":[\"类似虚拟机栈，不过是为虚拟机使用到的 Native 方法服务 (如C, Cpp)，以支持 JNI 调用。同样的，栈帧过多可能导致StackOverflowError，栈空间不足导致可能导致OutOfMemoryError。在 Hotspot JVM 中，直接将本地方法栈和虚拟机栈合二为一。\"]},\"210\":{\"h\":\"堆\",\"t\":[\"JVM 中最大的一块内存区，是垃圾回收器管理的主要区域，主要存放：\",\"对象实例：通过 new 关键字创建的对象\",\"字符串常量池：存储 String 对象的直接引用\",\"static 静态变量\",\"线程分配缓冲区 TLAB（Thread Local Allocation Buffer）：为了提升内存分配效率，堆中线程私有的一块区域\",\"特点：\",\"线程共享，需要考虑线程安全问题\",\"分配对象过大或过多可能产生OutOfMemoryError\",\"由垃圾收集器 GC 管理\",\"-Xms size指定堆初始内存，-Xmx size指定堆最大内存\",\"栈是运行时的单位，解决程序的运行问题，即程序如何执行，如何处理数据。 堆是存储的单位，解决数据怎么放，放在哪的问题。\"]},\"211\":{\"h\":\"方法区\",\"t\":[\"按照 JVM 的规范，Method Area 方法区需要存储已被虚拟机加载的类信息、常量、静态变量、代码缓存等数据。而在实现上，JDK8 以前用永久代实现，但是为了能够加载更多的类同时改善 GC，现在改用位于本地内存的元空间作为方法区的实现，并且将静态变量和字符串常量池放入了堆中。\",\"方法区的永久代实现\",\"方法区的元空间实现\",\"在类编译期间，会把类元信息放入方法区（元空间），包括类的方法、参数、接口，以及常量池表 Constant Pool Table。其中常量池表存储了编译期间生成的字面量（基本数据类型、字符串类型常量、声明为 final 的常量值等）、符号引用（类、字段、方法、接口等的符号引用），JVM 会为每个已加载的类维护一个常量池。\",\"方法区中还有一个区域叫运行时常量池，在类加载-加载阶段，JVM 会把类的常量池数据放入运行时常量池；在类加载-解析阶段，会将池中的符号引用替换为直接引用。\",\"除了在编译期生成的常量，运行时常量池还可以动态添加数据，例如 String 类的 intern() 方法可以主动将串池中的字符串对象引用放入运行时常量池。（字符串拼接见：Java基础#字符串）\",\"字符串变量拼接的原理是 StringBuilder\",\"字符串常量拼接的原理是编译期优化\",\"类常量池和运行时常量池都在方法区中，而字符串常量池在堆中，且存储的是字符串对象的引用。\",\"特点：\",\"线程共享\",\"类加载过多或常量过多可能产生OutOfMemoryError\",\"JDK8 后用-XX:MetaspaceSize和-XX:MaxMetaspaceSize=sz设置元空间大小\"]},\"212\":{\"h\":\"直接内存\",\"t\":[\"Direct Memory，不属于 JVM 运行时数据区，也不受 GC 管理，其分配回收成本较高，但读写性能很高，受物理内存的约束，超出物理内存将产生OutOfMemoryError。\",\"直接内存由 Native 方法分配，例如 NIO 使用直接内存作为数据缓冲区，底层使用了 Unsafe 对象完成直接内存的分配与回收（内部使用 Cleaner 配合虚引用，自动调用 freeMemory 方法回收），大大提高了 IO 性能。\"]},\"213\":{\"h\":\"虚拟机对象\"},\"214\":{\"h\":\"对象创建\",\"t\":[\"步骤：\",\"遇到new指令时，首先检查该指令的参数是否能在常量池中定位到一个类的符号引用，并检查该符号引用代表的类是否已被加载、加载、解析和初始化，如果没有必须先执行相应类的加载过程\",\"加载检查通过后，为新生对象分配内存\",\"内存分配完成后，JVM将该内存空间初始化为0\",\"JVM对对象进行必要设置，例如元类型信息、HashCode、GC分代年龄等(存储在对象头中)\",\"JVM对象已产生，接着开始执行对象的构造方法 <init>()\",\"这样一个真正可用的对象被完全构造出来\",\"分配内存方法：\",\"碰撞指针: 使用过的内存放一边，空闲的放另一边，中间用指针分隔。分配内存**就是移动指针。内存分配规整\",\"空闲列表：维护可用内存块的记录表，分配内存时修改记录。内存分配不规整\",\"解决并发：\",\"CAS 同步：Compare And Swap 保证更新的原子性\",\"TLAB 本地线程分配缓冲：线程私有的分配缓冲区\"]},\"215\":{\"h\":\"对象内存布局\",\"t\":[\"对象头 \",\"Mark Word: 存储对象自身的运行时数据，如HashCode、GC分代年龄、锁状态、偏向信息等\",\"kClass Pointer: 类型指针，对象指向它的类型元数据的指针\",\"实例数据：对象真正存储的有效信息 \",\"默认分配顺序：longs/doubles、ints、shorts/chars、bytes/booleans、oops(Ordinary Object Pointers)\",\"相同宽度的字段会被分配在一起，除了oops，其他的长度由长到短\",\"满足上述条件下，父类定义变量在子类变量之前\",\"--XX:FieldsAllocationStyle 控制变量分配策略\",\"--XX:CompactFields 控制是否允许较窄变量插入父类变量的间隙\",\"对齐填充：8Byte整数倍\"]},\"216\":{\"h\":\"对象访问定位\",\"t\":[\"Java通过栈上的reference来操作堆上的具体对象，实现方式主要以下两种\",\"句柄访问\",\"Java堆中划分一块内存作为句柄池，reference存储对象的句柄地址，句柄中包含对象实例数据和类型数据的具体地址\",\"好处：reference存储的是稳定句柄，移动对象时不需要改变reference \",\"直接指针\",\"reference直接存储对象地址，但需要考虑如何存放类型数据的相关信息\",\"好处：速度快，减少一次指针定位的时间开销 \"]},\"217\":{\"c\":[\"Java\"]},\"218\":{\"c\":[\"JVM\"]},\"219\":{\"h\":\"Java 虚拟机笔记\"},\"220\":{\"h\":\"内存结构\",\"t\":[\"见：JVM 运行时数据区\"]},\"221\":{\"h\":\"垃圾回收\"},\"222\":{\"h\":\"对象存活判断\"},\"223\":{\"h\":\"引用计数法\",\"t\":[\"引用计数法为每个对象维护一个引用计数器，记录该对象当前被引用的次数。每当创建一个新的引用指向该对象时，其计数器加 1；每当指向该对象的引用失效时，计数器减 1。当对象的引用计数器为 0 时，该对象被视为垃圾，可以被回收。\",\"特点：\",\"引用计数法实现简单，易于理解和维护，而且效率较高，适合生命周期较短的对象。缺点是无法解决循环引用的问题，可能会引发内存泄露。\"]},\"224\":{\"h\":\"可达性分析算法\",\"t\":[\"可达性分析算法是 JVM 用于判断对象是否可被回收的一种算法。该算法的基本思想是通过从一组称为\\\"GC Roots\\\"的根对象出发，递归地遍历所有的引用关系，标记所有被这些根对象直接或间接引用的对象为可达对象，而未被标记的对象则被认为是不可达的，即可以被回收。\",\"GC Roots 是一组活跃的引用，不是对象，放在 GC Roots Set 集合。在Java中，GC Roots包括：\",\"虚拟机栈中引用的对象：即本地变量表中引用的对象\",\"方法区中类静态属性引用的对象：即类的静态变量引用的对象\",\"方法区中常量引用的对象：即常量池中引用的对象\",\"本地方法栈中JNI（Java Native Interface）引用的对象\",\"JVM内部的引用\",\"所有被同步锁synchronized持有的对象\",\"反映JVM内部情况的JMXBean、JVMTI等等\",\"特点：\",\"精确性：可达性分析算法能够准确地判断对象是否可被回收，避免了引用计数算法可能存在的循环引用问题。\",\"高效性：虽然需要遍历整个对象图，但是因为只有被根集合直接或间接引用的对象才会被标记为可达，所以可达性分析算法通常能够较快地确定出不可达对象。\"]},\"225\":{\"h\":\"引用类型\",\"t\":[\"见：Java 引用类型\"]},\"226\":{\"h\":\"垃圾回收算法\",\"t\":[\"见：JVM 垃圾回收\"]},\"227\":{\"h\":\"垃圾回收实现\",\"t\":[\"见：JVM 垃圾回收\"]},\"228\":{\"h\":\"JVM 工具\",\"t\":[\"Java虚拟机（JVM）提供了多种故障排查工具，用于诊断和解决Java应用程序运行时出现的各种问题。这些工具JDK9之前在jdk\\\\lib\\\\tools目录下，经过模块化改造后现在在jdk\\\\jmods目录下，本身用Java语言实现。\",\"基础工具：用于支持基本的程序创建和运行\",\"如jar, java, javac, javadoc, javap, jdb...\",\"性能监控和故障处理：监控Java虚拟机运行信息，排查问题\",\"如jps, jstat, jinfo, jmap, jhat...\",\"安全：用于程序签名，设置安全测试等\",\"如keytool, jarsigner, policytool\",\"国际化：用于创建本地语言文件\",\"如native2ascii\",\"远程方法调用: 用于跨Web或网络的服务交互\",\"如rmic, rmiregistry, rmid, serialver\",\"部署工具：用于程序打包、发布和部署\",\"如javapackager, pack200, unpack200\",\"REPL (Read-Eval-Print Loop)和脚本工具：jshell, jjs, jrunscript\",\"Java IDL 与 RMI-IIOP: 与JDK11的CORBA一起废弃\",\"WebService工具：与JDK11的CORBA一起废弃\",\"Java Web Start: javaws, jdk11移除\"]},\"229\":{\"h\":\"jps\",\"t\":[\"JVM Process Status Tool，虚拟机进程状况工具是Java虚拟机自带的一种命令行工具，用于列出当前系统中正在运行的Java进程的信息。它主要用于查看Java进程的进程ID（PID）以及与之关联的Java应用程序的主类名。\",\"命令格式：\",\"jps [ options ] [ hostid ]\",\"选项：-q：仅输出Java进程的PID，不输出主类名 -m：输出主类名和传递给主类的参数 -l：输出完全限定的主类名（包括包名） -v：输出传递给Java虚拟机的参数\",\"样例：\"]},\"230\":{\"h\":\"jstat\",\"t\":[\"JVM Statistics Monitoring Tool，虚拟机统计信息监视工具，用于监视和显示Java进程的各种运行时统计信息，如垃圾回收情况、类加载情况、JIT编译情况等。\",\"命令格式：\",\"jstat [ option vmid [ interval[s|ms] [ count ] ]\",\"选项：\",\"option：指定要获取的统计信息类型，如垃圾回收情况、类加载情况等。\",\"vmid：指定要监视的Java虚拟机的进程ID（PID）或标识符。可以是本地Java进程的PID，也可以是远程Java进程的主机名:端口号。\",\"interval：指定获取统计信息的时间间隔，默认单位是秒。可选参数为s（秒）或ms（毫秒）。\",\"count：指定获取统计信息的次数。\",\"样例：\"]},\"231\":{\"h\":\"jinfo\",\"t\":[\"Configuration Info for Java，Java配置信息工具，用于查看和修改Java进程的运行时配置信息。它可以查看Java进程的启动参数、系统属性、环境变量以及动态链接库信息等。\",\"命令格式：\",\"jinfo [ option ] pid\",\"选项：\",\"-flag <name>：显示指定名称的JVM标志的值。\",\"-flags：显示所有JVM标志的值。\",\"-sysprops：显示Java系统属性的值。\",\"-sysprop <name>：显示指定名称的Java系统属性的值。\",\"-env：显示Java进程的环境变量。\",\"-jvmflags：显示Java虚拟机的启动参数。\",\"样例：\"]},\"232\":{\"h\":\"jmap\",\"t\":[\"Memory Map for Java，Java内存映像工具，用于生成Java进程的堆转储（Heap Dump）。堆转储是Java堆中对象的详细信息的快照，包括对象的类名、实例数量、大小等。\",\"命令格式：\",\"jmap [ option ] pid\",\"选项：\",\"-heap：显示Java堆的概要信息，包括堆的配置信息、使用情况、垃圾收集器等。\",\"-histo[:live]：生成Java堆中对象的直方图（Histogram）。加上:live参数可以只统计存活对象。\",\"-dump:format=b,file=<filename>：生成Java堆转储文件，并指定文件名和格式。常用格式有b（二进制格式）和hprof（Hprof格式）。\",\"-F：当Java进程不响应时，强制执行堆转储操作。\",\"样例：\"]},\"233\":{\"h\":\"jhat\",\"t\":[\"JVM Heap Analysis Tool，虚拟机堆转储快照分析工具，用于分析Java堆转储（Heap Dump）文件。它可以加载堆转储文件，并提供一个简单的基于Web的用户界面，用于浏览和分析Java堆中的对象信息。\",\"命令格式：\",\"jhat [ option ] heap-dump-file\",\"选项：\",\"-port <port>：指定jhat工具监听的端口号，默认为7000。\",\"-J<option>：传递给Java虚拟机的参数。\",\"示例：\",\"# 加载指定的Java堆转储文件，并启动jhat服务器 jhat heap_dump.hprof # 指定端口号并启动jhat服务器 jhat -port 8080 heap_dump.hprof\"]},\"234\":{\"h\":\"jstack\",\"t\":[\"Stack Trace for Java，Java堆栈跟踪工具，用于生成Java进程的线程转储（Thread Dump）。线程转储是Java进程中所有线程当前的状态的快照，包括线程的调用栈、线程状态等信息。\",\"命令格式：\",\"jstack [ option ] pid\",\"选项：\",\"无选项：生成包含所有线程调用栈信息的线程转储。\",\"-F：当Java进程不响应时，强制执行线程转储操作。\",\"-l：除了线程调用栈信息外，还会显示关于锁的附加信息。\",\"样例：\"]},\"235\":{\"h\":\"JHSDB\",\"t\":[\"JHSDB（Java HotSpot Debugger）是Java HotSpot虚拟机自带的一种调试工具，用于在运行时检查和调试Java应用程序。它提供了一组命令行工具，用于检查和修改Java虚拟机的内部状态，包括堆、线程、对象等。\",\"JHSDB提供了以下几个主要的命令行工具：\",\"jhsdb jmap：用于生成Java进程的堆转储（Heap Dump），类似于jmap工具，但是支持更多的选项和功能。\",\"jhsdb jstack：用于生成Java进程的线程转储（Thread Dump），类似于jstack工具，但是支持更多的选项和功能。\",\"jhsdb jinfo：用于查看和修改Java进程的运行时配置信息，类似于jinfo工具，但是支持更多的选项和功能。\",\"jhsdb jstat：用于监视Java进程的各种运行时统计信息，类似于jstat工具，但是支持更多的选项和功能。\",\"jhsdb jstack：用于生成Java进程的线程转储（Thread Dump），类似于jstack工具，但是支持更多的选项和功能。\",\"jhsdb hsdb：启动Java HotSpot Debugger GUI（HSDB），提供一个图形化界面用于检查和调试Java虚拟机。\",\"JHSDB工具集提供了丰富的功能，可以帮助开发人员诊断和调试Java应用程序的各种问题，包括内存泄漏、线程死锁、性能瓶颈等。它通常用于开发和调试阶段，对于生产环境不太适用。\"]},\"236\":{\"h\":\"JConsole\",\"t\":[\"JConsole是Java自带的一种监控和管理工具，用于监视和管理Java应用程序的性能和资源使用情况。它提供了一个图形化的用户界面，可以实时查看Java应用程序的各种运行时信息，并且可以对Java应用程序进行一些基本的管理操作，如线程转储、堆转储、执行垃圾回收等。\",\"以下是JConsole的一些主要功能和特点：\",\"图形化监控： JConsole提供了一个直观的图形化界面，可以实时查看Java应用程序的各种运行时信息，包括内存使用情况、线程状态、类加载情况、垃圾收集情况等。\",\"性能分析： JConsole可以帮助开发人员分析Java应用程序的性能瓶颈和优化机会，通过查看各种统计信息，如CPU使用率、内存使用情况等，找出性能问题并进行优化。\",\"远程监控： JConsole支持通过JMX（Java Management Extensions）远程监控Java应用程序，即可以连接到运行在远程服务器上的Java进程，并监视其运行时信息。\",\"基本管理操作： JConsole提供了一些基本的管理功能，如线程转储、堆转储、执行垃圾回收等。这些操作可以帮助开发人员进行调试和故障排查。\",\"可扩展性： JConsole是一个基于JMX的插件化应用程序，可以通过安装不同的插件来扩展其功能，满足不同场景下的监控和管理需求。\"]},\"237\":{\"h\":\"VisualVM\",\"t\":[\"VisualVM是一款功能强大的Java监控和调试工具，它提供了丰富的功能，用于监视、分析和调优Java应用程序的性能和内存使用情况。VisualVM是一个基于Java的图形化应用程序，集成了多种监控和调试工具，包括图形化性能分析、堆转储分析、线程分析、垃圾回收分析等。以下是VisualVM的一些主要功能和特点：\",\"图形化监控： VisualVM提供了一个直观的图形化界面，可以实时监视Java应用程序的各种性能指标，包括CPU使用率、内存使用情况、线程状态、类加载情况等。\",\"性能分析： VisualVM集成了多种性能分析工具，如CPU性能分析器、内存分析器等，可以帮助开发人员找出Java应用程序的性能瓶颈，并进行优化。\",\"堆转储分析： VisualVM可以生成Java应用程序的堆转储文件，并提供一套强大的工具用于分析堆转储文件，包括对象分配状况、内存泄漏分析等。\",\"线程分析： VisualVM可以监视Java应用程序中的线程状态，并提供线程分析工具，用于查找线程死锁、线程阻塞等问题。\",\"垃圾回收分析： VisualVM可以监视Java应用程序的垃圾回收情况，并提供垃圾回收分析工具，用于分析垃圾回收的性能和效率。\",\"插件支持： VisualVM是一个基于插件的可扩展应用程序，可以通过安装不同的插件来扩展其功能，满足不同场景下的监控和调试需求。\"]},\"238\":{\"h\":\"Java Mission Control\",\"t\":[\"Java Mission Control（JMC）是Oracle提供的一款强大的Java应用程序性能监控和管理工具。它提供了丰富的功能，用于监视、分析和调优Java应用程序的性能和行为。JMC是基于Eclipse Rich Client Platform（RCP）开发的，具有直观的用户界面和灵活的扩展机制，适用于各种Java应用程序的监控和调试。\",\"以下是Java Mission Control的一些主要功能和特点：\",\"实时监控： Java Mission Control提供了实时的性能监控功能，可以监视Java应用程序的各种性能指标，包括CPU使用率、内存使用情况、线程状态、垃圾回收情况等。\",\"事件分析： Java Mission Control可以捕获并分析Java应用程序中的各种事件，如方法调用、异常抛出、内存分配等，帮助开发人员了解Java应用程序的行为和性能瓶颈。\",\"飞行记录： Java Mission Control支持飞行记录（Flight Recorder）功能，可以记录Java应用程序的运行过程和性能数据，并提供强大的工具用于分析录制的数据，如性能分析、事件分析等。\",\"堆转储分析： Java Mission Control集成了堆转储分析工具，可以生成Java应用程序的堆转储文件，并提供一套工具用于分析堆转储文件，如对象分配状况、内存泄漏分析等。\",\"线程分析： Java Mission Control可以监视Java应用程序中的线程状态，并提供线程分析工具，用于查找线程死锁、线程阻塞等问题。\",\"插件支持： Java Mission Control是一个基于插件的可扩展应用程序，可以通过安装不同的插件来扩展其功能，满足不同场景下的监控和调试需求。\"]},\"239\":{\"h\":\"类文件和字节码\",\"t\":[\"Java程序可以在不同的操作系统和硬件平台上运行，而不需要修改代码。这种特性主要得益于所有平台统一支持的程序存储格式——字节码Byte Code，它是构成平台无关性的基石，任何其它语言的实现者都可以将Java虚拟机作为它们语言的运行基础，以Class文件作为它们产品的交付媒介。\",\"JVM语言无关性\"]},\"240\":{\"h\":\"类文件结构\",\"t\":[\"Class 文件是Java编译器编译Java源代码生成的文件，是一组以8字节为基础单位的二进制流。它采用一种伪结构来存储数据，包括两种数据类型：\",\"无符号数：基本数据类型，以u1/u2/u4/u8分别代表1/2/4/8个字节。用来描述数字、索引引用、数量值、UTF-8编码的字符串值\",\"表：多个无符号数或其它表 作为数据项构成的复合数据结构，以_info结尾用来描述有层次关系的复合数据结构\",\"Class文件结构\",\"ClassFile { u4 magic; //Class 文件的标志 u2 minor_version; //Class 的小版本号 u2 major_version; //Class 的大版本号 u2 constant_pool_count; //常量池的数量 cp_info constant_pool[constant_pool_count-1]; //常量池 u2 access_flags; //Class 的访问标记 u2 this_class; //当前类 u2 super_class; //父类 u2 interfaces_count; //接口 u2 interfaces[interfaces_count]; //一个类可以实现多个接口 u2 fields_count; //Class 文件的字段属性 field_info fields[fields_count]; //一个类可以有多个字段 u2 methods_count; //Class 文件的方法数量 method_info methods[methods_count]; //一个类可以有个多个方法 u2 attributes_count; //此类的属性表中的属性数 attribute_info attributes[attributes_count]; //属性表集合 }\",\"魔数（Magic Number）： .class文件的头4个字节是固定的魔数，用于标识文件是否为Java类文件。魔数的值为0xCAFEBABE。\",\"版本号（Version）： 魔数之后的4个字节表示JVM版本号，前2个字节表示主版本号，后2个字节表示次版本号。\",\"版本号从45开始，例如JDK17的主版本就是45+17-1=61，高版本JDK仅向下兼容，JVM必须拒绝执行超过其版本号的Class文件，即使Class格式未发生变化。\",\"常量池（Constant Pool）： Class文件的资源仓库，用于存储类中使用的常量，包括字符串、类和接口的全限定名、字段和方法的名称和描述符、字面值常量等。常量池的索引从1开始，索引0不使用，用于表示无效的引用。\",\"访问标志（Access Flags）： 访问标志是一个 2Byte 的标志位，用于表示类或接口的访问权限和特性，比如public、private、final、abstract等。\",\"访问标志\",\"类索引、父类索引和接口索引： 类索引表示当前类在常量池中的索引，父类索引表示当前类的直接父类在常量池中的索引，接口索引表示当前类实现的接口在常量池中的索引。\",\"字段表（Field Table）： 字段表用于描述类中声明的字段，包括字段的访问标志、字段的名称和描述符、字段的常量值等。\",\"方法表（Method Table）： 方法表用于描述类中声明的方法，包括方法的访问标志、方法的名称和描述符、方法的字节码等。\",\"属性表（Attribute Table）： 属性表用于存储与类、字段、方法相关的附加信息，如源文件名、代码行号、局部变量表、异常表等。属性表的结构由属性名索引和属性长度组成，后面跟着属性内容。具体包括：\",\"ConstantValue（常量值）： 用于描述字段的常量值，常用于静态字段的初始化。\",\"Code（代码）： 用于存储方法的字节码和异常处理信息，包括方法的指令、局部变量表、操作数栈、异常处理表等。\",\"Exceptions（异常表）： 用于描述方法可能抛出的异常类型，包括方法声明的受检异常和未受检异常。\",\"InnerClasses（内部类）： 用于描述类中声明的内部类和外部类之间的关系。\",\"LineNumberTable（行号表）： 用于存储Java源代码中的行号和字节码指令之间的对应关系，方便调试器在调试时定位源代码行号。\",\"LocalVariableTable（局部变量表）： 用于描述方法中局部变量的名称、索引、作用域和数据类型。\",\"SourceFile（源文件）： 用于描述Java源文件的文件名，方便反编译工具和调试器定位源文件。\",\"Signature（签名）： 用于描述类、字段、方法的泛型签名信息，包括泛型类型参数和泛型方法签名。\",\"RuntimeVisibleAnnotations（可见注解）： 用于存储类、字段、方法的可见注解信息，包括注解的类型和属性。\",\"RuntimeVisibleParameterAnnotations（参数可见注解）： 用于存储方法参数的可见注解信息。\",\"BootstrapMethods（引导方法）： 用于存储动态链接方法调用点的引导方法信息。\",\"Deprecated（已弃用）： 用于标记类、字段、方法已弃用，不推荐使用。\",\"Synthetic（合成标记）： 用于标记类、字段、方法是由编译器生成的合成成员。\"]},\"241\":{\"h\":\"字节码指令\",\"t\":[\"字节码指令是由一个字节表示的操作码（Opcode），它指示了JVM执行何种操作。字节码指令可以分为多种类型，大多数指令都包含其操作对应的数据类型信息。常见的字节码指令包括：\",\"栈操作指令： 这些指令用于操作操作数栈，包括将常量、局部变量、操作数等压入栈、从栈中弹出元素、对栈中的元素进行运算等。例如，push指令用于将常量或变量推入栈顶，pop指令用于将栈顶元素弹出。\",\"算术和逻辑指令： 这些指令用于执行算术运算和逻辑运算，包括加减乘除、位运算、逻辑运算等。例如，iadd指令用于将栈顶两个整数相加，ior指令用于执行按位或运算。\",\"类型转换指令： 这些指令用于进行数据类型的转换，包括将整数转换为浮点数、将浮点数转换为整数等。例如，i2f指令用于将整数转换为浮点数。\",\"控制转移指令： 这些指令用于控制程序的流程，包括跳转、条件分支、循环等。例如，goto指令用于无条件跳转到指定位置，if_icmpgt指令用于比较栈顶两个整数并根据比较结果进行条件跳转。\",\"方法调用指令： 这些指令用于调用方法，包括静态方法调用、实例方法调用、接口方法调用等。例如，invokestatic调用静态方法，invokevirtual调用实例方法，invokeinterface调用接口方法，invokespecial调用一些需要特殊处理的实例方法，invokedynamic调用在运行时动态解析的方法。\",\"对象操作指令： 这些指令用于创建对象、访问对象的字段和数组元素、将对象引用压入栈等。例如，new指令用于创建新的对象，getfield指令用于获取对象的字段值。\",\"异常处理指令： 这些指令用于异常处理，包括抛出异常、捕获异常、处理异常等。例如，athrow指令用于抛出异常，try-catch块用于捕获和处理异常。\"]},\"242\":{\"h\":\"字节码执行引擎\",\"t\":[\"Java虚拟机（JVM）字节码执行引擎是Java程序在虚拟机上执行的核心组件之一，它负责解释和执行Java字节码指令。字节码执行引擎通常由解释器和即时编译器（JIT Compiler）两部分组成，它们共同协作完成Java程序的执行。\",\"解释器（Interpreter）： 解释器是字节码执行引擎的核心组成部分，它负责逐条解释和执行Java字节码指令。解释器通过分析字节码指令，将其转换为底层操作系统的机器码，然后执行相应的操作。解释器的优点是简单、易于实现和移植，但由于每次执行都需要解释字节码指令，执行速度较慢。\",\"即时编译器（Just-In-Time Compiler，JIT Compiler）： 即时编译器是字节码执行引擎的另一部分，它负责将频繁执行的热点代码（Hot Spot）编译成本地机器码，以提高执行速度。JIT Compiler会根据程序的运行情况进行动态优化，对热点代码进行适当的优化，如方法内联、循环展开、去除冗余等。JIT Compiler的优点是执行速度快，但缺点是编译过程需要消耗额外的时间和内存。\",\"JVM字节码执行引擎的工作流程如下：\",\"JVM加载Java类文件，并解析字节码文件。\",\"解释器逐条解释和执行Java字节码指令。\",\"解释器监控程序的运行情况，并标记热点代码。\",\"JIT Compiler对热点代码进行编译优化，生成本地机器码。\",\"执行引擎执行本地机器码，提高程序的执行速度。\",\"通过解释器和即时编译器的协作，JVM字节码执行引擎能够在不同的平台上执行Java程序，并根据程序的运行情况进行动态优化，从而实现高效的执行性能。\",\"基于栈的指令集和基于寄存器的指令集 基于栈的指令集是一种将操作数存放在栈中的指令集架构。在这种架构中，操作数通常不直接存放在寄存器中，而是存放在一个栈数据结构中。指令通常包括将操作数压入栈、从栈中弹出操作数进行计算等。基于栈的指令集架构的优点是简单、易于实现和移植，但缺点是由于操作数需要频繁压栈和弹栈，执行效率较低。\",\"基于寄存器的指令集是一种将操作数存放在寄存器中的指令集架构。在这种架构中，操作数通常直接存放在寄存器中，指令对寄存器中的操作数进行计算。基于寄存器的指令集架构的优点是执行效率高，因为操作数直接存放在寄存器中，无需频繁的内存访问。但缺点是寄存器的数量有限，可能会导致指令集的复杂性增加，以及寄存器的分配和管理成为挑战。\",\"总的来说，基于栈的指令集架构更适合于虚拟机（如Java虚拟机）等环境，因为它简单且易于移植，而基于寄存器的指令集架构更适合于物理处理器等环境，因为它执行效率高。\"]},\"243\":{\"h\":\"方法调用\",\"t\":[\"方法调用阶段唯一的任务是确定被调用方法的版本，Class文件的编译过程中不包含传统程序语言编译的连接步骤，一切方法调用在Class文件里面存储的都只是符号引用，而不是方法在实际运行时内存布局中的入口地址。\",\"解析和分派是Java虚拟机执行方法调用和字段访问的关键步骤。解析将符号引用解析为直接引用，确定方法或字段的具体引用；而分派根据调用的接收者确定要调用的具体方法实现。这两个过程共同保证了Java程序的多态性和灵活性。\"]},\"244\":{\"h\":\"解析\",\"t\":[\"解析是指在运行时确定方法或字段的具体引用的过程。在Java中，解析通常发生在以下情况下：\",\"调用实例方法时，需要确定调用的具体实现；\",\"访问实例字段时，需要确定字段的具体引用；\",\"访问静态方法或字段时，需要确定静态方法或字段的具体引用。\",\"解析的过程包括根据方法或字段的名字和描述符在类的常量池中查找符号引用，并将其解析为直接引用。解析可以发生在类加载过程中（解析阶段），也可以发生在运行时（动态解析）。解析是Java虚拟机执行方法调用和字段访问的基础，它通过符号引用到直接引用的转换，将程序中的符号引用映射到内存中的具体对象或方法。\"]},\"245\":{\"h\":\"分派\",\"t\":[\"分派是指根据方法调用的接收者确定要调用的具体方法实现的过程。在Java中，分派通常发生在以下情况下：\",\"调用实例方法时，根据对象的实际类型确定调用的具体方法实现；\",\"调用构造方法时，根据对象的实际类型确定要实例化的具体类；\",\"调用接口方法时，根据接口的实现类确定调用的具体方法实现。\",\"分派可以分为静态分派（早期绑定）和动态分派（晚期绑定）：\",\"静态分派：在编译时根据方法调用的静态类型确定要调用的具体方法实现。主要发生在方法重载和重写时。\",\"动态分派：在运行时根据方法调用的实际类型确定要调用的具体方法实现。主要发生在方法重写时。\"]},\"246\":{\"h\":\"类加载机制\",\"t\":[\"类加载机制指JVM把描述类的数据从Class文件加载到内存，并对数据继续校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型。Java中，类型的加载、连接和初始化过程都是在程序运行期完成的。\"]},\"247\":{\"h\":\"类加载时机\",\"t\":[\"在Java中，类加载的时机可以分为以下几种情况：\",\"首次使用时加载： 类在首次被使用时，会触发其加载过程。首次使用的情况包括：\",\"创建类的实例。\",\"访问类的静态变量或静态方法。\",\"使用类的静态方法。\",\"使用反射创建类的实例。\",\"类初始化时加载： 类在进行初始化时会被加载，包括以下情况：\",\"调用类的静态方法。\",\"设置或获取类的静态变量。\",\"使用 Class.forName() 方法加载类。\",\"虚拟机启动时加载： 虚拟机启动时，会加载主类（包含 main 方法的类），并调用其 main 方法。从主类开始，虚拟机会逐步加载和初始化其他类。\"]},\"248\":{\"h\":\"类加载过程\",\"t\":[\"类加载到卸载的七个阶段，其中验证、准备、解析三个部分统称连接。这些阶段通常都是互相交叉混合进行的，一个阶段的执行过程中调用、激活另一个阶段。\",\"类的生命周期\"]},\"249\":{\"h\":\"加载\",\"t\":[\"加载阶段完成三件事：\",\"通过一个类的全限定名来获取定义此类的二进制字节流\",\"将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\",\"在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口\",\"获取类的二进制字节流不限于Class文件，还可以是压缩包如jar，网络如applet，动态生成，数据库等等。另外数组类本身不通过类加载器创建，它是由JVM直接在内存中动态构造出来的。\"]},\"250\":{\"h\":\"验证\",\"t\":[\"验证阶段目的是确保Class文件的字节流包含的信息符合全部约束要求，保证代码运行不会JVM自身的安全。分四个阶段：\",\"文件格式验证：保证输入的字节流能正确解析并存储于方法区之内\",\"元数据验证：对字节码描述信息进行语义分析\",\"字节码验证：通过数据流分析和控制流分析，确定程序语义合法，符合逻辑。(停机问题：不完全保证合法)\",\"符号引用验证：对类自身以外的各类信息进行匹配性校验\"]},\"251\":{\"h\":\"准备\",\"t\":[\"为类的静态变量分配内存，并设置默认初始值（零值），不包括对常量变量的赋值。\",\"数据类型的零值\"]},\"252\":{\"h\":\"解析\",\"t\":[\"将常量池内的符号引用替换为直接引用的过程，包括类、接口、字段和方法。符号引用是以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要能无歧义的定位到目标。直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。\"]},\"253\":{\"h\":\"初始化\",\"t\":[\"初始化阶段是类加载过程的最后一步，它负责执行类构造器（<clinit>方法），初始化类的静态变量和执行静态初始化块。<clinit>()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块合并产生的，顺序由源文件中定义顺序决定。同一个类加载器下，一个类型只会被初始化一次。\",\"JVM中第一个被执行<clinit>()方法的类型一定是java.lang.Object，接口(实现类)的<clinit>()不需要先执行(父)接口的<clinit>()。\"]},\"254\":{\"h\":\"类加载器\",\"t\":[\"在Java中，类加载器（ClassLoader）是负责加载类文件（.class文件）并生成对应Class对象的重要组件，对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在JVM中的唯一性。Java中的类加载器主要有以下几种：\",\"启动类加载器（Bootstrap ClassLoader）： 启动类加载器是虚拟机的一部分，它负责加载Java的核心类库，如java.lang.Object、java.lang.String等，以及其他的一些基础类库，通常是由虚拟机实现提供的。启动类加载器是虚拟机自身的一部分，通常用本地代码来实现，无法直接获取到。\",\"扩展类加载器（Extension ClassLoader）： 扩展类加载器负责加载Java的扩展类库，一般位于 <JAVA_HOME>/lib/ext 目录下，或者由系统属性 java.ext.dirs 指定的目录中。扩展类加载器是 sun.misc.Launcher$ExtClassLoader 类的实例。JDK 9中已移除，取而代之的是PlatformClassLoader平台类加载器，负责加载非核心模块类。\",\"应用程序类加载器（Application ClassLoader）： 应用程序类加载器，也称为系统类加载器，负责加载应用程序的类路径（classpath）下的类库，通常是项目中编写的Java类，或者第三方库。应用程序类加载器是 sun.misc.Launcher$AppClassLoader 类的实例。\",\"自定义类加载器（Custom ClassLoader）： 自定义类加载器是用户自己实现的类加载器，可以根据需要定制类加载过程。自定义类加载器需要继承 java.lang.ClassLoader 类，并重写其 findClass 方法来实现类的加载逻辑。自定义类加载器可以用于实现一些特殊的类加载需求，比如从网络中加载类、动态生成类等。\",\"其中，Boostrap ClassLoader由C++实现，是JVM自身的一部分，其它类加载器都是由Java实现，独立于JVM，且全部继承自抽象类java.lang.ClassLoader。\",\"双亲委派模型\",\"Java类加载器采用双亲委派模型（Parent Delegation Model），即先由父类加载器尝试加载类，只有在父类加载器无法加载时才由子类加载器尝试加载。这样可以确保类加载的顺序和可靠性，避免重复加载和类冲突。\",\"类加载器双亲委派模型\"]},\"255\":{\"h\":\"前期编译\",\"t\":[\"编译期可分为：\",\"前期编译器 javac：*.java -> *.class\",\"即时编译器 JIT：运行期字节码 -> 本地机器码\",\"静态提前编译器 AOT：程序 -> 二进制代码\",\"JVM对性能的全部优化集中在运行期的JIT中，支撑了程序执行效率的不断提升，并且让非javac产生的Class文件(如 JRuby、Groovy)也能享受编译器的优化措施；而前期编译器（主要是javac）的优化过程则是支撑了程序员的编码效率和语言使用者幸福感的提升。\",\"javac本身是由Java语言编写的程序，编译过程大致分为准备过程和三个处理过程，其中准备过程会初始化插入式注解处理器。\",\"javac编译过程\"]},\"256\":{\"h\":\"解析与填充符号表\"},\"257\":{\"h\":\"词法分析\",\"t\":[\"将源码中的字符流转变为标记Token的过程。程序编写的最小元素是单个字符，编译时的最小元素是标记。\"]},\"258\":{\"h\":\"语法分析\",\"t\":[\"根据标记序列构造抽象语法树的过程。AST是一种用来描述程序代码语法结构的树形表示形式，其中每个节点都代表着程序代码中的一个语法结构，如包、类型、修饰符、运算符、接口等。\"]},\"259\":{\"h\":\"填充符号表\",\"t\":[\"符号表是由一组符号地址和符号信息构成的数据结构 (类似键值对的存储形式)，符号表登记的信息在后续语义分析、目标代码生成阶段都要使用。\"]},\"260\":{\"h\":\"注解处理器\",\"t\":[\"插入式注解器可以看作一组编译器的插件，插件工作时可以读取、修改、添加抽象语法树中的任意元素。处理注解期间，如果注解器对语法树进行过修改，编译器将重新解析、填充符号表，每次循环称为一个轮次Round。注解处理器的典型应用如Lombok工具。\"]},\"261\":{\"h\":\"语义分析与字节码生成\"},\"262\":{\"h\":\"语义分析\",\"t\":[\"AST能够表示一个结构正确的源程序，但无法保证语义符合逻辑，因此需要语义分析对结构上正确的源程序进行上下文相关性质的检查。分以下两类：\",\"标注检查：检查包括变量使用前是否已被声明、变量与赋值之间的数据类型能否匹配等，另外还有常量折叠等少量代码优化\",\"数据及控制流：检查诸如程序局部变量使用前是否赋值、方法的每条路径是否都有返回值、是否所有受查异常都被正确处理了等问题。(某些语义只能在编译期，而不能在运行期检查)\"]},\"263\":{\"h\":\"语法糖\",\"t\":[\"Java的语法糖是指在Java编程语言中为了简化代码书写和提高可读性而添加的一些语法特性，这些特性在语言的语法上是可选的，但在编译器处理过程中会被转换成标准的Java语法。以下是Java中常见的语法糖：\",\"自动装箱和拆箱（Autoboxing and Unboxing）： 自动装箱和拆箱允许基本类型与对应的包装类型之间进行隐式转换。例如，可以直接将 int 类型的值赋给 Integer 对象，编译器会自动插入装箱和拆箱的代码。\",\"增强的 for 循环（Enhanced For Loop）： 增强的 for 循环简化了对数组和集合的遍历操作。例如，可以使用 for (T element : collection) 的语法来遍历集合中的元素，而不需要显式使用迭代器。\",\"静态导入（Static Import）： 静态导入允许在使用静态成员时省略类名。例如，可以使用 import static java.util.Math.* 来导入 Math 类的所有静态方法，然后直接调用静态方法而无需使用类名。\",\"可变参数（Varargs）： 可变参数允许方法接受可变数量的参数。例如，可以使用 void foo(String... args) 的语法定义可变参数方法，然后在调用该方法时传递任意数量的参数。\",\"泛型类型推断（Diamond Operator）： 泛型类型推断允许省略泛型类型的声明，编译器会根据上下文自动推断泛型类型。例如，可以使用 List<String> list = new ArrayList<>() 的语法来创建泛型集合，省略了 ArrayList<String> 中的泛型类型。\",\"泛型通配符（Wildcard）： 泛型通配符允许在泛型类型中使用通配符来表示未知类型。例如，可以使用 List<?> 的语法来声明一个未知类型的泛型集合。\",\"Lambda 表达式（Lambda Expressions）： Lambda 表达式简化了匿名函数的定义和使用。例如，可以使用 (a, b) -> a + b 的语法来定义一个接受两个参数并返回它们之和的 Lambda 表达式。\",\"方法引用（Method Reference）： 方法引用允许直接引用已有方法作为 Lambda 表达式的参数。例如，可以使用 System.out::println 的语法来引用 System.out.println 方法。\"]},\"264\":{\"h\":\"字节码生成\",\"t\":[\"Javac编译过程的最后一个阶段，把前面各个步骤生成的信息(语法树、符号表)转化为字节码指令写入到磁盘中，还进行了少量代码添加和转换工作。完成对语法树的遍历和调整之后，就会把填充了所有所需信息的符号表交由ClassWriter::writeClass()方法输出字节码，生成最终的Class文件。至此编译过程宣告结束。\"]},\"265\":{\"h\":\"后期编译\",\"t\":[\"编译器无论在何时、在何种状态下把Class文件转换成本地基础设施(硬件指令集、操作系统)相关的二进制机器码，都可以视为整个编译过程的后期。后期编译器性能的好坏、代码优化质量的高低是衡量一款商用虚拟机优秀与否的关键指标之一，也是商业JVM的核心，最能体现技术水平与价值。\"]},\"266\":{\"h\":\"即时编译器\",\"t\":[\"Java最初都是通过解释器执行的，启动迅速，节约内存。但是当JVM发现某个方法或代码块运行频繁，就会把它们判定为热点代码，编译成本地机器码，并通过各种手段进行优化，提高热点代码执行效率。完成这一任务的后期编译器称即时编译器 JIT，主流商用JVM都同时包含解释器和编译器。\",\"解释器与编译器的交互\"]},\"267\":{\"h\":\"分层编译\",\"t\":[\"HotSpot中包括客户端编译器C1，服务端编译器C2，以及Graal编译器。根据编译器编译、优化的规模与耗时，划分5个不同的编译层次：\",\"第0层：纯解释执行，不开启性能监控模式\",\"第1层：C1编译，进行简单可靠的稳定优化，不开启性能监控\",\"第2层：C1编译，仅开启方法及回边次数统计等有限的性能监控\",\"第3层：C1编译，开启全部性能监控，收集更多统计信息\",\"第4层：C2编译，启用更多耗时更长的优化，并根据性能监控进行一些不可靠的激进优化\",\"实施分层编译后，解释器、C1、C2同时工作，热点代码可能被多次编译，用C1获取更高的编译速度，用C2获取更好的编译质量。\"]},\"268\":{\"h\":\"编译对象与触发条件\",\"t\":[\"JIT 编译的对象，即热点代码分两类：1）被多次调用的方法；2）被多次执行的循环体。编译的目标对象都是整个方法体，而非单独的循环体。对于循环体，编译时自动进行\\\"栈上替换\\\"。\",\"热点探测的方式有两种：\",\"基于采样： 周期性检查各个线程的调用栈顶，如果某些方法经常出现在栈顶，即是热点方法。采样简单高效，容易获取对象调用关系，但不够精确，容易受线程阻塞或其它外界因素的影响。\",\"基于计数器： 为每个方法、代码块设置计数器，统计方法的执行次数，超过阈值即热点方法。计数器法精确严谨，但实现复杂，需要为每个方法建立并维护计数器，且不能直接获取方法调用关系。\",\"HotSpot采用第二种计数器方式，为每个方法设置方法调用计数器和回边计数器。其中，方法调用计数器负责统计方法一段时间内执行的相对频率，超过时间限度会进行热度衰减，计数器减半，而这段时间称半衰周期。\",\"方法调用计数器触发即时编译器\",\"而回边计数器负责统计方法中循环体代码执行的次数，统计的是绝对次数，没有热度衰减。当回边计数器溢出时，会同步设置方法调用计数器为溢出状态\",\"回边计数器触发即时编译器\"]},\"269\":{\"h\":\"编译过程\",\"t\":[\"默认条件下，无论时方法调用产生的标准编译请求，还是栈上替换编译请求，JVM在编译器未完成编译前，都仍将解释执行代码，编译动作在后台编译线程中进行。\",\"客户端编译器\",\"简单快速的三段式编译器，主要是局部优化。\",\"阶段1：一个平台独立的前端将字节码构造成一个高级中间代码表示HIR\",\"阶段2：一个平台相关的后端从HIR中产生低级中间代码表示LIR\",\"阶段3：在平台相关的后端使用线性扫描算法在LIR上分配寄存器，做窥孔优化，产生机器代码\",\"客户端编译架构\",\"服务端编译器\",\"专门面向服务端的典型应用场景，针对性调整服务端的性能配置，能够容忍高优化复杂度，可以执行大部分经典的优化动作，同时根据解释器、C1提供的性能监控信息，进行一些不稳定的激进优化。\"]},\"270\":{\"h\":\"提前编译器\",\"t\":[\"Java 提前编译器 (AOT compiler) 是一种将 Java 字节码 (*.class) 编译为本地机器码的工具，可以直接由 CPU 执行。与传统的解释器或即时编译器 (JIT) 相比，AOT 编译器能够在程序启动之前完成编译工作，从而提高程序的启动速度和运行效率。\"]},\"271\":{\"h\":\"优点\",\"t\":[\"提高启动速度: AOT 编译器能够在程序启动之前完成编译工作，从而消除解释器和 JIT 编译器在程序启动时带来的性能开销。\",\"提高运行效率: AOT 编译器可以进行更深入的代码优化，生成更优化的本地机器码，从而提高程序的运行效率。\",\"减少内存占用: AOT 编译器可以将编译后的代码直接存储在可执行文件中，无需在运行时解释或编译字节码，从而减少内存占用。\"]},\"272\":{\"h\":\"缺点\",\"t\":[\"增加编译时间: AOT 编译器需要在程序启动之前进行编译，因此会增加程序的编译时间。\",\"降低灵活性: AOT 编译后的代码无法动态修改，因此降低了程序的灵活性。\",\"增加代码大小: AOT 编译后的代码通常会比字节码更大，因此会增加程序的部署成本。\"]},\"273\":{\"h\":\"应用场景\",\"t\":[\"AOT 编译器通常适用于以下场景：\",\"对启动速度和运行效率要求较高的应用程序\",\"需要在嵌入式系统或移动设备上运行的应用程序\",\"需要静态部署的应用程序\"]},\"274\":{\"h\":\"编译优化技术\",\"t\":[\"常量折叠: 将多个相同的常量合并为一个，以减少程序内存的使用。\",\"死代码删除: 将无用的代码删除，以减少程序的执行时间和内存占用。\",\"静态变量替换: 将静态变量替换为常量，以减少程序的执行时间。\",\"循环展开: 将循环体展开，以提高程序的执行效率。\",\"内联函数: 将小型函数直接展开在调用它的位置，以减少程序的调用开销。\",\"指令重排序: 调整指令的执行顺序，以提高程序的并行性。\",\"类型推断: 根据上下文推断变量的类型，以减少程序的代码量。\"]},\"275\":{\"h\":\"内存模型\",\"t\":[\"见：Java并发-内存模型\"]},\"276\":{\"h\":\"多线程\"},\"277\":{\"h\":\"线程实现\",\"t\":[\"线程是比进程更轻量化的调度执行单位，线程的引入，可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源，又可以独立调度。\",\"线程是Java进行处理器资源调度的最基本单位，Java提供了不同硬件和OS平台下对线程操作的统一处理。实现线程有三种方式：内核线程、用户线程、混合线程。目前，主流JVM的线程实现都是基于OS原生线程，即1:1的内核线程模型。\",\"JDK层面的线程实现见：Java-Thread 源码阅读\"]},\"278\":{\"h\":\"内核线程\",\"t\":[\"内核线程是由操作系统内核（kernel）创建和管理的线程。内核线程是操作系统的一部分，它可以直接访问操作系统的资源和内核数据结构，并且具有完整的权限和优先级。内核线程通常是由操作系统调度器进行调度，可以在任何时候被抢占或中断。\",\"内核线程实现\"]},\"279\":{\"h\":\"用户线程\",\"t\":[\"用户线程是由用户空间程序创建和管理的线程，它们在用户空间中运行，不能直接访问内核资源。用户线程的创建、调度和销毁都由用户空间的线程库来管理，而不涉及操作系统内核。用户线程的调度和协作是由用户空间的调度器（如线程库或用户态调度器）来完成的。\",\"用户线程实现\"]},\"280\":{\"h\":\"混合线程\",\"t\":[\"混合线程是指同时具有内核线程和用户线程特性的线程模型。在混合线程模型中，每个用户线程可以与一个或多个内核线程关联，内核线程负责执行用户线程的工作。用户线程的创建和调度仍然由用户空间的线程库来管理，但是线程库可以利用内核线程来提高并发性能。\",\"混合线程实现\"]},\"281\":{\"h\":\"锁优化\",\"t\":[\"见：Java 并发和Synchronized 锁机制\"]},\"282\":{\"h\":\"协程\",\"t\":[\"Java的协程是一种轻量级的线程替代方案，用于实现异步编程和高效的并发处理。协程允许在单个线程内实现多个并发执行的任务，并且可以在任务之间进行切换，而无需使用操作系统线程的上下文切换开销。Java的协程通常使用协程库或框架来实现，其中比较流行的有Project Loom中的Fiber和Quasar框架。\",\"以下是Java协程的一些特点和优势：\",\"轻量级和高效： 协程是轻量级的执行单元，通常比线程更加轻量，因此可以在单个线程内创建大量的协程。与操作系统线程相比，协程的创建、销毁和切换开销更小，可以大大提高程序的性能和并发处理能力。\",\"简化异步编程： 协程可以简化异步编程模型，使得代码更加清晰和易于理解。使用协程可以避免回调地狱（Callback Hell）和复杂的异步处理逻辑，使得代码更加易于维护和调试。\",\"提高资源利用率： 由于协程可以在单个线程内并发执行多个任务，并且可以在任务之间进行切换，因此可以更加有效地利用系统资源。与每个任务都创建一个独立的线程相比，使用协程可以节省内存和线程调度开销。\",\"简化线程同步： 协程通常是通过协作式调度（Cooperative Scheduling）来实现的，因此不需要显式的锁和同步机制。协程之间可以通过消息传递或者共享内存来进行通信，从而避免了线程间的竞争和死锁等问题。\",\"提高可伸缩性： 由于协程可以在单个线程内并发执行大量任务，并且可以动态调整任务的数量和调度策略，因此可以更加灵活地适应不同的工作负载和系统需求，提高了系统的可伸缩性和弹性。\"]},\"283\":{\"h\":\"参考\",\"t\":[\"https://github.com/fenixsoft/jvm_book\",\"https://github.com/TangBean/understanding-the-jvm\",\"https://github.com/starjuly/UnderstandingTheJVM\",\"https://pdai.tech/md/java/jvm/java-jvm-struct.html\",\"https://cloud.tencent.com/developer/article/1810426\"]},\"284\":{\"c\":[\"Java\"]},\"285\":{\"c\":[\"JVM\"]},\"286\":{\"h\":\"Java 基础\"},\"287\":{\"h\":\"数据类型\",\"t\":[\"引用数据类型\",\"基本数据类型 4大类8种 (1-2-4-8)\",\"自动类型转换：类型范围小的变量，可以直接赋值给类型范围大的变量 \",\"byte --> short (char) --> int --> long --> float --> double\",\"在表达式中，小范围类型的变量会自动转换成较大范围的类型再运算\",\"byte, short, char --> int --> long --> float --> double\",\"最终结果类型由表达式中的最高类型决定\",\"在表达式中，byte、short、char 直接转换成int类型参与运算的\",\"强制类型转换：可以强行将类型范围大的变量、数据赋值给类型范围小的变量 \",\"强制类型转换可能造成数据(丢失)溢出\",\"浮点型强转成整型，直接丢掉小数部分，保留整数部分返回\"]},\"288\":{\"h\":\"运算符\",\"t\":[\"短路逻辑运算符 \",\"逻辑与&, 逻辑或|: 无论左边是false还是true，右边都要执行\"]},\"289\":{\"h\":\"代码块\",\"t\":[\"代码块{}是类的5大成分之一(成员变量、构造器、方法、代码块、内部类)\",\"静态代码块 \",\"static{ }\",\"通过static关键字修饰，随着类的加载而加载，自动触发，只执行一次\",\"使用场景：在类加载的时候做一些静态数据初始化的操作，以便后续使用\",\"构造代码块(很少使用) \",\"{ }\",\"每次创建对象调用构造器前，都会执行该代码块\",\"使用场景：初始化实例资源\"]},\"290\":{\"h\":\"单例模式\",\"t\":[\"饿汉单例：\",\"在用类获取对象时，对象已经提前为你创建好了\",\"设计步骤：定义类，构造器私有，定义静态变量存储单例对象\",\"public static SingleInstance { // 属于类，与类一起仅加载一次 public static SingleInstance instance = new SingleInstance(); private SingleInstance() { System.out.println(\\\"创建了一个对象\\\"); } }\",\"懒汉单例：\",\"在真正需要该对象时，才去创建一个对象(延迟加载对象)\",\"设计步骤：定义类，构造器私有，定义静态变量存储对象，提供一个返回单例对象的方法\",\"public static SingleInstance { // 类加载时初始为null public static SingleInstance instance; private SingleInstance() {} public static SingleInstance getInstance(){ if(instance == null) instance = new SingleInstance(); return instace; } }\"]},\"291\":{\"h\":\"继承\",\"t\":[\"子类中访问成员满足就近原则，先找子类，子类没有找父类，父类没有报错\",\"子类可以直接使用父类的静态成员(共享)\",\"方法重写 \",\"私有方法不能被重写。但可以定义相同签名的方法。\",\"子类重写父类方法时，访问权限必须大于或等于父类 缺省 < protected < public\",\"子类不能重写父类的静态方法\",\"权限修饰符 \",\"private < 缺省 < protected < public\",\"final 修饰符 \",\"修饰类，表明该类不能被继承\",\"修饰方法，表明该方法不能被重写\",\"修饰变量，表明该变量不能被重新赋值 \",\"基本类型 -- 数据值不能改变\",\"引用类型 -- 存储的地址值不能改变(地址指向的对象可变)\"]},\"292\":{\"h\":\"接口\",\"t\":[\"一种约束规范\",\"接口中的变量默认都是 public static final\",\"接口中的方法默认都是 public abstract\",\"JDK 8/9 新增特性： \",\"默认方法 - default修饰，自动public，需用接口实现类的对象来调用\",\"静态方法 - static修饰，自动public，需用接口本身的接口名调用\",\"私有方法 - private修饰，只能在 接口中被其它的方法访问\",\"一个类同时继承父类和实现接口中的同名方法，优先使用父类的\"]},\"293\":{\"h\":\"多态\",\"t\":[\"访问特点： \",\"方法调用：编译看左边，运行看右边\",\"变量调用：编译看左边，运行也看左边\",\"强制类型转换 \",\"可以转换成真正的子类型，从而调用子类的独有功能\",\"强转前尽量使用instanceof判断对象的真实类型再进行强转\"]},\"294\":{\"h\":\"内部类\"},\"295\":{\"h\":\"1. 静态内部类\",\"t\":[\"static修饰，属于外部类这个类\",\"创建格式：Outer.Inner in = new Outer.Inner()\",\"可以直接访问外部类静态对象\",\"不可以直接访问外部类实例成员\"]},\"296\":{\"h\":\"2. 成员内部类\",\"t\":[\"无 static修饰，属于外部类的对象\",\"创建格式：Outer.Inner in = new Outer().new Inner();\",\"可以直接访问外部类静态对象\",\"可以直接访问外部类实例成员(必须先有外部类对象，才能有成员内部类对象)\",\"class People{ private int hearbeat = 150; public class Heart{ private int hearbeat = 110; public void show(){ int hearbeat = 78; System.out.println(hearbeat); // 78 System.out.println(this.hearbeat); // 110 System.out.println(People.this.hearbeat); // 150 } } }\"]},\"297\":{\"h\":\"3. 局部内部类\",\"t\":[\"放在方法、代码块、构造器等执行体中\",\"类文件名：Outer$NInner.class\",\"鸡肋\"]},\"298\":{\"h\":\"4. 匿名内部类\",\"t\":[\"本质上是没有名字的局部内部类\",\"既是一个类，也代表一个对象(new的类型的子类类型)，写出来就会产生一个匿名内部类的对象\",\"可以直接作为对象传给方法\",\"作用：方便创建子类对象，简化代码编写\",\"创建格式：new 类/抽象类名/接口( ){ 重写方法 }\",\"Lambda表达式： \",\"一个匿名函数，是一段可以传递的代码\",\"用于简化函数式接口的匿名内部类的写法形式\",\"函数式接口：有且仅有一个抽象方法的接口，通常加上@FunctionalInterface注解\"]},\"299\":{\"h\":\"字符串\"},\"300\":{\"h\":\"两种创建过程\",\"t\":[\"\\\"\\\"双引号创建字符串：会先判断常量池里面是否有相同的字符串，若有则直接指向该地址\",\"new关键字不论常量池中是否已经有该串，都会在堆中开辟新的内存空间存放该字符串\",\"此外，String::intern() 方法可以主动将字符串放入堆中的字符串常量池，并返回常量池中的该对象。\"]},\"301\":{\"h\":\"疑难点\",\"t\":[\"问题：下列代码的运行结果是？ \",\"// 先在堆的字符串常量池里创建\\\"abc\\\"的串，然后new再创建一个新串赋给s2 String s2 = new String(\\\"abc\\\"); // 由于是双引号，直接指向常量池里的\\\"abc\\\"，因此这条语句没有创建新字符串 String s1 = \\\"abc\\\" // false, s1指向的是常量池里的\\\"abc\\\",s2指向的是堆里的\\\"abc\\\" System.out.println(s1 == s2)\",\"String s7 = \\\"qwe\\\"; String s8 = \\\"qw\\\"; // 只要不是直接双引号给出的字符串，都是非常量池的。字符串变量拼接的本质是 StringBuilder String s9 = s8 + \\\"e\\\"; // false, s7指向常量池的\\\"qwe\\\",s9指向堆里的\\\"qwe\\\" System.out.println(s7 == s9); String s10 = \\\"asd\\\"; String s11 = \\\"a\\\" + \\\"s\\\" + \\\"d\\\"; // true, 字符串字面量在编译时有优化机制：直接将\\\"a\\\"+\\\"s\\\"+\\\"d\\\"转换为\\\"asd\\\"，可以通过class文件确认 // 而s9由于s8是变量，不是字面量，因此没有优化 System.out.println(s10 == s11);\"]},\"302\":{\"h\":\"StringBuilder 拼接字符串\",\"t\":[\"String 对象拼接字符串原理 - 每次拼接都会产生新的对象: \",\"StringBuilder 对象拼接字符串原理 - 对同一个对象做修改 \",\"StringBuilder相当于一个容器，拼接、修改更加高效\",\"StringBuilder只是个工具，最终的目的是得到String\",\"StringBuffer是StringBuilder的多线程安全版，单线程下StringBuilder效率更高\"]},\"303\":{\"h\":\"集合\"},\"304\":{\"h\":\"Collection\",\"t\":[\"List: 有序、可重复、有索引\",\"ArrayList: 底层基于数组，默认长度10，存满时扩容1.5倍\",\"LinkedList: 底层基于双链表，可模拟栈/ 队列\",\"Set: 无序、不重复、无索引\",\"HashSet: 基于哈希表，底层采用数组+链表+红黑树实现。哈希表默认长度16，加载因子0.75，每次扩容2倍。相同哈希值的元素构成链表，新元素挂在老元素后面，当链表长度超过8自动转为红黑树。\",\"LinkedHashSet: 有序，底层哈希表+双链表记录存储顺序\",\"TreeSet: 自动排序，底层基于红黑树实现。必须指定比较规则 (比较器/比较接口)\",\"如果希望 Set 认为两个内容一样的对象是重复的，必须重写对象的hashCode()和equals()方法\",\"集合体系\",\"遍历方式：\",\"迭代器 Iterator::hasNext, Iterator::next\",\"for-each 循环 注意集合中存储的是对象的地址，因此修改第三方变量不会影响到集合中的元素\",\"lambda表达式 forEach(Consumer<? super T> action)\",\"遍历时直接用集合删除元素可能出现并发异常，可以通过迭代器删除\",\"Collections 集合工具类\",\"addAll\",\"sort\",\"shuffle\",\"不可变集合 ImmutableCollections：\",\"List.of\",\"Set.of\",\"Map.of\"]},\"305\":{\"h\":\"Map\",\"t\":[\"HashMap:\",\"无序，不重复，无索引，值不作要求\",\"基于哈希表、数组、红黑树实现\",\"基于hashCode()和equals()保证键的唯一\",\"LinkedHashMap：\",\"按键有序，不重复，无索引，值不作要求\",\"基于哈希表、双链表记录存储顺序\",\"TreeMap:\",\"自动按键排序 ，不重复，无索引，值不作要求\",\"底层基于红黑树实现，必须指定键的比较规则(比较器/比较接口)\",\"Properties\",\"本质是Map集合，一般代表一个属性文件，存储对象键值对，作为系统配置信息\",\"store(Stream, comments), load(Stream), setProperty, getProperty\",\"Set系列集合的底层就是Map实现的，只是Set集合中的元素只要键数据，不要值数据。\",\"map体系\",\"遍历方式： \",\"键找值：map.keySet(), map.get(key)\",\"键值对：map.entrySet(), entry.getKey(), entry.getValue()\",\"Lambda表达式：map.forEach(BiConsumer<K, V>)\"]},\"306\":{\"h\":\"泛型\",\"t\":[\"自定义泛型类 public class MyGeneric<T> {}\",\"自定义泛型方法 public <T> void MyFun(T t) {}\",\"自定义泛型接口 public interface MyInterface<E> {}\",\"泛型通配符 ？可以在使用泛型时代表一切类型 ? extends Class 泛型上限，限定必须是Class或其子类 ? super Class 泛型下限，限定必须是Class或其父类\",\"底层实现上，字节码中的泛型类型都会被擦除\"]},\"307\":{\"h\":\"反射\",\"t\":[\"对于任何一个Class对象，可以在运行时得到这个类的全部成分\"]},\"308\":{\"h\":\"获取Class对象\",\"t\":[\"Class.forName(String)\",\"类目.class\",\"对象.getClass() \"]},\"309\":{\"h\":\"获取构造器\",\"t\":[\"Class::getConstructors([paramTypes]) 获取公有构造器, Class::getDeclaredConstructors([paramTypes]) 获取所有构造器\",\"Constructor::newInstance() 根据指定构造器创建新对象\",\"Constructor::setAccessible(boolean) 设置访问检查，实现暴力反射(调用私有构造器，破坏了封装性)\"]},\"310\":{\"h\":\"获取成员变量\",\"t\":[\"Class::getFields(name), Class::getDeclaredFields(name)\",\"Field::set(object, val), Field::get(obj) 设置/获取成员变量的值\",\"Field::setAccessible(boolean)\"]},\"311\":{\"h\":\"获取方法对象\",\"t\":[\"Class::getMethods([name, params]), Class::getDeclaredMethods([name, params])\",\"Method::invoke(obj, args...) 对obj对象调用目标方法，可以获取返回值\",\"Method::setAccessible(boolean)\"]},\"312\":{\"h\":\"Stream 流\",\"t\":[\"结合Lambda表达式，简化集合、数组操作的API\",\"流的三类方法：\",\"获取Stream流： 创建一条流水线，并把数据放到流水线上准备进行操作。如Collection.stream(), Arrays.stream(T[]), Stream.of(T...)\",\"中间方法： 流水线上的操作，调用完成后返回新的Stream流，支持链式编程。如filter, limit, skip, distinct, map, concat\",\"终结方法： 流水线的最后一个操作，调用后不返回Stream，因此一个Stream流仅有一个。如forEach, count\",\"流的收集\",\"把Stream流操作后的结果转回集合或数组。Stream是手段，集合/数组才是目的\",\"流只能使用一次\",\"方法：stream.collect, stream.toArray, stream.toList, Collector包括Collectors::toList, Collectors::toSet, Collectors::toMap等\"]},\"313\":{\"h\":\"文件\"},\"314\":{\"h\":\"File类\",\"t\":[\"代表OS的文件/文件夹对象。提供定位、获取文件信息、删除、创建等功能\",\"createNewFile\",\"mkdir创建一级目录, mkdirs创建多级目录\",\"delete删除文件/空文件夹且不走回收站\",\"list返回目录下文件名数组,listFiles返回目录下文件对象数组，仅包括一级\"]},\"315\":{\"h\":\"字符集\",\"t\":[\"常见字符集: \",\"ASCII: 1个字节存储1个字符，共128个\",\"GBK: 包含汉字等字符，一个中文2个字节存储\",\"Unicode (UTF-8): 一个中文3个字节存储\",\"编解码： \",\"英文、数字在任何字符集都占1字节，不会乱码\",\"编码：string.getBytes(chatset)\",\"解码：String(byte[], charset)\"]},\"316\":{\"h\":\"IO 流\",\"t\":[\"分类 \",\"体系 \"]},\"317\":{\"h\":\"字节流\",\"t\":[\"InputStream\",\"read(), read(byte[len]), readAllBytes 读取1 / len / 所有字节\",\"OutputStream\",\"覆盖管道，默认打开文件流会清空，构造器append = true开启附加模式\",\"write(), flush(), close() 输出字节流，必须刷新，结束需要关闭资源。close操作包括flush\",\"一般用 try-with-resource 处理资源 (Closeable/AutoCloseable)\"]},\"318\":{\"h\":\"字符流\",\"t\":[\"Reader\",\"read(), read(char[len]) 读取 1 / len 个字符\",\"Writer\",\"覆盖管道，默认打开文件流会清空，构造器append = true开启附加模式\",\"write(), flush(), close() 输出字符流，必须刷新，结束需要关闭资源。close操作包括flush\",\"一般用 try-with-resource 处理资源 (Closeable/AutoCloseable)\",\"使用总结 \",\"字节流适合一切文件数据的拷贝，包括音视频、文本等\",\"字节流不适合读取中文内容输出\",\"字符流适合文本文件的读写\"]},\"319\":{\"h\":\"缓冲流\",\"t\":[\"也称高效流、高级流。自带8KB缓冲区，可以提高原始字节流、字符流读写数据的性能。建议使用缓冲流+字节数组\",\"BufferedInputStream(InputStream)\",\"BufferedOutputStream(OutputStream)\",\"BufferedReader(Reader), readline()\",\"BufferedWriter(Writer), newLine()\"]},\"320\":{\"h\":\"转换流\",\"t\":[\"把原始的字节流按照指定编码转换\",\"字符输入转换流：InputStreamReader(InputStream, charset)\",\"字符输出转换流：OutputStreamWriter(OutputStream, charset)\",\"建议创建转换流后使用缓冲流进行包装，提高性能\"]},\"321\":{\"h\":\"对象字节流 - 序列化\",\"t\":[\"以内存为基准，把内存中的对象存储到磁盘文件中，称为对象序列化\",\"对象字节输出流：ObjectOutputStream(OutputStream)\",\"oos.writeObject(obj) obj 必须实现Serializable序列化接口\",\"以内存为基准，把存储在磁盘文件中的数据恢复成内存中的对象，称为对象反序列化\",\"对象字节输入流：ObjectInputStream(InputStream)\",\"ois.readObject(obj) obj 必须实现Serializable序列化接口\",\"transient修饰的成员变量不参与序列化\",\"通常指定一个序列化版本号，以确保序列化、反序列化的对象保持一致\"]},\"322\":{\"h\":\"打印流\",\"t\":[\"方便、高效地打印数据到文件中\",\"基于字节PrintStream, 基于字符PrintWriter\",\"print(), PrintStream支持写字节，PrintWriter支持写字符\",\"System.out就是一个PrintStream对象。可以重定向输出语句到文件中：System.setOut(new PrintStream(File))\"]},\"323\":{\"h\":\"IO 库\",\"t\":[\"commons-io:\",\"IOUtils::copy\",\"FileUtils::copyFileToDirectory\",\"FileUtils::copyDirectoryToDirectory\",\"...\"]},\"324\":{\"h\":\"NIO\",\"t\":[\"JDK 1.4 引入了 NIO库，弥补了原来同步阻塞I/O 的不足，它在标准 Java 代码中提供了高速的、面向块的 I/O。\",\"Buffer：缓冲区，包含一些要写入或者要读出的数据。在 NIO 库中，所有数据都是用缓冲区进行处理的，不同于面向流的IO中将数据直接读/写到 Stream 对象中 Channel：通道，可以通过它读取和写入数据。通道是双向的，而流是单向的（InputStream/OutputStream） Selector：可以同时轮询多个 Channel\"]},\"325\":{\"h\":\"多线程\"},\"326\":{\"h\":\"多线程的创建\"},\"327\":{\"h\":\"1. 继承Thread类\",\"t\":[\"定义任务类继承java.lang.Thread，重写run()方法\",\"创建线程对象， 调用Thread::start()启动线程\",\"优点：编码简单\",\"缺点：不利于扩展，自定义线程无法继承其它类\"]},\"328\":{\"h\":\"2. 实现Runnable接口\",\"t\":[\"创建Runnable接口匿名内部类，重写run()方法\",\"把Runnable交给Thread类处理，调用start()启动线程\",\"优点：可以继续继承、实现，扩展性强\",\"缺点：多一层包装，线程如果有执行结果不可以直接返回\"]},\"329\":{\"h\":\"3. 实现Callable接口\",\"t\":[\"定义任务类实现Callable接口，重写call()方法\",\"用FutureTask把Callable对象封装成线程任务对象\",\"把FutureTask交给Thread类处理调用，start()启动线程\",\"线程执行完毕后，通过FutureTask::get()获取任务执行的结果\",\"优点：可以继续继承、实现，扩展性强。且可以在线程执行完毕后获取执行结果\",\"缺点：编码稍复杂\"]},\"330\":{\"h\":\"Thread常用API\",\"t\":[\"setName, getName\",\"currentThread() 返回当前正在执行的线程对象的引用\",\"sleep(long) 让线程休眠指定时间，单位毫秒\",\"yield, join, interrupt...\"]},\"331\":{\"h\":\"线程安全\",\"t\":[\"多个线程同时访问同一个共享资源且修改该资源\",\"线程同步的核心思想：加锁\",\"同步代码块 \",\"synchronized(锁对象)\",\"一般把共享资源作为锁对象\",\"建议实例方法使用this作为锁对象，静态方法使用类.class对象作为锁对象\",\"同步方法 \",\"synchronized 修饰方法\",\"底层：实例方法默认对this加锁，静态方法默认对类.class加锁\",\"Lock锁 \",\"实现类：ReentrantLock\",\"lock, unlock\",\"线程通信\",\"wait() 让当前线程释放锁并进入等待，直到另一个线程唤醒\",\"notify(), notifyAll() 唤醒正在等待的单个 / 所有线程\",\"必须通过当前同步锁对象进行调用\"]},\"332\":{\"h\":\"线程池\",\"t\":[\"创建线程的开销很大，可以通过复用线程，提高系统性能\",\"线程池接口：ExecutorService; 实现类：ThreadPoolExecutor;\",\"public ThreadPoolExecutor( int corePoolSize, //指定线程池的线程数量 (核心线程) int maximumPoolSize, //指定线程池可支持的最大线程数 (>=核心线程数) long keepAliveTime, //指定临时线程的最大存活时间 TimeUnit unit, //指定存活时间的单位(秒、分、时、天) BlockingQueue<Runnable> workQueue, //指定任务队列 ThreadFactory threadFactory, //指定用哪个线程工厂创建线程 RejectedExecutionHandler handler //指定线程忙，任务满的时候，新任务来了怎么办 )\",\"新任务提交时的服务顺序：核心线程 -> 任务队列 -> 创建临时线程 -> 拒绝服务 \",\"如果核心线程都在忙，任务队列也满了，并且还可以创建临时线程，此时才会创建临时线程\",\"核心线程、临时线程都在忙，任务队列也满了，新的任务到达时才会开始拒绝服务\",\"常用方法：execute(Runnable), submit(Callable), shutdown(), shutdownNow()\",\"拒绝策略： \",\"ThreadPoolExecutor.AbortPolicy 默认策略，丢弃并抛出RejectedExecutionException异常\",\"ThreadPoolExecutor.DiscardPolicy 丢弃且不抛异常，不推荐\",\"ThreadPoolExecutor.DiscardOldestPolicy 抛弃队列中等待最久的任务 然后把当前任务加入队列中\",\"ThreadPoolExecutor.CallerRunsPolicy 绕过线程池，由主线程直接调用任务的run()方法执行\",\"线程池工具类: Executors 通过调用方法返回不同类型的线程池对象\",\"newCachedThreadPool() 线程数量随着任务增加而增加，如果线程任务执行完毕且空闲了一段时间则会被回收掉\",\"newFixedThreadPool​(int nThreads) 创建固定线程数量的线程池，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程替代它\",\"newSingleThreadExecutor() 创建只有一个线程的线程池对象，如果该线程出现异常而结束，那么线程池会补充一个新线程\",\"newScheduledThreadPool​(int corePoolSize) 创建一个线程池，可以实现在给定的延迟后运行任务，或者定期执行任务\",\"底层仍是基于ThreadPoolExecutor实现的\",\"最大任务队列长度/线程数量是Integer.MAX_VALUE,可能出现OOM\"]},\"333\":{\"h\":\"补充\"},\"334\":{\"h\":\"定时器\",\"t\":[\"一种控制任务延时调用，或者周期调用的技术\",\"实现方式： \",\"Timer \",\"Timer::schedule(task, delay/time, period);\",\"Timer单线程，处理多个任务按顺序执行，存在延时，和设置定时器的时间有出入\",\"可能因为异常导致Timer线程死掉，从而影响后续任务执行\",\"ScheduledExecutorService \",\"Executors.newScheduledThreadPool​(int corePoolSize)\",\"ScheduledExecutorService.scheduleAtFixedRate(Runnable, delay, period, unit)\",\"基于线程池，某个任何的执行情况不会影响其它定时任务\"]},\"335\":{\"h\":\"并行与并发\",\"t\":[\"并发: CPU分时轮询执行\",\"并行: 同一时刻同时执行\"]},\"336\":{\"h\":\"线程的生命周期\",\"t\":[\"Java定义了6中状态：Thread.State::{NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED} \"]},\"337\":{\"h\":\"网络通信\"},\"338\":{\"h\":\"三要素\"},\"339\":{\"h\":\"IP地址\",\"t\":[\"操作类 InetAddress\",\"getLocalHost 返回本主机的地址对象\",\"getByName(host) 得到指定主机(域名/IP)的IP地址对象\",\"getHostName 返回此IP地址的主机名\",\"getHostAddress 返回IP地址字符串\",\"isReachable(timeout) 指定时间ms内是否连通该IP\"]},\"340\":{\"h\":\"端口\",\"t\":[\"标识主机上的进程，16bit，0-65535\",\"周知端口 0-1023：预先定义的知名应用，如HTTP 80，FTP 21\",\"注册端口 1024-49151：分配给用户进程/应用程序，如Tomcat 8080，MySQL 3306\",\"动态端口 49152-65535\"]},\"341\":{\"h\":\"协议\",\"t\":[\"Ping命令直接基于网络层ICMP协议，无连接，不针对特定端口。与传输层TCP/UDP，或是应用层HTTP等都无关\",\"Socket是一个调用接口，实际是对TCP/IP协议的封装\",\"UDP协议的数据包大小限制64KB\"]},\"342\":{\"h\":\"UDP 通信\",\"t\":[\"DatagramPacket 数据包对象 \",\"DatagramPacket(byte[] buf, length, InetAddress, port)\",\"getLength() 获取实际接受的字节个数\",\"DatagramSocket 发送者/接收者对象 \",\"DatagramSocket(port)\",\"send(packet)\",\"receive(packet)\",\"广播 Broadcast \",\"使用广播地址 255.255.255.255\",\"发送端指定端口，其它主机注册该端口即可\",\"组播 Multicast \",\"使用组播地址 224.0.0.0 - 239.255.255.255\",\"发送端指定组播IP和端口，接收端绑定该组播IP，并注册该端口\",\"DatagramSocket的子类MulticastSocket::joinGroup负责绑定组播IP\"]},\"343\":{\"h\":\"TCP 通信\",\"t\":[\"java.net.Socket 基于TCP协议 \",\"Socket(host, port)\",\"Socket::getOutputStream()\",\"Socket::getInputStream()\",\"ServerSocket 服务端 \",\"ServerSocket(port)\",\"ServerSocket::accept() 等待接收客户端的Socket通信连接，连接成功返回Socket对象与客户端建立端到端通信\",\"服务端一般使用循环，负责接收客户端Socket管道连接,每接收到一个Socket管道后分配一个独立的线程负责处理它(线程池技术)\"]},\"344\":{\"h\":\"异常\"},\"345\":{\"h\":\"异常体系\",\"t\":[\"Error：系统级别问题、JVM退出等，代码无法控制\",\"Exception：java.lang包下，称为异常类，表示程序本身可以处理的问题 \",\"RuntimeException及其子类：运行时异常，编译阶段不会报错。如空指针、数组索引越界等\",\"除RuntimeException之外的所有异常：编译时异常，编译期必须处理，也称受检异常。如日期格式化异常\",\"异常体系\"]},\"346\":{\"h\":\"异常处理\",\"t\":[\"throws：用在方法声明上，将方法内部出现的异常抛出给调用者\",\"try-catch：监视捕获异常，在方法内部自己处理，程序继续执行\",\"try-catch-finally: 除非JVM崩溃，否则必须执行finally块\",\"try-with-resource: 自动关闭资源(Closeable/AutoCloseable)，即使出现异常\"]},\"347\":{\"h\":\"自定义异常\",\"t\":[\"定义异常继承 Exception / RuntimeException\",\"重写构造器\",\"在出现异常的地方主动 throw 自定义异常对象\"]},\"348\":{\"h\":\"注解\",\"t\":[\"又称Java标注，对Java中类、方法、变量做标记，然后进行特殊处理\",\"自定义注解\",\"@Target({ElementType.TYPE, ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) public @interface Book { String value(); double price() default 100; String[] author(); }\",\"元注解：对注解类的注解\",\"@Target：约束注解标记的位置 \",\"ElementType.TYPE 类，接口\",\"ElementType.FIELD 成员变量\",\"ElementType.METHOD 成员方法\",\"ElementType.PARAMETER 方法参数\",\"ElementType.CONSTRUCTOR 构造器\",\"ElementType.LOCAL_VARIABLE 局部变量\",\"@Retention：约束注解的存活范围 \",\"RetentionPolicy.SOURCE 注解只作用在源码阶段，生成的字节码文件中不存在\",\"RetentionPolicy.CLASS 默认值，注解作用在源码阶段，字节码文件阶段，运行阶段不存在\",\"RetentionPolicy.RUNTIME 注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）\",\"注解解析\",\"Annotation: 注解对象\",\"AnnotatedElement: 注解解析相关方法的接口，所有类成分Class/Method/Field/Constructor均已实现 \",\"getDeclaredAnnotations()\",\"getDeclaredAnnotation(class)\",\"isAnnotationPresent(class)\",\"解析技巧：注解在哪个成分上，就先拿哪个成分对象\"]},\"349\":{\"h\":\"动态代理\",\"t\":[\"对业务功能进行代理，类似AOP编程\",\"Proxy::newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)\",\"InvocationHandler::invoke(Object proxy, Method method, Object[] args)\",\"优点： \",\"非常灵活，支持任意接口类型做代理，也可以直接为接口本身做代理\",\"可以为被代理对象的所有方法做代理\",\"不改变方法源码的情况下，实现对功能的增强\",\"简化编程，提高可扩展性，提高了开发效率\"]},\"350\":{\"h\":\"常用API\"},\"351\":{\"h\":\"BigDecimal\",\"t\":[\"解决浮点型运算精度失真问题\",\"禁止使用BigDecimal(double)把double值转换为BigDecimal对象，依然存在精度损失风险\",\"推荐使用BigDecimal(String)或BigDecimal.valueOf(Double)的构造方式，自动对精度进行截断处理\",\"BigDecimal只是手段，目的是Double\"]},\"352\":{\"h\":\"枚举\",\"t\":[\"枚举类都继承了 java.lang.Enum\",\"枚举都是最终类，不可以被继承\",\"构造器都是私有，对外不能创建对象\",\"枚举类相当于多例模式\",\"枚举类型反编译\"]},\"353\":{\"h\":\"日期与时间\",\"t\":[\"Date 日期对象 \",\"Date()\",\"setTime(), getTime() 时间毫秒值\",\"SimpleDateFormat \",\"new SimpleDateFormat(pattern)\",\"format(Date/time): Date/time -> String\",\"parse(dateStr): String -> Date\",\"Calendar 系统此刻日历对象 \",\"Calendar.getInstance()\",\"JDK 8新增日期时间API：\",\"LocalDate 不包含具体时间的日期\",\"LocalTime 不包含日期的时间\",\"LocalDateTime 包含日期和时间\",\"Instant 时间戳\",\"DateTimeFormatter 时间格式化和解析\",\"Duration 计算两个时间间隔\",\"Period 计算两个日期间隔\",\"ChronoUnit 针对特定时间单位测量时间差\"]},\"354\":{\"h\":\"正则表达式\",\"t\":[\"Pattern.complie(regex)\",\"pattern.matcher(String)\",\"matcher.find()\",\"matcher.group()\"]},\"355\":{\"h\":\"日志\",\"t\":[\"优势：可以将系统执行的信息选择性的记录到指定的位置，如控制台、文件、数据库等。并且随时以开关的形式控制是否记录，灵活性好 \",\"Logback 模块\",\"logback-core: 核心模块\",\"logback-classic: log4j 改良版本，完整实现 slf4j API\",\"logback-access: 与Tomcat和Jetty等Servlet容器集成，提供HTTP访问日志功能\",\"使用：\",\"日志级别：TRACE < DEBUG < INFO < WARN < ERROR，默认DEBUG\",\"配置文件logback.xml\",\"Logger LOGGER = LoggerFactory.getLogger(\\\"Test.class\\\"); LOGGER.debug(\\\"log info......\\\"); LOGGER.info(\\\"log info......\\\"); LOGGER.trace(\\\"a = \\\" + a);\"]},\"356\":{\"h\":\"单元测试\",\"t\":[\"针对最小的功能单元，即Java中的方法，编写测试代码\",\"传统测试方法的缺陷：只能测试main，方法之间相互影响，无法得到测试结果的报告，无法实现自动化测试\",\"Junit单元测试框架 \",\"优点：可以灵活选择测试方法，自动生成测试报告\",\"使用： \",\"导入JUnit\",\"编写公共的，无参数无返回值测试方法，并加上@Test注解\",\"允许测试\",\"测试注解：@Before, @After, @BeforeClass, @AfterClass, @BeforeEach, @AfterEach, @BeforeAll, @AfterAll\"]},\"357\":{\"h\":\"XML\",\"t\":[\"可扩展标记语言（eXtensible Markup Language），一种数据表示格式\",\"纯文本，默认UTF-8编码，可嵌套，经常用于网络传输、配置文件\",\"XML格式： \",\"第一行文档声明 <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\",\"特殊字符：小于 &lt; 大于 &gt; 和号 &amp; 单引号 &apos; 引号 &quot;\",\"解释器忽略文本：<![CDATA[…内容…]]>\",\"XML约束：限定xml文件中的标签以及属性规则 \",\"DTD <!DOCTYPE 根标签名 PUBLIC/SYSTEM \\\"dtd文件名\\\" \\\"dtd文件位置\\\"> 不能约束具体数据类型\",\"SCHEME <根标签 xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns=\\\"http://xxx.com\\\" xsi:schemaLocation=\\\"http://xxx.xsd\\\"> 约束更严谨\",\"XML解析 \",\"SAX解析：一行一行解析\",\"DOM解析：整个文件解析，如JAXP、JDOM、Dom4j、jsoup\",\"Dom4j API\",\"XML检索——XPath \",\"使用路径表达式来定位元素节点或属性节点\",\"基于dom4j和jaxen\",\"selectSingleNode(exp), selectNodes(exp)\",\"四大检索方案： \",\"绝对路径：/根元素/子元素/孙元素 从根元素开始，一级一级向下查找，不能跨级\",\"相对路径: ./子元素/孙元素 从当前元素开始，一级一级向下查找，不能跨级\",\"全文检索: //name//father/son//father//grandson 直接全文搜索所有的name元素并打印\",\"属性查找: //@attr//ele[@attr]//ele//[@attr=val] 查找属性/含有指定值的属性的元素\"]},\"358\":{\"h\":\"设计模式\",\"t\":[\"工厂模式： \",\"对象通过工厂的方法创建返回\",\"可以为该对象进行加工和数据注入，实现类与类之间的解耦操作\",\"装饰模式 \",\"创建新类，包装原始类\",\"可以在不改变原有类的基础上，动态扩展一个类的功能\"]},\"359\":{\"h\":\"内存图\",\"t\":[\"JVM内存区：虚拟机栈、堆、方法区、本地方法栈、程序计数器 \",\"基本内存分配： \",\"方法区存放加载的类信息\",\"栈(栈帧): 局部变量表\",\"堆: new出来的对象实例 （如数组）\",\"两个引用指向同一对象\",\"两个引用指向同一对象\",\"栈内存中两个引用的地址值指向堆中同一块内存区\",\"利用引用修改堆中数据后，所有引用指向该内存区域的数据都会反映出来\",\"Java参数传递机制 \",\"引用类型参数传递\",\"无论基本类型还是引用类型，都是值传递\",\"基本类型传递的是本身的数据值\",\"引用类型的值是指向堆内存的某个地址\",\"两个对象内存图; \",\"方法区保存了类的信息，包括类名、成员变量、成员方法等\",\"堆中实际类对象的成员方法存的是方法区里类的成员方法引用\",\"集合存储内存图 \",\"数组/集合中存储的元素并不是对象本身，而是对象的地址\",\"静态常量内存图 \",\"子类继承内存图 \"]},\"360\":{\"c\":[\"Java\"]},\"361\":{\"h\":\"LockSupport 源码阅读\"},\"362\":{\"h\":\"概述\",\"t\":[\"LockSupport 是 Java 并发包中提供的一个工具类，用于支持线程的阻塞和唤醒操作，通常与其他同步工具一起使用，例如 ReentrantLock、Condition 等，以实现更复杂的线程协作。\",\"public class LockSupport { private LockSupport() {} private static final Unsafe U = Unsafe.getUnsafe(); private static final long PARKBLOCKER = U.objectFieldOffset(Thread.class, \\\"parkBlocker\\\"); private static final long TID = U.objectFieldOffset(Thread.class, \\\"tid\\\"); private static void setBlocker(Thread t, Object arg) { U.putReferenceOpaque(t, PARKBLOCKER, arg); } public static Object getBlocker(Thread t) { if (t == null) throw new NullPointerException(); return U.getReferenceOpaque(t, PARKBLOCKER); } static final long getThreadId(Thread thread) { return U.getLong(thread, TID); } ...... }\",\"LockSupport 提供了一种基于许可（permit）的机制，可以让线程在需要时阻塞等待许可，以及在其他线程发出信号时唤醒，它的无参构造器是私有的，只对外提供了一些公共静态方法。从源码中，可以看到 LockSupport 底层是基于 (Unsafe)[./Unsafe.md] 实现的，还需要借助 Unsafe 操作 Thread 对象的两个属性：parkBlocker阻塞对象和tid线程ID，其中线程的阻塞对象用于记录调用 park 方法而被阻塞的线程在哪个对象上进行了阻塞，主要是监测和调试目的。\",\"public class Thread implements Runnable { ... private final long tid; volatile Object parkBlocker; ... }\"]},\"363\":{\"h\":\"park\",\"t\":[\"当在一个线程里调用 park 后，线程就会阻塞住，直到以下三种情况任意一个发生，获得许可后才可继续运行：\",\"其他某个线程将当前线程作为目标调用 unpark\",\"其他某个线程中断当前线程\",\"该调用不合逻辑地(即毫无理由地)返回\",\"// 无限阻塞 public static void park() { U.park(false, 0L); } // 带阻塞对象的 public static void park(Object blocker) { Thread t = Thread.currentThread(); // 设置阻塞对象 setBlocker(t, blocker); // 线程阻塞在这里 U.park(false, 0L); // 恢复后清空线程的阻塞对象 setBlocker(t, null); } // 设定阻塞的最长等待时间（以及不带阻塞对象的重载） public static void parkNanos(Object blocker, long nanos) { if (nanos > 0) { Thread t = Thread.currentThread(); setBlocker(t, blocker); U.park(false, nanos); setBlocker(t, null); } } // 设定阻塞的最长绝对时间（以及不带阻塞对象的重载） public static void parkUntil(Object blocker, long deadline) { Thread t = Thread.currentThread(); setBlocker(t, blocker); U.park(true, deadline); setBlocker(t, null); }\"]},\"364\":{\"h\":\"unpark\",\"t\":[\"unpark 可以解除某个线程的阻塞状态，或者保证该线程下次 park 时不会阻塞直接放行。如果线程还没有启动则无法保证能正确放行。\",\"public static void unpark(Thread thread) { if (thread != null) U.unpark(thread); }\"]},\"365\":{\"h\":\"对比\",\"t\":[\"LockSupport 可以作为线程间通信的基础工具，用于实现等待/通知模式，相比最简单的 Thread.sleep()，park 阻塞线程可以由外部唤醒。而相比于依赖对象监视器的 wait/notify 通知机制，LockSupport 功能更加强大，更加灵活。\",\"特点\",\"park/unpark\",\"wait/notify\",\"锁资源\",\"和 sleep() 一样，不会释放锁资源\",\"会释放\",\"上下文\",\"任意上下文执行，不依赖于锁\",\"基于 Object、Monitor，需要在 synchronized 块中执行\",\"中断\",\"不抛出异常，但可以通过线程中断状态检查\",\"如果被中断会抛出异常，需要手动处理\",\"顺序\",\"许可机制，不需要考虑执行先后\",\"notify() 必须在 wait() 之后执行，否则线程可能一直阻塞\"]},\"366\":{\"h\":\"原理\",\"t\":[\"实现上，每个线程都由一个自己的 Parker 对象（C语言层面），包括：\",\"_counter: 计数器\",\"_cond: 条件变量\",\"_mutex: 互斥锁\",\"当执行 park 时，当前线程先检查 _counter 的值：\",\"如果为 0，线程进入 _cond 条件变量的队列阻塞，并重设 _counter = 0\",\"如果为 1，线程无序阻塞，继续运行\",\"当执行 unpark 时，当前线程先检查 _counter 的值：\",\"如果为 1，唤醒 _cond 条件变量中的线程，恢复其运行，重置 _counter = 0\",\"如果不为 1，设置 _counter = 1\",\"总结一下，park/unpark 底层类似一个二元信号量，可以把它想象成只有一个许可证的Semaphore，只不过这个信号量在重复执行 unpark() 的时候也不会再增加许可证，最多只有一个许可证。\"]},\"367\":{\"h\":\"参考\",\"t\":[\"https://pdai.tech/md/java/thread/java-thread-x-lock-LockSupport.html\"]},\"368\":{\"c\":[\"Java\"]},\"369\":{\"c\":[\"并发\"]},\"370\":{\"h\":\"Java 日志框架\"},\"371\":{\"h\":\"日志框架\"},\"372\":{\"h\":\"设计模式\",\"t\":[\"正式进入 Java 日志之前，先了解几个日志相关的设计模式。\"]},\"373\":{\"h\":\"门面模式\",\"t\":[\"门面模式（Facade Pattern）是一种结构型设计模式，也称外观模式。它提供了一个统一的接口，用于访问子系统中的一群接口，隐藏了系统的复杂性，使得子系统更加易用。\",\"在门面模式中，有三个主要角色：\",\"门面（Facade）： 提供了一个高层次的接口，该接口使用了系统中多个接口，它简化了客户端与子系统之间的交互，充当了客户端与子系统之间的中介者。门面模式的名字就来源于这个角色，门面通常是客户端与子系统之间的入口点。\",\"子系统（Subsystems）： 子系统是一组类或者模块，负责实际处理客户端的请求。子系统是门面模式的内部组成部分。\",\"客户端（Client）： 客户端是使用门面模式的类或者模块，它通过门面提供的简化接口与子系统进行交互，而不需要直接与子系统的类进行交互。\",\"门面模式\",\"例如小米推出的小爱同学智能音箱，我们只需要对小爱同学吼一嗓子，小爱同学再去操控对应的家电（冰箱/空调/洗衣机等），小爱同学就可以视为是一个门面模式的实例。\"]},\"374\":{\"h\":\"适配模式\",\"t\":[\"适配器模式（Adapter Pattern）也是一种结构型设计模式，通过非侵入的方式，允许接口不兼容的类之间进行协作，提高了系统的灵活性和可扩展性。例如各种插头、线缆的转接器。\",\"适配器模式通常涉及三个角色：\",\"目标接口（Target）： 客户端所期待的接口，适配器模式通过实现这个接口，使得客户端可以调用目标接口中定义的方法。\",\"适配器（Adapter）： 适配器是一个类，它实现了目标接口并包装了一个需要被适配的类的对象。适配器接受客户端的调用，然后将请求委派给被适配的对象。\",\"被适配者（Adaptee）： 需要被适配的类，它拥有客户端所需的功能，但是它的接口与客户端的期望接口不兼容。\"]},\"375\":{\"h\":\"桥接模式\",\"t\":[\"桥接模式（Bridge Pattern）也是一种结构型设计模式，它将抽象部分与实现部分分离，使得它们可以独立地变化。桥接模式通过将继承关系转化为组合关系，可以减少类的数量，降低系统的复杂度，提高系统的可维护性和可扩展性。\",\"在桥接模式中，有两个独立的维度，一个是抽象部分（Abstraction），另一个是实现部分（Implementor）。抽象部分包含高层次的抽象接口，而实现部分则包含低层次的具体实现。桥接模式通过将抽象部分与实现部分分离，使得它们可以独立地变化，而不会相互影响。\"]},\"376\":{\"h\":\"发展史\",\"t\":[\"接着介绍一下几种常见的 Java 日志框架的发展历史。\",\"Log4j\",\"瑞士程序员大佬 Ceki Gülcü 于 1996年开始开发 Log4j，在 JDK 1.4 之前几乎是 Java 日志组件的唯一选择，因此近乎成为了 Java 社区的日志标准。后被捐赠给 Apache 基金会，并于 2015 年宣布不再维护。\",\"JUL (Java.Util.Logging)\",\"2002年 Java 1.4 发布，Sun 推出了自己的日志库 Java.Util.Logging，基本是模仿了 Log4j 的实现（代码届的抄袭狗）。在 JUL 出来以前，Log4j 就已经成为一项成熟的技术，占据了很大优势，但从此开发者有了两种选择。\",\"JCL (Jakarta Commons Logging)\",\"两种日志的使用，导致程序编码的混乱，于是 Apache 推出了 Jakarta Commons Logging。JCL 定义了一套日志接口，内部也提供一个简单实现，支持运行时动态加载日志组件的实现，默认会优先使用 Log4j，其次是 JUL 实现，最后才会使用简单日志实现。\",\"Slf4J (Simple Logging Facade for Java) 和 Logback\",\"2006年，Log4j 之父 Ceki Gülcü 离开了 Apache，他觉得 JCL 接口设计不好，容易产生性能问题，于是先后开发了 SLF4J 日志门面，及其默认日志实现 Logback 两个项目。Slf4J 可以实现和多种日志组件无缝对接，并且功能和性能都非常优秀。\",\"Log4j2\",\"Apache 眼看有被 Logback 反超的势头，在2012年推出了了新的项目 Log4j2，Log4j2 几乎涵盖了 Logback 的所有特性，在性能上比 Logback 更好。同时 Log4j2 也搞了分离设计，包括日志接口 Log4j-api 和日志实现 Log4j-core。Log4j2 兼容 Slf4J，但并不兼容前任 Log4j。\",\"日志发展史\",\"Java主要的日志组件都已经出场了，一个组件是门面还是实现，要分清楚，这对以后项目里到底要引入哪些依赖，实际用的是哪个日志实现很重要！\"]},\"377\":{\"h\":\"进化史\"},\"378\":{\"h\":\"直接日志实现\",\"t\":[\"在初期大家用System.out -> STDOUT或System.error -> STDERR来打印日志，也就是只有分两类，而且无法定制，无法满足业务需求。后来 Java 应用开始选择日志实现组件进行日志记录，比如 Log4j、JUL。\",\"早期日志实现\"]},\"379\":{\"h\":\"接入 JCL\",\"t\":[\"有了多种日志实现之后，如果一个程序的多个模块使用了不同的日志工具，那么就会产生多份日志输出。为了解决这个问题，就出现了 JCL 这样的日志门面，统一 API 接口，运行时动态加载具体的日志实现（多态思想）。\",\"接入门面\"]},\"380\":{\"h\":\"接入 Slf4J\",\"t\":[\"之后又出现了 Slf4J，解决了 JCL 的一些重要缺陷（https://articles.qos.ch/classloader.html ）。同时为了抢夺 JCL 的市场，Slf4J 还提供了各种桥接组件，将对 JCL 的 API 调用重定向到自己的 API，再由SLF4J选择具体的日志实现。这下问题就变得有趣起来了，看看这些桥接包吧...\",\"各种桥接包\"]},\"381\":{\"h\":\"日志门面 - Slf4J\"},\"382\":{\"h\":\"处理依赖\",\"t\":[\"这么多年过去了，Java 日志门面最后以 Slf4J 一统天下而落幕，所以本文就讲讲 Slf4J，不管 JCL 了。先贴上一张 Slf4J 官网的绑定关系图（日志实现在 Slf4J 里称为 Provider/Binding）：\",\"接入slf4j\",\"对照这张图，可以得到常用的日志组件搭配如下：\",\"1. 仅依赖slf4j-api，此时无有效的日志实现，无法输出日志\",\"仅依赖slf4j-api\",\"2. Slf4J + Logback\",\"通过 logback.xml 配置参数，基于 Logback 打印日志。\",\"<dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>1.4.11</version> </dependency>\",\"logback-classic 以及下面 Slf4J 提供的桥接包都会间接依赖 slf4j-api，不过也可以显式声明指定版本以避免 Maven 的依赖传递产生问题。\",\"logback-classic\",\"3. Slf4J + Log4j\",\"通过 log4j.properties 配置参数，基于 Log4j 打印日志。\",\"<dependency> <!-- 对应 Log4j 1.x 的最后一个版本 1.2.17 --> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> <version>2.0.9</version> </dependency>\",\"Log4j 1.x 已经 EOL 了，因此会通过 Maven-relocation 到 slf4j-reload4j，reload4j 也是出自 Ceki Gülcü 之手，修复了 Log4j 的一些严重 bug。因此上面的依赖等同于下面：\",\"<dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-reload4j</artifactId> <version>2.0.9</version> </dependency>\",\"log4j\",\"4. Slf4J + JUL\",\"通过 logging.porperties 配置参数，基于 JDK 内置的简单日志系统打印日志。\",\"<dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-jdk14</artifactId> <version>2.0.9</version> </dependency>\",\"jdk-logging\",\"5. Slf4J + Simple\",\"通过 simplelogger.porperties 配置参数，基于 Slf4J 默认实现打印日志。\",\"<dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-simple</artifactId> <version>2.0.9</version> </dependency>\",\"slf4j-simple\",\"6. Slf4J + NOP\",\"默认丢弃所有的日志记录，不会打印日志。\",\"<dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-nop</artifactId> <version>2.0.9</version> </dependency>\",\"slf4j-nop\",\"7. Slf4J + Log4j2\",\"通过 log4j2.xml 配置参数，基于 Log4j2 的实现打印日志，是现今最普遍使用的搭配组合。本质上是 Slf4J -> Log4j-api -> Log4j-core。\",\"<dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-slf4j-impl</artifactId> <version>2.21.0</version> </dependency> <!-- 支持 Slf4J 2.x+ SPI 加载机制的桥接包 --> <dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-slf4j2-impl</artifactId> <version>2.21.0</version> </dependency>\",\"log4j2\",\"8. Slf4J + JCL\",\"最后还有一种情况图中也没有，即将所有日志委托给 JCL 门面处理，具体依赖见上面的 Slf4J桥接包 。\"]},\"383\":{\"h\":\"绑定原理\",\"t\":[\"下面分析一下 Slf4J 门面绑定日志实现的过程，特别说明，Slf4J 1.8 版本之前基于 COC (Convention over Configuration 约定大于配置)，利用 StaticLoggerBinder 初始化。但 1.8 版本之后利用的是 Java SPI (Service Provider Interface) 机制实现，我们后面就只看新版的实现原理。\",\"通常，我们会通过下面这条语句为类设置一个日志器。\",\"private static final org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(Main.class);\",\"进入 LoggerFactory，可以看到主要分为两步：\",\"通过 SLF4JServiceProvider 初始化并返回 ILoggerFacotry\",\"从工厂生产 Logger 并返回\",\"public static Logger getLogger(String name) { ILoggerFactory iLoggerFactory = getILoggerFactory(); return iLoggerFactory.getLogger(name); }\",\"接着依次进入方法：getILoggerFactory -> getProvider -> performInitialization -> bind 完成绑定行为。而在 findServiceProviders 中，利用 JDK 的 ServcieLoader#load 加载类路径特定目录下（META-INF/services/org.slf4j.spi.SLF4JServiceProvider）所有实现了 SLF4JServiceProvider 的 SPI 配置类，反射实例化后加入 providerList 返回。\",\"// org.slf4j.LoggerFactory#bind private final static void bind() { List<SLF4JServiceProvider> providersList = findServiceProviders(); if (providersList != null && !providersList.isEmpty()) { PROVIDER = providersList.get(0); PROVIDER.initialize(); INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION; } else { INITIALIZATION_STATE = NOP_FALLBACK_INITIALIZATION; } postBindCleanUp(); } // org.slf4j.LoggerFactory#findServiceProviders static List<SLF4JServiceProvider> findServiceProviders() { ClassLoader classLoaderOfLoggerFactory = LoggerFactory.class.getClassLoader(); // 负责扫描 SPI 配置类 ServiceLoader<SLF4JServiceProvider> serviceLoader = getServiceLoader(classLoaderOfLoggerFactory); List<SLF4JServiceProvider> providerList = new ArrayList(); Iterator<SLF4JServiceProvider> iterator = serviceLoader.iterator(); while(iterator.hasNext()) { safelyInstantiate(providerList, iterator); } return providerList; }\",\"回到 bind() 后默认取列表里第一个 SLF4JServiceProvider 执行 initialize() 得到 ILoggerFactory 实例，最后 getLogger() 获得 Logger 实例作为最终的日志器，具体怎么从日志工厂生产出 Logger 就由各个实现类去完成了。\",\"特殊的，如果找到了多个日志实现，具体绑定的是哪个依赖于类加载的顺序；如果 SPI 没有找到任何实现类，将使用 NOP_FallbackServiceProvider 兜底。\",\"注意\",\"Slf4J -> Log4j 2.x 的桥接包是 Log4j 官方提供的，没有跟进 Slf4J，依然使用的是 1.8 之前的 StaticLoggerBinder 实现。\",\"这时候如果手动引入了 Slf4J 1.8 之后的版本，将默认使用 NOP，而不是 Log4j2。\",\"补充：经查证 Log4j 提供了新的桥接包以支持 SPI 机制的 Slf4J\",\"<dependency> <groupId>org.apache.logging.log4j</groupId> <artifactId>log4j-slf4j2-impl</artifactId> <version>2.21.0</version> </dependency>\"]},\"384\":{\"h\":\"API\",\"t\":[\"Slf4J 的 API 十分简单：\",\"// 获取日志记录器 Logger log = LoggerFactory.getLogger(HelloWorld.class); // 五种级别日志 log.error(\\\"error\\\", ex); log.warn(\\\"warn\\\"); log.info(\\\"info\\\"); log.debug(\\\"debug：{}\\\", arg); log.trace(\\\"trace\\\"); // Fluent API log.atError().setMessage(\\\"Msg: {}\\\").addArgument(\\\"arg\\\").log();\"]},\"385\":{\"h\":\"日志实现 - Log4j2\",\"t\":[\"Slf4J 在日志门面中一统天下，而在日志实现方面，Logback 和 Log4j2 依然难分伯仲，不过这里就只简单聊聊 Log4j 了。\",\"log4j\",\"建议使用最新版本，2.17 以下有重大安全漏洞！详见：https://logging.apache.org/log4j/2.x/security.html\"]},\"386\":{\"h\":\"配置\",\"t\":[\"Log4j2 根据项目根目录下的 log4j2.xml 文件进行日志配置，详细的配置解析可以参考 Log4j2配置文件详解\"]},\"387\":{\"h\":\"Configuration\",\"t\":[\"<configuration status=\\\"WARN\\\" monitorInterval=\\\"30\\\"> ... </configuration>\",\"配置的根节点，status 控制 Log4j2 框架本身的日志级别，monitorInterval 控制每隔多少秒重新加载配置。\"]},\"388\":{\"h\":\"Appenders\",\"t\":[\"附加器，定义日志输出的目的地。Log4j2 支持多种输出源，例如：\",\"ConsoleAppender\",\"FileAppender\",\"AsyncAppender\",\"RandomAccessFileAppender\",\"RollingFileAppender\",\"<appenders> <!--输出到控制台--> <console name=\\\"Console\\\" target=\\\"SYSTEM_OUT\\\"> <!--输出日志的格式--> <PatternLayout pattern=\\\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\\\"/> </console> <!--输出到文件--> <File name=\\\"log\\\" fileName=\\\"log/test.log\\\" append=\\\"false\\\"> <PatternLayout pattern=\\\"%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n\\\"/> </File> <!-- 输出到文件，并自动归档旧日志--> <RollingFile name=\\\"RollingFileInfo\\\" fileName=\\\"${sys:user.home}/logs/info.log\\\" filePattern=\\\"${sys:user.home}/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log\\\"> <!--决定日志是否输出的过滤器--> <ThresholdFilter level=\\\"info\\\" onMatch=\\\"ACCEPT\\\" onMismatch=\\\"DENY\\\"/> <PatternLayout pattern=\\\"[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n\\\"/> <Policies> <!-- 基于时间的滚动策略 --> <TimeBasedTriggeringPolicy/> <!-- 基于文件大小的滚动策略 --> <SizeBasedTriggeringPolicy size=\\\"100 MB\\\"/> </Policies> </RollingFile> </appenders>\",\"过滤器的结果有三种：\",\"Accept：不再调用其他过滤器，执行 event\",\"Deny：忽略 event，将控制权交还给调用者\",\"Neutral：传递给其它过滤器，如果没有过滤器可以传递则执行 event\"]},\"389\":{\"h\":\"Loggers\",\"t\":[\"日志记录器，里面关联着所用的 Appenders。常见的有两种节点：\",\"Logger 可以有多个，针对不同的包名或类名配置不同的日志记录器\",\"Root 兜底的默认日志记录器\",\"<loggers> <logger name=\\\"org.springframework\\\" level=\\\"INFO\\\" additivity=\\\"false\\\"></logger> <logger name=\\\"包名\\\" level=\\\"级别\\\" additivity=\\\"是否传递给父级\\\"></logger> <root level=\\\"all\\\"> <appender-ref ref=\\\"Console\\\"/> <appender-ref ref=\\\"RollingFileInfo\\\"/> </root> </loggers>\"]},\"390\":{\"h\":\"日志级别\",\"t\":[\"日志框架会输出大于或等于指定等级的所有日志，优先级从高到低依次为：\",\"OFF：最具体，不记录\",\"FATAL：严重错误，将阻止应用继续；非常具体，数据很少\",\"ERROR：严重错误，可能可以恢复\",\"WARN：可能有害的消息\",\"INFO：信息性消息，突出强调应用程序的运行过程\",\"DEBUG：常规调试事件\",\"TRACE：不太具体，很多数据，通常捕获通过应用的流\",\"ALL：最不具体，用于打开所有日志记录\",\"日志级别\"]},\"391\":{\"h\":\"最佳实践\",\"t\":[\"SLF4J 门面 + Log4j2 实现 已经是Java应用中最为流行的日志技术方案。一方面，使用 SLF4J 门面可以统一日志处理方式，有利于项目日志的维护；另一方面又可以享受 Log4j2 的卓越性能。阿里巴巴 Java 开发手册“日志规约”部分的第一条便是强制依赖日志框架SLF4J的API。\",\"日志接入最佳实践\",\"每个类的日志实例声明为static final，这样每次日志打印时不用再创建日志对象，提升效率\",\"private static final Logger logger= LoggerFactory.getLogger(DeliveryConfigQueryAction.class);\",\"配合 Lombok 注解，更加方便清晰\",\"@Slf4j public class UserController { ... }\",\"编译后：\",\"public class UserController { private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(UserController.class); }\",\"日志打印设置为非阻塞模式\",\"采用非阻塞模式后，底层可以发挥 Log4j2 所采用的 Disruptor 高性能框架，在不同的场景下会有几倍到几十倍的日志写入性能提升。\",\"<Async name=\\\"ScribeAsyncAppender\\\" blocking=\\\"false\\\">\",\"日志打印采用占位符\",\"推荐使用占位符{}打印日志，这样只在日志级别满足打印需求时，才会进行参数的拼接，降低性能损耗。注意占位符的转义。\",\"logger.error(\\\"xxx error, id: {}\\\" , userId, e); logger.debug(\\\"File name is C:\\\\\\\\\\\\\\\\{}.\\\", \\\"file.zip\\\");\",\"避免重复打印日志，浪费磁盘空间\",\"<logger name=\\\"com.taobao.dubbo.config\\\" additivity=\\\"false\\\">\",\"异常信息应包括两类：案发现场信息和异常堆栈信息，并且禁止使用 Json 工具转换。如果不处理，那么通过关键字 throws 往上抛出。\",\"logger.error(\\\"inputParams: {} and errorMessage: {}\\\", 各类参数或者对象 toString(), e.getMessage(), e);\"]},\"392\":{\"h\":\"参考\",\"t\":[\"https://www.slf4j.org/manual.html\",\"https://reload4j.qos.ch/\",\"https://github.com/alibaba/p3c\",\"Slf4J源码解析\"]},\"393\":{\"c\":[\"Java\"]},\"394\":{\"c\":[\"日志\"]},\"395\":{\"h\":\"消息队列概述\"},\"396\":{\"h\":\"介绍\",\"t\":[\"消息队列是一种进程间通信或同一进程的不同线程间的通信方式，主要解决应用耦合、异步消息、流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。\",\"MQ\"]},\"397\":{\"h\":\"作用和问题\"},\"398\":{\"h\":\"异步处理\",\"t\":[\"比如从第三方平台中接收数据，数据中包含了很多的图片，将图片保存到云上耗时比较久，后续还有计算分数等耗时比较久的操作。如果我们通过消息队列异步处理后，主流程只需要100ms，其他的都通过异步的方式进行处理，可以提高系统性能，减少响应时间\",\"MQ异步处理\"]},\"399\":{\"h\":\"应用解耦\",\"t\":[\"当系统A中在订单创建后，需要通知B系统和C系统，然后B系统和C系统再做出相应的处理。\",\"MQ应用解耦1\",\"此时A系统是强依赖B系统和C系统，当B系统需要下线，或者需要重新加入D系统，则需要需改代码：\",\"MQ应用解耦2\",\"如此这样反复的添加和删除依赖的系统，使得系统难以维护，此时可以通过MQ进行解耦，使得A系统与需要关心订单创建事件的系统解耦开，不再关心下游有哪些系统，也不用受下游系统可用性的影响。\",\"MQ应用解耦3\"]},\"400\":{\"h\":\"流量削峰\",\"t\":[\"有一个活动页面，平时大概就50qps，但每天有一段高峰期流量能达到1000qps，但压测发现当前系统的处理能力为100qps。整个活动大部分时间流量都不太高，扩充太多的机器利用率又太低，这个时候可以通过MQ来进行削峰，均匀处理消息任务\",\"MQ流量削峰\"]},\"401\":{\"h\":\"新的问题\",\"t\":[\"虽然 MQ 能帮助解决很多服务之间的问题，但同时也带来了新的问题：\",\"系统可用性降低：例如消息丢失，MQ宕机等问题\",\"系统复杂性提高：需要保证无重复消费、消息丢失、消息传递顺序性等问题\",\"一致性问题：消费者没有正确消费消息的情况\"]},\"402\":{\"h\":\"MQ 协议\"},\"403\":{\"h\":\"JMS\",\"t\":[\"Java Message Service - Java消息服务的一套 API 规范。实现有 ActiveMQ、RocketMQ\",\"消息格式：StreamMessage, MapMessage, TextMessage, ObjectMessage, BytesMessage\",\"消息模型：P2P 点对点、PubSub 订阅模型\"]},\"404\":{\"h\":\"AMQP\",\"t\":[\"Advanced Message Queuing Protocol 高级消息队列协议，应用层协议的一个开放标准，统一了数据交互格式，是一种具有现代特征的二进制协议（多通道的、协商的、异步的、安全便携高效的）。支持跨平台、跨语言，兼容 JMS。实现有 RabbitMQ\",\"仅支持 byte[] 消息格式\",\"基于 Exchange 提供的路由算法，提供多种消息模型，例如 direct, fanout, topic, headers, system 等\"]},\"405\":{\"h\":\"架构\",\"t\":[\"AMQP架构\",\"Model 模型层：定义了一套命令，按功能分类，客户端应用可以利用这些命令来实现它的业务功能\",\"Session 会话层：负责将命令从客户端应用传递给服务器，再将服务器的应答传递给客户端应用，会话层为这个传递过程提供可靠性、同步机制和错误处理\",\"Transport 传输层：提供帧处理、信道复用、错误检测和数据表示\"]},\"406\":{\"h\":\"模型\",\"t\":[\"消息（Message）被发布者（Publisher）发送给交换机（Exchange），交换机类似邮局/邮箱。交换机将收到的消息按照路由规则分发到绑定的队列（Queue）中，最后 AMQP 代理会将消息投递给订阅了此队列的消费者（Consumer），或者消费者（Consumer）按需获取。\",\"AMQP模型\"]},\"407\":{\"h\":\"MQTT\",\"t\":[\"Message Queuing Telemetry Transport 消息队列遥测传输，IBM 开发的一个即时通讯协议，是一种基于轻量级代理的，发布/订阅模式的消息传输协议，运行在TCP协议栈之上，为其提供有序、可靠、双向连接的网络连接保证。该协议支持所有平台，几乎可以把所有联网物品和外部连接起来，被用来当做传感器和致动器的通信协议。\",\"特点：格式简洁、占用带宽小、移动端通信、PUSH、嵌入式系统。\",\"MQTT模型\",\"使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合。\",\"小型传输，开销很小（头部仅2Byte），协议交换最小化，以降低网络流量。\",\"使用 Last Will（遗言机制）和 Testament（遗嘱机制）特性处理相关客户端异常中断。\",\"支持三种消息发布方式： \",\"至多一次：消息发布完全依赖底层TCP/IP网络，可能发生消息丢失\",\"至少一次：确保消息到达，但消息重复可能会发生\",\"只有一次：确保消息到达一次，适用于计费/IM场景\"]},\"408\":{\"h\":\"STOMP\",\"t\":[\"Streaming Text Orientated Message Protocol 流文本定向消息协议，是一种为 MOM(Message Oriented Middleware，面向消息的中间件)设计的简单文本协议。STOMP提供一个可互操作的连接格式，允许客户端与任意 STOMP Broker 进行交互。\",\"Stomp协议\",\"Topic：即消息队列 MQ 的消息主题，一级消息类型，通过 Topic 对消息进行分类以及权限管理\",\"Destination：STOMP 协议里面的消息目的地，形式如 “/t/t1”，其中一级字符串 “t” 即为 Topic\",\"Instance ID：消息队列 MQ 的实例\",\"Client ID：发送端或订阅端的唯一标识，便于日志查询\"]},\"409\":{\"h\":\"XMPP\",\"t\":[\"Extensible Messaging and Presence Protocol 可扩展消息处理现场协议，基于 XML 的协议，多用于 IM即时消息以及在线现场探测，适用于服务器之间的准即时操作。核心是基于 XML 流传输，这个协议可能最终允许因特网用户向因特网上的其他任何人发送即时消息，即使其操作系统和浏览器不同。\",\"协议特点：通用公开、兼容性强、可扩展、安全性高，但 XML 编码格式占用带宽大\"]},\"410\":{\"h\":\"常见 MQ\",\"t\":[\"ActiveMQ：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性较低的概率丢失数据。但维护渐少\",\"Kafka：为大数据而生的消息中间件，吞吐量百万级，性能卓越，基于 Pull 模式消费消息，适合大量的数据/日志采集业务。\",\"RocketMQ：阿里巴巴参考 Kafka 用 Java 实现的 MQ，吞吐量十万级，消息 0 丢失，适用于可靠性要求很高的场景，例如电商、金融互联网等。但支持客户端语言不多\",\"RabbitMQ：在 AMQP 协议基础上基于 Erlang 开发的高并发主流 MQ，支持多种语言。适合中小型公司。\"]},\"411\":{\"h\":\"RabbitMQ\",\"t\":[\"RabbitMQ 是使用 Erlang 语言实现的，基于 AMQP 协议的消息中间件，由 RabbitMQ Technologies Ltd 开发并且提供商业支持，最初起源于金融系统。在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。\",\"rabbitmq\"]},\"412\":{\"h\":\"主要特性\",\"t\":[\"可靠性：提供了多种技术可以在性能和可靠性之间进行权衡，如持久性机制、投递确认、发布确认和高可用性机制\",\"灵活的路由：消息在到达队列之前，通过Exchange进行路由。支持自定义Exchange\",\"消息集群：在相同局域网中的多个 RabbitMQ 服务器聚合在一起，形成一个逻辑 Broker\",\"高可用：队列可以在集群中的机器上进行镜像，以确保在硬件问题下还保证消息安全\",\"多协议：支持多种消息队列协议, 如 STOMP、MQTT 等\",\"多语言：使用Erlang语言编写，客户端几乎支持所有常用语言\",\"管理界面： RabbitMQ有一个易用的web用户界面，使得用户可以方便的进行监控和消息的管理\",\"跟踪机制：RabbitMQ提供消息跟踪机制\",\"插件机制：提供了许多的插件来进行扩展，也支持自定义插件的开发\"]},\"413\":{\"h\":\"核心概念\",\"t\":[\"消息： \",\"消息头：一系列可选属性，也叫标签。例如 routing-key 路由键, priority 优先权，delivery-mode 持久性存储...\",\"消息体：不透明的 payload\",\"Producer：产生数据发送消息的程序\",\"Broker：消息队列服务器实体\",\"Virtual Host：虚拟主机，内部划分的独立域，包含一批交换机、消息队列和相关对象。彼此之间互不影响\",\"Exchange：负责接收和转发消息，并将消息推送到队列中\",\"Queue：负责存储消息，本质上是一个大的消息缓冲区\",\"Binding：绑定，基于路由键将消息队列和交换机关联（多对多）的路由规则\",\"Consumer：等待接收消息的程序\"]},\"414\":{\"h\":\"路由规则\",\"t\":[\"简单工作模式（一个生产者，一个消费者）和 工作队列模式（一个生产者，多个消费者）使用默认交换机。除此之外，RabbitMQ 中的消息必须先经过 Exchange，并通过 Binding 将 Exchange 和 Queue 绑定关联，然后指定一个 BindingKey 作为路由规则。Producer 发送消息时需要指定 RoutingKey，与 BindingKey 匹配时就会路由到对应的消息队列中。具体路由还依赖于交换器类型。如果路由不到，可能返回给 Producer 或直接丢弃。\",\"四种策略\",\"direct：把消息路由到那些 Bindingkey 与 RoutingKey 完全匹配的 Queue 中。常用于处理有优先级的任务\",\"fanout：把发送到该 Exchange 的消息路由到所有与它绑定的 Queue 中，不判断任何键，因此速度最快\",\"topic：将消息路由到 BindingKey 和 RoutingKey 模式匹配的队列中，其中 * 匹配一个单词，# 匹配零/多个单词\",\"headers：路由规则不依赖于路由键的匹配规则，而是根据发送的消息内容中的 headers 属性进行匹配，完全匹配才会路由\",\"exchange\"]},\"415\":{\"h\":\"Spring 整合\"},\"416\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency>\",\"RabbitAutoConfiguration 生效，给容器自动配置了很多类，例如 RabbitTemplate、AmqpAdmin、CachingConnectionFactory、RabbitMessagingTemplate\"]},\"417\":{\"h\":\"配置 RabbitMQ\",\"t\":[\"spring: rabbitmq: host: 49.123.73.45 port: 5672 username: guest password: guest virtual-host: / publisher-returns: true # 开启发送确认 template: mandatory: true # 只要抵达队列，优先回调 return confirm listener: simple: acknowledge-mode: manual # 使用手动确认模式\",\" @Configuration public class MyRabbitConfig { private RabbitTemplate rabbitTemplate; //告诉 spring 使用这个自定义的 RabbitTemplate @Primary @Bean public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) { this.rabbitTemplate = new RabbitTemplate(connectionFactory); rabbitTemplate.setMessageConverter(messageConverter()); initRabbitTemplate(); return rabbitTemplate; } // 使用 json 格式的序列化器，否则使用 jdk 的序列化器 @Bean public MessageConverter messageConverter() { return new Jackson2JsonMessageConverter(); } // 配置确认回调 public void initRabbitTemplate() { // 消息到达 broker 的回调 rabbitTemplate.setConfirmCallback(((correlationData, ack, cause) -> log.info(\\\"\\\\nbroker收到消息: \\\" + correlationData + \\\"\\\\tack: \\\" + ack + \\\"\\\\tcause： \\\" + cause))); // 消息投递队列失败的回调 rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routerKey) -> log.error(\\\"Fail Message [\\\" + message + \\\"]\\\" + \\\"\\\\treplyCode: \\\" + replyCode + \\\"\\\\treplyText:\\\" + replyText + \\\"\\\\texchange:\\\" + exchange + \\\"\\\\trouterKey:\\\" + routerKey)); } }\"]},\"418\":{\"h\":\"基本使用\",\"t\":[\"主启动类开启 @EnableRabbit (发送消息可以不添加，监听消息必须添加)\",\"使用 amqpAdmin 创建 Exchange、Queue、Binding\",\"@Autowired AmqpAdmin amqpAdmin; @Test public void createExchange() { // DirectExchange(String name, boolean durable, boolean autoDelete) amqpAdmin.declareExchange(new DirectExchange(\\\"hello-java-exchange\\\", true, false)); log.info(\\\"Exchange created\\\"); } @Test public void createQueue() { // Queue(String name, boolean durable, boolean exclusive, boolean autoDelete) amqpAdmin.declareQueue(new Queue(\\\"hello-java-queue\\\", true, false, false)); log.info(\\\"Queue created\\\"); } @Test public void createBinding() { // Binding(String destination, DestinationType destinationType, String exchange, String routingKey, Map<String, Object> arguments) Binding binding = new Binding(\\\"hello-java-queue\\\", Binding.DestinationType.QUEUE, \\\"hello-java-exchange\\\", \\\"hello.java\\\", null); amqpAdmin.declareBinding(binding); log.info(\\\"Binding Created\\\"); }\",\"使用 rabbitTemplate 发送消息\",\"@Autowired RabbitTemplate rabbitTemplate; @Test public void sendMsg() { Order entity = new Order(); entity.setName(\\\"orderReturnEntity-\\\" + i); rabbitTemplate.convertAndSend(\\\"a-exchange\\\", \\\"a-routingKey\\\", entity, new CorrelationData(UUID.randomUUID().toString())); log.info(\\\"消息发送完成\\\"); }\",\"CorrelationData 用于唯一确定一条消息。\",\"监听消息队列\",\"@Service @RabbitListener(queues = {\\\"hello-java-queue\\\"}) public class TestReceive { /** * 接收消息的方法 * @param message 原生消息详细信息，消息头+消息体 * @param content 消息内容 * @param channel 传输数据的通道 */ @RabbitHandler public void receiveMessage(Message message, Order content, Channel channel) throws InterruptedException { System.out.println(\\\"接收到消息 => \\\" + content); MessageProperties properties = message.getMessageProperties(); byte[] body = message.getBody(); Thread.sleep(3000); System.out.println(\\\"消息处理完成 => \\\" + content.getClass()); } }\",\"要想监听消息，主启动类必须添加@EnableRabbit\",\"监听方法必须放在@Component中\",\"@RabbitListener(queues={\\\"some-queue\\\"})放在类上，用于指定监听的队列\",\"@RabbitHandler放在方法上，用于重载处理不同类型的消息\"]},\"419\":{\"h\":\"消息确认\",\"t\":[\"一条消息从 Producer -> MQ Broker -> Consumer 的过程中都可能丢失。为了保证消息不丢失，可靠抵达，可以使用事务消息，但是性能会下降 250 倍，为此 RabbitMQ 引入了消息确认机制，用于保证消息的可靠到达。\"]},\"420\":{\"h\":\"ConfirmCallback\",\"t\":[\"消息从 Producer 成功到达 Exchange 的回调\",\"// 配置：rabbitmq.publisher-confirms=true // 定义 ConfirmCallback rabbitTemplate.setConfirmCallback(new RabbitTemplate.ConfirmCallback() { /** * @param correlationData 当前消息的唯一关联数据（消息的唯一id） * @param ack 消息是否成功收到 * @param cause 失败的原因 */ @Override public void confirm(CorrelationData correlationData, boolean ack, String cause) { if (ack) { // 接收成功 System.out.println(\\\"接收成功消息\\\" + cause); } else { // 接收失败 System.out.println(\\\"接收失败消息\\\" + cause); // 做一些处理，让消息再次发送。 } } });\",\"消息只要被 Broker 接收到就会执行 confirmCallback\",\"如果是 cluster 模式，需要所有 Broker 接收到才会调用 confirmCallback\",\"如果消息和队列是可持久化的，那么确认消息会在将该消息写入磁盘后发出\",\"被 Broker 接收到只能表示 message 已经到达服务器，并不能保证消息一定会被投递到目标 Queue 里\"]},\"421\":{\"h\":\"ReturnCallback\",\"t\":[\"消息从 Exchange 到 Queue 投递失败的回调。可以记录下详细的投递数据，定期的巡检或者自动纠错都需要这些数据。\",\"spring.rabbitmq.template.mandatory=true spring.rabbitmq.publisher-returns=true\",\"// 定义 ReturnCallback rabbitTemplate.setReturnCallback(new RabbitTemplate.ReturnCallback() { /** * @param message 投递失败的消息对象 * @param replyCode 回复的状态码 * @param replyText 回复的文本内容 * @param exchange 当时这个消息发给哪个交换机 * @param routingKey 当时这个消息用哪个路由键 */ @Override public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) { System.out.println(\\\"Fail Message[\\\" + message + \\\"]==>replyCode[\\\" + replyCode + \\\"]==>replyText[\\\" + replyText + \\\"]===>exchange[\\\" + exchange + \\\"]===>routingKey[\\\" + routingKey + \\\"]\\\"); } });\"]},\"422\":{\"h\":\"Consumer Ack\",\"t\":[\"Consumer 收到消息后的确认方式。\",\"# 可选值：none 不管处理成功与否；manual 手动处理确认；auto 根据消息处理逻辑是否抛出异常自动处理 spring.rabbitmq.listener.simple.acknowledge-mode=manual\",\"channel.basicAck(deliveryTag, false); // 签收，并指定是否累积确认。Broker 将移除确认的消息 channel.basicNack(deliveryTag, false, true); // 拒签，并指定是否批量、重入队 channel.basicReject(deliveryTag, false); // 拒签，并指定是否重入队\",\"默认自动 ack，消息被消费者收到，就会从 broker 的 queue 中移除\",\"如果消息一直没有被 ack/nack，Broker 认为此消息正在被处理，不会投递给别人，此时客户端断开，消息不会被 Broker 移除，会投递给别人\"]},\"423\":{\"h\":\"延迟队列\",\"t\":[\"消息被发送出去后，并不想让消费者立即拿到消息，而是等待指定时间后，消费者才拿到这个进行消费。RabbitMQ 中可以通过设置 TTL 和 死信路由实现延迟队列。\"]},\"424\":{\"h\":\"TTL\",\"t\":[\"通过设置 Queue 的 x-expires 属性或 Message 的 x-message-ttl 属性控制消息的生存时间，如果超时(两者同时设置以最先到期的时间为准)，则消息变为 Dead Letter，将被发送到死信交换机中。\",\"如果给队列设置 TTL，那么一旦消息过期就会被队列丢弃（到死信交换机）\",\"如果给消息设置 TTL，由于消息是否过期是在投递到消费者之前判定的，因此不一定会被立即丢弃。对于严重消息积压的情况，已过期消息可能还能存活较长时间\",\"不设置 TTL 则消息永不过期\",\"TTL 设为 0 则除非此时可以直接投递到消费者，否则该消息将被直接丢弃\"]},\"425\":{\"h\":\"死信\",\"t\":[\"通过设置 Queue 的 x-dead-letter-exchange 和 x-dead-letter-routing-key 两个属性，死信将被发送到指定的 DLX（Dead Letter Exchange 死信交换机）中，并重新设置关联的路由键，最终路由到对应的死信队列中（本质上和普通交换机、队列一样）。\",\"成为死信的情况\",\"队列消息长度达到限制\",\"消费者拒签消息，且不重新入队\",\"消息达到超时时间未被消费\"]},\"426\":{\"h\":\"RocketMQ\",\"t\":[\"阿里巴巴在2012年开源的分布式消息中间件，目前已经捐赠给 Apache 软件基金会，并于2017年9月25日成为 Apache 的顶级项目。作为经历过多次阿里巴巴双十一这种“超级工程”的洗礼并有稳定出色表现的国产中间件，以其高性能、低延时和高可靠等特性近年来已经也被越来越多的国内企业使用。\",\"RocketMQ模型\"]},\"427\":{\"h\":\"基本组件\",\"t\":[\"生产者组（Producer） 负责产生消息，RocketMQ 提供 同步、异步和单向 三种消息发送方式。\",\"消费者组（Consumer） 负责消费消息，消费者从消息服务器拉取信息并将其输入用户应用程序。\",\"名称服务器（NameServer） 用来保存 Broker 相关元信息并给 Producer 和 Consumer 查找信息，类似 Zookeeper。几乎无状态的，支持可以横向扩展。\",\"消息服务器（Broker） 消息存储中心，以及其它与消息相关的元数据，包括用户组、消费进度偏移量、队列信息等。分可读写的 Master 和只读不写的 Slave。\"]},\"428\":{\"h\":\"主要特性\",\"t\":[\"灵活可扩展性：天然支持集群，其核心组件都可以在没有单点故障的情况下进行水平扩展\",\"海量消息堆积：采用零拷贝原理实现超大的消息堆积能力\",\"顺序消息：支持按时间顺序消费，分全局有序和局部有序\",\"消息过滤：分服务器端过滤和消费端过滤。\",\"事务消息：支持事务消息\",\"消息回溯：支持重新消费已经被消费成功的消息，可以向前回溯，也可以向后回溯\"]},\"429\":{\"h\":\"Kafka\",\"t\":[\"Kafka是由 Apache 软件基金会开发的一个开源分布式流处理平台，由Scala和Java编写，用作消息队列和数据处理。\",\"Kafka模型\"]},\"430\":{\"h\":\"基本组件\",\"t\":[\"Broker 消息中间件处理节点，一个Kafka节点就是一个Broker，一个或者多个Broker可以组成一个Kafka集群\",\"Topic 每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。\",\"Partition 用于存放消息的队列，存放的消息都是有序的，同一主题可以分多个Partition。\",\"Producer 消息生产者，向Broker发送消息的客户端\",\"Consumer 消息消费者，从Broker读取消息的客户端，通过offset标识消息被消费的位置\",\"Consumer Group 每个Consumer属于一个特定的 Consumer Group，一条消息可以发送到多个不同的Consumer Group，但是同一个Consumer Group中只能有一个Consumer能够消费该消息\"]},\"431\":{\"h\":\"主要特性\",\"t\":[\"快速持久化：可以在 O(1) 的系统开销下进行消息持久化\",\"高吞吐：在一台普通的服务器上即可以达到10W/s的吞吐速率\",\"完全的分布式系统：Broker、Producer和Consumer都原生自动支持分布式，自动实现负载均衡\",\"零拷贝技术(zero-copy)：减少IO操作步骤，提高系统吞吐量\",\"支持同步和异步复制两种高可用机制\",\"丰富的消息拉取模型，支持数据批量发送和拉取\",\"数据迁移、扩容对用户透明\",\"无需停机即可扩展机器\",\"高效订阅者水平扩展、实时的消息订阅、亿级的消息堆积能力、定期删除机制\"]},\"432\":{\"h\":\"ActiveMQ\",\"t\":[\"ActiveMQ 也是由 Apache 出品，旨在为应用程序提供高效、可扩展、稳定、安全的企业级消息通信，它是一个完全支持 JMS1.1 和 J2EE 1.4 规范的 JMS Provider 实现，比如 JMX 管理、主从管理、消息组通信、消息优先级、延迟接收消息、虚拟接收者、消息持久化、消息队列监控等等。支持多种语言的客户端和协议，而且可以非常容易的嵌入到企业的应用环境中，并有许多高级功能。\",\"ActiveMQ模型\"]},\"433\":{\"h\":\"基本组成\",\"t\":[\"Broker\",\"Producer\",\"Consumer\",\"Topic\",\"Queue\",\"Message\",\"连接器 Connector ActiveMQ Broker 的主要作用是为客户端应用提供一种通信机制，为此 ActiveMQ 提供了一种连接机制，并用连接器来描述这种连接机制。连接器分两种：client-broker 之间的传输连接器（transport connector）、broker-broker 之间的网络连接器（network connector）。\"]},\"434\":{\"h\":\"主要特性\",\"t\":[\"服从JMS规范：完全支持JMS 1.1和J2EE 1.4规范，包括同步或异步的消息分发，一次和仅一次的消息分发，分布式事务消息、消息接收、订阅、持久化等等\",\"连接灵活性：ActiveMQ 提供了多种连接模式，例如 in-VM、TCP、SSL、NIO、UDP、多播、JGroups、JXTA等\",\"多协议：OpenWire、STOMP、REST、XMPP、AMQP等\",\"多语言：支持Java、C/C++、.NET、Perl、PHP、Python、Ruby等\",\"代理集群：多个 ActiveMQ代理可以组成一个集群来提供服务\",\"简单的管理：ActiveMQ 是以开发者思维被设计的，所以它并不需要专门的管理员，提供了简单又实用的管理特性。\",\"易于整合：ActiveMQ 可以通过 Spring 配置文件的方式很容易嵌入到Spring应用中，也可以轻松地与CXF、Axis等Web Service技术整合，以提供可靠的消息传递\"]},\"435\":{\"h\":\"MQ 对比\",\"t\":[\"特性\",\"RabbitMQ\",\"RocketMQ\",\"Kafka\",\"ActiveMQ\",\"开发语言\",\"Erlang\",\"Java\",\"Scala&Java\",\"Java\",\"客户端支持\",\"几乎所有常用语言\",\"Java、C++\",\"社区支持多语言 ｜ Java、C/C++、Python、PHP、Perl、.net等\",\"协议支持\",\"AMQP、XMPP、SMTP、SMTOP\",\"自定义协议，社区提供JMS\",\"自定义协议，社区提供了HTTP协议支持\",\"OpenWire、SMTOP、REST、XMPP、AMQP\",\"可用性\",\"高，基于主从架构实现高可用\",\"很高，分布式架构\",\"很高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用\",\"高，基于主从架构实现高可用\",\"集群\",\"支持\",\"支持\",\"支持\",\"支持\",\"负载均衡\",\"支持\",\"支持\",\"支持\",\"支持\",\"单机吞吐量\",\"万级\",\"十万级\",\"十万级\",\"万级\",\"topic数量对吞吐量的影响\",\"-\",\"topic达到几百/几千的级别后，吞吐量会有较小幅度的下降，在同等机器下，可以支撑大量的 topic\",\"topic从几十到几百个时候，吞吐量会大幅度下降，因为Kafka的每个Topic、每个分区都会对应一个物理文件，若需要支撑大规模的topic，则需要增加更多的机器资源\",\"-\",\"消息批量操作\",\"不支持\",\"支持\",\"支持\",\"支持\",\"消息推拉模式\",\"pull/push均支持\",\"pull/push均支持\",\"pull\",\"pull/push均支持\",\"消息可靠性\",\"可以做到不丢失\",\"可以做到不丢失\",\"可以做到不丢失\",\"有较低的概率丢失数据\",\"消息延迟\",\"微秒级 (最快)\",\"毫秒级\",\"毫秒级\",\"毫秒级\",\"持久化能力\",\"内存、文件，支持数据堆积，但影响生产速率\",\"磁盘文件\",\"磁盘文件，只要容量够，可以做到无限堆积\",\"内存、文件、数据库\",\"事务消息\",\"不支持\",\"支持\",\"不支持\",\"支持\",\"管理界面\",\"web管理界面\",\"web管理界面\",\"web管理界面\",\"web管理界面\"]},\"436\":{\"c\":[\"分布式\"]},\"437\":{\"c\":[\"MQ\"]},\"438\":{\"h\":\"MQ-Kafka\"},\"439\":{\"h\":\"简介\",\"t\":[\"Kafka是一个分布式的基于发布/订阅模式的消息队列，主要应用于大数据实时处理领域。同时也是一个开源的分布式事件流平台（Event Streaming Platform），用于高性能数据管道、流分析、数据集成和关键任务应用。\",\"更多关于消息队列的介绍见：消息队列概述\"]},\"440\":{\"h\":\"应用场景\",\"t\":[\"除了传统 MQ 的功能：流量削峰、应用解耦、异步通信之外，Kafka 还可以用于日志同步和实时计算等场景。\"]},\"441\":{\"h\":\"日志同步\",\"t\":[\"大规模分布式系统中的机器非常多而且分散在不同机房中，分布式系统带来的一个明显问题就是业务日志的查看、追踪和分析等行为变得十分困难，对于集群规模在百台以上的系统，查询线上日志很恐怖。为了应对这种场景统一日志系统应运而生，日志数据都是海量数据，通常为了不给系统带来额外负担一般会采用异步上报，这里Kafka以其高吞吐量在日志处理中得到了很好的应用。\",\"kafka日志同步\"]},\"442\":{\"h\":\"实时计算\",\"t\":[\"随着据量的增加，离线的计算会越来越慢，难以满足用户在某些场景下的实时性要求，因此很多解决方案中引入了实时计算。很多时候，即使是海量数据，我们也希望即时去查看一些数据指标，实时流计算应运而生。实时流计算有两个特点，一个是实时，随时可以看数据；另一个是流。下面是Kafka在某个典型实时计算系统中的应用。\",\"kafka实时计算\"]},\"443\":{\"h\":\"基础架构\",\"t\":[\"基本架构\",\"Producer：消息生产者，向 Kafka Broker 发消息的客户端。\",\"Consumer：消息消费者，向 Kafka Broker 取消息的客户端。\",\"Consumer Group：消费者组，由多个 Consumer 组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。任何消费者都属于某个消费者组，因此消费者组是逻辑上的一个订阅者。\",\"Broker：单个 Kafka 实例就是一个 Broker。一个 Kafka 集群由多个 Broker 组成，一个 Broker 里可以容纳多个 Topic。\",\"Topic：主题，可以理解为一个队列，生产者和消费者面向的都是一个 Topic\",\"Partition：分区。为了提高吞吐量，一个 Topic 可以分为多个 Partition 并分布在多个 Broker 上，每个 Partition 都是一个有序的队列。\",\"Replica：副本。为了提高可用性，每个 Partition 都有若干个副本，包括 Leader 和若干个 Follower\",\"Leader：Partition 的主节点，发送/消费数据都只针对 Leader\",\"Follower：Partition 的从节点，实时同步 Leader 数据，Leader 发生故障时进行选举。\"]},\"444\":{\"h\":\"安装使用\"},\"445\":{\"h\":\"配置\",\"t\":[\"kafka_2.13-3.5.1/config/server.properties\",\"#broker 的全局唯一编号，不能重复，只能是数字。 broker.id=0 #处理网络请求的线程数量 num.network.threads=3 #用来处理磁盘 IO 的线程数量 num.io.threads=8 #发送套接字的缓冲区大小 socket.send.buffer.bytes=102400 #接收套接字的缓冲区大小 socket.receive.buffer.bytes=102400 #请求套接字的缓冲区大小 socket.request.max.bytes=104857600 #kafka 运行日志(数据)存放的路径，可以配置多个，用\\\",\\\"分隔 log.dirs=/opt/module/kafka/datas #topic 在当前 broker 上的分区个数 num.partitions=1 #用来恢复和清理 data 下数据的线程数量 num.recovery.threads.per.data.dir=1 # 每个topic创建时的副本数，默认时1个副本 offsets.topic.replication.factor=1 #segment 文件保留的最长时间，超时将被删除 log.retention.hours=168 #每个 segment 文件的大小，默认最大 1G log.segment.bytes=1073741824\"]},\"446\":{\"h\":\"命令\",\"t\":[\"# 启动 zk ./zkServer.sh start # 启动kafka服务器 ./kafka-server-start.sh server.properties # 创建一个名为 firstTopic 的主题，需要指定broker、分区数、副本数 ./kafka-topics.sh --bootstrap-server localhost:9092 --create --partitions 1 --replication-factor 1 --topic firstTopic # 查看某个 broker 下的所有主题 ./kafka-topics.sh --bootstrap-server localhost:9092 --list # 生产者连接到broker，然后可以发送消息 ./kafka-console-producer.sh --bootstrap-server localhost:9092 --topic firstTopic # 消费者连接到broker，然后可以（从头）接收消息 ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic --from-beginning firstTopic\",\"停止 Kafka 集群时，一定要等 Kafka 所有节点进程全部停止后再停止 Zookeeper 集群。因为 Zookeeper 集群当中记录着 Kafka 集群相关信息，Zookeeper 集群一旦先停止， Kafka 集群就没有办法再获取停止进程的信息，只能手动杀死 Kafka 进程了。\"]},\"447\":{\"h\":\"监控工具\",\"t\":[\"EFAK 提供了管理查看 Kafka 数据的 Web 页面\",\"EFAK\"]},\"448\":{\"h\":\"Kraft\",\"t\":[\"Kafka 现有架构的元数据存储在 zookeeper 中，运行时动态选举 controller 进行 Kafka 集群管理。而新版的 kraft 模式架构不再依赖 zookeeper 集群， 而是用三台 controller 节点代替 zookeeper，元数据保存在 controller 中，由 controller 直接进行 Kafka 集群管理。\",\"Kraft\",\"优点：\",\"Kafka不再依赖外部框架，而是能够独立运行\",\"controller 管理集群时，不再需要从 zookeeper 中先读取数据，集群性能上升\",\"由于不依赖zookeeper，集群扩展时不再受到zookeeper读写能力限制\",\"controller 不再动态选举，而是由配置文件规定\"]},\"449\":{\"h\":\"Producer\"},\"450\":{\"h\":\"发送流程\",\"t\":[\"Kafka的消息是一个一个的键值对，键可以设置为默认的null。键有两个用途，可以作为消息的附加信息，也可以用来决定该消息被写入到哪个Partition。Topic的数据被分成一个或多个Partition，Partition是消息的集合，Partition是Consumer消费的最小粒度。\",\"Kafka通过将Topic划分成多个Partition，Producer将消息分发到多个本地Partition的消息队列中，每个Partition消息队列中的消息会写入到不同的Leader节点。\",\"kafka消息发送\",\"Producer生成消息发送到Broker，涉及到大量的网络传输，如果一次网络传输只发送一条消息，会带来严重的网络消耗。为了解决这个问题，Kafka采用批量发送的方式。在消息发送的过程中，涉及到了两个线程：main 线程和 sender 线程。\",\"生产者发送流程\",\"main 线程将外部数据发送至 RecordAccumulator 记录收集器(RA)，过程如下：\",\"拦截器做增加处理\",\"序列化器\",\"分区器将数据切片发送至 RA \",\"RA 是多个双端队列的本地缓冲区，队列的每个元素是一个批记录ProducerBatch \",\"createdMs：批记录的创建时间\",\"topicPartion：对应的Partition元数据\",\"recordsBuilder：暂存的实际数据\",\"RA 默认 32MB，每个队列默认 16KB \",\"sender 线程从 RA 中拉取消息发送到 Broker：\",\"当 RA 中的 ProducerBatch 满足数据累积到batch.size，或等待linger.ms后，将拉取数据组成 request \",\"batch.size默认16KB，适当增加可以提高吞吐量，但延迟加大\",\"linger.ms默认0ms，即无延迟立即发送\",\"经 Selector 发送至 Broker，并根据返回的 ack 做出应答： \",\"0: 生产的消息不需要等 broker 应答，传输效率高，但可靠性差\",\"1: 生产的消息要等 Leader 收到数据并确认，如果 Leader 宕机数据可能丢失\",\"-1/all: 默认值，生产的消息要等 Leader 和 ISR 所有节点的确认，可靠性最高，但不完全保证数据不丢失（如仅一台 Leader）\",\"消息发送异常将自动重试，次数为 Integer.MAX_VALUE;\",\"核心源码\",\"//Sender读取记录收集器，按照节点分组，创建客户端请求，发送请求 public void run(long now) { Cluster cluster = metadata.fetch(); //获取准备发送的所有分区 ReadCheckResult result = accumulator.ready(cluster, now); //建立到Leader节点的网络连接，移除还没有准备好的节点 Iterator<Node> iter = result.readyNodes.iterator(); while(iter.hasNext()) { Node node = iter.next(); if (!this.client.read(node, now)) { iter.remove(); } //读取记录收集器，返回的每个Leader节点对应的批记录列表，每个批记录对应一个分区 Map<Integer, List<RecordBatch>> batches = accumulator.drain(cluster, result.readyNodes, this.maxRequestSize, now); //以节点为级别的生产请求列表，即每个节点只有一个客户端请求 List<ClientRequest> requests = createProduceRequests(batches, now); for (ClientRequest request : requests) { client.send(request, now); } //这里才会执行真正的网络读写，比如将上面的客户端请求发送出去 this.client.poll(pollTimeout, now); } }\"]},\"451\":{\"h\":\"分区策略\",\"t\":[\"Producer发送消息到Broker时，会根据Paritition机制选择将消息存储到哪一个Partition。如果Partition机制设置合理，所有消息可以均匀分布到不同的Partition里，这样就实现了负载均衡。如果一个Topic对应一个文件，那这个文件所在的机器I/O将会成为这个Topic的性能瓶颈，而有了Partition后，不同的消息可以并行写入不同的Partition中，极大的提高了吞吐率。所谓的Partition机制也就是Poducer消息partitioning策略\"]},\"452\":{\"h\":\"DefaultPartitioner\",\"t\":[\"分三种情况：\",\"指定 partition 的情况下，直接取指定的partition值 public ProducerRecord(String topic, Integer partition, K key, V value)\",\"没有指定 partition 但有 key 的情况下，将 key 的 hash 值模上分区数取余得到partition值 public ProducerRecord(String topic, K key, V value)\",\"既没有指定 partition 也没有 key 的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），模上分区数取余得到 partition 值，也即 round-robin 轮询 public ProducerRecord(String topic, V value)\"]},\"453\":{\"h\":\"自定义分区器\",\"t\":[\"可以根据实际的业务需要，实现Partitioner接口，重写partition方法来自定义分区器。\",\"public class MyPartitioner implements Partitioner { /** * Compute the partition for the given record. * * @param topic The topic name * @param key The key to partition on (or null if no key) * @param keyBytes The serialized key to partition on( or null if no key) * @param value The value to partition on or null * @param valueBytes The serialized value to partition on or null * @param cluster The current cluster metadata */ @Override public int partition(String topic, Object key, byte[] keyBytes, Object value, byte[] valueBytes, Cluster cluster) { // 具体规则 return 0; } } // 指定分区器 properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, \\\"com.example.kafka.producer.MyPartitioner\\\");\"]},\"454\":{\"h\":\"Java客户端\"},\"455\":{\"h\":\"引入依赖\",\"t\":[\"<!-- 原生客户端 --> <dependency> <groupId>org.apache.kafka</groupId> <artifactId>kafka-clients</artifactId> <version>3.5.1</version> </dependency> <!-- SpringBoot 整合 --> <dependency> <groupId>org.springframework.kafka</groupId> <artifactId>spring-kafka</artifactId> </dependency>\"]},\"456\":{\"h\":\"原生客户端\",\"t\":[\"// 1. 配置参数 Properties properties = new Properties(); properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \\\"localhost:9092\\\"); properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, \\\"org.apache.kafka.common.serialization.StringSerializer\\\"); properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, \\\"org.apache.kafka.common.serialization.StringSerializer\\\"); // 2. 创建生产者 KafkaProducer<String, String> producer = new KafkaProducer<>(properties); for (int i = 0; i < 5; i++) { // 3. 发送消息（至 RecordAccumulator 缓冲区） // 3.1 默认异步 // 3.2 如果需要同步发送，对send()返回的Future调用get() ProducerRecord<String, String> producerRecord = new ProducerRecord<>(\\\"firstTopic\\\", \\\"hello-\\\" + i); producer.send(producerRecord, new Callback() { // 4. 处理响应 @Override public void onCompletion(RecordMetadata recordMetadata, Exception e) { if (e == null) { System.out.println(\\\"消息发送成功：topic: \\\" + recordMetadata.topic() + \\\", partition: \\\" + recordMetadata.partition()); } else { e.printStackTrace(); } } }); } // 5. 关闭生产者 producer.close();\"]},\"457\":{\"h\":\"SpringBoot 客户端\",\"t\":[\"配置\",\"spring.kafka.bootstrap-servers=localhost:9092 spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer\",\"KafkaTemplate\",\"@Resource KafkaTemplate<String, String> kafkaTemplate; @RequestMapping(\\\"produce\\\") public String produce(String msg) { kafkaTemplate.send(\\\"firstTopic\\\", msg); return \\\"Success\\\"; }\"]},\"458\":{\"h\":\"生产经验\"},\"459\":{\"h\":\"提高吞吐量\",\"t\":[\"// batch.size: 批次大小，默认16K properties.put(ProducerConfig.BATCH_SIZE_CONFIG, 16384); // linger.ms: 等待时间，默认0。建议 5-100ms properties.put(ProducerConfig.LINGER_MS_CONFIG, 1); // buffer.memory: RecordAccumulator 缓冲区大小，默认32M: properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 33554432); // compression.type: 压缩，默认 none，可配置 gzip/snappy/lz4/zstd properties.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, \\\"snappy\\\");\"]},\"460\":{\"h\":\"数据可靠\",\"t\":[\"Kafka 的数据可靠性是依赖 ACK 机制实现的。\",\"ack = 0，生产者发送过来的数据，不需要等数据落盘应答\",\"ack0\",\"发送完消息之后如果 Leader 挂了，那么数据就直接丢了。可靠性差，但效率最高。\",\"ack = 1，生产者发送过来的数据，Leader收到数据后应答。\",\"ack1\",\"Leader 收到消息后返回 ack，然后准备同步 Follower，此时 Leader 挂了，那么新 Leader 就丢失了该消息。可靠性中等，效率一般。一般用于传输普通日志，允许丢个别数据。\",\"ack = -1/all，生产者发送过来的数据，Leader 和 ISR 集合里面的所有节点收齐数据后应答。\",\"ack-1\",\"Leader 和所有 Follower 都接收到消息后才返回 ack，因此能够确保数据的可靠性。但无疑会增加响应的延迟，响应时间取决于最慢的机器。适合可靠性要求高的场景。\",\"进一步的，我们考虑一种特殊情况：Kafka同步时，某个Follower由于某种故障一直无法同步，那么此时消息响应就会一直停滞❓\",\"为了解决这一问题，Kafka 引入了 ISR：In-Sync Replica Set，即和 Leader 保持同步的 Leader+Follower 集合。如果某个Follower长时间未向Leader发送通信请求或同步数据，则该Follower将被踢出ISR，该时间阈值由replica.lag.time.max.ms参数设定，默认30s。这样就不用等长期联系不上或者已经故障的节点，因此在 ack = -1 的定义里是 Leader+ISR 全部收到数据后即返回响应。\",\"Broker的配置项min.insync.replicas(默认值为1)代表了正常写入生产者数据所需要的最少ISR个数，当ISR中的副本数量小于min.insync.replicas时，Leader停止写入生产者生产的消息，并向生产者抛出NotEnoughReplicas异常，阻塞等待更多的Follower赶上并重新进入ISR。被Leader应答的消息都至少有min.insync.replicas个副本，因此能够容忍min.insync.replicas - 1个副本同时宕机。\",\"根据上面的分析，我们可以得出：\",\"结论\",\"数据完全可靠条件 = ACK设为-1 + 分区副本大于等于2 + 应答最小副本数大于等于2\",\"后文如无特殊说明，统一 ack = -1\",\"// 设置acks properties.put(ProducerConfig.ACKS_CONFIG, \\\"all\\\"); // 重试次数retries，默认是int最大值，2147483647 properties.put(ProducerConfig.RETRIES_CONFIG, 3);\"]},\"461\":{\"h\":\"数据重复\",\"t\":[\"考虑一种情况，原先的 Leader 响应 ack 后挂了，而且该 ack 中途丢失了，那么 Producer 会再次发送这条消息。进而，新选举出的 Leader 将有两条同样的消息，导致消息重复的问题。\",\"数据重复\",\"数据传递语义\",\"至少一次 (AtLeastOnce) = ACK设为-1 + 分区副本大于等于2 + ISR里应答的最小副本数量大于等于2\",\"最多一次 (AtMostOnce) = ACK设为0\",\"其中，At Least Once 可以保证数据不丢失，但是不能保证数据不重复; At Most Once 可以保证数据不重复，但是不能保证数据不丢失。\",\"但是实际生产中，存在一些重要数据，要求既不能重复也不能丢失，这两者并不能解决我们的问题。Kafka 0.11版本以后，引入了一项重大特性: 幂等性和事务来实现“精确一次”的传递语义。\",\"幂等性\",\"在 Kafka 中指Producer不论向Broker发送多少次重复数据，Broker端都只会持久化一条，保证了不重复。\",\"精确一次 (Exactly Once): 幂等性 + 至少一次\",\"幂等性原理\",\"实现原理上，Kafka 把<PID, Partition, SeqNumber>作为判断重复数据的主键。相同主键的消息提交时，Broker只会持久化一条。其中 PID 是生产者ID，Kafka 每次重启都会重新分配；Partition 表示分区号；Sequence Number是单调自增的序列号。也因此，幂等性只能保证在单分区单会话内消息不重复。\",\"// 开启幂等性，默认即true开启 properties.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true);\",\"事务\",\"幂等性只能保证在单分区单会话内消息不重复，而为了保证多会话、多分区内的消息不重复，需要使用 Kafka事务。\",\"kafka事务\",\"开启事务，必须开启幂等性。且 Producer 必须先自定义一个全局唯一的 transactional.id\",\"由事务协调器负责接收 Producer 的 commit 消息，并持久化到一个特殊的事务Topic（记录事务状态）\",\"然后开始落盘实际的消息数据，完成后更新事务Topic\",\"Properties properties = new Properties(); // broker、序列化器等省略 // 开启幂等性 properties.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true); // 设置事务id properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \\\"transaction_id_0\\\"); KafkaProducer<String, String> producer = new KafkaProducer<>(properties); // 1. 初始化事务 producer.initTransactions(); // 2. 开启事务 producer.beginTransaction(); try { ProducerRecord<String, String> producerRecord = new ProducerRecord<>(\\\"firstTopic\\\", \\\"message\\\"); producer.send(producerRecord); // 3. 提交事务 producer.commitTransaction(); } catch (Exception e) { // 3. 出现异常回滚事务 producer.abortTransaction(); } finally { producer.close(); }\"]},\"462\":{\"h\":\"数据有序\",\"t\":[\"消费者在消费消息时，希望能够有序消费，而Kafka能够保证单分区内有序，至于多分区有序消费可以由具体的消费者去实现。\",\"Kafka保证单分区内的有序性类似 TCP 的滑动窗口，即控制发送窗口的大小，在窗口内通过排序保证消息的有序：\",\"Kafka在1.x版本之前保证数据单分区有序，需满足： max.in.flight.requests.per.connection=1 即限制发送窗口为1，只有上一个 request 收到 ack 后才能继续发送，尽管能保证有序，但效率低下\",\"Kafka在1.x及以后版本保证数据单分区有序，需满足: \",\"未开启幂等性（同上） max.in.flight.requests.per.connection=1\",\"开启幂等性 max.in.flight.requests.per.connection<=5 因为在新版 Kafka 启用幂等后，Broker 会缓存 Producer 发来的最近5个 request 的元数据，因此可以保证最近5个request的数据都是有序的。\",\"数据有序\",\"properties.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, \\\"5\\\");\"]},\"463\":{\"h\":\"Broker\"},\"464\":{\"h\":\"工作流程\"},\"465\":{\"h\":\"ZK 存储数据\",\"t\":[\"Kafka 基于 Zookeeper 存储相关数据，结构如图：\",\"kafka-zk-data-structure\",\"/kafka/brokers/topics 记录所有主题信息 \",\"如 /firstTopic/partitions/0/state 存储{\\\"controller_epoch\\\":21,\\\"leader\\\":1,\\\"version\\\":1,\\\" leader_epoch\\\":17,\\\"isr\\\":[1,0,2]}\",\"/kafka/brokers/ids 记录所有服务器 \",\"如{0,1,2}\",\"/kafka/controller 记录用于辅助选举 Leader 的 Broker \",\"例如{\\\"version\\\":1 ,\\\"brokerid\\\":0, \\\"timestamp\\\":\\\"1635907476\\\"}\"]},\"466\":{\"h\":\"整理流程\",\"t\":[\"Broker工作流程\",\"Broker 启动后自动注册到 ZK\",\"集群中的某个 Broker 成为 Controller，负责监听 brokers 节点变化，辅助 Leader 选举\",\"Controller 将节点的具体信息上传至 ZK\",\"其它 Controller 从 ZK 同步相关信息\",\"然后就可以开始接收/应答消息了\",\"当某个 Broker 宕机，Controller 会监听到节点变化。然后从 ZK 获取 ISR 按上述规则选举新 Leader，最后更新 Leader 及 ISR\"]},\"467\":{\"h\":\"重要参数\",\"t\":[\"参数\",\"描述\",\"replica.lag.time.max.ms\",\"Follower 向 Leader 发送请求的超时时间，超时将被踢出 ISR，默认30s\",\"auto.leader.rebalance.enable\",\"自动 Leader Partition 平衡，默认是 true\",\"log.segment.bytes\",\"Kafka 日志分块存储的大小，默认1G。\",\"log.index.interval.bytes\",\"kafka 每当写入了固定大小的日志，然后就往 index 文件里面记录一个索引，默认 4kb\",\"og.retention.hours/minutes/ms\",\"Kafka 中数据保存的时间，默认 7 天\",\"log.flush.interval.ms\",\"刷盘间隔，默认是 null，立刻刷盘\"]},\"468\":{\"h\":\"副本\"},\"469\":{\"h\":\"基本信息\",\"t\":[\"Kafka 的副本作用是提高数据的可靠性\",\"默认 1 个，增加副本可以提高可靠性，但也会增加存储空间、网络传输等\",\"副本分 Leader 和 Follower，仅 Leader 负责收发消息，Follower 负责同步\",\"分区中的所有副本统称 AR(Assigned Replicas)，AR = ISR (正常同步的) + OSR (延迟过多的)\",\"kafka主从同步\",\"同一Partition的Replica不应存储在同一个Broker上，因为一旦该Broker宕机，对应Partition的所有Replica都无法工作，这就达不到高可用的效果。为了做好负载均衡并提高容错能力，Kafka会尽量将所有的Partition以及各Partition的副本均匀地分配到整个集群上。\"]},\"470\":{\"h\":\"选举\",\"t\":[\"Kafka 集群中的第一个注册的 Broker 会成为 Controller，负责管理集群 Broker 的上下线、分区副本分配、Leader选举等工作。当 Leader 发生宕机后：\",\"Controller 会监测到节点变化\",\"选举规则：按 AR 列表的顺序，遍历到的第一个在 ISR 中存活的 Broker 将成为新 Leader\",\"Controller 负责更新 Leader 及 ISR\",\"其它 Controller 从 zk 同步数据\",\"各 Partition 的 Leader 负责维护 ISR 列表并将 ISR 的变更同步至ZooKeeper，被移出 ISR 的 Follower 会继续向 Leader 发 FetchRequest 请求，试图再次跟上 Leader 重新进入 ISR。通常只有 ISR 里的成员才可能被选为Leader。当Kafka中unclean.leader.election.enable配置为 true(默认false) 且 ISR 中所有副本均宕机的情况下，才允许ISR外的副本被选为Leader，但此时会丢失部分已应答的数据。\"]},\"471\":{\"h\":\"故障恢复\",\"t\":[\"每个Kafka副本对象都有两个重要属性：\",\"LEO (Log End Offset): 日志末端偏移，指向了副本日志中下一条消息的偏移量，即下一条消息的写入位置\",\"HW (High Watermark): 已同步消息标识，也叫高水位线（因其类似于木桶效应中短板决定水位高度，故取名高水位线） \",\"高水位线以下消息都是备份过的，消费者仅可消费各分区 Leader 高水位线以下的消息\",\"对于任何一个副本对象而言其 HW 值不会大于 LEO 值\",\"Leader 的 HW 值由 ISR 中的所有备份的 LEO 最小值决定\",\"Follower 在发送 FetchRequest 时会在 PartitionFetchInfo 中携带 Follower 的 LEO\",\"副本LEO\",\"Kafka 原本使用 HW 来记录副本的备份进度，HW 值的更新通常需要额外一轮 FetchRequest 才能完成，存在一些边缘案例导致备份数据丢失或导致多个备份间的数据不一致。Kafka 新引入了 Leader epoch 解决 HW 截断产生的问题，可参考：KIP-279: Fix log divergence between leader and follower after fast leader fail over\",\"如果 Follower 发生故障：\",\"Follower 会被临时踢出 ISR\",\"期间 Leader/Follower 继续接收数据\",\"等该 Folloewr 恢复后，会读取本地磁盘记录的 HW，将 log 文件中高于 HW 的部分截断，然后从 HW 开始重新从 Leader 那同步过来\",\"直到该 Follower 的 LEO >= 该分区的 HW 后就可以重新加入 ISR 了\",\"故障处理\",\"如果 Leader 发生故障：\",\"Controller 从 AR 中选出一个新 Leader\",\"其余 Follower 会先将各自的 log 文件高于HW的部分截断，然后从新的 Leader 那同步数据。这样可以保证多个副本之间的数据一致性，但并不保证数据不丢失/不重复\",\"kafka崩溃恢复\"]},\"472\":{\"h\":\"副本分配\",\"t\":[\"Kafka 默认会把分区的 Leader 均匀分散在各个机器上，实现负载均衡，不同分区的 AR 排列错开来提高可靠性\",\"kafka-reassign-partitions.sh 可以执行手动分配副本/增加副本因子\"]},\"473\":{\"h\":\"持久化\"},\"474\":{\"h\":\"消息结构\",\"t\":[\"record结构\",\"Kafka 中存储磁盘、网络传输、压缩的基本单元是消息集，其中包含若干条消息。一条完整的消息包含：\",\"offset：标识在 Partition 中的偏移量(逻辑值)\",\"message size：消息的大小\",\"RECORD： \",\"crc32：4B，crc32校验值，校验范围为magic至value之间\",\"magic：1B，消息格式版本号，0.9.X版本的magic值为0\",\"attributes：1B，消息的属性，总共占1个字节，低3位表示压缩类型：0为NONE、1为GZIP、2为SNAPPY、3为LZ4，其余位保留。\",\"key length：4B，表示消息的key的长度。-1表示key为空\",\"key：消息键，可选\",\"value length（4B）：4B，实际消息体的长度。-1表示value为空\",\"value：消息体，可选\"]},\"475\":{\"h\":\"日志结构\",\"t\":[\"在 Kafka 中，Topic 是逻辑上的概念，而 Partition 是物理上的概念，每个 Partition 对应一组日志文件，Producer 生产的数据会追加到日志文件末尾。\",\"持久化存储\",\"为防止日志文件过大导致数据定位效率低下，Kafka采取了分片和索引机制， 将每个 Partition 分为多个 Segment。每个 Segment 包括:\",\".log: 日志文件\",\".index: 偏移量索引，是保存相对 offset 的稀疏索引，log每写入4kb会新增一条索引项\",\".timeindex: 时间戳索引文件\",\"这些文件位于同一个文件夹下，该文件夹的命名规则为 topic名称+分区序号，例如firstTopic-0。分片日志名为当前 Segment 第一条消息的 offset。日志里存储的是序列化后的数据，可以通过： kafka-run-class.sh kafka.tools.DumpLogSegments --files ./00000000000000004096.index 查看日志具体信息。\"]},\"476\":{\"h\":\"索引定位\",\"t\":[\"Broker将每个Partition的消息追加到日志中，是以日志分段(Segment)为单位的。当Segment的大小达到阈值(默认是1G)时，会新创建一个Segment保存新的消息，每个Segment都有一个基准偏移量(baseOffset，每个Segment保存的第一个消息的绝对偏移量)，通过这个基准偏移量，就可以计算出每条消息在Partition中的绝对偏移量。 每个日志分段由数据文件和索引文件组，数据文件(文件名以log结尾)保存了消息集的具体内容，索引文件(文件名以index结尾)保存了消息偏移量到物理位置的索引。\",\"在查找某个 offset 的消息时（类似OS虚拟内存）：\",\"首先根据目标 offset 定位 Segment 分片日志文件\",\"从 index 索引文件中找到小于等于目标 offset 的最大 offset 对应的索引项\",\"根据索引项定位到 log 文件\",\"向后遍历找到目标记录\",\"日志索引\",\"核心代码\",\"@volatile var nextOffsetMetadata = new LogOffsetMetadata(activeSegment.nextOffset(), activeSegment.baseOffset, activeSegment.size.toInt); def append(messages:ByteBufferMessageSet, assignOffsets:Boolean) = { //LogAppendInfo对象，代表这批消息的概要信息，然后对消息进行验证 var appendInfo = analyzeAndValidateMessageSet(messages) var validMessages = trimInvalidBytes(messages, appendInfo) //获取最新的”下一个偏移量“作为第一条消息的绝对偏移量 appendInfo.firstOffset = nextOffsetMetadata.messageOffset if (assignOffsets) { //如果每条消息的偏移量都是递增的 //消息的起始偏移量来自于最新的”下一个偏移量“，而不是消息自带的顺序值 var offset = new AtomicLong(nextOffsetMetadata.messageOffset); //基于起始偏移量，为有效的消息集的每条消息重新分配绝对偏移量 validMessages = validMessages.validateMessagesAndAssignOffsets(offset); appendInfo.lastOffset = offset.get - 1 //最后一条消息的绝对偏移量 } var segment = maybeRoll(validMessages.sizeInBytes) //如果达到Segment大小的阈值，需要创建新的Segment segment.append(appendInfo.firstOffset,validMessages) //追加消息到当前分段 updateLogEndOffset(appendInfo.lastOffset + 1) //修改最新的”下一个偏移量“ if (unflushedMessages >= config.flushInterval) { flush() //如果没有刷新的消息数大于配置的，那么将消息刷入到磁盘 } } //更新日志的”最近的偏移量“，传入的参数一般是最后一条消息的偏移量加上1 //使用发需要获取日志的”最近的量“时，就不需要再做加一的操作了 private def updateLogEndOffset(messageOffset:Long) { nextOffsetMetadata = new LogOffsetMetadata(messageOffset, activeSegment.baseOffset,activeSegment.size.toInt) }\"]},\"477\":{\"h\":\"日志清理\",\"t\":[\"Kafka 中默认的日志保存时间为 7 天，可以通过调整参数 log.retention.hours/minutes/ms 修改保存时间。日志过期后有两种处理策略，由参数log.cleanup.policy的取值控制：\",\"delete: 删除日志，又分两个模式： \",\"默认基于时间，以 Segment 中所有记录的最大时间戳作为该文件的时间戳\",\"基于大小，默认删除最早的 Segment\",\"compact：压缩日志 \",\"对于相同 key 的不同 value 值，只保留最后一个版本。\",\"压缩后的offset可能是不连续的，导致按 key 取值错位。因此这种策略只适合特殊场景，比如消息的key是用户ID，value是用户的资料，通过这种压缩策略，整个消息集里就保存了所有用户最新的资料。\"]},\"478\":{\"h\":\"高效读写\",\"t\":[\"Kafka 本身是分布式集群，可以采用分区技术，并行度高\",\"读数据采用稀疏索引，可以快速定位要消费的数据\",\"索引条目的偏移量存储的是相对于“基准偏移量”的“相对偏移量” ，不是消息的“绝对偏移量”\",\"顺序写磁盘\",\"PageCache + 零拷贝技术，Broker应用层不关心存储的数据，发送不用走应用层，传输效率高\"]},\"479\":{\"h\":\"Consumer\"},\"480\":{\"h\":\"消费方式\",\"t\":[\"通常在消息系统中，消息的发送方式有两种，一种是Push，比如 Facebook 的 Scribe 和 Cloudera 的 Flume，由 Broker 主动发送消息，目标是尽可能以最快速度传递消息，但无法适应消费速率不同的消费者，可能导致拒绝服务以及网络拥塞。\",\"消费方式\",\"Kafka Consumer 采用的是另一种方式Pull，由 Consumer 主动从 Broker 拉取数据，可以适应不同速率的消费者，简化了 Broker 的设计，既可批量消费也可逐条消费，还能选择不同的提交方式从而实现不同的传输语义。缺点是可能会在没有数据时一直拉取空数据。\"]},\"481\":{\"h\":\"消费规则\",\"t\":[\"一个消费者可以消费多个分区数据\",\"消费者组（Consumer Group, CG），由多个具有相同 groupId 的 Consumer组成\",\"消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费\",\"如果组内消费者超过主题分区数量，那么会有一部分消费者处于空闲状态，不会接收任何消息。\",\"消费者组之间互不影响，任何消费者都属于某个消费者组，因此消费者组是逻辑上的一个订阅者\",\"ConsumerGroup\"]},\"482\":{\"h\":\"工作流程\"},\"483\":{\"h\":\"初始化\",\"t\":[\"首先得先介绍 Coordinator，每个消费者组对应的实现消费者组初始化和分区分配的协调器。每个 Kafka Broker 内部都有一个 Coordinator，消费者组选择的方式是：\",\"Coordinator节点号 = hash(groupId) % _consumer_offsets分区数 \",\"其中，_consumer_offsets 分区数默认是50。计算结果对应的 Broker 就是 Coordinator 所在节点。组内所有消费者提交 offset 时就往这个分区去提交offset。\",\"Consumer工作流程\",\"初始化流程：\",\"选出 Coordinator\",\"Coordinator 在组内选择一个消费者 Leader，并发送 Topic 信息\",\"Consumer Leader 指定消费方案，即消费的分区分配，并发回 Coordinator\",\"Coordinator 同步方案给所有 Consumer，就可以开始消费消息了\",\"每个消费者都会和 Coordinator 保持心跳（默认3s），一旦超过 session.timeout.ms (默认45s)，或者处理消息超过 max.poll.interval.ms (默认5min)，该消费者会被移除，并触发再平衡。\"]},\"484\":{\"h\":\"拉取消息\",\"t\":[\"Consumer::sendFetches 发送消费请求（拉取消息）\",\"ConsumerNetworkClient::send 从 Broker 请求消息\",\"成功拉取到消息存入 completedFetches 缓存队列中\",\"经反序列化、拦截器后交付消费者，做具体处理\",\"消费流程\"]},\"485\":{\"h\":\"消费参数\",\"t\":[\"参数名称\",\"描述\",\"group.id\",\"标记消费者所属的消费者组\",\"enable.auto.commit\",\"默认为 true，消费者自动周期性地向服务器提交偏移量。\",\"auto.commit.interval.ms\",\"默认5s，消费者向 Kafka 提交 offset 的频率\",\"offsets.topic.num.partitions\",\"默认50个，__consumer_offsets 的分区数\",\"heartbeat.interval.ms\",\"默认 3s，Kafka 消费者和 coordinator 之间的心跳时间。\",\"session.timeout.ms\",\"默认 45s，Kafka 消费者和 coordinator 之间连接超时时间。\",\"max.poll.interval.ms\",\"默认5min，消费者处理消息的最大时长。\",\"fetch.min.bytes\",\"默认 1Byte，消费者获取服务器端一批消息最小的字节数。\",\"fetch.max.wait.ms\",\"默认 500ms，获取一批数据的最大时间\",\"fetch.max.bytes\",\"默认50MB，消费者获取服务器端一批消息最大的字节数\",\"max.poll.records\",\"默认 500条，一次 poll 拉取数据返回消息的最大条数\"]},\"486\":{\"h\":\"Java客户端\"},\"487\":{\"h\":\"引入依赖\",\"t\":[\"<!-- 原生客户端 --> <dependency> <groupId>org.apache.kafka</groupId> <artifactId>kafka-clients</artifactId> <version>3.5.1</version> </dependency> <!-- SpringBoot 整合 --> <dependency> <groupId>org.springframework.kafka</groupId> <artifactId>spring-kafka</artifactId> </dependency>\"]},\"488\":{\"h\":\"原生客户端\",\"t\":[\"// 1. Kafka 属性配置 Properties properties = new Properties(); properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \\\"localhost:9092\\\"); properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName()); properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName()); // 配置消费者组，必须的 properties.put(ConsumerConfig.GROUP_ID_CONFIG, \\\"test\\\"); // 2. 创建消费者 KafkaConsumer<String, String> consumer = new KafkaConsumer<>(properties); // 可以指定消费的主题分区 // List<TopicPartition> topicPartitions = new ArrayList<>(); // topicPartitions.add(new TopicPartition(\\\"firstTopic\\\", 0)); // consumer.assign(topicPartitions); // 3. 注册要消费的主题 List<String> topics = new ArrayList<>(); topics.add(\\\"firstTopic\\\"); consumer.subscribe(topics); // 4. 拉取数据 while(true) { ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(1)); for (ConsumerRecord<String, String> record : records) { System.out.println(record); } }\"]},\"489\":{\"h\":\"SpringBoot 客户端\",\"t\":[\"配置\",\"spring.kafka.bootstrap-servers=localhost:9092 spring.kafka.consumer.group-id=test spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer\",\"KafkaListener\",\"@Configuration public class ConsumerListener { @KafkaListener(topics = \\\"firstTopic\\\") public void consume(String msg) { System.out.println(\\\"Kafka message: \\\" + msg); } }\"]},\"490\":{\"h\":\"Offset\",\"t\":[\"offset 表示分区中每条消息的位置信息，是一个单调递增且不变的值。Kafka 0.9 之前会把消费完的 offset 存入 ZK，容易导致网络传输开销大。\",\"而在 Kafka 0.9 中，offset 存入了 Broker 中的一个特殊主题 _consumer_offsets，该主题默认有 50个分区，里面采用 KV 方式存储数据，其中 key 是 group.id+topic+分区号，value 是当前 offset 的值。每隔一段时间，Kafka 内部会对这个 topic 进行 compact，也就是每个 group.id+topic+分区号仅保留最新数据。\",\"consumer-offset\",\"offset 由 Consumer 控制，Consumer会在消费完一条消息后递增该offset，也可以指定 offset 来重新消费一些消息。因为 offet 由 Consumer 控制，所以 Kafka Broker 是无状态的，不需要标记消息是否被消费过，也不需要通过Broker去保证同一个Consumer Group只有一个Consumer能消费某一条消息，因此也就不需要锁机制，从而保证了Kafka的高吞吐率。\"]},\"491\":{\"h\":\"自动提交\",\"t\":[\"两个参数：\",\"enable.auto.commit：是否自动周期性地向服务器提交偏移量，默认是 true\",\"auto.commit.interval.ms：自动提交 offset 的时间间隔，默认是 5s\"]},\"492\":{\"h\":\"手动提交\",\"t\":[\"自动提交虽然简单方便，但由于是基于时间提交的，开发者难以把握offset提交的时机。因此 Kafka 也提供了手动提交 offset 的API，分两种:\",\"commitSync(同步提交)：阻塞当前线程，直到提交成功，并且会自动失败重试\",\"commitAsync(异步提交)：提交 offset 更新请求后就开始消费下一批数据，没有失败重试\"]},\"493\":{\"h\":\"指定 offset\",\"t\":[\"当 Kafka 中偏移量不存在时（消费者组第一次消费/该数据已被删除），由配置auto.offset.reset决定消费策略：\",\"earliest：自动将偏移量重置为最早的偏移量，即CLI中的 --from-beginning\",\"latest：默认值，自动将偏移量重置为最新偏移量\",\"none：向消费者抛出异常。\",\"此外，Kafka 还支持指定时间设置 offset 来消费。\"]},\"494\":{\"h\":\"分区分配\",\"t\":[\"一个 Consumer Group 中有多个 Consumer，一个 topic 有多个 Partition组成，现在的问题是，到底由哪个consumer来消费哪个 partition的数据，即消费分区分配的问题。以下三种情况会触发分区分配：\",\"同一个 Consumer Group 内新增消费者\",\"消费者离开当前所属的 Group，包括 Shuts Down 或 Crashes\",\"订阅的主题新增Partition\",\"Kafka有四种主流的分区分配策略：Range、RoundRobin、Sticky、CooperativeSticky。通过配置参数partition.assignment.strategy指定，默认策略是 Range+ CooperativeSticky，可以同时使用多个分区分配策略。\"]},\"495\":{\"h\":\"Range\",\"t\":[\"Range 针对的是每个 topic：\",\"首先对同一个 topic 里面的分区按序号排序，并对消费者按字典序排序。例如7个分区，3个消费者，排序后的分区即 0,1,2,3,4,5,6；消费者即 C0,C1,C2\",\"通过分区数/消费者数来决定每个消费者应消费几个分区，余下的由前面几个消费者负责。\",\"存在的问题：如果只是针对 1 个 topic 而言，头部消费者多消费 1 个分区影响不大。但如果有 N 个 topic，那么头部消费者将多消费 N 个分区，容易产生数据倾斜。\",\"Range策略\"]},\"496\":{\"h\":\"RoundRobin\",\"t\":[\"RoundRobin 针对的是集群中所有Topic：\",\"把所有的 partition（TopicAndPartition） 和所有的 consumer 都列出来，按 hashcode 排序\",\"通过轮询算法来分配 partition 给各个消费者\",\"RoundRobin策略\",\"轮询策略如果同一消费组内，所有的消费者订阅的消息都是相同的，那么 RoundRobin 策略的分区分配会是均匀的。否则分区分配就不是完全的轮询分配，有可能会导致分区分配的不均匀。\"]},\"497\":{\"h\":\"Sticky\",\"t\":[\"粘性分配，尽量均衡的放置分区到消费者上面，在出现同一消费者组内消费者出现问题的时候，会尽量保持原有分配的分区不变化。\",\"而 CooperativeStickey 类似 Sticky，并支持渐进重平衡过程，这个过程可以允许消费者继续保留当前的分区不变化，然后等待协调者重新分配增量的分区。\"]},\"498\":{\"h\":\"生产经验\"},\"499\":{\"h\":\"消费者事务\",\"t\":[\"生产中的问题：\",\"重复消费: 已经消费了数据，但 offset 没提交\",\"漏消费: 先提交 offset 后消费，可能会造成数据的漏消费\",\"如果想完成 Consumer 端的精准一次性消费，那么需要 Kafka 消费端将消费过程和提交 offset 过程做原子绑定。此时我们需要将Kafka的offset保存到支持事务的自定义介质(比如 MySQL)。TODO\"]},\"500\":{\"h\":\"数据积压\",\"t\":[\"主要目的是要提高消费者的吞吐量，例如：\",\"增加 Topic 的分区数，并且同时提升消费组的消费者数量，而这缺一不可\",\"如果是下游的数据处理不及时，可以提高每批次拉取的数量，减少网络浪费\"]},\"501\":{\"c\":[\"分布式\"]},\"502\":{\"c\":[\"MQ\"]},\"503\":{\"h\":\"MyBatis 深入学习\",\"t\":[\"MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。\"]},\"504\":{\"h\":\"API 使用\"},\"505\":{\"h\":\"依赖\",\"t\":[\"<dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.13</version> </dependency> <!-- 整合 SpringBoot --> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>3.0.2</version> </dependency>\"]},\"506\":{\"h\":\"配置\",\"t\":[\"1. mybatis-config.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql://192.168.137.1:3306/mybatis\\\"/> <property name=\\\"username\\\" value=\\\"${username}\\\"/> <property name=\\\"password\\\" value=\\\"${password}\\\"/> </dataSource> </environment> </environments> <mappers> <mapper resource=\\\"org/mybatis/example/BlogMapper.xml\\\"/> </mappers> </configuration>\",\"如果整合 SpringBoot，也可以在 application.yml 中配置\",\"spring: datasource: url: jdbc:mysql://192.168.137.1:3306/mybatis username: ${username} password: ${password} driver-class-name: com.mysql.cj.jdbc.Driver mybatis: mapper-locations: classpath:com.chanper.mapper/*Mapper.xml\",\"2. UserMapper\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"com.chanper.mapper.UserMapper\\\"> <select id=\\\"selectUserById\\\" resultType=\\\"com.chanper.pojo.User\\\"> select * from tb_user where id = #{id} </select> </mapper>\",\"// 添加 Mapper 注解自动注入 SpringBoot 容器 @Mapper public interface UserMapper { User selectUserById(Integer id); }\"]},\"507\":{\"h\":\"使用\",\"t\":[\"@Slf4j public class Main { // 建议设为静态/单例，应用运行期间应一直存在 private static SqlSessionFactory sqlSessionFactory; static { try { // 也可以用 Java API 构建 SqlSessionFactory，但并不推荐 String resource = \\\"com/chanper/mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); } catch (IOException e) { log.debug(\\\"MyBatis Resource Error...\\\"); } } public static void main(String[] args) throws IOException { // 从 SqlSessionFactory 获取 SqlSession，使用完应及时关闭（非线程安全） try (SqlSession session = sqlSessionFactory.openSession()){ UserMapper mapper = session.getMapper(UserMapper.class); User user = mapper.selectUserById(1); log.debug(\\\"{}\\\", user); } } }\",\"如果是 SpringBoot 方式：\",\"@SpringBootApplication @Slf4j public class MyBatisSpringApplication { public static void main(String[] args) { ConfigurableApplicationContext context = SpringApplication.run(MyBatisSpringApplication.class, args); UserMapper mapper = (UserMapper) context.getBean(\\\"userMapper\\\"); User user = mapper.selectUserById(2); log.debug(\\\"{}\\\", user); } }\"]},\"508\":{\"h\":\"SqlSession\",\"t\":[\"相比 JDBC，MyBatis 大幅简化了代码并保持简洁、易理解和易维护。SqlSession 是使用 MyBatis 的主要接口，包含了所有执行语句、提交或回滚事务以及获取映射器实例的方法。\",\"SqlSessionFactoryBuilder 基于 XML/注解/Java配置代码 => SqlSessionFacotry\",\"SqlSessionFactory 基于各种方法 => SqlSession \",\"支持事务/自动提交\",\"隔离级别\",\"连接配置\",\"执行器类型\",\"SqlSession 提供的 API 方法可以分为以下六类。\"]},\"509\":{\"h\":\"语句执行\",\"t\":[\"用于执行定义在 SQL 映射 XML 文件中的 CRUD 语句，接受语句的 ID 和参数对象(可选)。\",\"<T> T selectOne(String statement, Object parameter) <E> List<E> selectList(String statement, Object parameter) <T> Cursor<T> selectCursor(String statement, Object parameter) <K,V> Map<K,V> selectMap(String statement, Object parameter, String mapKey) int insert(String statement, Object parameter) int update(String statement, Object parameter) int delete(String statement, Object parameter)\"]},\"510\":{\"h\":\"映射器\",\"t\":[\"<T> T getMapper(Class<T> type) 可以用于获取指定的 mapper，mapper 可以自动将接口方法名匹配到对应的语句 ID，相比上面的传递语句 ID 和参数来执行 SQL 的方式更加简洁高效，且符合类型安全。\",\"另外高版本的 MyBatis 提供了一系列映射器的注解，例如 @One、@Many、@Insert等等，但并不实用，功能也不完善，就不学了吧...\"]},\"511\":{\"h\":\"事务控制\",\"t\":[\"四个用于控制事务作用域的方法，不过如果设置了 autocommit 或者使用外部事务管理器，比如 Spring-transaction，那么以下方法无效。\",\"void commit() void commit(boolean force) void rollback() void rollback(boolean force)\"]},\"512\":{\"h\":\"本地缓存\",\"t\":[\"MyBatis 使用两种缓存：\",\"local cache：本地缓存，每个 session 对应一个，修改/提交/回滚/关闭时自动清空\",\"second level cache：二级缓存，每个 mapper 对应一个，多个 session 共享，默认是关闭的，见 配置cache\",\"void clearCache() 可以用于清空本地缓存。\"]},\"513\":{\"h\":\"刷写批量更新\",\"t\":[\"当 Session 配置为 Executor.BATCH 时，执行器会批量执行所有更新语句。List<BatchResult> flushStatements() 方法可以刷新缓存立即执行。\"]},\"514\":{\"h\":\"确保关闭\",\"t\":[\"void close() 关闭 session，为了确保 Session 妥善关闭，建议使用 try-with-resource 语句。\"]},\"515\":{\"h\":\"动态 SQL\",\"t\":[\"在 Java 代码中动态生成 SQL 代码确实是一场噩梦，MyBatis 提供了 SQL 类用于生成动态 SQL 语句，但这玩意是给人用的吗，代码和数据库耦合有点重吧，我为什么不用参数传递呢...\",\"给个例子大家自己看看吧\",\"public String selectPersonSql() { return new SQL() .SELECT(\\\"P.ID\\\", \\\"A.USERNAME\\\", \\\"A.PASSWORD\\\", \\\"P.FULL_NAME\\\", \\\"D.DEPARTMENT_NAME\\\", \\\"C.COMPANY_NAME\\\") .FROM(\\\"PERSON P\\\", \\\"ACCOUNT A\\\") .INNER_JOIN(\\\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\\\", \\\"COMPANY C on D.COMPANY_ID = C.ID\\\") .WHERE(\\\"P.ID = A.ID\\\", \\\"P.FULL_NAME like #{name}\\\") .ORDER_BY(\\\"P.ID\\\", \\\"P.FULL_NAME\\\") .toString(); } public String insertPersonSql() { return new SQL() .INSERT_INTO(\\\"PERSON\\\") .INTO_COLUMNS(\\\"ID\\\", \\\"FULL_NAME\\\") .INTO_VALUES(\\\"#{id}\\\", \\\"#{fullName}\\\") .toString(); } public String updatePersonSql() { return new SQL() .UPDATE(\\\"PERSON\\\") .SET(\\\"FULL_NAME = #{fullName}\\\", \\\"DATE_OF_BIRTH = #{dateOfBirth}\\\") .WHERE(\\\"ID = #{id}\\\") .toString(); }\"]},\"516\":{\"h\":\"配置文件\"},\"517\":{\"h\":\"结构\",\"t\":[\"配置文件\"]},\"518\":{\"h\":\"Properties\",\"t\":[\"属性配置，可以实现 Mybatis 配置和数据库配置分离，提高实际生产中的安全性。\",\"<properties resource=\\\"org/mybatis/example/config.properties\\\" url=\\\"...\\\"> <property name=\\\"password\\\" value=\\\"123456\\\"/> </properties> <dataSource type=\\\"POOLED\\\"> ... <property name=\\\"password\\\" value=\\\"${password}\\\"/> </dataSource>\",\"属性优先级:\",\"首先读取在 properties 元素体内指定的属性。\",\"然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。\",\"最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。\",\"SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);\"]},\"519\":{\"h\":\"Settings\",\"t\":[\"MyBatis 运行时行为的设置项，具体的设置名、含义、有效值、默认值见 官方文档\",\"<settings> <!-- 允许 JDBC 支持自动生成主键 --> <setting name=\\\"useGeneratedKeys\\\" value=\\\"false\\\"/> <!-- 是否开启驼峰命名自动映射 --> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"false\\\"/> ... </settings>\"]},\"520\":{\"h\":\"typeAliases\",\"t\":[\"<typeAliases> <typeAlias alias=\\\"Author\\\" type=\\\"domain.blog.Author\\\"/> <package name=\\\"domain.blog\\\"/> </typeAliases>\",\"类型别名，可以为 Java 类型设置别名，避免书写冗余的全限定名。也可以指定包名，自动将 Java Bean 首字母小写的非限定类目作为它的别名，除非使用了 @Alias 注解指定了别名。\",\"@Alias(\\\"author\\\") public class Author { ... }\"]},\"521\":{\"h\":\"typeHandlers\",\"t\":[\"MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以某种方式转换成 Java 类型。例如：\",\"DateTypeHandler：JDBC 的 TIMESTAMP -> java.util.Date\",\"EnumOrdinalTypeHandler: JDBC 的 NUMERIC/DOUBLE -> Java 的枚举序号\",\"也可以自己实现 TypeHandler 接口，或继承 BaseTypeHandler 来自定义类型处理器，以支持非标准类型的转换。\",\"<typeHandlers> <!-- 指定处理的 Java 类型和关联的 JDBC 类型 --> <typeHandler handler=\\\"com.chanper.xxx\\\" javaType=\\\"String\\\" jdbcType=\\\"VARCHAR\\\"/> <!-- 指定包查找类型处理器 --> <package name=\\\"com.chanper\\\"/> </typeHandlers>\"]},\"522\":{\"h\":\"objectFactory\",\"t\":[\"<objectFactory type=\\\"org.mybatis.example.ExampleObjectFactory\\\"> <property name=\\\"someProperty\\\" value=\\\"100\\\"/> </objectFactory>\",\"MyBatis 每次创建结果对象的新实例时，都会使用一个对象工厂（ObjectFactory）来完成实例化工作。对象工厂默认只是调用无参/有参构造方法来实例化目标类，当然也可以通过继承 DefaultObjectFactory 自定义实例化方式。\",\"public interface ObjectFactory { default void setProperties(Properties properties) { } <T> T create(Class<T> type); <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs); <T> boolean isCollection(Class<T> type); }\"]},\"523\":{\"h\":\"plugins\",\"t\":[\"<plugins> <plugin interceptor=\\\"org.mybatis.example.ExamplePlugin\\\"> <property name=\\\"someProperty\\\" value=\\\"100\\\"/> </plugin> </plugins>\",\"MyBatis 允许拦截方法调用，执行额外的逻辑，可以实现 Interceptor 接口来创建插件。允许拦截的方法调用包括：\",\"Executor # update, query, flushStatements, commit, rollback, getTransaction, close, isClosed\",\"ParameterHandler # getParameterObject, setParameters\",\"ResultSetHandler # handleResultSets, handleOutputParameters\",\"StatementHandler # prepare, parameterize, batch, update, query\",\"@Intercepts({@Signature( type= Executor.class, method = \\\"update\\\", args = {MappedStatement.class,Object.class})}) public class ExamplePlugin implements Interceptor { private Properties properties = new Properties(); @Override public Object intercept(Invocation invocation) throws Throwable { Object returnObject = invocation.proceed(); return returnObject; } @Override public void setProperties(Properties properties) { this.properties = properties; } }\"]},\"524\":{\"h\":\"environments\",\"t\":[\"MyBatis 支持创建多个运行环境，用于不同生产环境的配置。不过每个 SqlSessionFactory 只能选择一种环境，也就是说，想要连接多个数据库需要创建多个 SqlSessionFactory。\",\"<!-- 配置环境，并指定默认环境 --> <environments default=\\\"development\\\"> <!-- 指定环境 id --> <environment id=\\\"development\\\"> <transactionManager type=\\\"JDBC\\\"> <property name=\\\"...\\\" value=\\\"...\\\"/> </transactionManager> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"${driver}\\\"/> <property name=\\\"url\\\" value=\\\"${url}\\\"/> <property name=\\\"username\\\" value=\\\"${username}\\\"/> <property name=\\\"password\\\" value=\\\"${password}\\\"/> </dataSource> </environment> </environments>\"]},\"525\":{\"h\":\"transactionManager\",\"t\":[\"MyBatis 支持两种事务管理器：\",\"JDBC：直接使用了 JDBC 的提交和回滚功能，依赖于从数据源获得的连接来管理事务作用域。\",\"MANAGED：不对连接执行提交和回滚，而是交由容器来管理事务的生命周期。\",\"如果应用使用 Spring 框架，那么不需要配置，Spring 会使用自带的事务管理器覆盖此配置。Spring 事务管理详解：https://xchanper.github.io/coding/SpringTransaction.html\"]},\"526\":{\"h\":\"dataSource\",\"t\":[\"MyBatis 使用标准的 JDBC 数据源接口来配置连接对象的资源。有三种数据源类型：\",\"UNPOOLED：非池化，每次请求都打开、关闭一个新连接\",\"POOLED：使用数据库连接池，提高并发 Web 应用的响应速度\",\"JNDI：为了支持 EJB、应用服务器这类容器的外置数据源\",\"通常只需要配置 driver 驱动器、url 链接、username DB用户名、password DB密码，以及一些连接池的参数就够用了。\"]},\"527\":{\"h\":\"databaseIdProvider\",\"t\":[\"MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。\"]},\"528\":{\"h\":\"mappers\",\"t\":[\"告诉 MyBatis 去查找定义 SQL 映射语句的 mapper 文件，可以使用相对类路径的资源引用、完全限定资源定位符、类名、包名等。\",\"<mappers> <!-- 资源引用 --> <mapper resource=\\\"com/chanper/mapper/UserMapper.xml\\\"/> <!-- url --> <mapper url=\\\"file:///var/mappers/AuthorMapper.xml\\\"/> <!-- 类名 --> <mapper class=\\\"org.mybatis.builder.AuthorMapper\\\"/> <!-- 包名 --> <package name=\\\"org.mybatis.builder\\\"/> </mappers>\"]},\"529\":{\"h\":\"Mapper\",\"t\":[\"MyBatis 的 Mapper 映射器十分强大并且简洁，只有以下 8 个顶级元素：\",\"insert 映射插入语句\",\"update 映射更新语句\",\"delete 映射删除语句\",\"select 映射查询语句\",\"sql 可被其它语句引用的可重用语句块\",\"resultMap 描述如何从数据库结果集中加载对象\",\"cache 该命名空间的缓存配置\",\"cache-ref 引用其它命名空间的缓存配置\",\"其实一般开发时也很少需要用到复杂的类型转换器，MyBatis 会自动获取结果中返回的列名，并在 Java 类中查找相同名字的属性(忽略大小写)做映射。\"]},\"530\":{\"h\":\"CRUD\",\"t\":[\"<!-- select --> <select id=\\\"selectPerson\\\" parameterType=\\\"int\\\" parameterMap=\\\"deprecated\\\" resultType=\\\"hashmap\\\" resultMap=\\\"personResultMap\\\" flushCache=\\\"false\\\" useCache=\\\"true\\\" timeout=\\\"10\\\" fetchSize=\\\"256\\\" statementType=\\\"PREPARED\\\" resultSetType=\\\"FORWARD_ONLY\\\"> SELECT * FROM PERSON WHERE ID = #{id} </select> <!-- insert --> <insert id=\\\"insertAuthor\\\" parameterType=\\\"domain.blog.Author\\\" flushCache=\\\"true\\\" statementType=\\\"PREPARED\\\" keyProperty=\\\"id\\\" keyColumn=\\\"\\\" useGeneratedKeys=\\\"true\\\" timeout=\\\"20\\\"> insert into Author (id,username,password,email,bio) values (#{id},#{username},#{password},#{email},#{bio}) </insert> <!-- update --> <update id=\\\"updateAuthor\\\" parameterType=\\\"domain.blog.Author\\\" flushCache=\\\"true\\\" statementType=\\\"PREPARED\\\" timeout=\\\"20\\\"> update Author set username = #{username}, password = #{password}, email = #{email}, bio = #{bio} where id = #{id} </update> <!-- delete --> <delete id=\\\"deleteAuthor\\\" parameterType=\\\"domain.blog.Author\\\" flushCache=\\\"true\\\" statementType=\\\"PREPARED\\\" timeout=\\\"20\\\"> delete from Author where id = #{id} </delete>\",\"userGeneratedKeys: 用于 insert/update，使用 DB 内部生成的主键，配合 keyProperty 指定主键字段。MyBatis 也支持用 selectKey 自定义生成主键策略。\",\"语句的参数支持自动推断，支持自动查找对象的属性做映射 #{department, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=departmentResultMap}\",\"#{}会在 PreparedStatement 中创建占位符，${}可以把参数作为字符串插入语句(存在SQL注入的风险) @Select(\\\"select * from user where ${column} = #{value}\\\") User findByColumn(@Param(\\\"column\\\") String column, @Param(\\\"value\\\") String value);\",\"StatementType 支持三种：STATEMENT 普通执行语句，PREPARED 可变参数SQL，CALLABLE 支持存储过程\"]},\"531\":{\"h\":\"sql\",\"t\":[\"定义可重用的 SQL 代码片段，支持动态变量，例如：\",\"<sql id=\\\"userColumns\\\"> ${alias}.id,${alias}.username,${alias}.password </sql> <select id=\\\"selectUsers\\\" resultType=\\\"map\\\"> select <include refid=\\\"userColumns\\\"><property name=\\\"alias\\\" value=\\\"t1\\\"/></include>, <include refid=\\\"userColumns\\\"><property name=\\\"alias\\\" value=\\\"t2\\\"/></include> from some_table t1 cross join some_table t2 </select>\"]},\"532\":{\"h\":\"resultMap\",\"t\":[\"显式指定数据表列名的映射关系，是 Mapper 中最复杂也是最强大的元素。可以有如下的标签：\",\"id: 标记作为 id 的字段，有助于提高性能\",\"result: 字段注入到属性的映射\",\"constructor：结果实例化时注入到构造方法中的参数\",\"association：关联一个复杂类型的映射，可以是嵌套的select/resultMap\",\"collection：复杂类型映射的集合，可以是嵌套的select/resultMap\",\"discriminator+case：类似于 switch-case 语句的分支映射\",\"<!-- 指定别名 --> <typeAlias type=\\\"com.someapp.model.User\\\" alias=\\\"User\\\"/> <!-- 显式指定列名映射 --> <resultMap id=\\\"userResultMap\\\" type=\\\"User\\\"> <id property=\\\"id\\\" column=\\\"user_id\\\" /> <result property=\\\"username\\\" column=\\\"user_name\\\"/> <result property=\\\"password\\\" column=\\\"hashed_password\\\"/> </resultMap> <!-- 引用列名映射 --> <select id=\\\"selectUsers\\\" resultMap=\\\"userResultMap\\\"> select user_id, user_name, hashed_password from some_table where id = #{id} </select>\"]},\"533\":{\"h\":\"cache\",\"t\":[\"MyBatis 默认情况下只启用本地的会话缓存，加入 cache 标签将启用全局的二级缓存，且只作用于标签所在的映射文件中的语句。另外，可以实现 Cache 自定义缓存实现，cache-ref 标签可以实现多个命名空间共享相同的缓存配置和实例。\",\"<!-- 每隔 60s 刷新，大小为 512 个引用的 FIFO 只读缓存 --> <cache eviction=\\\"FIFO\\\" flushInterval=\\\"60000\\\" size=\\\"512\\\" readOnly=\\\"true\\\"/>\",\"eviction：清除策略，可选 LRU 默认值、FIFO、SOFT 软引用、WEAK 弱引用\",\"flushInterval: 单位ms，默认不刷新，调用 insert/update/delete 时刷新\"]},\"534\":{\"h\":\"动态 SQL\",\"t\":[\"根据条件动态拼接 SQL 语句是 MyBatis 的强大功能之一。\"]},\"535\":{\"h\":\"if\",\"t\":[\"根据 if 标签里的 test 条件附加语句。\",\"<select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE state = 'ACTIVE' <if test=\\\"title != null\\\"> AND title like #{title} </if> <if test=\\\"author != null and author.name != null\\\"> AND author_name like #{author.name} </if> </select>\"]},\"536\":{\"h\":\"choose\",\"t\":[\"配合 when、otherwise 从多个条件中选择一个使用，类似 Java-switch 语句。\",\"<select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG WHERE state = ‘ACTIVE’ <choose> <when test=\\\"title != null\\\"> AND title like #{title} </when> <when test=\\\"author != null and author.name != null\\\"> AND author_name like #{author.name} </when> <otherwise> AND featured = 1 </otherwise> </choose> </select>\"]},\"537\":{\"h\":\"trim\",\"t\":[\"上面的 if 语句如果第一个条件未命中，将产生一条无法执行的 SQL 语句，例如：\",\"SELECT * FROM BLOG WHERE AND title like 'someTitle'\",\"此时，我们可以在外层加入 where/trim/set 去除无效的关键字。\",\"<!-- where --> <select id=\\\"findActiveBlogLike\\\" resultType=\\\"Blog\\\"> SELECT * FROM BLOG <where> <if test=\\\"state != null\\\"> state = #{state} </if> <if test=\\\"title != null\\\"> AND title like #{title} </if> </where> </select> <!-- where 等价于下面的 trim --> <!-- 取出多余的 prefixOverrides 用 prefix 替换 --> <trim prefix=\\\"WHERE\\\" prefixOverrides=\\\"AND |OR \\\"> ... </trim> <!-- set 等价于下面的 trim --> <trim prefix=\\\"SET\\\" suffixOverrides=\\\",\\\"> ... </trim>\"]},\"538\":{\"h\":\"foreach\",\"t\":[\"foreach 能够很好的支持集合遍历，允许指定开头、结尾、分隔符等。其基本属性包括：\",\"item 迭代项\",\"index 索引变量，如果是 map 则为 key 值\",\"collection 集合对象\",\"<select id=\\\"selectPostIn\\\" resultType=\\\"domain.blog.Post\\\"> SELECT * FROM POST P <where> <foreach item=\\\"item\\\" index=\\\"index\\\" collection=\\\"list\\\" open=\\\"ID in (\\\" separator=\\\",\\\" close=\\\")\\\", nullable=\\\"true\\\"> #{item} </foreach> </where> </select>\"]},\"539\":{\"h\":\"源码分析\"},\"540\":{\"h\":\"重要组件\",\"t\":[\"MyBatis层级结构\",\"Configuration: MyBatis 的所有配置信息都维护在 Configuration 对象中\",\"SqlSource：表示从 XML 文件或注释读取的映射语句，负责接收用户输入创建动态 SQL 语句封装到 BoundSql\",\"MappedStatement 和 BoundSql：动态 SQL 的封装，以及相应的参数信息\",\"SqlSession：MyBatis 核心接口，表示和数据库交互时的会话，完成必要的增删改查功能\",\"Executor：执行器是 MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护\",\"StatementHandler：封装了 JDBC Statement 操作\",\"ParameterHandler: 负责把用户传递的参数转换成 JDBC Statement 所需要的参数\",\"ResultSetHandler: 负责将 JDBC 返回的 ResultSet 结果集转换成 List 集合\",\"TypeHandler: 用于 Java 类型和 JDBC 类型之间的转换\"]},\"541\":{\"h\":\"初始化\",\"t\":[\"初始化的主要工作是解析![，关键逻辑包括：\",\"加载自定义的参数\",\"将 SQL 语句映射成 MappedStatement 对象，并关联接口方法和 SQL 语句\",\"构建成 Configuration 对象生成 SqlSessionFactory 实例\",\"下面三行代码是通常的初始化执行语句，我们进入 build() 看看具体的加载逻辑。\",\"String resource = \\\"com/chanper/mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\",\"build() 其实主要就执行了两步，加载 XMLConfigBuilder 并解析，具体的解析逻辑在 parse() 里：\",\"// SqlSessionFactoryBuilder#build public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) { XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties); return build(parser.parse()); }\",\"在 parse() 解析逻辑里，MyBatis 逐个解析了配置文件里的标签，和前面的 配置文件 介绍的标签结构是一致的，最终目的是生成一个 Configuration 对象传入上面的 build() 用于创建 SqlSessionFactory。\",\"// XMLConfigBuilder#parse -> XMLConfigBuilder#parseConfiguration private void parseConfiguration(XNode root) { propertiesElement(root.evalNode(\\\"properties\\\")); Properties settings = settingsAsProperties(root.evalNode(\\\"settings\\\")); loadCustomVfs(settings); loadCustomLogImpl(settings); typeAliasesElement(root.evalNode(\\\"typeAliases\\\")); pluginElement(root.evalNode(\\\"plugins\\\")); objectFactoryElement(root.evalNode(\\\"objectFactory\\\")); objectWrapperFactoryElement(root.evalNode(\\\"objectWrapperFactory\\\")); reflectorFactoryElement(root.evalNode(\\\"reflectorFactory\\\")); settingsElement(settings); environmentsElement(root.evalNode(\\\"environments\\\")); databaseIdProviderElement(root.evalNode(\\\"databaseIdProvider\\\")); typeHandlerElement(root.evalNode(\\\"typeHandlers\\\")); mapperElement(root.evalNode(\\\"mappers\\\")); }\",\"重点关注 mapperElement() 解析映射器的逻辑，多 mapper 和单 mapper 解析本质上一样：\",\"如果指定了 resource/url 属性，则是进入mapperParse.parse()解析 mapper 对应的 xml 文件 \",\"先对 xml 文件中的的每条 SQL 语句进行解析，得到若干个 MappedStatement 对象，存入 Configuration.mappedStatements 这个 Map 集合里，key 是全限定接口名+方法名构成的 id，value 是 MappedStatement 对象\",\"xml 文件解析完成后，通过指定的 namespace 加载对应的 Mapper 接口，加入到 Configuration.mapperRegistry.knownMappers 这个 Map 集合中，key 是对应的 Mapper 接口对象，value 是生成的 MapperProxyFactory 代理工厂\",\"如果指定的是 class 属性，那么和上面的顺序相反，先加载 Mapper 接口对象，再解析对应的 xml 文件\",\"private void mapperElement(XNode parent) throws Exception { if (parent != null) { for (XNode child : parent.getChildren()) { // 多 mapper 解析 if (\\\"package\\\".equals(child.getName())) { String mapperPackage = child.getStringAttribute(\\\"name\\\"); configuration.addMappers(mapperPackage); } else { // 单 mapper 解析 String resource = child.getStringAttribute(\\\"resource\\\"); String url = child.getStringAttribute(\\\"url\\\"); String mapperClass = child.getStringAttribute(\\\"class\\\"); // 根据 resource 属性加载 mapper if (resource != null && url == null && mapperClass == null) { ErrorContext.instance().resource(resource); try (InputStream inputStream = Resources.getResourceAsStream(resource)) { XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, resource, configuration.getSqlFragments()); mapperParser.parse(); } } else if (resource == null && url != null && mapperClass == null) { // 根据 url 属性加载 mapper ErrorContext.instance().resource(url); try (InputStream inputStream = Resources.getUrlAsStream(url)) { XMLMapperBuilder mapperParser = new XMLMapperBuilder(inputStream, configuration, url, configuration.getSqlFragments()); mapperParser.parse(); } } else if (resource == null && url == null && mapperClass != null) { // 根据 class 属性加载 mapper Class<?> mapperInterface = Resources.classForName(mapperClass); configuration.addMapper(mapperInterface); } else { throw(...) } } } } }\",\"这样，就完成了 SQL 语句和 Mapper 接口地绑定关系。至此也完成了配置文件的解析工作，初始化完成得到一个 SqlSessionFactory 对象。\"]},\"542\":{\"h\":\"创建会话\",\"t\":[\"创建完 SqlSessionFactory 之后，我们就可以创建 SqlSession 对象了，在 openSession() 方法里，从 Configuration 里拿到 Environment, TransactionFactory，然后根据配置的执行器类型创建 Executor，最后封装成 DefaultSqlSession 返回。\",\"SqlSession session = sqlSessionFactory.openSession(); // DefaultSqlSessionFactory#openSessionFromDataSource private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) { Transaction tx = null; final Environment environment = configuration.getEnvironment(); final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment); tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit); // 创建 Executor final Executor executor = configuration.newExecutor(tx, execType); return new DefaultSqlSession(configuration, executor, autoCommit); } // Configuration#newExecutor public Executor newExecutor(Transaction transaction, ExecutorType executorType) { executorType = executorType == null ? defaultExecutorType : executorType; Executor executor; if (ExecutorType.BATCH == executorType) { executor = new BatchExecutor(this, transaction); } else if (ExecutorType.REUSE == executorType) { executor = new ReuseExecutor(this, transaction); } else { executor = new SimpleExecutor(this, transaction); } if (cacheEnabled) { executor = new CachingExecutor(executor); } return (Executor) interceptorChain.pluginAll(executor); }\",\"三类 Executor：\",\"SimpleExecutor：默认的简单执行器，每次执行 update/select 就开启一个 Statement，用完直接关闭\",\"ReuseExecutor：可重用执行器，内部 statementMap 缓存 SQL 语句对应的 Statement（Session作用域）\",\"BatchExecutor：批处理执行器，缓存了多个 Statement，批量输出到数据库\",\"此外，还有个 CachingExecutor 可以根据可选配置，用装饰器模式包装原始 Executor 增加缓存功能。\"]},\"543\":{\"h\":\"获取 Mapper\",\"t\":[\"接着就是从 Configuration.mapperRegistry.knownMappers 取出 Mapper 代理工厂，通过反射创建 Mapper 的代理对象 MapperProxy，也就是说，执行 Mapper 接口的任意方法，都是执行 MapperProxy 的 invoke 方法。\",\"UserMapper mapper = session.getMapper(UserMapper.class); // DefaultSqlSession#getMapper public <T> T getMapper(Class<T> type) { return configuration.getMapper(type, this); } // Configuration#getMapper public <T> T getMapper(Class<T> type, SqlSession sqlSession) { return mapperRegistry.getMapper(type, sqlSession); } // MapperRegistry#getMapper public <T> T getMapper(Class<T> type, SqlSession sqlSession) { final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type); return mapperProxyFactory.newInstance(sqlSession); }\"]},\"544\":{\"h\":\"执行 SQL\",\"t\":[\"调用 MapperProxy#invoke 后，在 MapperProxy 里封装 MapperMethod 并执行 execute，根据 SQL 类型执行 SqlSession 的 select/selectList/selectCursor 方法，经过各种分支层层调用，然后根据 id 从 Configuration 中取出对应的 MappedStatement，查询缓存不存在后，最终来到 BaseExecutor#query -> queryFromDatabase -> doQuery。\",\"在 doQuery() 里封装 StatementHandler，并调用 ParameterHandler 对参数进行映射，最终调用 JDBC Statement 的接口去真正地执行 SQL 语句。StatementHandler 有四个实现类：\",\"RoutingStatementHandler: 仅作为中间路由，根据 StatementType 创建下面三种实现的代理\",\"SimpleStatementHandler: 管理 Statement 对象并向数据库中推送不需要预编译的SQL语句\",\"PreparedStatementHandler: 管理 Statement 对象并向数据中推送需要预编译的SQL语句。\",\"CallableStatementHandler：管理 Statement 对象并调用数据库中的存储过程。\",\"UserMapper mapper = session.getMapper(UserMapper.class); User user1 = mapper.selectUserById(1); // SimpleExecutor#doQuery public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException { Statement stmt = null; Configuration configuration = ms.getConfiguration(); // 创建 StatementHandler StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql); // ParameterHandler 负责完成 SQL 语句的实参绑定 stmt = prepareStatement(handler, ms.getStatementLog()); // 调用 JDBC 执行 SQL return handler.query(stmt, resultHandler); } // PreparedStatementHandler#query @Override public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException { PreparedStatement ps = (PreparedStatement) statement; ps.execute(); // 结果集处理 return resultSetHandler.handleResultSets(ps); }\",\"最后执行结果由 ResultSetHandler 封装成 List 集合返回，并放入缓存中，至此完成了查询 SQL 的执行。至于新增、删除、更新操作都是调用执行器的 doUpdate 方法，逻辑和查询很类似，可以自行分析源码。\"]},\"545\":{\"h\":\"其它模块\",\"t\":[\"Relection 反射模块\",\"TypeHandler 类型转换模块，负责 JDBC - Java 的类型转换\",\"TypeAliasRegistry 为Java类型注册别名\",\"LogFactory 日志适配接口\",\"Resources/ClassLoaderWrapper 资源加载模块\",\"PooledDataSource/PooledConnection 数据源、数据库连接实现\",\"Transaction 事务管理模块\",\"Cache 缓存模块\",\"Binding SQL 和 Mapper 的绑定模块\"]},\"546\":{\"h\":\"参考资料\",\"t\":[\"https://mybatis.org/mybatis-3/zh/index.html 官网可以当作使用手册\",\"https://zhuanlan.zhihu.com/p/97879019\",\"https://cloud.tencent.com/developer/article/1598555\",\"https://cloud.tencent.com/developer/article/1430026\",\"https://juejin.cn/post/6983853041686577189\",\"https://wch853.github.io/posts/ 很详细的源码分析\"]},\"547\":{\"c\":[\"数据库\"]},\"548\":{\"c\":[\"MyBatis\"]},\"549\":{\"h\":\"MySQL 锁机制\",\"t\":[\"锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、RAM、I/O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。\",\"InnoDB按照锁的粒度分为以下三类： \",\"全局锁：锁定数据库中的所有表，粒度最大\",\"表级锁：每次操作锁住整张表，粒度大，并发低，但开销小加锁快\",\"行级锁：每次操作锁住一条行数据，粒度小，并发大，但开销大加锁慢\",\"MyISAM、Memory等引擎仅支持表级锁，难以支持高并发的场景，且不支持事务，因此适用于只读或以读为主的场景\",\"InnoDB 支持行级锁、表级锁，默认使用行级锁\",\"几乎每种锁在实现上都会分共享锁（读锁）和排他锁（写锁），共享锁允许多个线程持有，但只能读数据，排他锁只有一个线程可以获取，且只有该线程可以读写数据。\"]},\"550\":{\"h\":\"全局锁\",\"t\":[\"全局锁就是对整个数据库实例加锁，是一个重操作。加锁后整个实例就处于只读状态，后续的 DML、DDL语句，以及更新类事务提交语句都将被阻塞。典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。\",\"语法：\",\"-- 加全局锁（FTWRL） flush tables with read lock; -- 数据备份 mysqldump -uroot -p****** db_name > backup_path -- 释放锁 unlock tables;\",\"特点：\",\"如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。\",\"如果在从库上备份，那么在备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。\",\"如果是 InnoDB 引擎，可以在 mysqldump 备份时加上--single-transaction参数，启动一个事务，确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是可以正常更新的。\"]},\"551\":{\"h\":\"表级锁\",\"t\":[\"表级锁每次操作锁住整张表，实现简单，加锁速度快，但锁定粒度大，锁冲突的概率高，因此并发度低。表级锁分为两类：表锁、元数据锁。\"]},\"552\":{\"h\":\"表锁\",\"t\":[\"表锁分为两种：\",\"表共享锁（表S锁 / 读锁）: 所有事务（包括当前加锁的客户端）都只能读，不能写\",\"表独占锁（表X锁 / 写锁）: 当前加锁的客户端可读可写，其他客户端不可读也不可写。\",\"语法：\",\"-- 加读锁 lock tables tb_name read; -- 加写锁 lock tables tb_name write; -- 释放锁 unlock tables; -- 查看当前数据库中的加锁情况： select object_type, object_schema, object_name,lock_type, lock_duration from performance_schema.metadata_locks;\",\"另外，对于不支持行锁的 MyISAM 等引擎来说，默认的就是表锁，所以 DML 语句会自动加解写锁，DQL 语句自动加解读锁。还有连接断开时也会自动释放锁。\"]},\"553\":{\"h\":\"元数据锁\",\"t\":[\"当查询一个表中的数据时，如果另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构就不一致了，这肯定是不合理的，这时就需要用到元数据锁。\",\"Meta Data Lock（MDL）位于 Server 层，MDL 加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的一致性，避免 DML 与 DDL 冲突，保证读写的正确性。也就是说表上有活动事务的时候，不可以对元数据进行写入操作。\",\"MDL 也分共享锁和排他锁：\",\"DML 和 DQL 语句会自动申请 MDL 共享锁，多个线程可同时 CRUD\",\"DDL 语句执行期间可能申请排它锁，也可能申请共享锁，具体取决于 MySQL 版本和执行的 DDL 语句。当申请的是排他锁时，其它线程不能读写。TODO: 待补充文档@chanper\"]},\"554\":{\"h\":\"行级锁\",\"t\":[\"每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高，但开销大，加锁速度慢，而且可能出现死锁。\",\"InnoDB 数据基于索引组织，因此行级锁在实现上是对索引上的索引项进行加锁，如果一条 SQL 语句操作了主键索引，MySQL 就会锁住这条主键索引，如果一条语句操作了非主键索引，MySQL 会先锁定该非主键索引，再锁定关联的主键索引。\",\"行级锁实现上分为记录锁、间隙锁、临键锁，每种实现也分共享锁和排他锁，DQL 语句读取记录时需要先获取该记录的共享锁，DML 语句需要先获取该记录的排他锁。\"]},\"555\":{\"h\":\"记录锁\",\"t\":[\"Record Lock（LOCK_REC_NOT_GAP），锁定单个行记录，防止其他事务对该行进行修改。在 RC（Read Committed）、RR（Repeatable Read）隔离级别下都支持。\",\"行锁\"]},\"556\":{\"h\":\"间隙锁\",\"t\":[\"Gap Locks（LOCK_GAP）间隙锁对索引记录间隙（不含该记录）加锁，确保索引记录间隙不变，防止其他事务在这个间隙插入新记录。RR 隔离级别支持。\",\"间隙锁唯一目的是为了防止产生幻读\",\"间隙锁可以共存，不会限制其它事务在同一间隙上加任何行锁\",\"如果要对索引末尾加间隙锁，可以对 Supremum 伪记录加间隙锁\",\"间隙锁\"]},\"557\":{\"h\":\"临键锁\",\"t\":[\"Next-Key Locks（LOCK_ORDINARY）临键锁是记录锁和间隙锁的组合，同时锁住数据和数据前面的间隙（左开右闭）。RR 隔离级别支持。\",\"默认情况下 InnoDB 使用临键锁进行搜索和索引扫描，以防止幻读\",\"临键锁只与非唯一索引列有关，唯一索引上的查询不会存在临键锁，退化为记录锁\",\"索引上的等值查询（普通索引），向右遍历，最后一个值不满足查询需求时，临键锁退化为间隙锁\",\"临键锁\"]},\"558\":{\"h\":\"加锁总结\",\"t\":[\"SQL\",\"记录锁类型\",\"说明\",\"SELECT ...\",\"不加锁\",\"InnoDB 引擎采用 MVCC 机制实现非阻塞读\",\"SELECT ... LOCK IN SHARE MODE\",\"共享临键锁\",\"扫描如果有唯一索引，则降级为记录锁\",\"SELECT ... FOR UPDATE\",\"排他临键锁\",\"扫描如果有唯一索引，则降级为记录锁\",\"UPDATE ...\",\"排他临键锁\",\"自动加锁，扫描如果有唯一索引，则降级为记录锁\",\"DELETE ...\",\"排他临键锁\",\"自动加锁，扫描如果有唯一索引，则降级为记录锁\",\"INSERT ...\",\"排他记录锁\",\"在将要插入的那一行设置\",\"注：行级锁的实现是依靠其对应的索引，如果没用到索引的查询，就会走表锁\"]},\"559\":{\"h\":\"其它锁\"},\"560\":{\"h\":\"意向锁\",\"t\":[\"假设，事务A获取了某一行记录的排它锁，事物A尚未提交,事务B想要获取表锁时，则事物B必须要确认表的每一行都不存在排他锁，需要进行全表扫描，效率很低，此时就引入意向锁。\",\"意向锁是 InnoDB 引擎自动维护的，当执行加行锁的语句时会自动尝试获取意向锁，无法手动操作。从范围上属于表级锁，分两种：\",\"意向共享锁（IS）：Intention Shared Lock，当一个事务准备在某条记录上加行级共享锁时，需要先获取该表的 IS 锁\",\"意向排他锁（IX）：Intention Exclusive Lock，当一个事务准备在某条记录上加行级排他锁时，需要先获取该表的 IX 锁\",\"意向锁特点：\",\"从锁粒度角度：InnoDB 允许行级锁与表级锁共存,而意向锁是表锁\",\"从锁模式角度：意向锁是一种独立类型，辅助解决记录锁效率不及的问题\",\"从兼容性角度：意向锁包含了共享/排他两种。\",\"兼容互斥性：\",\"意向锁之间是互相兼容的，不管是共享意向锁还是排他意向锁\",\"共享意向锁和表级共享锁兼容，和表级排他锁互斥\",\"排他意向锁和表级共享锁、表级排他锁互斥\",\"注：从意向锁加锁时机来理解，如果表上有意向排他锁，说明有事务持有表内某个记录的行级排他锁，那么该表自然也不能加表级排他锁。而意向排他锁只能表明表里的某一行被加了行级排他锁，所以另一个事务也可以在该表上加意向排他锁，并对表内另一行加行级排他锁，行记录的锁由行级锁来控制。\"]},\"561\":{\"h\":\"插入意向锁\",\"t\":[\"插入意向锁（Insert Intention Lock）是在插入数据行之前，由 INSERT 操作设置的一种间隙锁。插入意向锁表示一种插入的意图，是一种特殊的间隙锁，如果插入到相同间隙中的多个事务没有插入相同位置，则不需要互相等待。假设存在索引记录 4 和 7。两个事务分别尝试插入 5 和 6，它们在获取行排他锁之前，分别使用插入意向锁来锁定 4 到 7 之间的间隙；但是不会相互阻塞，因为插入的是不同的行。\"]},\"562\":{\"h\":\"AUTO_INC锁\",\"t\":[\"用于AUTO_INCREMENT修饰的列递增赋值，innodb_autoinc_lock_mode控制赋值方案是使用AUTO_INC锁还是采用一个轻量级锁生成列值。\"]},\"563\":{\"h\":\"页级锁\",\"t\":[\"页级锁是 MySQL 中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。因此，采取了折衷的页级锁，一次锁定相邻的一组记录。仅 BDB 引擎支持页级锁。\"]},\"564\":{\"h\":\"锁的内存结构\",\"t\":[\"对记录加锁的本质就是在内存中创建一个锁结构与之关联，如果符合以下条件，则对这些记录的锁可以放到一个锁结构中：\",\"在同一个事务中进行加锁操作\",\"被加锁的记录在同一个页面中\",\"加锁的类型一致\",\"等待状态一致\",\"锁内存结构\",\"锁所在的事务信息：指向关于生成该锁事务的相关信息\",\"索引信息：对于行锁需要记录加锁的记录属于哪个索引\",\"表锁/行锁信息： \",\"表锁：记录对哪个表加锁，以及一些其它信息\",\"行锁：记录表空间Id、所在页号、以及结构末尾的比特位数。每条记录对应一个比特位，记录是否加锁\",\"type_mode: 32位数，其中 \",\"低四位 - lock_mode: 锁的模式，包括LOCK_IS, LOCK_IX, LOCK_S, LOCK_X, LOCK_AUTO_INC;\",\"5~8位 - lock_type: 锁的类型，分表锁LOCK_TABLE和行锁LOCK_REC\",\"其余位 - rec_lock_type: 行锁具体类型，如LOCK_ORDINARY, LOCK_GAP, LOCK_REC_NOT_GAP, LOCK_INSERT_INTENTION等。并且其中的第9个比特位标志is_waiting，即是否获取到锁\",\"其它信息\",\"一堆比特位：针对行锁结构，每个比特位对应一条记录，映射一个heap_no\"]},\"565\":{\"h\":\"参考文档\",\"t\":[\"https://juejin.cn/post/6931752749545553933\",\"https://yunlongn.github.io/2021/08/06/MySQL十三：小一万字+14张图读懂锁机制/\",\"https://www.cnblogs.com/better-farther-world2099/articles/14955475.html\"]},\"566\":{\"c\":[\"数据库\"]},\"567\":{\"c\":[\"MySQL\"]},\"568\":{\"h\":\"MySQL 基础\"},\"569\":{\"h\":\"概述\",\"t\":[\"名称\",\"简介\",\"DB\",\"存储数据的仓库，对数据进行有组织的存储\",\"DBMS\",\"操纵和管理数据库的大型软件\",\"SQL\",\"操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准\",\"关系型数据库：建立在关系模型基础上，由多张相互连接的二维表，即由行和列组成的表，构成的数据库\",\"数据模型\",\"启动MySQL：\",\"# mysql.server -> mysqld_safe -> mysqld (服务端程序) # 启动MySQL服务器进程 mysqld 参数： --skip-networking 禁止网络连接 --default-storage-engine=MyISAM 指定默认存储引擎 --defaults-extra-file=xxx.ini 指定外部配置文件 --defaults-file=xxx.cnf 指定配置文件，且不搜索默认配置文件 # Windows 启停 MySQL 系统服务 net start mysql net stop mysql # 连接MySQL mysql [-h 127.0.0.1] [-P 3306] -u root -p 参数： -h 主机IP -P 端口号，默认3306 -u 用户名 -p 密码\"]},\"570\":{\"h\":\"体系结构\",\"t\":[\"MySQL架构图\",\"连接层： 最上层是一些客户端和链接服务，包含本地 sock 通信和大多数基于客户端/服务端工具实现的类似于TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。\",\"服务层： 第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。\",\"引擎层： 存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。数据库中的索引是在存储引擎层实现的。\",\"存储层： 数据存储层， 主要是将数据(如: redolog、undolog、数据、索引、二进制日志、错误日志、查询日志、慢查询日志等)存储在文件系统之上，并完成与存储引擎的交互。\",\"MySQL插件式的存储引擎架构，将查询处理和其它的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎，可以在多种不同场景中应用并发挥良好作用。\",\"语句执行流程\",\"MySQL简化架构\",\"连接器：负责跟客户端建立连接、获取权限、维持和管理连接 \",\"用户名密码验证通过后，连接器会到权限表中查出所拥有的权限（因此修改权限不会立即生效） mysql -uroot -p\",\"查询缓存(仅适用于不常修改的数据，且 MySQL 8 中已经删除缓存模块)\",\"分析器：词法分析、语法分析，例如识别表名、列名等\",\"优化器：存在多个索引时决定使用哪个索引，或多表关联时决定表的连接顺序，以确定语句的执行计划\",\"执行器：校验权限后，真正执行语句，将执行结果存入结果集，最后返回\"]},\"571\":{\"h\":\"SQL\"},\"572\":{\"h\":\"分类\",\"t\":[\"名称\",\"全称\",\"简介\",\"DDL\",\"Data Definition Language\",\"数据定义语言，用来定义数据库对象，如数据库、表、字段\",\"DML\",\"Data Manipulation Language\",\"数据操作语言，用来对数据库表中的数据进行增删改\",\"DQL\",\"Data Query Language\",\"数据查询语言，用来查询数据库中表的记录\",\"DCL\",\"Data Control Language\",\"数据控制语言，用来创建数据库用户、控制数据库的控制权限\"]},\"573\":{\"h\":\"DDL - 数据定义语言\"},\"574\":{\"h\":\"数据库操作\",\"t\":[\"查询所有数据库: show databases;\",\"查询当前数据库： select database();\",\"创建数据库： create database [if not exists] 数据库名 [default charset 字符集] [collate 排序规则]\",\"删除数据库: drop database [if exists] 数据库名;\",\"切换数据库： use 数据库名;\",\"注：UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集\"]},\"575\":{\"h\":\"表操作\",\"t\":[\"查询当前数据库所有表： show tables;\",\"查询表结构： desc 表名;\",\"查询指定表的建表语句： show create table 表名;\",\"创建表：\",\"CREATE TABLE 表名( 字段1 字段1类型 [COMMENT 字段1注释], 字段2 字段2类型 [COMMENT 字段2注释], 字段3 字段3类型 [COMMENT 字段3注释], ... 字段n 字段n类型 [COMMENT 字段n注释] )[ COMMENT 表注释 ];\",\"修改表名： ALTER TABLE 表名 RENAME TO 新表名\",\"删除表： DROP TABLE [IF EXISTS] 表名;\",\"删除表，并重新创建该表，相当于删除表中所有数据： TRUNCATE TABLE 表名;\"]},\"576\":{\"h\":\"字段操作\",\"t\":[\"添加字段： ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束]; 例：ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';\",\"修改数据类型： ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);\",\"修改字段名和字段类型： ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束]; 例：将emp表的nickname字段修改为username，类型为varchar(30)ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';\",\"删除字段： ALTER TABLE 表名 DROP 字段名;\"]},\"577\":{\"h\":\"DML - 数据操作语言\"},\"578\":{\"h\":\"添加数据\",\"t\":[\"指定字段： INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);\",\"全部字段： INSERT INTO 表名 VALUES (值1, 值2, ...);\",\"批量添加数据：INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);\",\"注：\",\"插入数据时，指定的字段顺序需要与值的顺序是一一对应的\",\"字符串和日期类型数据应该包含在引号中\",\"插入的数据大小应该在字段的规定范围内\"]},\"579\":{\"h\":\"更新数据\",\"t\":[\"UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ]; 例： UPDATE employee SET name = '小昭', gender = '女' where id = 1;\",\"注: 没有条件语句则会修改整张表的所有数据\"]},\"580\":{\"h\":\"删除数据\",\"t\":[\"DELETE FROM 表名 [ WHERE 条件 ]; 例： delete from employee where gender = '女';\",\"注：\",\"没有条件语句则会删除整张表的所有数据\",\"DELETE语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即可)\"]},\"581\":{\"h\":\"DQL - 数据查询语言\",\"t\":[\"语法：\",\"SELECT 字段列表 FROM 表名字段 WHERE 条件列表 GROUP BY 分组字段列表 HAVING 分组后的条件列表 ORDER BY 排序字段列表 LIMIT 分页参数\"]},\"582\":{\"h\":\"基础查询\",\"t\":[\"查询多个字段：SELECT 字段1, 字段2, 字段3, ... FROM 表名;SELECT * FROM 表名; 注：* 表示查询所有字段，不直观且影响效率\",\"设置别名：SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], ... FROM 表名;SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], ... FROM 表名;\",\"去除重复记录：SELECT DISTINCT 字段列表 FROM 表名;\"]},\"583\":{\"h\":\"条件查询\",\"t\":[\"语法：SELECT 字段列表 FROM 表名 WHERE 条件列表;\",\"条件:\",\"比较运算符\",\"功能\",\">\",\"大于\",\">=\",\"大于等于\",\"<\",\"小于\",\"<=\",\"小于等于\",\"=\",\"等于\",\"<> 或 !=\",\"不等于\",\"BETWEEN ... AND ...\",\"在某个范围内（含最小、最大值）\",\"IN(...)\",\"在in之后的列表中的值，多选一\",\"LIKE 占位符\",\"模糊匹配（_匹配单个字符，%匹配任意个字符）\",\"IS NULL\",\"是NULL\",\"逻辑运算符\",\"功能\",\"AND 或 &&\",\"并且（多个条件同时成立）\",\"OR 或 ||\",\"或者（多个条件任意一个成立）\",\"NOT 或 !\",\"非，不是\",\"例：\",\"-- 没有身份证 select * from employee where idcard is null or idcard = ''; -- 有身份证 select * from employee where idcard; select * from employee where idcard is not null; -- 年龄在20到30之间 select * from employee where age between 20 and 30; select * from employee where age >= 20 and age <= 30; -- 下面语句不报错，但查不到任何信息 select * from employee where age between 30 and 20; -- 性别为女且年龄小于30 select * from employee where age < 30 and gender = '女'; -- 年龄等于25或30或35 select * from employee where age = 25 or age = 30 or age = 35; select * from employee where age in (25, 30, 35); -- 姓名为两个字 select * from employee where name like '__'; -- 身份证最后为X select * from employee where idcard like '%X';\"]},\"584\":{\"h\":\"聚合查询（聚合函数）\",\"t\":[\"将一列数据作为一个整体，进行纵向计算。常见聚合函数有：\",\"函数\",\"功能\",\"count\",\"统计数量\",\"max\",\"最大值\",\"min\",\"最小值\",\"avg\",\"平均值\",\"sum\",\"求和\",\"语法： SELECT 聚合函数(字段列表) FROM 表名; 例： SELECT count(id) from employee where workaddress = \\\"广东省\\\"; 注：\",\"如果指定列，那么该列的NULL值不参与所有的聚合函数运算\",\"对于count聚合函数，统计符合条件的总记录数，还可以通过 count(数字/字符串)的形式进行统计查询\"]},\"585\":{\"h\":\"分组查询\",\"t\":[\"语法：SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];\",\"注：\",\"where 和 having 的区别： \",\"执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。\",\"判断条件不同：where不能对聚合函数进行判断，而having可以\",\"分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义\",\"执行顺序: where -> 聚合函数 -> having\",\"支持多字段分组, 具体语法为 : group by columnA, columnB\",\"例：\",\"-- 根据性别分组，统计男性和女性数量 select gender, count(*) from employee group by gender; -- 年龄小于45，并根据工作地址分组 select workaddress, count(*) from employee where age < 45 group by workaddress; -- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址 select workaddress, count(*) address_count from employee where age < 45 group by workaddress having address_count >= 3;\"]},\"586\":{\"h\":\"排序查询\",\"t\":[\"语法：SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;\",\"注：\",\"排序方式： \",\"ASC: 升序（默认）\",\"DESC: 降序\",\"如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序\",\"例：\",\"-- 两字段排序，根据年龄升序排序，入职时间降序排序(如果年龄相同那么就按这个) SELECT * FROM employee ORDER BY age ASC, entrydate DESC;\"]},\"587\":{\"h\":\"分页查询\",\"t\":[\"语法：SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;\",\"注：\",\"起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数\",\"分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT\",\"如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10\",\"例：\",\"-- 查询第一页数据，展示10条 SELECT * FROM employee LIMIT 10; -- 查询第二页 SELECT * FROM employee LIMIT 10, 10;\"]},\"588\":{\"h\":\"DQL执行顺序\",\"t\":[\"FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY -> LIMIT\",\"DQL执行顺序\"]},\"589\":{\"h\":\"DCL - 数据控制语言\"},\"590\":{\"h\":\"用户管理\",\"t\":[\"查询用户： SELECT * FROM mysql.user;\",\"创建用户:CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';\",\"修改用户密码：ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';\",\"删除用户：DROP USER '用户名'@'主机名';\",\"注：\",\"在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户\",\"主机名可以使用 % 通配\",\"例：\",\"-- 创建用户test，只能在当前主机localhost访问 create user 'test'@'localhost' identified by '123456'; -- 创建用户test，能在任意主机访问 create user 'test'@'%' identified by '123456'; create user 'test' identified by '123456';\"]},\"591\":{\"h\":\"权限控制\",\"t\":[\"常用权限：\",\"权限\",\"说明\",\"ALL, ALL PRIVILEGES\",\"所有权限\",\"SELECT\",\"查询数据\",\"INSERT\",\"插入数据\",\"UPDATE\",\"修改数据\",\"DELETE\",\"删除数据\",\"ALTER\",\"修改表\",\"DROP\",\"删除数据库/表/视图\",\"CREATE\",\"创建数据库/表\",\"查询权限：SHOW GRANTS FOR '用户名'@'主机名';\",\"授予权限：GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';\",\"撤销权限：REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';\",\"注：\",\"多个权限用逗号分隔\",\"授权时，数据库名和表名可以用 * 进行通配，代表所有\"]},\"592\":{\"h\":\"函数\",\"t\":[\"函数是指一段可以直接被另外一段程序调用的程序或代码，主要分字符串函数、数值函数、日期函数、流程函数四类。\"]},\"593\":{\"h\":\"字符串函数\",\"t\":[\"常用函数：\",\"函数\",\"功能\",\"CONCAT(s1, s2, ..., sn)\",\"字符串拼接，将s1, s2, ..., sn拼接成一个字符串\",\"LOWER(str)\",\"将字符串全部转为小写\",\"UPPER(str)\",\"将字符串全部转为大写\",\"LPAD(str, n, pad)\",\"左填充，用字符串pad对str的左边进行填充，达到n个字符串长度\",\"RPAD(str, n, pad)\",\"右填充，用字符串pad对str的右边进行填充，达到n个字符串长度\",\"TRIM(str)\",\"去掉字符串头部和尾部的空格\",\"SUBSTRING(str, start, len)\",\"返回从字符串str从start位置起的len个长度的字符串\",\"使用示例：\",\"-- 拼接 SELECT CONCAT('Hello', 'World'); -- 小写 SELECT LOWER('Hello'); -- 大写 SELECT UPPER('Hello'); -- 左填充 SELECT LPAD('01', 5, '-'); -- 右填充 SELECT RPAD('01', 5, '-'); -- 去除空格 SELECT TRIM(' Hello World '); -- 切片（起始索引为1） SELECT SUBSTRING('Hello World', 1, 5);\"]},\"594\":{\"h\":\"数值函数\",\"t\":[\"常用函数：\",\"函数\",\"功能\",\"CEIL(x)\",\"向上取整\",\"FLOOR(x)\",\"向下取整\",\"MOD(x, y)\",\"返回x/y的模\",\"RAND()\",\"返回0~1内的随机数\",\"ROUND(x, y)\",\"求参数x的四舍五入值，保留y位小数\",\"使用示例：\",\"-- 向上取整 select ceil(1.1); -- 向下取整 select floor(1.9); -- 取模 select mod(7, 4); -- rand select rand(); -- round select round(2.344, 2); -- 生成6位随机验证码 select lpad(round(rand() * 1000000, 0), 6, '0);\"]},\"595\":{\"h\":\"日期函数\",\"t\":[\"常用函数：\",\"函数\",\"功能\",\"CURDATE()\",\"返回当前日期\",\"CURTIME()\",\"返回当前时间\",\"NOW()\",\"返回当前日期和时间\",\"YEAR(date)\",\"获取指定date的年份\",\"MONTH(date)\",\"获取指定date的月份\",\"DAY(date)\",\"获取指定date的日期\",\"DATE_ADD(date, INTERVAL expr type)\",\"返回一个日期/时间值加上一个时间间隔expr后的时间值\",\"DATEDIFF(date1, date2)\",\"返回起始时间date1和结束时间date2之间的天数\",\"使用示例：\",\"-- DATE_ADD SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR); -- 获取日期差 select datediff('2022-10-01', '2022-12-01');\"]},\"596\":{\"h\":\"流程函数\",\"t\":[\"常用函数：\",\"函数\",\"功能\",\"IF(value, t, f)\",\"如果value为true，则返回t，否则返回f\",\"IFNULL(value1, value2)\",\"如果value1不为空，返回value1，否则返回value2\",\"CASE WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END\",\"如果val1为true，返回res1，... 否则返回default默认值\",\"CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END\",\"如果expr的值等于val1，返回res1，... 否则返回default默认值\",\"使用示例：\",\"-- if select if(false, 'Ok', 'Error'); -- ifnull select ifnull('Ok', 'Default'); select ifnull('', 'Default'); select ifnull(null, 'Default'); -- case when then else end select name, { case wordaddress when '北京' then '一线城市' when '上海' then '一线城市' else '二线城市' end } as '工作地址' from emp;\"]},\"597\":{\"h\":\"约束\"},\"598\":{\"h\":\"概述\",\"t\":[\"约束是用来作用于表中字段上的规则，用于限制存储在表中的数据。目的是为了保证数据库中的数据的正确性、有效性和完整性\",\"分类：\",\"约束\",\"描述\",\"关键字\",\"非空约束\",\"限制该字段的数据不能为null\",\"NOT NULL\",\"唯一约束\",\"保证该字段的所有数据都是唯一、不重复的\",\"UNIQUE\",\"主键约束\",\"主键是一行数据的唯一标识，要求非空且唯一\",\"PRIMARY KEY\",\"默认约束\",\"保存数据时，如果未指定该字段的值，则采用默认值\",\"DEFAULT\",\"检查约束（8.0.16版本后）\",\"保证字段值满足某一个条件\",\"CHECK\",\"外键约束\",\"让两张图的数据之间建立连接，保证数据的一致性和完整性\",\"FOREIGN KEY\",\"示例:\",\"CREATE TABLE tb_user( id int AUTO_INCREMENT PRIMARY KEY COMMENT 'ID唯一标识', name varchar(10) NOT NULL UNIQUE COMMENT '姓名' , age int check(age > 0 && age <= 120) COMMENT '年龄' , status char(1) default '1' COMMENT '状态', gender char(1) COMMENT '性别' );\"]},\"599\":{\"h\":\"外键\",\"t\":[\"让两张表的数据之间建立连接，从而保证数据的一致性和完整性。\",\"添加外键\",\"-- 创建表时设置外键 CREATE TABLE 表名( 字段名 字段类型, ... [CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名) ); -- 对已有的表添加外键 ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名); -- 示例 alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);\",\"删除外键\",\"ALTER TABLE 表名 DROP FOREIGN KEY 外键名; -- 示例 alter table emp drop foreign key fk_emp_dept_id;\",\"删除/更新行为 语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;\",\"其中，行为包括以下5种：\",\"行为\",\"说明\",\"NO ACTION\",\"当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）\",\"RESTRICT\",\"当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）\",\"CASCADE\",\"当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录\",\"SET NULL\",\"当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）\",\"SET DEFAULT\",\"父表有变更时，子表将外键设为一个默认值（Innodb不支持）\",\"默认值是 No Action\"]},\"600\":{\"h\":\"多表\"},\"601\":{\"h\":\"多表关系\",\"t\":[\"一对多 \",\"例如：一个部门对应多个员工\",\"实现：在多的一方建立外键，指向一的一方的主键\",\"多对多 \",\"例如：一个学生可以选多门课程，一门课程也可以被多个学生选修\",\"实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键\",\"一对一 \",\"例如：一个用户仅对应一个用户详情。常用于单表拆分，以提升操作效率\",\"实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）\"]},\"602\":{\"h\":\"合并查询\",\"t\":[\"笛卡尔积：两个集合A集合和B集合的所有组合情况。在多表查询时，需要消除无效的笛卡尔积 select * from employee, dept where employee.dept = dept.id;\"]},\"603\":{\"h\":\"内连接查询\",\"t\":[\"内连接查询的是两张表交集的部分\",\"隐式内连接：SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;\",\"显式内连接：SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;\",\"通常显式性能比隐式高\",\"例子：\",\"-- 查询员工姓名，及关联的部门的名称 -- 隐式 select e.name, d.name from employee as e, dept as d where e.dept = d.id; -- 显式 select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;\"]},\"604\":{\"h\":\"外连接查询\",\"t\":[\"左外连接：\",\"查询左表所有数据，以及两张表交集部分数据。相当于查询表1的所有数据，并包含表1和表2交集部分的数据SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;\",\"右外连接：\",\"查询右表所有数据，以及两张表交集部分数据。相当于查询表2的所有数据，并包含表1和表2交集部分的数据。 SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;\",\"例子：\",\"-- 两条语句效果一样。左外和右外可以互相转换 -- 左外 select d.name, e.* from dept d left outer join emp e on e.dept = d.id; -- 右外 select d.name, e.* from employee e right outer join dept d on e.dept = d.id;\"]},\"605\":{\"h\":\"自连接查询\",\"t\":[\"当前表与自身的连接查询，必须使用表别名\",\"自连接查询，可以是内连接查询，也可以是外连接查询 SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;\",\"例子：\",\"-- 查询员工及其所属领导的名字 select a.name, b.name from employee a, employee b where a.manager = b.id; -- 没有领导的也查询出来 select a.name, b.name from employee a left join employee b on a.manager = b.id;\"]},\"606\":{\"h\":\"联合查询 union, union all\",\"t\":[\"把多次查询的结果合并，形成一个新的查询结果\",\"联合的多个查询结果的列数、字段类型必须保持一致\",\"union all直接将结果合并，而union会自动去重\",\"联合查询比使用or效率高，不会使索引失效\",\"SELECT 字段列表 FROM 表A ... UNION [ALL] SELECT 字段列表 FROM 表B ...\"]},\"607\":{\"h\":\"子查询\",\"t\":[\"SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。\",\"子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个\",\"根据子查询结果可以分为： \",\"标量子查询（子查询结果为单个值）\",\"列子查询（子查询结果为一列）\",\"行子查询（子查询结果为一行）\",\"表子查询（子查询结果为多行多列）\",\"根据子查询位置可分为：\",\"WHERE 之后\",\"FROM 之后\",\"SELECT 之后\",\"根据与外层查询关系可分为：\",\"不相关子查询：子查询可以单独运行出结果，不依赖于外层查询\",\"相关子查询：子查询的执行依赖于外层查询的值\"]},\"608\":{\"h\":\"标量子查询\",\"t\":[\"子查询返回的结果是单个值，如数字、字符串、日期等。\",\"常用操作符：= <> > >= < <=\",\"例子：\",\"-- 查询销售部所有员工 select id from dept where name = '销售部'; -- 根据销售部部门ID，查询员工信息 select * from employee where dept = 4; -- 合并（子查询） select * from employee where dept = (select id from dept where name = '销售部');\"]},\"609\":{\"h\":\"列子查询\",\"t\":[\"返回的结果是一列（可以是多行）。\",\"常用操作符： \",\"操作符\",\"描述\",\"IN\",\"在指定的集合范围内，多选一\",\"NOT IN\",\"不在指定的集合范围内\",\"ANY\",\"子查询返回列表中，有任意一个满足即可\",\"SOME\",\"与ANY等同，使用SOME的地方都可以使用ANY\",\"ALL\",\"子查询返回列表的所有值都必须满足\",\"例子：\",\"-- 查询比财务部所有人工资都高的员工信息 select * from employee where salary > all(select salary from employee where dept = (select id from dept where name = '财务部')); -- 查询比研发部任意一人工资高的员工信息 select * from employee where salary > any(select salary from employee where dept = (select id from dept where name = '研发部'));\"]},\"610\":{\"h\":\"行子查询\",\"t\":[\"返回的结果是一行（可以是多列）\",\"常用操作符：=, <, >, IN, NOT IN\",\"例子：\",\"-- 查询与xxx的薪资及直属领导相同的员工信息 select * from employee where (salary, manager) = (12500, 1); select * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');\"]},\"611\":{\"h\":\"表子查询\",\"t\":[\"返回的结果是多行多列\",\"常用操作符：IN\",\"例子：\",\"-- 查询与xxx1，xxx2的职位和薪资相同的员工 select * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2'); -- 查询入职日期是2006-01-01之后的员工，及其部门信息 select e.*, d.* from (select * from employee where entrydate > '2006-01-01') as e left join dept as d on e.dept = d.id;\"]},\"612\":{\"h\":\"SQL性能分析\",\"t\":[\"执行频率\",\"SHOW GLOBAL STATUS LIKE 'Com_______';\",\"慢查询日志 指定SQL语句执行时间超过某个时间，就被视为慢查询，并记录下日志\",\"-- 开启MySQL慢日志查询开关 slow_query_log=1 -- 设置超时时间为2秒 long_query_time=2\",\"profile 在SQL优化时分析具体的时间开销\",\"-- have_profiling参数查看当前MySQL是否支持profile操作 SELECT @@have_profiling; -- 开启profiling SET profiling = 1; -- 查看每一条SQL的耗时基本情况 show profiles; -- 查看指定query_id的SQL语句各个阶段的耗时情况 show profile for query query_id; -- 查看指定query_id的SQL语句的CPU使用情况 show profile cpu for query query_id;\"]},\"613\":{\"h\":\"SQL 优化\"},\"614\":{\"h\":\"insert 优化\",\"t\":[\"批量插入数据，一次插入的数据不建议超过1000条，500 - 1000 为宜\",\"手动控制事务\",\"主键顺序插入，性能要高于乱序插入\",\"大批量插入数据，如几百万条记录，使用insert性能较低。建议使用load指令将数据文件加载到数据表中\",\"-- 客户端连接服务端时，加上参数 -–local-infile mysql –-local-infile -u root -p -- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关 set global local_infile = 1; select @@local_infile; -- 执行load指令将准备好的数据，加载到表结构中。字段间用逗号分割，行末添加换行 load data local infile '/root/sql.dat' into table tb_user fields terminated by ',' lines terminated by '\\\\n' ;\"]},\"615\":{\"h\":\"主键优化\",\"t\":[\"在InnoDB存储引擎中，表数据都是根据主键按序组织存放的，这种存储方式的表称为索引组织表（Index Organized Table - IOT）。\",\"行数据存储在聚集索引的叶子节点上，记录在逻辑结构Page页中，每个页的大小是有限的，因此如果插入的数据行row在该页存储不下，将会存储到下一页中，页与页之间通过指针连接。\",\"索引组织表\",\"但是如果主键是乱序插入的话，就会导致需要插入的位置为一页中间的位置，可能需要进行页分裂。\",\"页分裂：相邻页的空间都写满后，如果需要在中间插入一个新的数据行，必须对页进行分裂操作。\",\"页分裂1\",\"页分裂2\",\"页合并：当删除一行记录时，实际上记录并没有被物理删除，只是被标记为删除，并且它的空间允许被其他记录使用。当页中删除的记录达到 MERGE_THRESHOLD（默认50%，可指定），InnoDB会开始寻找邻近页，看是否可以将多个页合并以优化空间使用。\",\"页合并1\",\"页合并2\",\"主键设计原则：\",\"满足业务需求的情况下，尽量降低主键的长度。二级索引的叶子节点保存的就是主键，所以主键小占用的空间也就会少。\",\"插入数据时，尽量选择顺序插入，尽量使用 AUTO_INCREMENT 自增主键\",\"尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号，占用空间大。\",\"业务操作时，避免对主键的修改\"]},\"616\":{\"h\":\"order by 优化\",\"t\":[\"Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作。所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序，性能较低。\",\"Using index：通过有序索引顺序扫描直接返回有序数据。借助已经有序的索引，不需要额外排序，因此性能高。\",\"如果order by的字段存在索引，符合索引的排序顺序，且遵守最左前缀法则，则会直接using index，否则using filesort。\",\"准则：\",\"根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则\",\"尽量使用覆盖索引\",\"多字段排序需要注意联合索引在创建时的规则（ASC/DESC）\",\"如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）\"]},\"617\":{\"h\":\"group by 优化\",\"t\":[\"在分组操作时，可以通过索引来提高效率，尽量规避 using temporary 的分组\",\"分组操作时，索引的使用也满足最左前缀法则\"]},\"618\":{\"h\":\"limit 优化\",\"t\":[\"在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低。如limit 2000000, 10，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。\",\"优化方案：一般分页查询时，通过创建覆盖索引能够提高性能，可以通过覆盖索引加子查询的形式进行优化\",\"例如：\",\"-- 此语句耗时很长 select * from tb_sku limit 9000000, 10; -- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询 select id from tb_sku order by id limit 9000000, 10; -- 下面的语句会报错，因为 MySQL 不支持 in 子句里面使用 limit -- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10); -- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度 select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;\"]},\"619\":{\"h\":\"count 优化\",\"t\":[\"如果数据量很大，执行count操作是非常耗时的。不同存储引擎的 count 实现机制不同：\",\"MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（不使用带条件的count）\",\"InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累积计数。\",\"优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者用redis\",\"count的用法： 对于一个row，如果count函数的参数对应的字段不是NULL，累计值就加一，最后返回累计值。\",\"用法\",\"含义\",\"count(主键)\",\"InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键自然不可能为null）\",\"count(字段)\",\"没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加\",\"count(1)\",\"InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加\",\"count(*)\",\"InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加\",\"由于主键必然非空，因此count(主键) = count(*) = count(1)，而 count(null) 返回0 性能排序：count(字段) < count(主键) < count(1) < count(*)，所以尽量使用 count(*)\"]},\"620\":{\"h\":\"update 优化\",\"t\":[\"执行删、改操作会对数据进行加锁，且行锁的性能高于表锁。InnoDB 的行锁是针对索引加锁，并且该索引不能失效，否则会从行锁升级为表锁。因此建议尽量使用覆盖索引。\",\"如以下两条语句： update student set no = '123' where id = 1; 此SQL由于id有主键索引，所以只会锁这一行；update student set no = '123' where name = 'test'; 此SQL由于name没有索引，所以会把整张表都锁住进行数据更新。\"]},\"621\":{\"h\":\"视图\",\"t\":[\"视图（View）是一种虚拟存在的表。视图中的数据并不实际存储在数据库中，数据来自定义视图的查询中使用的表(称为基表)，并且在使用视图时动态生成。通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以在创建视图时，主要工作落在创建SQL查询语句上。\"]},\"622\":{\"h\":\"语法\",\"t\":[\"创建视图 CREATE [ OR REPLACE ] VIEW 视图名称[(列名列表)] AS SELECT语句 [ WITH [ CASCADED | LOCAL ] CHECK OPTION ] 如：create or replace view stu_wll as select id, name from student where id <= 10;\",\"查看所有视图 show table status where comment='view';\",\"查看创建视图语句 SHOW CREATE VIEW 视图名称;\",\"查看视图数据 SELECT * FROM 视图名称;\",\"修改视图\",\"CREATE[OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT 语句[ WITH[ CASCADED | LOCAL ] CHECK OPTION ]\",\"ALTER VIEW 视图名称 [(列名列表)] AS SELECT语句 [WITH [CASCADED | LOCAL] CHECK OPTION] 如：alter view stu_v_1 as select id, name from student where id <= 10;\",\"删除视图 DROP VIEW [IF EXISTS] 视图名称 [, 视图名称 ... ]\"]},\"623\":{\"h\":\"检查选项\",\"t\":[\"MySQL允许一个视图依赖另一个视图，无论是否使用WITH CHECK OPTION，都会向下查询所依赖视图中的规则以保持一致性。 如果使用WITH CHECK OPTION创建视图，MySQL会通过视图检查正在更改的每个行，例如插入，更新，删除，以使其符合视图的定义。CASCADED (默认) 和 LOCAL 限定了检查的范围。\",\"CASCADED - 级联 自该视图起，向下所依赖视图的规则都将进行检查。\",\"-- 比如下面的例子：创建stu_V_l 视图，id是小于等于 20的。 create or replace view stu_V_l as select id,name from student where id <=20; -- 再创建 stu_v_2 视图，20 >= id >=10。 create or replace view stu_v_2 as select id,name from stu_v_1 where id >=10 with cascaded check option; -- 再创建 stu_v_3 视图。 create or replace view stu_v_3 as select id,name from stu_v_2 where id<=15; -- 这条数据能够成功，stu_v_3 没有开检查选项所以不会判断 id 是否小于等于15。但是stu_v_2的check option是级联的，因此会检查 stu_v_2 以及 stu_v_1 的条件。 insert into stu_v_3 values(17,'Tom');\",\"cascade_cp\",\"LOCAL - 本地 仍会向下查询依赖视图的规则，但具体是否检查看各自视图的定义。 \"]},\"624\":{\"h\":\"更新条件\",\"t\":[\"要使视图可更新，视图中的行与基表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新：\",\"聚合函数或窗口函数 (SUM()、MIN()、MAX()、COUNT() 等)\",\"DISTINCT\",\"GROUP BY\",\"HAVING\",\"UNION 或者 UNION ALL\"]},\"625\":{\"h\":\"作用\",\"t\":[\"简单 视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。\",\"安全 数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图可以让用户只能查询和修改他们所能见到的数据\",\"数据独立 视图可帮助用户屏蔽真实表结构变化带来的影响。\",\"总而言之，视图类似于给表加上一个外壳，用户通过这个外壳访问表的时候，只能按照所设计的方式进行访问与更新。\"]},\"626\":{\"h\":\"存储过程\"},\"627\":{\"h\":\"概念\",\"t\":[\"存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，即语言层面的代码封装与重用。调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，提高数据处理的效率。\",\"特点:\",\"封装\",\"复用\",\"可以接收参数，也可以返回数据\",\"减少网络交互，提升效率\"]},\"628\":{\"h\":\"基本语法\",\"t\":[\"创建\",\" CREATE PROCEDURE 存储过程名称( [参数列表] ) BEGIN SQL 语句 END;\",\"注: 在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter更换SQL语句的结束符。默认是分号作为结束符。\",\"调用 CALL 名称 ([参数]);\",\"查看\",\"-- 查询指定数据库的存储过程及状态信息 SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = 'xxx'; -- 查询某个存储过程的定义 SHOW CREATE PROCEDURE 存储过程名称;\",\"删除 DROP PROCEDURE [ IF EXISTS ] 存储过程名称;\"]},\"629\":{\"h\":\"控制语句\"},\"630\":{\"h\":\"if\",\"t\":[\"IF 条件1 THEN ..... ELSEIF 条件2 THEN -- 可选 ..... ELSE -- 可选 ..... END IF;\"]},\"631\":{\"h\":\"参数\",\"t\":[\"类型\",\"含义\",\"备注\",\"IN\",\"该类参数作为输入，调用时需要传入值\",\"默认\",\"OUT\",\"该类参数作为输出，作为调用的返回值\",\"INOUT\",\"既可以作为输入参数，也可以作为输出参数\",\"示例：\",\"create procedure p4(in score int, out result varchar(10)) begin if score >= 85 then set result := '优秀'; elseif score >= 60 then set result := '及格'; else set result := '不及格'; end if; end; call p4(18, @result); select @result; create procedure p5(inout score double) begin set score := score * 0.5; end; set @score = 198; call p5(@score); select @score;\"]},\"632\":{\"h\":\"case\",\"t\":[\"-- 语法1 - 值判断 CASE case_value WHEN when_value1 THEN statement_list1 [ WHEN when_value2 THEN statement_list2] ... [ ELSE statement_list ] END CASE; -- 语法2 - 逻辑判断 CASE WHEN search_condition1 THEN statement_list1 [WHEN search_condition2 THEN statement_list2] ... [ELSE statement_list] END CASE; -- 注：如果判定条件有多个，多个条件之间可以使用 and 或 or 进行连接。\"]},\"633\":{\"h\":\"循环\",\"t\":[\"-- while - 先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑 WHILE 条件 DO SQL逻辑... END WHILE; -- repeat - 先执行一次逻辑，然后判定UNTIL条件是否满足，如果满足，则退出。如果不满足，则继续下一次循环 REPEAT SQL逻辑... UNTIL 条件 END REPEAT; -- loop - 配合leave, iterate使用 [label:] LOOP SQL逻辑... -- 退出指定标记的循环体 leave lable; -- 直接进入下一次循环 iterate lable; END LOOP [label];\"]},\"634\":{\"h\":\"游标\",\"t\":[\"游标（CURSOR）是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。\",\"声明游标： DECLARE 游标名称 CURSOR FOR 查询语句\",\"打开游标： OPEN 游标名称\",\"获取游标记录： FETCH 游标名称 INTO 变量 [ ,变量 ]\",\"关闭游标 CLOSE 游标名称\",\"条件处理程序： 条件处理程序（Handler）可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。 具体语法为：DECLARE handler_action HANDLER FOR condition_value [, condition value] ... statement 其中，handler_action 的取值有：\",\"CONTINUE：继续执行当前程序\",\"EXIT：终止执行当前程序\",\"condition_value 的取值有:\",\"SQLSTATE sqlstate_value：指定状态码，如02000\",\"SQLWARNING：所有以01开头的SQLSTATE代码的简写\",\"NOT FOUND：所有以02开头的SQLSTATE代码的简写\",\"SQLEXCEPTION：所有没被 SQLWARNING 或 NOT FOUND 捕获的SQLSTATE代码的简写\",\"示例： 根据传入的参数uage，来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名（name）和专业（profession），并将用户的姓名和专业插入到所创建的一张新表（id，name，profession）中。\",\"create procedure p1l(in uage int) begin -- 注：必须先声明普通变量，再声明游标 declare uname varchar(100); decLare upro varchar(100); -- 声明游标 declare u_cursor cursor for select name,profession from tb_user where age <= uage; -- 当条件处理程序的处理的状态码为02000的时候，就会退出。 declare exit handler for SQLSTATE '02000' close u_cursor; drop table if exists tb_user_pro; create table if not exists tb_user_pro( id int primary key auto_increment, name varchar(100), profession varchar(100) ); -- 开启游标 open u_cursor; while true do -- 获取游标中的记录 fetch u_cursor into uname,Upro; insert into tb_user_pro values(null, uname, upro); end while; close u_cursor; end;\"]},\"635\":{\"h\":\"存储函数\",\"t\":[\"存储函数是有返回值的存储过程，存储函数的参数只能是 IN 类型。但一般都可以用存储过程替换。\",\"语法：\",\"CREATE FUNCTION 存储函数名称 ([ 参数列表 ]) RETURNS type [characteristic ...] BEGIN -- SQL语句 RETURN ...; END ;\",\"其中，characteristic可选值有：\",\"DETERMINISTIC：相同的输入参数总是产生相同的结果\",\"NO SQL ：不包含 SQL 语句。\",\"READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句。\"]},\"636\":{\"h\":\"触发器\",\"t\":[\"触发器是与表有关的数据库对象，指在insert/update/delete之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。\",\"触发器使用别名OLD和NEW来引用触发器中发生变化的记录内容。目前MySQL触发器只支持行级触发，不支持语句级触发，即变化的行数就是触发器执行的次数。\",\"触发器类型\",\"NEW 和 OLD\",\"INSERT\",\"NEW 表示将要或者已经新增的数据\",\"UPDATE\",\"OLD表示修改之前的数据，NEW表示将要或已经修改后的数据\",\"DELETE\",\"OLD表示将要或者已经删除的数据\",\"示例：\",\"-- 创建 CREATE TRIGGER trigger_name BEFORE/AFTER INSERT/UPDATE/DELETE ON tbl_name FOR EACH ROW -- 行级触发器 BEGIN trigger_stmt; END; -- 查看 SHOW TRIGGERS; -- 删除 DROP TRIGGER [schema_name.]trigger_name;\"]},\"637\":{\"h\":\"InnoDB 引擎架构\",\"t\":[\"InnoDB整体业务逻辑： 当业务操作的时候直接操作的是内存缓冲区，如果缓冲区当中没有数据，则会从磁盘中加载到缓冲区，增删改查都是在缓冲区的，后台线程以一定的速率刷新到磁盘。\",\"InnoDB存储架构\"]},\"638\":{\"h\":\"内存结构\",\"t\":[\"InnoDB内存结构\",\"Buffer Pool 缓冲池是主内存中的一个区域，可以缓存磁盘上经常操作的数据。在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘I0，加快处理速度。\",\"缓冲池以Page页为单位，底层采用链表数据结构管理Page。根据状态将Page分为三种类型：\",\"free page：空闲page，未被使用\",\"clean page：被使用的page，数据没有被修改过\",\"dirty page：脏页，被使用过，且数据被修改过，即内存数据和磁盘数据不一致\",\"Change Buffer 更改缓冲区，针对非唯一二级索引页。在执行DML语句时，如果这些数据Page没有在Buffer Pool中，不会直接操作磁盘，而会将数据变更记录在 Change Buffer 中，在未来数据被读取时，再将数据合并恢复到Buffer Pool中，再将合并后的数据刷新到磁盘中。\",\"与聚集索引不同，二级索引通常是非唯一的，并且以相对随机的顺序插入二级索引。同样，删除和更新可能会影响索引树中不相邻的二级索引页，如果每一次都操作磁盘，会造成大量的磁盘IO。有了 ChangeBuffer 之后，我们可以在缓冲池中进行合并处理，减少磁盘IO。\",\"Adaptive Hash Index 自适应hash索引，用于优化对Buffer Pool数据的查询。MySQL的innoDB引擎中虽然没有直接支持hash索引，但是给我们提供了自适应hash索引。hash索引在进行等值匹配时，一般性能是要高于B+树的，但是hash索引不适合做范围查询、模糊匹配等。InnoDB存储引擎会监控对表上各索引页的查询，如果观察到在特定的条件下hash索引可以提升速度，则建立hash索引，称之为自适应hash索引。\",\"InnoDB的自适应哈希索引，无需人工干预，由系统根据情况自动完成。\",\"Log Buffer 日志缓冲区，用于保存要写入到磁盘中的log日志数据（redo log 、undo log）。默认大小为16MB，日志缓冲区的日志会定期刷新到磁盘中。如果需要更新、插入或删除多行的事务，增加日志缓冲区的大小可以节省磁盘 I/O。\",\"涉及参数：\",\"innodb_log_buffer_size 缓冲区大小\",\"innodb_flush_log_at_trx_commit 日志刷新到磁盘时机，取值有三个： \",\"0：每秒将日志写入并刷新到磁盘一次\",\"1：默认值，日志在每次事务提交时写入并刷新到磁盘\",\"2：日志在每次事务提交后写入，并每秒刷新到磁盘一次\"]},\"639\":{\"h\":\"磁盘结构\",\"t\":[\"InnoDB磁盘结构\",\"System Tablespace 系统表空间是更改缓冲区的存储区域。如果表是在系统表空间而不是每个表文件或通用表空间中创建的，它也可能包含表和索引数据。参数 innodb_data_file_path，默认文件为ibdata1。\",\"File-Per-Table Tablespaces 如果开启了innodb_file_per_table开关，则每个表的文件表空间包含单个InnoDB表的数据和索引 ，并存储在文件系统上的单个数据文件中。\",\"General Tablespaces 通用表空间，需要通过 CREATE TABLESPACE 语法创建通用表空间，在创建表时，可以指定该表空间。\",\"-- 创建表空间 CREATE TABLESPACE ts_name ADD DATAFILE 'file_name' ENGINE = engine_name; -- 创建表时指定表空间 CREATE TABLE xxx ... TABLESPACE ts_name;\",\"Undo Tablespaces 撤销表空间，MySQL实例在初始化时会自动创建两个默认的undo表空间（初始大小16M），用于存储undo log日志。\",\"Temporary Tablespaces InnoDB 使用会话临时表空间和全局临时表空间，存储用户创建的临时表等数据。\",\"Doublewrite Buffer Files 双写缓冲区，InnoDB引擎将数据页从Buffer Pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系统异常时恢复数据。\",\"Redo Log 重做日志，是用来实现事务的持久性。该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log），前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息存到该日志中, 用于在刷新脏页到磁盘发生错误时, 进行数据恢复。\"]},\"640\":{\"h\":\"后台线程\",\"t\":[\"在InnoDB的后台线程中，分为4类，分别是：Master Thread 、IO Thread、Purge Thread、Page Cleaner Thread。\",\"Master Thread 核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中, 保持数据的一致性，还包括脏页的刷新、合并插入缓存、undo页的回收。\",\"IO Thread 在InnoDB存储引擎中大量使用了AIO(异步IO)来处理IO请求, 这样可以极大地提高数据库的性能，而IO Thread主要负责这些IO请求的回调。可以通过show engine innodb status; 查询当前后台线程的状态。\",\"线程类型\",\"默认个数\",\"职责\",\"Read Thread\",\"4\",\"负责读操作\",\"Write Thread\",\"4\",\"负责写操作\",\"Log Thread\",\"1\",\"负责将日志缓冲区刷新到磁盘\",\"Insert Buffer Thread\",\"1\",\"负责将写缓冲区内容刷新到磁盘\",\"Purge Thread 主要用于回收事务已经提交了的undo log，在事务提交之后，undo log可能不用了，就用它来回收。\",\"Page Cleaner Thread 协助 Master Thread 刷新脏页到磁盘的线程，它可以减轻 Master Thread 的工作压力，减少阻塞。\"]},\"641\":{\"h\":\"日志\"},\"642\":{\"h\":\"错误日志\",\"t\":[\"错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，建议首先查看此日志。\",\"查看错误日志位置： show variables like '%log_error%';\"]},\"643\":{\"h\":\"二进制日志\",\"t\":[\"二进制日志（BINLOG）记录了所有的DDL（数据定义语言）语句和DML（数据操纵语言）语句，但不包括数据查询（SELECT、SHOW）语句，以二进制的形式保存在磁盘中。binlog 是 MySql 的逻辑日志，并且由 Server 层进行记录，使用任何存储引擎的 mysql 数据库都会记录 binlog，默认开启。\",\"作用：\",\"灾难时的数据恢复\",\"MySQL的主从复制\",\"查看参数：show variables like '%log_bin%'; 查询结果中：\",\"log_bin_basename：当前数据库服务器的binlog日志的前缀，具体文件名需要再加上编号(从000001开始)\",\"log_bin_index：binlog的索引文件，记录了当前服务器关联的binlog文件有哪些\",\"日志格式：\",\"格式\",\"含义\",\"STATEMENT\",\"基于SQL语句的日志记录，记录的是SQL语句，对数据进行修改的SQL都会记录在日志文件中。\",\"ROW\",\"基于行的日志记录，记录的是每一行的数据变更。（默认）\",\"MIXED\",\"混合了STATEMENT和ROW两种格式，默认采用STATEMENT，在某些特殊情况下会自动切换为ROW进行记录。\",\"通过show variables like '%binlog_format%;查看\",\"日志查看：\",\"mysqlbinlog [ 参数选项 ] logfilename 参数选项： -d #指定数据库名称，只列出指定的数据库相关操作。 -o #忽略掉日志中的前n行命令。 -v #将行事件(数据变更)重构为SQL语句 -vv #将行事件(数据变更)重构为SQL语句，并输出注释信息\",\"清理日志：\",\"reset master 删除全部 binlog 日志。删除之后，日志编号将从000001重新开始\",\"purge master logs to 'binlog.*' 删除 * 编号之前的所有日志\",\"purge master logs before 'yyyy-mm-dd hh24:mi:ss' 删除\\\"yyyy-mm-dd hh24:mi:ss\\\" 之前产生的所有日志\",\"也可以在mysql的配置文件中配置二进制日志的过期时间，日志过期会自动删除: show variables like '%binlog_expire_logs_seconds%';\"]},\"644\":{\"h\":\"查询日志\",\"t\":[\"查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。 查询日志默认未开启，如需开启修改配置文件。开启查询日志后，所有客户端的增删改查操作都会记录在该日志文件中，长时间运行该日志文件将会非常大。\",\"查看参数： show variables like '%general%';\"]},\"645\":{\"h\":\"慢查询日志\",\"t\":[\"慢查询日志记录了所有执行时间超过参数long_query_time设置值并且扫描记录数不小于min_examined_row_limit的所有的SQL语句的日志，long_query_time默认为10秒，最小为0，精度可以到微秒。且默认情况下不会记录管理语句，也不会记录不使用索引进行查找的查询。 慢查询日志默认未开启，如需开启修改配置文件。\"]},\"646\":{\"h\":\"主从复制\"},\"647\":{\"h\":\"概念\",\"t\":[\"主从复制是指将主数据库 Master 的 DDL 和 DML 操作通过二进制日志传到从库服务器 Slave 中，然后在从库上对这些日志重新执行（重做），从而使得从库和主库的数据保持同步。\",\"MySQL支持一台主库同时向多台从库进行复制，从库同时也可以作为其他从服务器的主库，实现链状复制。\",\"作用：\",\"主库出现问题，可以快速切换到从库提供服务\",\"实现读写分离，降低主库的访问压力\",\"可以在从库中执行备份，以避免备份期间影响主库服务\"]},\"648\":{\"h\":\"原理\",\"t\":[\"MySQL主从复制的核心是二进制日志，过程如图：\",\"主从复制\",\"具体分成三步：\",\"Master 主库在事务提交时，会把数据变更记录在二进制日志文件 binlog 中。\",\"从库读取主库的二进制日志文件 binlog ，写入到从库的中继日志 Relay Log 。\",\"slave重做中继日志中的事件，将改变反映它自己的数据。\"]},\"649\":{\"h\":\"搭建\",\"t\":[\"准备两个MySQL服务\",\"配置主库 show master status 查看二进制坐标\",\"配置从库 change master to master_host=*, master_user=*,master_password=*, master_log_file=*, master_log_pos=*;\",\"参数名\",\"含义\",\"8.0.23之前\",\"SOURCE_HOST\",\"主库IP地址\",\"MASTER_HOST\",\"SOURCE_USER\",\"连接主库的用户名\",\"MASTER_USER\",\"SOURCE_PASSWORD\",\"连接主库的密码\",\"MASTER_PASSWORD\",\"SOURCE_LOG_FILE\",\"binlog 日志文件名\",\"MASTER_LOG_FILE\",\"SOURCE_LOG_POS\",\"binlog 日志文件位置\",\"MASTER_LOG_POS\",\"开启同步\",\"-- 8.0.22之后： start replica; -- 8.0.22之前： start slave;\",\"查看主从同步状态\",\"-- 8.0.22之后： start replica status; -- 8.0.22之前： start slave status;\"]},\"650\":{\"h\":\"分库分表\"},\"651\":{\"h\":\"问题分析\",\"t\":[\"随着互联网及移动互联网的发展，应用系统的数据量也是成指数式增长，若采用单数据库进行数据存储，存在以下性能瓶颈：\",\"IO瓶颈 热点数据太多，数据库缓存不足，产生大量磁盘IO，效率较低。请求数据太多，带宽不够，网络IO瓶颈。\",\"CPU瓶颈 排序、分组、连接查询、聚合统计等SQL会耗费大量的CPU资源，请求数太多，CPU出现瓶颈。\",\"分库分表示意图\",\"为了解决上述问题，需要对数据库进行分库分表处理。其中心思想是将数据分散存储，使得单一数据库/表的数据量变小来缓解单一数据库的性能瓶颈问题，从而达到提升数据库性能的效果。\"]},\"652\":{\"h\":\"拆分策略\",\"t\":[\"按形式分为垂直拆分、水平拆分。按粒度分为分库和分表，因此共四种拆分策略。 在业务系统中，为了缓解磁盘IO及CPU的性能瓶颈，到底是垂直拆分，还是水平拆分；具体是分库，还是分表，都需要根据具体的业务需求具体分析。\",\"拆分策略\",\"垂直分库 以表为依据，根据业务将不同表拆分到不同库中。 特点：\",\"每个库的表结构都不一样\",\"每个库的数据也不一样\",\"所有库的并集是全量数据\",\"垂直分表 以字段为依据，根据字段属性将不同字段拆分到不同表中。 特点：\",\"每个表的结构都不一样\",\"每个表的数据也不一样，一般通过主键/外键关联\",\"所有表的并集是全量数据\",\"水平分库 以字段为依据，按照一定策略，将一个库的数据拆分到多个库中。 特点：\",\"每个库的表结构都一样\",\"每个库的数据都不一样\",\"所有库的并集是全量数据\",\"水平分表 以字段为依据，按照一定策略，将一个表的数据拆分到多个表中。 特点：\",\"每个库的表结构都一样\",\"每个库的数据都不一样\",\"所有库的并集是全量数据\"]},\"653\":{\"h\":\"实现技术 - MyCat\",\"t\":[\"shardingJDBC：基于AOP原理，在应用程序中对本地执行的SQL进行拦截，解析、改写、路由处理。需要自行编码配置实现，只支持java语言，性能较高。\",\"MyCat：数据库分库分表中间件，不用调整代码即可实现分库分表，支持多种语言，性能不及前者。\",\"以下介绍以MyCat为例。\"]},\"654\":{\"h\":\"概述\",\"t\":[\"Mycat是开源的、活跃的、基于Java语言编写的MySQL数据库中间件。可以像使用mysql一样来使用mycat，对于开发人员来说根本感觉不到mycat的存在，开发人员只需要连接MyCat即可，而具体底层用到几台数据库，每一台数据库服务器里面存储了什么数据，都无需关心。 具体的分库分表的策略，只需要在MyCat中配置即可。\",\"优势：\",\"性能可靠稳定\",\"强大的技术团队\",\"体系完善\",\"社区活跃\"]},\"655\":{\"h\":\"结构\",\"t\":[\"MyCat概念图\",\"MyCat的逻辑结构主要包括逻辑库、逻辑表、分片规则、分片节点。而具体的数据存储还是在物理结构，也就是数据库服务器中存储的。\"]},\"656\":{\"h\":\"分片规则\",\"t\":[\"范围分片：根据指定的字段及其配置的范围与数据节点的对应情况来决定数据属于哪一个分片\",\"取模分片：根据指定的字段值与节点数量进行求模运算，根据运算结果决定该数据属于哪一个分片\",\"一致性Hash分片：相同的哈希因子计算值总是被划分到相同的分区表中\",\"枚举分片：通过在配置文件中配置可能的枚举值, 指定数据分布到不同数据节点上。适用于按照省份、性别、状态拆分数据等业务\",\"应用指定算法：运行阶段由应用自主决定路由到哪个分片，直接根据字符子串（必须是数字）计算分片号\",\"固定分片Hash算法：指定二进制位进行与运算\",\"字符串Hash解析算法：截取字符串中的指定位置的子字符串，进行hash算法，算出分片\",\"按天分片算法：按照日期及对应的时间周期分片\",\"自然月分片：按照月份来分片，每个自然月为一个分片\"]},\"657\":{\"h\":\"管理与监控\",\"t\":[\"执行原理： \",\"Mycat-web（Mycat-eye）是 Mycat 可视化运维的管理和监控平台，引入ZooKeeper作为配置中心，可以管理多个节点\",\"Mycat-web 管理和监控 Mycat 的流量、连接、活动线程和内存等，具备 IP 白名单、邮件告警等模块，还可以统计 SQL 并分析慢 SQL 和高频 SQL 等，为优化 SQL 提供依据\"]},\"658\":{\"h\":\"读写分离\",\"t\":[\"读写分离是把对数据库的读和写操作分开,以对应不同的数据库服务器。主数据库提供写操作，从数据库提供读操作，这样能有效地减轻单台数据库的压力。\",\"例如用MyCat实现的一主一从读写分离示意图：\",\"主从分离示意图\",\"将写操作分配到 Master 上，读操作分配到 Slave 上，实现负载均衡。但这种方案如果 Master 宕机，那么业务系统就只能读不能写了，因此可以引入双主双从：\",\"双主双从示意图\",\"一个主机 Master1 用于处理所有写请求，它的从机 Slave1 和另一台主机 Master2 还有它的从机 Slave2 负责所有读请求。当 Master1 主机宕机后，Master2 主机负责写请求，Master1、Master2 互为备机。\"]},\"659\":{\"h\":\"附录\"},\"660\":{\"h\":\"数据类型\"},\"661\":{\"h\":\"整型\",\"t\":[\"类型名称\",\"取值范围\",\"大小\",\"TINYINT\",\"-128〜127\",\"1个字节\",\"SMALLINT\",\"-32768〜32767\",\"2个宇节\",\"MEDIUMINT\",\"-8388608〜8388607\",\"3个字节\",\"INT (INTEGHR)\",\"-2147483648〜2147483647\",\"4个字节\",\"BIGINT\",\"-9223372036854775808〜9223372036854775807\",\"8个字节\",\"无符号在数据类型后加 unsigned 关键字。\"]},\"662\":{\"h\":\"浮点型\",\"t\":[\"类型名称\",\"说明\",\"存储需求\",\"FLOAT\",\"单精度浮点数\",\"4 个字节\",\"DOUBLE\",\"双精度浮点数\",\"8 个字节\",\"DECIMAL (M, D)，DEC\",\"压缩的“严格”定点数\",\"M+2 个字节\"]},\"663\":{\"h\":\"字符串\",\"t\":[\"类型名称\",\"说明\",\"存储需求\",\"CHAR(M)\",\"固定长度字符串\",\"M 字节，1<=M<=255\",\"VARCHAR(M)\",\"变长字符串\",\"L+1字节，在此，L< = M和 1<=M<=255\",\"TINYTEXT\",\"短文本字符串\",\"L+1字节，在此，L<2^8\",\"TEXT\",\"长文本字符串\",\"L+2字节，在此，L<2^16\",\"MEDIUMTEXT\",\"中等长度文本数据\",\"L+3字节，在此，L<2^24\",\"LONGTEXT\",\"极大文本数据\",\"L+4字节，在此，L<2^32\",\"ENUM\",\"枚举类型，只能有一个枚举字符串值\",\"1或2个字节，取决于枚举值的数目 (最大值为65535)\",\"SET\",\"一个设置，字符串对象可以有零个或 多个SET成员\",\"1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）\",\"一般定长的效率要高于变长字符串\"]},\"664\":{\"h\":\"二进制类型\",\"t\":[\"类型名称\",\"说明\",\"存储需求\",\"BIT(M)\",\"位字段类型\",\"大约 (M+7)/8 字节\",\"BINARY(M)\",\"固定长度二进制字符串\",\"M 字节\",\"VARBINARY (M)\",\"可变长度二进制字符串\",\"M+1 字节\",\"TINYBLOB (M)\",\"非常小的BLOB\",\"L+1 字节，在此，L<2^8\",\"BLOB (M)\",\"小 BLOB\",\"L+2 字节，在此，L<2^16\",\"MEDIUMBLOB (M)\",\"中等大小的BLOB\",\"L+3 字节，在此，L<2^24\",\"LONGBLOB (M)\",\"非常大的BLOB\",\"L+4 字节，在此，L<2^32\"]},\"665\":{\"h\":\"日期和时间\",\"t\":[\"类型名称\",\"日期格式\",\"日期范围\",\"存储需求\",\"YEAR\",\"YYYY\",\"1901 ~ 2155\",\"1 个字节\",\"TIME\",\"HH:MM:SS\",\"-838:59:59 ~ 838:59:59\",\"3 个字节\",\"DATE\",\"YYYY-MM-DD\",\"1000-01-01 ~ 9999-12-3\",\"3 个字节\",\"DATETIME\",\"YYYY-MM-DD HH:MM:SS\",\"1000-01-01 00:00:00 ~ 9999-12-31 23:59:59\",\"8 个字节\",\"TIMESTAMP\",\"YYYY-MM-DD HH:MM:SS\",\"1970-01-01 00:00:01 ~ 2038-01-19 03:14:07\",\"4 个字节\"]},\"666\":{\"h\":\"图形化界面工具\",\"t\":[\"Workbench(免费): http://dev.mysql.com/downloads/workbench/\",\"navicat(收费，试用版30天): https://www.navicat.com/en/download/navicat-for-mysql\",\"Sequel Pro(开源免费，仅支持Mac OS): http://www.sequelpro.com/\",\"HeidiSQL(免费): http://www.heidisql.com/\",\"phpMyAdmin(免费): https://www.phpmyadmin.net/\",\"SQLyog: https://sqlyog.en.softonic.com/\"]},\"667\":{\"h\":\"参考\",\"t\":[\"https://dhc.pythonanywhere.com/entry/share/?key=3ad29aad765a2b98b2b2a745d71bef715507ee9db8adbec98257bac0ad84cbe4#h1-u6743u9650u4E00u89C8u8868\",\"https://github.com/Buildings-Lei/mysql_note/blob/main/README.md\",\"https://www.bilibili.com/video/BV1Kr4y1i7ru?share_source=copy_web\",\"MySQL是怎样运行的: 从根儿上理解MySQL\"]},\"668\":{\"c\":[\"数据库\"]},\"669\":{\"c\":[\"MySQL\"]},\"670\":{\"h\":\"MySQL 深入原理\"},\"671\":{\"h\":\"配置文件与变量\",\"t\":[\"一般是安装目录或用户home目录下的ini/cnf文件，不同目录下的配置文件有优先级顺序，命令行中的参数优先级最高，多个组重复选项则后出现的优先级高。选项只能使用长形式。\",\"# 配置文件分多个组，用于特定的命令程序。还可以指定用于特定版本 [mysqld] option1 option2 = val # 但server组用于所有服务器程序，client组用于所有客户端程序 [server] ... [client] ...\",\"配置文件中大多数选项对应了MySQL中的某个系统变量，系统变量分为Global和Session两个作用域。\",\"- 查看系统变量, 默认session show global|session variable like \\\"defualt%\\\"; - 设置系统变量，默认session set [@@]global|session default_storage_engine = xxx;\",\"此外，运行时MySQL还包括上百个状态变量，也分Global和Session两个作用域。\",\"- 查看状态变量，默认session show global|session status like \\\"thread%\\\";\"]},\"672\":{\"h\":\"通信流程\",\"t\":[\"MySQL客户端向服务器进程发送请求并得到回复的过程本质上是一个进程间通信的过程，MySQL支持三种客户端进程和服务器进程的通信方式：\",\"TCP/IP: 通过网络协议进行通讯，客户端启动时用-h 指定主机 -P 指定端口\",\"命名管道和共享内存: 对于Windows用户，可以使用--enabled-named-pipe/--protocol=pipe 或 --shared-memory/--protocol=memory参数开启\",\"Unix域套接字: 对于类Unix系统，如果指定主机为localhost或者使用--protocol=socket参数，可以利用套接字通信\",\"MySQL服务器处理客户端请求的流程：\",\"MySQL服务器处理客户端请求\",\"连接管理：客户端进程采用上述的三种通信方式来与服务器进程建立连接。每个连接分配一个单独的线程处理，因此会用到连接池、线程复用等技术。\",\"解析与优化： \",\"查询缓存：完全一样的语句才会缓存，但需要额外的缓存维护开销。MySQL 8中已废弃。\",\"语法解析：词法解析、语法分析、语义分析等等\",\"查询优化：优化生成执行计划，可以用explain 语句查看某个语句的执行计划\",\"存储引擎：提供真实存取数据的功能，各种不同的存储引擎向上面的MySQL Server层提供统一的调用接口，包含十几个底层函数。\"]},\"673\":{\"h\":\"数据目录\",\"t\":[\"InnoDB, MyISAM等存储引擎本质上把表数据存储在OS的文件系统上，读写时需要与文件系统进行交互。\",\"MySQL的数据目录通过变量datadir定义\",\"每创建一个数据库，数据目录下就会新建一个同名的子目录\",\"InnoDB引擎中，每创建一个表，该db的子目录下就会新建一个表名.idb文件（默认独立表空间innodb_file_per_table）\",\"MyISAM引擎中，每创建一个表，生成表名.frm格式文件，表名.MYD数据文件，表名.MYI索引文件。\",\"其它文件包括服务器进程文件、服务器日志文件、证书密钥等\",\"OS的文件系统影响库名/表名的长度、文件大小、特殊字符处理等等\",\"系统数据库：\",\"数据库\",\"含义\",\"mysql\",\"核心数据库，存储MySQL服务器正常运行所需要的各种信息，包括时区、主从、用户、权限等\",\"information_schema\",\"提供了访问数据库元数据的各种表和视图，包含数据库、表、字段类型及访问权限等\",\"performance_schema\",\"为MySQL服务器运行时状态提供了一个底层监控功能，主要用于收集数据库服务器性能参数\",\"sys\",\"包含了一系列方便 DBA 和开发人员利用 performance_schema性能数据库进行性能调优和诊断的视图\"]},\"674\":{\"h\":\"字符集和比较规则\",\"t\":[\"MySQL共支持40多种字符集，查看支持的字符集的命令： show [character set | charset]; 其中：\",\"utf8: 在MySQL中指阉割过的utf8mb3字符集，长度1~3个字节\",\"utf8mb4: 正宗UTF8字符集，长度1~4个字节\",\"每个字符集有若干种比较规则，且有一个默认的规则，查看比较规则的命令： show collation; 例如，utf8mb3默认比较规则是utf8mb3_general_ci，表示针对通用语言且不区分大小写的规则。\",\"MySQL中有四个等级的字符集和比较规则：\",\"服务器级别：character_set_server, collation_server\",\"数据库级别：character_set_database, collation_database\",\"表级别：create ... character set utf8mb4 collate utf8_general_ci;\",\"列级别：column type character set utf8mb4 collate utf8_general_ci 如果没有指定，则会自底向上确定默认的字符集和比较规则。\",\"服务器处理请求时可能发生多次字符集转换：\",\"解码请求时使用character_set_client字符集\",\"处理请求时将转码为character_set_connection字符集\",\"处理过程中如果与字段的字符集不一致也会进行额外的转码\",\"返回结果时转换为character_set_results字符集\"]},\"675\":{\"h\":\"系统工具\",\"t\":[\"mysql mysql客户端工具\",\"语法 ： mysql [options] [database] 选项 ： -u, --user=name #指定用户名 -p, --password[=name] #指定密码 -h, --host=name #指定服务器IP或域名 -P, --port=port #指定连接端口 -e, --execute=name #执行SQL语句并退出。方便执行批处理脚本 示例： mysql -uroot –p123456 study -e \\\"select * from tb_sku\\\";\",\"mysqladmin 执行管理操作的客户端程序。可以用它来检查服务器的配置和当前状态、创建并删除数据库等。\",\"语法: mysqladmin [options] command ... 选项: -u, --user=name #指定用户名 -p, --password[=name] #指定密码 -h, --host=name #指定服务器IP或域名 -P, --port=port #指定连接端口 示例： mysqladmin -uroot –p1234 drop 'test01';\",\"mysqlbinlog 服务器生成的日志文件以二进制格式保存，需用mysqlbinlog查看这些文本\",\"语法 ： mysqlbinlog [options] log-files1 log-files2 ... 选项 ： -d, --database=name #指定数据库名称，只列出指定的数据库相关操作。 -o, --offset=n #忽略掉日志中的前n行命令。 -r,--result-file=name #将输出的文本格式日志输出到指定文件。 -s, --short-form #显示简单格式， 省略掉一些信息。 --start-datatime=date1 --stop-datetime=date2 #指定日期间隔内的所有日志。 --start-position=pos1 --stop-position=pos2 #指定位置间隔内的所有日志。 示例： mysqlbinlog -s binlog.00008\",\"mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。\",\"语法 ： mysqlshow [options] [db_name [table_name [col_name]]] 选项 ： --count #显示数据库及表的统计信息（数据库，表 均可以不指定） -i #显示指定数据库或者指定表的状态信息 示例： #查询test库中book表的详细情况 mysqlshow -uroot -p2143 test book --count\",\"mysqldump 用来备份数据库或在不同数据库之间进行数据迁移。备份内容包含创建表，及插入表的SQL语句。\",\"语法 ： mysqldump [options] db_name [tables] mysqldump [options] --database/-B db1 [db2 db3...] mysqldump [options] --all-databases/-A 连接选项 ： -u, --user=name #指定用户名 -p, --password[=name] #指定密码 -h, --host=name #指定服务器ip或域名 -P, --port=p #指定连接端口 输出选项： --add-drop-database #在每个数据库创建语句前加上 drop database 语句 --add-drop-table #在每个表创建语句前加上 drop table 语句 , 默认开启 ; 不开启 (--skip-add-drop-table) -n, --no-create-db #不包含数据库的创建语句 -t, --no-create-info #不包含数据表的创建语句 -d, --no-data #不包含数据 -T, --tab=name #自动生成两个文件：一个.sql文件，创建表结构的语句；一个.txt文件，数据文件 示例： mysqldump -uroot -p1234 -T D:/ db01 tb_score\",\"mysqlimport / source 客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。如果需要导入sql文件,可以使用mysql中的source 指令\",\"语法： mysqlimport [options] db_name textfile1 [textfile2...] source /root/xxxxx.sql 示例： mysqlimport -uroot -p2143 test /tmp/city.txt\"]},\"676\":{\"h\":\"存储引擎\"},\"677\":{\"h\":\"MySQL三大存储引擎\",\"t\":[\"存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎基于表而非基于库，因此也被称为表引擎。\",\"相关语法：\",\"-- 查询建表语句 show create table account; -- 建表时指定存储引擎 CREATE TABLE 表名( ... ) ENGINE=INNODB; -- 查看当前数据库支持的存储引擎 show engines;\",\"MySQL引擎列表\"]},\"678\":{\"h\":\"InnoDB\",\"t\":[\"InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL 5.5之后，InnoDB是默认的MySQL引擎。\",\"特点:\",\"DML 操作遵循 ACID 模型，支持事务\",\"行级锁，提高并发访问性能\",\"支持外键约束，保证数据的完整性和正确性\",\"文件：\",\"表名.ibd: InnoDB引擎的每张表都会对应这样一个独立表空间文件，存储该表的表结构、数据和索引\",\"innodb_file_per_table 参数决定多张表共用一个系统表空间还是每张表独立表空间 show variables like 'innodb_file_per_table'; 从idb文件提取表结构数据的工具： ibd2sdi xxx.ibd\"]},\"679\":{\"h\":\"MyISAM\",\"t\":[\"MyISAM 是 MySQL 早期的默认存储引擎。\",\"特点：\",\"不支持事务，不支持外键\",\"支持表锁，不支持行锁\",\"访问速度快\",\"文件：\",\"xxx.frm: 存储表结构信息\",\"xxx.MYD: 存储数据\",\"xxx.MYI: 存储索引\"]},\"680\":{\"h\":\"Memory\",\"t\":[\"Memory 引擎的表数据存储在内存中，受硬件、断电等问题的影响，因此只能将这些表作为临时表或缓存使用。缓存场景更多使用Redis。\",\"特点：\",\"存放在内存中，速度快\",\"默认hash索引\",\"文件：\",\"xxx.frm: 存储表结构信息\"]},\"681\":{\"h\":\"存储引擎特点\",\"t\":[\"特点\",\"InnoDB\",\"MyISAM\",\"Memory\",\"存储限制\",\"64TB\",\"有\",\"有\",\"事务安全\",\"支持\",\"-\",\"-\",\"锁机制\",\"行锁\",\"表锁\",\"表锁\",\"B+tree索引\",\"支持\",\"支持\",\"支持\",\"Hash索引\",\"-\",\"-\",\"支持\",\"全文索引\",\"支持（5.6版本之后）\",\"支持\",\"-\",\"空间使用\",\"高\",\"低\",\"N/A\",\"内存使用\",\"高\",\"低\",\"中等\",\"批量插入速度\",\"低\",\"高\",\"高\",\"支持外键\",\"支持\",\"-\",\"-\",\"总结InnoDB和MyISAM的区别：\",\"InnoDB支持事务, 而MyISAM不支持\",\"InnoDB支持行锁和表锁, 而MyISAM仅支持表锁, 不支持行锁\",\"InnoDB支持外键, 而MyISAM不支持\"]},\"682\":{\"h\":\"存储引擎选择\",\"t\":[\"InnoDB 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择\",\"MyISAM 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的\",\"Memory 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性\",\"在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。\"]},\"683\":{\"h\":\"InnoDB-记录格式\",\"t\":[\"实际的数据库数据在不同存储引擎中存放的格式一般是不同的，相同存储引擎也有不同的记录格式(行格式)。InnoDB将数据划分为若干页，以页作为磁盘和内存之间交互的基本单位，页大小为16KB。\",\"InnoDB设计了四种行格式：Compact, Redundant, Dynamic, Compressed，可以在创建或修改的表语句中指定ROW_FORMAT，默认Dynamic行格式。\"]},\"684\":{\"h\":\"Compact 行格式\",\"t\":[\"Compact行格式\",\"一条完整的记录分为记录的额外信息和记录的真实数据两部分组成。\",\"记录的额外信息\",\"变长字段长度列表：非NULL的变长字段/可变字符集字段的实际长度，按列逆序存放，每列占1~2个字节\",\"NULL值列表：允许NULL的列的标志位，1为NULL，0非NULL，按列逆序，高位用0补齐至整字节。\",\"记录头信息：固定的5个字节组成 \",\"记录的真实数据：真实列数据，以及三个隐藏字段\",\"row_id: 可选，没有主键/Unique字段的记录，引擎默认生成该隐藏列作为主键\",\"transaction_id: 最后一次插入或更新该行的事务 id\",\"roll_pointer: 回滚指针，指向该行的 undo log\"]},\"685\":{\"h\":\"Redundant 行格式\",\"t\":[\"MySQL 5.0 之前使用的行格式\",\"Redundant行格式\"]},\"686\":{\"h\":\"行溢出\",\"t\":[\"对于定长字段，无论真实数据大小，都会占用固定大小的空间，用0/空格补齐\",\"VARCHAR类型最多占用65535字节，但还依赖于字符集、列的限制等\",\"对于Compact和Redundant，如果某一列数据过大，只会存储该列前768个字节，然后用20个字节指向存储溢出数据的另一个页\",\"MySQL规定一个页中至少存放两行记录，以及列的数量，都会影响行溢出的临界点\"]},\"687\":{\"h\":\"Dynamic 和 Compressed 行格式\",\"t\":[\"MySQL 8.0 默认行格式就是Dynamic，与Compact类似，区别在于行溢出时，真实数据处仅有一个指针，指针存储所有数据字节的其它页。而Compressed会采用压缩算法对页面进行压缩，以节省空间\"]},\"688\":{\"h\":\"InnoDB-数据页\",\"t\":[\"InnoDB设计了多种类型的页，存放不同的信息，其中存放表中记录的是数据页，也称索引页（InnoDB中索引即数据）。\",\"数据页结构\",\"名称\",\"中文名\",\"占用空间大小\",\"描述\",\"File Header\",\"文件头部\",\"38字节\",\"页的一些通用信息\",\"Page Header\",\"页面头部\",\"56字节\",\"数据页专有的一些信息\",\"Infimum + Supremum\",\"最小记录和最大记录\",\"26不确定\",\"两个虚拟行记录\",\"User Records\",\"用户记录\",\"不确定\",\"实际存储的行记录内容\",\"Free Space\",\"空闲空间\",\"不确定\",\"页中尚未使用的空间\",\"Page Directory\",\"页面目录\",\"不确定\",\"页中某些记录的相对位置\",\"File Trailer\",\"文件尾部\",\"8字节\",\"校验页是否完整\"]},\"689\":{\"h\":\"User Records\",\"t\":[\"每插入一条记录，都会从Free Space分配一条记录的空间给User Records，Free Space分配完毕则该页使用完毕。若干个记录以及两个伪记录按主键大小串成一个单链表。\",\"数据页单链表\",\"其中每条记录的记录头部分：\",\"delete_mask: \",\"标记当前记录是否被删除\",\"删除后仅修改标志位和链表指针，记录空间成为可重用空间\",\"插入新纪录时会复用可重用空间\",\"min_rec_mask: B+树每层非叶子结点的最小记录\",\"n_owned: 该记录组所含的记录数，见页目录部分\",\"heap_no: \",\"当前记录在本页中的位置\",\"其中0、1对应最小(Infimum)和最大(Supremum)的伪记录\",\"完整记录之间根据主键大小排序。\",\"record_type: 当前记录类型 \",\"0 普通记录\",\"1 为B+树非叶节点记录\",\"2 最小记录(即Infimum伪记录)\",\"3 最大记录(即Supremum伪记录)。\",\"next_record: 当前记录真实数据到下一条记录真实数据的地址偏移量 (按列逆序放置正是为了提高缓冲命中率)\"]},\"690\":{\"h\":\"Page Directory\",\"t\":[\"对整个单链表查找记录性能低，因此采取分组索引策略：\",\"所有正常记录 (包括最小、最大记录，排除已删除记录) 划分为若干组\",\"每组最后一条记录（即最大记录）的头记录中的n_owned标记该组内记录数\",\"每组最后一条记录的地址偏移量抽取成索引，存放在Page Directory中构成页目录，其中每个偏移量称为槽\",\"槽的更新：\",\"初始时仅Infimum和Supremum两个组\",\"每插入一条记录，从页目录中找到主键值大于本记录的最小槽，然后把该槽的n_owned加一，直到该组内记录达到8条\",\"一个组内的记录达到8条后，再次插入新记录时，将该组拆分为一个4条记录的组和一个5条记录的组，并新增对应的槽\",\"数据页页目录\",\"因此，查找时:\",\"通过二分法确定该记录所在的槽，并借助前一个槽找到所在槽中主键值最小的记录\",\"通过记录的next_record遍历该槽查找记录\"]},\"691\":{\"h\":\"其它部分\",\"t\":[\"Page Header: 针对数据页，存储本页记录的状态信息，占56字节\",\"File Header: 针对所有页，存储页的通用信息，如前后页指针构成双链表，占38字节\",\"File Trailer: 针对所有页，用于同步正确性检验，占8字节，前4字节校验和，后四字节日志序列位置LSN\",\"通用页结构\"]},\"692\":{\"h\":\"InnoDB-表空间\",\"t\":[\"InnoDB逻辑存储结构\"]},\"693\":{\"h\":\"区 - Extent\",\"t\":[\"行 - Row：InnoDB 是面向行的，即数据是按行进行存放的\",\"页 - Page：页是组成区的最小单元，页也是InnoDB磁盘管理的最小单元\",\"区是表空间的单元结构，每个区的大小固定1M，每256个页划为一组\",\"一个区包含64个大小为16K的Page页，其中每个区的前几页是固定存储属性信息的页类型\",\"每个区对应了一个XDES_Entry，记录属性的结构\",\"区的类型有四种 \",\"Free: 空闲的区\",\"Free_Frag: 有剩余空间的碎片区\",\"Full_Frag: 没有剩余空间的碎片区\",\"FSEG: 附属于某个段的区，用于特殊作用段的区\",\"其中前三种区是独立直属于表空间的，各自构成一个双链表；而从属于段的FSEG通过维护FREE、NOT_FULL、FULL三个链表进行查询使用。因此，对于一个只有聚簇索引的表，共有2*3+3=9个链表需要维护。\",\"上述的每个链表对应一个List Base Node结构，存储链表头、尾以及包含节点数\"]},\"694\":{\"h\":\"段 - Segment\",\"t\":[\"表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。一个段是一些零散的页面以及一些完整的Extent区的集合，属于逻辑概念。InnoDB中对于段的管理，都是引擎自身完成，不需要人为对其控制。\",\"段以区为单位申请空间，为了节省空间还包含一些零散的页\",\"一个索引对应生成两个段： \",\"叶子节点有自己独有的区，这些区的集合为叶子节点段\",\"非叶子节点也有独有的区，这些区的集合为非叶子节点段\",\"每个段对应一个INODE_Entry结构记录段中的属性\"]},\"695\":{\"h\":\"表空间 - Tablespace\",\"t\":[\"上面讲述的都是独立表空间，除此之外，整个MySQL进程还有一个系统表空间。\",\"InnoDB 存储引擎逻辑结构的最高层，ibd文件即表空间文件。\",\"系统表空间和独立表空间类似，额外记录了一些关于系统信息的页面\",\"数据字典：存储引擎启动时会读写一些内部系统表来记录数据库元信息，例如所有表的字段、类型、对应外键等等，重点包括：SYS_TABLES, SYS_COLUMNS, SYS_INDEXES, SYS_FIELDS四张基本系统表，可以通过information_schema系统数据库查询\",\"表空间全局图： \"]},\"696\":{\"h\":\"索引原理⭐\"},\"697\":{\"h\":\"索引概述\",\"t\":[\"如果没有索引，只能依次遍历所有记录，效率十分低下。除了实际存储的数据，DBS 还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，可以借此实现高效的查找算法。这种数据结构就是索引。\",\"优点：\",\"提高数据检索效率，降低数据库的IO成本\",\"通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗\",\"缺点：\",\"索引列需要占用额外空间\",\"索引大大提高了查询效率，但降低了增删改的速度\",\"MySQL的索引是在存储引擎层实现的，不同的存储引擎支持不同的索引结构，主要包含以下几种：\",\"索引结构\",\"描述\",\"InnoDB\",\"MyISAM\",\"Memory\",\"B+Tree\",\"最常见的索引类型，大部分引擎都支持B+树索引\",\"支持\",\"支持\",\"支持\",\"Hash\",\"底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询\",\"不支持\",\"不支持\",\"支持\",\"R-Tree(空间索引)\",\"空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少\",\"不支持\",\"支持\",\"不支持\",\"Full-Text(全文索引)\",\"是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES\",\"5.6版本后支持\",\"支持\",\"不支持\",\"注：如果没有特别指明，一般指B+树结构组织的索引。\"]},\"698\":{\"h\":\"索引结构\",\"t\":[\"二叉树\",\"根据值构造二叉排序树，树的形状依赖于插入顺序\",\"顺序插入时会形成一个链表，大大降低查询性能\",\"大数据量情况下，层级较深，检索速度慢\",\"红黑树\",\"自平衡二叉树\",\"仍然存在大数据量情况下，层级较深，检索速度慢的问题\",\"B-Tree\",\"B树是一种多叉平衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉。\",\"如果一棵B树的最大度数为n (n阶)，则这棵B树每个节点最多存储 n-1 个key，以及 n 个指针\",\"一旦节点存储的key数量到达n，就会裂变，中间元素向上分裂形成新的节点\",\"B树中，非叶子节点和叶子节点都会存放实际数据\",\"树的度数：一个节点的子节点个数，实现上即指针个数\",\"B-Tree\",\"B+Tree\",\"B+Tree是B-Tree的变种\",\"非叶子节点仅作为索引，存储所指向的数据页中的最小键，不存储数据\",\"叶子节点存储实际数据，且所有叶子节点形成一个单向链表\",\"B+Tree\",\"MySQL索引数据结构对经典的B+Tree进行了优化。每层节点按照索引值从小到大的顺序排序而组成了双向链表，每个页内的记录按索引列排序形成单链表。\",\"所有结点本质上都是一个数据页，一页至少2条记录。目录项记录只存储主键值和对应的页号。\",\"非叶子结点中的记录头record_type存1标识记录项记录，叶子结点中的记录头record_type存0标识数据记录\",\"实际新增数据时，从根节点开始，存满后页分裂，向下生长树枝。因此根节点始终保持不动，并存储在数据字典中。\",\"这种B+Tree提高了区间访问的性能，利于排序\",\"另外，MyISAM中索引和数据分离，叶子节点存储的都是数据记录的地址，因此MyISAM的索引都是二级索引\",\"MySQL_B+Tree\",\"Hash索引\",\"哈希索引就是采用一定的hash算法，将键值换算成新的Hash值，映射到对应的槽位上，然后存储在Hash表中。\",\"如果两个(或多个)键值，映射到一个相同的槽位上，他们就产生了Hash冲突（也称为Hash碰撞），可以通过链表来解决。\",\"特点： \",\"Hash索引只能用于对等比较(=，in)，不支持范围查询(between，>，< ，...)\",\"无法利用索引完成排序操作\",\"查询效率高，通常 (不存在hash冲突的情况下) 只需要一次检索，效率通常高于B+Tree索引\",\"存储引擎支持： \",\"Memory存储引擎支持Hash索引\",\"InnoDB具有自适应Hash功能，其索引根据B+Tree索引在指定条件下自动构建\",\"Hash索引\",\"综上，InnoDB选择B+Tree索引结构的原因有：\",\"相对于二叉树，层级更少，搜索效率高\",\"相对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，导致一页中存储的键值减少，指针也跟着减少，需要保存大量数据时，只能增加树的高度，导致性能降低\",\"相对于 Hash 索引，B+Tree 支持范围匹配及排序操作\"]},\"699\":{\"h\":\"索引分类\",\"t\":[\"MySQL中，索引的具体类型主要分为以下几类：\",\"分类\",\"含义\",\"特点\",\"关键字\",\"主键索引\",\"针对于表中主键创建的索引\",\"默认自动创建，只能有一个\",\"PRIMARY\",\"唯一索引\",\"避免同一个表中某数据列中的值重复\",\"可以有多个\",\"UNIQUE\",\"常规索引\",\"快速定位特定数据\",\"可以有多个\",\"全文索引\",\"全文索引查找的是文本中的关键词，而不是比较索引中的值\",\"可以有多个\",\"FULLTEXT\",\"InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：\",\"分类\",\"含义\",\"特点\",\"聚集索引 (Clustered Index)\",\"将数据存储与索引放一块，索引结构的叶子节点直接保存了行数据\",\"必须有且只有一个；索引即数据，数据即索引。\",\"二级索引 (Secondary Index)\",\"非主键生成的索引，索引结构的叶子节点关联的是对应的主键\",\"可以存在多个；需要回表查询\",\"聚集索引选取规则：\",\"如果存在主键，主键索引就是聚集索引\",\"如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引\",\"如果表没有主键或没有合适的唯一索引，则使用 InnoDB 自动生成的rowid作为隐藏的聚集索引\",\"聚集索引和二级索引\",\"聚集索引的叶子节点下挂的是这一行的数据\",\"二级索引的叶子节点下挂的是该字段值对应的主键值（实际非叶子节点为了保证目录项唯一，也要保存主键值）\",\"回表查询过程： 二级索引 -> 主键值 -> 聚集索引\",\"二级索引查找过程\",\"单列索引与联合索引\",\"单列索引：即一个索引只包含单个列\",\"联合索引：即一个索引关联多个列\",\"在业务场景中，如果存在多个查询条件，考虑针对查询字段建立索引时，建议建立联合索引，而非单列索引。多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，选择该索引完成本次查询。\",\"联合索引结构图： \"]},\"700\":{\"h\":\"索引用法\"},\"701\":{\"h\":\"索引语法\",\"t\":[\"创建索引：CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...); 如果 CREATE 后面不加索引类型参数，则创建的是常规索引\",\"查看索引：SHOW INDEX FROM table_name;\",\"删除索引：DROP INDEX index_name ON table_name;\",\"示例：\",\"-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引 create index idx_user_name on tb_user(name); -- phone手机号字段的值非空，且唯一，为该字段创建唯一索引 create unique index idx_user_phone on tb_user (phone); -- 为profession, age, status创建联合索引 create index idx_user_pro_age_stat on tb_user(profession, age, status); -- 删除索引 drop index idx_user_name on tb_user;\"]},\"702\":{\"h\":\"最左前缀法则\",\"t\":[\"联合索引遵守最左前缀法则，即查询从索引的最左列开始，并且不跳过索引中的列。\",\"如果跳跃某一列，后面字段的排序就无法保证，因此后面字段的索引将失效。\",\"最左前缀法则在select的时候，和字段书写的位置没有关系。\",\"联合索引中，如果出现范围查询（<, >），其后的列索引将失效。可以用 >= 或者 <= 来规避索引失效问题。\",\"例如，一个联合索引的顺序是 profession -> age -> status (创建索引时定义的顺序), 只要select没有选中某一列，那么其后的索引都将失效，即查询时不会使用该列之后的字段索引。\"]},\"703\":{\"h\":\"索引失效情况\",\"t\":[\"在索引列上进行运算操作，索引将失效 如：explain select * from tb_user where substring(phone, 10, 2) = '15';\",\"字符串类型不加引号，索引将失效 如：explain select * from tb_user where phone = 17799990015;\",\"模糊查询中对头部模糊匹配，索引将失效 如：explain select * from tb_user where profession like '%工程';， 对前后都模糊匹配也会失效：explain select * from tb_user where profession like '%工%'; 仅对尾部模糊匹配不会失效：explain select * from tb_user where profession like '软件%';\",\"用 or 连接的条件，左右两侧字段都有索引时，索引才会生效 因为只要有一个没有索引，另一个用不用索引没有意义，仍要进行全表扫描，所以无需用索引。\",\"数据分布的影响 如果 MySQL 评估使用索引比全表更慢，则不使用索引。因为索引是用来索引少量数据的，如果通过索引查询返回大批量的数据，则还不如走全表扫描来的快，此时索引就会失效。\"]},\"704\":{\"h\":\"优化方案\"},\"705\":{\"h\":\"指定索引\",\"t\":[\"优化数据库的一个重要手段，在SQL语句中加入一些手动提示，优化MySQL的索引使用策略，以提升性能\",\"建议使用索引 - use index explain select * from tb_user use index(idx_user_pro) where profession=\\\"软件工程\\\";\",\"忽略索引 - ignore index explain select * from tb_user ignore index(idx_user_pro) where profession=\\\"软件工程\\\";\",\"强制使用索引 - force index explain select * from tb_user force index(idx_user_pro) where profession=\\\"软件工程\\\";\"]},\"706\":{\"h\":\"覆盖索引\",\"t\":[\"应尽量使用覆盖索引，减少 select *。即需要查询的数据在单个索引结构中能够全部获取到，避免回表查询\",\"explain 执行计划中 extra 字段含义：\",\"using index condition：查找使用了索引，但是需要回表查询数据\",\"using where; using index;：查找使用了索引，但是需要的数据都在索引列中能找到，不需要回表查询。因此性能更高\",\"非覆盖索引查询示意： \"]},\"707\":{\"h\":\"前缀索引\",\"t\":[\"当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率。此时可以只对字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。\",\"语法：create index idx_xxxx on table_name(columnn(n));\",\"前缀长度： 可以根据索引的选择性来决定。选择性指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高。唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。\",\"求选择性公式：\",\"-- 全长度索引选择性 select count(distinct email) / count(*) from tb_user; -- 前缀索引选择性 select count(distinct substring(email, 1, 5)) / count(*) from tb_user;\",\"前缀索引查询示意：\",\"前缀索引查询\",\"索引具体结构和索引创建时的字段声明顺序有关\",\"前缀索引中有可能碰到相同索引的情况，因此拿到一个叶子节点(lvbu6)获取id后，需要回表查询row是否与where条件一致\",\"回表查询结束后，还要对该叶子节点的后续节点(xiaoy)查询是否符合where条件，不符合则结束查询\"]},\"708\":{\"h\":\"设计原则\",\"t\":[\"针对数据量较大，且查询比较频繁的表建立索引\",\"针对常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引\",\"考虑列的基数(区分度)，最好为基数大的列建立索引\",\"索引列的类型尽量小\",\"如果是字符串类型的字段，字段长度较长，可以针对字段的特点，建立前缀索引\",\"尽量使用联合索引，减少单列索引。查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率\",\"避免冗余和重复索引，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率\",\"如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询\",\"主键按序插入能够提高性能，最好定义auto_increment\"]},\"709\":{\"h\":\"单表查询\"},\"710\":{\"h\":\"访问方法\",\"t\":[\"MySQL执行查询语句的方式称为访问方法/访问类型\",\"const： \",\"通过主键/唯一二级索引列来定位一条记录的访问方式，表示常数级别\",\"仅用于等值比较\",\"NULL值不保证仅有一条记录，因此也不是const\",\"ref： \",\"采用二级索引进行等值查询的访问方式\",\"索引结果可能匹配多条记录，效率略低于const\",\"可NULL的列最多使用ref方式\",\"对于联合二级索引，必须最左边的连续索引列都是等值比较才生效\",\"ref_or_null： \",\"采用二级索引进行等值查询或匹配NULL的访问方式\",\"range： \",\"利用索引进行范围匹配的访问方式\",\"等值匹配称单点区间\",\"否则称连续范围区间\",\"index： \",\"遍历二级索引记录的执行方式\",\"二级索引叶子节点包含全部所需的查询条件\",\"all： \",\"使用全表扫描执行查询的方式\"]},\"711\":{\"h\":\"注意事项\",\"t\":[\"一般情况下，只能利用单个二级索引执行查询 \",\"且只会用到索引相关的列，其它条件在回表时才会进行过滤\",\"所有条件都可以使用某个索引时，进行条件的范围合并\",\"一个使用索引的条件和一个没有使用索引的条件用OR连接后无法使用该索引\",\"index merge：使用多个索引来完成一次查询的执行方法 \",\"intersection合并：从多个二级索引中取交集（除主键外必须等值匹配）\",\"union合并：从多个二级索引中取并集（除主键外必须等值匹配，或intersection索引合并的搜索条件）\",\"sort-union合并：先按照二级索引记录的主键值进行排序，之后按照union合并执行\",\"另外，可以新建联合索引替代intersection合并\"]},\"712\":{\"h\":\"多表查询\"},\"713\":{\"h\":\"多表连接\",\"t\":[\"涉及多表的查询大致执行过程为：\",\"首先确定第一个需要查询的表，称为驱动表，选取代价最低的单表访问方法执行查询语句，得到一个结果集。驱动表只需访问一次。\",\"针对结果集中的每一条记录，分别到另一张表，即被驱动表中查找匹配的记录。被驱动表可能被访问多次。\",\"多表查询过程\",\"具体连接类型可分为：\",\"内连接：驱动表中的记录如果在被驱动表中找不到匹配的记录，则不会加入最后的结果集。对于内连接，驱动表和被驱动表可互换，不影响结果。\",\"外连接：驱动表中的记录即使在被驱动表中找不到匹配的记录，也会加入最后的结果集 \",\"左外连接：选取左侧表为驱动表\",\"右外连接：选取右侧表为驱动表\",\"不同的条件子句：\",\"WHERE子句：不论内连接还是外连接，不符合where条件的都不会加入结果集\",\"ON子句：对于内连接和where子句等价。对于外连接，也称过滤条件，无法匹配的字段将置NULL并加入结果集\"]},\"714\":{\"h\":\"连接原理\",\"t\":[\"嵌套循环连接 驱动表只访问一次，被驱动表可能被多次访问。访问次数决定于驱动表执行单表查询后的结果集中的记录条数。\",\"使用索引加快连接速度 连接查询中对被驱动表使用主键或唯一二级索引列进行等值查询称为eq_ref\",\"基于块的嵌套循环连接 如果表的数据过大，需要多次磁盘IO，因此为了尽量减少访问被驱动表的次数，把多条驱动表的结果集装入join buffer中，每次对载入内存中的被驱动表记录和join buffer中的多条驱动记录进行匹配。可通过join_buffer_size配置缓冲区大小。\"]},\"715\":{\"h\":\"基于成本的优化\"},\"716\":{\"h\":\"成本常数\",\"t\":[\"MySQL中定义了一些成本估算使用的常量，按使用位置存储在engine_cost和server_cost两张表中。其中关键的常量有：\",\"I/O成本：从磁盘加载数据到内存的开销。MySQL中记读取一个页面的成本为1.0\",\"CPU成本：读取以及检测记录是否满足条件的开销。MySQL中每条记录成本为0.1\"]},\"717\":{\"h\":\"单表查询的成本\",\"t\":[\"MySQL在执行单表查询前，会先找出所有可能的方案，对比找出成本最低的方案，即执行计划，然后才真正执行查询。具体步骤：\",\"根据搜索条件，找出所有可能使用的索引\",\"计算全表扫描的代价\",\"计算使用不同索引执行查询的代价\",\"对比各种执行方案的代价，找出成本最低的那一个\",\"注：\",\"实际计算时，需要用到一些估算值，例如记录数，页面数等，可以通过show table status like '表名'查询\",\"MySQL优先计算唯一二级索引，然后再计算普通二级索引\",\"查询优化器假定读取索引的一个范围和读取一个页面相同\",\"需要回表的记录数通过区间最左记录和区间最右记录进行估算\",\"这种通过直接访问索引对应的B+树来计算范围区间对应的索引记录条数的方式称为index dive\",\"MySQL会把index dive和索引的基数Cardinality进行比较，判断是否使用索引统计数据进行估算。基数通过show index from 表名查询\"]},\"718\":{\"h\":\"多表查询的成本\",\"t\":[\"MySQL连接查询采用嵌套循环连接算法，因此对于两表表连接查询： 查询成本 = 单次查询驱动表的成本 + 驱动表扇出数 * 单次查询被驱动表的成本 其中扇出数即驱动表查询结果集的记录条数。在全表扫描或索引执行的单表查询，扇出数需要估算，称为condition filtering。\",\"对于外连接，只需要分别为驱动表和被驱动表选择成本最低的访问方法\",\"而对于内连接，还需要考虑表连接顺序，即谁作为驱动表，谁作为被驱动表\",\"成本的重点在减少扇出数对被驱动表的访问成本\"]},\"719\":{\"h\":\"InnoDB-统计数据\",\"t\":[\"InnoDB会定期以表为单位，收集并存储数据库的统计数据（估计值）。按存储方式分两种，通过innodb_stats_persistent变量（默认ON）配置：\",\"永久性统计数据：存储在磁盘上\",\"非永久性统计数据：存储在内存中\"]},\"720\":{\"h\":\"永久性数据\",\"t\":[\"统计数据实际存放在两张表中，并定期进行更新，innodb_stats_auto_recalc变量控制是否异步自动更新，也可以用analyze table 表名语句手动同步更新。\",\"innodb_table_stats: 存储关于表的统计数据，每条记录对应一张表\",\"n_rows统计项是表中记录行数，根据innodb_stats_persistent_sample_pages变量采样一定数量的页面，计算平均记录数再乘以全部叶子节点数，得到估算的总记录数\",\"clustered_index_size 表的聚簇索引占用的页面数量\",\"sum_of_other_index_sizes 表的其它索引占用的页面数量\",\"innodb_index_stats: 存储关于索引的统计数据，每条记录对应一个索引的某一个统计项\",\"n_leaf_pages: 该索引的叶子节点占用页面数\",\"size: 索引共占用页面数\",\"n_diff_pfxNN: 对应索引列不重复的值个数\",\"sample_size: 采样页面数\"]},\"721\":{\"h\":\"非永久性数据\",\"t\":[\"innodb_stats_auto_recalc变量为OFF时，数据会存储在内存中，因此会产生经常变化的执行计划。新版MySQL很少使用。\"]},\"722\":{\"h\":\"重复值的说明\",\"t\":[\"索引重复值常用于单表查询中但点区间太多，以及连接查询中被驱动表拥有索引的情况\",\"对NULL值的处理由innodb_stats_method控制，取值有三个： \",\"nulls_equal: 默认值，认为所有NULL值都相等。倾向于不适用索引\",\"nulls_unequal: 认为所有NULL值不相等，倾向于使用索引\",\"nulls_ignored: 忽略NULL值\"]},\"723\":{\"h\":\"基于规则的优化\"},\"724\":{\"h\":\"条件化简\",\"t\":[\"移除不必要的括号\",\"常量传递\",\"等值传递\",\"移除没用的条件\",\"表达式计算（列必须单独出现）\",\"HAVING子句和WHERE子句合并\",\"常量表检测（表记录为0/1、主键/唯一二级索引等值匹配）\"]},\"725\":{\"h\":\"外连接消除\",\"t\":[\"相对于外连接，内连接可能通过优化表的连接顺序来降低整体的查询成本。\",\"优化器首先把右外连接查询转换成左外连接查询\",\"在外连接查询中，where子句如果（显式/隐式）包含被驱动表中的列不为NULL的条件称为空值拒绝。满足空值拒绝的外连接查询可以和内连接相互转换\",\"继而查询优化器可以评估表的不同连接顺序，选择成本最低的执行方案\"]},\"726\":{\"h\":\"子查询优化\",\"t\":[\"对于包含不相关的标量子查询或者行子查询，MySQL会分别独立执行外层查询和子查询\",\"IN子查询如果符合semi-join半连接条件，则优化器会先转换，再评估以下五种半连接策略，选择成本最低的执行方案： \",\"Table pullout 表上拉\",\"DuplicateWeedout 重复值消除\",\"LooseScan 松散索引扫描\",\"Materialization 物化\",\"FirstMatch 首次匹配\",\"IN子查询如果不符合semi-join条件，则评估以下两种策略： \",\"子查询物化（结果集写入临时表，用于不相关子查询）\",\"执行IN -> EXISTS转换\",\"ANY/ALL子查询可以转换，例如<ANY 转换成 <(SELECT MAX(...) ...)\",\"派生表（FROM后面的子查询）优化： \",\"首先派生表和外层表合并，转换为没有派生表的形式\",\"合并失败，则尝试派生表物化（延迟物化）\"]},\"727\":{\"h\":\"Explain 执行计划\",\"t\":[\"一条查询语句经过MySQL查询优化器的各种基于成本、规则的优化后会生成一个执行计划，描述具体执行查询的方式，例如多表连接的顺序、每个表的访问方式等。通过Explain命令查看。\",\"-- 直接在select语句之前加上关键字 explain / desc EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件;\"]},\"728\":{\"h\":\"字段含义\",\"t\":[\"id\",\"（经优化后的）语句中每个SELECT对应一个id\",\"如果FROM后跟有多个表，每个表都会有一条记录，且这些记录的id值都是相同的。记录在前的是驱动表，记录在后的是被驱动表。\",\"select_type\",\"每个SELECT对应的类型\",\"SIMPLE：不包含UNION/子查询的简单查询\",\"PRIMARY：最左边的SELECT小查询\",\"UNION, UNION RESULT, SUBQUERY, DEPENDENT SUBQUERY, DEPENDENT UNION, DERIVED, MATERIALIZED...\",\"table\",\"explain的每条记录都对应着某个单表的访问方法\",\"partitions\",\"type\",\"该表的访问方法\",\"system: 用于仅包含一条记录，且存储引擎的统计数据是精确的表，例如MyISAM、Memory\",\"const：根据主键/唯一二级索引进行等值匹配\",\"eq_ref：被驱动表根据主键/唯一二级索引进行等值匹配\",\"ref：通过普通二级索引进行等值匹配可能采用ref方式\",\"ref_or_full：通过普通二级索引进行等值匹配，且该列可为NULL，则可能是ref_or_full\",\"index_merge：使用Intersection, Union, Sort_Union三种索引合并的方式来执行查询\",\"ALL：全表扫描\",\"range：使用索引获取某些范围区间可能用到\",\"index: 使用索引覆盖，但需要扫描全部索引记录\",\"fulltext, unique_subquery, index_subquery\",\"possible_keys\",\"可能用到的索引\",\"key\",\"估算成本后，实际用到的索引\",\"key_len\",\"使用的索引记录的最大长度，由三部分相加而得： \",\"对于定长类型索引列，实际占用的存储空间就是该固定值\",\"如果该索引列可以为NULL，则key_len加1\",\"对于变长字段，额外有2字节存储该列的实际长度\",\"ref\",\"索引列等值匹配的值/列的类型，如const表示常量、某个列名、func表示函数\",\"即访问方法是const, eq_ref, ref, ref_or_null, unique_subquery, index_subquery其中之一\",\"rows\",\"对于全表扫描，即预计需要扫描的行数\",\"对于索引查询，即预计需要扫描的索引记录行数\",\"filtered\",\"对于全表扫描，即估算的满足搜索条件的记录总数占rows之比\",\"对于索引查询，即除索引条件外满足其它搜索条件的记录数占rows之比\",\"Extra\",\"额外信息\",\"No tables used, Using join buffer, Using index ...\"]},\"729\":{\"h\":\"查询成本\",\"t\":[\"语法：explain format=JSON select ...;\",\"输出JSON的cost_info字段包含了执行计划的成本，包括：\",\"read_cost 包括两部分： \",\"IO成本\",\"检测rows * (1 - filter)条记录的CPU成本\",\"eval_cost\",\"检测rows * filter条记录的成本\",\"prefix_cost \",\"整个查询的成本，即read_cost + eval_cost\",\"data_read_per_join 此次查询中需要读取的数据量\",\"最后，explain结束结束后，可以通过show warnings;查看与该执行计划相关的扩展信息，包括Level 等级，Code 代码，Message 消息三部分，其中Message字段类似于查询优化器重写后的执行语句。\",\"另外，OPTIMIZER_TRACE表记录了内部具体的优化策略过程，使用步骤： 1. set optimizer_trace=\\\"enabled=on\\\"; 2. 执行语句 3. select * from information_schema.OPTIMIZER_TRACE; 4. set optimizer_trace=\\\"enabled=off\\\"; 输出结果中QUERY为查询语句，TRACE即优化过程，分为prepare、optimize、execute三个阶段。\"]},\"730\":{\"h\":\"InnoDB-缓冲池\",\"t\":[\"缓存数据页、锁信息、自适应哈希索引等信息的内存空间。其中包含若干个16K的缓存页和对应的控制块，控制块存储页面对应的表空间编号、页号、缓冲池中的地址等等信息。 语句show engine innodb status\\\\G;查看当前缓冲池状态。\"]},\"731\":{\"h\":\"Buffer Pool结构\",\"t\":[\"BufferPool\",\"MySQL以表空间号+页号作为Key，缓存页作为value，构建哈希表来判断缓存是否命中\",\"可以通过innodb_buffer_pool_instances控制缓冲池实例个数，所有实例均分总空间innodb_buffer_pool_size，以此提高并发处理能力\",\"MySQL以chunk为单位申请内存，每个chunk都是一块连续的空间，大小由innodb_buffer_pool_chunk_size（默认128M，不含控制块空间）控制\",\"缓冲池中所有空闲页对应的控制块组成一个Free空闲链表\",\"缓冲池中的页被修改后就和磁盘上的数据不一致了，称为脏页，所有脏页对应的控制块构成Flush待刷新链表。刷新时间有以下几种： \",\"BUF_FLUSH_LRU: 从LRU链表的冷数据中刷新一部分页面到磁盘。数量由innodb_lru_scan_depth控制\",\"BUF_FLUSH_LIST: 从flush链表中刷新一部分页面到磁盘\",\"BUF_FLUSH_SINGLE_PAGE: 强制需要腾出缓存空间时必须进行的单页刷新\",\"其它结构还有例如：unzip LRU链表管理解压页，zip clean链表管理未解压页，zip free数组构成伙伴系统为压缩页提供内存空间\"]},\"732\":{\"h\":\"LRU 链表\",\"t\":[\"控制块按照LRU 最近最少使用原则构建链表，使用到某个缓存页时将它调整到链表头部，缓冲池存满时从链表尾淘汰页面。\",\"存在的两个问题：\",\"预读： \",\"预先加载部分可能访问的页面到缓冲池中，分以下两类： \",\"线性预读：如果顺序访问了某个区的一些页面，会异步预读下一个区的全部页面。阈值由innodb_read_ahead_threshold（默认56）控制。\",\"随机预读：如果已经缓存了某个区的一些连续页面，不论是否顺序读取，都会异步预读该区中的所有其它页面。阈值由innodb_random_read_ahead（默认13）控制。\",\"但如果预读的页面没用到，就会大大降低缓存命中率\",\"全表扫描： \",\"全表扫描时会大量更新LRU的节点，严重影响其它查询对Buffer Pool的使用，大大降低缓存命中率。\",\"优化方案：\",\"LRU链表分为两部分： \",\"高频访问缓存页，称热数据/Young区域\",\"低频访问缓存页，称冷数据/Old区域\",\"划分比例由innodb_old_blocks_pct控制（默认37%）\",\"针对预读产生的问题，每次加载新页面时，对应的控制块放到Old区域的头部\",\"针对全表扫描问题，则 \",\"对处在Old区域的页面进行第一次访问（新缓存）时，在控制块中记录访问时间\",\"后续再次访问时，如果时间间隔在某个阈值内，就不移动到Young区域头部，超过阈值就移动到Young区域头部\",\"阈值由innodb_old_blocks_time控制（默认1000ms）\",\"除此之外，还有很多其它优化手段，例如对Young区域继续划分等。最终目的都是提高Buffer Pool的缓存命中率。\"]},\"733\":{\"h\":\"事务⭐\",\"t\":[\"事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。事务大致上可以分为五种状态：活动的、部分提交的、失败的、中止的、提交的。MySQL中仅InnoDB和NDB存储引擎支持事务。\",\"事务状态\"]},\"734\":{\"h\":\"事务语法\",\"t\":[\"控制事务方式一：\",\"-- 查看事务提交方式 SELECT @@AUTOCOMMIT; -- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效 SET @@AUTOCOMMIT = 0; -- 提交事务 COMMIT; -- 回滚事务 ROLLBACK;\",\"控制事务方式二：\",\"-- 手动开启事务：（暂时关闭autocommit） START TRANSACTION [read only|read write, with consistent snapshot] 或 BEGIN; -- DML select * from account where name = '张三'; update account set money = money - 1000 where name = '张三'; update account set money = money + 1000 where name = '李四'; -- 提交事务 COMMIT; -- 或回滚事务 ROLLBACK;\",\"隐式提交语句：\",\"数据定义语言DDL\",\"隐式使用/修改系统数据库mysql库中的表\",\"事务控制或关于锁的语句，如lock tables...\",\"加载数据的语句，如load data\",\"关于MySQL复制的语句，如start slave, stop slave...\",\"其他语句，如analyze, repair, reset...\",\"保存点 savepoint:\",\"-- 定义保存点 SAVEPOINT sp_name; -- 回滚到某个保存点 ROLLBACK TO [SAVEPOINT] sp_name; -- 删除保存点 RELEASE SAVEPOINT sp_name;\"]},\"735\":{\"h\":\"四大特性 ACID\",\"t\":[\"原子性 Atomicity：事务是不可分割的最小操作单元，要么全部成功，要么全部失败\",\"一致性 Consistency：事务完成时，必须使所有数据都保持一致状态\",\"隔离性 Isolation：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行\",\"持久性 Durability：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的\",\"其中，原子性、一致性、持久性这三大特性由 Redo Log 和 Undo Log 两份日志来保证。而隔离性由锁机制和MVCC保证。\"]},\"736\":{\"h\":\"并发问题\",\"t\":[\"问题\",\"描述\",\"脏写\",\"一个事务修改了另一个未提交事务修改过的数据\",\"脏读\",\"一个事务读到了另一个事务还未提交的数据\",\"不可重复读\",\"一个事务先后读取同一条记录，期间另一个事务修改了数据，导致第一个事务两次读取的数据不同\",\"幻读\",\"一个事务按照某些条件查询，期间另一个事务插入了新的数据，导致第一个事务再次查询时发现多出一些记录\",\"按严重程度排序：脏写 > 脏读 > 不可重复读 > 幻读\"]},\"737\":{\"h\":\"隔离级别\",\"t\":[\"为了解决并发事务所引发的问题，数据库系统引入了事务隔离级别，主要有以下几种：\",\"隔离级别\",\"脏读\",\"不可重复读\",\"幻读\",\"Read Uncommitted\",\"√\",\"√\",\"√\",\"Read Committed\",\"×\",\"√\",\"√\",\"Repeatable Read\",\"×\",\"×\",\"√\",\"Serializable\",\"×\",\"×\",\"×\",\"√表示在当前隔离级别下该问题可能会出现。\",\"隔离级别越低，越严重的问题越可能发生\",\"事务隔离级别越高，数据越安全，但是性能越低\",\"脏写问题十分严重，任何隔离级别都不允许\",\"在MySQL数据中，默认隔离级别为Repeatable Read，且可以禁止幻读发生\",\"查看事务隔离级别：SELECT @@TRANSACTION_ISOLATION;\",\"设置事务隔离级别：SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL xxx;\",\"如果指定GLOBAL，则对语句执行完后的新会话有效，当前已存在的会话无效\",\"如果指定SESSION，则对当前会话的所有后续事务有效\",\"如果不指定，则仅对当前会话的下一个事务有效，且执行完后恢复原级别\"]},\"738\":{\"h\":\"Redo Log\",\"t\":[\"为了实现事务的持久性，必须在事务提交之前将所有修改的页面刷新到磁盘，这种方式存在一些问题：\",\"刷新整个页面过于浪费\",\"随机IO速度慢\",\"因此，MySQL在事务执行过程中利用Redo Log重做日志，记录修改的具体信息，这样即使系统崩溃也能快速恢复数据，而且：\",\"占用空间小\",\"顺序IO速度快\"]},\"739\":{\"h\":\"Redo日志格式\",\"t\":[\"日志记录\",\"redo_log格式\",\"通用格式中： \",\"type: redo日志类型\",\"space ID：表空间ID\",\"page number：页号\",\"data：日志具体内容\",\"对于简单日志类型，一般直接把修改的偏移量和内容写入data区域中。如MLOG_1|2|3|4BYTE\",\"对于复杂日志类型，修改的内容会非常多，一般data区存储修改所需的参数，然后调用相应的函数进行更改。如MLOG_COMP_REC_INSERT\",\"Mini-Transaction 语句执行可能修改多个页面，且这些语句不可分割。例如对于插入语句，分乐观插入（修改少量数据）和悲观插入（页分裂，修改大量内部数据结构），这些日志记录必须保持一致，否则B+树结构将不完整。\",\"mtr类型\",\"MLOG_MULTI_REC_END日志类型标识一个需要保证原子性的redo日志组结束\",\"对于需要保证原子性的操作如果只产生一条redo日志，则类型type字段首位置1\",\"整体上，一个事务可以包含若干条语句，每条语句由若干Mini-Transaction(mtr)组成，每个mtr又包含若干条redo日志。\",\"Redo Log Block\",\"redo_log_block\",\"mtr生成的Redo日志以及一些控制信息放在512Byte的页中，称Block\",\"Block Header部分12Byte \",\"LOG_BLOCK_HDR_NO: 唯一标号\",\"LOG_BLOCK_HDR_DATA_LEN: 已使用字节数\",\"LOG_BLOCK_FIRST_REC_GROUP: 首个mtr日志组的偏移量\",\"LOG_BLOCK_CHECKPOINT_NO: checkpoint序号\",\"Block Trailer部分4Byte \",\"LOG_BLOCK_CHECKSUM: 正确性校验值\",\"Redo日志缓冲区 与Buffer Pool同理，内存中开辟一块连续的空间用于解决磁盘速度过慢的问题，默认16MB，划分为若干Redo Log Block，从前往后顺序写入。\",\"redo_log_buffer\",\"全局变量buf_free记录当前空闲区域的头部\",\"全局变量buf_next_to_write记录已经刷新到磁盘的位置末尾\",\"日志文件组 MySQL数据目录下的ib_logfile/ib_redo文件即redo日志，通常有多个文件构成一个日志文件组，从前往后循环覆写。文件数由innodb_log_files_in_group控制。\",\"redo日志文件组\",\"日志文件组中每个文件大小一样，默认48M，存储Block镜像\",\"文件由两部分组成，前4个Block(2048Bytes)存储管理信息，后面是log buffer中的block镜像\",\"头部的管理信息包括log file header和checkpoints\",\"redo_log_header\",\"刷盘时机\",\"Log Buffer使用一半左右空间时\",\"事务提交时\",\"后台线程自动刷新\",\"正常关闭服务器时\",\"创建checkpoint时\",\"其它情况...\",\"另外，innodb_flush_log_at_trx_commit变量控制事务提交时的redo日志行为：\",\"0：事务提交时不立即向磁盘同步redo日志，交给后台线程\",\"1：默认值，事务提交时立即同步\",\"2：事务提交时将redo日志写入OS缓冲区，不保证立即刷新到磁盘。这种方式除非DB和OS都挂了，否则是能够保证持久性的\"]},\"740\":{\"h\":\"Log Sequence Number\",\"t\":[\"lsn初始值为8704，每写入一个mtr生成的redo日志就增加lsn，增量包括日志量、block header以及block trailer\",\"每组mtr生成的redo日志都有一个唯一的LSN值与其对应，LSN值越小说明日志产生的越早\",\"flushed_to_disk_lsn表示已经刷新到磁盘的日志序列号，初始值和LSN一致（涉及OS的读写缓存）\",\"另外，mtr执行过程中可能修改页面。Buffer Pool中的Flush链表中的脏页按照修改发生的时间顺序排序，即oldest_modification代表的LSN值，被多次更新的页面不会重复插入Flush链表，但会更新newest_modification属性值，即最近一次mtr对应的LSN。\",\"LSN_flush链表\"]},\"741\":{\"h\":\"Checkpoint\",\"t\":[\"redo日志文件组是有限的，不得不循环使用，可能导致日志追尾。因此，需要即时把已经刷写回磁盘的脏页对应的redo日志释放，即checkpoint。\",\"checkpoint_lsn\",\"全局变量checkpoint_lsn表示当前系统可以被覆盖的redo日志总量，初始值也是8704\",\"全局变量checkpoint_no表示当前执行checkpoint的次数\",\"当脏页刷新到磁盘后，可以进行增加checkpoint_lsn操作，称为做一次checkpoint。具体分为两步： \",\"计算当前可被覆盖的redo日志对应的最大LSN\",\"将checkpoint_lsn、对应的redo日志组偏移量，以及此次checkpoint编号写入文件组第一个日志文件的管理信息中。编号为偶写入checkpoint1，否则写入checkpoint2\",\"show engine innodb status;可以查看各个LSN值\"]},\"742\":{\"h\":\"崩溃恢复\",\"t\":[\"恢复起点 checkpoint_lsn之后的redo日志。具体的，从redo日志文件组的第一个文件的管理信息checkpoint1、checkpoint2中选择较大的checkpoint_no，即最近一次的checkpoint信息，拿到对应的checkpoint_lsn和checkpoint_offset。\",\"恢复终点 Log Block Header中LOG_BLOCK_HDR_DATA_LEN记录当前块已使用的字节数，对于填满的块，该值为512，否则即为最后一个需要恢复的Block。\",\"恢复步骤\",\"根据日志的space ID和page number作为key，构建有序的redo日志哈希表，以此减少随机IO，加快恢复速度\",\"顺序扫描哈希表，逐条记录恢复\",\"对于部分已经刷新到磁盘的页面，可以从页的File Header中取FIL_PAGE_LSN值，即最近一次修改页面对应的LSN值（newest_modification），如果该值大于checkpoint_lsn说明该页已经刷新回磁盘，该页小于FIL_PAGE_LSN的redo日志就不需要恢复了。\"]},\"743\":{\"h\":\"Undo Log\"},\"744\":{\"h\":\"事务Id\",\"t\":[\"InnoDB中聚簇索引行记录除了用户数据外，还有几个隐藏列，其中trx_id即事务id，roll_pointer指向该行记录对应的undo日志。系统会维护一个全局变量，保证事务id按时间先后递增。\",\"对于只读事务，仅能增删改临时表。当它第一次对用户创建的临时表执行增删改时会自动分配一个事务id\",\"对于读写事务，当它第一次对某个表执行增删改时会自动分配一个事务id\"]},\"745\":{\"h\":\"Undo日志格式\",\"t\":[\"InnoDB每次执行增删改某个记录时，都会先记下对应的Undo日志，每条日志对应一个唯一的编号undo_no，从0开始每条记录自增1。Undo日志记录在FIL_PAGE_UNDO_LOG类型的页面中，从系统表空间/Undo表空间中分配。\"]},\"746\":{\"h\":\"INSERT Undo日志\",\"t\":[\"insert_undo_log\",\"类型为TRX_UNDO_INSERT_REC\",\"主键可能包含多个列，对应的长度和值都会记录下来\",\"增删改对聚簇索引、二级索引都需要修改，此处仅以聚簇索引为例\"]},\"747\":{\"h\":\"DELETE Undo日志\",\"t\":[\"页面中的记录根据delete_mask标志位分正常记录链表和垃圾链表，Page Header中Page Free属性指向垃圾链表的头节点。DELETE语句删除正常记录分两个阶段：\",\"阶段一 delete mark：将记录的delete_mask置1。此时记录处于中间状态\",\"阶段二 purge：当删除事务提交后，后台线程执行真正的删除，即将该记录从正常记录链表移到垃圾链表头部，并修改相应的其它信息\",\"undo_log_delete_中间状态\",\"删除语句提交前，只会经历阶段一，所以只有delete_mask对应TRX_UNDO_DEL_REC类型Undo日志，提交后就不用回滚了，因此purge阶段不需要Undo日志。Delete Undo日志中：\",\"old_roll_pointer指向旧的roll_pointer，构成该记录的版本链\",\"如果某列包含在某个索引中，则相关信息需要保存至索引列信息中，包括位置、长度、实际值三部分，用于purge阶段执行真正的删除\",\"undo_log_delete_mask\"]},\"748\":{\"h\":\"UPDATE Undo日志\",\"t\":[\"不更新主键的情况\",\"如果更新记录时，记录的每列更新前后所占空间一样，就可以原地更新\",\"如果任何一列更新前后大小不一致，则先删除旧记录，再插入新记录。 \",\"这里的删除是完整的删除，由用户线程同步执行\",\"如果新记录空间不超过旧空间，可以重用旧记录的空间\",\"两种情况都对应TRX_UNDO_UPD_EXIST_REC类型的Undo日志:\",\"undo_log_update1\",\"更新主键的情况 InnoDB在聚簇索引中分两步处理，会产生TRX_UNDO_DEL_MARK_REC、TRX_UNDO_INSERT_REC两条Undo日志\",\"将旧记录进行delete_mark \",\"事务提交后再交由专门线程执行purge\",\"原因在于实现MVCC\",\"根据更新后各列的值创建一条新记录，重新定位并插入聚簇索引\"]},\"749\":{\"h\":\"日志存储\",\"t\":[\"Undo 页面 Undo日志专门存放于FIL_PAGE_UNDO_LOG类型的页面中，除了通用的页面头和页面尾，Undo页面特有Undo Page Header:\",\"undo_page_header\",\"TRX_UNDO_PAGE_TYPE: 本页面存储的Undo日志类型，为服务MVVC分两大类，不可混存 \",\"TRX_UNDO_INSERT: 涉及插入的Undo日志，例如TRX_UNDO_INSERT_REC\",\"TRX_UNDO_UPDATE: 涉及删除、修改的Undo日志\",\"TRX_UNDO_PAGE_START: 第一天Undo日志起始位置\",\"TRX_UNDO_PAGE_FREE: 新的Undo日志存储（空闲区域）位置\",\"TRX_UNDO_PAGE_NODE: 链表普通结点\",\"Undo 页面链表\",\"Undo页面链表\",\"不同事务对应不同的页面链表\",\"每个事务对普通表、临时表分别使用不同的链表\",\"对不同表又按存储的日志类型分insert undo链表、update undo链表\",\"链表中第一个页面称为first_undo_page，记录段相关信息。其它称normal_undo_page\",\"一个事务最多对应4条Undo页面链表，每个链表都是按需分配，实际用到时才会创建\",\"Undo 日志段头部\",\"undo_log_segment_header\",\"每个Undo页面链表对应一个段，称Undo Log Segment\",\"first_undo_page中存有Undo Log Segment Header，包含对应段的信息 \",\"TRX_UNDO_STATE: 本Undo页面链表所处状态 \",\"TRX_UNDO_ACTIVE: 活跃状态，一个活跃的事务正往此段内写入Undo日志\",\"TRX_UNDO_CACHED: 被缓存状态，等待被其它事务重用\",\"TRX_UNDO_TO_FREE: 事务提交后不能被重用的insert undo链表\",\"TRX_UNDO_TO_PURGE: 事务提交后不能被重用的update undo链表\",\"TRX_UNDO_PREPARED: 包含处于PREPARE阶段的事务产生的undo日志\",\"TRX_UNDO_LAST_LOG:本Undo页面链表最后一个Undo Log Header位置\",\"TRX_UNDO_FSEG_HEADER: 本Undo页面链表对应段头信息(找到段对应INODE Entry)\",\"TRX_UNDO_PAGE_LIST: Undo页面链表的基结点\",\"Undo 日志头\",\"undo_log_header\",\"同一个事务向一个Undo页面链表写入的Undo日志记为一个组\",\"每写入一组Undo日志都会在这组日志前先记录关于这个组的属性，即Undo Log Header \",\"TRX_UNDO_TRX_ID: 生成本组日志的事务id\",\"TRX_UNDO_TRX_NO:标记事务的提交顺序\",\"TRX_UNDO_DEL_MARKS: 标记本组是否含delete mark产生的日志\",\"TRX_UNDO_LOG_START: 本组第一条日志在页面中的偏移量\",\"TRX_UNDO_XID_EXISTS: 本组是否含XID信息\",\"TRX_UNDO_DICT_TRANS: 标记本组日志是否由DDL语句产生\",\"TRX_UNDO_TABLE_ID: 如果DICT_TRANS为真，表示DDL操作的表Id\",\"TRX_UNDO_NEXT_LOG: 下一组日志在页面中开始的偏移量\",\"TRX_UNDO_PREV_LOG: 上一组日志在页面中开始的偏移量\",\"因此，整体上，Undo页面链表的first undo page会填充Undo Page Header, Undo Log Segment Header, Undo Log Header三部分，而普通页面仅填充Undo Page Header。\",\"undo页面链表总结\"]},\"750\":{\"h\":\"页面重用\",\"t\":[\"大部分事务仅修改若干条记录，产生少量的Undo日志，但需要创建完整的Undo页面链表，造成空间浪费。为此，MySQL在事务提交后可以判断是否重用该事务的Undo页面链表。\",\"是否重用的条件\",\"该链表仅包含一个Undo页面\",\"该Undo页面已经使用的空间小于整个页面空间的3/4\",\"处理逻辑\",\"对于insert undo链表，仅存储TRX_UNDO_INSERT_REC的undo日志，提交后就可以被删除，因此新事务的日志可以直接覆盖原有的空间 \",\"对于update undo链表，为了MVVC，事务提交后不能立即删除，因此重用会直接在空闲区域写入日志，即同一个Undo页面中写入了多组日志 \"]},\"751\":{\"h\":\"回滚段\",\"t\":[\"为了更好的管理Undo页面链表，MySQL设计了Rollback Segment Header类型的页面，存放各个Undo页面链表的first undo page页号（称为undo slot）。\",\"rollback_segment_header\",\"每个Rollback Segment Header对应一个Rollback Segment，其中仅含一个页面\",\"TRX_RSEG_MAX_SIZE: 本回滚段管理的所有Undo页面链表中页面数量之和的上限\",\"TRX_RSEG_HISTORY_SIZE: History链表占用的页面数量\",\"TRX_RSEG_HISTORY: History链表的基结点\",\"TRX_RSEG_FSEG_HEADER: 本回滚段对应的10Byte 段头部信息，对应此段的INODE Entry\",\"TRX_RSEG_UNDO_SLOTS: 各个Undo页面链表的first undo page页号集合，即undo slot集合，共1024个\",\"策略\",\"如果某个undo slot指向的链表可重用，则处于被缓存状态，并根据类型加入insert/update undo cached两个缓存链表\",\"分配重用Undo链表时，先从对应的缓存链表中找，没有空闲的再到回滚段头页面中找\",\"为了提高事务并发效率，MySQL定义了128个回滚段，对应128个回滚段头，段头地址存放在系统表空间第5号页面中。其中 \",\"第0号、第33~127号属于一类，用于对普通表的分配\",\"第1~32号属于一类，用于对临时表的分配\",\"区别处理的原因在于修改普通表回滚段中的Undo页面需要记录对应的Redo日志，而临时表不需要\",\"段的数量由innodb_rollback_segments控制\",\"多个回滚段\"]},\"752\":{\"h\":\"MVVC\",\"t\":[\"MVCC 全称 Multi-Version Concurrency Control 多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突。MVCC的具体实现依赖于记录中的隐式字段、Undo Log、ReadView三部分。\"]},\"753\":{\"h\":\"版本链\",\"t\":[\"前面提到过，对记录的删改操作对应的Undo日志里有old roll pointer字段指向旧的Undo日志，从而构成一个记录的版本链。链表的头部就是当前记录的最新值。\",\"undo_log_版本链\"]},\"754\":{\"h\":\"ReadView\",\"t\":[\"对于READ_UNCOMMITTED隔离级别，不禁止不可重复读，读取记录时直接查看最新版本\",\"对于Serializable隔离级别，MySQL使用锁机制避免不可重复读问题\",\"而对于READ_COMMITTED和REPEATABLE_READ，需要判断版本链中哪个版本是当前事务可见的，为此提出了ReadView。ReadView含四个部分，其中：\",\"字段\",\"含义\",\"m_ids\",\"生成ReadView时系统中活跃的读写事务的id列表\",\"min_trx_id\",\"生成ReadView时系统中活跃的读写事务最小id\",\"max_trx_id\",\"生成ReadView时系统应分配给下一个事务的id值（最大活跃事务id+1）\",\"creator_trx_id\",\"生成该ReadView的事务id（仅实际增删改时才分配，只读事务id默认0）\",\"访问规则 有了ReadView后，查询过程会顺着版本链遍历，根据ReadView的访问规则，直到找到一条可访问的版本，或不含该记录。其中，trx_id为被访问版本的trx_id属性值：\",\"条件\",\"是否可以访问\",\"说明\",\"trx_id == creator_trx_id\",\"可以访问该版本\",\"成立，说明数据是当前事务自己更改的\",\"trx_id < min_trx_id\",\"可以访问该版本\",\"成立，说明该版本在当前事务生成ReadView前已经提交\",\"trx_id > max_trx_id\",\"不可以访问该版本\",\"成立，说明该版本在当前事务生成ReadView后才开启\",\"min_trx_id <= trx_id <= max_trx_id\",\"如果trx_id在m_ids中，不可以访问；否则可以访问\",\"m_ids存在trx_id则说明该事务还是活跃的，不存在则说明该事务已提交\",\"生成时机 对于READ_COMMITTED和REPEATABLE_READ，最大的区别在于它们生成ReadView的时机不同。也正因此，READ_COMMITTED无法禁止不可重复读问题。\",\"READ_COMMITTED事务每次SELECT查询前都会生成独立的ReadView\",\"REPEATABLE_READ事务只在第一次SELECT查询前生成一个共享的ReadView\",\"另外，为了支持MVCC，insert undo日志在事务提交后即可释放，而update undo日志不能立即删除；删除时需要分两阶段，第一阶段仅做delete mark。\"]},\"755\":{\"h\":\"锁机制⭐\",\"t\":[\"See: MySQL 锁机制\"]},\"756\":{\"c\":[\"数据库\"]},\"757\":{\"c\":[\"MySQL\"]},\"758\":{\"h\":\"Java NIO\"},\"759\":{\"h\":\"三大组件\"},\"760\":{\"h\":\"Channel\",\"t\":[\"channel 类似 BIO 的 stream，可以作为数据源，是读写数据的双向通道。\",\"常见的 Channel：\",\"FileChannel\",\"DatagramChannel\",\"SocketChannel\",\"ServerSocketChannel\",\"stream vs channel\",\"stream 要么是输入流，要么是输出流。而 channel 是双向的，可以从 channel 将数据读入 buffer，也可以将 buffer 数据写入 channel\",\"stream 不会自动缓冲数据，而 channel 会利用系统提供的发送缓冲区和接收缓冲区，更为底层\",\"stream 仅支持阻塞 API，而 channel 同时支持阻塞、非阻塞 API，并且网络 channel 可配合 selector 实现多路复用\",\"二者均为全双工，即读写可以同时进行（与单向/双向通道不冲突）\"]},\"761\":{\"h\":\"Buffer\",\"t\":[\"buffer 用于缓冲读写数据，常见的 buffer 有：\",\"ByteBuffer \",\"MappedByteBuffer\",\"DirectByteBuffer\",\"HeapByteBuffer\",\"ShortBuffer\",\"IntBuffer\",\"LongBuffer\",\"FloatBuffer\",\"DoubleBuffer\",\"CharBuffer\"]},\"762\":{\"h\":\"Selector\",\"t\":[\"了解 Selector 之前，得先知道服务器设计的演化，才能了解它解决了什么问题，起到什么作用。\"]},\"763\":{\"h\":\"多线程\",\"t\":[\"在传统的多线程版服务器设计中，对于每个客户端的 socket 请求，服务端都要新开一个线程去处理。因此存在如下的缺点：\",\"内存占用高\",\"线程上下文切换成本高\",\"只适合连接数少的场景\"]},\"764\":{\"h\":\"线程池\",\"t\":[\"基于线程池的服务器设计中，服务端复用线程池里的线程处理请求，但在阻塞模式下，一个线程仅能处理一个 socket 连接，因此仅适合短连接场景。\"]},\"765\":{\"h\":\"多路复用\",\"t\":[\"NIO 的 selector 可以配合一个线程来管理多个 channel，select() 方法会阻塞直到获取这些 channel 上发生的读写就绪事件，交给单独的处理器线程。这些 channel 工作在非阻塞模式下，不会让线程吊死在一个 channel 上。适合连接多、流量低的场景。\"]},\"766\":{\"h\":\"ByteBuffer\"},\"767\":{\"h\":\"使用姿势\",\"t\":[\"向 buffer 写入数据，例如调用 channel.read(buffer)\",\"调用 flip() 切换至读模式\",\"从 buffer 读取数据，例如调用 buffer.get()\",\"调用 clear() 或 compact() 切换至写模式\",\"重复 1~4 步骤\",\"try (FileChannel channel = new FileInputStream(new File(\\\"data.txt\\\")).getChannel()) { ByteBuffer buffer = ByteBuffer.allocate(10); while (true) { int len = channel.read(buffer); log.debug(\\\"读取到的字节数 {}\\\", len); if (len == -1) { break; } // 切换至读模式 buffer.flip(); while (buffer.hasRemaining()) { byte b = buffer.get(); log.debug(\\\"实际字节 {}\\\", (char) b); } // 重置，切换为写模式 buffer.clear(); } } catch (IOException e) { e.printStackTrace(); }\"]},\"768\":{\"h\":\"数据结构\",\"t\":[\"ByteBuffer 是平时最常使用的 Buffer 实现，有三个重要属性：\",\"capacity\",\"position\",\"limit\",\"初始状态\",\"bytebuffer_01\",\"写模式下，position 是写入位置，limit 等于容量，下图表示写入了 4 个字节后的状态\",\"bytebuffer_02\",\"执行 flip() 后，position 切换为读取位置，limit 切换为读取限制\",\"bytebuffer_03\",\"读取 4 个字节后，position 指向下一个读取的索引，状态如下：\",\"bytebuffer_04\",\"执行 clear() 会重置 bytebuffer，清除缓冲区标记\",\"bytebuffer_05\",\"执行 compact() 会把未读完的部分向前压缩，然后切换至写模式\",\"bytebuffer_06\",\"⚠️另外需要注意：\",\"Buffer 是非线程安全的\",\"Buffer 是无边界的数据缓冲区，需要自己解决粘包、半包问题 (长度信息、特定分隔符)\"]},\"769\":{\"h\":\"API\"},\"770\":{\"h\":\"分配空间\",\"t\":[\"可以使用 allocate 方法为 ByteBuffer 分配空间，其它 buffer 类也有该方法。\",\"// heap bytebuffer ByteBuffer byteBuffer = ByteBuffer.allocate(16); // direct bytebuffer ByteBuffer directByteBuffer = ByteBuffer.allocateDirect(16);\",\"HeapByteBuffer: 堆内存，读写效率较低，受到 GC 的影响\",\"DirectByteBuffer: 直接内存，读写效率高（少一次拷贝），不会受 GC 影响，分配的效率低\"]},\"771\":{\"h\":\"写入数据\",\"t\":[\"// 1.调用 channel 的 read 方法 int len = channel.read(buf); // 2.调用 buffer 自己的 put 方法 buf.put((byte)127); // 3.集中写 ByteBuffer b1 = StandardCharsets.UTF_8.encode(\\\"hello\\\"); ByteBuffer b2 = StandardCharsets.UTF_8.encode(\\\"world\\\"); ByteBuffer b3 = StandardCharsets.UTF_8.encode(\\\"你好\\\"); channel.write(new ByteBuffer[]{b1, b2, b3});\"]},\"772\":{\"h\":\"读取数据\",\"t\":[\"// 1.调用 channel 的 write 方法 int len = channel.write(buf); // 2.调用 buffer 自己的 get 方法 byte b = buf.get(); // 3.分散读 ByteBuffer a = ByteBuffer.allocate(3); ByteBuffer b = ByteBuffer.allocate(3); ByteBuffer c = ByteBuffer.allocate(5); channel.read(new ByteBuffer[]{a, b, c});\",\"get 方法会让 position 读指针向后走，如果想重复读取数据\",\"可以调用 rewind 方法将 position 重新置为 0\",\"或者调用 get(index) 方法获取指定索引的内容，并且不会移动读指针\"]},\"773\":{\"h\":\"指定索引\",\"t\":[\"mark() 可以在当前索引打上一个标记，只要调用 reset()，position 就能回到 mark 标记的位置。\",\"ByteBuffer buffer = ByteBuffer.allocate(10); buffer.put(new byte[]{'a', 'b', 'c', 'd'}); buffer.flip(); System.out.println((char) buffer.get()); // a System.out.println((char) buffer.get()); // b // 加标记，索引2 的位置 buffer.mark(); System.out.println((char) buffer.get()); // c System.out.println((char) buffer.get()); // d // 将 position 重置到索引 2 buffer.reset(); System.out.println((char) buffer.get()); // c System.out.println((char) buffer.get()); // d\",\"⚠️注：rewind() 和 flip() 都会清除 mark 标记\"]},\"774\":{\"h\":\"字符串互转\",\"t\":[\"// 1.1. 字符串 -> ByteBuffer ByteBuffer buffer1 = ByteBuffer.allocate(16); buffer1.put(\\\"hello\\\".getBytes()); // 1.2. Charset ByteBuffer buffer2 = StandardCharsets.UTF_8.encode(\\\"hello\\\"); ByteBuffer buffer3 = Charset.forName(\\\"utf-8\\\").encode(\\\"你好\\\"); // 1.3. wrap ByteBuffer buffer4 = ByteBuffer.wrap(\\\"hello\\\".getBytes()); // 2. ByteBuffer -> 转为字符串 buffer1.flip(); String str1 = StandardCharsets.UTF_8.decode(buffer1).toString(); String str2 = StandardCharsets.UTF_8.decode(buffer2).toString();\"]},\"775\":{\"h\":\"文件编程\",\"t\":[\"FileChannel 是用于操作文件的 Channel，只能工作在阻塞模式下，通过代码操作文件要谨慎。不过并不常用，了解即可。\"]},\"776\":{\"h\":\"获取通道\",\"t\":[\"FileChannel 不能直接打开，必须通过 FileInputStream / FileOutputStream / RandomAccessFile 来获取，它们都有 getChannel 方法：\",\"FileInputStream 获取的 channel 只能读\",\"FileOutputStream 获取的 channel 只能写\",\"RandomAccessFile 获取的 channel 能否读写由 RandomAccessFile 的读写模式决定\"]},\"777\":{\"h\":\"API\",\"t\":[\"// 读取：channel -> ByteBuffer，返回读取字节数 int readBytes = channel.read(buffer); // 写入：ByteBuffer -> channel // write 方法并不能保证一次将 buffer 中的内容全部写入 channel while(buffer.hasRemaining()) { channel.write(buffer); } // 获取/设置 position // 读取文件末尾返回 -1；写入文件末尾即追加 long pos = channel.position(); channel.position(newPos); // 大小 long size = channel.size(); // 立即刷盘，参数表示是否刷盘元数据 channel.force(true); // 关闭 // FileInputStream/FileOutputStream/RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法 channle.close(); // 传输数据 // 底层使用零拷贝，效率非常高 FileChannel from = new FileInputStream(\\\"from.txt\\\").getChannel(); FileChannel to = new FileOutputStream(\\\"to.txt\\\").getChannel() from.transferTo(0, from.size(), to);\"]},\"778\":{\"h\":\"Path\",\"t\":[\"jdk7 引入 Path 用来表示文件路径，以及工具类 Paths 来获取 Path 实例\",\"// 相对路径，使用 user.dir 环境变量来定位 1.txt Path source = Paths.get(\\\"1.txt\\\"); // 绝对路径 Path source = Paths.get(\\\"d:\\\\\\\\1.txt\\\"); Path source = Paths.get(\\\"d:/1.txt\\\"); // 自动拼接，表示 d:\\\\data\\\\projects Path projects = Paths.get(\\\"d:\\\\\\\\data\\\", \\\"projects\\\"); // normalize 标准化路径 Path path = Paths.get(\\\"d:\\\\\\\\data\\\\\\\\projects\\\\\\\\a\\\\\\\\..\\\\\\\\b\\\"); System.out.println(path.normalize()); // 输出 d:\\\\data\\\\projects\\\\b\"]},\"779\":{\"h\":\"Files\",\"t\":[\"用于文件的工具类，提供了许多文件/目录相关的API：\",\"// 判断文件是否存在 System.out.println(Files.exists(path)); // 创建单级目录，已存在则抛出异常 Files.createDirectory(path); // 创建多级目录，已存在也不抛异常 Files.createDirectories(path); // 拷贝文件 Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING); // 移动文件 Files.move(source, target, StandardCopyOption.ATOMIC_MOVE); // 删除文件/空目录 Files.delete(target);\",\"遍历文件提供了两种方式:\",\"// walk 返回一个文件流 Files.walk(path, maxDepth, options).forEach(path -> {...}); // walkFileTree 配合 FileVisitor 提供更加灵活的处理访问 Files.walkFileTree(Paths.get(\\\"C:\\\\\\\\Users\\\\\\\\chanper\\\\\\\\Downloads\\\"), new SimpleFileVisitor<Path>() { @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { System.out.println(file.getFileName()); return super.visitFile(file, attrs); } @Override public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException { System.out.println(dir.getFileName()); return super.postVisitDirectory(dir, exc); } });\"]},\"780\":{\"h\":\"网络编程\"},\"781\":{\"h\":\"阻塞 vs 非阻塞\"},\"782\":{\"h\":\"阻塞\",\"t\":[\"阻塞模式下，相关方法会暂停线程，期间不占用 CPU。例如：\",\"ServerSocketChannel.accept 没有连接建立时会暂停线程\",\"SocketChannel.read 没有数据可读时会暂停线程\",\"服务端\",\"// 0. ByteBuffer ByteBuffer buffer = ByteBuffer.allocate(16); // 1. 创建服务器 ServerSocketChannel ssc = ServerSocketChannel.open(); // 2. 绑定监听端口 ssc.bind(new InetSocketAddress(8080)); // 3. 连接集合 List<SocketChannel> channels = new ArrayList<>(); while (true) { // 4. 建立与客户端连接，SocketChannel 用来与客户端通信 SocketChannel sc = ssc.accept(); channels.add(sc); // 5. 接收客户端发送的数据 for (SocketChannel channel : channels) { channel.read(buffer); buffer.flip(); debugRead(buffer); buffer.clear(); } }\",\"客户端\",\"SocketChannel sc = SocketChannel.open(); sc.connect(new InetSocketAddress(\\\"localhost\\\", 8080)); System.out.println(\\\"waiting...\\\");\",\"存在的问题\",\"单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持\",\"多线程下，又会有新的问题 \",\"32 位 JVM 一个线程 320k，64 位 JVM 一个线程 1024k，如果连接数过多可能导致 OOM，频繁上下文切换也会导致性能降低\",\"可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接\"]},\"783\":{\"h\":\"非阻塞\",\"t\":[\"非阻塞模式下，相关方法不会让线程暂停，例如：\",\"ServerSocketChannel.accept 没有连接建立时，返回 null 继续运行\",\"SocketChannel.read 没有数据可读时，返回 0 继续运行\",\"写数据时，线程只需等待数据写入 Channel，无需等待 Channel 通过网络把数据实际发送出去\",\"服务端开启非阻塞模式\",\"// 0. ByteBuffer ByteBuffer buffer = ByteBuffer.allocate(16); // 1. 创建服务器，并开启非阻塞 ServerSocketChannel ssc = ServerSocketChannel.open(); ssc.configureBlocking(false); // 2. 绑定监听端口 ssc.bind(new InetSocketAddress(8080)); // 3. 连接集合 List<SocketChannel> channels = new ArrayList<>(); while (true) { // 4. 建立与客户端连接 SocketChannel sc = ssc.accept(); if (sc != null) { // SocketChannel 开启非阻塞模式 sc.configureBlocking(false); channels.add(sc); } // 5. 接收客户端发送的数据 for (SocketChannel channel : channels) { int read = channel.read(buffer); if (read > 0) { buffer.flip(); debugRead(buffer); buffer.clear(); } } }\",\"存在的问题\",\"非阻塞模式下，即使没有连接建立和可读数据，线程仍然在不断运行，浪费了 CPU 资源。另外在数据的拷贝过程中，线程实际还是阻塞的（正是 AIO 改进的地方）。\"]},\"784\":{\"h\":\"Selector\",\"t\":[\"单线程下可以使用 Selector 完成对多个 Channel 读写事件的监控，称为多路复用技术：\",\"有事件发生时线程才去处理，避免非阻塞模式下做无用功\",\"让线程得到充分利用\",\"节约线程数量，减少上下文切换的开销\",\"仅针对网络 IO，不适用于普通文件 IO\",\"底层实现\",\"Java NIO 会根据操作系统、JDK 版本、运行环境选择合适的底层实现，通常倾向于使用更高性能的 epoll 模型，以提供更好的性能和并发处理能力。\"]},\"785\":{\"h\":\"API\",\"t\":[\"创建\",\"Selector selector = Selector.open();\",\"注册事件\",\"将通道注册到选择器，并指定感兴趣的事件\",\"channel.configureBlocking(false); SelectionKey key = channel.register(selector, SelectionKey.OP_XXX);\",\"Channel 必须工作在非阻塞模式\",\"FileChannel 没有非阻塞模式，因此不能配合 Selector 使用\",\"绑定的事件类型有四个，本质上是整数： \",\"connect 客户端连接就绪时触发\",\"accept 服务器端成功接受连接时触发\",\"read 通道可读时触发\",\"write 通道可写时触发\",\"监听事件\",\"三种方法监听是否有事件发生，返回值代表有多少 channel 发生了事件：\",\"// 方法1：阻塞直到有关注的事件发生 int count = selector.select(); // 方法2：阻塞直到有关注的事件发生，或是超时（单位ms） int count = selector.select(long timeout); // 方法3，不会阻塞，立刻返回 int count = selector.selectNow();\",\"select()不阻塞的情况\",\"有事件发生时： \",\"客户端发起连接请求，触发 accept 事件\",\"客户端发送数据/正常关闭/异常关闭，触发 read 事件（大于缓冲区会触发多次）\",\"通道可写，触发 write 事件\",\"linux 下发生 nio bug 时\",\"调用 selector.wakeup()\",\"调用 selector.close()\",\"selector 所在线程被中断\"]},\"786\":{\"h\":\"处理事件\",\"t\":[\"服务端模板\",\"// 1.创建 Selector, ServerSocketChannel Selector selector = Selector.open(); ServerSocketChannel ssc = ServerSocketChannel.open(); ssc.configureBlocking(false); // 2.关联 selector、ssc，并注册感兴趣事件 SelectionKey sscKey = ssc.register(selector, SelectionKey.OP_ACCEPT, null); ssc.bind(new InetSocketAddress(8080)); while (true) { // 3.select阻塞方法，返回发生了且未处理的事件 selector.select(); // 4.处理事件 Iterator<SelectionKey> iter = selector.selectedKeys().iterator(); while (iter.hasNext()) { SelectionKey key = iter.next(); // 5.根据事件类型做处理 if (key.isAcceptable()) { ... } else if(key.isReadable()) { ... } else if(key.isWritable()) { ... } iter.remove(); } }\",\"SelectionKey 封装了发生的事件类型，以及对应的 channel 用于和客户端进行通信\",\"selectionKey.isAcceptable(); selectionKey.isConnectable(); selectionKey.isReadable(); selectionKey.isWritable(); SocketChannel channel = (SocketChannel) selectionKey.channel();\",\"由于 NIO 底层使用水平触发，因此监测到事件后必须处理/取消，否则后续仍然会触发\",\"// 取消注册在 selector 上的 channel，并将 key 加入 cancelledKeys 集合等待删除 selectionKey.cancel()\",\"Selector 会向 selectedKeys 集合里新增待处理的元素，但不会主动移除，因此要手动移除处理完毕的 SelectionKey\",\"selector_selectorKey\"]},\"787\":{\"h\":\"处理 accept\",\"t\":[\"if (key.isAcceptable()) { // 此 ssc 即服务端一开始 open 的 ServerSocketChannel（门卫） ServerSocketChannel ssc = (ServerSocketChannel) key.channel(); // 此 sc 为专用于和某个客户端通信的 SocketChannel SocketChannel sc = ssc.accept(); // 将此 SocketChannel 注册到 selector，并注册后续关注的事件 sc.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE, null); }\"]},\"788\":{\"h\":\"处理 read\",\"t\":[\"麻烦的地方在于处理数据的边界，即粘包半包问题，常用的方案有：\",\"固定长度消息，缺点是浪费带宽\",\"指定分隔符，缺点是效率低\",\"TLV（Type-Length-Value），缺点是 buffer 需要提前分配，如果内容过大，会影响 server 吞吐量\",\"... ByteBuffer byteBuffer = ByteBuffer.allocate(128); // 添加 attachment SelectionKey scKey = sc.register(selector, SelectionKey.OP_READ, byteBuffer); ... if (key.isAcceptable()) { SocketChannel sc = ssc.accept(); sc.configureBlocking(false); ByteBuffer byteBuffer = ByteBuffer.allocate(7); // 把要写入的 ByteBuffer 作为附件加入 selectionKey SelectionKey scKey = sc.register(selector, SelectionKey.OP_READ, byteBuffer); } else if (key.isReadable()) { try { // 此 SocketChannel 即 ssc 接受连接后注册到 selector 的 sc SocketChannel channel = (SocketChannel) key.channel(); // 获取 selectionKey 上关联的附件 ByteBuffer buffer = (ByteBuffer) key.attachment(); int read = channel.read(buffer); if(read == -1) { key.cancel(); } else { split(buffer); // 需要扩容 if (buffer.position() == buffer.limit()) { ByteBuffer newBuffer = ByteBuffer.allocate(buffer.capacity() * 2); buffer.flip(); newBuffer.put(buffer); // 0123456789abcdef3333\\\\n key.attach(newBuffer); } } } catch (IOException e) { e.printStackTrace(); key.cancel(); // 因为客户端断开了,因此需要将 key 取消（从 selector 的 keys 集合中真正删除 key） } } ... private static void split(ByteBuffer source) { source.flip(); for (int i = 0; i < source.limit(); i++) { // 找到一条完整消息 if (source.get(i) == '\\\\n') { int length = i + 1 - source.position(); ByteBuffer target = ByteBuffer.allocate(length); for (int j = 0; j < length; j++) target.put(source.get()); debugAll(target); } } source.compact(); }\",\"ByteBuffer 大小分配\",\"每个 channel 都需要记录可能被切分的消息，因为 ByteBuffer 不能被多个 channel 共同使用，因此需要为每个 channel 维护一个独立的 ByteBuffer\",\"ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer \",\"一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能，参考实现 http://tutorials.jenkov.com/java-performance/resizable-array.html\",\"另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗\",\"实际上，Netty 的 ByteBuf 就是支持动态伸缩扩容的。\"]},\"789\":{\"h\":\"处理 write\",\"t\":[\"非阻塞模式下，由于缓冲区阻塞、网络拥塞等原因，无法保证一次性把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值做不同的处理。另外，用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，这样会导致占用内存过多，于是就有两阶段策略：\",\"当消息处理器第一次写入消息时，才将 channel 注册到 selector 上\",\"selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册\",\"只要向 channel 发送数据时，socket 缓冲可写，这个事件会频繁触发，因此应当只在 socket 缓冲区写不下时再关注可写事件，数据写完之后取消关注或取消注册。\",\"服务端\",\"if (key.isAcceptable()) { SocketChannel sc = ssc.accept(); sc.configureBlocking(false); SelectionKey sckey = sc.register(selector, SelectionKey.OP_READ); // 连接后向客户端发送内容 StringBuilder sb = new StringBuilder(); for (int i = 0; i < 3000000; i++) sb.append(\\\"a\\\"); ByteBuffer buffer = Charset.defaultCharset().encode(sb.toString()); int write = sc.write(buffer); if (buffer.hasRemaining()) { // 关注可写事件 sckey.interestOps(sckey.interestOps() + SelectionKey.OP_WRITE); // 把要发送的 ByteBuffer 作为附件加入 SelectionKey sckey.attach(buffer); } } else if (key.isWritable()) { // 拿到要发送的 ByteBuffer ByteBuffer buffer = (ByteBuffer) key.attachment(); SocketChannel sc = (SocketChannel) key.channel(); int write = sc.write(buffer); if (!buffer.hasRemaining()) { // 如果写完了 key.interestOps(key.interestOps() ^ SelectionKey.OP_WRITE); key.attach(null); } }\",\"客户端\",\"if (key.isConnectable()) { System.out.println(sc.finishConnect()); } else if (key.isReadable()) { ByteBuffer buffer = ByteBuffer.allocate(1024 * 1024); count += sc.read(buffer); buffer.clear(); System.out.println(count); }\"]},\"790\":{\"h\":\"多线程优化\"},\"791\":{\"h\":\"💡 利用多线程优化\",\"t\":[\"现在的 CPU 基本都是多核设计，编码时要充分利用多核 CPU 的能力，因此可以引入多线程，提高程序的 IO 能力。具体的，可以分成两组 selector：\",\"单个 Boss 线程轮询 selector，专门处理 accept 事件\",\"多个 Worker 线程，负责处理其它事件\",\"public class MultiThreadServer { public static void main(String[] args) throws IOException { Thread.currentThread().setName(\\\"boss\\\"); ServerSocketChannel ssc = ServerSocketChannel.open(); ssc.configureBlocking(false); Selector boss = Selector.open(); ssc.register(boss, SelectionKey.OP_ACCEPT); ssc.bind(new InetSocketAddress(8080)); // 创建固定数量 worker Worker[] workers = new Worker[Runtime.getRuntime().availableProcessors()]; for (int i = 0; i < workers.length; i++) { workers[i] = new Worker(\\\"worker-\\\" + i); } Integer index = 0; while (true) { boss.select(); Iterator<SelectionKey> iter = boss.selectedKeys().iterator(); while (iter.hasNext()) { SelectionKey key = iter.next(); iter.remove(); if (key.isAcceptable()) { SocketChannel sc = ssc.accept(); sc.configureBlocking(false); log.debug(\\\"connected with {}\\\", sc.getRemoteAddress()); // 基于轮询LB策略，关联worker workers[index++ % workers.length].register(sc); } } } } static class Worker implements Runnable { private Selector selector; private String name; private volatile boolean start = false; // 还未初始化 private ConcurrentLinkedQueue<Runnable> tasks = new ConcurrentLinkedQueue<>(); public Worker(String name) { this.name = name; } // boss线程运行 public void register(SocketChannel sc) throws IOException { if (!start) { selector = Selector.open(); new Thread(this, name).start(); start = true; } // 通过消息队列在线程间传递数据，避免多线程阻塞问题 tasks.offer(() -> { try { sc.register(selector, SelectionKey.OP_READ); } catch (IOException e) { throw new RuntimeException(e); } }); selector.wakeup(); } // worker线程运行 @Override public void run() { while (true) { try { selector.select(); Runnable task = tasks.poll(); if (task != null) { task.run(); } Iterator<SelectionKey> iter = selector.selectedKeys().iterator(); while (iter.hasNext()) { SelectionKey key = iter.next(); iter.remove(); if (key.isReadable()) { ByteBuffer buffer = ByteBuffer.allocate(16); SocketChannel channel = (SocketChannel) key.channel(); channel.read(buffer); buffer.flip(); debugAll(buffer); } } } catch (IOException e) { throw new RuntimeException(e); } } } } }\",\"如何拿到 CPU 个数\",\"一般 worker 线程的数量可以设为 CPU 核心数，以充分利用 CPU 资源。Java 中 Runtime.getRuntime().availableProcessors() 可以获取机器的 CPU 核心数。\",\"但如果工作在 Docker 容器下，由于容器不是物理隔离的，会拿到实际的物理 CPU 数，而不是容器分配的 CPU 个数。这个问题直到 jdk 10 才修复，可以用 JVM 参数 UseContainerSupport 配置， 默认开启。\"]},\"792\":{\"h\":\"UDP\",\"t\":[\"UDP 网络编程基于 DatagramChannel，以及 send/receive 等方法。需要注意的是：\",\"UDP 是无连接的，client 发送数据不会管 server 是否开启\",\"Server 端的 receive 方法会将接收到的数据存入 ByteBuffer，但如果数据溢出，多出来的数据会被直接抛弃\",\"服务端\",\"public class UdpServer { public static void main(String[] args) { try (DatagramChannel channel = DatagramChannel.open()) { // channel.socket().bind(new InetSocketAddress(9002)); channel.bind(new InetSocketAddress(9002)); ByteBuffer byteBuffer = ByteBuffer.allocate(16); channel.receive(byteBuffer); byteBuffer.flip(); debugAll(byteBuffer); } catch (IOException e) { e.printStackTrace(); } } }\",\"客户端\",\"public class UdpClient { public static void main(String[] args) { try (DatagramChannel channel = DatagramChannel.open()) { ByteBuffer buffer = StandardCharsets.UTF_8.encode(\\\"hello\\\"); InetSocketAddress address = new InetSocketAddress(\\\"localhost\\\", 9002); channel.send(buffer, address); } catch (IOException e) { e.printStackTrace(); } } }\"]},\"793\":{\"h\":\"IO 模型\"},\"794\":{\"h\":\"分类\",\"t\":[\"网络编程中共有 5 种 IO 模型：同步阻塞、同步非阻塞、多路复用、信号驱动、异步非阻塞\",\"同步：线程自己去获取结果（一个线程）\",\"异步：线程自己不去获取结果，而是由其它线程发送结果（至少两个线程）\",\"NIO\",\"当调用一次 channel.read 或 stream.read 后，需要切换至 OS 内核态来完成真正的数据读取，这个动作分为两个阶段，分别为：\",\"等待数据阶段\",\"复制数据阶段\",\"同步阻塞 IO\",\"同步阻塞\",\"同步非阻塞 IO\",\"同步非阻塞\",\"原始的同步非阻塞相比同步阻塞并没有性能上的优势，因此通常都会配合多路复用以提高性能。\",\"多路复用 IO\",\"多路复用\",\"异步 IO\",\"异步IO\"]},\"795\":{\"h\":\"AIO\",\"t\":[\"异步的 AIO 用来解决数据复制阶段的阻塞问题\",\"同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置\",\"异步意味着，在进行读写操作时，线程不必等待结果，而是将来让 OS 通过回调由另外的线程来获得结果\",\"异步 IO 模型需要底层操作系统（Kernel）提供支持\",\"Windows 系统通过 IOCP 实现了真正的异步 IO\",\"Linux 系统异步 IO 在 2.6 版本引入，但其底层实现还是用多路复用模拟了异步 IO，性能没有优势\"]},\"796\":{\"h\":\"文件 AIO\",\"t\":[\"基于 AsynchronousFileChannel 实现文件的异步 IO，通过 debug 可以发现响应文件读取的另一个线程，主线程并没有阻塞在 IO 操作。\",\"try (AsynchronousFileChannel channel = AsynchronousFileChannel.open(Paths.get(\\\"data.txt\\\"), StandardOpenOption.READ)) { ByteBuffer buffer = ByteBuffer.allocate(16); channel.read(buffer, 0, buffer, new CompletionHandler<Integer, ByteBuffer>() { @Override public void completed(Integer result, ByteBuffer attachment) { attachment.flip(); debugAll(attachment); } @Override public void failed(Throwable exc, ByteBuffer attachment) { exc.printStackTrace(); } }); } catch (IOException e) { e.printStackTrace(); } System.in.read();\",\"守护线程\",\"文件 AIO 默认使用的都是守护线程，所以最后要执行 System.in.read() 以避免守护线程意外结束。\"]},\"797\":{\"h\":\"网络 AIO\",\"t\":[\"基于 AsynchronousServerSocketChannel, AsynchronousSocketChannel 实现异步的网络 IO\",\"public class AioServer { public static void main(String[] args) throws IOException { AsynchronousServerSocketChannel assc = AsynchronousServerSocketChannel.open(); assc.bind(new InetSocketAddress(8080)); assc.accept(null, new AcceptHandler(assc)); System.in.read(); } private static class AcceptHandler implements CompletionHandler<AsynchronousSocketChannel, Object> { private final AsynchronousServerSocketChannel assc; public AcceptHandler(AsynchronousServerSocketChannel assc) { this.assc = assc; } @Override public void completed(AsynchronousSocketChannel asc, Object attachment) { ByteBuffer byteBuffer = ByteBuffer.allocate(16); // 处理读事件 asc.read(byteBuffer, byteBuffer, new ReadHandler(asc)); // 处理写事件 asc.write(Charset.defaultCharset().encode(\\\"server hello!\\\"), ByteBuffer.allocate(16), new WriteHandler(asc)); // 再次 accept 处理下一个连接 assc.accept(null, this); } @Override public void failed(Throwable exc, Object attachment) { exc.printStackTrace(); } } private static class ReadHandler implements CompletionHandler<Integer, ByteBuffer> { private final AsynchronousSocketChannel asc; public ReadHandler(AsynchronousSocketChannel asc) { this.asc = asc; } @Override public void completed(Integer result, ByteBuffer attachment) { try { if (result == -1) { closeChannel(asc); return; } attachment.flip(); log.debug(String.valueOf(Charset.defaultCharset().decode(attachment))); attachment.clear(); // 处理下一个read asc.read(attachment, attachment, this); } catch (IOException e) { throw new RuntimeException(e); } } @Override public void failed(Throwable exc, ByteBuffer attachment) { closeChannel(asc); exc.printStackTrace(); } } private static class WriteHandler implements CompletionHandler<Integer, ByteBuffer> { private final AsynchronousSocketChannel asc; public WriteHandler(AsynchronousSocketChannel asc) { this.asc = asc; } @Override public void completed(Integer result, ByteBuffer attachment) { if (attachment.hasRemaining()) { asc.write(attachment); } } @Override public void failed(Throwable exc, ByteBuffer attachment) { exc.printStackTrace(); closeChannel(asc); } } private static void closeChannel(AsynchronousSocketChannel asc) { try { asc.close(); } catch (IOException e) { throw new RuntimeException(e); } } }\"]},\"798\":{\"h\":\"零拷贝\"},\"799\":{\"h\":\"传统 IO\",\"t\":[\"传统的 IO 将一个文件通过 socket 写出\",\"File f = new File(\\\"helloword/data.txt\\\"); RandomAccessFile file = new RandomAccessFile(file, \\\"r\\\"); byte[] buf = new byte[(int)f.length()]; file.read(buf); Socket socket = ...; socket.getOutputStream().write(buf);\",\"底层工作流程是这样的：\",\"传统IO内部流程\",\"Java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序所处的用户态切换至内核态，去调用 OS 内核的读能力，将数据读入内核缓冲区。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间不会使用 CPU\",\"DMA 是一种硬件单元，用来解放 CPU 完成文件 IO\",\"从内核态切换回用户态，将数据从内核缓冲区读入用户缓冲区（byte[] buf），这期间 CPU 会参与拷贝\",\"调用 write 方法，这时将数据从用户缓冲区写入 socket 缓冲区，CPU 会参与拷贝\",\"接下来要向网卡写数据，这项能力 Java 又不具备，因此又得从用户态切换至内核态，调用操作系统的写能力，使用 DMA 将 socket 缓冲区的数据写入网卡，不会使用 CPU\",\"可以看到中间环节较多，Java 的 IO 实际不是物理设备级别的读写，而是缓存的拷贝复制，底层的真正读写是 OS 内核来完成的，期间\",\"用户态与内核态的切换发生了 3 次，是一种重量级的操作\",\"数据共拷贝了 4 次\"]},\"800\":{\"h\":\"DirectByteBuffer\",\"t\":[\"前面提到过 ByteBuffer 有两种创建方式：\",\"ByteBuffer.allocate(10) 使用的 java 内存 - HeapByteBuffer\",\"ByteBuffer.allocateDirect(10) 使用的是操作系统内存 - DirectByteBuffer\",\"DirectByteBuffer\",\"优化点在于 Java 可以使用 DirectByteBuffer 将堆外内存映射到 JVM 内存中来直接访问使用。\",\"这块内存不受 JVM 垃圾回收的影响，因此内存地址固定，有助于 IO 读写\",\"java 中的 DirectByteBuffer 对象仅维护了此内存的虚引用，内存回收分成两步 \",\"DirectByteBuffer 对象被垃圾回收，将虚引用加入引用队列\",\"通过专门线程访问引用队列，根据虚引用释放堆外内存\",\"减少了一次数据拷贝，用户态与内核态的切换次数没有减少（依然是4次切换+3次拷贝）\"]},\"801\":{\"h\":\"transferTo\",\"t\":[\"Linux 2.1 后提供了 sendFile 方法，对应 Java 中的两个 channel 调用 transferTo/transferFrom 方法用于拷贝数据。\",\"sendFile\",\"Java 调用 transferTo 方法后，要从用户态切换至内核态，使用 DMA 将数据读入内核缓冲区，不占用 CPU\",\"数据从内核缓冲区传输到socket 缓冲区，CPU 参与拷贝\",\"最后使用 DMA 将 socket 缓冲区的数据写入网卡，也不占用 CPU\",\"可以看到期间仅发生了一次用户态与内核态的切换，但是数据仍然拷贝了 3 次\"]},\"802\":{\"h\":\"零拷贝\",\"t\":[\"Linux 2.4 里面的 sendFile 做了进一步的优化，实现了 Java 层面的零拷贝。\",\"零拷贝\",\"Java 调用 transferTo 方法后，要从 java 程序的用户态切换至内核态，使用 DMA将数据读入内核缓冲区，不占用 CPU\",\"只会将一些 offset 和 length 信息拷入 socket 缓冲区，几乎无消耗\",\"使用 DMA 将 内核缓冲区的数据写入网卡，不占用 CPU\",\"整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是不会重复拷贝数据到 JVM 内存中。优点如下：\",\"更少的用户态与内核态的切换\",\"不利用 CPU 计算，减少 CPU 缓存伪共享\",\"零拷贝适合小文件传输\",\"提示\",\"零拷贝技术主要关注数据传输和复制的优化，不涉及数据处理。应用程序可以自由选择在内存或其它硬件设备中进行数据处理。\"]},\"803\":{\"c\":[\"Java\"]},\"804\":{\"c\":[\"NIO\"]},\"805\":{\"h\":\"Netty 网络框架 01\"},\"806\":{\"h\":\"概述\"},\"807\":{\"h\":\"Netty 是什么？\",\"t\":[\"Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients.\",\"Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端。作者是韩国的 Trustin Lee，同时也是另一个著名网络应用框架 Mina 的重要贡献者。\",\"Netty 自 2004 年诞生以来，久经考验\",\"2.x 2004\",\"3.x 2008\",\"4.x 2013（现在主要使用的版本）\",\"5.x 2015（已废弃，没有明显的性能提升，维护成本高）\"]},\"808\":{\"h\":\"Netty 的地位\",\"t\":[\"Netty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位。以下的框架都使用了 Netty，因为它们有网络通信需求！\",\"Cassandra - nosql 数据库\",\"Spark - 大数据分布式计算框架\",\"Hadoop - 大数据分布式存储框架\",\"RocketMQ - 阿里开源的消息队列\",\"ElasticSearch - 搜索引擎\",\"gRPC - rpc 框架\",\"Dubbo - rpc 框架\",\"Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端\",\"Zookeeper - 分布式协调框架\"]},\"809\":{\"h\":\"Netty 的优势\",\"t\":[\"相比于 NIO 和 其它网络应用框架有着无可比拟的优势：\",\"NIO 工作量大，bug 多 \",\"需要自己构建协议\",\"解决 TCP 传输问题，如粘包、半包\",\"epoll 空轮询导致 CPU 100%\",\"对 API 进行增强，使之更易用，如 FastThreadLocal => ThreadLocal，ByteBuf => ByteBuffer\",\"其它网络应用框架 \",\"Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性\",\"而 Netty 的开发迭代更迅速，API 更简洁、文档更优秀\"]},\"810\":{\"h\":\"Hello World\",\"t\":[\"开发一个简单的服务端和客户端为案例，首先引入 Netty 的依赖：\",\"<dependency> <groupId>io.netty</groupId> <artifactId>netty-all</artifactId> <version>xxx</version> </dependency>\"]},\"811\":{\"h\":\"服务端\",\"t\":[\"public class HelloServer { public static void main(String[] args) { // 1.配置服务端启动器类 new ServerBootstrap() // 类似Boss和Worker，EventLoop = selector + thread .group(new NioEventLoopGroup()) // 选择服务端 ServerSocketChannel 实现 .channel(NioServerSocketChannel.class) // worker(child) 处理请求的配置 .childHandler(new ChannelInitializer<>() { // 5.初始化数据处理器 @Override protected void initChannel(Channel channel) throws Exception { channel.pipeline().addLast(new LoggingHandler()); channel.pipeline().addLast(new StringDecoder()); channel.pipeline().addLast(new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { System.out.println(msg); } }); } }) // 2.监听绑定端口 .bind(8080); } }\"]},\"812\":{\"h\":\"客户端\",\"t\":[\"public class HelloClient { public static void main(String[] args) throws InterruptedException { // 3.客户端启动类 new Bootstrap() .group(new NioEventLoopGroup()) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<NioSocketChannel>() { // 5.初始化数据处理器 @Override protected void initChannel(NioSocketChannel channel) throws Exception { channel.pipeline().addLast(new StringEncoder()); } }) // 4.发起连接请求 .connect(new InetSocketAddress(\\\"localhost\\\", 8080)) // 阻塞等待连接成功 .sync() // 6.获取连接后的channel .channel() // 发送数据 .writeAndFlush(\\\"Hello, World!\\\"); } }\"]},\"813\":{\"h\":\"流程梳理\",\"t\":[\"Server：创建服务端启动类 ServerBootstrap\",\"创建 NioEventLoopGroup，可以理解成 Selector + Worker线程池\",\"选择 ServerSocketChannel 的实现\",\"ServerSocketChannel实现\",\"配置 childHandler，用于处理客户端发起的连接建立后 SocketChannel 的请求，ChannelInitializer 会在连接建立后执行初始化\",\"Server：监听绑定端口\",\"Client：创建客户端启动类 Bootstrap\",\"创建 NioEventLoopGroup\",\"选择 ServerSocketChannel 的实现\",\"配置 handler，用于处理连接建立后 SocketChannel 的请求，ChannelInitializer 会在连接建立后执行初始化\",\"Client：connect 发起连接请求，sync 会同步阻塞，等待连接建立\",\"连接建立成功后，就会执行服务端、客户端的 ChannelInitializer 初始化处理器的配置\",\"Client：channel 获取连接建立后的通道，然后开始双方的数据通信，依次经过各个 Handler\"]},\"814\":{\"h\":\"模型概念\",\"t\":[\"Channel 理解为数据的通道，和 NIO 一致\",\"msg 理解为流动的数据，初始状态是 ByteBuf，经过 Pipeline 的加工，变成其它类型对象，最后输出又变回 ByteBuf\",\"Handler 理解为数据的处理工序，分 Inbound 入站和 Outbound 出站两类 \",\"工序可以有多个，多道工序的组合就是 Pipeline\",\"Pipeline 负责发布事件（读、读取完成...）传播给每个 Handler， Handler 对自己感兴趣的事件进行处理（重写相应的事件处理方法）\",\"EventLoop 理解为处理数据的工人 \",\"工人根据 Pipeline 里 Handler 的编排依次处理数据，并且可以为每道工序指定不同的工人\",\"一个工人可以管理多个 Channel 的 IO 操作，并且一旦某个工人负责了某个 Channel，就会绑定负责到底\",\"工人既可以执行 IO 操作，也可以进行任务处理\",\"每位工人有相应的任务队列，队列里可以堆放多个 Channel 的待处理任务（分普通任务、定时任务）\"]},\"815\":{\"h\":\"EventLoop\"},\"816\":{\"h\":\"EventLoop\",\"t\":[\"事件循环对象，本质是一个单线程的执行器，同时维护了一个 Selector。里面有 run 方法处理 Channel 上源源不断的 IO 事件。\",\"EventLoop 最底层继承自 ExecutorService，因此具有线程池的所有方法\",\"EventLoop 间接继承自 Netty 的 OrderedEventExecutor，因此存在父子关系 \",\"inEventLoop(thread) 判断一个线程是否属于当前 EventLoop\",\"parent() 获得自己的父 EventLoop\",\"EventLoop 实现类继承了 SingleThreadEventLoop，因此实际上又是个单线程\",\"NioEventLoop\"]},\"817\":{\"h\":\"EventLoopGroup\",\"t\":[\"EventLoopGroup 是一组 EventLoop()，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 IO 事件都由此 EventLoop 来处理，保证了 IO 事件处理时的线程安全。\",\"继承自 Netty 的 MultithreadEventExecutorGroup -> EventExecutorGroup，Set<EventExecutor> readonlyChildren即 EventLoop 组\",\"实现了 Iterable 提供遍历 EventLoop 的能力，实现上就是返回readonlyChildren的迭代器\",\"next() 获取集合内的下一个 EventLoop\",\"所以其实可以直接向 EventLoop 提交任务，可以用来执行耗时较长的任务，细分功能：\",\"NioEventLoopGroup workers = new NioEventLoopGroup(2); log.debug(\\\"start...\\\"); Thread.sleep(2000); workers.execute(() -> { log.debug(\\\"Task...\\\"); }); Thread.sleep(2000); workers.scheduleAtFixedRate(() -> { log.debug(\\\"Scheduled Task...\\\"); }, 0, 1, TimeUnit.SECONDS);\",\"优雅关闭\",\"EventExecutorGroup#shutdownGracefully方法首先切换 EventLoopGroup 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的。\"]},\"818\":{\"h\":\"绑定 Channel\",\"t\":[\"addLast 在添加 Handler 时，还可以指定执行的线程池，在 Pipeline 加工数据时就会从指定的线程池里取 Worker 去加工数据。\",\"DefaultEventLoopGroup group = new DefaultEventLoopGroup(2); new ServerBootstrap() .group(new NioEventLoopGroup(1), new NioEventLoopGroup(2)) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<>() { @Override protected void initChannel(Channel channel) throws Exception { channel.pipeline().addLast(\\\"handler1\\\", new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { log.debug(msg.toString()); ctx.fireChannelRead(msg); } }).addLast(group, \\\"handler2\\\", new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { log.debug(msg.toString()); } }); } }) .bind(8080);\",\"执行结果：\",\"handler绑定结果\",\"可以看到，NioEventLoopGroup 的两个工人轮流在第一道工序处理，DefaultEventLoopGroup 的两个工人轮流在第二道工序处理。即工人与 channel 之间进行了绑定，但中途是可以换人处理的。\",\"原理\",\"关键代码 io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()\",\"static void invokeChannelRead(final AbstractChannelHandlerContext next, Object msg) { final Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, \\\"msg\\\"), next); // 下一个 handler 的事件循环是否与当前的事件循环是同一个线程 EventExecutor executor = next.executor(); // 是，直接调用 if (executor.inEventLoop()) { next.invokeChannelRead(m); } // 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人） else { executor.execute(new Runnable() { @Override public void run() { next.invokeChannelRead(m); } }); } }\",\"如果两个 handler 绑定的是同一个线程，那么就直接调用\",\"否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用\",\"handler绑定\"]},\"819\":{\"h\":\"Channel\",\"t\":[\"Channel 比较简单，常用 API 如下：\",\"sync 同步等待 channel 操作\",\"addListener 是异步监听 channel 操作\",\"close() 关闭 channel\",\"closeFuture() 用来处理 channel 的关闭\",\"pipeline() 添加处理器\",\"write() 将数据写入\",\"writeAndFlush() 将数据写入并刷出\"]},\"820\":{\"h\":\"ChannelFuture\",\"t\":[\"将客户端代码拆解来看：\",\"ChannelFuture channelFuture = new Bootstrap() .group(new NioEventLoopGroup()) .channel(NioSocketChannel.class) .handler(new ChannelInitializer<NioSocketChannel>() { @Override protected void initChannel(NioSocketChannel channel) throws Exception { channel.pipeline().addLast(new StringEncoder()); } }) .connect(new InetSocketAddress(\\\"localhost\\\", 8080)); log.debug(\\\"{}\\\", channelFuture.channel()); channelFuture.sync(); log.debug(\\\"{}\\\", channelFuture.channel()); channelFuture.channel().writeAndFlush(\\\"Hello, World!\\\");\",\"connect() 连接是个异步方法，并不会阻塞主线程，因此在 sync() 方法之前，日志打印的 channel 是个未连接的通道对象[id: 0x2e1884dd]。而 sync() 方法就是同步等待连接建立成功，因此第二个日志打印的 channel 就是个已连接的通道[id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]。\",\"除了用 sync() 方法让异步操作同步以外，还可以使用回调的方式：\",\"log.debug(\\\"{}\\\", channelFuture.channel()); channelFuture.addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture channelFuture) throws Exception { log.debug(\\\"{}\\\", channelFuture.channel()); } });\",\"ChannelFutureListener 会在连接建立时被调用，执行 operationComplete 方法，因此第一个日志打印的是未建立连接的 channel，而第二个日志打印 [id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]，即已经连接成功的 channel。同时从线程名也可以看出 listener 的回调是由 NioEventLoopGroup 里的线程执行的。\"]},\"821\":{\"h\":\"CloseFuture\",\"t\":[\"同样的，关闭也有两种方式：\",\"// 方法 1：直接异步关闭 channel.close(); // 方法 2：Future监听器 ChannelFuture closeFuture = channel.closeFuture(); log.debug(\\\"{}\\\", closeFuture.getClass()); closeFuture.addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { group.shutdownGracefully(); } });\",\"close() 方法会异步去关闭 channel，而 CloseFuture 配合监听器模式可以在关闭后自动执行回调，做一些后置的清理工作，让事件组处理完手上的工作后不再接收新任务，使得程序结束更加优雅。\"]},\"822\":{\"h\":\"Future & Promise\",\"t\":[\"在异步处理时，经常用到 Future 和 Promise 这两个接口。Netty 中的 Future 继承自 JDK 中的 Future，而 Promise 又继承自 Netty 的 Future，做了进一步的扩展。主要的区别在于：\",\"JDK Future 只能同步等待任务结束（成功/失败）才能得到结果\",\"Netty Future 可以同步等待任务结束拿到结果，也可以异步方式得到结果，但都要等任务结束\",\"Netty Promise 不仅有 Netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器\",\"功能/名称\",\"JDK Future\",\"Netty Future\",\"Promise\",\"cancel\",\"取消任务\",\"-\",\"-\",\"isCanceled\",\"任务是否取消\",\"-\",\"-\",\"isDone\",\"任务是否完成，不能区分成功失败\",\"-\",\"-\",\"get\",\"获取任务结果，阻塞等待\",\"-\",\"-\",\"getNow\",\"-\",\"获取任务结果，非阻塞，还未产生结果时返回 null\",\"-\",\"await\",\"-\",\"等待任务结束，如果任务失败，不会抛异常\",\"-\",\"sync\",\"-\",\"等待任务结束，如果任务失败，抛出异常\",\"-\",\"isSuccess\",\"-\",\"判断任务是否成功\",\"-\",\"cause\",\"-\",\"获取失败信息，非阻塞，如果没有失败，返回null\",\"-\",\"addLinstener\",\"-\",\"添加回调，异步接收结果\",\"-\",\"setSuccess\",\"-\",\"-\",\"设置成功结果\",\"setFailure\",\"-\",\"-\",\"设置失败结果\",\"下面看几个示例：\",\"JDK Future\",\"ExecutorService service = Executors.newFixedThreadPool(2); Future<Integer> future = service.submit(new Callable<Integer>() { @Override public Integer call() throws Exception { log.debug(\\\"执行计算\\\"); Thread.sleep(1000); return 50; } }); // 主线程同步阻塞，等待结果 log.debug(\\\"结果：{}\\\", future.get());\",\"Netty Future\",\"EventLoop eventLoop = new NioEventLoopGroup().next(); Future<Integer> future = eventLoop.submit(new Callable<Integer>() { @Override public Integer call() throws Exception { log.debug(\\\"执行计算\\\"); Thread.sleep(1000); return 70; } }); // 1. 同步等待 log.debug(\\\"结果：{}\\\", future.get()); // 2. 异步回调，获取结果 future.addListener(new GenericFutureListener<Future<? super Integer>>(){ @Override public void operationComplete(Future<? super Integer> future) throws Exception { log.debug(\\\"接收结果: {}\\\", future.getNow()); } });\",\"Netty Promise\",\"EventLoop eventLoop = new NioEventLoopGroup().next(); // 可以主动创建 promise 这个结果容器 DefaultPromise<Integer> promise = new DefaultPromise<>(eventLoop); new Thread(() -> { log.debug(\\\"开始计算...\\\"); try { Thread.sleep(1000); int i = 1 / 0; // 填充成功的结果 promise.setSuccess(80); } catch (Exception e) { e.printStackTrace(); // 填充失败的结果 promise.setFailure(e); } }).start(); // 1. 同步等待 log.debug(\\\"结果: {}\\\", promise.get()); // 2. 异步回调，获取结果 promise.addListener(new GenericFutureListener<Future<? super Integer>>() { @Override public void operationComplete(Future<? super Integer> future) throws Exception { log.debug(\\\"结果是: {}\\\", promise.getNow()); } });\",\"Promise 的 get() 和 sync() 都可以同步等待执行结果，如果出现异常都会抛出，get() 会在外面再多包一层。await() 同样也是同步等待，但如果执行失败不会抛出异常。另外需要注意执行多个任务时要注意 Promise 的同步阻塞，防止死锁等待。\"]},\"823\":{\"h\":\"Handler & Pipeline\",\"t\":[\"ChannelHandler 用来处理 Channel 上的各种事件，分入站、出站两类。所有 ChannelHandler 被连成一串，就是 Pipeline 管道流水线。\",\"入站处理器通常是 ChannelInboundHandlerAdapter 的子类，用于读取客户端发送的数据，计算结果\",\"出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，用于对计算结果进行加工回复\",\"这里的概念可以理解成：ByteBuf 是原材料，经过 Pipeline 里面各个 ChannelHandler(先入站、后出站) 处理后返回给客户端。\",\"我们可以用 EmbeddedChannel 测试 Handler 的处理顺序：\",\"public static void main(String[] args) { // 入站1 ChannelInboundHandlerAdapter h1 = new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { log.debug(\\\"1\\\"); super.channelRead(ctx, msg); } }; // 入站2 ChannelInboundHandlerAdapter h2 = new ChannelInboundHandlerAdapter() { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { log.debug(\\\"2\\\"); super.channelRead(ctx, msg); } }; // 出站1 ChannelOutboundHandlerAdapter h3 = new ChannelOutboundHandlerAdapter() { @Override public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception { log.debug(\\\"3\\\"); super.write(ctx, msg, promise); } }; // 出站2 ChannelOutboundHandlerAdapter h4 = new ChannelOutboundHandlerAdapter() { @Override public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception { log.debug(\\\"4\\\"); super.write(ctx, msg, promise); } }; EmbeddedChannel channel = new EmbeddedChannel(h1, h2, h3, h4); // 模拟入站操作 channel.writeInbound(ByteBufAllocator.DEFAULT.buffer().writeBytes(\\\"hello\\\".getBytes())); // 模拟出站操作 channel.writeOutbound(ByteBufAllocator.DEFAULT.buffer().writeBytes(\\\"world\\\".getBytes())); }\",\"执行结果为：\",\"handler链执行结果\",\"由此我们可知，ChannelInboundHandlerAdapter 是按照 addLast 的顺序执行的，而 ChannelOutboundHandlerAdapter 是按照 addLast 的逆序执行的。ChannelPipeline 的实现是一个 ChannelHandlerContext（包装了 ChannelHandler） 组成的双向链表。\",\"handler链\",\"入站处理器中，super.channelRead(ctx, msg)实际执行了ctx.fireChannelRead(msg)\",\"作用是调用下一个入站处理器\",\"不调用则不会进入下一个入站处理器\",\"出站处理器中，super.write(ctx, msg, promise)实际执行了ctx.write(msg, promise)\",\"作用是调用下一个出站处理器\",\"不调用则不会进入下一个出站处理器\",\"出站处理器中，也可以执行ctx.channel().write(msg)触发其它处理器 \",\"但会从尾部 tail 开始触发后续出站处理器的执行\",\"而ctx.write(msg)是从当前节点找上一个出站处理器\"]},\"824\":{\"h\":\"ByteBuf\",\"t\":[\"ByteBuf 是 Netty 提供的用于处理字节数据的缓冲区类，是 Netty 的核心组件之一。提供了丰富的 API，用于操作字节数据，包括读取、写入、复制、切片等操作。\"]},\"825\":{\"h\":\"特点\",\"t\":[\"灵活的内存分配：ByteBuf 支持自动扩容，并且使用池化技术分配内存，避免频繁地创建和销毁缓冲区，提高了内存利用率\",\"零拷贝：ByteBuf 支持零拷贝技术，可以直接访问 OS 底层数据，避免了数据在应用程序和内核空间之间的复制\",\"读写索引分离：ByteBuf 有独立的读索引和写索引，可以实现零拷贝的同时保持读写操作的独立性\",\"引用计数：ByteBuf 使用引用计数来跟踪缓冲区的引用次数，当引用计数为零时将被自动释放，避免了内存泄漏\",\"可组合和复合：ByteBuf 可以被组合成更大的数据结构，也可以被拆分成多个小的数据结构，支持复杂的数据处理需求\"]},\"826\":{\"h\":\"创建\",\"t\":[\"Netty 创建的 ByteBuf 既可以使用直接内存，也可以使用堆内存，并且默认开启了池化技术。\",\"// 默认使用直接内存 ByteBuf directBuf1 = ByteBufAllocator.DEFAULT.buffer(); System.out.println(directBuf1.getClass()); // 默认方法实际调用的这一层 ByteBuf directBuffer2 = ByteBufAllocator.DEFAULT.directBuffer(); System.out.println(directBuffer2.getClass()); // 指定使用堆内存 ByteBuf heapBuffer = ByteBufAllocator.DEFAULT.heapBuffer(); System.out.println(heapBuffer.getClass()); // Handler 中可以使用 context 创建 ByteBuf buf = channelHandlerContext.alloc().buffer();\",\"直接内存 vs 堆内存\",\"直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用\",\"直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放\",\"池化 vs 非池化\",\"没有池化，则每次都要创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力\",\"有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率\",\"高并发时，池化功能更节约内存，减少内存溢出的可能\",\"在 Netty 4.1 版本之后，除了 Android 平台默认实现都是开启池化的，可以通过环境变量/VM参数指定是否池化：-Dio.netty.allocator.type={unpooled|pooled}\"]},\"827\":{\"h\":\"结构\",\"t\":[\"ByteBuf 的内存区域可以分为四个部分，通过若干个索引分割：\",\"ByteBuf结构\",\"最开始读写指针都在 0 位置\",\"Reader Index 读索引： readerIndex 是一个指针，表示下一个被读取的字节的位置。从 ByteBuf 中读取数据时，readerIndex 会随之移动。可以通过byteBuf.readerIndex()获取。\",\"Writer Index 写索引： writerIndex 是一个指针，表示下一个可以被写入数据的位置。向 ByteBuf 中写入数据时，writerIndex 会随之移动。可以通过byteBuf.writerIndex()获取。\",\"Capacity 容量： capacity 表示 ByteBuf 的总容量，即它可以存储的最大字节数。当 writerIndex 达到 capacity 时，ByteBuf 需要重新分配更大的内存来扩容。可以通过byteBuf.capacity()获取。\",\"Max Capacity 最大容量： maxCapacity 是 ByteBuf 的最大容量，即它能够动态扩容的最大限制。默认是 Integer.MAX_VALUE，可以通过byteBuf.maxCapacity()获取。\",\"Reference Count 引用计数： ByteBuf 使用引用计数来跟踪缓冲区的引用次数。当引用计数为零时，ByteBuf 内存将被释放。基于 ReferenceCounted 接口实现，可以通过byteBuf.refCnt()获取\"]},\"828\":{\"h\":\"读写\",\"t\":[\"写方法，写指针会随写入字节数移动；类似的有对应的读方法(write->read)，读指针随读取字节数移动。\",\"方法签名\",\"含义\",\"备注\",\"writeBoolean(boolean value)\",\"写入 boolean 值\",\"用一字节 01|00 代表 true|false\",\"writeByte(int value)\",\"写入 byte 值\",\"writeShort(int value)\",\"写入 short 值\",\"writeInt(int value)\",\"写入 int 值\",\"Big Endian，即 0x250，写入后 00 00 02 50\",\"writeIntLE(int value)\",\"写入 int 值\",\"Little Endian，即 0x250，写入后 50 02 00 00\",\"writeLong(long value)\",\"写入 long 值\",\"writeChar(int value)\",\"写入 char 值\",\"writeFloat(float value)\",\"写入 float 值\",\"writeDouble(double value)\",\"写入 double 值\",\"writeBytes(ByteBuf src)\",\"写入 netty 的 ByteBuf\",\"writeBytes(byte[] src)\",\"写入 byte[]\",\"writeBytes(ByteBuffer src)\",\"写入 nio 的 ByteBuffer\",\"int writeCharSequence(CharSequence sequence, Charset charset)\",\"写入字符串\",\"提示\",\"未指明返回值的写方法，其返回值都是 this，因此支持链式调用\",\"一系列以 set 开头的写方法可以修改指定位置的数据，不改变写指针位置\",\"一系列以 get 开头的读方法可以读取指定位置的数据，不改变读指针位置\",\"类似 NIO 的 ByteBuffer，byteBuf.mark[Writer|Reader]Index、byteBuf.reset[Writer|Reader]Index可以标记、重置读写指针\",\"网络传输，默认习惯是 Big Endian\",\"扩容机制\",\"如果写入后数据大小未超过 4MB，则每次容量翻倍\",\"如果写入后数据大小超过 4MB，则每次增加 $4MB * n$，$n$ 取决于容量足够即可，目的是避免内存浪费\",\"扩容的大小不能超过 max capacity\"]},\"829\":{\"h\":\"内存回收\",\"t\":[\"基于堆外内存的 ByteBuf 实现最好是手动来释放，而不是等 GC 垃圾回收。\",\"UnpooledHeapByteBuf 使用 JVM 内存，只需等 GC 回收内存即可\",\"UnpooledDirectByteBuf 使用直接内存，需要特殊的方法来回收内存\",\"PooledByteBuf 及其子类使用了池化机制，需要更复杂的规则来回收内存\",\"回收内存的源码实现，可以关注 protected abstract void deallocate()方法的不同实现。\",\"原理上，Netty 采用了引用计数法来控制回收内存，每种 ByteBuf 都实现了 ReferenceCounted 接口：\",\"每个 ByteBuf 对象的初始计数为 1\",\"调用 byteBuf.release() 方法计数减 1\",\"调用 byteBuf.retain() 方法计数加 1\",\"当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用\",\"释放规则\",\"基本规则是，谁是最后使用者，谁负责 release ！\",\"起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）\",\"入站 ByteBuf 处理原则 \",\"对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release\",\"将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release\",\"如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release\",\"注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release\",\"假设消息一直向后传，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）\",\"出站 ByteBuf 处理原则 \",\"出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release\",\"异常处理原则 \",\"有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以循环调用 release 直到返回 true\"]},\"830\":{\"h\":\"零拷贝\",\"t\":[\"和 OS 里面的零拷贝意义略有不同，Netty 的零拷贝指的是对 ByteBuf 的复制、拼接在底层没有发生内存的拷贝，还是使用原来的那块内存区域，只不过新增了一些指针来维护不同的实例。\"]},\"831\":{\"h\":\"切片\",\"t\":[\"byteBuf.slice()对 ByteBuf 进行切片，并不发生内存复制，切片后的多个 ByteBuf 各自维护独立的 read，write 指针。\",\"ByteBuf切片\",\"ByteBuf buf = ByteBufAllocator.DEFAULT.buffer(10); buf.writeBytes(new byte[]{'a','b','c','d','e','f','g','h','i','j'}); log(buf); // 切片后调用 retain 防止被释放 ByteBuf slice = buf.slice(0, 5); slice.retain(); // 对 slice 写数据也会改变原来的 buf，因为底层是同一块内存区域 slice.setByte(4, 'x'); log(slice); // 使用完毕要注意主动释放 slice.release();\"]},\"832\":{\"h\":\"复制\",\"t\":[\"byteBuf.duplicate()截取原始 ByteBuf 的所有内容，不发生内存拷贝，仅新增维护指针。\",\"ByteBuf复制\",\"byteBuf.copy()则是执行了深拷贝，无论读写都和原 ByteBuf 无关。\"]},\"833\":{\"h\":\"组合\",\"t\":[\"CompositeByteBuf 是一个组合的 ByteBuf，内部维护了一个 Component 数组，每个 Component 管理一个 ByteBuf，记录了这个 ByteBuf 相对于整体偏移量的信息，代表着整体中某一段的数据。\",\"优点，对外是一个虚拟视图，组合这些 ByteBuf 不会产生内存复制\",\"缺点，复杂了很多，多次操作会带来性能的损耗\",\"CompositeByteBuf buffer = ByteBufAllocator.DEFAULT.compositeBuffer(); buffer.addComponents(true, buf1, buf2); log(buffer);\"]},\"834\":{\"h\":\"Unpooled\",\"t\":[\"Unpooled 是一个工具类，提供了非池化的 ByteBuf 创建、组合、复制等操作，例如wrappedBuffer用于包装 ByteBuf，并且底层不会发生拷贝。\",\"// 当包装 ByteBuf 个数超过一个时, 底层使用了 CompositeByteBuf ByteBuf buf3 = Unpooled.wrappedBuffer(buf1, buf2); // 也可以包装普通字节数组 ByteBuf buf4 = Unpooled.wrappedBuffer(new byte[]{1, 2, 3}, new byte[]{4, 5, 6});\"]},\"835\":{\"c\":[\"Java\"]},\"836\":{\"c\":[\"Netty\"]},\"837\":{\"h\":\"Netty 网络框架 02\"},\"838\":{\"h\":\"粘包半包\"},\"839\":{\"h\":\"现象\",\"t\":[\"粘包\",\"现象，发送 abc_def，接收 abcdef\",\"原因 \",\"应用层：接收方 ByteBuf 设置太大（Netty 默认 1024）\",\"滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大，这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包\",\"Nagle 算法：也会造成粘包\",\"半包\",\"现象，发送 abcdef，接收 abc_def\",\"原因 \",\"应用层：接收方 ByteBuf 小于实际发送数据量\",\"滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时放不下了，只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包\",\"MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包\",\"无论是粘包还是半包，本质原因在于 TCP 是一个无边界的流式协议。\",\"扩展1：MSS 限制\",\"链路层对一次能够发送的最大数据有限制，这个限制称之为 MTU（maximum transmission unit），不同的链路设备的 MTU 值也有所不同，例如\",\"以太网的 MTU 是 1500\",\"FDDI（光纤分布式数据接口）的 MTU 是 4352\",\"本地回环地址的 MTU 是 65535 - 本地测试不走网卡\",\"MSS 是最大段长度（maximum segment size），它是 MTU 刨去 tcp 头和 ip 头后剩余能够作为数据传输的字节数\",\"ipv4 tcp 头占用 20 bytes，ip 头占用 20 bytes，因此以太网 MSS 的值为 1500 - 40 = 1460\",\"TCP 在传递大量数据时，会按照 MSS 大小将数据进行分割发送\",\"MSS 的值在三次握手时通知对方自己 MSS 的值，然后在两者之间选择一个小值作为 MSS\",\"扩展2：Nagle 算法\",\"即使发送一个字节，也需要加入 tcp 头和 ip 头，也就是总字节数会使用 41 bytes，非常不经济。因此为了提高网络利用率，tcp 希望尽可能发送足够大的数据，这就是 Nagle 算法产生的缘由\",\"该算法是指发送端即使还有应该发送的数据，但如果这部分数据很少的话，则进行延迟发送 \",\"如果 SO_SNDBUF 的数据达到 MSS，则需要发送\",\"如果 SO_SNDBUF 中含有 FIN（表示需要连接关闭）这时将剩余数据发送，再关闭\",\"如果 TCP_NODELAY = true，则需要发送\",\"已发送的数据都收到 ack 时，则需要发送\",\"上述条件不满足，但发生超时（一般为 200ms）则需要发送\",\"除上述情况，延迟发送\"]},\"840\":{\"h\":\"解决方案\"},\"841\":{\"h\":\"短连接\",\"t\":[\"发一个包建立一次连接，从连接的建立到断开就是消息的边界。\",\"缺点\",\"效率太低\",\"无法解决半包问题，因为接收方的缓冲区大小仍然是有大小限制的\"]},\"842\":{\"h\":\"定长消息\",\"t\":[\"每条消息采用固定长度。\",\"服务端\",\"// 注意先加 FrameDecoder, 再加 LoggingHandler // 固定消息长度, 例如 8 Bytes ch.pipeline().addLast(new FixedLengthFrameDecoder(8));\",\"客户端\",\"此时客户端可以在任何时候 flush\",\"byte[] bytes = fill10Bytes(c, r.nextInt(10) + 1); buf.writeBytes(bytes); public static byte[] fill10Bytes(char c, int len) { byte[] bytes = new byte[10]; Arrays.fill(bytes, (byte) '_'); for (int i = 0; i < len; i++) { bytes[i] = (byte) c; } return bytes; }\",\"缺点\",\"数据包的大小不太好确定，如果太大，浪费资源，如果太小，不能满足某些大数据包的需求\"]},\"843\":{\"h\":\"指定分隔符\",\"t\":[\"每条消息采用固定的分隔符，默认是 \\\\n 或 \\\\r\\\\n，如果超出指定长度仍未出现分隔符，则抛出异常。\",\"服务端\",\"ch.pipeline().addLast(new LineBasedFrameDecoder(1024));\",\"客户端\",\"StringBuilder sb = makeString(c, r.nextInt(16) + 1); buf.writeBytes(sb.toString().getBytes()); public static StringBuilder makeString(char c, int len) { StringBuilder sb = new StringBuilder(len + 2); for (int i = 0; i < len; i++) { sb.append(c); } // 写入分隔符 sb.append(\\\"\\\\n\\\"); return sb; }\",\"缺点\",\"适合处理字符数据，但如果内容本身包含了分隔符（字节数据常见情况），那么就会解析错误。\"]},\"844\":{\"h\":\"声明长度\",\"t\":[\"每条消息分为 head 和 body，定长的 head 中声明变长 body 的长度。有一定的开销，但综合性能和灵活性最好。\",\"public static void main(String[] args) { EmbeddedChannel channel = new EmbeddedChannel( // 参数1：最大长度 // 参数2：长度域的偏移 // 参数3：长度域占用字节 // 参数4：长度域和数据域间隔 // 参数5: 结果域的偏移 new LengthFieldBasedFrameDecoder(1024, 1, 4, 1,6), new LoggingHandler(LogLevel.DEBUG) ); // 4 个字节的内容长度， 实际内容 ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(); send(buffer, \\\"Hello, world\\\"); send(buffer, \\\"Hi!\\\"); channel.writeInbound(buffer); } private static void send(ByteBuf buffer, String content) { byte[] bytes = content.getBytes(); int length = bytes.length; buffer.writeByte(1); buffer.writeInt(length); buffer.writeByte(1); buffer.writeBytes(bytes); }\",\"LengthFieldBasedFrameDecoder\"]},\"845\":{\"h\":\"协议设计\",\"t\":[\"TCP/IP 中消息传输基于流的方式，没有边界。而协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则。一种直接的方法是给数据流加上标点符号，即分隔符，但分隔符本身如果用于传输，那么必须转义增加了复杂性。因此更为常用的是消息头+消息体的格式传输数据。\"]},\"846\":{\"h\":\"协议举例\",\"t\":[\"Redis 协议\",\"单行字符串 Simple Strings： 响应的首字节是 +\",\"错误 Errors： 响应的首字节是 -\",\"整型 Integers： 响应的首字节是 :\",\"多行字符串 Bulk Strings： 响应的首字节是 \\\\$\",\"数组 Arrays： 响应的首字节是 *\",\"参考：https://redis.com.cn/topics/protocol.html\",\"/** * 以 set name zhangsan 命令为例 * *3 * $3 * set * $4 * name * $8 * zhangsan */ ByteBuf buf = ctx.alloc().buffer(); buf.writeBytes(\\\"*3\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"$3\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"set\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"$4\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"name\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"$8\\\".getBytes()); buf.writeBytes(LINE); buf.writeBytes(\\\"zhangsan\\\".getBytes()); buf.writeBytes(LINE); ctx.writeAndFlush(buf);\",\"HTTP 协议\",\"HTTP 协议就更加复杂了，好在 Netty 内置了 HTTP 的编解码器。\",\"// 自动将一个 HTTP 请求解析成 HttpRequest 和 HttpContent 两个消息 ch.pipeline().addLast(new HttpServerCodec()); // 下面这个简单处理器仅处理 HttpRequest 并做出响应 ch.pipeline().addLast(new SimpleChannelInboundHandler<HttpRequest>() { @Override protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception { log.debug(msg.uri()); DefaultFullHttpResponse response = new DefaultFullHttpResponse(msg.protocolVersion(), HttpResponseStatus.OK); byte[] bytes = \\\"<h1>Hello, world!</h1>\\\".getBytes(); // 在响应头指定长度，否则浏览器会持续读取 response.headers().setInt(HttpHeaderNames.CONTENT_LENGTH, bytes.length); response.content().writeBytes(bytes); ctx.writeAndFlush(response); } });\"]},\"847\":{\"h\":\"自定义协议\"},\"848\":{\"h\":\"协议格式\",\"t\":[\"魔数：用来在第一时间判定是否是无效数据包\",\"版本号：可以支持协议的升级\",\"序列化算法：消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk\",\"指令类型：是登录、注册、单聊、群聊... 跟业务相关\",\"请求序号：为了双工通信，提供异步能力\",\"正文长度\",\"消息正文\",\"Protocol Format: -------------------------------------------------------------- | Magic | Ver | Ser | Msg | Seq | Padding | Length | | 4 | 1 | 1 | 1 | 4 | 0xFF | 4 | -------------------------------------------------------------- | Message Body | --------------------------------------------------------------\"]},\"849\":{\"h\":\"编解码器\",\"t\":[\"针对上述协议格式的编解码器：\",\"@Slf4j public class MessageCodec extends ByteToMessageCodec<Message> { @Override public void encode(ChannelHandlerContext ctx, Message msg, ByteBuf out) throws Exception { // 4Byte 魔数 out.writeBytes(new byte[]{1, 2, 3, 4}); // 1Byte 版本 out.writeByte(1); // 1Byte 序列化方式 (0:JDK 1:Json) out.writeByte(0); // 1Byte 消息类型 (最大支持255种) out.writeByte(msg.getMessageType()); // 4Byte 序列号 out.writeInt(msg.getSequenceId()); // Padding out.writeByte(0xff); ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(msg); byte[] bytes = bos.toByteArray(); // 4Byte 长度（最长2^32） out.writeInt(bytes.length); // 实际消息内容 out.writeBytes(bytes); } @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception { int magicNum = in.readInt(); byte version = in.readByte(); byte serializerType = in.readByte(); byte messageType = in.readByte(); int sequenceId = in.readInt(); in.readByte(); int length = in.readInt(); byte[] bytes = new byte[length]; in.readBytes(bytes, 0, length); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes)); Message message = (Message) ois.readObject(); log.debug(\\\"{}, {}, {}, {}, {}, {}\\\", magicNum, version, serializerType, messageType, sequenceId, length); log.debug(\\\"{}\\\", message); out.add(message); } }\"]},\"850\":{\"h\":\"测试\",\"t\":[\"EmbeddedChannel channel = new EmbeddedChannel( new LoggingHandler(LogLevel.DEBUG), // 经过该处理器时，如果没有收到完整的一帧将等待 new LengthFieldBasedFrameDecoder(1024, 12, 4, 0, 0), new MessageCodec() ); LoginRequestMessage message = new LoginRequestMessage(\\\"zhangsan\\\", \\\"123\\\"); // encode test channel.writeOutbound(message); // decode test ByteBuf buf = ByteBufAllocator.DEFAULT.buffer(); new MessageCodec().encode(null, message, buf); channel.writeInbound(buf); // 半包问题测试 ByteBuf s1 = buf.slice(0, 100); ByteBuf s2 = buf.slice(100, buf.readableBytes() - 100); s1.retain(); // refcnt + 1，防止 write 完 s1 后 s2 被销毁 channel.writeInbound(s1); // refcnt - 1 Thread.sleep(2000); channel.writeInbound(s2);\",\"在半包问题的测试代码中，通过打印的日志可以发现，如果一个帧的数据包没到齐，LengthFieldBasedFrameDecoder会等完整的帧到达后再发送给后续的 MessageCodec。\",\"Message格式\"]},\"851\":{\"h\":\"@Sharable\",\"t\":[\"在Netty中，@Sharable 注解用于标记一个 ChannelHandler 是否是可共享的。当一个 ChannelHandler 被标记为 @Sharable，意味着它是线程安全的，可以被多个 Channel 共享，而无需为每个 Channel 实例化一个新的 ChannelHandler，避免频繁创建的开销。\",\"但应确保被标记为 @Sharable 的 ChannelHandler 是无状态的，或者是线程安全的，以避免并发访问导致的问题。\",\"// 日志处理器是无状态的，因此可以共享 @Sharable public class LoggingHandler extends ChannelDuplexHandler { ... } // Netty 限制了 ByteToMessageCodec 的子类不能共享 public class MessageCodec extends ByteToMessageCodec<Message> { ... } // 如果能确保编解码器不会保存状态，可以继承 MessageToMessageCodec 父类 @Sharable public class MessageCodecSharable extends MessageToMessageCodec<ByteBuf, Message> { ... }\",\"注意\",\"如果一个未被标记 @Sharable 的 handler 已经用于处理某个 channel 了，那么后续依赖该 handler 的其它 channel 将无法建立连接。\"]},\"852\":{\"h\":\"实战 -- 聊天室 & RPC\",\"t\":[\"https://github.com/xchanper/Chatting\",\"重点关注 Handler 的交互处理、事件的处理、RPC 请求和结果处理。\"]},\"853\":{\"h\":\"参数调优\"},\"854\":{\"h\":\"参数配置\",\"t\":[\"// 服务端使用 option 给 ServerSocketChannel 配置参数 // 服务端使用 childOption 给 SocketChannel 配置参数 new ServerBootstrap() .option(ChannelOption.SO_TIMEOUT, 10) .childOption(ChannelOption.SO_KEEPALIVE, true); // 客户端使用 option 给 SocketChannel 配置参数 new Bootstrap().option(ChannelOption.SO_TIMEOUT, 10)\"]},\"855\":{\"h\":\"CONNECT_TIMEOUT_MILLIS\",\"t\":[\"属于 SocketChannal 参数，用在客户端建立连接时，如果在指定毫秒内无法连接，会抛出 timeout 异常\",\"bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 300)\",\"区别于 SO_TIMEOUT 用于阻塞 IO。阻塞 IO 中 accept，read 等都是无限等待的，如果不希望永远阻塞，使用它调整超时时间\"]},\"856\":{\"h\":\"SO_BACKLOG\",\"t\":[\"属于 ServerSocketChannal 参数，指定了服务器端监听队列（通常就是半连接队列）的最大长度，溢出队列的请求将被拒绝，实际中应根据服务器的负载和性能进行调优。\",\"serverBootstrap.option(ChannelOption.SO_BACKLOG, 128)\",\"回顾一下 OS 进行 TCP 连接握手的过程：\",\"第一次握手，client 发送 SYN 到 server，状态修改为 SYN_SEND，server 收到，状态改变为 SYN_REVD，并将该请求放入 sync queue 队列\",\"第二次握手，server 回复 SYN + ACK 给 client，client 收到，状态改变为 ESTABLISHED，并发送 ACK 给 server\",\"第三次握手，server 收到 ACK，状态改变为 ESTABLISHED，将该请求从 sync queue 放入 accept queue\",\"其中：\",\"sync queue 也称半连接队列，在这个队列中的 TCP 连接仅建立了一部分 \",\"netstat -an命令结果中展示为 SYN_RECV 状态\",\"大小由 /proc/sys/net/ipv4/tcp_max_syn_backlog指定\",\"accept queue 也称全连接队列，保存了所有完全建立好的 TCP 连接 \",\"netstat -an命令结果中展示为 ESTABLISHED 状态\",\"大小由 /proc/sys/net/core/somaxconn指定\",\"如果 accpet queue 队列满了，server 将返回一个拒绝连接的错误信息给 client\"]},\"857\":{\"h\":\"ulimit -n\",\"t\":[\"属于 OS 的参数，用于设置或显示当前用户打开的文件描述符限制，包括打开的文件、网络连接等，默认 1024。\",\"ulimit -n <限制数>\"]},\"858\":{\"h\":\"TCP_NODELAY\",\"t\":[\"属于 SocketChannal 参数，是 TCP 协议的一个选项，用于是否禁用 Nagle 算法。\",\"bootstrap.option(ChannelOption.TCP_NODELAY, false)\",\"开启 Nagle 能够减少网络中小分组的数量，提高网络的效率，但实时性较差。关闭 Nagle 可以尽快发出数据包，降低延迟，适合实时游戏、视频通话等需要即时响应的场景。\"]},\"859\":{\"h\":\"SO_SNDBUF & SO_RCVBUF\",\"t\":[\"SO_SNDBUF 属于 SocketChannel 参数，用于设置套接字发送缓冲区（存储待发送数据）的大小\",\"SO_RCVBUF 既可用于 SocketChannel，也可用于 ServerSocketChannel，用于设置套接字接收缓冲区（存储已接受尚未处理的数据）的大小\",\"实际中，需要根据具体的网络环境和应用需求来进行调优，避免因为缓冲区溢出或者缓冲区太小导致的性能问题。\"]},\"860\":{\"h\":\"ALLOCATOR\",\"t\":[\"属于 SocketChannel 参数，决定分配内存的方式是PooledByteBufAllocator还是UnpooledByteBufAllocator。如果没有通过-Dio.netty.allocator.type=pooled|unpooled指定，则安卓平台默认非池化，其它平台默认池化分配器。\",\"实际中，根据需求选择使用 PooledByteBufAllocator 或 UnpooledByteBufAllocator。如果需要处理大量的长期连接，而且内存使用频繁，那么使用 PooledByteBufAllocator 可能更加高效。但如果连接都是短暂的，内存需求不是很大，那么使用 UnpooledByteBufAllocator 可能更合适。\"]},\"861\":{\"h\":\"RCVBUF_ALLOCATOR\",\"t\":[\"属于 SocketChannel 参数，用于配置接收缓冲区的大小，常用的有:\",\"AdaptiveRecvByteBufAllocator: 默认值，能够根据网络连接的特性和当前的网络条件动态调整接收缓冲区的大小，以优化性能\",\"FixedRecvByteBufAllocator: 可以指定大小，分配固定大小的接收缓冲区\",\"大多数情况下推荐使用AdaptiveRecvByteBufAllocator，自适应调节策略可以在不同网络环境下都能保持较好的性能。\"]},\"862\":{\"h\":\"源码分析\"},\"863\":{\"h\":\"启动流程\",\"t\":[\"Netty 说白了是对原始 Java-NIO 的二次开发和优化，因此底层还是 NIO 的开发范式。先回顾一下开发一个 NIO 服务器的基本步骤：\",\"// 1. 创建 Selector Selector selector = Selector.open(); // 2. 创建 ssc，并配置非阻塞 ServerSocketChannel ssc = ServerSocketChannel.open(); ssc.configureBlocking(false); // 3. 关联 selector、ssc，并注册感兴趣事件 SelectionKey sscKey = ssc.register(selector, 0, null); // 4. 绑定端口 ssc.bind(new InetSocketAddress(8080)); // 5. 注册感兴趣事件 sscKey.interestOps(SelectionKey.OP_ACCEPT);\",\"然后跟踪源码，看看 Netty 是如何完成这几个步骤的。NioEventLoop 里面包含了 Selector 的开启，即 Java—NIO 的第1步，这个放到 NioEventLoop 中详细分析。下面的 group(), channel(), childHandler() 等方法都是配置 ServerBootstrap 的方法，关键逻辑在 bind() 方法里面。\",\"new ServerBootstrap() .group(new NioEventLoopGroup(1), new NioEventLoopGroup(2)) .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<>() { ... }) .bind(8080);\",\"启动流程主要涉及两个线程: Main 主线程、NioEventLoop 线程。ServerBootstrap 执行 bind，进入 initAndRegister()后，里面分为 init() 和 register() 两个步骤。\",\"Netty启动流程\"]},\"864\":{\"h\":\"Init\",\"t\":[\"init 之前会创建 ServerSocketChannel，即 Java-NIO 的第2步。然后 init() 负责初始化通道的参数配置，并为 ServerSocketChannel 添加 ChannelInitializer 准备执行（添加 ServerBootstrapAcceptor 处理子Channel）\",\"// io.netty.bootstrap.AbstractBootstrap#initAndRegister channel = channelFactory.newChannel(); init(channel); // io.netty.channel.socket.nio.NioServerSocketChannel#newSocket private static ServerSocketChannel newSocket(SelectorProvider provider) { try { return provider.openServerSocketChannel(); } catch (IOException e) { throw new ChannelException(\\\"Failed to open a server socket.\\\", e); } }\"]},\"865\":{\"h\":\"Register\",\"t\":[\"register() 会启动 NIO-boss 线程去关联 ssc 和 selector，并初始化 Pipeline、Handler，即执行上面的 ChannelInitializer。(此时 pipeline 为 head -> ServerBootstrapAcceptor -> tail)\",\"// io.netty.channel.AbstractChannel.AbstractUnsafe#register eventLoop.execute(new Runnable() { @Override public void run() { register0(promise); } });\",\"注意：register 方法的第三个参数是 attachment 附件，在 Netty 的实现里就是 NioServerSocketChannel\",\"// io.netty.channel.nio.AbstractNioChannel#doRegister @Override protected void doRegister() throws Exception { boolean selected = false; for (;;) { try { // 即 Java-NIO 的第3步：关联 selector、ssc，并注册感兴趣事件 selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this); return; } catch (CancelledKeyException e) { if (!selected) { eventLoop().selectNow(); selected = true; } else { throw e; } } } }\"]},\"866\":{\"h\":\"Bind\",\"t\":[\"register 方法执行完成后开始真正的 bind，层层调用最后到达 NioServerSocketChannel#doBind\",\"// io.netty.channel.socket.nio.NioServerSocketChannel#doBind @Override protected void doBind(SocketAddress localAddress) throws Exception { if (PlatformDependent.javaVersion() >= 7) { // 即 Java-NIO 的第4步：关联 selector、ssc javaChannel().bind(localAddress, config.getBacklog()); } else { javaChannel().socket().bind(localAddress, config.getBacklog()); } }\"]},\"867\":{\"h\":\"InterestOps\",\"t\":[\"doBind 绑定完成后，会触发所有 handler 的 channelActive 方法，在 HeadContext 的 channelActive() 方法里会执行 Java-NIO 的第5步注册感兴趣事件，默认是关注OP_ACCEPT：\",\"// io.netty.channel.nio.AbstractNioChannel#doBeginRead @Override protected void doBeginRead() throws Exception { final SelectionKey selectionKey = this.selectionKey; if (!selectionKey.isValid()) { return; } readPending = true; final int interestOps = selectionKey.interestOps(); // readInterestOp = 16，即 SelectionKey.OP_ACCEPT if ((interestOps & readInterestOp) == 0) { selectionKey.interestOps(interestOps | readInterestOp); } }\",\"至此完成了 Java-NIO 的5个关键步骤，也完成了 Netty 服务端的启动流程。\"]},\"868\":{\"h\":\"NioEventLoop\",\"t\":[\"NioEventLoop 是 Netty 的一个核心类，包括很多重要的逻辑操作。\"]},\"869\":{\"h\":\"成员对象\",\"t\":[\"两个 Selector 对象\",\"selector：基于数组存储 SelectionKey 实现的 Selector\",\"unwrappedSelector: 基于 HashSet 存储 SelectionKey 实现的 Selector，也即原始的 java.nio.channels.Selector\",\"继承自 SingleThreadEventExecutor 的线程对象 thread 和所属的单线程 Executor\",\"暂存任务的任务队列，NioEventLoop 不仅可以处理 IO 事件，也可以处理普通任务和定时任务\",\"Queue<Runnable>普通任务队列\",\"PriorityQueue<ScheduledFutureTask<?>>定时任务\"]},\"870\":{\"h\":\"构造方法\",\"t\":[\"NioEventLoop 内部使用 unwrappedSelector 进行底层的选择操作，而对外提供的接口是通过 selector 进行的，额外添加了处理空轮询问题、资源释放等功能，使得 Netty 能够提供更好的性能和稳定性。\",\"// io.netty.channel.nio.NioEventLoop#NioEventLoop NioEventLoop(NioEventLoopGroup parent, Executor executor, SelectorProvider selectorProvider, SelectStrategy strategy, RejectedExecutionHandler rejectedExecutionHandler, EventLoopTaskQueueFactory queueFactory) { super(parent, executor, false, newTaskQueue(queueFactory), newTaskQueue(queueFactory), rejectedExecutionHandler); ... provider = selectorProvider; final SelectorTuple selectorTuple = openSelector(); selector = selectorTuple.selector; unwrappedSelector = selectorTuple.unwrappedSelector; selectStrategy = strategy; } // io.netty.channel.nio.NioEventLoop#openSelector private SelectorTuple openSelector() { try { // 此处即执行了 Java-NIO 的第1步，开启 Selector unwrappedSelector = provider.openSelector(); } catch (IOException e) { throw new ChannelException(\\\"failed to open a new selector\\\", e); } ... }\"]},\"871\":{\"h\":\"启动线程\",\"t\":[\"NioEventLoop 首次调用 execute() 时（事件触发）将启动 NIO 线程，并且通过状态变量保证只启动一次。\",\"// io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread private void doStartThread() { assert thread == null; executor.execute(new Runnable() { @Override public void run() { // thread 对象即 executor 线程池里的那个唯一线程 thread = Thread.currentThread(); ... try { // 进入死循环，监测普通任务、定时任务、IO事件 SingleThreadEventExecutor.this.run(); } catch (Throwable t) { ... } } }); }\"]},\"872\":{\"h\":\"监听事件\",\"t\":[\"// io.netty.channel.nio.NioEventLoop#run @Override protected void run() { for (;;) { // 选择策略： // 队列里没有任务时，走 SELECT 分支阻塞； // 队列里有任务时，则执行 selector.selectNow() 以非阻塞方式拿到所有 IO 事件 switch (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) { case SelectStrategy.CONTINUE: continue; case SelectStrategy.BUSY_WAIT: case SelectStrategy.SELECT: select(wakenUp.getAndSet(false)); if (wakenUp.get()) { selector.wakeup(); } default: } // 控制处理 IO 事件所占用的时间比例，默认50% final int ioRatio = this.ioRatio; // 处理 IO 事件 processSelectedKeys(); // 处理普通任务 runAllTasks(ioTime * (100 - ioRatio) / ioRatio); } }\"]},\"873\":{\"h\":\"处理事件\",\"t\":[\"// io.netty.channel.nio.NioEventLoop#processSelectedKey(java.nio.channels.SelectionKey, io.netty.channel.nio.AbstractNioChannel) private void processSelectedKey(SelectionKey k, AbstractNioChannel ch) { final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe(); ... // 处理不同的 IO 事件 int readyOps = k.readyOps(); if ((readyOps & SelectionKey.OP_CONNECT) != 0) { int ops = k.interestOps(); ops &= ~SelectionKey.OP_CONNECT; k.interestOps(ops); unsafe.finishConnect(); } if ((readyOps & SelectionKey.OP_WRITE) != 0) { ch.unsafe().forceFlush(); } if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) { unsafe.read(); } }\",\"处理 OP_ACCEPT\",\"执行 unsafe.read() 后，接受连接，创建 SocketChannel 后执行 handler 链。\",\"// io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read public void read() { do { // 处理 accept，创建 NioSocketChannel int localRead = doReadMessages(readBuf); ... } while (allocHandle.continueReading()); int size = readBuf.size(); for (int i = 0; i < size; i ++) { readPending = false; // 开始调用 handler 链的 channelRead 方法 pipeline.fireChannelRead(readBuf.get(i)); } ... allocHandle.readComplete(); pipeline.fireChannelReadComplete(); } // io.netty.channel.socket.nio.NioServerSocketChannel#doReadMessages protected int doReadMessages(List<Object> buf) throws Exception { // 此处即执行 ssc.accept() SocketChannel ch = SocketUtils.accept(javaChannel()); if (ch != null) { buf.add(new NioSocketChannel(this, ch)); return 1; } ... return 0; }\",\"ServerSocketChannel 的调用链是 head -> ServerBootstrapAcceptor -> tail，由 acceptor 负责处理连接的 accpt 事件，执行和 ServerSocketChannel 类似的 register 流程（启动流程步骤-2）。只不过这次是 SocketChannel 的启动，也是要新建 NIO 线程，为 SocketChannel 执行用户自定义的 ChannelInitializer。\",\"// io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead public void channelRead(ChannelHandlerContext ctx, Object msg) { final Channel child = (Channel) msg; child.pipeline().addLast(childHandler); try { // 注册流程，和启动流程类似 childGroup.register(child).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (!future.isSuccess()) { forceClose(child, future.cause()); } } }); } catch (Throwable t) { forceClose(child, t); } }\",\"完成后触发pipeline.fireChannelActive()注册 read 事件（启动流程步骤-4），结束 Accpet 事件的处理。\",\"处理 OP_READ\",\"同样的，触发 read 事件后，读取数据最后交由 Pipeline 里面用户自定义的各个 Handler 依次加工数据，完成 Read 事件处理。\",\"// io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read public final void read() { ... ByteBuf byteBuf = null; do { byteBuf = allocHandle.allocate(allocator); // 基于底层 Java-NIO，将数据读入 byteBuf allocHandle.lastBytesRead(doReadBytes(byteBuf)); ... // 依次经过各个 Handler 加工 pipeline.fireChannelRead(byteBuf); byteBuf = null; } while (allocHandle.continueReading()); allocHandle.readComplete(); pipeline.fireChannelReadComplete(); }\"]},\"874\":{\"c\":[\"Java\"]},\"875\":{\"c\":[\"Netty\"]},\"876\":{\"h\":\"Redis 数据结构\"},\"877\":{\"h\":\"简单动态字符串\"},\"878\":{\"h\":\"定义\",\"t\":[\"Redis仅使用C字符串作为字面量，大多数情况下，使用SDS-Simple Dynamic String简单动态字符串作为字符串表示。\",\"SDS结构\",\"len：记录buf数组中已使用字节数，等于SDS保存字符串的长度\",\"free：记录buf数组中未使用字节数\",\"buf：字节数组用于保存字符串\"]},\"879\":{\"h\":\"与C字符串的区别\",\"t\":[\"SDS额外记录了字符串长度，因此获取字符串长度的复杂度由O(n)缩小为O(1)\",\"存储数据的buf数组实现了内存自动重分配，杜绝了缓冲区溢出 \",\"空间预分配：对SDS修改需要扩展空间时，Redis会为SDS分配额外空间 \",\"如果修改后len < 1MB，则额外分配len长度的free空间，即len=free\",\"如果修改后len > 1MB，则额外分配1MB的free空间\",\"惰性空间释放：SDS需要缩短字符串时，并不立即回收多余空间，而是先记录到free字段中，等有需要时再真正释放。减少了耗时的重分配操作\",\"二进制安全：Redis使用len标记字符串长度，而不是根据空字符，因此可以保存任意格式二进制数据。\",\"在存储上仍然在字符末尾加上\\\\0空字符，可以兼容部分C字符串函数\"]},\"880\":{\"h\":\"链表\",\"t\":[\"链表结构\",\"双端、无环、带表头表尾指针、带长度计数器\",\"支持多态，dup、free、match三个void*指针字段可以设置特殊类型函数，用于保存不同类型的值。\"]},\"881\":{\"h\":\"字典\"},\"882\":{\"h\":\"字典实现\",\"t\":[\"字典结构\",\"哈希表结点 - dictEntry \",\"key-value结构，其中value可以是指针、uint64_t、int64_t\",\"next：指向同索引的下一个结点（链地址法解决哈希冲突）\",\"哈希表- dictht \",\"table：数组，存储哈希表节点指针\",\"size：记录表的大小\",\"sizemask：用于和哈希值计算应该放置的索引\",\"used：已有的结点数量\",\"字典 - dict \",\"dictType：存储类型特定函数，用于实现多态\",\"privdata：保存类型特定函数所需参数\",\"ht：两个哈希表的数组，一般只使用ht[0]，ht[1]用于Rehash\",\"rehashidx：是否在Rehash，不是则置-1\"]},\"883\":{\"h\":\"哈希算法\",\"t\":[\"Redis使用MurmurHash2算法，具有很好的随机分布性和计算速度\",\"链地址法解决哈希冲突，且新节点总是添加到链表的表头以加快速度\",\"Rehash：哈希结点过多或过少时，需要调整哈希表的大小 \",\"调整条件： \",\"扩展：服务器目前没有在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于1。\",\"扩展：服务器目前正在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于5。\",\"收缩：服务器目前正在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于5。\",\"调整大小： \",\"如果是扩展，那么ht[1]的大小为第一个$>=ht[0].used*2 \\\\ \\\\text{的} \\\\ 2^n$\",\"如果是收缩，那么ht[1]的大小为第一个$>=ht[0].used \\\\ \\\\text{的} \\\\ 2^n$\",\"调整步骤： \",\"为ht[1]分配空间，大小计算如上\",\"将ht[0]中的所有键值对重新计算哈希值和索引值，放入ht[1]\",\"迁移完成后，释放ht[0]，将ht[1]设置为ht[0]，并为ht[1]创建新的空白哈希表，为下一次rehash做准备\",\"渐进式Rehash：为了避免一次性大量rehash对服务器性能造成影响，需要分多次、渐进rehash。 \",\"渐进方式： \",\"为ht[1]分配空间，让字典同时持有ht[0]和ht[1]两个哈希表。\",\"维护索引计数器变量rehashidx置0，表示rehash开始。\",\"rehash开始后，每次对字典执行添加、删除、查找或更新操作时，程序除了执行指定操作外，还会顺带将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，完成后将rehashidx属性的值增一。\",\"随着字典操作的不断执行，最终ht[0]的所有键值对都会被rehash至ht[1]，这时将rehashidx属性的值置-1，表示rehash操作完成。\",\"rehash期间的查找需要先后在ht[0]、ht[1]中查找\",\"rehash期间的添加一律保存至ht[1]，保证ht[0]键值对只减不增\",\"渐进式采取分而治之的方式，将rehash键值对所需的计算工作均摊到对字典的每个添加、删除、查找和更新操作上，从而避免了集中式rehash而带来的庞大计算量。\"]},\"884\":{\"h\":\"跳表\"},\"885\":{\"h\":\"概念\",\"t\":[\"跳表是一种有序数据结构，在每个节点中维持多个指向其它节点的指针，从而快速访问结点。\",\"跳表效率与平衡树相当，且实现简单。\",\"Redis中跳表的作用有两个，一是有序集合的底层实现之一，二是集群节点中用作内部数据结构。\",\"跳表概念\"]},\"886\":{\"h\":\"实现\",\"t\":[\"跳表实现\",\"zskiplistNode：跳表结点 \",\"层：level类型数组，其中每个元素指向其它结点以加快访问。创建新结点时，根据幂次定律随机生成介于1~32之间的值作为结点层数。level类型有两个字段： \",\"前进指针：指向下一个结点，可以一次跳过多个结点\",\"跨度：记录两个结点的距离 \",\"结点跨度越大，逻辑上相距越远\",\"指向NULL的前进指针跨度为0\",\"用于计算排位\",\"后退节点：指向前驱结点，每次只能后退一步\",\"分值：double型浮点数，跳表中的结点按分值从小到大排序\",\"成员：对象指针，指向一个SDS。成员在跳表中唯一，分值相同的结点按成员字典序排序 \",\"zskiplist：维护跳表相关信息，提高效率 \",\"header: 指向跳表表头结点\",\"tail：指向跳表表尾结点\",\"level：跳表结点的最大层数\",\"length：跳表长度，即结点数量\"]},\"887\":{\"h\":\"整数集合\",\"t\":[\"整数集合intset是集合键的底层实现之一，有序且不重复。\"]},\"888\":{\"h\":\"实现\",\"t\":[\"整数集合结构\",\"encoding: 编码方式，包括 uint16_t / uint32_t / uint64_t 三种\",\"length: 元素数量，即contents数组长度\",\"contents：保存元素的数组 \",\"虽然声明是uint8_t，实际类型取决于encoding\",\"所有元素类型保持一致\",\"元素从小到大，无重复排序\"]},\"889\":{\"h\":\"数组升级\",\"t\":[\"当添加一个新元素时，如果新元素类型比现有的所有元素类型都长，整数集合需要先升级。\",\"策略 - 复杂度O(n)： \",\"根据新元素类型，扩展整数集合底层数组的空间大小，并为新元素分配空间\",\"将现有的所有元素都转换成与新元素相同的类型，并将类型转换后的元素放置到正确的位上，保持有序\",\"将新元素添加到底层数组里面（新元素要么最大置数组头，要么最小置数组尾）\",\"优点：提升了整数集合的灵活性，也节约了内存\",\"整数集合不支持降级\"]},\"890\":{\"h\":\"压缩列表\",\"t\":[\"列表键和哈希键的底层实现之一，为节约内存而开发的由一系列特殊编码的连续内存块组成的顺序型数据结构。\"]},\"891\":{\"h\":\"实现\",\"t\":[\"压缩列表实例\",\"压缩列表属性\"]},\"892\":{\"h\":\"列表节点\",\"t\":[\"压缩列表结点\",\"每个Entry保存一个字节数组或一个整数值，由previous_entry_length, encoding, content三部分组成 \",\"如果是字节数组，分三种： \",\"长度$<=(2^6-1)$的字节数组\",\"长度$<=(2^{14}-1)$的字节数组\",\"长度$<=(2^{32}-1)$的字节数组\",\"如果是整数值，分6种： \",\"4位长，介于0~12的无符号整数\",\"1字节长有符号整数\",\"3字节长有符号整数\",\"int16_t类型整数\",\"int32_t类型整数\",\"int64_t类型整数\",\"previous_entry_length: 前一个结点的长度，占1字节/5字节。可以结合当前结点地址计算出前一节点的起始地址 \",\"如果前一节点长度小于254，则占1字节\",\"如果前一节点长度大于等于254，则占5字节，其中第一个字节置为0xFE作为标记\",\"encoding：记录content属性的类型及长度 \",\"如果最高位为00/01/10，则占1/2/5字节，表示content存储字节数组，数组的长度由其余位记录\",\"如果最高位为11，则占1字节，表示content存储整数值，类型和长度由其余位记录（值甚至可能直接保存在encoding中）\",\"content：保存节点值，可能是字节数组/整数值\"]},\"893\":{\"h\":\"连锁更新\",\"t\":[\"如果压缩列表里恰好有多个连续的，长度介于250-253字节的数组，在增删改时可能引发连锁更新，导致连续的空间重分配，最坏复杂度$O(N^2)$。但实际情况下很少发生。\"]},\"894\":{\"h\":\"对象\"},\"895\":{\"h\":\"对象类型和编码\",\"t\":[\"Redis使用对象来表示数据库中的键和值，包含字符串对象、列表对象、哈希对象、集合对象、有序集合对象五种类型\",\"每种对象都使用了前述的至少一种数据结构（SDS，链表，字典，跳表，整数集合，压缩列表）\",\"每个对象都由一个redisObject结构表示 \",\"type：对象类型\",\"Redis中键总是一个字符串对象，而值可以是五种对象中任意一种\",\"使用type key命令输出对象类型 \",\"encoding：记录对象所使用的数据结构\",\"每种对象都至少使用了两种不同实现结构\",\"Redis可以根据不同使用场景切换使用不同实现方式，提升了灵活性和效率\",\"使用object encoding key命令输出对象编码 \",\"ptr：指向对象的底层实现数据结构\"]},\"896\":{\"h\":\"字符串对象\",\"t\":[\"字符串对象是唯一一种会被其它四种类型嵌套的对象\",\"字符串对象的编码有三种： \",\"int：可以用long类型保存的整数\",\"embstr：长度 $<=32Bytes$ 的短字符串\",\"raw：长度 $>32Bytes$ 的长字符串，或无法用long保存的整数，或无法用long double保存的浮点数\",\"字符串对象\",\"embstr与raw编码联系： \",\"两者都使用redisObject和sdshdr结构表示字符串编码\",\"raw分两次内存分配给两个结构，而embstr一次性分配连续的内存空间给两个结构。相应的释放内存次数也不同\",\"embstr连续存储能够更好的利用缓存带来的优势\",\"编码转换：int/embstr在某些条件下会自动转换为raw编码的字符串对象 \",\"对于int，如果执行了一些操作，不再是整数或超出long范围，则会转换为raw\",\"对于embstr，本身是只读对象，没有相应的操作。因此任何对embstr的修改操作，都会使其转换为raw\"]},\"897\":{\"h\":\"列表对象\",\"t\":[\"列表对象的编码有两种： \",\"ziplist：使用压缩列表实现，每个压缩列表结点保存一个列表元素 \",\"linkedlist：使用双端链表实现，每个链表节点保存一个字符串对象，每个字符串对象保存一个列表元素 \",\"编码转换：当列表对象同时满足以下两个条件时，使用 ziplist，否则 linkedlist（参数可调） \",\"列表对象保存的所有字符串元素的长度都小于64Byte\",\"列表对象保存的元素数量小于512\"]},\"898\":{\"h\":\"哈希对象\",\"t\":[\"哈希对象的编码有两种： \",\"ziplist：使用压缩列表实现\",\"新加入的键和值分别保存在一个压缩列表结点中，推入列表表尾 \",\"hashtable：使用字典实现\",\"字典的每个键都是一个字符串对象，保存键\",\"字典的每个值都是一个字符串对象，保存值 \",\"编码转换：当哈希对象同时满足以下两个条件时，使用 ziplist，否则 hashtable（参数可调） \",\"哈希对象保存的所有键、值的字符串长度都小于64Byte\",\"哈希对象保存的键值对数量小于512\"]},\"899\":{\"h\":\"集合对象\",\"t\":[\"集合对象的编码有两种： \",\"intset：使用整数集合实现\",\"所有元素保存在整数集合中 \",\"hashtable：使用字典实现\",\"字典的每个键都是一个字符串对象，保存一个集合元素\",\"字典的每个值都是NULL \",\"编码转换：当集合对象同时满足以下两个条件时，使用 intset，否则 hashtable（参数可调） \",\"集合对象保存的所有元素都是整数值\",\"集合对象保存的元素数量不超过512个\"]},\"900\":{\"h\":\"有序集合对象\",\"t\":[\"有序集合每个元素的成员都是一个字符串对象，而每个元素的分值都是一个double\",\"有序集合对象的编码有两种： \",\"ziplist：使用压缩列表实现\",\"每个元素使用两个紧挨在一起的压缩列表节点保存，第一个是元素成员，第二个是元素分值\",\"压缩列表内的集合元素按分值从小到大排序 \",\"skiplist：使用zset-跳表+字典实现\",\"跳表按分值从小到大保存所有集合元素\",\"跳表的每个结点保存一个集合元素，object存储成员，score存储分值\",\"跳表可以实现有序集合的范围型操作\",\"字典创建了从成员到分值的映射\",\"字典的每个键值对保存一个集合元素，键是成员，值是分值\",\"字典可以实现$O(1)$查找指定元素分值\",\"尽管可以单独用跳表或字典实现有序集合，但不能同时满足范围型操作和查找操作的效率\",\"跳表和字典通过指针共享相同的元素，不额外浪费内存 \",\"编码转换：当有序集合对象同时满足以下两个条件时，使用 ziplist，否则 skiplist（参数可调） \",\"有序集合保存的元素数量小于128个\",\"有序集合保存的所有元素成员的长度都小于64字节\"]},\"901\":{\"h\":\"对象其它属性\",\"t\":[\"类型检查： \",\"Redis部分命令适用于任何类型键，如DEL, EXPIRE...；称基于类型的多态命令\",\"另一部分只能用于特定类型，如HSET, SADD...；称基于编码的多态命令\",\"服务器根据redisObject中的type属性检查操作是否适用\",\"服务器根据redisObject中的encoding属性检查操作的具体实现\",\"RefCount： \",\"对象周期分创建、操作、释放三个\",\"Redis使用引用计数机制实现内存自动回收，由redisObject中的refCount记录引用数\",\"基于refCount，相同整数值的字符串对象可以进行共享，节约内存\",\"Redis自动对0-9999的整数值进行共享\",\"考虑到值判等的开销，仅对包含整数值的字符串对象进行共享\",\"LRU： \",\"redisObject中的lru属性记录对象最后一次被访问的时间，用于LRU内存回收策略\",\"也用于idletime计算空转时间\"]},\"902\":{\"c\":[\"缓存\"]},\"903\":{\"c\":[\"Redis\"]},\"904\":{\"h\":\"Redis 单机\"},\"905\":{\"h\":\"数据库\"},\"906\":{\"h\":\"实现\",\"t\":[\"Redis服务器将所有数据库都保存在服务器状态redis.h/redisServer结构的db数组中，db数组的每个项都是一个redis.h/redisDb结构，每个redisDb结构代表一个数据库。数组长度（数据库数量）由dbnum控制，默认有16个，通过SELECT命令切换数据库。\",\"RedisClient结构中的db属性指向当前所使用的数据库，SELECT命令原理即修改该指针。\",\"数据库实现\"]},\"907\":{\"h\":\"键空间\",\"t\":[\"Redis是一个键值对K-V数据库服务器，服务器中的每个数据库都由一个redis.h/redisDb结构表示，其中，redisDb结构的dict字典保存了数据库中的所有键值对，这个字典称为键空间（key space）。所有针对数据库中数据的操作本质上都是对键空间字典的操作，同时也会进行一些维护：\",\"读写键时，会记录键空间命中/不命中次数\",\"更新键的LRU时间\",\"删除读取到的过期键\",\"watch命令监视某个键时，修改后标记dirty，告知事务程序\",\"根据配置发送相应的通知\"]},\"908\":{\"h\":\"过期回收\",\"t\":[\"Expire | pExpire | ExpireAt | pExpireAt <key> <time>指定键的过期时间，单位s，p开头的命令单位ms\",\"实现上前三个最终都调用pExpireAt实现\",\"底层在redisDb结构的expires字典保存所有键的过期时间，称过期字典。其键指向某个键的对象，其值是long long类型整数，表示ms精度的Unix时间戳\",\"TTL | pTTL <key>返回剩余生存时间，即查询键的过期时间和当前时间之差\",\"Persist <key>移除某个键的过期时间，即删除过期字典的某个键值对\",\"过期字典\",\"不同的回收策略： \",\"定时删除：创建定时器自动删除。内存友好，但消耗CPU时间\",\"惰性删除：访问键时才执行判断删除。CPU友好，但容易造成部分键长时间无法删除\",\"定期删除：每隔一段时间执行一次过期删除。上面两种方法的综合，但难以确定执行的频率和时长\",\"Redis的回收策略：惰性删除 + 定期删除 \",\"惰性删除由db.c/expireIfNeeded函数实现。算法同上\",\"定期删除由redis.c/activeExpireCycle函数实现。在规定时间内，分多次遍历服务器中的各个数据库，从expires字典中随机检查一部分键的过期时间，并删除过期键。\",\"RDB持久化： \",\"保存时，过期键不会写入新创建的RDB文件；\",\"载入时，如果是主服务器模式，过期键不会加载\",\"载入时，如果是从服务器模式，过期键依然会加载，由主从同步保证数据一致性\",\"AOF持久化: \",\"保存时没有任何影响。但过期删除后，会向AOF文件追加DEL命令，显式记录该键已删除\",\"重写时过期键不会写入\",\"复制功能：由主服务器控制从服务器同意删除过期键，保证主从服务器的数据一致性 \",\"主服务器在删除一个过期键之后，会显式地向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键\",\"从服务器执行读命令时，即使碰到过期键也不会删除，继续像处理未过期键一样来处理\",\"从服务器只有在接到主服务器发来的DEL命令之后，才会删除过期键\"]},\"909\":{\"h\":\"数据库通知\",\"t\":[\"键空间通知：关于\\\"某个键执行了什么命令\\\"的通知 SUBSCRIBE __keyspace@0__:<key>\",\"键事件通知：关于\\\"某个命令被什么键执行\\\"的通知 SUBSCRIBE __keyevent@0__:<opt>\",\"服务器配置的notify-keyspace-events选项决定了服务器所发送通知的类型\",\"底层由notify.c/notifyKeyspaceEvent(type, event, key, bdid)函数实现\"]},\"910\":{\"h\":\"RDB 持久化\",\"t\":[\"Redis提供RDB持久化功能，将内存数据保存到磁盘，生成经过压缩的二进制文件，避免数据丢失。\"]},\"911\":{\"h\":\"创建与载入\",\"t\":[\"创建： \",\"SAVE：阻塞服务器进程，由主线程执行保存。 \",\"执行期间，所有客户端命令都会被拒绝\",\"BGSAVE：创建子进程执行保存 \",\"执行期间，新的SAVE、BGSAVE命令会被拒绝，防止竞争\",\"执行期间，新的BGREWRITEAOF命令延迟到保存任务结束执行\",\"出于性能考虑，BGREWRITEAOF命令执行期间，新的BGSAVE命令会被拒绝\",\"载入： \",\"服务器启动时自动载入，但优先级低于AOF文件\",\"载入期间，服务器一直处于阻塞状态\"]},\"912\":{\"h\":\"自动保存\",\"t\":[\"serverCron服务器周期性函数每隔100ms执行一次维护，其中包括RDB保存。触发的条件由配置中的save选项定义，满足选项中任意条件，将自动执行BGSAVE命令。\",\"# save <time> <changes> # 服务器在900秒之内，对数据库进行了至少1次修改。 save 900 1 # 服务器在300秒之内，对数据库进行了至少10次修改。 save 300 10 #服务器在60秒之内，对数据库进行了至少10000次修改。 save 60 10000\",\"在实现上：redisServer结构的\",\"saveparams数组保存触发条件\",\"dirty计数器记录上次成功执行SAVE/BGSAVE后，所有数据库修改的总次数（每个键算一次）\",\"lastsave属性记录上次成功执行SAVE/BGSAVE的时间\"]},\"913\":{\"h\":\"RDB文件结构\",\"t\":[\"整体结构：\",\"RDB文件结构_value\",\"REDIS：RDB文件常量标志，占5Byte\",\"db_version: RDB文件版本号，占4Byte\",\"databases: 包含所有数据库数据，长度由数据库数据决定\",\"EOF：末尾常量标记，占1ByteREDIS_ENCODING_\",\"check_sum: 前4个字段的校验和，占8byte长的无符号整数\",\"databases部分：\",\"RDB文件结构_databases\",\"SELECTDB: 标记下一个将读入数据库编号，占1Byte\",\"db_number: 数据库编号，占1/2/5Byte。读入后调用SELECT切换数据库\",\"key_value_pairs: 所有数据库的键值对数据，以及可选的过期时间\",\"key_value_pairs部分：\",\"RDB文件结构_keyvaluepairs\",\"EXPIRETIME_MS: 可选，标记下一个将读入以ms为单位的过期时间，占1Byte\",\"ms: 可选，UNIX时间戳，8Byte有符号整数\",\"TYPE: 值对象类型/底层编码\",\"key: 字符串对象表示的键\",\"value: 值对象\",\"value部分：\",\"RDB文件结构_value.png\",\"字符串对象： \",\"如果是REDIS_ENCODING_INT，则以 ENCODING+integer 的形式保存，ENCODING标记占8/16/32位长\",\"如果是REDIS_ENCODING_RAW，则保存的是字符串 \",\"对于长度$<=20Byte$的串，以 len+string 的形式保存\",\"对于长度$>20Byte$的串，以 REDIS_RDB_ENC_LZF+compressed_len+origin_len+compressed_string 的形式保存，其中REDIS_RDB_ENC_LZF是LZF压缩算法标记\",\"列表对象： \",\"TYPE为REDIS_RDB_TYPE_LIST，以 list_length+itemN+... 的形式保存\",\"每个item按字符串对象保存\",\"集合对象： \",\"TYPE为REDIS_RDB_TYPE_SET，以 set_size+elemN+... 的形式保存\",\"每个elem按字符串对象保存\",\"哈希表对象： \",\"TYPE为REDIS_RDB_TYPE_HASH，以 hash_size+keyN+valueN+... 的形式保存\",\"每个键、值按字符串对象相邻保存\",\"有序集合对象： \",\"TYPE为REDIS_RDB_TYPE_ZSET，以 sorted_set_size+memberN+scoreN+... 的形式保存\",\"每个成员、分值按字符串对象相邻保存\",\"分值由double转为字符串，载入时自动转换\",\"INTSET编码和集合： \",\"TYPE为REDIS_RDB_TYPE_SET_INTSET，将整数转为字符串，按字符串对象保存\",\"ZIPLIST编码的列表、哈希表、有序集合： \",\"TYPE为REDIS_RDB_TYPE_LIST|HASH|ZSET_ZIPLIST，将压缩列表类型的value转为字符串对象\"]},\"914\":{\"h\":\"分析RDB文件\",\"t\":[\"od -cx dump.rdb 以ASCII和16进制打开RDB文件 redis-check-dump 工具\"]},\"915\":{\"h\":\"AOF 持久化\",\"t\":[\"除了RDB持久化，Redis还提供AOF（Append Only File），通过保存所执行的写命令实现持久化。\"]},\"916\":{\"h\":\"实现\",\"t\":[\"命令追加：服务器每执行完一个写命令，以协议格式将被执行的命令追加到redisServer的aof_buf缓冲区\",\"写入与同步：\",\"Redis服务器进程本质上是一个事件循环，其中文件事件负责处理客户端请求，时间事件负责执行serverCron这样定时运行的函数\",\"每结束一个事件循环，会调用flushAppendOnlyFile函数，决定是否将aof_buf写入AOF文件中\",\"同步行为由appendfsync选项值决定： \",\"always：每次有数据修改发生时都会写入AOF文件。效率最慢，安全性最高\",\"everysec：默认，每秒钟同步一次，显式地将多个写命令同步到硬盘。效率适中\",\"no：由 OS 决定何时进行同步。效率最高安全性最差\",\"载入数据：创建不带网络连接的伪客户端（上下文），读取、分析并执行AOF文件中的每一条命令。\"]},\"917\":{\"h\":\"AOF 重写\",\"t\":[\"为了避免大量写命令造成AOF文件体积过大，以及还原时间过长，需要用BGREWRITEAOF命令对AOF文件重写。\",\"本质上并不读取旧AOF文件，而是创建一个新文件，直接读取数据库状态，然后将数据写入新AOF文件\",\"为了避免客户端输入缓冲区溢出，对于超过REDIS_AOF_REWRITE_ITEMS_PER_CMD数量的键，分多条命令写入\",\"Redis使用子进程执行重写 \",\"优点：不阻塞服务器进程，且子进程带有服务器进程的数据副本，避免用锁保证数据安全\",\"问题：重写过程中与服务器进程的数据不一致性。\",\"解决方案： \",\"子进程执行重写的过程中，新的客户端命令不仅要追加到aof_buf，还要追加到aof_rewrite_buf\",\"子进程完成重写后，向服务器进程发送信号。由主进程将aof_rewrite_buf写入AOF文件，保证数据一致性\",\"最后以原子操作，将新AOF文件改名覆盖旧AOF文件\"]},\"918\":{\"h\":\"事件\",\"t\":[\"Redis服务器是基于Reactor模式的事件驱动程序，主要处理两类事件：\",\"文件事件：服务器与客户端通信，对套接字操作的抽象\",\"时间事件：定时操作的抽象\"]},\"919\":{\"h\":\"文件事件\",\"t\":[\"文件事件\",\"套接字：文件事件的抽象，每当一个套接字准备好执行连接应答、写入、读取、关闭等操作时，就会产生一个文件事件 \",\"复用程序可以监听套接字的AE_READABLE | AE_WRITABLE事件\",\"也可以同时监听AE_READABLE、AE_WRITABLE，如果同时产生事件，服务器将先读后写\",\"I/O多路复用程序：负责监听多个套接字，并向文件事件分派器传送那些产生了事件的套接字 \",\"所有产生事件的套接字都会放到一个队列里，然后以有序、同步、每次一个套接字的方式传送套接字\",\"当上一个套接字产生的事件被处理完毕之后，才会继续传送下一个套接字\",\"实现上通过包装常见的I/O多路复用库，如select, epoll, evport, kqueue等，且提供相同的API，编译时自动选择性能最高的函数库\",\"文件事件分派器：接收I/O多路复用程序传来的套接字，并根据套接字产生的事件的类型调用相应的事件处理器\",\"事件处理器：与不同任务的套接字关联的一个个函数，定义了某个事件发生时服务器应该执行的动作。常用的有三类： \",\"连接应答处理器：acceptTcpHandler函数，用于对连接服务器监听套接字的客户端进行应答\",\"命令请求处理器：readQueryFromClient函数，负责从套接字中读入客户端发送的命令请求内容\",\"命令回复处理器：sendReplyToClient函数，负责将服务器执行命令后得到的回复通过套接字返回给客户端 \"]},\"920\":{\"h\":\"时间事件\",\"t\":[\"一个时间事件主要有三个属性组成：\",\"id：服务器为时间事件创建的全局唯一ID。ID从小到大递增\",\"when：毫秒精度的UNIX时间戳，记录了时间事件的到达时间\",\"timeProc：时间事件处理器，一个函数。当时间事件到达时，服务器就会调用相应的处理器来处理事件\",\"Redis的时间事件分定时事件和周期性事件两类，目前仅使用周期性事件。类型取决于处理器的返回值：\",\"AE_NOMORE：定时事件，到达一次后就删除\",\"非AE_NOMORE 周期性事件，根据返回值对事件的when属性更新，继续运行\",\"实现上，服务器将所有时间事件放在一个无序链表（不按when属性排序，按id）中，每当时间事件执行器运行时，遍历整个链表，查找已到达的事件并调用相应的处理器。不过目前Redis仅有serverCron一个时间事件，因此实际上该链表仅一个节点。serverCron函数的工作包括：\",\"更新服务器的各类统计信息，比如时间、内存占用、数据库占用情况等。\",\"清理数据库中的过期键值对。\",\"关闭和清理连接失效的客户端。\",\"尝试进行AOF或RDB持久化操作。\",\"如果服务器是主服务器，那么对从服务器进行定期同步。\",\"如果处于集群模式，对集群进行定期同步和连接测试。\"]},\"921\":{\"h\":\"事件调度与执行\",\"t\":[\"事件调度\",\"等待文件事件产生调用的是aeApiPoll，阻塞时间由到达时间最接近当前时间的时间事件决定，避免对时间事件频繁轮询也避免阻塞时间过长\",\"文件事件是随机出现的，如果处理完一次文件事件，没有时间事件到达，将再次等待处理文件事件\",\"对事件的处理都是同步、有序、原子的，不会中断也不会抢占。但都会尽量减少阻塞时间，并在需要时让出执行权\",\"时间事件在文件事件之后，且不会抢占，因此时间事件的实际执行通常比设定时间稍晚一些\"]},\"922\":{\"h\":\"客户端\",\"t\":[\"Redis是一对多的服务器程序，通过I/O多路复用实现单线程单进程处理所有客户端的命令请求。redisServer中的clients指针指向了保存所有客户端状态的redisClient结构数组。\"]},\"923\":{\"h\":\"通用属性\",\"t\":[\"fd: 客户端正在使用的套接字描述符 \",\"值 -1 表示伪客户端，包括AOF载入和Lua脚本两种场景\",\"大于-1的整数即普通客户端\",\"name: 通过CLIENT name xxx设置，让客户端身份更清晰\",\"flags：各种状态信息标志位\",\"querybuf：输入缓冲区，根据输入动态调节，最大1GB\",\"argv、argc：命令参数和数量\",\"cmd：命令函数，redisCommand类型\",\"buf、bufpos：固定大小的输出缓冲区和已使用大小，保存长度较小的回复\",\"reply：可变大小的输出缓冲区，链表结构，保存长度较大的回复\",\"authenticated：身份认证，0未通过，1通过。未通过时除AUTH命令外都会被拒绝执行\",\"ctime：客户端创建时间\",\"lastinteraction：上一次交互时间\",\"obuf_soft_limit_reached_time：输出缓冲区第一次到达软性限制的时间 \",\"服务器使用两种模式限制输出缓冲区大小，一种硬限制，超过即关闭客户端\",\"另一种是软限制，超过后继续监测，如果持续一段时间（配合readched_time）一直超过则关闭。\"]},\"924\":{\"h\":\"创建与连接\",\"t\":[\"普通客户端： \",\"创建：通过网络连接，创建相应的redisClient，加入服务器状态的clients链表末尾\",\"关闭：进程结束、请求不符合协议、KILL、timeout、I/O缓冲区溢出...\",\"Lua伪客户端：服务器初始化时创建负责执行Lua脚本的伪客户端，关联在redisServer/lua_client属性中，直到服务器销毁时才会关闭。\",\"AOF伪客户端：服务器载入AOF文件时，会创建用于执行AOF文件的伪客户端，载入完成后关闭。\"]},\"925\":{\"h\":\"服务器\"},\"926\":{\"h\":\"命令执行过程\",\"t\":[\"发送命令请求：用户键入命令请求，客户端将其转换成协议格式，然后通过连接套接字发送给服务器\",\"读取命令请求： \",\"服务器读取套接字中的请求，保存到redisClient的输入缓冲区\",\"分析缓冲区内的请求，提取命令参数及个数，保存到argv、argc\",\"调用命令执行器，执行指定命令\",\"发送命令回复： \",\"命令实现函数将回复保存在redisClient的输出缓冲区\",\"服务器通过命令回复处理器，将回复发送给客户端，并清空缓冲区\",\"接收命令回复：客户端接收回复并转换协议，打印出结果\"]},\"927\":{\"h\":\"命令执行器\",\"t\":[\"根据redisClient的argv[0]在命令表中查找命令实现，即redisCommand结构，记录至cmd属性。主要属性有：\",\"name, proc实现函数, arity参数个数, sflags标记位, calls执行次数, milliseconds执行时长... \",\"执行预备操作：检查cmd非NULL，检查命令参数，身份验证，内存占用，持久化/订阅/Lua/监视器等检查工作\",\"调用命令实现函数：\",\"调用redisClient->cmd->proc(client)\",\"执行结果保存至输出缓冲区（buf/reply）\",\"为客户端套接字关联回复处理器\",\"执行后续工作：\",\"跟新慢查询日志\",\"更新redisClient相关属性\",\"AOF同步\",\"主从同步\"]},\"928\":{\"h\":\"serverCron函数\",\"t\":[\"更新服务器时间缓存，redisServer/unixtime、mstime \",\"serverCron每100ms执行一次，因此时间精度不高\",\"仅用于对时间精度要求不高的功能，如打印日志、更新LRU时钟等\",\"而需要高精度时间的任务，如设置过期时间、添加慢查询日志等，仍然执行系统调用获取准确时间\",\"更新LRU时钟：对象最后一次被访问时间，估算值\",\"更新服务器每秒执行命令次数：INFO status 命令的 instantaneous_ops_per_sec 属性，实现上是采样平均得到的估算值\",\"更新服务器内存峰值记录：redisServer/stat_peak_memory\",\"处理Sigterm结束服务器信号\",\"管理客户端资源：释放超时的客户端连接、重置溢出的客户端输入缓冲区\",\"管理数据库资源：删除过期键、收缩字典\",\"执行被延迟的BGREWRITEAOF\",\"检查持久化操作的运行状态：redisServer/rdb_child_pid, aof_child_pid记录执行持久化的子进程 \",\"同步AOF文件\",\"关闭输出缓冲区溢出的客户端\",\"增加cronloops计数器，记录serverCron执行次数\"]},\"929\":{\"h\":\"初始化服务器\",\"t\":[\"初始化服务器状态结构：initServerConfig函数 \",\"设置服务器运行id、频率、配置文件路径、架构、端口、持久化条件，初始化LRU时钟，并创建命令表\",\"载入配置选项：通过给定配置参数/配置文件，修改服务器的默认配置\",\"初始化服务器数据结构：initServer函数 \",\"server.clients: redisClient数组\",\"server.db: 数据库结构数组\",\"server.pubsub_channels/patterns: 保存频道订阅信息的字典、保存模式订阅信息的链表\",\"server.lua: 执行Lua脚本的Lua环境\",\"server.slowlog: 保存慢查询日志的结构\",\"其它操作：设置进程信号处理器、创建共享对象、打开监听端口、创建时间事件、AOF持久化、初始化后台I/O\",\"还原数据库状态：如果启用AOF，则用AOF文件还原，否则使用RDB文件\",\"执行事件循环：可以开始接收客户端连接和请求\"]},\"930\":{\"c\":[\"缓存\"]},\"931\":{\"c\":[\"Redis\"]},\"932\":{\"h\":\"Redis 多机\"},\"933\":{\"h\":\"复制\",\"t\":[\"Redis中可以使用SLAVEOF <master_ip> <master_port>实现主从复制，复制功能分两个操作：\",\"同步：将从服务器的数据库状态更新至主服务器的最新状态\",\"命令传播：在主服务器的数据库状态被修改，导致主从不一致时，让主从数据库重新回到一致状态\"]},\"934\":{\"h\":\"旧版复制实现\",\"t\":[\"同步： \",\"从服务器向主服务器发送SYNC命令\",\"收到SYNC的主服务器执行BGSAVE，在后台生成RDB文件，并使用一个缓冲区记录从现在开始执行的所有写命令\",\"BGSAVE执行完毕后，主服务器将生成的RDB文件发送给从服务器\",\"从服务器接收并载入RDB文件，更新从数据库状态至主服务器执行BGSAVE时的状态\",\"主服务器将缓冲区里的所有写命令发送给从服务器，从服务器执行这些写命令，更新数据库至最新状态 \",\"命令传播：同步完成后，任何写操作都将导致主从不一致。为了维护主从一致性，主服务器将自己执行的写命令，即造成主从服务器不一致的那条写命令发送给从服务器执行。从服务器执行了相同的写命令之后，主从服务器将再次回到一致状态。\",\"旧版复制的缺陷： \",\"主从复制可分为初次复制、断线后重复制\",\"其中，断线后重复制为了补足小部分缺失数据，需要对所有数据进行同步，造成极大的资源开销\"]},\"935\":{\"h\":\"新版复制实现\",\"t\":[\"为了解决旧版复制在断线后重复制的巨大开销，Redis从2.8开始使用PSYNC代替SYNC执行复制时的同步操作。\",\"PSYNC分两种模式： \",\"完整重同步：处理初次复制的情况，与SYNC基本相同，创建RDB和命令缓冲区并发送\",\"部分重同步：可以将连接断开期间的写命令发送给从服务器，从服务器只需要更新缺失数据即可恢复一致性\",\"部分重同步的实现包含三个主要结构： \",\"主从复制偏移量： \",\"主从服务器分别维护一个复制偏移量，标记当前已经传播/接收的字节数据\",\"如果主从一致，那么主从服务器的复制偏移量相同，否则不一致\",\"主服务器的复制积压缓冲区： \",\"结构上是一个固定长度的FIFO队列，默认1MB\",\"主服务器进行命令传播时，不仅发送给所有从服务器，也写入复制积压缓冲区，并为每个字节记录偏移量\",\"从服务器断线重连后，根据复制偏移量之后的数据是否还在积压缓冲区中，决定执行完整/部分重同步\",\"服务器运行ID： \",\"初次复制时，主服务器将自己的ID发送给从服务器，从服务器保存下来\",\"从服务器断线重连后，根据运行ID是否一致，决定执行完整/部分重同步 \",\"PSYNC通信协议： \",\"初次复制时，从服务器发送PSYNC ? -1请求进行完整重同步\",\"非初次复制时，从服务器发送PSYNC <runid> <offset>，主服务器判断执行哪种同步操作\",\"主服务器返回+FULLRESYNC <runid> <offset>表示将执行完整重同步，并告知运行ID和初始复制偏移量\",\"主服务器返回+CONTINUE表示将执行部分重同步，随后将发送缺失的数据\",\"主服务器返回-ERR表示不支持PSYNC命令，随后将执行完整的SYNC操作 \"]},\"936\":{\"h\":\"复制完整逻辑\",\"t\":[\"SLAVEOF <master_ip> <master_port>命令的底层实现步骤：\",\"从服务器设置主服务器的地址和端口，记录在redisServer/masterhost, masterport属性\",\"从服务器建立套接字连接，并关联用于处理复制工作的文件事件处理器。此时从服务器成为主服务器的一个客户端\",\"从服务器向主服务器发送PING，主服务器恢复PONG，验证套接字连接正常，否则断开重连\",\"使用AUTH进行身份验证，必须主服务器的requirepass和从服务器的masterauth同时设置或同时不设置，否则一直重试\",\"从服务器发送监听端口号REPLCONF listening-port <port>\",\"开始同步，从服务器发送PSYNC。此后，主从服务器互为对方的客户端\",\"完成同步后，主服务器进入命令传播阶段\"]},\"937\":{\"h\":\"心跳检测\",\"t\":[\"在命令传播阶段，从服务器默认每秒发送一次REPLCONF ACK <replication_offset>，作用有三：\",\"监测主从服务器连接状态\",\"辅助实现min-slaves选项：Redis在从服务器少于min-slaves-to-write，或服务器延迟大于等于min-slaves-max-lag时，将拒绝执行写命令\",\"检测命令丢失：复制偏移量不一致时，说明发生了命令丢失，主服务器将补发缺失数据\"]},\"938\":{\"h\":\"Sentinel\",\"t\":[\"Sentinel（哨兵）是Redis的高可用性解决方案：由若干Sentinel实例组成的Sentinel系统可以监视多个主服务器，以及属下的从服务器，并在主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求，旧主服务器重新上线后降级为从服务器。\",\"Sentinel_作用\"]},\"939\":{\"h\":\"启动和初始化\",\"t\":[\"通过redis-sentinel sentinel.conf命令启动sentinel，执行步骤包括：\",\"初始化服务器\",\"和普通Redis服务器不完全相同，例如不载入持久化文件\",\"使用Sentinel专用代码\",\"将一部分普通Redis服务器代码替换成Sentinel专用代码\",\"例如Sentinel的命令表sentinelcmds中仅有 PING, SENTINEL, INFO, SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE 七个命令\",\"初始化Sentinel状态\",\"sentinelState结构保存和Sentinel功能相关的状态信息\",\"服务器一般状态仍保存在redisServer中\",\"初始化Sentinel的监视主服务器列表\",\"sentinelState/masters字典属性记录了所有被Sentinel监视的主服务器\",\"字典的键是主服务器的名字，值是对应的sentinelRedisInstance实例，可以是主/从服务器或另一个Sentinel\",\"创建连向主服务器的网络连接\",\"对于每个监视的主服务器，Sentinel将创建两个异步网络连接\",\"一个是命令连接，用于发送命令，接收命令回复\",\"另一个是订阅连接，用于订阅主服务器的__sentinel__:hello频道\",\"Sentinel_state\"]},\"940\":{\"h\":\"通信连接\",\"t\":[\"获取主服务器信息 Sentinel默认每10s通过命令连接向主服务器发送INFO命令，来获取主服务器当前信息并更新。\",\"# Server 关于主服务器本身的信息 ... run_id:7611c59dc3a29aa6fa0609f841bb6a1019008a9c ... # Replication 主服务器角色及下属从服务器信息 role:master ... slave0:ip=127.0.0.1,port=11111,state=online,offset=43,lag=0 slave1:ip=127.0.0.1,port=22222,state=online,offset=43,lag=0 slave2:ip=127.0.0.1,port=33333,state=online,offset=43,lag=0 ... # Other sections ...\",\"Sentinel无须用户提供从服务器地址信息，就可以自动发现\",\"从服务器信息保存至sentinelRedisInstance/slaves字典中，键是ip:port，值是对应sentinelRedisInstance从服务器结构\",\"获取从服务器信息 Sentinel发现主服务器有新的从服务器后，会创建对应的从服务器结构和对应的命令连接、订阅连接。然后默认每10s通过命令连接向从服务器发送INFO命令，来获取从服务器当前信息并更新。\",\"# Server ... run_id:32be0699dd27b410f7c90dada3a6fab17f97899f ... # Replication role:slave master_host:127.0.0.1 master_port:6379 master_link_status:up # 从服务器复制偏移量 slave_repl_offset:11887 # 从服务器优先级 slave_priority:100 # Other sections ...\",\"向服务器发送信息 Sentinel默认每2s通过命令连接向所有主/从服务器发送命令： PUBLISH __sentinel__:hello \\\"＜s_ip＞,＜s_port＞,＜s_runid＞,＜s_epoch＞,＜m_name＞,＜m_ip＞,＜m_port＞,＜m_epoch＞\\\" 其中，s_开头的是Sentinel本身信息，m_开头的是（从服务器正在复制的）主服务器信息。\",\"接收服务器信息 Sentinel与主从服务器建立订阅信息后，发送SUBSCRIBE __sentinel__:hello创建订阅频道，一直持续到连接断开。Sentinel通过订阅连接接收来自主从服务器的信息。\",\"Sentinel_发送接收\",\"多个Sentinel 多个Sentinel监视同一个服务器，任意Sentinel发送的信息（包括本Sentinel信息、主服务器信息）会被其它Sentinel接收到，并更新各自保存的主服务器sentinelRedisInstance/sentinels字典。\",\"Sentinel_sentinels字典\",\"监视同一个服务器的Sentinel可以通过频道信息自动发现对方，并创建Sentinel之间的命令连接（无订阅连接），最终这些Sentinel将形成互相连接的网络\",\"Sentinel_sentinels连接网络\"]},\"941\":{\"h\":\"检测下线状态\",\"t\":[\"主观下线 Sentinel默认每1s向所有建立命令连接的实例（主/从/Sentinel）发送PING命令，根据回复判断是否在线：\",\"有效回复：+PONG, -LOADING, -MASTERDOWN\",\"无效回复：其它或无回复\",\"如果返回无效回复的时间超过down-after-milliseconds，那么Sentinel将认定该实例主观下线，打开sentinelRedisInstance/flags的SRI_S_DOWN标记\",\"客观下线\",\"Sentinel发送SENTINEL is-master-down-by-addr ＜ip＞ ＜port＞ ＜current_epoch＞ ＜runid＞来询问其它Sentinel是否同意该主服务器已下线\",\"目标Sentinel收到源Sentinel的询问命令后，解析并检查，然后回复三个参数的Multi Bulk： \",\"down_state: 检查结果，1下线，0在线\",\"leader_runid: *表示询问下线的回复；否则表示局部领头Sentinel的运行id\",\"leader_epoch: leader_runid不为*时，表示局部领头Sentinel的配置纪元。否则为0\",\"当同意该主服务器已下线的Sentinel总数$>=quorum$，认定客观下线，打开sentinelRedisInstance/flags的SRI_O_DOWN标记\"]},\"942\":{\"h\":\"选举领头Sentinel\",\"t\":[\"当一个主服务器被判定客观下线，监视该服务器的所有Sentinel将选举出一个领头Sentinel，来执行故障转移操作。\",\"规定：\",\"监视该主服务器的所有在线Sentinel都可能成为领头\",\"每次选举不论是否成功，所有Sentinel的配置纪元（epoch）都会自增，相当于计数器\",\"在一个配置纪元里，所有Sentinel都有一次将某个Sentinel设置为局部领头的机会，并且一旦设置不能更改\",\"某个Sentinel被超过半数的Sentinel设置为局部领头，才能成为领头Sentinel\",\"基于上述两点，在一个配置纪元里面只会出现一个领头Sentinel。\",\"步骤：\",\"当Sentinel判定主服务器客观下线，会要求其他Sentinel将自己设置为局部领头 \",\"源Sentinel向另一个目标Sentinel发送SENTINEL is-master-down-by-addr命令，且参数runid是源Sentinel的运行ID，表示源Sentinel要求目标Sentinel将源设置为目标的局部领头\",\"局部领头遵循先到先得，最先收到的请求将设置成功\",\"目标Sentinel接收到SENTINEL is-master-down-by-addr命令之后，将向源Sentinel返回一条命令回复 \",\"回复中的 leader_runid 记录该Sentinel设定的局部领头运行ID\",\"回复中的 leader_epoch 记录该Sentinel设定的局部领头配置纪元\",\"源Sentinel解析目标Sentinel返回的命令回复 \",\"检查回复中 leader_epoch 和自己的配置纪元是否相同，如果相同则继续\",\"检查回复中 leader_runid 和自己的运行ID是否相同，如果相同，表示目标将源设置成了局部领头\",\"如果某个Sentinel被超过半数的Sentinel设置成局部领头，那么这个Sentinel成为领头Sentinel\",\"如果给定时限内没有一个Sentinel被选举为领头Sentinel，将在一段时间后再次选举，直到选出领头Sentinel为止\"]},\"943\":{\"h\":\"故障转移\",\"t\":[\"选举产生的领头Sentinel负责对已下线的主服务器执行故障转移操作：\",\"在已下线主服务器属下的所有从服务器里，选择一个从服务器发送SLAVEOF no one命令，转换为主服务器。选择策略如下：\",\"剔除下线/断线的从服务器\",\"剔除近5s内没有回复INFO命令的从服务器\",\"剔除所有与旧主服务器连接断开超过$down-after-millseconds*10 ms$的从服务器\",\"剩余候选者中选择优先级最高的从服务器\",\"优先级相同，选择复制偏移量最大的从服务器\",\"优先级和偏移量都相同，选择运行ID最小的从服务器\",\"发送SLAVEOF命令，让旧主服务器属下的所有从服务器改为复制新的主服务器\",\"将旧主服务器设置为新主服务器的从服务器（修改对应实例结构），当旧主服务器重新上线时，它就会成为新主服务器的从服务器\"]},\"944\":{\"h\":\"集群\"},\"945\":{\"h\":\"节点\",\"t\":[\"Redis服务器根据配置决定是否开启集群模式，一个集群由多个节点组成，节点会继续使用所有单机模式下的组件，以及集群特定的相关组件。\",\"数据结构\",\"clusterNode: \",\"每个节点使用一个clusterNode记录自己的状态，并为集群中其它节点创建一个对应的节点结构\",\"包括ctime, name, flags, configEpoch, ip, port, clusterLink[]...\",\"clusterLink: \",\"保存连接节点所需的信息\",\"包括套接字描述符、输入/输出缓冲区、关联节点...\",\"clusterState: \",\"每个节点保存一个集群状态结构，记录当前节点视角下的集群所处状态\",\"包括currentEpoch, state, size...\",\"clusterState\",\"CLUSTER MEET 命令实现 节点A向节点B发送CLUSTER MEET <ip> <port>命令，将节点B纳入A所在集群，实现如下（三次握手）：\",\"A为B创建clusterNode，并添加到自己的clusterState.nodes字典里面\",\"然后A根据给定的IP和端口，向B发送一条MEET消息\",\"B收到A发送的MEET消息后，会为A创建clusterNode，并添加到自己的clusterState.nodes字典里面\",\"接着B向A返回一条PONG消息\",\"A收到B返回的PONG消息后，可以知道B已经成功接收到自己发送的MEET消息\",\"最后A向B再返回一条PING消息\",\"B收到A返回的PING消息后，可以知道A已经成功接收到自己返回的PONG消息，握手完成\",\"clusterMeet\",\"之后A将B的信息通过Gossip协议传播给集群中其它节点，最终，节点B与集群所有节点握手成功。CLUSTER NODES查看当前集群节点状态。\",\"集群节点的特殊之处\",\"节点只能使用0号数据库\",\"节点会在clusterState/slots_to_keys跳跃表保存槽和键的对应关系，跳跃表节点的成员是数据库键，分值是槽号\"]},\"946\":{\"h\":\"分片与槽\",\"t\":[\"Redis集群通过分片的方式来保存数据库中的键值对，集群的整个数据库被分为16384个槽（slot），每个键都属于其中一个槽，集群中的每个节点可以处理0~16384个槽。只有当16384个槽都有节点负责处理时，集群处于上线状态。\",\"记录槽指派信息\",\"clusterNode/numslot 属性记录本节点负责处理的槽数量\",\"clusterNode/slots[] 属性是一个2048Byte（16384bit）的数组，每一位表示对应的槽是否被指派给本节点\",\"clusterState/slots[] 是长度为16384的clusterNode指针数组，每个指针指向负责处理对应槽的节点\",\"设计考量：\",\"一个节点不仅会记录自己负责处理的槽记录，还会通过消息发送给集群中其它节点，因此集群中每个节点都知道16384个槽分别被指派给哪些节点。\",\"clusterNode保存槽指派信息。使得传播某个节点的槽指派信息变得高效\",\"clusterState保存槽指派信息，使得程序能够以O(1)检查某个槽是否被指派，以及指派的节点\",\"ADDSLOTS 命令实现\",\"CLUSTER ADDSLOTS <slots>命令将若干槽指派给当前节点负责，实现上即修改clusterNode/slots和clusterState/slots属性。执行完毕后节点会通过消息告知其它节点自己目前负责的槽信息。\",\"重新分片\",\"Redis集群的重新分片可以将任意数量的槽修改分配节点，并且相关槽所属的键值对也会迁移至目标节点。操作由集群管理工具redis-trib负责，实现原理如下：\",\"redis-trib对目标节点发送CLUSTER SETSLOT <slot> IMPORTING <source_id>命令，让目标节点准备好从源节点导入属于槽slot的键值对。 \",\"修改cluserState/importing_slots_from[]（clusterNode指针数组），不为NULL表示当前节点正从指向的clusterNode导入对应的槽\",\"redis-trib对源节点发送CLUSTER SETSLOT <slot> MIGRATING <target_id>命令，让源节点准备好将属于槽slot的键值对迁移至目标节点。 \",\"修改cluserState/migrating_slots_to[]（clusterNode指针数组），不为NULL表示当前节点正将对应的槽迁移至指向的clusterNode\",\"redis-trib向源节点发送CLUSTER GETKEYSINSLOT <slot> <count>命令，获得最多count个属于槽slot的键值对的键名。\",\"对于步骤3获得的每个键名，redis-trib都向源节点发送一个MIGRATE <target_ip> <target_port> <key_name> 0 <timeout>命令，将被选中的键原子地从源节点迁移至目标节点。\",\"重复执行步骤3和步骤4，直到源节点保存的所有属于槽slot的键值对都被迁移至目标节点为止。\",\"redis-trib向集群中的任意一个节点发送CLUSTER SETSLOT <slot> NODE <target_id>命令，将槽slot指派给目标节点，这一指派信息会通过消息发送至整个集群。\",\"如果重新分片涉及多个槽，那么redis-trib将对每个给定的槽分别执行上面给出的步骤。\",\"重新分片\"]},\"947\":{\"h\":\"集群中执行命令\",\"t\":[\"当数据库的16384个槽有进行指派后，集群进入上线状态，客户端就可以发送命令请求了。当发送与数据键相关命令时：\",\"计算给定键所在的槽：CRC16(key) & 16383 （CLUSTER KEYSLOT <key>命令查看键对应的槽）\",\"检查clusterState/slots属性，判断槽是否由当前节点负责\",\"如果槽正好由当前节点负责，那么节点直接执行\",\"否则节点返回MOVED <slot> <ip>:<port>，指引客户端自动转向到正确的节点，并再次发送命令\",\"一个集群客户端通常会与集群中的多个节点创建套接字连接，节点转向即换一个套接字发送命令，如果没有创建套接字连接，会先连接节点再进行转向。\",\"ASK与ASKING 在重新分片期间，如果客户端发送了关于某个键的命令：\",\"节点首先查看键是否在自己的数据库中，在就直接执行\",\"否则检查migrating_slots_to数组，查看是否正在迁移，如果是发送ASK <slot> <target_ip>:<target_port>错误信息\",\"客户端接收到ASK错误后，转向正在导入槽的目标节点，发送ASKING命令，打开REDIS_ASKING一次性标记\",\"目标节点查询importing_slots_from是否正在导入，如果正在导入，则破例执行一次命令 \",\"MOVED错误代表槽的负责权已经从一个节点转移到了另一个节点：在客户端收到关于槽i的MOVED错误之后，客户端每次遇到关于槽i的命令请求时，都可以直接将命令请求发送至MOVED错误所指向的节点，因为该节点就是目前负责槽i的节点。\",\"与此相反，ASK错误只是两个节点在迁移槽的过程中使用的一种临时措施：在客户端收到关于槽i的ASK错误之后，客户端只会在接下来的一次命令请求中将关于槽i的命令请求发送至ASK错误所指示的节点，但这种转向不会对客户端今后发送关于槽i的命令请求产生任何影响，客户端仍然会将关于槽i的命令请求发送至目前负责处理槽i的节点，除非ASK错误再次出现。\"]},\"948\":{\"h\":\"复制与故障转移\",\"t\":[\"Redis集群中的节点分主节点和从节点，其中主节点负责处理槽，从节点用于复制某个主节点以及故障转移。\",\"设置从节点\",\"CLUSTER REPLICATE <node_id>让接收到命令的节点成为指定节点的从节点，并开始复制。实现上：\",\"修改自己的clusterState.myself.slaveof指针，记录正在复制的主节点\",\"修改flags，打开REDIS_NODE_SLAVE标记\",\"调用复制功能，与单机复制相同\",\"将自己成为从节点这一消息发送给集群中的其它节点\",\"其它节点接收消息后，修改主节点clusterNode/slaves, numslaves属性，记录所属从节点和数量\",\"故障检测\",\"集群中每个节点定期向其它节点发送PING，如果目标节点没有在规定时间内回复PONG，则打开REDIS_NODE_PFAIL疑似下线标记。并通过消息在集群内交换信息，并记录在对应的节点的fail_reports下线报告中。如果集群内超过半数的主节点报告某个节点X疑似下线，则将X标记FAIL已下线，并广播给所有节点。\",\"故障转移\",\"当一个从节点发现自己正在复制的主节点已下线时，从节点将开始进行故障转移：\",\"下线主节点的所有从节点中选举一个新的主节点，选举方法和Sentinel类似，都是基于Raft共识算法： \",\"当某个节点开始故障转移，集群配置纪元（计数器，初始0）的值自增1\",\"一个配置纪元里，每个主节点都有一次投票机会，且第一个向主节点要求投票的从节点将获得主节点的投票\",\"当从节点发现所属的主节点已下线时，从节点广播一条CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST消息，要求所有主节点给自己投票。\",\"如果一个主节点具有投票权（正在负责处理槽），并且尚未投票给其他从节点，那么主节点将向要求投票的从节点返回一条CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK消息，表示给该从节点投票\",\"参与选举的从节点根据投票回复，统计自己得票数\",\"如果集群里有N个具有投票权的主节点，那么当一个从节点得到 $>=\\\\frac{N}{2}+1$ 张支持票时，当选为新主节点。一个配置纪元里，仅有一个节点能当选成功。\",\"如果一个配置纪元里没有从节点能得到足够多的支持票，那么集群进入新的配置纪元，并再次进行选举，直到选出新的主节点为止。\",\"新主节点执行SLAVEOF no one命令\",\"新主节点将所有对旧主节点的槽指派转移给自己\",\"新主节点广播PONG消息，告知集群自己成为新的主节点，并负责处理相应的槽\",\"新主节点开始接收相应的槽有关的命令请求，故障转移完成\"]},\"949\":{\"h\":\"消息\",\"t\":[\"集群中各个节点通过发送和接受消息进行通信，常见消息分为五种类型：MEET, PING, PONG, FAIL, PUBLISH。\",\"结构\",\"所有消息都由消息头 + 消息正文组成。\",\"消息头记录消息发送者本身的一些信息，由clusterMsg结构表示 \",\"包括消息长度、类型、配置纪元、发送者名字、槽指派信息、从节点...\",\"接收者根据收到的信息，更新相应的clusterNode结构\",\"消息正文由clusterMsgData结构表示，不同类型的消息内容不同\",\"实现\",\"MEET：请求接收者加入到发送者所处的集群里。\",\"PING：默认每隔1s随机选出五个节点，对其中最长时间没有PING过的节点发送PING消息，检测是否在线\",\"PONG：回复MEET和PING，或广播告知集群刷新自己的状态，例如成为主节点\",\"以上三类消息都基于Gossip协议，消息正文由两个clusterMsgDataGossip结构组成，保存两个目标节点相关信息。接收者收到消息后更新对应的节点结构。\",\"FAIL：集群广播告知某个主节点进入下线状态 \",\"Gossip协议有延迟，难以保证即使进行故障转移，因此采用广播消息\",\"消息正文由clusterMsgDataFail结构表示，仅含下线节点名字一个属性\",\"PUBLISH：执行命令并向集群广播该条PUBLISH消息，所有接收到的节点都会执行相同的PUBLISH命令 \",\"收到PUBLISH <channel> <msg>命令不仅向某个频道发送消息，还会向集群广播PUBLISH消息\",\"消息正文由clusterMsgDataPublish结构表示，包括频道、信息的长度和内容\"]},\"950\":{\"c\":[\"缓存\"]},\"951\":{\"c\":[\"Redis\"]},\"952\":{\"h\":\"Redis 独立功能\"},\"953\":{\"h\":\"发布与订阅\",\"t\":[\"Redis的发布订阅功能由PUBLISH, SUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE等命令实现，客户端可以订阅一个或多个频道/模式，服务器根据是否订阅频道、模式是否匹配，决定是否发送给指定客户端消息。\"]},\"954\":{\"h\":\"频道\",\"t\":[\"客户端执行SUBSCRIBE命令订阅频道后，这个客户端就和频道建立了订阅关系。所有订阅关系保存在redisServer/pubsub_channels字典中，字典的键是频道，值是订阅者的链表。\",\"pubsub_channels\",\"订阅频道时，（创建新的频道键）将客户端添加到频道对应的订阅者链表末尾\",\"退订频道时，删除对应订阅者链表的客户端，如果链表为空，再删除频道键\"]},\"955\":{\"h\":\"模式\",\"t\":[\"客户端执行PSUBSCRIBE命令订阅模式后，这个客户端就和模式建立了订阅关系。所有模式订阅关系保存在redisServer/pubsub_patterns列表中，列表的每个元素是一个pubsubPattern结构，保存模式和客户端。\",\"pubsub_patterns\",\"订阅模式时，创建新的pubsubPattern结构，保存客户端和模式，添加到列表尾\",\"退订模式时，删除对应的pubsubPattern结构\"]},\"956\":{\"h\":\"发送消息\",\"t\":[\"当客户端执行publish <channel> <msg>时：\",\"查询pubsub_channels，遍历channel键的订阅者链表，将msg发送给channel订阅者\",\"遍历pubsub_patterns列表，将msg发送给与频道匹配的模式关联的客户端\"]},\"957\":{\"h\":\"查看订阅\",\"t\":[\"PUBSUB命令本质上都是对pubsub_channels和pubsub_patterns的访问：\",\"PUBSUB CHANNELS [pattern]返回当前被订阅的所有频道，或符合pattern的所有频道\",\"PUBSUB NUMSUB [channle...] 返回频道对应的订阅数\",\"PUBSUB NUMPAT 返回当前订阅模式数\"]},\"958\":{\"h\":\"事务\",\"t\":[\"Redis通过MULTI, EXEC, WATCH等命令实现事务，提供一种将多个命令请求打包，然后一次性、不会中断地、顺序执行多个命令的机制。\"]},\"959\":{\"h\":\"事务实现\",\"t\":[\"事务开始MULTI命令打开客户端的REDIS_MULTI标识，切换至事务状态。\",\"命令入队 当一个客户端处于事务状态，除EXEC, DISCARD, WATCH, MULTI四个命令外，其它命令都不会立即执行，而是放入redisClient/mstate结构的multiCmd数组里。multiCmd是基于数组实现的FIFO队列，每个multiCmd封装一个具体的命令、参数以及个数。\",\"事务队列\",\"执行事务\",\"EXEC命令用于执行事务，服务器将遍历客户端的事务队列，依次执行所有命令，并将全部结果返回给客户端。\"]},\"960\":{\"h\":\"Watch 命令\",\"t\":[\"WATCH命令是一个乐观锁，可以在EXEC命令执行前监视任意数量的数据库键，并在EXEC命令执行时，检查被监视的键是否至少有一个已经被修改过，如果是，服务器将拒绝执行事务，并向客户端返回代表事务执行失败的空回复。\",\"原理\",\"每个redisDb结构保存了一个watched_keys字典，键是被监视的数据库键，值是监视的客户端链表。\",\"watched_keys\",\"所有对数据库进行修改的命令，如SET, LPUSH...都会在执行后调用multi.c/touchWatchKey函数对watched_keys字典检查，如果有客户端正在监视刚刚修改过的数据库键，则会打开客户端的REDIS_DIRTY_CAS标识，表示该客户端的事务安全性已被破坏。\",\"而当服务器开始执行事务时，如果发现该客户端的REDIS_DIRTY_CAS已打开，将拒绝执行并回复错误消息，以此来保证事务的安全性。\"]},\"961\":{\"h\":\"事务的ACID\",\"t\":[\"Redis的事务总是具有原子性、一致性、隔离性，特定情况下具有持久性\",\"原子性：数据库将食物中的多个操作当作一个整体来执行，要么执行所有，要么一个也不执行 \",\"Redis事务队列中的命令要么全部执行，要么一个都不执行，因此具有原子性\",\"不同于传统的关系型数据库，Redis不支持事务回滚。即使队列中某个命令执行出错，也会继续执行下去\",\"一致性：如果数据库在执行事务前是一致的，那么事务执行后，无论事务是否成功，数据库仍应保持一致（符合定义和要求，没有非法或无效数据） \",\"Redis在入队错误、执行错误、服务器停机等场景下，都进行了处理，保证了事务的一致性\",\"隔离性：即使数据库中有多个事务并发执行，各个事务之间也不会相互影响，且和串行执行结果相同 \",\"Redis使用单线程方式，串行执行事务，且不会中断，因此具有隔离性\",\"持久性：当一个事务执行完毕后，所得结果不会丢失 \",\"Redis的事务仅仅是简单的执行一组命令，没有提供额外的持久化功能。因此持久性由持久化模式决定\",\"仅AOF持久化模式下，appendfsync选项为always时，具有持久性（no-appendfsync-on-rewrite关闭）\",\"内存/RDB/AOF(not always)模式下都不能保证持久性\"]},\"962\":{\"h\":\"Lua脚本\"},\"963\":{\"h\":\"创建Lua环境\",\"t\":[\"Redis在服务器内嵌了一个修改过的Lua环境，来执行Lua脚本。具体步骤包括：\",\"创建基础Lua环境\",\"载入多个函数库\",\"创建全局表格redis，包含对Redis进行操作的函数\",\"使用Redis自制的随机函数替换原有的随机函数，避免副作用\",\"创建排序辅助函数\",\"创建redis.pcall函数的错误报告辅助函数\",\"对Lua环境的全局环境进行保护，防止用户添加额外的全局变量\",\"将完成修改的Lua环境保存到redisServer/lua属性中，等待执行服务器传来的Lua脚本\"]},\"964\":{\"h\":\"协作组件\",\"t\":[\"伪客户端\",\"为了执行Lua脚本包含的Redis命令，需要为Lua环境创建一个伪客户端。执行命令的交互过程如下：\",\"Lua_伪客户端\",\"lua_scripts 字典\",\"lua_scripts 字典的键是为某个Lua脚本的SHA1校验和，值是对应的Lua脚本。\",\"所有被服务器 EVAL 命令执行过的脚本，以及 SCRIPT LOAD 命令载入过的脚本都保存至 lua_scripts 字典中。\",\"lua_scripts 字典有两个作用： \",\"实现 SCRIPT EXISTS 命令\",\"实现脚本复制功能\"]},\"965\":{\"h\":\"EVAL 命令\",\"t\":[\"EVAL script <numkeys> key... arg... 根据传入的键、参数执行脚本。\",\"根据客户端给定的Lua脚本，在Lua环境中定义一个Lua函数 \",\"函数名为f_脚本的sha1校验和\",\"将客户端给定的脚本保存到lua_scripts字典\",\"执行刚刚在Lua环境中定义的函数，以此来执行客户端给定的Lua脚本。 \",\"将 EVAL 命令中传入的键名参数和脚本参数分别保存到KEYS数组和ARGV数组，将两个数组作为全局变量传入 Lua 环境里。\",\"为 Lua 环境装载超时处理钩子，使得脚本超时运行时，让客户端通过 SCRIPT KILL 命令停止脚本，或者通过 SHUTDOWN 命令直接关闭服务器。\",\"执行脚本函数\",\"移除之前装载的超时钩子\",\"将执行脚本函数所得的结果保存到客户端状态的输出缓冲区里面，等待服务器将结果返回给客户端。\",\"对Lua环境执行垃圾回收操作。\",\"EVALSHA <sha1> numkeys key... arg... 根据已保存过的脚本SHA1执行对应的脚本。\"]},\"966\":{\"h\":\"脚本管理命令\",\"t\":[\"SCRIPT FLUSH 清除服务器中所有和Lua脚本有关的信息，释放并重建 lua_scripts 字典和 Lua 环境\",\"SCRIPT EXISTS <sha1> 检查 lua_scripts 字典，查看校验和对应脚本是否存在于服务器\",\"SCRIPT LOAD script 为脚本创建相对应的函数，并保存至 lua_scripts 字典中\",\"SCRIPT KILL 停止执行脚本 \",\"超时处理钩子在脚本运行期间，会定期检查脚本运行时长，如果超过lua-time-limit选项设置的时长，钩子将定期在脚本运行的间隙中，查看是否有 SCRIPT KILL 命令或者 SHUTDOWN 命令到达服务器。\",\"如果没有执行写操作，可以 SCRIPT KILL 停止执行脚本\",\"如果执行过写操作，可以 SHUTDOWN nosave 停止服务器\"]},\"967\":{\"h\":\"脚本复制\",\"t\":[\"与其他普通Redis命令一样，当服务器运行在复制模式下，具有写性质的脚本命令也会被复制到从服务器。\",\"对于 EVAL, SCRIPT FLUSH, SCRIPT LOAD 三个命令，主服务器将直接传播给所有从服务器\",\"复制 EVALSHA 命令\",\"由于主服务器和从服务器载入的脚本情况可能不同，EVALSHA 命令可能出现 not found 错误。因此在传播时必须确保 EVALSHA 命令要执行的脚本已经被从服务器载入，需要借助 lua_scripts, repl_scriptcache_dict 两个字典。\",\"repl_scriptcache_dict：主服务器记录自己已经将哪些脚本传播给了所有从服务器。 \",\"键是脚本的SHA1值，值全部是NULL\",\"当一个校验和出现在 repl_scriptcache_dict 字典时，说明对应的脚本已经传播给了所有从服务器\",\"每当主服务器添加一个新的从服务器时，主服务器都会清空自己的repl_scriptcache_dict字典。强制自己重新向所有从服务器传播脚本\",\"如果一个SHA1值对应脚本没有载入所有从服务器，主服务器可以将 EVALSHA 命令转换成 EVAL 命令： \",\"根据校验和，在 lua_scripts 字典中查找对应的脚本\",\"将原来的 EVALSHA 命令请求改写成 EVAL 命令请求，并将校验和改成脚本，而 numkeys、key、arg 等参数则保持不变\",\"Lua_Evalsha\"]},\"968\":{\"h\":\"排序\"},\"969\":{\"h\":\"Sort 命令\",\"t\":[\"SORT <key> -- 对字符串值的键进行排序（字典序） SORT <key> ALPHA -- 升降序，默认升序 SORT <key> ASC|DESC -- 按指定键/域排序 SORT <key> BY <by-pattern> -- 分页：跳过offset个，返回count个 SORT <key> LIMIT <offset> <count> -- 返回指定域 SORT <key> GET <get-pattern> -- 保存排序结果（每次都会更新保存结果，本质上是保存一个列表） SORT <key> STORE <store-key>\"]},\"970\":{\"h\":\"底层实现\",\"t\":[\"创建和 key 长度相同的数组，该数组的每个项都是一个 redis.h/redisSortObject 结构\",\"遍历数组，将各个数组项的 obj 指针分别指向 key 的各个项，构成obj指针和列表项之间的一对一关系\",\"遍历数组，将各个 obj 指向的列表项 根据指定规则 转换成一个double类型的浮点数，保存在数组项的u.score属性中\",\"根据u.score属性值，对数组进行基于快排的数字值排序，默认升序\",\"遍历数组，将列表项/指定域作为排序结果返回给客户端\",\"sort实现\"]},\"971\":{\"h\":\"执行顺序\",\"t\":[\"SORT <key> ALPHA DESC BY <by-pattern> LIMIT <offset> <count> GET <get-pattern> STORE <store_key> 排序 -> 限制长度 -> 获取外部键 -> 保存结果集 -> 返回客户端\",\"除 GET 影响结果集外，其余选项的书写顺序不影响执行结果。\"]},\"972\":{\"h\":\"二进制位数组\",\"t\":[\"Redis提供了SETBIT, GETBIT, BICOUNT, BITOP四个命令用于处理二进制位数组。\"]},\"973\":{\"h\":\"位数组的表示\",\"t\":[\"Redis使用二进制安全的SDS字符串保存位数组，且逆序保存简化操作。\",\"位数组\"]},\"974\":{\"h\":\"GETBIT\",\"t\":[\"GETBIT <bitarray> <offset> 返回位数组 bitarray 在 offset 偏移量上的二进制位的值，复杂度$O(1)$，执行步骤：\",\"计算 $byte = \\\\lfloor offset÷8 \\\\rfloor$，byte 值记录了 offset 偏移量指定的二进制位保存在位数组的哪个字节。\",\"计算 $bit = (offset % 8)+1$，bit 值记录了 offset 偏移量指定的二进制位是 byte字节的第几个二进制位。\",\"根据byte值和bit值，在位数组bitarray中定位 offset 偏移量指定的二进制位，并返回这个位的值。\"]},\"975\":{\"h\":\"SETBIT\",\"t\":[\"SETBIT <bitarray> <offset> <value> 将位数组 bitarray 在 offset 偏移量上的二进制位设为 value，复杂度O(1)，执行步骤如下：\",\"计算 $len = \\\\lfloor offset÷8\\\\rfloor + 1$，len 值记录了保存 offset 偏移量指定的二进制位至少需要多少字节。\",\"检查 bitarray 键保存的位数组（即SDS）的长度是否小于len，如果是，将SDS长度扩展为 len 字节（通常会多分配两个字节），并将所有新扩展空间的二进制位置0。\",\"计算 $byte = \\\\lfloor offset÷8 \\\\rfloor$，byte 值记录了 offset 偏移量指定的二进制位保存在位数组的哪个字节。\",\"计算 $bit =(offset % 8)+ 1$，bit 值记录了 offset 偏移量指定的二进制位是 byte字节的第几个二进制位。\",\"根据 byte 和 bit，在 bitarray 键保存的位数组中定位offset偏移量指定的二进制位，先将指定二进制位现在值保存至 oldvalue 变量，然后将新值value设置为这个二进制位的值。\",\"向客户端返回oldvalue变量的值。\",\"Redis逆序存储位数组使得 SETBIT 可以在不移动现有二进制位的情况下，对位数组空间进行扩展\"]},\"976\":{\"h\":\"BITCOUNT\",\"t\":[\"BITCOUNT <bitarray> 统计给定二进制位数组中，值为1的位数，即汉明重量。通常的统计算法有：\",\"遍历：时间复杂度非常高\",\"查表：空间复杂度非常高，16位表键需要几百KB，但32位的表键需要十几GB\",\"variable-precision SWAR算法：通过位移，计算每2位、4位、8位的汉明重量，最后得到每32位二进制的汉明重量。这种算法时间复杂度大大降低，仅需常量空间复杂度。\",\"Redis的实现结合了查表和SWAR算法，程序会根据未处理的二进制位数量来决定使用哪种算法：\",\"如果未处理的二进制位的数量 $>=128$ 位，那么程序使用variable-precision SWAR算法 \",\"每次循环中载入128个二进制位，然后调用四次32位 SWAR算法来计算这128位的汉明重量\",\"如果未处理的二进制位的数量 $<128$ 位，那么程序使用查表算法 \",\"查表使用键长为8位的表，表中记录了从 0000 0000 到 1111 1111 在内的所有二进制位数组的汉明重量\"]},\"977\":{\"h\":\"BITOP\",\"t\":[\"BITOP <op> <result> <x> <y> Redis基于C语言支持对字节执行逻辑与&、逻辑或|、逻辑异或^、逻辑非~等操作。计算时，按每字节处理存入结果result。\"]},\"978\":{\"h\":\"慢查询日志\",\"t\":[\"slowlog\",\"slowlog_log_slower_than: 慢查询的阈值\",\"slowlog_max_len: 保存上限\",\"所有慢查询日志保存至先进先出的redisServer/slowlog链表中\",\"链表使用头插法，结点最多即 slowlog_max_len 个\",\"链表的每个结点是 slowlogEntry 结构\",\"slowlogPushEntryIfNeeded 函数负责检查是否慢查询，以及加入链表\"]},\"979\":{\"h\":\"监视器\",\"t\":[\"MONITORS 命令可以让客户端成为一个监视器，实时接收并打印服务器当前处理的命令请求信息。\",\"成为监视器：MONITORS命令打开客户端的 REDIS_MONITOR 标识，并将客户端添加到 redisServer/monitors 链表末尾\",\"发送信息：服务器每次处理命令请求前，都会调用 replicationFeedMonitors 函数，封装信息，遍历 monitors 链表并发送\"]},\"980\":{\"c\":[\"缓存\"]},\"981\":{\"c\":[\"Redis\"]},\"982\":{\"h\":\"手撕算法\"},\"983\":{\"h\":\"数据结构\",\"t\":[\"[I]: 接口 [C]: 类 其中，Vector、Stack、HashTable线程安全，但已经基本不用了。\"]},\"984\":{\"h\":\"数组 - Array或ArrayList\",\"t\":[\"get和set操作时间上都是O(1)\",\"add和remove都是O(N)\",\"ArrayList添加元素不必考虑越界，超出容量时自动扩张\",\"Vector相比于ArrayList，实现了线程安全，但效率较低\"]},\"985\":{\"h\":\"链表 - LinkedList\",\"t\":[\"get和set操作时间上都是O(N)\",\"add和remove都是O(1)\",\"LinkedList<String> linkedList = new LinkedList<>(); linkedList.add(\\\"addd\\\");//add linkedList.set(0,\\\"s\\\"); //set，必须先保证 linkedList中已经有第0个元素 String s = linkedList.get(0);//get linkedList.contains(\\\"s\\\");//查找 linkedList.remove(\\\"s\\\");//删除 // 以上方法也适用于ArrayList\"]},\"986\":{\"h\":\"栈 - ArrayDeque\",\"t\":[\"Stack实现了后进先出，但继承自Vector，线程安全但效率低，因此不推荐使用\",\"ArrayDeque实现了Deque，可以作为栈（但仍可以违反栈的单端操作规则）\",\"Deque<Integer> stack = new ArrayDeque<Integer>(); stack.push(12);//尾部入栈 stack.push(16);//尾部入栈 int tail = stack.pop();//尾部出栈，并删除该元素 tail = stack.peek();//尾部出栈，不删除该元素\"]},\"987\":{\"h\":\"队列 - LinkedList\",\"t\":[\"LinkedList实现了Deque，可以作为双向/单向队列\",\"PriorityQueue实现了带优先级的队列\",\"Deque<Integer> deque = new LinkedList<>(); // 尾部入队，区别在于如果失败了，add方法会抛出一个IllegalStateException异常，而offer方法返回false deque.offer(122); deque.add(122); // 头部出队，区别在于如果失败了，remove方法抛出一个NoSuchElementException异常，而poll方法返回false int head = deque.poll();//删除第一个元素并返回 head = deque.remove(); //删除第一个元素并返回 // 头部出队，区别在于如果失败了，element方法抛出一个NoSuchElementException异常，而peek方法返回null。 head = deque.peek(); //返回第一个元素，不删除 head = deque.element(); //返回第一个元素，不删除\"]},\"988\":{\"h\":\"双端队列 - Deque\",\"t\":[\"ArrayDeque基于数组实现了双端队列\",\"LinkedList基于双向链表实现了双端队列\",\"另有两个线程安全的实现类：ConcurrentLinkedDeque, LinkedBlockingDeque\",\"Deque和Queue提供了两套API，一种抛出异常，另一种返回特殊值\",\"Deque中add(), offer()都是队尾加入元素，而push()队头加入元素。\",\"Deque中的peek(), element(), poll(), remove(), pop()都是从队头取元素。尽量不混用\",\"Deque额外提供了First、Last后缀的方法。 \",\"操作类型\",\"抛出异常\",\"返回特殊值\",\"插入\",\"add(e)\",\"offer(e)\",\"移除\",\"remove()\",\"poll()\",\"拾取\",\"element()\",\"peek()\"]},\"989\":{\"h\":\"快排\",\"t\":[\"LeetCode 912. 排序数组\",\"class Solution { private static Random rand = new Random(System.currentTimeMillis()); public int[] sortArray(int[] nums) { quickSort(nums, 0, nums.length - 1); return nums; } private void quickSort(int[] nums, int left, int right) { if(left >= right) return; int r = rand.nextInt(right - left + 1); swap(nums, left, left + r); int pivot = left; int lt = left, gt = right; while(true) { while(lt <= right && nums[lt] < nums[pivot]) lt++; while(gt >= left && nums[gt] > nums[pivot]) gt--; if(lt >= gt) break; swap(nums, lt++, gt--); } swap(nums, pivot, gt); quickSort(nums, left, gt - 1); quickSort(nums, gt + 1, right); } private void swap(int[] nums, int i, int j) { int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; } }\"]},\"990\":{\"h\":\"滑动窗口\",\"t\":[\"public void slidingWindow(string s) { Map<Character, Integer> window = new HashMap<>(); // 窗口左闭右开 [left, right) int left = 0, right = 0; while (right < s.length()) { // c 是将移入窗口的字符，同时增大窗口 char c = s.charAt(right++); // 进行窗口内数据的一系列更新 ... /*** debug 输出的位置 ***/ System.out.println(s.substring(left, right)); /***********************/ // 判断左侧窗口是否要收缩 while (window needs shrink) { // d 是将移出窗口的字符，同时缩小窗口 char d = s.charAt(left++); // 进行窗口内数据的一系列更新 ... } } }\"]},\"991\":{\"h\":\"KMP\",\"t\":[\"// 构建next数组 int[] next = new int[p.length]; next[0] = -1; int i = 0, j = -1; while (i < p.length - 1) { if (j == -1 || p[i] == p[j]) { ++i; ++j; next[i] = j; } else j = next[j]; } // 匹配 i = 0; j = 0; while (i < s.length && j < p.length) { if (j == -1 || s[i] == p[j]) { ++i; ++j; } else j = next[j]; } if (j == p.length) return i - j; else return -1;\"]},\"992\":{\"h\":\"动态规划\"},\"993\":{\"h\":\"最长回文子串\",\"t\":[\"LeetCode 5. 最长回文子串\",\"DP\",\"关键先遍历长度，再遍历左边界，确保dp[left + 1][right - 1]先被计算。\",\"class Solution { public String longestPalindrome(String s) { int n = s.length(); if(n < 2) return s; // s[i:j] is palindrome or not boolean[][] dp = new boolean[n][n]; for(int i = 0; i < n; i++) dp[i][i] = true; // enumerate length String ans = s.substring(0, 1); for(int len = 2; len <= n; len++) { // enumerate left bound for(int left = 0; left < n; left++) { int right = left + len - 1; if(right >= n) break; if(s.charAt(left) != s.charAt(right)){ dp[left][right] = false; } else { if(right - left < 3){ dp[left][right] = true; } else { dp[left][right] = dp[left + 1][right - 1]; } } // update ans if(dp[left][right] && right - left + 1 > ans.length()) { ans = s.substring(left, right + 1); } } } return ans; } }\",\"中心扩展\",\"关键在于奇偶分别扩展求最长。\",\"class Solution { public String longestPalindrome(String s) { int n = s.length(); String res = \\\"\\\"; for(int i = 0; i < n; i++) { String s1 = centerAround(s, i, i); String s2 = centerAround(s, i, i + 1); res = res.length() > s1.length() ? res : s1; res = res.length() > s2.length() ? res : s2; } return res; } private static String centerAround(String s, int left, int right) { while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) { left--; right++; } return s.substring(left + 1, right); } }\"]},\"994\":{\"h\":\"最长上升子序列 - DP\",\"t\":[\"public int lengthOfLIS(int[] nums) { if(nums.length == 0) return 0; // 以nums[i]结尾的最长上升子序列长度 int[] dp = new int[nums.length]; dp[0] = 1; int ans = 0; for (int i = 1; i < dp.length; i++) { dp[i] = 1; for (int j = 0; j < i; j++) if(nums[i] > nums[j]) dp[i] = Math.max(dp[i], dp[j] + 1); ans = Math.max(ans,dp[i]); } return ans; }\"]},\"995\":{\"h\":\"最长上升子序列 - 贪心+二分\",\"t\":[\"public int lengthOfLIS(int[] nums) { if(nums.length == 0) return 0; // 长度为k的最长上升子序列末尾元素的值,同等长度下应尽可能小 int[] tails = new int[nums.length]; int len = 0; for (int num : nums) { int left = 0, right = len; while(left < right) { int mid = (left + right) / 2; if(tails[mid] < num) left = mid + 1; else right = mid; } tails[left] = num; if(len == right) len++; } return len; }\"]},\"996\":{\"h\":\"最长公共子序列\",\"t\":[\"LeetCode 1143. 最长公共子序列\",\"S1[i] == S2[j]，则 $$ LCS(S1[0:i], S2[0:j]) = LCS(S1[0:i-1], S2[0:j-1])+1 $$\",\"S1[i] != S2[j]，则 $$ LCS(S1[0:i], S2[0:j]) = max\\\\left{ LCS(S1[0:i-1], S2[0:j]), LCS(S1[0:i], S2[0:j-1]) \\\\right} $$\",\"public int longestCommonSubsequence(String text1, String text2) { int m = text1.length(); int n = text2.length(); int[][] dp = new int[m + 1][n + 1]; for(int i = 1; i <= m; i++){ for(int j = 1; j <= n; j++) { if(text1.charAt(i - 1) == text2.charAt(j - 1)) dp[i][j] = dp[i-1][j-1] + 1; else dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]); } } // 附加：输出序列 StringBuilder sb = new StringBuilder(); for(int i = m; i >= 1; i--){ for(int j = n; j >= 1; j--) { if(dp[i][j] > dp[i-1][j] && dp[i][j] > dp[i][j-1]) sb.append(text1.charAt(i-1)); } } System.out.println(sb.reverse().toString()); return dp[m][n]; }\"]},\"997\":{\"h\":\"搜索\"},\"998\":{\"h\":\"二分查找\",\"t\":[\"二分查找中，关键在于注意 循环不变量 规则，看自己定义的 target 区间是[left, right] 还是 [left, right)，进而才能判断清楚结束条件到底是 left <= right 还是 left < right，修改区间时是 right = mid - 1 还是 right = mid。\",\"// 普通二分 int binary_search(int[] nums, int target) { int left = 0, right = nums.length - 1; while(left <= right) { int mid = left + (right - left) / 2; if (nums[mid] < target) { left = mid + 1; } else if (nums[mid] > target) { right = mid - 1; } else if(nums[mid] == target) { // 直接返回 return mid; } } // 直接返回 return -1; } // 搜索左边界 int left_bound(int[] nums, int target) { int left = 0, right = nums.length - 1; while (left <= right) { int mid = left + (right - left) / 2; if (nums[mid] < target) { left = mid + 1; } else if (nums[mid] > target) { right = mid - 1; } else if (nums[mid] == target) { // 别返回，锁定左侧边界 right = mid - 1; } } // 判断 target 是否存在于 nums 中 // 此时 target 比所有数都大，返回 -1 if (left == nums.length) return -1; // 判断一下 nums[left] 是不是 target return nums[left] == target ? left : -1; } // 搜索右边界 int right_bound(int[] nums, int target) { int left = 0, right = nums.length - 1; while (left <= right) { int mid = left + (right - left) / 2; if (nums[mid] < target) { left = mid + 1; } else if (nums[mid] > target) { right = mid - 1; } else if (nums[mid] == target) { // 别返回，锁定右侧边界 left = mid + 1; } } // 此时 left - 1 索引越界 if (left - 1 < 0) return -1; // 判断一下 nums[left] 是不是 target return nums[left - 1] == target ? (left - 1) : -1; }\"]},\"999\":{\"h\":\"二叉树\",\"t\":[\"二叉树的解题模式分两类：1.遍历一遍二叉树；2.定义递归分解问题。两类思想又分别对应回溯算法和动态规划。\",\"注：递归的时间复杂度 = 递归次数 * 单次执行时间\",\"前中后序是遍历二叉树过程中处理每一个节点的三个特殊时间点。三种遍历中，前序位置的代码只能从函数参数中获取父节点传递来的参数，而后序遍历代码不仅可以获取参数数据，还可以获取到子树通过函数返回值传递回来的数据。因此，对于涉及子树的问题，大概率要给函数设置合理的定义和返回值，在后序位置写巧妙的代码。\"]},\"1000\":{\"h\":\"DFS\",\"t\":[\"void dfs(TreeNode root) { // 判断 base case if (root == null) return; // 树型：访问两个相邻节点：左右子节点 dfs(root.left); dfs(root.right); // 网格型：访问上、下、左、右四个相邻结点 dfs(grid, r - 1, c); dfs(grid, r + 1, c); dfs(grid, r, c - 1); dfs(grid, r, c + 1); }\"]},\"1001\":{\"h\":\"BFS\",\"t\":[\"void bfs(TreeNode root) { Queue<TreeNode> queue = new ArrayDeque<>(); queue.add(root); while (!queue.isEmpty()) { // 分层/多源：队列长度即当前层结点个数 int n = queue.size(); for (int i = 0; i < n; i++) { TreeNode node = queue.poll(); // 将符合条件的扩展结点加入队列 if (node.left != null) queue.add(node.left); if (node.right != null) queue.add(node.right); } } }\",\"定义depth层数，并在入队前标记已访问，即可用于图BFS/多源BFS求最短路问题 (root即超级源点)\"]},\"1002\":{\"h\":\"LRU\",\"t\":[\"LeetCode 146. LRU 缓存\",\"class LRUCache { private class DLinkedNode { DLinkedNode prev, next; int key, val; DLinkedNode() {} DLinkedNode(int key, int val) { this.key = key; this.val = val; } } Map<Integer, DLinkedNode> cache; DLinkedNode head, tail; int capacity; public LRUCache(int capacity) { cache = new HashMap<>(); head = new DLinkedNode(); tail = new DLinkedNode(); head.next = tail; tail.prev = head; this.capacity = capacity; } public int get(int key) { DLinkedNode node = cache.get(key); if(node == null) return -1; moveToHead(node); return node.val; } public void put(int key, int value) { DLinkedNode node = cache.get(key); if(node != null) { node.val = value; moveToHead(node); } else { node = new DLinkedNode(key, value); cache.put(key, node); addToHead(node); if(cache.size() > capacity) { DLinkedNode removed = removeTail(); cache.remove(removed.key); } } } private void addToHead(DLinkedNode node) { node.prev = head; node.next = head.next; head.next.prev = node; head.next = node; } private void moveToHead(DLinkedNode node) { removeNode(node); addToHead(node); } private DLinkedNode removeTail() { DLinkedNode node = tail.prev; removeNode(node); return node; } private void removeNode(DLinkedNode node) { node.prev.next = node.next; node.next.prev = node.prev; } } /** * Your LRUCache object will be instantiated and called as such: * LRUCache obj = new LRUCache(capacity); * int param_1 = obj.get(key); * obj.put(key,value); */\"]},\"1003\":{\"c\":[\"算法\"]},\"1004\":{\"h\":\"手撸 Spring 项目\",\"t\":[\"项目地址：https://github.com/xchanper/MySpring\",\"参考文档：https://github.com/fuzhengwei/small-spring\",\"进度：\",\"✅ IoC\",\"✅ AOP\",\"✅ 其它\"]},\"1005\":{\"h\":\"IoC 部分\"},\"1006\":{\"h\":\"BeanFactory 类图\",\"t\":[\"完整版类图：\",\"DefaultListableBeanFactory\",\"简化版类图如下，主要间接继承 BeanFactory 和 SingletonBeanRegistry 两个接口。\",\"BeanFactory 主要负责注册 BeanDefinition \",\"里面有一个 Map 存储 BeanName 和 BeanDefinition 的映射关系\",\"BeanDefinition 内部存储了 Bean 的全限定类名\",\"SingletonBeanRegistry 主要负责存储单例 Bean 实例对象 \",\"里面有一个 Map 存储 BeanName 和 Bean 实例对象的映射\",\"当程序需要 getBean 的时候，从单例池中获取，没有就从 BeanFactory 中获得 BeanDefinition 后创建实例对象，放入单例池并返回\",\"而对于非单例的 Bean，每次都创建新实例对象，不放入单例池，直接返回\"]},\"1007\":{\"h\":\"策略设计模式\",\"t\":[\"在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。\"]},\"1008\":{\"h\":\"资源加载策略\",\"t\":[\"根据需要，项目提供了三种资源解析器，分别从 ClassPath、本地文件、云文件 三种资源加载 BeanDefinition。Resource 接口定义了 getInputStream() 方法来获得资源的输入流，ClassPathResource, FileSystemResource, UrlResource 三种资源类实现了该接口，进而可以从不同的位置获得资源配置的输入流。\",\"// ClassPathResource @Override public InputStream getInputStream() throws IOException { InputStream is = classLoader.getResourceAsStream(path); if (is == null) { throw new FileNotFoundException(this.path + \\\" cannot be opened because it does not exist\\\"); } return is; } // FileSystemResource @Override public InputStream getInputStream() throws IOException { return new FileInputStream(file); } // UrlResource @Override public InputStream getInputStream() throws IOException { URLConnection con = url.openConnection(); try { return con.getInputStream(); } catch (IOException ex) { if (con instanceof HttpURLConnection) ((HttpURLConnection) con).disconnect(); throw ex; } }\",\"获取资源后，可以根据资源的类型，通过不同的 BeanDefinitionReader 读取流。例如项目提供了 XmlBeanDefinitionReader 从 XML 文件中读取 BeanDefinition。相应的还可以自定义从 Json 资源的 BeanDefinitionReader 等等，这也是策略模式的一种应用。\"]},\"1009\":{\"h\":\"对象实例化策略\",\"t\":[\"在需要构造 Bean 实例对象时，通过实现 InstantiationStrategy 接口，提供了两种实例化方式：\",\"JDK 反射\",\"public class SimpleInstantiationStrategy implements InstantiationStrategy{ @Override public Object instantiate(BeanDefinition beanDefinition, String beanName, Constructor ctor, Object[] args) throws BeansException { Class clazz = beanDefinition.getBeanClass(); try { if(null != ctor) { return clazz.getDeclaredConstructor(ctor.getParameterTypes()).newInstance(args); } else { return clazz.getDeclaredConstructor().newInstance(); } } catch (InvocationTargetException | InstantiationException | IllegalAccessException | NoSuchMethodException e) { throw new BeansException(\\\"Failed to instantiate [\\\" + clazz.getName() + \\\"]\\\", e); } } }\",\"基于 ASM 字节码框架的 Cglib 动态创建\",\"public class CglibSubclassingInstantiationStrategy implements InstantiationStrategy{ @Override public Object instantiate(BeanDefinition beanDefinition, String beanName, Constructor ctor, Object[] args) throws BeansException { Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(beanDefinition.getBeanClass()); enhancer.setCallback(new NoOp() { @Override public int hashCode() { return super.hashCode(); } }); if(null == ctor) return enhancer.create(); return enhancer.create(ctor.getParameterTypes(), args); } }\",\"在 AbstractAutowireCapableBeanFactory 定义了具体的 实例化策略，可以根据需要注入不同的实现方式。\",\"private InstantiationStrategy instantiationStrategy = new SimpleInstantiationStrategy();\"]},\"1010\":{\"h\":\"FactoryBean\",\"t\":[\"FactoryBean 接口定义了三个方法，只要某个类实现了 FactoryBean 接口，那么 getBean 的时候返回的就是 getObject 方法返回的实例对象，而不是 FactoryBean 本身。\",\"BeanFactory 里面有一个 FactoryBeanObjectCache 的 Map 存储 FactoryBean 和 实际对象 的映射\",\"根据 FactoryBean 是否是单例，选择性放入 Map 中\",\"public interface FactoryBean<T> { T getObject() throws Exception; Class<?> getObjectType(); boolean isSingleton(); }\",\"例如 MyBatis 框架中，只要实现 Dao 层接口，MyBatis 就能自动加载代理对象，原理就是使用了 FactoryBean。\"]},\"1011\":{\"h\":\"ApplicationContext\",\"t\":[\"ApplicationContext 不仅组合 BeanFactory，具有加载 BeanDefinition 和 存储 Bean 的功能，还提供了很多额外的扩展，例如自动装载、后置处理器、Aware 接口、监听器等等。\",\"ApplicationContext结构\"]},\"1012\":{\"h\":\"Refresh 流程\",\"t\":[\"创建 ApplicationContex 时，首先传入 XML 类型的 ConfigLocations，用于后面的装载 Bean，然后就进入 refresh() 方法，应用上下文初始化的关键流程：\",\"refreshBeanFactory \",\"创建 DefaultListableBeanFactory\",\"loadBeanDefinitions 从配置文件中装载所有的 BeanDefinition \",\"此时仅注册了所有的 BeanDefinition，还没有实例化 Bean 对象\",\"这些 Bean 除了用户自定义的，还包括系统内置的各种处理器、监听器等等\",\"invokeBeanFactoryPostProcessor \",\"从 BeanFactory 获取所有 BeanFactoryPostProcessor 类型的 BeanDefinition 并实例化对应的 Bean\",\"根据不同的 BeanFactoryPostProcessor，对感兴趣的 BeanDefinition 做处理\",\"registerBeanPostProcessor \",\"从 BeanFactory 获取所有 BeanPostProcessor 类型的 BeanDefinition 并实例化对应的 Bean\",\"注意先创建的 Processor 可能修改后创建的 Processor\",\"InitApplicationEventMulticaster \",\"初始化事件发布器，内部有保存所有 ApplicationListener 的 Set 集合\",\"registerListeners \",\"实例化所有已经注册的 ApplicationListener，并放入 Multicaster 的监听器集合中\",\"preInstantiateSingletons \",\"实例化所有单例 Bean\",\"finishRefresh \",\"发布容器刷新完成事件\",\"publishEvent -> multicastEvent -> getListenersForEvent -> onApplicationEvent\",\"另外，getBean -> createBean 的时候，会调用 InitializeBean 执行 Bean 相应的 Aware 接口方法、初始化方法，以及注册销毁 Bean，即把定义了销毁方法的 Bean 放入 DisposableBeans 的 Map 中。\"]},\"1013\":{\"h\":\"AOP 部分\"},\"1014\":{\"h\":\"动态代理\",\"t\":[\"静态代理需要手动对目标方法进行增强，在编译阶段就已经生成实际的 class 文件。而动态代理则是在运行时动态生成类的字节码，并加载到 JVM 中，更加灵活方便。Java 中的动态代理分两类：\",\"JDK 动态代理： \",\"基于反射实现，性能较低\",\"通过实现和目标一样的接口实现代理\",\"只能代理实现了接口的对象\",\"CGLIB 动态代理： \",\"基于 ASM 字节码生成库\",\"通过继承目标类实现代理，代理类是目标的子类\",\"可以代理任何对象\",\"使用空间换时间的思想对最终的方法调用进行优化，提升了性能\",\"动态代理原理对比\"]},\"1015\":{\"h\":\"JDK 动态代理\",\"t\":[\"现在假设我们有 IService、ServiceImpl、MyInvocationHandler 三个类，ServiceImpl 实现了 IService 接口。\",\"interface IService { void hello(); } class ServiceImpl implements IService { @Override public void hello() { System.out.println(\\\"Hello\\\"); } } class MyInvocationHandler implements InvocationHandler { private Object target; public MyInvocationHandler(Object target) { this.target = target; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\\"你被代理了！\\\"); return method.invoke(target, args); } }\",\"然后在 main 方法里创建代理对象，并执行 hello() 方法:\",\"public static void main(String[] args) { // 通过 ProxyGenerator 将生成的代理类字节码输出到 class 文件中保存 System.getProperties().put(\\\"jdk.proxy.ProxyGenerator.saveGeneratedFiles\\\", \\\"true\\\"); // 实例化目标对象 IService service = new ServiceImpl(); // 反射生成代理类的实例（类加载器、接口列表、自定义 InvocationHandler） IService proxy = (IService) Proxy.newProxyInstance( service.getClass().getClassLoader(), service.getClass().getInterfaces(), new MyInvocationHandler(service)); // 在 InvocationHandler 中存储目标的引用 proxy.hello(); }\",\"注：JDK 8 之前是sun.misc.ProxyGenerator.saveGeneratedFiles属性，JDK 8之后是jdk.proxy.ProxyGenerator.saveGeneratedFiles属性，且放在 JUnit 测试方法里面无效。\",\"然后打开生成的代理类 Class 文件：\",\"final class $Proxy0 extends Proxy implements IService { private static final Method m0; private static final Method m1; private static final Method m2; private static final Method m3; public $Proxy0(InvocationHandler var1) { super(var1); } public final int hashCode() { ... } public final boolean equals(Object var1) { ... } public final String toString() { ... } public final void hello() { try { super.h.invoke(this, m3, (Object[])null); } catch (RuntimeException | Error var2) { throw var2; } catch (Throwable var3) { throw new UndeclaredThrowableException(var3); } } static { try { m0 = Class.forName(\\\"java.lang.Object\\\").getMethod(\\\"hashCode\\\"); m1 = Class.forName(\\\"java.lang.Object\\\").getMethod(\\\"equals\\\", Class.forName(\\\"java.lang.Object\\\")); m2 = Class.forName(\\\"java.lang.Object\\\").getMethod(\\\"toString\\\"); m3 = Class.forName(\\\"Proxy.IService\\\").getMethod(\\\"hello\\\"); } catch (NoSuchMethodException var2) { throw new NoSuchMethodError(var2.getMessage()); } catch (ClassNotFoundException var3) { throw new NoClassDefFoundError(var3.getMessage()); } } private static MethodHandles.Lookup proxyClassLookup(MethodHandles.Lookup var0) throws IllegalAccessException { if (var0.lookupClass() == Proxy.class && var0.hasFullPrivilegeAccess()) { return MethodHandles.lookup(); } else { throw new IllegalAccessException(var0.toString()); } } }\",\"除了 IService 定义的 hello() 方法，代理类还代理了属于 Object 的 toString(), hashCode(), equals() 三个方法。由此我们可以发现代理的本质：\",\"代理类继承自 Proxy，且实现了目标的接口\",\"Proxy 类里面的 h 域存储了自定义的 InvocationHandler（构造器注入）\",\"InvocationHandler 里面保存了代理的目标对象\",\"调用顺序：proxy::hello() -> InvocationHandler::invoke() -> 增强逻辑 -> method.invoke(target)\"]},\"1016\":{\"h\":\"CGLIB 动态代理\",\"t\":[\"还是上面的 IService 和 ServiceImpl 两个类，这次使用 CGLIB 做代理：\",\"public static void main(String[] args) { // 将 CGLIB 动态代理类的字节码写入磁盘 System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, \\\"D:\\\\\\\\\\\"); Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(ServiceImpl.class); enhancer.setCallback(new MethodInterceptor() { @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable { System.out.println(\\\"intercept --- before invoke method\\\"); Object result = methodProxy.invokeSuper(o, args); // 执行父类对应的方法 System.out.println(\\\"intercept --- after invoke method\\\"); return result; } }); IService proxy = (IService) enhancer.create(); proxy.hello(); }\",\"然后查看生成的字节码文件(略去无关内容)：\",\"public class ServiceImpl$$EnhancerByCGLIB$$27e8234e extends ServiceImpl implements Factory { private static final Callback[] CGLIB$STATIC_CALLBACKS; private MethodInterceptor CGLIB$CALLBACK_0; private static final Method CGLIB$hello$0$Method; private static final MethodProxy CGLIB$hello$0$Proxy; // 即传给 MethodInterceptor::invoke 里面的 MethodProxy final void CGLIB$hello$0() { super.hello(); } public final void hello() { MethodInterceptor var10000 = this.CGLIB$CALLBACK_0; if (var10000 == null) { CGLIB$BIND_CALLBACKS(this); var10000 = this.CGLIB$CALLBACK_0; } if (var10000 != null) { var10000.intercept(this, CGLIB$hello$0$Method, CGLIB$emptyArgs, CGLIB$hello$0$Proxy); } else { super.hello(); } } static void CGLIB$STATICHOOK1() { Class var0 = Class.forName(\\\"com.chanper.myspring.test.ServiceImpl$$EnhancerByCGLIB$$27e8234e\\\"); Class var1; CGLIB$hello$0$Method = ReflectUtils.findMethods(new String[]{\\\"hello\\\", \\\"()V\\\"}, (var1 = Class.forName(\\\"com.chanper.myspring.test.ServiceImpl\\\")).getDeclaredMethods())[0]; CGLIB$hello$0$Proxy = MethodProxy.create(var1, var0, \\\"()V\\\", \\\"hello\\\", \\\"CGLIB$hello$0\\\"); } public ServiceImpl$$EnhancerByCGLIB$$27e8234e() { CGLIB$BIND_CALLBACKS(this); } static { CGLIB$STATICHOOK1(); } }\",\"CGLIB 生成的代理类继承了通过 Enhancer 传入的 ServiceImpl 代理目标类\",\"默认代理了除 final 以外的所有方法\",\"调用顺序：proxy::hello() -> MethodInterceptor::intercept() -> 增强逻辑 -> MethodProxy::invokeSuper(target, args) -> method::invoke(target)\"]},\"1017\":{\"h\":\"AOP 实现\"},\"1018\":{\"h\":\"Pointcut\",\"t\":[\"切点接口，定义获取两个类的方法 \",\"ClassFilter 定义 match() 类匹配\",\"MethodMatcher 定义 match() 方法匹配\",\"基于 AspectJ 构建实现类 AspectJExpressionPointcut，支持特定 PointcutPrimitive 的 PointcutExpression\"]},\"1019\":{\"h\":\"AdvisedSupport\",\"t\":[\"把代理、拦截、匹配封装在一起，方便使用\",\"TargetSource 封装 Object 是实际的代理目标对象\",\"MethodInterceptor::invoke 自定义的方法拦截器，负责在 MethodInvocation::proceed 放行前后执行增强逻辑\",\"MethodMatcher::matches 方法匹配器（即 AspectJExpressionPointcut）\"]},\"1020\":{\"h\":\"ProxyFactory\",\"t\":[\"AopProxy 的工厂，封装 AdvisedSupport，然后根据配置选择某一种方式创建动态代理。例如:\"]},\"1021\":{\"h\":\"JdkDynamicAopProxy\",\"t\":[\"基于 JDK 的 AOP 动态代理实现类\",\"实现 InvocationHandler::invoke 接口方法，逻辑如下： \",\"getProxy 获取代理对象\",\"本身实现了 InvocationHandler::invoke，自己做方法匹配\",\"自定义的 MethodInterceptor::invoke\",\"前置增强\",\"MethodInvocation::proceed 放行\",\"Method::invoke(target) 执行目标对象本体方法\",\"后置增强\"]},\"1022\":{\"h\":\"Cglib2AopProxy\",\"t\":[\"主要是执行 Enhancer::setCallback 定义的逻辑： \",\"DynamicAdvisedInterceptor::intercept 方法匹配\",\"自定义的 MethodInterceptor::invoke\",\"前置增强\",\"MethodInvocation::proceed 放行\",\"MethodProxy::invokeSuper(target, args) -> Method::invoke(target) 执行目标对象本体方法\",\"后置增强\"]},\"1023\":{\"h\":\"MySpring 整合 AOP\",\"t\":[\"AbstractAutowireCapableBeanFactory::createBean 时，添加 resolveBeforeInstantiation()，基于容器中所有的 InstantiationAwareBeanPostProcessor::postProcessBeforeInstantiation 决定是否对当前要构造的 Bean 进行代理。\",\"DefaultAdvisorAutoProxyCreator 默认的代理创建器，基于容器中的 AspectJExpressionPointcutAdvisor 对当前要创建的 Bean 作匹配，然后通过 ProxyFactory 选择基于 JDK/CGLIB 创建实际的代理对象作为 Bean 返回，最终加入到容器中。\",\"AspectJExpressionPointcutAdvisor 整合了切面 pointcut、拦截方法 advice、表达式 expression。\"]},\"1024\":{\"h\":\"注解扫描\",\"t\":[\"主要是在解析 spring.xml 文件时，加入读取 component-scan 标签的逻辑，通过 ClassPathBeanDefinitionScanner 扫描 base-package 下的所有 @Component 注解，注册到 BeanDefinitionRegistry。\"]},\"1025\":{\"h\":\"注解注入\",\"t\":[\"定义@Autowired、@Value两个注解，然后在 createBean 的逻辑中，调用 AutowiredAnnotationBeanPostProcessor::postProcessPropertyValues 解析类属性域上标注的注解，修改 Bean域。\",\"与此同时，会根据配置文件，调用 AbstractBeanFactory::embeddedValueResolvers 对 value 中的占位符做值替换。\"]},\"1026\":{\"h\":\"PropertyPlaceholderConfigurer\",\"t\":[\"具体的值替换类，实现了 BeanPostProcessor，通过读取外部的属性配置文件，对 PropertyValues 中字符串属性值的占位符进行替换，实现配置分离。\",\"相关信息\",\"Spring 组件注册的方式：\",\"@Bean 分普通 Bean、FactoryBean\",\"@ComponentScan 扫描指定包，并根据 Filter 过滤\",\"@Import 导入指定类\",\"ImportSelector 接口可以一次性导入多个组件\",\"ImportBeanDefinitionRegistrar 接口可以手动注册组件\"]},\"1027\":{\"h\":\"其它\"},\"1028\":{\"h\":\"三级缓存解决循环依赖\",\"t\":[\"Spring 框架设计解决循环依赖需要用到三个Map：\",\"// 一级缓存，存放成品对象 private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(); // 二级缓存，存放未填充属性的半成品对象 protected final Map<String, Object> earlySingletonObjects = new HashMap<>(); // 三级缓存，存放代理对象 private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>();\",\"理论上，一级缓存就可以解决循环依赖，但处理流程无法拆分，复杂度会增加，同时半成品对象可能会有 NPE，通过二级缓存将成品对象和半成品对象分开，处理起来更加优雅、简单、易扩展。而三级缓存的作用是处理 AOP 的代理对象，因为 Spring 设计上倾向于先初始化所有普通 Bean，等后续获取对象时再处理代理对象。\",\"因此加入三级缓存后的获取单例 Bean 方法如下：\",\"public Object getSingleton(String beanName) { Object singletonObject = singletonObjects.get(beanName); if (singletonObject == null) { // 没有就到二级缓存中取 singletonObject = earlySingletonObjects.get(beanName); if (singletonObject == null) { // 二级还没有去三级缓存找 // 只有代理对象才会放到三级缓存 ObjectFactory<?> singletonFactory = singletonFactories.get(beanName); if (singletonFactory != null) { singletonObject = singletonFactory.getObject(); //把三级缓存中代理工厂的真实对象取出来放入二级缓存 earlySingletonObjects.put(beanName, singletonObject); singletonFactories.remove(beanName); } } } return singletonObject; }\",\"单例 Bean 在实例化后立刻放入三级缓存（非代理 Bean 是一个假工厂直接返回该对象）\",\"当其他 Bean 依赖此 Bean 时从三级缓存中移除，取出真实对象放入二级缓存提前暴露出来。\",\"当对象完全创建完成后，调用 registerSingleton 放入一级缓存，同时移除二级和三级缓存中的对象。\"]},\"1029\":{\"c\":[\"Java\"]},\"1030\":{\"h\":\"Spring 事务\"},\"1031\":{\"h\":\"事务基础\",\"t\":[\"事务是逻辑上的一组操作，要么都执行，要么都不执行。典型场景是一个方法中包含多个insert，update，delete操作通过添加事务保证原子性，要么全部成功，要么全部失败。比如在往数据库里添加数据时，需要级联得添加若干数据，或者删除的时候级联得删除若干数据，都需要用事务的方式实现原子性操作；再比如针对多个表的查询统计，可以通过添加事务控制将统计时间拉奇到同一时间节点，保证数据的一致性。\"]},\"1032\":{\"h\":\"四大特性 - ACID\",\"t\":[\"原子性（Atomicity）：一个事务中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。\",\"一致性（Consistency）：在事务开始之前和结束以后，数据库的完整性没有被破坏，符合所有的预设约束、触发器、级联回滚等。\",\"隔离性（Isolation）：数据库允许多个并发事务同时对数据进行读写，并且彼此之间互不干扰。\",\"持久性（Durability）：一个事务被提交后，对数据库的修改就是永久的，即便系统故障也不会丢失。\"]},\"1033\":{\"h\":\"SQL 事务语句\",\"t\":[\"-- 开启事务 begin start transaction set autocommit = 0 -- 回滚 rollback -- 提交 commit\",\"注：Spring 的事务归根到底还是执行了底层数据库的事务相关语句，因此使用Spring管理事务的前提是底层数据库支持事务。另外 MySQL 默认对每条单独的 SQL 语句都开启了事务。\"]},\"1034\":{\"h\":\"MySQL 实现事务\",\"t\":[\"果想要保证事务的原子性，就需要在异常发生时，对已经执行的操作进行回滚，在 MySQL 中，事务回滚机制是通过**回滚日志（undo log）**实现的，所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，直接利用回滚日志中的信息将数据回滚到修改之前的状态，并且回滚日志会先于数据持久化到磁盘上。这样就保证了即使遇到数据库突然宕机等情况，当用户再次启动数据库的时候，数据库还能够通过查询回滚日志来恢复之前未完成的事务。\"]},\"1035\":{\"h\":\"隔离级别\",\"t\":[\"Read_Uncommited: 读未提交，允许读取并发事务尚未提交的数据。可能产生脏读、不可重复读、幻读等问题\",\"Read_Commited: 读已提交，允许读取并发事务已经提交的数据。可以阻止脏读\",\"Repeatable_Read: 可重复读（默认），对同一字段的多次读取结果都一致。可以阻止脏读、不可重复读问题\",\"Serializable: 可串行化，所有事务依次执行。可以阻止所有并发问题。\",\"MySQL 默认采用的 REPEATABLE_READ 隔离级别，Oracle 默认采用的 READ_COMMITTED 隔离级别.\"]},\"1036\":{\"h\":\"Spring 事务使用方法\",\"t\":[\"Spring 事务依赖集中在 spring-tx 这个jar包，通常的 ORM 框架都会直接引用 spring-tx，例如 mybatis-spring-boot-starter\"]},\"1037\":{\"h\":\"编程式\",\"t\":[\"即手动开启、提交、回滚事务\"]},\"1038\":{\"h\":\"TransactionManager\",\"t\":[\"注入一个 TransactionManger 事务管理器\",\"调用 getTransaction() 方法，传入一个 TransactionDefinition（事务配置），就可以得到一个 TransactionStatus，里面封装了一个具体的事务对象（数据源+数据库连接+状态信息）。\",\"然后借助 TransactionManger 就可以对这个具体的事务进行回滚、提交等等操作。\",\"@Autowired private PlatformTransactionManager transactionManager; @Test public void testTransactionManager() { // 事务配置 DefaultTransactionDefinition transactionDefinition = new DefaultTransactionDefinition(); transactionDefinition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED); transactionDefinition.setIsolationLevel(TransactionDefinition.ISOLATION_REPEATABLE_READ); // 创建事务 TransactionStatus status = transactionManager.getTransaction(transactionDefinition); try { // 执行业务方法 } catch (Exception e) { // 手动回滚 transactionManager.rollback(status); throw e; } // 提交事务 transactionManager.commit(status); }\"]},\"1039\":{\"h\":\"TransactionTemplate\",\"t\":[\"spring-tx 还提供了一个更高级的封装 —— TransactionTemplate，提供了 execute 模版方法，开发人员只需要关注具体的业务逻辑和需要回滚的情况即可。\",\"@Autowired TransactionTemplate transactionTemplate; @Test public void testTransactionTemplate() { // 手动设置事务配置 transactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED); transactionTemplate.setIsolationLevel(TransactionDefinition.ISOLATION_DEFAULT); transactionTemplate.execute(new TransactionCallbackWithoutResult() { @Override protected void doInTransactionWithoutResult(TransactionStatus status) { // 业务代码 ... } }); } // 有返回值 public interface TransactionCallback<T> { @Nullable T doInTransaction(TransactionStatus status); } // 没有返回值 public abstract class TransactionCallbackWithoutResult implements TransactionCallback<Object> { public TransactionCallbackWithoutResult() { } @Nullable public final Object doInTransaction(TransactionStatus status) { this.doInTransactionWithoutResult(status); return null; } protected abstract void doInTransactionWithoutResult(TransactionStatus status); }\"]},\"1040\":{\"h\":\"声明式\",\"t\":[\"编程式事务使用起来会比较麻烦，需要自动控制事务的不同阶段。而声明式事务管理只需要在代码中添加 @Transactional 注解，即可交由 Spring 自动进行事务管理，使用方便，代码简洁，是实际开发中的首选。\",\"主启动类上 @EnableTransactionManagement 开启事务管理\",\"需要开启事务的方法上加上 @Transactional 注解和需要的配置\",\"@Transactional( propagation = Propagation.REQUIRED, //传播模式 isolation = Isolation.DEFAULT, //隔离级别 timeout = -1, //超时时间 readOnly = false, //是否仅只读 rollbackFor = BizException.class //回滚规则 ) public void bizFunction() { // .... 业务代码 }\"]},\"1041\":{\"h\":\"传播行为\",\"t\":[\"事务传播类型，指的是事务与事务之间的交互策略。比如在事务方法 A 中调用事务方法 B，方法B的事务策略如何处理？Spring 事务管理中定义了 7 种事务传播行为：\",\"Propagtion\",\"外部有事务\",\"外部无事务\",\"REQUIRED\",\"加入该事务\",\"创建新事务\",\"REQUIRES_NEW\",\"挂起当前事务，然后创建新事务\",\"创建新事务\",\"NESTED\",\"子方法加入到嵌套事务中执行\",\"创建新事务\",\"MANDATORY\",\"加入该事务\",\"抛出异常\",\"SUPPORTS\",\"加入该事务\",\"以非事务方式运行\",\"NOT_SUPPORTED\",\"挂起当前事务，然后以非事务运行\",\"以非事务方式运行\",\"NEVER\",\"抛出异常\",\"以非事务方式运行\",\"注：Required 和 Nested 区别在于，Required 加入外部事务是同层级的同一个事务，只要发生异常整个事务回滚；而 Nested 是在内部设置一个 savepoint 后开启一个子事务，和外部事务是父子关系，因此可以基于 savepoint 实现部分回滚的功能，即内部业务回滚，外部业务不回滚。。\"]},\"1042\":{\"h\":\"Spring 事务管理接口\",\"t\":[\"TransactionDefinition：事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)。\",\"TransactionStatus：事务运行状态，还封装了一个实际的事务对象。\",\"TransactionManager：事务管理器，Spring 事务策略的核心管理器。\",\"我们可以把 PlatformTransactionManager 接口可以被看作是事务上层的管理者，而 TransactionDefinition 和 TransactionStatus 这两个接口可以看作是事务的描述。PlatformTransactionManager 会根据 TransactionDefinition 的定义，比如事务超时时间、隔离级别、传播行为等来进行事务管理 ，而 TransactionStatus 接口则提供了一些方法来获取事务相应的状态，比如是否新事务、是否可以回滚等等。\"]},\"1043\":{\"h\":\"TransactionDefinition\",\"t\":[\"TransactionDefinition 定义了事务的配置，包括传播行为、隔离级别、事务超时等等。我们通常用的是它的一个实现类 DefaultTransactionDefinition，里面新增了是否只读的属性，以及一些默认值的设置。\",\"TransactionDefinition\"]},\"1044\":{\"h\":\"TransactionStatus\",\"t\":[\"TransactionStatus 接口用来记录事务的状态，Spring事务管理器可以通过 TransactionStatus 对象来判断事务的状态，用来决定是否进行提交事务、回滚事务或者其他操作。需要注意的是，TransactionStatus表示的是逻辑事务的状态，即使它的 isNewTransaction() 返回值是true，但实际上数据库可能还没有创建物理事务。\",\"public interface TransactionStatus{ boolean isNewTransaction(); // 是否是新的事务（Java层面的逻辑抽象） boolean hasSavepoint(); // 是否有保存点（嵌套事务） boolean isRollbackOnly(); // 是否为需要回滚 boolean isCompleted; // 是否已完成 }\",\"通常我们使用的也是它的实现类 DefaultTransactionStatus，跟上面 DefaultTransactionDefinition 类似，新增了只读状态的判断。除此之外，还有两个新增的成员：\",\"suspendedResource：保存暂停的事务资源（Requires_New、Not_Supported）\",\"transaction：数据库事务的抽象对象，里面封装了实际的数据库连接 所以事务状态虽然名字叫 Status，但其实就可以把这个状态理解成一个具体的事务对象，同时对外暴露了一些事务的状态信息。\",\"TransactionStatus\"]},\"1045\":{\"h\":\"TransactionSynchronizationManager\",\"t\":[\"TransactionSynchronizationManager 贯穿了事务管理的整个流程，它有两个功能：\",\"绑定线程事务 由于 JDBC 的 Connection 不是线程安全的，而事务操作必须使用同一个 Connection 对象进行操作，因此 Spring 通过 TransactionSynchronizationManager 这个事务同步管理器，基于 ThreadLocal 将 Connection 对象和线程绑定，保存当前线程的事务资源、事务名称、事务隔离级别等信息，来为不同的事务线程提供独立的资源副本（开启事务绑定，挂起/关闭事务解绑）\",\"事务回调 TransactionSynchronizationManager可以对当前线程的事务添加TransactionSynchronization回调，可以对事务管理的一些时间节点进行增强，如 beforeCommit/afterCommit/beforeCompletion/afterCompletion\",\"public abstract class TransactionSynchronizationManager { // 当前线程开启状态的所有数据库连接 Map // key是DataSource数据源对象 // value是数据库连接ConnectionHolder private static final ThreadLocal<Map<Object, Object>> resources = new NamedThreadLocal<>(\\\"Transactional resources\\\"); // 事务同步器集合，可扩展的接口，定义了若干不同事物阶段的回调 private static final ThreadLocal<Set<TransactionSynchronization>> synchronizations = new NamedThreadLocal<>(\\\"Transaction synchronizations\\\"); }\"]},\"1046\":{\"h\":\"TransactionManager\"},\"1047\":{\"h\":\"PlatformTransactionManager\",\"t\":[\"Spring 并不直接管理事务，而是提供了多种事务管理器。Spring 事务管理器的接口是：PlatformTransactionManager，继承自 TransactionManager 这个空的标记接口，其中定义了获取事务、提交事务、回滚事务3个基础方法。\",\"public interface PlatformTransactionManager extends TransactionManager { //获得事务 TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException; //提交事务 void commit(TransactionStatus status) throws TransactionException; //回滚事务 void rollback(TransactionStatus status) throws TransactionException; }\",\"TransactionManager\"]},\"1048\":{\"h\":\"AbstractPlatformTransactionManager\",\"t\":[\"下面有一层抽象类 AbstractPlatformTransactionManager 实现了上述的3个基础方法，定义了Spring事务管理的工作流，但是具体功能实际上仍然是交给针对不同数据库的事务管理器的实现类去完成（模板方法）。\"]},\"1049\":{\"h\":\"开启事务\",\"t\":[\"根据事务传播行为进行对应处理，开启事务，获得一个封装事务对象的事务状态。\",\"@Override public final TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException { // 是否使用默认事务配置 TransactionDefinition def = (definition != null ? definition : TransactionDefinition.withDefaults()); // 1. 获取当前线程绑定的事务，具体实现交给实现类 Object transaction = doGetTransaction(); boolean debugEnabled = logger.isDebugEnabled(); // 2. 当前线程已存在事务，处理已有事务 if (isExistingTransaction(transaction)) { return handleExistingTransaction(def, transaction, debugEnabled); } // 3. 当前不存在事务，根据事物传播行为分别处理 // 3.1 Mandatory 抛异常 if (def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) { throw new IllegalTransactionStateException( \\\"No existing transaction found for transaction marked with propagation 'mandatory'\\\"); } // 3.2 Required/Requires_New/Nested 新建事务 else if (def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED || def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW || def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) { // 暂停外层事物 SuspendedResourcesHolder suspendedResources = suspend(null); if (debugEnabled) { logger.debug(\\\"Creating new transaction with name [\\\" + def.getName() + \\\"]: \\\" + def); } try { // 开启新事务 return startTransaction(def, transaction, debugEnabled, suspendedResources); } catch (RuntimeException | Error ex) { resume(null, suspendedResources); throw ex; } } // 3.3. 其它事务模式：创建携带空事务的事务状态 else { if (def.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT && logger.isWarnEnabled()) { logger.warn(\\\"Custom isolation level specified but no actual transaction initiated; \\\" + \\\"isolation level will effectively be ignored: \\\" + def); } boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS); return prepareTransactionStatus(def, null, true, newSynchronization, debugEnabled, null); } }\",\"如果当前线程不存在事务，那么继续在 getTransaction() 方法里根据不同的事务传播模式进行处理：\",\"Mandatory：会抛出异常\",\"Required/Requires_New/Nested：会创建一个新事务\",\"Supports/Not_Supported/Never：返回一个携带空事务的事务状态，实际上不会创建新事务\",\"如果当前线程已经存在事务了，那么进入 handleExistingTransaction() 方法根据不同的事务传播行为进行不同的处理流程：\",\"内层事务-Never：会抛出异常。\",\"内层事务-Not_Supported：会暂停外层事务（status-suspendedResource），开启新的空事物并返回（以非事务方式运行）\",\"内层事务-Requires_New：会暂停外层事务（status-suspendedResource），开启新事物并返回\",\"如果内层-Nested： \",\"判断数据库是否支持嵌套事务，如果不支持，抛出异常；\",\"如果支持，再判断是否支持保存点方式的嵌套事务， \",\"如果支持（数据源），创建保存点，然后开启嵌套事务并返回\",\"如果不支持（JTA），通过嵌套begin/commit/rollback语句的方式创建嵌套事务并返回\",\"如果内层-Supports/Required/Mandatory：如果内层方法的事务隔离级别是ISOLATION_DEFAULT，并且外层方法的事务隔离级别与内层方法不一致，会抛出异常。如果内层方法不是只读，但外层方法是只读，会抛出异常。由于当前已存在事务，所以不用其他特殊处理。\"]},\"1050\":{\"h\":\"事务提交\",\"t\":[\"commit()方法定义了提交事务/回滚事务的工作流：\",\"@Override public final void commit(TransactionStatus status) throws TransactionException { // 1. 校验事务当前状态 if (status.isCompleted()) { throw new IllegalTransactionStateException( \\\"Transaction is already completed - do not call commit or rollback more than once per transaction\\\"); } DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status; // 2. 根据rollbackOnly状态决定是否回滚 if (defStatus.isLocalRollbackOnly()) { if (defStatus.isDebug()) { logger.debug(\\\"Transactional code has requested rollback\\\"); } processRollback(defStatus, false); return; } // 根据内部事务是否有异常决定是否回滚 if (!shouldCommitOnGlobalRollbackOnly() && defStatus.isGlobalRollbackOnly()) { if (defStatus.isDebug()) { logger.debug(\\\"Global transaction is marked as rollback-only but transactional code requested commit\\\"); } processRollback(defStatus, true); return; } // 3. 提交事务 processCommit(defStatus); }\",\"在 processCommit 里面：\",\"如果是Nested嵌套事务，释放保存点\",\"如果是独立的新事务，执行commit\",\"否则的话，说明是外部事务的一部分，暂不执行提交，只是执行一些 TransactionSynchronization 回调工作\",\"最后，执行一些状态修改和资源释放，而如果当前事务的外部还存在挂起的事务，那么会恢复挂起的事务。\"]},\"1051\":{\"h\":\"事务回滚\",\"t\":[\"@Override public final void rollback(TransactionStatus status) throws TransactionException { if (status.isCompleted()) { throw new IllegalTransactionStateException( \\\"Transaction is already completed - do not call commit or rollback more than once per transaction\\\"); } DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status; processRollback(defStatus, false); }\",\"在 processRollback 里面：\",\"如果是Nested嵌套事务，回滚到保存点\",\"如果是独立的新事务，执行rollback\",\"否则的话，说明外部还有事务，并且这时内部出现异常需要回滚了，所以这时会将数据库连接对象的 rollbackOnly 设为 true，然后执行一些 TransactionSynchronization 回调工作\",\"同样最后，执行一些状态修改和资源释放，而如果当前事务的外部已经存在挂起的事务，那么会恢复挂起的事务。\"]},\"1052\":{\"h\":\"DataSourceTransactionManager\",\"t\":[\"DataSourceTransactionManager 是日常开发中使用的事务管理器，内部有一个 DataSource 对象，基于某个数据源定义具体的数据库事务操作。它的子类 JDBCTransactionManager 在它的基础上加了一些JDBC相关的异常处理。\"]},\"1053\":{\"h\":\"SpringTemplate 原理\",\"t\":[\"SpringTemplate 的使用基于 SpringBoot 的自动配置机制。\"]},\"1054\":{\"h\":\"容器注入\",\"t\":[\"spring-boot-autoconfigure 是 SpringBoot 的核心，引入了很多基础的自动配置类，在 DataSourceTransactionManagerAutoConfiguration 里会注入 transactionManager 的 Bean 对象。\",\"@Bean @ConditionalOnMissingBean(TransactionManager.class) DataSourceTransactionManager transactionManager(Environment environment, DataSource dataSource, ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) { DataSourceTransactionManager transactionManager = createTransactionManager(environment, dataSource); transactionManagerCustomizers.ifAvailable((customizers) -> customizers.customize(transactionManager)); return transactionManager; } private DataSourceTransactionManager createTransactionManager(Environment environment, DataSource dataSource) { return (DataSourceTransactionManager)((Boolean)environment.getProperty(\\\"spring.dao.exceptiontranslation.enabled\\\", Boolean.class, Boolean.TRUE) ? new JdbcTransactionManager(dataSource) : new DataSourceTransactionManager(dataSource)); }\",\"在 TransactionAutoConfiguration 里会注入 transactionTemplate 的 bean 对象：\",\"@Bean @ConditionalOnMissingBean(TransactionOperations.class) public TransactionTemplate transactionTemplate(PlatformTransactionManager transactionManager) { return new TransactionTemplate(transactionManager); }\"]},\"1055\":{\"h\":\"事务管理流程\",\"t\":[\"从类的层级结构上，发现 TransactionTemplate 不仅封装了一个 TransactionManager，还继承了 TransactionDefinition，也就是说 TransactionTemplate 组合了事务管理器和事务配置的功能。\",\"TransactionTemplate\",\"TransactionTemplate 进行自动事务管理的核心在于 execute()，其内部会调用 transactionManager 进行获取事务、提交事务和回滚事务，获取事务的时候是把自己传进 TransactionManager。后续的流程就是基于上面介绍的 TransactionManager 的那一套机制了。\",\"public <T> T execute(TransactionCallback<T> action) throws TransactionException { Assert.state(this.transactionManager != null, \\\"No PlatformTransactionManager set\\\"); if (this.transactionManager instanceof CallbackPreferringPlatformTransactionManager) { // WebSphereUowTransactionManager事务管理流程 return ((CallbackPreferringPlatformTransactionManager) this.transactionManager).execute(this, action); } else { // 获取事务 TransactionStatus status = this.transactionManager.getTransaction(this); T result; try { // 执行业务方法 result = action.doInTransaction(status); } // 回滚事务 catch (RuntimeException | Error ex) { rollbackOnException(status, ex); throw ex; } catch (Throwable ex) { // Transactional code threw unexpected exception -> rollback rollbackOnException(status, ex); throw new UndeclaredThrowableException(ex, \\\"TransactionCallback threw undeclared checked exception\\\"); } // 提交事务 this.transactionManager.commit(status); return result; } }\"]},\"1056\":{\"h\":\"@Transactional 原理\",\"t\":[\"编程式事务的使用主要就是两步：开启 @EnableTransactionManagement 事务管理和 添加 @Transactional 注解，@Transactional 注解只是标记某个方法需要被事务管理以及管理的方式，关键还是在开启事务管理的注解上。\"]},\"1057\":{\"h\":\"TransactionalManagement\",\"t\":[\"@EnableTransactionManagement 这个注解的作用就是引入 TransactionManagementConfigurationSelector 这个注入选择器。除此之外，有三个属性：\",\"增强的模式（Proxy/AspectJ）\",\"在 Proxy 通知模式下，代理的方式（JDK/CGLIB）\",\"通知的优先级\",\"@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Import(TransactionManagementConfigurationSelector.class) public @interface EnableTransactionManagement { boolean proxyTargetClass() default false; // JDK/CGLIB，默认 JDK AdviceMode mode() default AdviceMode.PROXY; // Proxy/AspectJ，默认 Proxy int order() default Ordered.LOWEST_PRECEDENCE; // 通知的优先级，默认最低 }\",\"SpringBoot 2.x 版本里 @EnableTransactionManagement 里面的 proxyTargetClass 属性配置无效，实际 AOP 方式取决于spring.aop.proxy-target-class配置 (见 AopAutoConfiguration)。\"]},\"1058\":{\"h\":\"ProxyCreator\",\"t\":[\"而 TransactionManagementConfigurationSelector 这个 ImportSelector 的作用就是向容器中导入两个配置类，一个是 AutoProxyRegistrar 会导入负责自动代理的 InfrastructureAdvisorAutoProxyCreator，本身通过一层层的继承关系实现了 BeanPostProcessor，会在 Bean 创建完成后根据已有的 Advisor 对这个 Bean 做匹配，然后决定是否为这个 Bean 创建代理对象。\",\"public class TransactionManagementConfigurationSelector extends AdviceModeImportSelector<EnableTransactionManagement> { @Override protected String[] selectImports(AdviceMode adviceMode) { switch (adviceMode) { case PROXY: return new String[] {AutoProxyRegistrar.class.getName(), ProxyTransactionManagementConfiguration.class.getName()}; case ASPECTJ: return new String[] {determineTransactionAspectClass()}; default: return null; } } private String determineTransactionAspectClass() { return (ClassUtils.isPresent(\\\"javax.transaction.Transactional\\\", getClass().getClassLoader()) ? TransactionManagementConfigUtils.JTA_TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME : TransactionManagementConfigUtils.TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME); } }\"]},\"1059\":{\"h\":\"TransactionAdvisor\",\"t\":[\"上面的 ImportSelector 还导入了一个配置类 ProxyTransactionManagementConfiguration，它的作用就是创建匹配 @Transactional 注解的 Advisor。\",\"@Configuration(proxyBeanMethods = false) @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration { // 注册Advisor @Bean(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME) public BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor( TransactionAttributeSource transactionAttributeSource, TransactionInterceptor transactionInterceptor) { BeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor(); advisor.setTransactionAttributeSource(transactionAttributeSource); advisor.setAdvice(transactionInterceptor); if (this.enableTx != null) { advisor.setOrder(this.enableTx.<Integer>getNumber(\\\"order\\\")); } return advisor; } // 切入点，引入 SpringTransactionAnnotationParser 事务注解的解析器 @Bean public TransactionAttributeSource transactionAttributeSource() { return new AnnotationTransactionAttributeSource(); } // 通知，事务拦截器 @Bean public TransactionInterceptor transactionInterceptor(TransactionAttributeSource transactionAttributeSource) { TransactionInterceptor interceptor = new TransactionInterceptor(); interceptor.setTransactionAttributeSource(transactionAttributeSource); if (this.txManager != null) { interceptor.setTransactionManager(this.txManager); } return interceptor; } }\",\"在 AOP 里面，Advisor 就是切入点和通知的结合，在源码里也是这样设计的：\",\"切入点 - TransactionAttributeSource\",\"引入 SpringTransactionAnnotationParser 负责解析 @Transantional。在 Bean 创建完成后，就会进行事务注解的解析，然后放入一个 Map 缓存中，key 是方法名，value 就是对应的事务属性，不需要事务管理就是 null。在判断是否需要创建代理类来管理事务，以及实际执行事务的时候都会从这个 Map 里面取出事务的属性做进一步的处理。\",\"TransactionAttributeSource\",\"通知 - TransactionInterceptor：事务拦截器，实现了 MethodInterceptor 接口，执行事务方法的时候就会走这里面的 invoke 方法，实际的事务管理都在这个invoke方法里\",\"事务拦截器的 invoke 方法就一条语句，调用 invokeWithinTransaction，这个方法是事务管理的具体实现，里面会尝试获取事务管理器，然后根据事务配置，开启事务，执行业务流程，然后提交、回滚等等一整套操作。内部类 TransactionInfo 类组合了 TransactionManager、TransactionDefinition、TransactionStatus 三个事务管理的关键类，所以最终还是回到了 TransactionManager 的那一套流程上去，只不过用代理拦截的方式在外面包了一层，实现了一行注解完成事务的自动化管理。\",\"// TransactionalInterceptor::invoke public Object invoke(MethodInvocation invocation) throws Throwable { return invokeWithinTransaction(invocation.getMethod(), targetClass, new CoroutinesInvocationCallback() { public Object proceedWithInvocation() throws Throwable { return invocation.proceed(); } }); } // TransactionAspectSupport::invokeWithinTransaction protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, final InvocationCallback invocation) throws Throwable { // 获取事务属性源，就是 Advisor 里面 SpringTransactionAnnotationParser 解析的结果 TransactionAttributeSource tas = getTransactionAttributeSource(); final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null); // 获取事务管理器 final TransactionManager tm = determineTransactionManager(txAttr); // ReactiveTransactionManager if (this.reactiveAdapterRegistry != null && tm instanceof ReactiveTransactionManager) { // 省略…… } // PlatformTransactionManager事务管理器执行流程 PlatformTransactionManager ptm = asPlatformTransactionManager(tm); final String joinpointIdentification = methodIdentification(method, targetClass, txAttr); // DataSourceTransactionManager或JtaTransactionManager等事务管理器执行流程 if (txAttr == null || !(ptm instanceof CallbackPreferringPlatformTransactionManager)) { // 执行 TransactionManager::getTransaction 创建/加入事务 // txInfo 封装了 TransactionManager、TransactionDefinition、TransactionStatus TransactionInfo txInfo = createTransactionIfNecessary(ptm, txAttr, joinpointIdentification); Object retVal; try { // 反射执行业务方法 retVal = invocation.proceedWithInvocation(); } catch (Throwable ex) { // 业务方法抛异常，执行回滚。TransactionManger::rollback completeTransactionAfterThrowing(txInfo, ex); throw ex; } finally { // 清理工作 cleanupTransactionInfo(txInfo); } if (retVal != null && vavrPresent && VavrDelegate.isVavrTry(retVal)) { // 函数式异常处理，省略…… } // 提交事务。TransactionManger::commit commitTransactionAfterReturning(txInfo); return retVal; } // CallbackPreferringPlatformTransactionManager（WebSphereUowTransactionManager）事务管理器执行流程 else { // 省略…… } }\"]},\"1060\":{\"h\":\"总结\",\"t\":[\"声明式事务是基于 Spring 的 AOP 机制实现的，Spring 容器初始化 Bean 的过程中，有一个 BeanPostProcessor 负责解析 @Transactional 注解和其中的事务属性，如果解析成功，将为这个 Bean 创建一个代理对象放入容器。在执行事务方法时，实际调用的是代理对象的方法，TransactionInterceptor 这个拦截器的 invoke()方法会对事务方法做增强，在目标方法前后增加开启事务、事务回滚、提交的逻辑。\",\"无论是两种编程式事务，还是声明式事务，最后都归结于 TransactionManager、TransactionDefinition、TransactionStatus 三种核心类的配合使用。\"]},\"1061\":{\"h\":\"事务失效\",\"t\":[\"底层的数据库引擎必须支持事务机制\",\"正确的设置 @Transactional 的 rollbackFor 和 propagation 属性\",\"事务由Spring管理起来 \",\"事务所在类要要被加载成 Bean 由 Spring 容器管理\",\"@Transactional 注解的方法必须是public的，且非final，非static（AOP要重写方法）\",\"声明式事务中不要用 try-catch 吞掉异常，要么处理完后继续向上抛出\",\"抛出的异常必须是Unchecked Exception（RuntimeException/Error），Spring 事务默认不会对 Exception 回滚，如有需要用 rollbackFor 额外声明\",\"避免同一个类中没有事务注解的方法调用有事务注解的方法（不走TransactionInterceptor）\"]},\"1062\":{\"c\":[\"Java\"]},\"1063\":{\"c\":[\"事务\"]},\"1064\":{\"h\":\"Stream 流\"},\"1065\":{\"h\":\"介绍\",\"t\":[\"Java 8 API添加了一个新的抽象称为流Stream，可以以一种声明的方式处理数据。Stream流使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。流的特点有：\",\"不是数据结构，不会保存数据，只是在原数据集上定义了一组操作\",\"惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算\",\"Stream不保存数据，它会将操作后的数据保存到另外一个对象中\"]},\"1066\":{\"h\":\"基本使用\"},\"1067\":{\"h\":\"创建\",\"t\":[\"public class StreamAPI { public static void main(String[] args) throws FileNotFoundException { // 1. 数组 Integer[] array = {1, 2, 3}; Stream<Integer> integerStream1 = Arrays.stream(array); // 2. 集合 List<Integer> list = Arrays.asList(array); Stream<Integer> listStream1 = list.stream(); Stream<Integer> listStream2 = list.parallelStream(); // 3. BufferedReader ------------------------------- BufferedReader reader = new BufferedReader(new FileReader(\\\"xxx\\\")); Stream<String> linesStream = reader.lines(); // 4. 字符串处理 String str = \\\"1,2,3\\\"; Pattern pattern = Pattern.compile(\\\",\\\"); Stream<String> stringStream = pattern.splitAsStream(str); // 4. Stream自带的静态方法 Stream<Integer> integerStream = Stream.of(1, 2, 3); Stream<Integer> integerStream2 = Stream.iterate(1, s -> (s + 2)); Stream<Double> generate = Stream.generate(Math::random); } }\"]},\"1068\":{\"h\":\"操作\",\"t\":[\"Stream 的操作分为两类：\",\"中间操作(Intermediate)：可以有多个，每次返回一个新的流，可进行链式操作 \",\"有状态：只有拿到所有元素之后才能获得结果\",\"无状态：操作不受之前元素的影响\",\"结束操作(Terminal)：触发 Stream 进行计算的操作，只能有一个。每次执行完，这个流也就用完了，无法继续执行操作 \",\"短路：满足短路条件时，不需要处理完所有元素就能返回结果\",\"非短路：处理完所有元素才返回结果\",\"名称\",\"类型\",\"返回类型\",\"使用的类型/函数式接口\",\"函数描述\",\"filter\",\"中间操作(Intermediate)\",\"Stream\",\"Predicate\",\"T -> boolean\",\"distinct\",\"中间操作(Intermediate)、有状态\",\"Stream\",\"无\",\"T -> boolean\",\"skip\",\"中间操作(Intermediate)、有状态\",\"Stream\",\"无\",\"无\",\"limit\",\"中间操作(Intermediate)\",\"Stream\",\"无\",\"无\",\"map\",\"中间操作(Intermediate)\",\"Stream\",\"Function\",\"T -> R\",\"flatMap\",\"中间操作(Intermediate)\",\"Stream\",\"Function\",\"T -> Stream\",\"sorted\",\"中间操作(Intermediate)、有状态\",\"Stream\",\"Comparator\",\"(T, T) -> int\",\"noneMatch\",\"结束操作(Terminal)\",\"boolean\",\"Predicate\",\"T -> boolean\",\"allMatch\",\"结束操作(Terminal)\",\"boolean\",\"Predicate\",\"T -> boolean\",\"findAny\",\"结束操作(Terminal)\",\"Optional\",\"无\",\"无\",\"findFirst\",\"结束操作(Terminal)\",\"Optional\",\"无\",\"无\",\"forEach\",\"结束操作(Terminal)\",\"void\",\"Consumer\",\"T -> void\",\"collect\",\"结束操作(Terminal)\",\"R\",\"Collector\",\"无\",\"reduce\",\"结束操作(Terminal)\",\"Optional\",\"BinaryOperator\",\"(T, T) -> T\",\"count\",\"结束操作(Terminal)\",\"long\",\"无\",\"无\",\"User user1 = new User(1,\\\"张三\\\"); User user2 = new User(2,\\\"李四\\\"); User user3 = new User(3,\\\"王五\\\"); ArrayList<User> users = new ArrayList<>(); users.add(user1); users.add(user2); users.add(user3); // list List<Integer> list = integerStream1.collect(Collectors.toList()); // set Set<Integer> set = integerStream1.collect(Collectors.toSet()); // map key不能相同 Map<Integer, String> map = users.stream().collect(Collectors.toMap(User::getId, User::getName)); // 获取users元素个数 Long count = users.stream().collect(Collectors.counting()); // 获取users集合id最大值 Optional<Integer> max = users.stream().map(User::getId).collect(Collectors.maxBy(Integer::compare)); // 获取users集合id最小值 Optional<Integer> min = users.stream().map(User::getId).collect(Collectors.minBy(Integer::compare)); // 获取users集合所有id的和 Integer id = users.stream().collect(Collectors.summingInt(User::getId)); // 获取users集合所有id的平均值 Double average = users.stream().collect(Collectors.averagingDouble(User::getId));\"]},\"1069\":{\"h\":\"参考\",\"t\":[\"https://blog.csdn.net/xueguchen/article/details/118017032\"]},\"1070\":{\"c\":[\"Java\"]},\"1071\":{\"c\":[\"流\"]},\"1072\":{\"h\":\"Synchronized 锁机制\",\"t\":[\"为了避免临界区的竞态条件发生，可以用非阻塞式的原子变量，也可以用阻塞式的锁。Java 多线程的锁都是对象锁，采用互斥的方式让同一时刻只有一个线程能够持有对象锁，从而进入临界区，而其它线程只能阻塞等待，因此不用担心线程上下文切换造成共享资源错乱。\"]},\"1073\":{\"h\":\"使用方式\",\"t\":[\"// 形式1：关键字在实例方法上，锁为当前实例 public synchronized void instanceLock() { // code } // 形式2：关键字在静态方法上，锁为当前 Class 对象 public static synchronized void classLock() { // code } // 形式3：关键字在代码块上，锁为括号里面的对象 public void blockLock() { Object o = new Object(); synchronized (o) { // code } } // 等价于形式1，锁为当前实例 public void blockLock() { synchronized (this) { // code } } // 等价于形式2，锁为当前Class对象 public void blockLock() { synchronized (this.getClass()) { // code } }\"]},\"1074\":{\"h\":\"原理 - Monitor\",\"t\":[\"了解 Monitor 之前首先要知道对象在 JVM 中的内存布局，主要包括：\",\"对象头：存储对象的基础信息，GC状态、元数据等 \",\"Mark Word：对象标记字段，存储一些标记位，如哈希码、锁状态，分代年龄等\",\"Klass Pointer：指向对象对应的 Class 对象\",\"实例数据：存储对象实例数据\",\"对齐填充：填充至 8Byte 整数倍\",\"其中跟锁相关的数据在对象头的 Mark Word 中。\",\"JVM 中的每个对象都会关联一个 Monitor 监视器，或者叫管程，一旦某个线程使用 synchronized 给对象上锁（重量级锁），该对象的 Mark Word 中就会记录下对应的 Monitor 指针，同时 Monitor 对象内部的 Owner 字段也会设置为该线程，就像图中的 Thead-2。\",\"如果后续有其它线程试图对同一个对象进行上锁，首先会进行自旋重试上锁，如果一直失败就会被封装成 ObjectWaiter 附在 Monitor 的 EntryList 列表中，然后调用 park 挂起进入阻塞状态，等待被唤醒。而当 Thread-2 退出临界区之后，就会根据某种策略通过 unpark 主动唤醒 EntryList 中的某个线程。\",\"从字节码角度看，JVM 是通过 monitorenter/monitorexit 两个指令实现上锁和解锁的，底层依赖于 OS 的 Mutex Lock，需要额外的用户态到内核态切换的开销，因此称这种上锁为重量级锁，也是 JDK 1.6 之前 synchronized 关键字基本的上锁原理。\"]},\"1075\":{\"h\":\"锁优化\",\"t\":[\"在 JDK 1.6 之前，synchronized 只有上述基于 Monitor 的锁机制，但是经调研发现，实际的程序在运行过程中，锁资源的竞争并没有那么激烈，如果每次都关联 Monitor 修改 Mark Word 操作会很浪费性能，因此 JVM 后续做了很多优化措施，来提高没有多线程竞争或基本没有竞争的场景下的并发性能。\"]},\"1076\":{\"h\":\"轻量级锁\",\"t\":[\"我们先退一步，假设一个锁资源被多个线程共享，但它们加锁的事件是错开的，即不存在竞争，那么可以用轻量级锁来优化，在轻量级锁中不涉及 Monitor 对象。在此之前，需要知道每个线程的栈帧里都会包含一个 Lock Record 锁记录，其中主要有两部分：\",\"地址：该 Lock Record 的地址\",\"Object Reference：对象引用\",\"进入临界区\",\"当一个线程执行 synchronized 对某个 object 上锁时，首先会尝试 CAS 交换 Lock Record 地址和该 object 的 Mark Word，如果替换成功，表示由该线程给 object 上了锁。\",\"而如果替换失败，那么会对应两种情况：\",\"其它线程已经持有该 object 的轻量级锁，表示有竞争，那么会进入锁膨胀\",\"为 object 申请 Monitor 对象，并让 Mark Word 指向该 Monitor\",\"然后自己进入 Monitor 的 EntryList 转为阻塞状态\",\"如果是自己已经持有 该 object 的轻量级锁，表示重入，那么会再创建一条 Lock Record 作为重入的计数器，并且该锁记录的地址字段为 null\",\"退出临界区\",\"当退出临界区解锁时，也有两种情况：\",\"如果锁记录取值为 null，表示有重入，重入计数 -1\",\"如果锁记录不为 null，那么 CAS 交换回 Mark Word 和 Lock Record 地址，此时有两种结果 \",\"CAS 成功，解锁完成\",\"CAS 失败，说明轻量级锁进行了锁膨胀，升级为了重量级锁，之后进入重量级锁解锁流程\",\"轻量级锁适用于两个线程交替执行的场景，如果有竞争，直接膨胀为重量级锁，没有自旋操作。\"]},\"1077\":{\"h\":\"偏向锁\",\"t\":[\"我们再退一步，如果一个共享资源竞争很少，一直由某个线程上锁，那么轻量级锁就没有必要每次都 CAS 交换 Lock Record 地址和 object 的 Mark Word 了，因此可以进一步优化：第一次上锁时使用 CAS 交换 Thread ID 和 Mark Word，后续只要校验 object 的 Mark Word 里存储的 Thread ID 仍是自己，判断没有发生竞争，这个对象就归该线程所持有，这样就仅需要一次 CAS 操作了。从机制上也能发现，偏向锁解锁后对象头里依然存储着线程 ID，并且这里的 ID 是 OS 分配的，和 Java 层面的线程ID 并不一致。。\",\"需要注意的是：\",\"偏向锁开启时，即对象创建后，Mark Word 后三位为 101，thread/epoch/age 都为 0\",\"如果用-XX:-UseBiasedLocking禁用偏向锁，那么对象创建后，Mark Word 后三位为 001，hashcode/age 都为 0，直到第一次用到 hashcode 时才会赋值\",\"偏向锁的对象头里存储了线程 ID，没有空间存储 hashcode 了，所以如果调用 hashCode 会撤销偏向锁，恢复为无锁状态 \",\"轻量级锁在锁记录存储 hashcode\",\"重量级锁在 Monitor 中存储 hashcode\",\"如果校验时发现线程不一致，说明有竞争，偏向锁将会被撤销，升级为轻量级锁 \",\"撤销超过 20 次，JVM 会重偏向至加锁的 Thread ID\",\"撤销超过 40 次，JVM 会将该类的所有对象设为不可偏向，包括新建对象\",\"如果调用 wait/notify，会撤销偏向锁升级为重量级锁\",\"偏向锁有延迟机制，默认4s，防止初始阶段大量初始化工作产生大量锁撤销和锁升级，影响启动效率，可以通过-XX:BiasedLockingStartupDelay=0禁用延迟\",\"如果业务存在大量线程竞争，由于偏向锁撤销存在一定开销，并不能提高性能，反而会影响并发性能，因此偏向锁适用于单个线程重入的场景，在 JDK 15 之后已经默认关闭了偏向锁。\"]},\"1078\":{\"h\":\"其它\"},\"1079\":{\"h\":\"自旋锁\",\"t\":[\"在竞争重量级锁时，如果一个线程尝试获取一个被其他线程持有的锁时，它不会立即进入阻塞状态，而是会在原地进行自旋等待，如果自旋期间持锁线程正好退出同步块释放了锁，那么该线程就可以拿到锁资源而不用进入阻塞再恢复，进行上下文切换了。\",\"自旋会占用 CPU 时间，因此适合多 CPU 环境\",\"自旋锁是自适应的，自旋成功次数多，自旋的机会也会越多\"]},\"1080\":{\"h\":\"锁消除\",\"t\":[\"锁消除是一种编译器优化技术，用于消除不必要的锁竞争。编译器通过分析代码的语义和数据流来确定哪些锁是不必要的，并消除这些锁。例如，如果一个线程在获取一个锁后执行了一个不可能产生并发异常的代码段，那么这个锁就是不必要的，在这种情况下，编译器可能会消除这个锁，从而提高并发性能。\"]},\"1081\":{\"h\":\"锁粗化\",\"t\":[\"当一个线程在一段时间内多次重复获得同一个锁，JVM可能会将这个锁的粒度从对象级别提升到更高的级别，例如一个方法或一个类。这种技术被称为锁粗化，可以减少线程对锁的请求频率，从而减少线程上下文切换的开销，提高并发性能。例如，如果一个线程在循环中多次访问同一个对象并获取该对象的锁，JVM可能会将这个锁扩展到包含整个循环的代码块，而不是每次迭代都获取和释放锁。\"]},\"1082\":{\"h\":\"完整流程\"},\"1083\":{\"h\":\"参考\",\"t\":[\"Java对象内存布局(JOL)\",\"https://www.cnblogs.com/xiaofuge/p/13895226.html\",\"黑马程序员 JUC （PS：满老师YYDS）\",\"https://tech.youzan.com/javasuo-yu-xian-cheng-de-na-xie-shi/\"]},\"1084\":{\"c\":[\"Java\"]},\"1085\":{\"c\":[\"并发\"]},\"1086\":{\"h\":\"Thread 源码阅读\",\"t\":[\"线程是操作系统进行调度的最小单位，Java 中的 Thread 是对操作系统线程的封装，很多实际的控制是靠底层 Native 方法实现的，因此 Java 的 Thread 类还是比较简单的。\"]},\"1087\":{\"h\":\"成员\",\"t\":[\"Thread 内部的成员变量还是比较多的，主要分为线程标识、状态标记、局部变量、同步相关等等：\",\"public class Thread implements Runnable { // 线程ID private final long tid; // 线程ID计数器 private static long threadSeqNumber; // 线程名 private volatile String name; // 线程取名的计数器 private static int threadInitNumber; // 线程状态，0 表示 NEW private volatile int threadStatus; // 中断标记，注意仅仅用作标记 private volatile boolean interrupted; // 守护线程标志，所有普通线程执行完毕后自动终止，常用于执行后台任务，例如 GC 线程、JIT线程 private boolean daemon = false; // 线程优先级，1-10，默认 5 private int priority; public static final int MIN_PRIORITY = 1; public static final int NORM_PRIORITY = 5; public static final int MAX_PRIORITY = 10; // 所属线程组 private ThreadGroup group; // 执行目标 private Runnable target; // 线程私有的局部变量 ThreadLocal.ThreadLocalMap threadLocals = null; // 可继承的线程局部变量，线程创建时会继承自父线程 ThreadLocal.ThreadLocalMap inheritableThreadLocals = null; // 支持 LockSupport volatile Object parkBlocker; // 可中断IO中用于阻塞线程的对象及对应的访问锁 private volatile Interruptible blocker; private final Object blockerLock = new Object(); // 线程栈大小 private final long stackSize; // 上下文类加载器，默认是父线程的类加载器 private ClassLoader contextClassLoader; // 标识线程是否是死胎 private boolean stillborn = false; // 存储线程在底层平台的线程 ID private long eetop; // 继承的访问控制上下文 private AccessControlContext inheritedAccessControlContext; // 未捕获异常的处理器 private volatile UncaughtExceptionHandler uncaughtExceptionHandler; private static volatile UncaughtExceptionHandler defaultUncaughtExceptionHandler; // 用于生成高性能的伪随机数（PRNGs：Pseudo Random Number Generators） long threadLocalRandomSeed; int threadLocalRandomProbe; int threadLocalRandomSecondarySeed; }\"]},\"1088\":{\"h\":\"构造器\",\"t\":[\"Thread 提供了多种构造器的重载，主要调用的是下面这个：\",\"private Thread(ThreadGroup g, // 线程组，默认 null Runnable target, // 执行目标，默认 null String name, // 线程名，默认 [\\\"Thread-\\\" + threadInitNumber++] long stackSize, // 线程栈大小，默认 0 表示不指定，由 VM 决定如何使用 AccessControlContext acc, // 访问控制，默认 null，已废弃 boolean inheritThreadLocals) // 是否继承父线程私有变量，默认 false { if (name == null) throw new NullPointerException(\\\"name cannot be null\\\"); this.name = name; // 如果没有指定线程组，依次从 SecurityManager->父线程 获取 Thread parent = currentThread(); SecurityManager security = System.getSecurityManager(); if (g == null) { if (security != null) g = security.getThreadGroup(); if (g == null) g = parent.getThreadGroup(); } // 访问校验 g.checkAccess(); if (security != null) { if (isCCLOverridden(getClass())) { security.checkPermission(SecurityConstants.SUBCLASS_IMPLEMENTATION_PERMISSION); } } // 线程组记录新线程 g.addUnstarted(); // 注入成员 this.group = g; // 默认根据父线程 this.daemon = parent.isDaemon(); // 默认根据父线程 this.priority = parent.getPriority(); if (security == null || isCCLOverridden(parent.getClass())) this.contextClassLoader = parent.getContextClassLoader(); else this.contextClassLoader = parent.contextClassLoader; this.inheritedAccessControlContext = acc != null ? acc : AccessController.getContext(); this.target = target; setPriority(priority); // 继承父线程的私有变量 if (inheritThreadLocals && parent.inheritableThreadLocals != null) this.inheritableThreadLocals = ThreadLocal.createInheritedMap(parent.inheritableThreadLocals); this.stackSize = stackSize; // 设置线程ID = ++threadSeqNumber this.tid = nextThreadID(); }\"]},\"1089\":{\"h\":\"线程状态\",\"t\":[\"Thread 共定义了 6 种状态，对应于 Thread.State 枚举，某一时刻某一线程只会处于其中一种状态，但和操作系统中的线程状态并没有对应关系。\",\"// java.lang.Thread.State public enum State { // 创建完但尚未启动的状态 NEW, // 启动后的就绪/运行中（可运行）的状态 RUNNABLE, // 阻塞在某个 monitor 上所处的状态 BLOCKED, // 等待另一线程执行操作的状态 WAITING, // 指定超时时间的等待状态 TIMED_WAITING, // 执行完毕的终止状态 TERMINATED; }\",\"状态转换以及触发条件如下：\"]},\"1090\":{\"h\":\"start\",\"t\":[\"Thread 里面有两种执行 target，也就是 Runnable 对象的方法：\",\"start()：调用 native 方法创建实际的操作系统线程\",\"run()：在当前线程里执行 target#run()，并不会创建新线程\",\"所以要想真的利用多线程执行任务，要调用 Thread#start，而不是执行 Thread#run。注意 start() 不能重复调用，否则会抛出非法线程状态的异常。执行完 start() 后线程就进入了 Runnable 状态。\",\"// java.lang.Thread#start public synchronized void start() { // 状态校验 if (threadStatus != 0) throw new IllegalThreadStateException(); // 添加到线程组的【可运行线程】数组中，并修改相关的统计 group.add(this); boolean started = false; try { // 本地方法创建新线程执行 target start0(); started = true; } finally { try { if (!started) group.threadStartFailed(this); } catch (Throwable ignore) {} } } private native void start0(); // java.lang.Thread#run public void run() { if (target != null) { target.run(); } }\"]},\"1091\":{\"h\":\"join\",\"t\":[\"join() 可以在一个线程中等待另一个线程执行完毕（在当前这个线程等待另一个线程加入进来），例如在 a 线程中执行 b.join，那么线程 a 就会进入 Thread#join 方法循环等待，直到 b 线程执行结束 a 才会继续。join() 底层是利用 isAlive() 和 Object#wait() 实现有限阻塞，调用的线程执行完毕后会执行 notifyAll() 唤醒所有等待队列的线程进入同步队列。\",\"public final void join() throws InterruptedException { join(0); } public final synchronized void join(final long millis) { if (millis > 0) { if (isAlive()) { // 不断循环，校验是否超时 final long startTime = System.nanoTime(); long delay = millis; do { wait(delay); } while (isAlive() && (delay = millis - TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime)) > 0); } } else if (millis == 0) { while (isAlive()) { wait(0); } } else { throw new IllegalArgumentException(\\\"timeout value is negative\\\"); } }\"]},\"1092\":{\"h\":\"interrupt\",\"t\":[\"interrupt() 可以对一个已经启动的线程进行中断操作，中断操作会根据线程所处的不同状态有不同结果：\",\"若线程阻塞在 wait/join/sleep 上：中断标记置 false，同时线程收到 InterruptedException\",\"若线程阻塞在 NIO#InterruptibleChannel 上：关闭 channel，中断标记置 true，同时线程收到 ClosedByInterruptException\",\"若线程阻塞在 NIO#Selector 上：阻塞方法立即返回，中断标记置 true\",\"其他情况：中断标记置 true\",\"public void interrupt() { // 其它线程中断本线程 if (this != Thread.currentThread()) { checkAccess(); // 先获取 blocker 的锁 synchronized (blockerLock) { Interruptible b = blocker; if (b != null) { // 标记当前线程被中断，注意仅仅是做标记 interrupted = true; interrupt0(); b.interrupt(this); return; } } } // 如果是自己调用的，直接设置标记即可 interrupted = true; // 通知 JVM 中断事件 interrupt0(); } private native void interrupt0();\",\"Thread 里有两种方法获取中断状态，但有不同的副作用：\",\"// 1. 获取中断状态，不清除中断标记 public boolean isInterrupted() { return interrupted; } // 2. 静态方法，判断是否被中断，如果已经被中断会清除中断标记 public static boolean interrupted() { Thread t = currentThread(); boolean interrupted = t.interrupted; if (interrupted) { t.interrupted = false; clearInterruptEvent(); } return interrupted; }\"]},\"1093\":{\"h\":\"exit\",\"t\":[\"exit 会在线程退出前被调用，来做一些清理工作，这是 JVM 自动执行的退出。JDK 建议用一个自定义的变量用于标识线程是否需要退出，然后线程不断地去检查该变量从而决定要不要从 run 方法退出；或者调用线程对象的 interrupt 方法，通过中断异常来退出执行。\",\"// java.lang.Thread#exit private void exit() { // 清理局部变量 if (threadLocals != null && TerminatingThreadLocal.REGISTRY.isPresent()) { TerminatingThreadLocal.threadTerminated(); } // 移除出线程组 if (group != null) { group.threadTerminated(this); group = null; } // 手动置 null 帮助 GC target = null; threadLocals = null; inheritableThreadLocals = null; inheritedAccessControlContext = null; blocker = null; uncaughtExceptionHandler = null; }\"]},\"1094\":{\"h\":\"其它\"},\"1095\":{\"h\":\"工具方法\",\"t\":[\"// 获取当前所在线程 public static native Thread currentThread(); // 进入 Timed_Waiting，不会释放任何 monitor，可以被其它线程 interrupt public static native void sleep(long millis); // 提示调度器当前线程愿意让出 CPU，依赖于具体实现 public static native void yield(); // 设置当前所在线程的阻塞对象 static void blockedOn(Interruptible b); // 当前线程是否持有该对象的 monitor 锁 public static native boolean holdsLock(Object obj); // 告诉 JVM 当前线程正在忙等，用于优化 public static void onSpinWait() {} // 是否存活 public final native boolean isAlive(); // 获取所属线程组内活跃线程数（包括子线程组） public static int activeCount() { return currentThread().getThreadGroup().activeCount(); } // 获取所属线程组内所有线程，拷贝到 tarray 里（包括子线程组） public static int enumerate(Thread tarray[]) { return currentThread().getThreadGroup().enumerate(tarray); } // 获取当前线程的调用栈 private static final StackTraceElement[] EMPTY_STACK_TRACE = new StackTraceElement[0]; public StackTraceElement[] getStackTrace() { // 其它线程调用 if (this != Thread.currentThread()) { // 安全校验 SecurityManager security = System.getSecurityManager(); if (security != null) { security.checkPermission(SecurityConstants.GET_STACK_TRACE_PERMISSION); } if (!isAlive()) { return EMPTY_STACK_TRACE; } // 拿到当前线程的调用栈 StackTraceElement[][] stackTraceArray = dumpThreads(new Thread[] {this}); StackTraceElement[] stackTrace = stackTraceArray[0]; if (stackTrace == null) { stackTrace = EMPTY_STACK_TRACE; } return stackTrace; } else { // 当前线程自己调用，直接打印调用栈 return (new Exception()).getStackTrace(); } } // 拿到所有线程和对应的调用栈封装成 Map，原理同上 public static Map<Thread, StackTraceElement[]> getAllStackTraces(); // 获取所有线程对象 private static native Thread[] getThreads(); // 拿到参数线程组对应的所有调用栈 private static native StackTraceElement[][] dumpThreads(Thread[] threads); // 打印调用栈 public static void dumpStack() { new Exception(\\\"Stack trace\\\").printStackTrace(); }\"]},\"1096\":{\"h\":\"异常\",\"t\":[\"单线程的程序发生一个未捕获的异常时我们可以采用 try-catch 进行异常捕获；但在多线程环境中，线程抛出的异常不能在调用的地方直接用 try-catch 捕获，进而导致一些资源问题。不过 Thread 提供了未捕获异常的处理器接口，能检测出某个由于未捕获的异常而终结的情况。\",\"// 两个异常处理器类成员 private volatile UncaughtExceptionHandler uncaughtExceptionHandler; private static volatile UncaughtExceptionHandler defaultUncaughtExceptionHandler; // 未捕获异常处理器接口 public interface UncaughtExceptionHandler { void uncaughtException(Thread t, Throwable e); } private void dispatchUncaughtException(Throwable e); // getter/setter 略\"]},\"1097\":{\"h\":\"安全审计\",\"t\":[\"private static boolean isCCLOverridden(Class<?> cl); static void processQueue(ReferenceQueue<Class<?>> queue, ConcurrentMap<? extends, WeakReference<Class<?>>, ?> map); private static boolean auditSubclass(final Class<?> subcl); private static class Caches {...} static class WeakClassKey extends WeakReference<Class<?>> {...}\"]},\"1098\":{\"h\":\"已废弃\",\"t\":[\"下面是一些由于安全问题，不推荐使用的控制方法:\",\"public final void stop() -> private native void stop0(Object o); public final void suspend() -> private native void suspend0(); public final void resume() -> private native void resume0();\"]},\"1099\":{\"h\":\"ThreadGroup\",\"t\":[\"线程组 ThreadGroup 就是一个线程集合，用于更方便地管理线程。线程组是一种父子层级结构，一个线程组包括多个线程，同时还可以拥有多个子线程组。在 JVM 中线程组层级关系如下：\",\"system：用来处理 JVM 系统任务的线程组，例如对象的销毁等\",\"main：system 的直接子线程组，该组至少包含一个 main 线程\",\"其它：应用程序创建的线程组\",\"ThreadGroup 主要提供了对所管理线程/线程组的 CRUD、状态控制、统计、遍历等功能，但其中很多由于安全问题都是已废弃的，使用时要注意。\",\"public class ThreadGroup implements Thread.UncaughtExceptionHandler { // 父线程组 private final ThreadGroup parent; // 线程组名称 String name; // 线程组最大优先级 int maxPriority; // 销毁标记 boolean destroyed; // 守护标记 boolean daemon; // 已加入，尚未启动的线程数 int nUnstartedThreads = 0; // 已启动线程数 int nthreads; // 管理的线程集合 Thread threads[]; // 管理的子线程组数 int ngroups; // 管理的子线程组集合 ThreadGroup groups[]; }\"]},\"1100\":{\"h\":\"参考\",\"t\":[\"详解Java线程状态及状态转换\",\"Java并发编程：Thread类的使用\",\"Java线程Thread类详解\",\"JAVA多线程之UncaughtExceptionHandler——处理非正常的线程中止\",\"Java并发编程之Thread类详解\",\"Java并发 之 线程组 ThreadGroup 介绍\"]},\"1101\":{\"c\":[\"Java\"]},\"1102\":{\"c\":[\"并发\"]},\"1103\":{\"h\":\"ThreadPoolExecutor 源码分析\"},\"1104\":{\"h\":\"概述\",\"t\":[\"Java 的线程池是一种基于池化思想，用于管理和重用线程的机制。使用线程池可以带来一系列好处：\",\"降低资源消耗：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。\",\"提高响应速度：任务到达时，无需等待线程创建即可立即执行。\",\"提高线程的可管理性：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。\",\"提供更多更强大的功能：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。\",\"Java 提供了 Executor 框架作为线程池的实现，其中 ThreadPoolExecutor 是其中最为重要的实现之一。\",\"Executor框架\",\"池化思想就是一种将资源统一在一起管理的一种思想，广泛应用在计算机、金融、设备、管理等各个领域。在计算机领域中表现为同意管理 IT 资源，包括服务器、存储、网络资源等等， 例如：\",\"内存池：预先申请内存，提升申请内存速度，减少内存碎片\",\"连接池：预先申请数据库连接，提升申请连接的速度，降低系统的开销\",\"实例池：循环使用对象，减少资源在初始化和释放时的昂贵损耗\"]},\"1105\":{\"h\":\"使用\"},\"1106\":{\"h\":\"创建线程池\",\"t\":[\"@Test public void testThreadPoolExecutor() { // 1. 创建线程池 ExecutorService executorService = new ThreadPoolExecutor(6, 10, 1000, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(1000), Executors.defaultThreadFactory()); // 2. 提交任务 for (int i = 0; i < 10; i++) { executorService.submit(() -> { System.out.println(\\\"test02\\\"); }); } // 3. 关闭线程池 executorService.shutdown(); } // 线程池构造方法 ThreadPoolExecutor(int corePoolSize, // 常驻线程数量 int maximumPoolSize, // 允许的最大线程数量 long keepAliveTime, // 当线程数量超过corePoolSize后，多余的空闲线程的存活时间 TimeUnit unit, // keepAliveTime 单位 BlockingQueue<Runnable> workQueue, // 任务队列，保存被提交但尚未执行的任务 ThreadFactory threadFactory, // 线程工厂 RejectedExecutionHandler handler) // 任务过多时的拒绝策略\",\"当一个Runnable/Callable任务通过submit/execute提交到线程池后，会按如下的逻辑进行处理：corePoolSize -> 任务队列 -> maximumPoolSize -> 拒绝策略。\"]},\"1107\":{\"h\":\"任务队列\",\"t\":[\"存储提交到线程池但尚未执行的 Runnable 任务队列，是一个实现了BlockingQueue接口的对象。常用的队列实现有：\",\"SynchronousQueue: 直接提交的队列，没有容量，来一个任务执行一个，没有多余线程则执行拒绝策略\",\"ArrayBlockingQueue: 有界任务队列，构造时需指定容量\",\"LinkedBlockingQueue: 无界任务队列，默认容量Integer.MAX_VALUE，任务繁忙时会一直创建线程执行，直至资源耗尽\",\"PriorityBlockingQueue: 带有执行优先级的无界队列\",\"使用自定义线程池时，需要根据应用的具体情况，选择合适的并发队列为任务做缓冲。当线程资源紧张时，不同的并发队列对系统行为和性能的影响均不同。\"]},\"1108\":{\"h\":\"线程工厂\",\"t\":[\"ThreadFactory接口的实现类用来创建线程，接口定义了 Thread newThread(Runnable r) 用于创建新的线程，默认使用的是Executors.DefaultThreadFactory。\",\"// j.u.c.Executors.DefaultThreadFactory private static class DefaultThreadFactory implements ThreadFactory { private static final AtomicInteger poolNumber = new AtomicInteger(1); private final ThreadGroup group; private final AtomicInteger threadNumber = new AtomicInteger(1); private final String namePrefix; DefaultThreadFactory() { SecurityManager s = System.getSecurityManager(); group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup(); namePrefix = \\\"pool-\\\" + poolNumber.getAndIncrement() + \\\"-thread-\\\"; } public Thread newThread(Runnable r) { Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0); if (t.isDaemon()) t.setDaemon(false); if (t.getPriority() != Thread.NORM_PRIORITY) t.setPriority(Thread.NORM_PRIORITY); return t; } }\"]},\"1109\":{\"h\":\"拒绝策略\",\"t\":[\"当线程池中的线程已经达到最大线程数，任务队列也已经填满的情况，将对新来的任务执行某种拒绝策略，所有的策略需要实现RejectedExecutionHandler接口。ThreadPoolExecutor 内置了以下四种策略：\",\"AbortPolicy: 默认策略，丢弃并抛出RejectedExecutionException异常\",\"CallersRunsPolicy: 绕过线程池，由主线程直接调用任务的run()方法执行\",\"DiscardOldestPolicy: 抛弃队列中等待最久的任务，然后尝试再次提交当前任务\",\"DiscardPolicy: 丢弃且不抛异常\",\"其它框架也提供了更丰富的实现，例如：\",\"Dubbo 在抛出 RejectedExecutionException 异常之前会记录日志，并 dump 线程栈信息，方便定位问题\",\"Netty 会创建一个新线程来执行任务\",\"ActiveMQ 会设定超时等待，尝试放入队列\",\"PinPoint 使用拒绝策略链，然后逐一尝试链中每种拒绝策略\"]},\"1110\":{\"h\":\"Executors\",\"t\":[\"Executor 框架内置了Executors工具类，基于 ThreadPoolExecutor 创建特定的线程池。常用线程池包括：\",\"SingleThreadExecutor: \",\"只有一个核心线程的线程池，多余任务都放到无界任务队列中排队\",\"FixedThreadPool: \",\"固定线程数量的线程池，只有核心线程\",\"新任务提交时，若有空闲线程立即执行，否则暂存在一个无界的任务队列中\",\"CachedThreadPool: \",\"可调整线程数量的线程池，采用 SynchronousQueue 阻塞式任务队列，且只有非核心线程。\",\"新任务提交时，优先使用可复用线程，否则创建新线程处理任务，最多 Integer.MAX_VALUE 个\",\"所有线程完成后返回线程池，空闲线程有存活时间，超时回收\",\"Executor 还提供Executors.newScheduledThreadPool(n)，返回一个可以执行延迟/定时任务的线程池 ScheduledExecutorService，相比使用单线程的 Timer 定时任务功能更加强大且安全高效。不过如果中途任务出现异常，后续执行会被中断。\",\"// 延迟执行任务 public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit); // 循环执行任务，但必须等上一个任务执行完才会开始下一个 public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit); // 循环执行任务，上一个任务执行完间隔 delay 后开始下一个 public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit);\",\"不过阿里巴巴开发规约里不建议使用 Executors 创建线程池，更推荐开发者自己定义线程池的各个参数，以更加深入的理解参数的设定，同时：\",\"FixedThreadPool 和 SingleThreadExecutor 使用的是无界的 LinkedBlockingQueue，任务队列最大长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。\",\"CachedThreadPool 使用的是同步队列 SynchronousQueue, 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。\",\"ScheduledThreadPool 和 SingleThreadScheduledExecutor 使用的无界的延迟阻塞队列DelayedWorkQueue，任务队列最大长度为Integer.MAX_VALUE，可能堆积大量的请求，从而导致 OOM。\"]},\"1111\":{\"h\":\"类层级结构\",\"t\":[\"Executor顶层接口里只定义了一个execute(Runable)执行任务的接口方法\",\"子接口 ExecutorService 拓展了 Executor，定义了更多提交任务、执行多个任务，并将结果封装成 Future 的方法，以及关闭线程池的接口方法\",\"AbstractExecutorService 则是上层的抽象类，通过模板方式定义了一些方法的默认实现，将执行任务的流程串联起来，使得下层的具体实现只要关注具体执行任务的方法即可\",\"具体的实现类 ThreadPoolExecutor 一方面维护自身的生命周期，另一方面同时管理线程和任务，使两者良好的结合从而执行并行任务\"]},\"1112\":{\"h\":\"ctl 变量\",\"t\":[\"ctl 变量是一个 AtomicInteger，聚合了线程池的状态和线程数量两个域，可以保证同时对这两个域的修改是原子的，提高了效率并减少了竞态条件的可能性。\",\"ctl 的高 3bits 表示线程池的运行状态，运行状态为负，其他状态非负，状态值的大小顺序为：Running < SHUTDOWN < STOP < TIDYING < TERMINATED；ctl 的低 29bits 为当前池中的线程数量，因此目前线程池最多支持 $2^{29}-1$，大约 50000 万个线程。\",\"private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0)); // 29 workerCount 位数 private static final int COUNT_BITS = Integer.SIZE - 3; // 000 11111111111111111111111111111 workerCount 的掩码 private static final int COUNT_MASK = (1 << COUNT_BITS) - 1; // 高三位表示 runState // 111 00000000000000000000000000000 private static final int RUNNING = -1 << COUNT_BITS; // 000 00000000000000000000000000000 private static final int SHUTDOWN = 0 << COUNT_BITS; // 001 00000000000000000000000000000 private static final int STOP = 1 << COUNT_BITS; // 010 00000000000000000000000000000 private static final int TIDYING = 2 << COUNT_BITS; // 011 00000000000000000000000000000 private static final int TERMINATED = 3 << COUNT_BITS; // 获取当前线程池的运行状态,即取前3位 private static int runStateOf(int c) { return c & ~COUNT_MASK; } // 获取工作线程数量,即取后29位 private static int workerCountOf(int c) { return c & COUNT_MASK; } // 聚合 runState 和 workerCount private static int ctlOf(int rs, int wc) { return rs | wc; }\",\"线程池的五种状态转换关系：\",\"RUNNING：接受新任务，并处理入队任务\",\"SHUTDOWN：不接受新任务，但处理入队任务\",\"STOP：不接受新任务，不处理入队任务，并中断进行中的任务\",\"TIDYING：所有任务已终止，workCount=0，并且会执行 terminated()\",\"TERMINATED：terminated() 执行完后的状态\"]},\"1113\":{\"h\":\"提交任务\",\"t\":[\"提交任务包括两个方法：\",\"submit：定义在 AbstractExecutorService 中，既可以提交 Runnable，也可以提交 Callable，还可以指定成功的返回值\",\"execute：定义在 ThreadPoolExecutor 中，仅能提交 Runnable\",\"submit 功能更加强大，本质上是将传进来的任务包装成一个 FutureTask 然后交由 execute 执行，而 execute 是真正意义上提交任务到线程池去执行。提交任务返回一个 Future 对象，可以通过它的 get() 方法获取任务执行过程中出现的异常信息。\",\"// java.util.concurrent.AbstractExecutorService#submit public <T> Future<T> submit(Runnable task, T result) { if (task == null) throw new NullPointerException(); RunnableFuture<T> ftask = newTaskFor(task, result); execute(ftask); return ftask; } // java.util.concurrent.AbstractExecutorService#submit public <T> Future<T> submit(Callable<T> task) { if (task == null) throw new NullPointerException(); RunnableFuture<T> ftask = newTaskFor(task); execute(ftask); return ftask; } // java.util.concurrent.ThreadPoolExecutor#execute public void execute(Runnable command) { if (command == null) throw new NullPointerException(); int c = ctl.get(); // 1. worker 数量 < corePoolSize => addWorker 新增核心线程 if (workerCountOf(c) < corePoolSize) { if (addWorker(command, true)) return; c = ctl.get(); } // 2. worker 数量 >= corePoolSize => 提交到任务队列 if (isRunning(c) && workQueue.offer(command)) { int recheck = ctl.get(); // 重新校验线程池，如果正在停止就移除任务然后执行拒绝 if (!isRunning(recheck) && remove(command)) reject(command); // worker = 0（例如 corePoolSize = 0），新增非核心线程 else if (workerCountOf(recheck) == 0) addWorker(null, false); } // 3. 任务队列已满 => 新增非核心线程 else if (!addWorker(command, false)) // 4. 失败 => 拒绝策略 reject(command); }\",\"JDK 还提供了一些用于执行任务集合的方法：\",\"// 提交任务 task，用返回值 Future 获得任务执行结果 <T> Future<T> submit(Callable<T> task); // 提交 tasks 中所有任务 <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) // 提交 tasks 中所有任务，带超时时间 <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) // 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消 <T> T invokeAny(Collection<? extends Callable<T>> tasks) // 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消，带超时时间 <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\"]},\"1114\":{\"h\":\"addWorker\",\"t\":[\"Worker 继承自 AQS，通过 CLH 队列来实现独占锁，一旦通过 lock 上锁，表示当前线程正在执行任务，不应被中断，否则就是空闲状态没有在处理任务。当线程池执行 shutdown 后，会通过 interruptIdleWorkers 去尝试中断空闲线程，里面会调用实现了 AQS 的 tryLock() 判断当前线程是否空闲来决定是否回收。\",\"private final class Worker extends AbstractQueuedSynchronizer implements Runnable { final Thread thread; // 关联的线程 Runnable firstTask; // 第一个任务 volatile long completedTasks; // 完成的任务数 Worker(Runnable firstTask) { setState(-1); this.firstTask = firstTask; this.thread = getThreadFactory().newThread(this); } // 定义在 ThreadPoolExecutor 中 public void run() { runWorker(this); } // 基于 AQS 的 lock, tryLock, unlock 等等... }\",\"addWorker 分两个大的步骤：\",\"workerCount +1\",\"创建 Worker 实例加入 workers 集合并运行任务\",\"private boolean addWorker(Runnable firstTask, boolean core) { // 1. worker 计数 +1 retry: for (int c = ctl.get();;) { // 1.1 校验状态 if (runStateAtLeast(c, SHUTDOWN) && (runStateAtLeast(c, STOP) || firstTask != null || workQueue.isEmpty())) return false; for (;;) { // 1.2 校验线程数 if (workerCountOf(c) >= ((core ? corePoolSize : maximumPoolSize) & COUNT_MASK)) return false; // 1.3 CAS 线程数 +1 如果成功，就跳出 retry 开始创建 Worker if (compareAndIncrementWorkerCount(c)) break retry; // 1.4 状态发生变化重试 c = ctl.get(); if (runStateAtLeast(c, SHUTDOWN)) continue retry; } } // 2. 创建 Worker 加入 workers 集合，并运行任务 boolean workerStarted = false; boolean workerAdded = false; Worker w = null; try { // 2.1 创建 Worker 对象 w = new Worker(firstTask); final Thread t = w.thread; if (t != null) { // 安全访问 worker 集合 final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try { // 2.2 校验状态 int c = ctl.get(); if (isRunning(c) || (runStateLessThan(c, STOP) && firstTask == null)) { if (t.getState() != Thread.State.NEW) throw new IllegalThreadStateException(); // 2.3 加入集合 workers.add(w); workerAdded = true; int s = workers.size(); if (s > largestPoolSize) largestPoolSize = s; } } finally { mainLock.unlock(); } // 2.4 启动线程执行 firstTask if (workerAdded) { t.start(); workerStarted = true; } } } finally { // 安全清理工作 if (!workerStarted) addWorkerFailed(w); } return workerStarted; }\"]},\"1115\":{\"h\":\"runWorker\",\"t\":[\"创建 Worker 的时候，是把 worker 自己（实现了 Runnable）作为参数传入 Thread 构造器，所以 worker.thread.start() 实际就是运行 Worker::run() -> ThreadPoolExecutor::runWorker 方法。\",\"在 runWorker() 里，worker 不断从任务队列里获取任务，执行任务前置 -> 业务 -> 任务后置。而在获取任务的方法 getTask() 里，worker 根据是否设定超时，通过 poll/take 从任务队列中阻塞式获取任务并返回。从中也可以看出其实线程池内部是不区分核心/非核心线程的，都是通过当前线程池中的 Worker 个数和任务队列的状态来判断是否移除或添加 worker。\",\"// java.util.concurrent.ThreadPoolExecutor#addWorker final void runWorker(Worker w) { Thread wt = Thread.currentThread(); Runnable task = w.firstTask; w.firstTask = null; // Worker 构造方法里 setState(-1) 加锁了，这里解锁以允许中断 w.unlock(); boolean completedAbruptly = true; try { // 不断循环从 workQueue 中获取任务 while (task != null || (task = getTask()) != null) { // 一个 worker 同一时间仅执行一个任务 w.lock(); // 校验状态（已停止/worker被中断） if ((runStateAtLeast(ctl.get(), STOP) || (Thread.interrupted() && runStateAtLeast(ctl.get(), STOP))) && !wt.isInterrupted()) wt.interrupt(); try { // 执行前 hook beforeExecute(wt, task); try { task.run(); // 执行后 hook afterExecute(task, null); } catch (Throwable ex) { afterExecute(task, ex); throw ex; } } finally { // 清理和统计工作 task = null; w.completedTasks++; w.unlock(); } } completedAbruptly = false; } finally { // 没有任务需要处理，从 workers 集合中移除当前 worker // 并判断是否需要添加新 worker processWorkerExit(w, completedAbruptly); } } // java.util.concurrent.ThreadPoolExecutor#getTask private Runnable getTask() { boolean timedOut = false; for (;;) { int c = ctl.get(); // 状态校验（进行shutdown并且队列为空，需要退出 worker） if (runStateAtLeast(c, SHUTDOWN) && (runStateAtLeast(c, STOP) || workQueue.isEmpty())) { decrementWorkerCount(); return null; } int wc = workerCountOf(c); boolean timed = allowCoreThreadTimeOut || wc > corePoolSize; // 线程过多，剔除多余 worker if ((wc > maximumPoolSize || (timed && timedOut)) && (wc > 1 || workQueue.isEmpty())) { if (compareAndDecrementWorkerCount(c)) return null; continue; } try { // 如果开启定时，使用 poll 限时阻塞，否则使用 take 无限阻塞 Runnable r = timed ? workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) : workQueue.take(); if (r != null) return r; timedOut = true; } catch (InterruptedException retry) { timedOut = false; } } }\"]},\"1116\":{\"h\":\"关闭\",\"t\":[\"ThreadPoolExecutor 中有两个关闭的方法，它们将改变线程池至不同的运行状态：\",\"shutdown() -> SHUTDOWN 中断空闲线程\",\"shutdownNow() -> STOP 强制中断所有线程\",\"为了保证线程安全，在 ThreadPoolExecutor 中，凡是需要操作 workers 集合的地方都需要锁上 mainLock 这个 ReentrantLock。\",\"public void shutdown() { final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try { // SecurityManager 检查 checkShutdownAccess(); // 提升状态至 SHUTDOWN advanceRunState(SHUTDOWN); // 中断所有空闲线程 interruptIdleWorkers(); // 关闭 hook onShutdown(); } finally { mainLock.unlock(); } tryTerminate(); } public List<Runnable> shutdownNow() { List<Runnable> tasks; final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try { checkShutdownAccess(); // 提升状态至 STOP advanceRunState(STOP); // 强行中断所有线程 interruptWorkers(); // 返回任务队列里尚未完成的任务 tasks = drainQueue(); } finally { mainLock.unlock(); } tryTerminate(); return tasks; }\",\"无论是 shutdown 还是 shutdownNow，最后都会执行 tryTerminate()，进入 TYDING 状态，执行完空的 terminated() 后进入 TERMINATED 终止状态。现在再回过去看线程池状态转换就清楚多了。\",\"final void tryTerminate() { // for (;;) { int c = ctl.get(); if (isRunning(c) || runStateAtLeast(c, TIDYING) || (runStateLessThan(c, STOP) && ! workQueue.isEmpty())) return; // workerCount > 0 清理一个空闲 worker 后返回 if (workerCountOf(c) != 0) { // Eligible to terminate interruptIdleWorkers(ONLY_ONE); return; } // 走到这里说明 workerCount = 0，可以终止了 final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try { // 设置 TIDYING 状态 if (ctl.compareAndSet(c, ctlOf(TIDYING, 0))) { try { terminated(); } finally { // 执行完 terminated() 后进入 TERMINATED 状态 ctl.set(ctlOf(TERMINATED, 0)); termination.signalAll(); } return; } } finally { mainLock.unlock(); } // else retry on failed CAS } }\"]},\"1117\":{\"h\":\"整体逻辑框图\",\"t\":[\"来自 https://juejin.cn/post/6926471351452565512 的一幅图，画的太好了，一图了解线程池工作原理。\"]},\"1118\":{\"h\":\"应用\"},\"1119\":{\"h\":\"线程数量\",\"t\":[\"CPU 密集型运算\",\"通常采用 cpu 核数 + 1 能够实现最优的 CPU 利用率，+1 是保证当线程由于页缺失故障（操作系统）或其它原因导致暂停时，额外的这个线程就能顶上去，保证 CPU 时钟周期不被浪费。\",\"IO 密集型运算\",\"当执行 I/O 操作时、远程 RPC 调用、数据库操作时，CPU 闲下来就可以利用多线程提高它的利用率。《Java Concurrency in Practice》一书给出了估算线程数量的公式：\",\"$$N_{threads} = N_{cpu} \\\\times U_{cpu} \\\\times (1 + \\\\frac{W}{C})$$\",\"其中， $ N_{cpu} = CPU的数量 $ $ U_{cpu} = 目标CPU的使用率 0-1 之间 $ $ \\\\frac{W}{C} = 等待时间与计算时间的比率 $\",\"但实际中还是需要通过测试得到业务最佳的参数配置，所以动态线程池参数是一个更好的选择。\"]},\"1120\":{\"h\":\"动态线程池参数\",\"t\":[\"小小总结一下 —— Java线程池实现原理及其在美团业务中的实践\",\"实际生产中需要并发性的场景主要有两个：\",\"并行执行子任务，提高响应速度。也就是说任务不应该缓存下来慢慢执行，而应立即执行，所以要尽量使用同步队列。\",\"并行执行大批次任务，提升吞吐量。即应该用队列去缓存大批量的任务，但队列必须有界，防止无限制堆积。\",\"实际中线程池的参数是比较难以设置的，通常需要实际生产环境的验证得到一个较好的参数值，但是面对某些突发的情况又要及时做出调整，如果写死在代码里，修改并重写部署的成本会比较高，因此美团内部采用了动态线程池的方案。\",\"线程池的构造参数有8个，但其中最核心的就三个：corePoolSize、maximumPoolSize、workQueue，基本决定了线程池的任务分配和线程分配策略。ThreadPoolExecutor 正好提供了一系列核心配置的 setter/getter 方法，提供了可以动态修改的可能性。此外，一系列队列任务相关的 API 可以实现线程池的多维度实时监控。\",\"public void setCorePoolSize(int corePoolSize) { // 校验 if (corePoolSize < 0 || maximumPoolSize < corePoolSize) throw new IllegalArgumentException(); // 差值 int delta = corePoolSize - this.corePoolSize; this.corePoolSize = corePoolSize; // 如果现有的worker大于corePoolSize，中断空闲的worker if (workerCountOf(ctl.get()) > corePoolSize) interruptIdleWorkers(); else if (delta > 0) { // 否则尝试增加新的 worker int k = Math.min(delta, workQueue.size()); while (k-- > 0 && addWorker(null, true)) { if (workQueue.isEmpty()) break; } } } public int getCorePoolSize() { return corePoolSize; } public void setMaximumPoolSize(int maximumPoolSize) { ... } public int getMaximumPoolSize() { return maximumPoolSize; } public void setKeepAliveTime(long time, TimeUnit unit) { ... } public long getKeepAliveTime(TimeUnit unit) { return unit.convert(keepAliveTime, TimeUnit.NANOSECONDS); } public void setRejectedExecutionHandler(RejectedExecutionHandler handler) { ... } public RejectedExecutionHandler getRejectedExecutionHandler() { return handler; } public void setThreadFactory(ThreadFactory threadFactory) { ... } public ThreadFactory getThreadFactory() { return threadFactory; } public BlockingQueue<Runnable> getQueue() { return workQueue; } ......\"]},\"1121\":{\"h\":\"参考\",\"t\":[\"https://juejin.cn/post/6926471351452565512\",\"https://www.cnblogs.com/yougewe/p/12267274.html\",\"https://www.cnblogs.com/chdf/p/11572889.html\",\"Java线程池实现原理及其在美团业务中的实践\"]},\"1122\":{\"c\":[\"Java\"]},\"1123\":{\"c\":[\"并发\"]},\"1124\":{\"h\":\"RPC-Thrift\",\"t\":[\"Thrift 是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务，被当作一个远程过程调用（RPC）框架来使用。\"]},\"1125\":{\"h\":\"使用步骤\",\"t\":[\"通过 IDL 定义需要远程方法调用的接口\",\"通过 thrift 编译器生成代码，包含接口定义、Client、Processor等，用于结构化数据的解析、发送、接受 thrift -r -gen java file\",\"创建实现类定义具体的远程执行逻辑\",\"Server 端通过定义具体的远程执行逻辑，创建服务器\",\"System.out.println(\\\"服务端开启......\\\"); TProcessor tProcessor=new Hello.Processor<Hello.Iface>(new HelloImpl()); TServerSocket serverSocket = new TServerSocket(8999); TServer.Args tArgs = new TServer.Args(serverSocket); tArgs.processor(tProcessor); tArgs.protocolFactory(new TBinaryProtocol.Factory()); TServer server = new TSimpleServer(tArgs); server.serve();\",\"Client 端通过创建实现了指定接口的Client调用对应的远程方法\",\"System.out.println(\\\"客户端启动.....\\\"); TTransport transport = new TSocket(\\\"localhost\\\", 8999, 30000); // 协议要和服务端一致 TProtocol protocol = new TBinaryProtocol(transport); Hello.Client client = new Hello.Client(protocol); transport.open(); String result = client.helloWorld(\\\"Client invoke -- \\\"); System.out.println(result);\"]},\"1126\":{\"h\":\"框架层次\",\"t\":[\"Thrift是一种C/S的架构体系.在最上层是用户自行实现的业务逻辑代码\",\"第二层是由Thrift编译器自动生成的代码，主要用于结构化数据的解析，发送和接收。 \",\"TServer主要任务是高效的接受客户端请求，并将请求转发Processor处理。\",\"Processor负责对客户端的请求做出响应，包括RPC请求转发，调用参数解析和用户逻辑调用，返回值写回等处理。\",\"从TProtocol以下部分是thirft的传输协议和底层I/O通信。 \",\"TProtocol是用于数据类型解析的，将结构化数据转化为字节流给TTransport进行传输。\",\"TTransport是与底层数据传输密切相关的传输层，负责以字节流方式接收和发送消息体，不关注是什么数据类型。\",\"底层IO负责实际的数据传输，包括socket、文件和压缩数据流等。\"]},\"1127\":{\"h\":\"传输形式\"},\"1128\":{\"h\":\"数据类型\",\"t\":[\"Base Types：基本类型\",\"Struct：结构体类型\",\"Container：容器类型，即List、Set、Map\",\"Exception：异常类型\",\"Service： 定义对象的接口，和一系列方法\"]},\"1129\":{\"h\":\"协议\",\"t\":[\"总体上分 文本text 和 二进制binary 两种格式，一般为了节省带宽使用 binary。\",\"TBinaryProtocol – 二进制编码格式进行数据传输。\",\"TCompactProtocol – 这种协议非常有效的，使用Variable-Length Quantity (VLQ) 编码对数据进行压缩。\",\"TJSONProtocol – 使用JSON的数据编码协议进行数据传输。\",\"TSimpleJSONProtocol – 这种节约只提供JSON只写的协议，适用于通过脚本语言解析。\",\"TDebugProtocol – 在开发的过程中帮助开发人员调试用的，以文本的形式展现方便阅读。\"]},\"1130\":{\"h\":\"传输层\",\"t\":[\"TSocket- 使用堵塞式I/O进行传输，也是最常见的模式。\",\"TFramedTransport- 使用非阻塞方式，按块的大小，进行传输，类似于Java中的NIO。\",\"TFileTransport- 顾名思义按照文件的方式进程传输，虽然这种方式不提供Java的实现，但是实现起来非常简单。\",\"TMemoryTransport- 使用内存I/O，就好比Java中的ByteArrayOutputStream实现。\",\"TZlibTransport- 使用执行zlib压缩，不提供Java的实现。\"]},\"1131\":{\"h\":\"服务端类型\",\"t\":[\"TSimpleServer - 单线程服务器端使用标准的堵塞式I/O。\",\"TThreadPoolServer - 多线程服务器端使用标准的堵塞式I/O。\",\"TNonblockingServer – 多线程服务器端使用非堵塞式I/O，并且实现了Java中的NIO通道。\"]},\"1132\":{\"c\":[\"分布式\"]},\"1133\":{\"c\":[\"RPC\"]},\"1134\":{\"h\":\"Unsafe 源码阅读\",\"t\":[\"Unsafe 是 JDK 提供了一个工具类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升 Java 运行效率、增强 Java 语言底层资源操作能力方面起到了很大的作用。但由于 Unsafe 类使 Java 语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。\"]},\"1135\":{\"h\":\"获取对象\",\"t\":[\"JDK 里面有两个 Unsafe，jdk.internal.misc.Unsafe 和 sun.misc.Unsafe，其中 internal 包仅用于 JDK 内部，自己的程序里面无法导入，sun 包里的 Unsafe 则是组合了一个 internal 的 Unsafe，所有操作都委派给 theInternalUnsafe 完成，因此我们可以通过 sun 包的 Unsafe 实现不安全操作。\",\"// sun.misc.Unsafe public final class Unsafe { static { Reflection.registerMethodsToFilter(Unsafe.class, Set.of(\\\"getUnsafe\\\")); } private Unsafe() {} private static final Unsafe theUnsafe = new Unsafe(); // 委派模式 private static final jdk.internal.misc.Unsafe theInternalUnsafe = jdk.internal.misc.Unsafe.getUnsafe(); @CallerSensitive public static Unsafe getUnsafe() { Class<?> caller = Reflection.getCallerClass(); if (!VM.isSystemDomainLoader(caller.getClassLoader())) throw new SecurityException(\\\"Unsafe\\\"); return theUnsafe; } } // jdk.internal.misc.VM#isSystemDomainLoader public static boolean isSystemDomainLoader(ClassLoader loader) { // 一些实现用 null 指代 Bootstrap 类加载器 return loader == null || loader == ClassLoader.getPlatformClassLoader(); }\",\"Unsafe 构造方法是私有的，只通过静态方法 getUnsafe 对外提供单例接口，并且内部校验必须是 Bootstrap/Platform 类加载器加载的类才可以获取。因此我们通常用反射来拿到 Unsafe 实例：\",\"public static Unsafe getUnsafe() { try { Field f = Unsafe.class.getDeclaredField(\\\"theUnsafe\\\"); f.setAccessible(true); return (Unsafe) f.get(null); } catch (IllegalAccessException | NoSuchFieldException e) { log.error(e.getMessage(), e); return null; } }\",\"一些文章里用-Xbootclasspath/a参数指定包的类加载器，但在 JDK 9 之后已经废弃了，无法使用。\"]},\"1136\":{\"h\":\"内存操作\",\"t\":[\"不同于堆内存由 JVM 管理，Unsafe 可以实现堆外内存的管理，包括给定地址值操作、分配、拷贝、释放等等。\",\"// 分配内存 public long allocateMemory(long bytes); // 扩充内存 public long reallocateMemory(long address, long bytes); // 指定内存地址设值 public void setMemory(Object o, long offset, long bytes, byte value); public void setMemory(long address, long bytes, byte value); // 拷贝内存 public void copyMemory(Object srcBase, long srcOffset,Object destBase, long destOffset, blong bytes); public void copyMemory(long srcAddress, long destAddress, long bytes); // 释放内存 public void freeMemory(long address);\",\"Java 使用堆外内存（Off-Heap Memory）主要有以下一些好处：\",\"直接内存访问： 堆外内存是直接在操作系统的本地内存中分配的，而不是在 Java 虚拟机的堆内存中。这使得可以通过本地指针直接对内存进行读写，而无需经过 Java 堆的垃圾回收机制。\",\"减少堆内存压力： 将一些大型数据结构或缓存放在堆外内存中可以减轻 Java 堆的压力。堆外内存的分配和释放不受 Java 垃圾回收机制的管理，因此可以更灵活地控制内存的使用。\",\"避免垃圾回收影响： 在某些应用中，特别是需要处理大量数据的高性能应用，使用堆外内存可以避免频繁的垃圾回收对性能的影响。因为堆外内存的管理不依赖于 Java 虚拟机的垃圾回收机制，不会产生不可预测的暂停。\",\"共享内存： 堆外内存可以在多个 Java 进程之间共享。这对于需要在不同的 JVM 实例之间传递数据或共享缓存等场景非常有用。\",\"减小堆内存占用： 对于一些不受 Java 垃圾回收管理的大型数据结构，将其放在堆外内存中可以减小 Java 堆的占用，使得堆内存可以更好地服务于其他 Java 对象。\",\"提高内存分配速度： 堆外内存的分配速度相对较快，因为它避免了 Java 堆内存中对象的初始化和垃圾回收处理。\",\"尽管堆外内存有这些优势，但也需要注意一些潜在的问题，比如内存泄漏、难以调试等。在使用堆外内存时，需要仔细考虑内存管理和释放的责任，确保不会引入不稳定性或安全性问题。\",\"应用场景\",\"DirectByteBuffer是 Java 中创建堆外内存的重要方式，其内部就是通过 Unsafe 实现堆外内存操作的：\",\"DirectByteBuffer(int cap) { super(-1, 0, cap, cap, null); ... long base = 0; try { // 分配内存 base = UNSAFE.allocateMemory(size); } catch (OutOfMemoryError x) { Bits.unreserveMemory(size, cap); throw x; } // 内存初始化 UNSAFE.setMemory(base, size, (byte) 0); if (pa && (base % ps != 0)) { address = base + ps - (base & (ps - 1)); } else { address = base; } // 跟踪 DirectByteBuffer 对象的垃圾回收，实现堆外内存的释放 cleaner = Cleaner.create(this, new Deallocator(base, size, cap)); att = null; }\",\"其中 Cleaner 继承自 PhantomReference 虚引用，Unsafe 里提供了 public void invokeCleaner(java.nio.ByteBuffer directBuffer) 方法调用 Cleaner。关于 Cleaner 又是一大块内容了，以后看...\"]},\"1137\":{\"h\":\"CAS 相关\",\"t\":[\"借助底层的 CPU 指令CMPXCHG，实现 CAS 操作，在 AQS、JUC 里面都广泛应用。sun 包下只提供了这三个方法：\",\"public final boolean compareAndSwapInt(Object o, long offset, int expected, int x) { return theInternalUnsafe.compareAndSetInt(o, offset, expected, x); } public final boolean compareAndSwapLong(Object o, long offset, long expected, long x) { return theInternalUnsafe.compareAndSetLong(o, offset, expected, x); } public final boolean compareAndSwapLong(Object o, long offset, long expected, long x) { return theInternalUnsafe.compareAndSetLong(o, offset, expected, x); }\",\"internal 包里的 Unsafe 有更多的 CAS 操作，例如带 exchange 的交换值后返回原有值，Acquire/Release/weak 等关于 CPU 指令具体实现优化的等等，虽然好像源码里调用的是同一个，估计编译器会根据方法名做优化，可以参考 StackOverflow上的回答。\"]},\"1138\":{\"h\":\"线程调度\",\"t\":[\"LockSupport 的 park/unpark 底层就是执行 Unsafe 的 park/unpark。\",\"// 挂起一个线程 public void park(boolean isAbsolute, long time) // 恢复一个线程 public void unpark(Object thread)\"]},\"1139\":{\"h\":\"Class 相关\",\"t\":[\"// 获取给定静态字段的内存地址偏移量 public long staticFieldOffset(Field f); // 获取给定静态字段的对象指针 ublic Object staticFieldBase(Field f);\\\\ // 是否需要初始化 public boolean shouldBeInitialized(Class<?> c); // 是否已经初始化 public void ensureClassInitialized(Class<?> c); // internal#Unsafe，定义一个类，会跳过所有安全检查 public Class<?> defineClass(String name, byte[] b, int off, int len, ClassLoader loader, ProtectionDomain protectionDomain);\"]},\"1140\":{\"h\":\"对象操作\",\"t\":[\"// 获取指定字段偏移 public long objectFieldOffset(Field f); // 获取指定偏移的对象，类似还有 int/long/char... 等版本 public Object getObject(Object o, long offset)； // 设置指定偏移的对象，类似还有 int/long/char... 等版本 public void putObject(Object o, long offset, Object x); // 带 Volatile 语义的 public Object getObjectVolatile(Object o, long offset); // 有序、延迟版本的putObjectVolatile方法，不保证值的改变被其他线程立即看到 public void putOrderedObject(Object o, long offset, Object x); // 绕过构造方法创建对象 public Object allocateInstance(Class<?> cls);\"]},\"1141\":{\"h\":\"数组相关\",\"t\":[\"// 返回数组中第一个元素的偏移地址 public native int arrayBaseOffset(Class<?> arrayClass); // 返回数组中一个元素占用的大小 public native int arrayIndexScale(Class<?> arrayClass);\"]},\"1142\":{\"h\":\"内存屏障\",\"t\":[\"在Java 8中引入，用于定义内存屏障，避免代码重排序。内存屏障也称内存栅栏，内存栅障，屏障指令等，是一类同步屏障指令，是CPU或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作。\",\"// 内存屏障，禁止load操作重排序。屏障前的load操作不能被重排序到屏障后，屏障后的load操作不能被重排序到屏障前 public native void loadFence(); // 内存屏障，禁止store操作重排序。屏障前的store操作不能被重排序到屏障后，屏障后的store操作不能被重排序到屏障前 public native void storeFence(); // 内存屏障，禁止load、store操作重排序 public native void fullFence();\"]},\"1143\":{\"h\":\"系统相关\",\"t\":[\"// 返回系统指针的大小。返回值为4（32位系统）或 8（64位系统）。 public native int addressSize(); // 内存页的大小，此值为2的幂次方。 public native int pageSize();\"]},\"1144\":{\"h\":\"参考\",\"t\":[\"https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html\",\"https://juejin.cn/post/6933078830336704520\"]},\"1145\":{\"c\":[\"Java\"]},\"1146\":{\"c\":[\"并发\"]},\"1147\":{\"h\":\"Windows-WSL 实现MySQL主从同步\",\"t\":[\"本文介绍 Windows 连接 WSL 中的 MySQL 服务，并配置主从同步。\"]},\"1148\":{\"h\":\"Step0. 调整WSL下MySQL的密码安全策略 - 可选\",\"t\":[\"Linux下，MySQL默认的强密码策略比较麻烦，如果只在自己机器上实验可以先修改一下密码校验策略。查看当前的密码设置策略： SHOW variables LIKE 'validate_password%';\",\"show_password_policy\",\"其中，\",\"validate_password.check_user_name: 是否可以将用户名用作密码\",\"validate_password.dictionary_file: 密码策略文件，文件中存在的密码不得使用。仅STRONG策略下才生效\",\"validate_password.length: 密码长度限制\",\"validate_password.mixed_case_count: 大小写字母个数限制\",\"validate_password.number_count: 数字个数限制\",\"validate_password.policy: \",\"#0 or LOW: 限制 Length\",\"#1 or MEDIUM: 限制 Length; numeric, lowercase/uppercase, and special characters\",\"#2 or STRONG: 限制 Length; numeric, lowercase/uppercase, and special characters; dictionary file\",\"validate_password.special_char_count: 特殊字符个数限制\",\"这是MySQL 8.0之后validate_password组件提供的功能，如果查询得到validate_password__policy这样下划线拼接的变量则是validate_password的插件实现，存在于老版本的MySQL中。修改策略的话直接使用set命令：\",\"SET GLOBAL validate_password.policy=LOW; SET global validate_password.length = 1; ...\",\"然后就可以修改用户密码了\",\"alter user 'root'@'localhost' identified by '******'; flush privileges;\",\"MySQL服务重启后，部分字段可能会恢复默认值，需要重新设置。\"]},\"1149\":{\"h\":\"Step1. Windows 连接 WSL2 中的MySQL服务\"},\"1150\":{\"h\":\"取消地址绑定\",\"t\":[\"首先修改WSL下MySQL的配置 vim /etc/mysql/mysql.conf.d/mysqld.cnf 将 bind-address 和 mysqlx-bind-address 两行注释掉，取消只能从本机连接的限制\",\"注释bind\"]},\"1151\":{\"h\":\"创建远程连接用户\",\"t\":[\"Windows下默认root用户是无法连接WSL下的MySQL，因此需要在WSL下用root新建一个用于远程连接的用户。\",\"mysql -u root -p -- root用户没有SYSTEM_USER权限，需要先赋权 grant system_user on *.* to 'root'; -- 新建 test/123456 的用户 CREATE USER 'test'@'%' IDENTIFIED BY '123456'; GRANT ALL ON *.* TO 'test'@'%'; FLUSH PRIVILEGES;\"]},\"1152\":{\"h\":\"通过WSL地址连接服务\",\"t\":[\"然后我们在WSL中用ifconfig查询得到 WSL 的 IP 地址： \",\"这样就可以在 Windows 下连接 WSL 中的 MySQL 服务了: \"]},\"1153\":{\"h\":\"Step2. 配置主从同步\",\"t\":[\"这里我们让 Windows 上的 MySQL 作为 Master，WSL 上的 MySQL 作为 Slave。\"]},\"1154\":{\"h\":\"主库 Master 配置\",\"t\":[\"设置同步的数据库 Windows 系统的 MySQL 配置文件是安装目录下的 my.ini 文件，如果没有的话可以自己新建一个。然后打开输入以下内容：\",\"[mysqld] server-id=1 # 服务的id，每台机器必须都不一样 log-bin=mysql-bin # 二进制日志 binlog-ignore-db=mysql # 指定不需要复制的数据库 binlog-do-db=reggie # 指定需要复制的数据库，可以分多行指定。优先级大于 binlog-ignore-db\",\"创建新用户用于Slave来连接主库\",\"CREATE USER 'chanper'@'%' IDENTIFIED WITH mysql_native_password by '******'; -- 赋予从库复制权限 grant replication slave on *.* to 'chanper'@'%'; FLUSH PRIVILEGES;\",\"复制主库数据 如果主库先前已经有数据了，需要先把数据复制到从库中，可以通过mysqldump实现，idea中也有现成的导出导入操作。\",\"查看 Master 状态 执行 show master status; 命令：\",\"master_status\",\"关注 File, Position 两个值，后面配置从库时要用到。\"]},\"1155\":{\"h\":\"从库 Slave 配置\",\"t\":[\"修改 WSL 的 MySQL 配置 还是 vim /etc/mysql/mysql.conf.d/mysqld.cnf 这个文件，加入：\",\"[mysqld] server-id=2\",\"然后保存，并重启MySQL服务\",\"连接主库 登录WSL的MySQL，并执行：\",\"change master to master_host='172.29.96.1', master_port=3306, master_user='chanper', master_password='******', master_log_file='mysql-bin.000002', master_log_pos=547;\",\"各字段的含义都一眼便知，都是主库 Master 的配置信息\",\"启动并查看 Slave 状态\",\"start slave; -- 相应的停止同步就是 stop slave show slave status\\\\G; -- \\\\G-格式化输出\",\"slave_status\",\"如果 Slave_IO_Running 和 Slave_SQL_Running 都为 Yes 说明配置成功，其它的状态如No或者Connecting都说明配置有误或者网络无法连通。\",\"测试 先在 Slave 中执行查询语句，然后在 Master 中执行删除语句：\",\"master_test\",\"再在 Slave 中查询测试结果：\",\"slave_test\",\"至此，完成了 Windows 和 WSL 上 MySQL服务的主从同步配置。\"]},\"1156\":{\"h\":\"参考\",\"t\":[\"[1] https://blog.csdn.net/stklway/article/details/122360248 [2] https://blog.csdn.net/weixin_42580217/article/details/122583888 [3] https://www.chengxulvtu.com/set-up-mysql-8-master-slave-replication/\"]},\"1157\":{\"c\":[\"数据库\"]},\"1158\":{\"c\":[\"MySQL\"]},\"1159\":{\"h\":\"Zookeeper 学习笔记\"},\"1160\":{\"h\":\"基本介绍\"},\"1161\":{\"h\":\"概念\",\"t\":[\"ZooKeeper 是一种分布式协调服务，用于管理大型主机，目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。在分布式环境中协调和管理服务是一个复杂的过程。ZooKeeper 通过其简单的架构和 API 解决了这个问题。ZooKeeper 允许开发人员专注于核心应用程序逻辑，而不必担心应用程序的分布式特性。\"]},\"1162\":{\"h\":\"应用场景\",\"t\":[\"分布式应用程序可以基于 ZooKeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。\",\"分布式协调组件 Zookeeper 在分布式系统中作为协调组件，协调各个服务的状态。包括统一命名服务（注册中心）、统一配置管理（配置中心）、统一集群管理、软负载均衡等等。\",\"分布式组件协调\",\"分布式锁 Zookeeper 在实现分布式锁上，可以做到强一致性。相比于 Redis 实现分布式锁，性能较低但安全性较高。Redis 集群在 master 发生故障时，主从切换时是异步复制的，可能导致数据丢失，无法保证分布式锁的绝对安全。\",\"实现无状态化 类似于分布式 Session，存储多个服务公用的信息，以前放在 Redis 中，也可以放到 Zookeeper 中。\",\"实现无状态\"]},\"1163\":{\"h\":\"安装搭建\"},\"1164\":{\"h\":\"配置文件\",\"t\":[\"conf/zoo.cfg\",\"# zookeeper时间配置中的基本单位 (毫秒)，也是发送心跳的时间间隔 tickTime=2000 # follower初始化连接到leader最大时限，单位是tickTime initLimit=10 # follower与leader数据同步最大时限，单位是tickTime syncLimit=5 # 数据文件及持久化目录 dataDir=/tmp/zookeeper # 对客户端提供的端口号 clientPort=2181 # 单个zk节点的最大连接数 maxClientCnxns=60 # 保存的数据快照数量，多余的将会被清除 autopurge.snapRetainCount=3 # 自动触发清除任务时间间隔，单位是小时。默认为0，表示不自动清除。 autopurge.purgeInterval=1 # 内嵌的管理控制台端口，默认8080建议更换 admin.serverPort=8081\"]},\"1165\":{\"h\":\"操作命令\",\"t\":[\"# 启动 zkServer.sh start zoo.cfg # 查看状态 zkServer.sh status zoo.cfg # 重启 zkServer.sh restart zoo.cfg # 停止 zkServer.sh stop zoo.cfg\"]},\"1166\":{\"h\":\"数据模型\"},\"1167\":{\"h\":\"整体模型\",\"t\":[\"zk 可以看作一种文件系统+通知机制，其数据模型类似文件系统的目录树结构，由若干 znode 节点构成，数据也是保存在 znode 中，每个 znode 默认能够存储 1MB 数据。\",\"数据模型\",\"节点通过路径引用定位，每个 znode 拥有唯一的路径，类似命名空间一样对不同信息进行了清晰的隔离，例如/汽⻋/宝⻢。\"]},\"1168\":{\"h\":\"节点结构\",\"t\":[\"zk 中的 znode 包含了四个部分：\",\"data：保存数据\",\"acl：类似 Unix 系统的权限控制（Access Control List） \",\"c: create 创建权限，允许在该节点下创建子节点\",\"w: write 更新权限，允许更新该节点的数据\",\"r: read 读取权限，允许读取该节点的内容以及子节点的列表信息\",\"d: delete 删除权限，允许删除该节点的子节点\",\"a: admin 管理者权限，允许对该节点进行 acl 权限设置\",\"stat：描述节点的元数据，包括三个数据版本 \",\"version：当前 znode 版本\",\"cversion：当前 znode 子节点版本\",\"aclversion：当前 znode 的acl版本\",\"child：子节点\"]},\"1169\":{\"h\":\"节点类型\",\"t\":[\"持久节点\",\"在会话结束后依然存在的节点\",\"适合保存数据\",\"create /test1 <data>\",\"持久序号节点\",\"按执行先后在节点后带上一个单调递增的数值\",\"用于分布式锁\",\"create -s /test1/subnode1 <data>\",\"临时节点\",\"会话结束后会被自动删除\",\"可以用于服务注册与发现\",\"create -e /temp1 <data>\",\"临时序号节点\",\"带序号的临时节点\",\"用于临时的分布式锁\",\"create -e -s /temp2 <data>\",\"Container 节点\",\"容器节点\",\"当容器中没有任何子节点，该容器节点会被zk定期删除(60s)\",\"create -c /container <data>\",\"TTL 节点\",\"可以指定节点的到期时间，到期后被zk定时删除\",\"只能通过系统配置zookeeper.extendedTypesEnabled=true开启\",\"create -t <ttl> /node <data>\",\"节点心跳\",\"临时节点通过心跳维持连接，续约 sessionId 的有效期，zk 会定期删除没有续约的 sessionId 对应的临时节点。\"]},\"1170\":{\"h\":\"持久化\",\"t\":[\"zk 提供了两种数据持久化机制，和 Redis 的 AOF/RDB 非常类似。\",\"事务日志 zk 把执行的命令以日志形式保存在 dataLogDir/dataDir 指定的路径文件中。\",\"数据快照 zk 在一定的时间间隔内做一次内存数据的快照，把该时刻的内存数据保存在快照文件中。\",\"在指定的数据目录下，zookeeper_server.pid 是用于集群搭建的 pid 标识，version2子目录下的 log 文件就是事务日志，而 snapshot 就是数据快照。因此可以发现，zk 的两种持久化机制默认都是开启的，数据在恢复时先恢复快照文件中的数据到内存中，再用日志文件中的数据做增量恢复，以此来提高恢复速度。\"]},\"1171\":{\"h\":\"网络模式\",\"t\":[\"NIO 非阻塞 \",\"客户端连接端口使用 NIO 模式\",\"客户端开启 Watch 监听时也使用 NIO，等待服务器的回调\",\"BIO 阻塞式 \",\"选举时节点间的投票通信端口使用 BIO 进行通信\"]},\"1172\":{\"h\":\"zkCli 客户端\"},\"1173\":{\"h\":\"创建节点\",\"t\":[\"# Sequential | Ephemeral | Container | TTL create [-s] [-e] [-c] [-t ttl] path [data] [acl]\"]},\"1174\":{\"h\":\"查看节点\",\"t\":[\"# 查看节点结构。-s 详细信息 ｜ -R 递归查询子节点 ｜ -w 设置监视器 ls [-s] [-R] [-w] path # 查看节点数据。-s 详细信息 ｜ -w 设置监视器 get [-s] [-w] path\",\"查询结果：\",\"cZxid: 创建节点的事务ID\",\"mZxid:修改节点的事务ID\",\"pZxid: 添加和删除子节点的事务ID\",\"ctime: 节点创建的时间\",\"mtime: 节点最近修改的时间\",\"dataVersion: 节点内数据的版本，每更新一次数据，版本会+1\",\"aclVersion: 此节点的权限版本\",\"ephemeralOwner: 如果当前节点是临时节点，该值是当前节点所有者的 sessionId。否则该值为零。\",\"dataLength: 节点内数据的⻓度\",\"numChildren: 该节点的子节点个数\",\"其中，zxid 是事务id，每次向 zookeeper 写入或者修改数据时都会产生一个事务。它是 zookeeper 中所有修改的次序，如果 zxid1 小于 zxid2，那么 zxid1 对应的修改操作在 zxid2 之前发生。\"]},\"1175\":{\"h\":\"修改节点\",\"t\":[\"# -s 显示详细信息 ｜ -v CAS 验证版本号 set [-s] [-v version] path data\"]},\"1176\":{\"h\":\"删除节点\",\"t\":[\"# -v CAS 验证版本号 delete [-v version] path # 用于子节点非空的节点 deleteall path [-b batch size]\"]},\"1177\":{\"h\":\"设置权限\",\"t\":[\"# 注册当前会话的账号和密码 addauth digest chanper:123456 # 创建节点并设置权限 create /test-node abcd auth:xiaowang:123456:cdwra # 之后在另一个会话中必须先使用账号密码，才能拥有操作该节点的权限\"]},\"1178\":{\"h\":\"Curator 客户端\",\"t\":[\"Curator 是 Netflix 公司开源的一套 zookeeper 客户端框架，Curator 是对Zookeeper 支持最好的客户端框架。Curator 封装了大部分 Zookeeper 的功能，比如 Leader 选举、分布式锁等，减少了技术人员在使用 Zookeeper 时的底层细节开发工作。\"]},\"1179\":{\"h\":\"依赖\",\"t\":[\"<!--Curator--> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-framework</artifactId> <version>2.12.0</version> </dependency> <dependency> <groupId>org.apache.curator</groupId> <artifactId>curator-recipes</artifactId> <version>2.12.0</version> </dependency> <!--Zookeeper--> <dependency> <groupId>org.apache.zookeeper</groupId> <artifactId>zookeeper</artifactId> <version>3.7.1</version> </dependency>\"]},\"1180\":{\"h\":\"配置\",\"t\":[\"curator.retryCount=5 curator.elapsedTimeMs=5000 curator.connectString=localhost:2181 curator.sessionTimeoutMs=60000 curator.connectionTimeoutMs=5000\",\"// 注入配置 Bean @Data @Component @ConfigurationProperties(prefix = \\\"curator\\\") public class WrapperZK { private int retryCount; private int elapsedTimeMs; private String connectString; private int sessionTimeoutMs; private int connectionTimeoutMs; } // 注入CuratorFramework @Configuration public class CuratorConfig { @Autowired WrapperZK wrapperZk; @Bean(initMethod = \\\"start\\\") public CuratorFramework curatorFramework() { return CuratorFrameworkFactory.newClient( wrapperZk.getConnectString(), wrapperZk.getSessionTimeoutMs(), wrapperZk.getConnectionTimeoutMs(), new RetryNTimes(wrapperZk.getRetryCount(), wrapperZk.getElapsedTimeMs())); } }\"]},\"1181\":{\"h\":\"API\",\"t\":[\"@Slf4j @SpringBootTest class BootZkClientApplicationTests { @Autowired CuratorFramework curatorFramework; @Test void createNode() throws Exception { String path = curatorFramework.create().forPath(\\\"/curator-node\\\"); String path1 = curatorFramework.create().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath(\\\"/curator-node\\\", \\\"some-data\\\".getBytes()); System.out.println(String.format(\\\"curator create node :%s successfully.\\\", path)); } @Test public void testGetData() throws Exception { byte[] bytes = curatorFramework.getData().forPath(\\\"/curator-node\\\"); System.out.println(new String(bytes)); } @Test public void testSetData() throws Exception { curatorFramework.setData().forPath(\\\"/curator-node\\\", \\\"changed!\\\".getBytes()); byte[] bytes = curatorFramework.getData().forPath(\\\"/curator-node\\\"); System.out.println(new String(bytes)); } @Test public void testCreateWithParent() throws Exception { String pathWithParent = \\\"/node-parent/sub-node-1\\\"; String path = curatorFramework.create().creatingParentsIfNeeded().forPath(pathWithParent); System.out.println(String.format(\\\"curator create node :%s successfully.\\\", path)); } @Test public void testDelete() throws Exception { String pathWithParent = \\\"/node-parent\\\"; curatorFramework.delete().guaranteed().deletingChildrenIfNeeded().forPath(pathWithParent); } }\"]},\"1182\":{\"h\":\"分布式锁\"},\"1183\":{\"h\":\"锁的种类\",\"t\":[\"zk 中的锁分为两类：\",\"读锁: 共享可读，与写锁互斥\",\"写锁: 独占写锁，与读锁、写锁都互斥\"]},\"1184\":{\"h\":\"加读锁\",\"t\":[\"创建一个临时序号节点，节点数据是 read 表示是读锁\",\"获取当前 zk 中序号比自己小的所有节点\",\"判断最小节点是否是读锁 \",\"如果不是读锁的话，则上锁失败，阻塞等待并监听最小节点\",\"如果是读锁的话，则上锁成功\",\"zk加读锁\"]},\"1185\":{\"h\":\"加写锁\",\"t\":[\"创建一个临时序号节点，节点数据是 write 表示是写锁\",\"获取zk中所有的子节点\",\"判断自己是否是最小的节点 \",\"如果是，则上写锁成功\",\"如果不是，说明前面还有锁，则上锁失败，阻塞等待并监听最小的节点\",\"zk加写锁\"]},\"1186\":{\"h\":\"羊群效应\",\"t\":[\"如果用上述的加锁方式，只要有节点发生变化，就会触发其他所有节点的监听事件。这样的话对 zk 的压力非常大，即羊群效应。因此可以调整成链式监听。\",\"链式监听\",\"每个 znode 只监听自己临近的节点，这样序号最小的节点变化时只会触发后续一个节点的监听事件。\"]},\"1187\":{\"h\":\"对比 Redis\",\"t\":[\"Redis 集群性能非常高，但在 master 发生故障时，主从切换时是异步复制的，可能导致数据丢失，无法保证分布式锁的绝对安全。\",\"而 Zookeeper 在实现分布式锁上，可以做到强一致性。但是每次在创建和释放锁的过程中，都要动态创建、销毁临时节点，并且只能通过 Leader 服务器来执行，然后再将数据同步到所有的 Follower 机器上。因此相比 Redis 并发性能较低，开销较大。\"]},\"1188\":{\"h\":\"Curator 加锁\",\"t\":[\"@SpringBootTest public class TestReadWriteLock { @Autowired private CuratorFramework client; @Test void testGetReadLock() throws Exception { // 读写锁 InterProcessReadWriteLock interProcessReadWriteLock = new InterProcessReadWriteLock(client, \\\"/lock1\\\"); // 获取读锁对象 InterProcessLock interProcessLock = interProcessReadWriteLock.readLock(); System.out.println(\\\"等待获取读锁对象!\\\"); // 获取锁 interProcessLock.acquire(); for (int i = 1; i <= 100; i++) { Thread.sleep(3000); System.out.println(i); } // 释放锁 interProcessLock.release(); System.out.println(\\\"释放读锁!\\\"); } @Test void testGetWriteLock() throws Exception { // 读写锁 InterProcessReadWriteLock interProcessReadWriteLock = new InterProcessReadWriteLock(client, \\\"/lock1\\\"); // 获取写锁对象 InterProcessLock interProcessLock = interProcessReadWriteLock.writeLock(); System.out.println(\\\"等待获取写锁对象!\\\"); // 获取锁 interProcessLock.acquire(); for (int i = 1; i <= 100; i++) { Thread.sleep(3000); System.out.println(i); } // 释放锁 interProcessLock.release(); System.out.println(\\\"释放写锁!\\\"); } }\",\"启动两个 testGetReadLock() 测试实例，由于是读锁，因此两个实例不会发生阻塞，正常打印信息。当启动一个 testGetWriteLock() 测试实例时，会一直阻塞，直到前面两个读锁测试结束，才会开始打印。\"]},\"1189\":{\"h\":\"Watch 机制\",\"t\":[\"Watch 即注册在特定 znode 上的触发器，当这个 znode 发生变化，也就是调用create, delete, setData等方法时，会触发 znode 上注册的监听事件，请求注册 Watch 的客户端会接收到 NIO 异步通知。\",\"ZK 的 Watch 监听是一次性的，触发后需要重复注册监听，并且不能保证客户端收到每次节点变化的通知。\"]},\"1190\":{\"h\":\"实现原理\",\"t\":[\"客户端在监听的时候会创建两个子线程，一个负责网络通信（connector），另一个负责监听（listener）。通过 connector 将注册的监听事件发送给服务端，服务端将注册的监听事件添加进内部维护的注册监听器列表中。当服务端监听到有数据变化，会查询列表找到所有 watcher 并发送异步通知给 listener 线程，然后 listener 线程将消息输出出来。\"]},\"1191\":{\"h\":\"zkCli 监听\",\"t\":[\"create /test xxx # 一次性监听节点 get -w /test # 监听目录，创建和删除子节点会收到通知。但子节点中再新增节点不会收到通知 ls -w /tes # 监听子节点中子节点的变化，但内容的变化不会收到通知 ls -R -w /test\"]},\"1192\":{\"h\":\"Curator 监听\",\"t\":[\"@Test public void addNodeListener() throws Exception { NodeCache nodeCache = new NodeCache(curatorFramework, \\\"/curator-node\\\"); nodeCache.getListenable().addListener(new NodeCacheListener() { @Override public void nodeChanged() throws Exception { byte[] bytes = curatorFramework.getData().forPath(\\\"/curator-node\\\"); log.info(\\\"{} path node Changed, data: {}\\\", \\\"/curator-node\\\", new String(bytes)); } }); nodeCache.start(); System.in.read(); }\"]},\"1193\":{\"h\":\"集群\"},\"1194\":{\"h\":\"集群角色\",\"t\":[\"Leader: 处理集群的所有事务请求，进行投票的发起和决议，更新系统状态。集群中只有一个 Leader\",\"Follower: 只能处理读请求，参与 Leader 选举\",\"Observer: 只能处理读请求，提升集群读的性能，不参与 Leader 选举。\",\"zk集群角色\",\"ZooKeeper 每个节点拥有集群的全量数据，因此扩容 Observer 能分摊 connections、watch数、读请求，但不能分摊写请求和 Znode 的数量与大小，而且集群越大，写请求时Leader所需的事务协调工作也越多。因此需要根据实际的业务决定节点数量。\"]},\"1195\":{\"h\":\"集群搭建\"},\"1196\":{\"h\":\"创建 zoo.cfg\",\"t\":[\"tickTime=2000 initLimit=10 syncLimit=5 # 每个实例对应的数据目录 dataDir=/tmp/zookeeper/zk1 # 每个实例用于客户端连接的端口 clientPort=2181 # 服务之间的关联。其中第一列端口用于集群内部通信，第二列端口用于集群选举 # observer 表示该节点是观察者角色，不参与选举 server.1=127.0.0.1:2001:3001 server.2=127.0.0.1:2002:3002 server.3=127.0.0.1:2003:3003 server.4=127.0.0.1:2004:3004:observer\"]},\"1197\":{\"h\":\"创建 myid\",\"t\":[\"# 分别在每个实例的数据目录下创建 myid 标识 /tmp/zookeeper/zk1# echo 1 > myid /tmp/zookeeper/zk2# echo 2 > myid /tmp/zookeeper/zk3# echo 3 > myid /tmp/zookeeper/zk4# echo 4 > myid\"]},\"1198\":{\"h\":\"启动所有 zk 实例\",\"t\":[\"zhServer.sh start zoo1.cfg zhServer.sh start zoo2.cfg zhServer.sh start zoo3.cfg zhServer.sh start zoo4.cfg\"]},\"1199\":{\"h\":\"连接 zk 集群\",\"t\":[\"zkCli.sh -server localhost:2181,localhost:2182,localhost:2183,localhost:2184\"]},\"1200\":{\"h\":\"ZAB 协议\",\"t\":[\"Zookeeper 作为非常重要的分布式协调组件，需要以一主多从的形式进行集群部署，Leader 负责接收写请求，Follower 负责接收读请求以及和 Leader 进行数据同步。\",\"Zookeeper 架构上是 CP 模型，集群的数据是全局一致的，每个 Server 都保存了相同的数据副本。也正因此，ZK 适合存储一些简单的配置信息，而非大量数据。为了保证数据的一致性，Zookeeper 使用 ZAB (Zookeeper Atomic Broadcast) 原子广播协议解决崩溃恢复和主从数据同步的问题。\",\"ZAB协议\"]},\"1201\":{\"h\":\"节点状态\",\"t\":[\"Looking: 选举状态\",\"Following: 从节点所处状态\",\"Leading: 主节点所处状态\",\"Observing: 观察者节点所处状态\"]},\"1202\":{\"h\":\"选举过程\",\"t\":[\"ZK 会在集群启动，或者 Leader 宕机两种情况下进行选举。每轮选举中，除 Observer 外每个节点都可以投票，且默认都投给自己，当一个节点获得超过半数选票则自动成为集群里的 Leader，后续新加入的节点自动成为 Follower。\",\"注：正是因为“半数”这个要求，所以一般 ZK 集群的节点个数为奇数个，因为 3/4 个节点的 ZK 集群都能容忍 1台节点宕机，即它们的容灾能力是一样的，从节约资源的角度所以只设置奇数个节点。\"]},\"1203\":{\"h\":\"启动时选举\",\"t\":[\"我们以5个节点的集群启动为例分析：\",\"zk选举案例\",\"server1 启动：\",\"发起选举，server1 投给自己\",\"server1 仅有一票，没超过半数 3，进入 Looking 状态\",\"server1 启动：\",\"发起选举，server1 和 server2 都投票给自己，然后交换选票信息\",\"server1 发现 server2 的 id 比自己大，于是改投 server2\",\"server2 有两票，没超过半数 3，于是都进入 Looking 状态\",\"server3 启动：\",\"发起选举，各自都先投给自己，然后交换选票信息\",\"server1 和 server2 发现 server3 的 id 比自己大，改投 server3\",\"此时 server3 有 3 票，超过节点半数，于是成为 Leader，进入 Leading 状态。server1 和 server2 进入 Following 状态\",\"server4 启动：\",\"发起选举，server4 投给自己。但非 Looking 状态的 server1、server2、server3 不会改投\",\"于是 server3 有 3 票，server4 有 1 票。少数服从多数，server4 会将自己选票交给 server3，并成为 Follower 进入 Following 状态\",\"server5 启动：\",\"同理，server5 投给自己，其它不改投\",\"server3 有 4 票当选 Leader，server5 将选票交给 server3 成为它的 Follower\",\"关键点：\",\"每个 server 启动之后都会发起选举，并将票投给自己。然后交换选票信息，并将票投给 id 最大的 server\",\"一旦选择出 Leader，其它节点自动成为 Follower。而后启动的 server，不论 id 多大，也只能成为 Follower\"]},\"1204\":{\"h\":\"Leader 宕机时选举\",\"t\":[\"sid：就是我们一直说的服务器 id，用于唯一标识集群中的节点\",\"zxid：事务id，客户端在发起一次写请求的时候，都会带有 zxid，用于标识一次服务器状态的变更。实现上是一个 64bit 的数字，高 32bit 标识 Leader 关系，低 32bit 用于递增计数\",\"epoch：Leader 任期的编号，每投完一次票，这个编号就会增加\",\"重新选举的规则：\",\"先比较节点之间的 epoch，epoch 大的直接当选；\",\"epoch 相同，再比较 zxid，zxid 大的当选；\",\"epoch 和 zxid 都相同，则比较 sid，sid 大的当选；\"]},\"1205\":{\"h\":\"数据读写\",\"t\":[\"zk数据读写\",\"Leader 为了快速响应，不会等到所有的 Follower 都写完，只要有一半的 Follower 写完，就会告知客户端。还是半数机制，一半的 Follower 加上 Leader 正好刚过半数。\",\"而如果客户端写请求命中的是 Follower，Follower 节点会将请求转发给 Leader，然后执行类似过程。超过半数 Follower 写数据成功后，Leader 将 Ack 返回给客户端请求的那个 Follower，最后由这个 Follower 将 Ack 返回给客户端确认写请求执行完毕。\"]},\"1206\":{\"h\":\"CAP 理论\",\"t\":[\"分布式计算领域的公认定理：一个分布式系统最多只能同时满足一致性(Consistency)、可用性 (Availability)和分区容错性(Partition tolerance)这三项中的两项。\",\"Consistency：更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致。\",\"Availability：服务一直可用，而且是正常响应时间。\",\"Partition tolerance：分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性或可用性的服务。\",\"至于具体选择 AP/CP，根据场景定夺，没有好坏。\"]},\"1207\":{\"h\":\"BASE 理论\",\"t\":[\"BASE 理论是对 CAP 理论的延伸，核心思想是即使无法做到 CAP 中的强一致性，但服务可以采用适合的方式达到最终一致性 (Eventual Consitency)。\",\"基本可用(Basically Available)： 基本可用是指分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。\",\"软状态(Soft State)： 软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。\",\"最终一致性(Eventual Consistency)： 最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。\",\"Zookeeper 架构设计追求的是 CP 模式，基于 事务id 的单调递增保证顺序一致性（Paxos算法），但在数据同步的时候无法提供对外服务。相对的，Redis 集群是追求的 AP 模式，各个节点可以独立处理读写请求，数据同步是异步进行的，因此在产生网络分区时，不同节点间数据可能不一致。\"]},\"1208\":{\"c\":[\"分布式\"]},\"1209\":{\"c\":[\"Zookeeper\"]},\"1210\":{\"h\":\"大数据 - Hadoop 概述\"},\"1211\":{\"h\":\"大数据\",\"t\":[\"人类的行为及产生的事件的一种记录称之为数据，对数据的内容进行深入分析，可以更好的帮助了解事和物在现实世界的运行规律。大数据就是对超大规模的数据进行处理并挖掘出数据背后价值的技术体系，是信息化时代的基础支撑，以数据为生活赋能。\",\"随着科技的发展，大数据技术已经成为从事数据分析、机器学习、人工智能等领域的重要工具。大数据技术涵盖了数据的采集、存储、处理、分析和可视化等方面，包括分布式存储系统（如Hadoop、Spark）、分布式计算框架、机器学习算法、数据挖掘工具等。大数据分析可以帮助企业和组织在海量数据中发现有价值的信息，做出更明智的决策。\"]},\"1212\":{\"h\":\"5V 特性\",\"t\":[\"大数据通常具有五个主要特点，即 5V：\",\"Volume 体积大： 大数据集合通常包含海量的数据，这可能涉及到数十TB、PB、甚至EB级别的数据量，传统的数据库和数据处理工具难以有效地处理如此庞大的数据。\",\"Variety 种类多： 大数据不仅包括结构化数据（如关系数据库中的表格数据），还包括非结构化数据（例如文本、图像、音频、视频等）和半结构化数据，这些不同类型的数据需要采用不同的处理方式。\",\"Value 价值密度低： 大数据虽然信息海量，但是价值密度低，深度复杂的挖掘分析需要机器学习参与。\",\"Velocity 速度快： 大数据集合的数据产生速度通常很快，需要实时或近实时地进行处理和分析。例如，社交媒体、传感器、日志文件等数据源都能够以很高的速度产生数据。\",\"Veracity 质量要求高： 大数据需要确保数据的准确性、可依赖性。\",\"总结下来，大数据就是从海量的高增长、多类别、低信息密度的数据中挖掘出高质量的结果。\"]},\"1213\":{\"h\":\"生态体系\",\"t\":[\"从大数据的特性出发，我们可以得到大数据的核心工作有三个：\",\"数据存储： 妥善存储海量待处理数据\",\"HDFS：大数据体系中使用最为广泛的分布式存储技术\",\"HBase：基于 HDFS 之上，使用非常广泛的 NoSQL KV 型数据库技术\",\"KUDU：使用较多的分布式存储引擎\",\"云平台存储引擎，如阿里云OSS、AWS-S3...\",\"数据计算： 从海量数据中计算出背后的价值\",\"MapReduce：最早一代的大数据分布式计算引擎，对大数据的发展做出了卓越的贡献\",\"Hive：基于 MapReduce，以 SQL 为主要开发语言的分布式计算框架\",\"Spark：目前全球范围内最火热的分布式内存计算引擎\",\"Flink：也是广泛使用的分布式内存计算引擎，特别是在实时流计算领域占据了大多数的国内市场\",\"数据传输： 协助在各个环节中完成海量数据的传输\",\"Kafka：分布式的消息系统，可以完成海量规模的数据传输工作\",\"Pulsar：同样是一款使用广泛的分布式消息系统\",\"Flume：一款流式数据采集工具，可以从非常多的数据源中完成数据采集传输的任务\",\"Sqoop：一款ETL（Extract, Transform, Load）工具，可以协助大数据体系和关系型数据库之间进行数据传输\"]},\"1214\":{\"h\":\"Hadoop\",\"t\":[\"Hadoop 是 Apache 软件基金会在 2008 年开源的分布式数据存储、计算、资源调度为一体的大数据框架，提供了一种处理大规模数据集，并且可靠、可扩展的分布式计算解决方案，可以借助Hadoop构建大规模服务器集群，完成海量数据的存储和计算。Hadoop 已经成为大数据处理领域的事实标准之一，被广泛应用于企业和科研机构。\",\"Hadoop 主要包括三个核心模块：\",\"HDFS：Hadoop Distributed File System 分布式文件系统，设计用于存储大规模数据集，具有高可靠性、高可用性、高容错性的特点。\",\"MapReduce：Hadoop 分布式计算框架，一种基于分而治之的思想，用于处理和生成大规模数据集的分布式计算框架。\",\"YARN：Yet Another Resource Negotiator 分布式内存资源调度组件，用于资源管理和作业调度，可供用户整体调度大规模集群的资源使用。\",\"Hadoop 的创始人是雅虎的 Doug Cutting，起源于 Nutch 这个全网搜索引擎项目，并借鉴了 Google 的三篇 paper：\",\"The Google file system\",\"MapReduce: Simpliﬁed Data Processing on Large Clusters\",\"Bigtable: A Distributed Storage System for Structured Data\"]},\"1215\":{\"h\":\"HDFS\",\"t\":[\"在大数据时代，数据量是非常大的，传统的单机存储、单机计算无法满足性能需求，因此就需要分布式存储技术，通过增加机器数量来满足大规模数据存储和处理的需求，具有高可靠性、高扩展性、数据一致性、高性能的优点。\",\"既然涉及了分布式，自然就有去中心化、中心化两种模式，在大数据框架中，大多数都是采用的中心化模式（主从模式），即有一个中心节点来统筹其它服务器的工作。HDFS（Hadoop Distributed File System）就是 Hadoop 技术栈内提供的基于主从的分布式数据存储解决方案，可以在多台服务器上构建存储集群，存储海量数据。\"]},\"1216\":{\"h\":\"基础架构\",\"t\":[\"HDFS 集群节点主要分为三个角色，分别都是一个独立的进程：\",\"NameNode：主角色，负责管理整个文件系统\",\"SecondaryNameNode：辅助角色，帮助 NameNode 完成元数据整理工作\",\"DataNode：从角色，负责数据的存取\"]},\"1217\":{\"h\":\"安装配置\",\"t\":[\"安装过程略，hadoop 目录包括 bin 二进制程序，etc 配置文件，sbin 管理员程序等常规目录结构，主要配置文件包括：\",\"workers：配置从节点（DataNode）有哪些\",\"hadoop-env.sh：配置Hadoop的相关环境变量\",\"core-site.xml：Hadoop核心配置文件\",\"hdfs-site.xml：HDFS核心配置文件\",\"安装完成后，可以通过sbin/start-dfs.sh和sbin/stop-dfs.sh统一启动/停止 HDFS 服务，脚本执行以下步骤：\",\"在执行此脚本的机器上，启动/停止 SecondaryNameNode\",\"读取core-site.xml内容（fs.defaultFS项），确认NameNode所在机器，启动/停止 NameNode\",\"读取workers内容，确认DataNode所在机器，启动/停止全部 DataNode\",\"除了统一启停之外，也可以通过脚本单独控制所在机器的 HDFS 进程启停：\",\"sbin/hadoop-daemon.sh start|status|stop namenode|secondarynamenode|datanode bin/hdfs --daemon start|status|stop namenode|secondarynamenode|datanode\"]},\"1218\":{\"h\":\"文件操作\",\"t\":[\"HDFS 里的文件路径和 Linux 系统一样，也是以 / 作为根目录，可以通过协议头进行区分。但是通常协议头是可以省略的，HDFS 会根据命令类型自动识别路径所指的文件系统，除非不写会有bug或者要强调所在文件系统才需要写明。\",\"# Linux file:///usr/local/hello.txt # HDFS hdfs://127.0.0.1:8020/usr/local/hello.txt\",\"关于 HDFS 的操作命令，Hadoop 提供了两套命令系统，除了命令不同，选项参数完全一致。常用操作和 Linux 命令行也很像：\",\"# 老版 hadoop fs [generic options] # 新版 hdfs dfs [generic options] # 创建目录，-p 自动创建父目录 hdfs dfs -mkdir [-p] <path> # 查看目录内容，-h 人性化文件size，-R 递归查看子目录 hdfs dfs -ls [-h] [-R] <path> # 查看文件内容。大文件可以用管道配合 more hdfs dfs -cat <src> | more # 从本地上传文件到 hdfs，-f 强制覆盖，-p 保留访问和修改时间、所有权和权限 hdfs dfs -put [-f] [-p] <localsrc> <dst> # 从 hdfs 下载文件到本地，-f 强制覆盖，-p 保留访问和修改时间、所有权和权限 hdfs dfs -get [-f] [-p] <src> <localdst> # 拷贝文件 (hdfs -> hdfs)，-f 强制覆盖 hdfs dfs -cp [-f] <src> <dst> # 追加本地数据到 hdfs，如果 localsrc 为 - 则从标准输入读取 hdfs dfs --apendToFile <localsrc> <dst> # 移动/重命名文件 hdfs dfs -mv <src> <dst> # 删除文件，-r 递归删除，-skipTrash 跳过回收站 # 回收站功能默认是关闭的，需要针对每个节点单独配置 hdfs dfs -rm -r [-skipTrash] <path> # 修改所属用户和组，-R 递归 hdfs dfs -chown -R root:root <path> # 修改权限 hdfs dfs -chmod -R 777 <path>\",\"HDFS 通过命令只能新增文件、追加数据，不能修改已有数据。想要修改已有数据只能强制覆盖已有的文件。\",\"除了通过 Shell 命令行方式和 HDFS 交互之外，还可以通过 HDFS 自带的 Web UI 操作文件内容，Jetbrains 系列产品中也有 Big Date Tools 插件可以更方便的操作，HDFS 也支持 NFS (Network File System) 实现本地挂载。\",\"关于 HDFS 文件的权限，不同于 Linux 系统的超级用户是 root，HDFS 的超级用户是启动 namenode 的用户，root 用户在 HDFS 上并没有特权。\"]},\"1219\":{\"h\":\"存储原理\",\"t\":[\"为了统一方便管理，HDFS 设定了统一的管理单元 block 作为最小存储单位，每个占 256MB（可配），并且通过多副本的方式提升了安全性，副本个数可以通过dfs.replication配置。\",\"# file system check 查看文件信息，包括副本数 # -files 列出路径内的文件状态 # -blocks 输出文件块报告（block 数量，副本数） # -locations 输出每个 block 详情 hdfs fsck [-files [-blocks [-locations]]]\",\"在 HDFS 中，文件被划分成一个个 block 块，这些块由集群内的唯一 NameNode 基于edits和fsimage统一管理整个文件系统的。\",\"edits 文件记录了 HDFS 中的每一次操作，以及本次操作影响的文件及其对应的 block，因此随着操作增多 edits 文件会逐渐变大，达到上限后会自动开启新的 edits 记录，保证索引性能。\",\"但是就跟 Redis 中的 AOF 文件一样，记录所有操作会导致文件检索变慢，因此需要定期（默认3600s/100w次事务）合并所有 edits 生成一个快照，即 fsimage 文件，如果已经存在 fsimage 文件了，那么会自动将所有 edits 和已有的 fsimage 进行合并形成新的 fsimage。\",\"而合并元数据这一操作是由辅助角色 SecondaryNameNode 完成的，它会通过 http 从 NameNode 拉取 edits 和 fsimage 进行合并，然后返回给 NameNode 来替换旧的 fsimage。\"]},\"1220\":{\"h\":\"读写过程\",\"t\":[\"数据写入\",\"客户端向 NameNode 发起请求\",\"NameNode 经过各种校验后允许写入，并告知客户端最近的 DataNode 地址\",\"客户端向指定的 DataNode 发送数据包\",\"该 DataNode 同时完成数据副本的复制工作，将其接收的数据分发给其它 DataNode\",\"写入完成后客户端通知 NameNode，NameNode做元数据记录工作\",\"客户端直接向1台DataNode写数据，这个DataNode一般是离客户端最近（网络距离）的那一个 数据块副本的复制工作，由DataNode之间自行完成（构建一个PipLine，按顺序复制分发，如图1给2, 2给3和4）\",\"数据读取\",\"客户端向 NameNode 申请读取某文件\",\"NameNode 经过各种校验后允许读取，并返回此文件的 block 列表\",\"客户端拿到 block 列表后自行寻找 DataNode读取\",\"注意细节\",\"NameNode 不负责实际的数据写入/读取，只负责元数据记录和权限校验，由客户端直连 DataNode 读写数据\",\"NameNode 会基于 IP 地址、路由表等提供网络距离最近的 DataNode 节点\"]},\"1221\":{\"h\":\"MapReduce\",\"t\":[\"MapReduce 是 Hadoop 内提供的进行分布式计算的框架，可供开发人员开发相关程序进行分布式数据计算。所谓分布式计算，就是利用多台机器协同工作，完成对超大数据的计算处理，从计算模式上分为：\",\"分散->汇总: 每台机器各自负责一部分数据分片的处理，然后将各自结果汇总得到结果（MapReduce）\",\"中心调度->步骤执行: 由一个节点作为中心调度者，将任务划分为若干步骤分配给每台机器，最终得到结果（Spark、Flink）\",\"MapReduce 是分散->汇总模式的分布式计算框架，其提供了两个主要的编程接口：\",\"Map：提供了分散功能，由服务器分布式对数据进行处理\",\"Reduce：提供了汇总功能，将分布式的处理结果汇总统计\",\"原理类似 Java 的 Fork-Join 框架，只不过不是交给多线程执行，而是将需求分解为多个 MapTask 和 ReduceTask 并分配到不同的服务器去执行。用户只需要通过某种编程语言实现 Map/Reduce 功能接口即可完成自定义需求的开发，不过由于架构老，性能差，现在很少直接使用了，基本都用更高级的计算框架了，例如 Hive 等。\"]},\"1222\":{\"h\":\"YARN\",\"t\":[\"YARN 是 Hadoop 内提供的进行分布式资源调度的组件，即管控整个分布式服务器集群的全部资源（内存、CPU等），整合进行统一调度，目的是提高资源的利用率。在集群模式下，MapReduce 需要配合 YARN 进行使用。\",\"YARN 也是一种主从架构的设计：\",\"ResourceManager：整个集群的资源调度者，负责协调调度各个程序所需的资源\",\"NodeManager：单个服务器的资源调度者，基于容器调度资源，提供给应用程序使用\",\"除了核心的主从管理者之外，YARN 还有 2 个辅助角色：\",\"ProxyServer：Web 应用程序代理，目的是减少通过 YARN 进行网络攻击的可能性\",\"JobHistoryServer：历史信息记录服务，统一收集各个节点的日志保存到 HDFS\",\"配置安装过程省略，主要是配置四类角色，然后可以通过脚本启动集群：\",\"# 根据配置文件一键启停 ResourceManager -> NodeManager -> ProxyServer sbin/start-yarn.sh sbin/stop-yarn.sh # 当前机器单独启停服务 bin/yarn --daemon start|stop resourcemanager|nodemanager|proxyserver bin/mapred --daemon start|stop historyserver\"]},\"1223\":{\"h\":\"Hive\",\"t\":[\"大数据体系中充斥着非常多的统计分析场景，MapReduce 支持 Java、Python 这类编程语言去处理，但更方便的是用 SQL 进行数据统计，Hive 就是一款可以将 SQL 语句翻译成 MapReduce 程序运行的分布式计算工具。\",\"使用 Hive 的好处：\",\"操作接口采用类SQL语法，简单、容易上手，可以快速开发\",\"底层执行 MapReduce，可以完成分布式海量数据的 SQL 处理\"]},\"1224\":{\"h\":\"基础架构\",\"t\":[\"从原理上可以分析出，用 Hive 构建分布式 SQL 计算需要两大功能：\",\"元数据管理：记录数据位置、数据结构、数据描述等信息\",\"SQL 解析器：执行 SQL 分析，转化为 MapReduce 程序，提交执行并收集结果\",\"下面这张图是 Hive 的基础架构，主要的就是在实现这两大功能，具体的组件从左到右包括：\",\"用户接口：向用户提供的操作接口\",\"CLI\",\"ThriftServer，例如用内置的 beeline 或 DataGrip、Navicat 等工具通过 JDBC/ODBC 协议进行通信\",\"Driver：驱动程序，包括语法解析器、计划编译器、优化器、执行器\",\"完成对 HQL 语句的词法分析、语法分析、编译、优化，以及查询计划的生成（存储在 HDFS 中等待执行）\",\"没有具体的服务进程，封装在 Hive 所依赖的 Jar 中\",\"MetaStore：元数据存储\",\"通常存储在关系数据库（如 mysql、derby）中\",\"元数据包括表名、字段、分区、属性，以及表的数据所在目录等\",\"由单独的服务进程维护\"]},\"1225\":{\"h\":\"安装配置\",\"t\":[\"Hive 是单机程序，只需部署在一台机器上，但可以提交分布式 MapReduce 任务。同时 Hive 依赖一个关系型数据库系统存储元数据，而 HDFS 数据默认存储在/user/hive/warehouse内。\",\"# 启动元数据管理服务 bin/hive --service metastore nohup bin/hive --service metastore >> logs/metastore.log 2>&1 & # 可选：启动 ThriftServer bin/hive --service hiveserver2 nohup bin/hive --service hiveserver2 >> logs/hiveserver2.log 2>&1 & # 启动客户端 bin/hive\",\"安装过程略...\"]},\"1226\":{\"h\":\"基本操作\",\"t\":[\"执行bin/hive进入 HiveShell 后就可以执行输入 SQL 语句（语法不完全相同）执行。\",\"-- 数据库 create database if not exists myhive; use myhive; desc myhive; drop database myhive [cascade]; -- 数据表 create table test(id INT, name STRING, gender STRING) [location '/myhive2/']; insert into test values(1, '王力红', '男'), (2, '周杰轮', '男'); alter table test set TBLPROPERTIES(\\\"EXTERNAL\\\"=\\\"TRUE\\\"); select gender, COUNT(*) as cnt from test group by gender; desc FORMATTED tb1; drop table tablename; truncate table tablename; -- 从本地/HDFS导入数据 load data [local] inpath '<path>' [overwrite] into table myhive.test_load; -- 导出数据到本地/HDFS insert overwrite [local] directory '<path>' select * from test_load ; -- hive 执行 SQL 导出 bin/hive (-e <sql> | -f <sql_file>) > '<path>' -- 查询语句 SELECT [ALL | DISTINCT] col_xxx, ... FROM tb_xxx WHERE condition -- 支持正则 RLIKE reg_pattern GROUP BY col HAVING condition ORDER BY col -- 分桶查询 CLUSTER BY col -- 执行 MapReduce 时分配到不同 Reducer DISTRIBUTE BY col -- 排序 SORT BY col LIMIT n; -- 随机桶抽样 SELECT ... FROM tbl TABLESAMPLE(BUCKET x OUT OF y ON(colname | rand())) -- 从前往后采样指定行数/百分比/大小 SELECT ... FROM tbl TABLESAMPLE(num ROWS | num PERCENT | num(K|M|G));\"]},\"1227\":{\"h\":\"复合字段\",\"t\":[\"-- array 类型，item 间 , 分割 create table myhive.test_array( name string, work_locations array<string> ) row format delimited fields terminated by '\\\\t' collection items terminated by ','; -- map 类型，entry 间 # 分割，KV 间 : 分割 create table myhive.test_map( id int, members map<string,string>, age int ) row format delimited fields terminated by ',' collection items terminated by '#' map keys terminated by ':'; -- struct 类型，一列中可以插入多个子列。字段间 # 分割，子列间 : 分割 create table myhive.test_struct( id string, info struct<name:string, age:int> ) row format delimited fields terminated by '#' collection items terminated by ':';\"]},\"1228\":{\"h\":\"表类型\",\"t\":[\"内部表\",\"即管理表/普通表，删除内部表会直接删除元数据，因此不适合与其它工具共享数据\",\"存储位置由hive.metastore.warehouse.dir参数决定，默认/user/hive/warehouse\",\"可以通过alter table tb1 set tblproperties('EXTERNAL'='TRUE')转为外部表\",\"外部表\",\"即关联表，通过external指定，删除表时仅删除元数据，不删除数据本身\",\"外部表和数据是相互独立的，用于临时关联外部数据\",\"存储位置随意，由LOCATION指定\",\"分区表\",\"基于分治的思想，根据分区列分区，分区列作为字段存储在 DB 里，但本质上是 HDFS 上的不同文件夹。分区表可以极大的提高特定场景下 Hive 的操作性能。\",\"-- 创建分区表 create table tb1(...) partitioned by (分区列 列类型, ...) row format delimited fields terminated by ''; -- 导入数据 load data local inpath <path> into table tb1 partition(分区列=xxx, ...);\",\"分桶表\",\"将表拆分到固定数量的不同文件中进行存储，实际上是基于分桶列计算 Hash 取模决定分配到哪个桶。分桶表在过滤、JOIN、分组等特定操作下可以带来显著的性能提升。\",\"-- 需要先开启分桶的自动优化 set hive.enforce.bucketing=true; -- 创建分桶表 create table tb2(cid string, cname string) clustered by(c_id) into 3 buckets row format delimited fields terminated by '\\\\t'; -- 导入数据，由于需要调用 MapReduce 执行哈希计算，所以只能通过 insert select 方式 insert overwrite table tb2 select * from tb_common cluster by(cid);\"]},\"1229\":{\"h\":\"虚拟列\",\"t\":[\"Hive 内置三个特殊标记，用于查询数据本身的详细信息，称为虚拟列，可以像普通列一样被使用：\",\"INPUT__FILE__NAME 显示数据行所在的具体文件\",\"BLOCK__OFFSET__INSIDE__FILE 显示数据行所在文件的偏移量\",\"ROW__OFFSET__INSIDE__BLOCK 显示数据所在HDFS块的偏移量（需设置 hive.exec.rowoffset=true）\",\"更多语句详情见 Hive-SQL\"]},\"1230\":{\"c\":[\"大数据\"]},\"1231\":{\"c\":[\"Hadoop\"]},\"1232\":{\"h\":\"Redis 缓存迁移实践\"},\"1233\":{\"h\":\"背景\",\"t\":[\"由于组织架构等历史原因，所在业务的一个核心服务和另一业务线的多个服务是共用了一个 Redis 集群，前段时间该集群发生了连接数过高等问题，为了避免其它业务的服务干扰 Redis 集群进而影响我们自己业务，需要将该服务所使用的 Redis 集群迁移到我们业务自己的集群。\"]},\"1234\":{\"h\":\"总体规划\",\"t\":[\"该服务中使用了大约 20个类别的 Redis 缓存，其中最核心的缓存还使用了 Tair 作为缓存备份，以及一些基于 Redis 的分布式锁（单独讨论）。由于是技术需求，没有过多的资源投入，而且是业务核心中的核心服务，一旦缓存迁移出现失败，或者数据不一致的问题，就会对业务产生很大的影响，因此迁移难度较大。\",\"首先需要梳理出所有的缓存类型，包括各自的使用场景、key、value 类型、过期时间、API 使用情况等等，评估出各个缓存的重要性，从低风险的缓存开始迁移，逐步扩大迁移范围，迁移过程中要设置观察指标，且必须有可回滚的手段。总体阶段如下，分为三个阶段：双写、迁读、清理代码\"]},\"1235\":{\"h\":\"双写阶段\",\"t\":[\"这一阶段，主要是清理服务中的老旧无效代码，并接入新的 Redis 集群，所有对老集群的写操作，同步写到新集群，并维持从老集群读不变。此外，基于中间件的能力，打点判断两个集群的写操作次数是否一致，并观察写操作的性能，判断对业务性能的影响程度。\",\"这一阶段持续了一个多月，主要是保证上线前存在的老缓存都自然失效，后续的新缓存在两个集群中的数据、过期时间等都保持一致。这里需要根据实际的缓存使用场景判断双写阶段的持续时间。\",\"现状：\",\"一期上线过程中：\",\"一期上线完成后：\"]},\"1236\":{\"h\":\"迁移读逻辑\",\"t\":[\"二期的代码可以在一期的时候一并上线，通过远程配置的形式控制某类缓存是否要从新集群读取。为了降低迁移风险，读缓存的时候还要加入双读判等，观察新老集群读取的数据是否一致，如果不一致，仍然以老集群的数据为准，并打日志记录key 和 value 差异。然后需要研究不一致的原因，比如手动查询 Redis 集群，判断是真的数据发生不一致了，还是并发的时候产生的暂时性不一致。前者需要结合实际业务场景进一步调研，例如有可能是 Redis 集群本身接口存在失败的情况，后者可以忽略。\",\"如果确实存在数据不一致的场景，并且判断是并发导致的暂时性不一致，或者非服务自身原因导致的不一致，且判断对业务没有实质性影响的，可以再上一版代码，通过远程配置逐步将所有缓存的读操作迁移到新集群。这一阶段也可以持续一段时间，等业务经过一段时间验证新集群的读取没有问题，就可以进入下一阶段了。\"]},\"1237\":{\"h\":\"清理代码\",\"t\":[\"这一阶段，主要是将代码中的读写旧集群逻辑全部下线（此时应该没有读取旧集群的调用操作了）。\"]},\"1238\":{\"h\":\"分布式锁\",\"t\":[\"不同于业务数据的缓存，分布式锁的迁移更加困难，因为不能简单得通过灰度开关去迁移一个锁的加锁解锁逻辑，一旦由于并发场景下对新老集群的加解锁逻辑不同步，就很有可能引发业务异常。因此分布式锁的迁移可以单独做，和业务数据的迁移分离开，降低风险。\",\"此次分布式锁的迁移正好尝试了借助 DeepSeek-R1 来设计方案，整体看下来，好用是好用的，能给出我现在没能想到的设计，但实践还是得靠人去做，所以风险得自己担！下面是通过与 DeepSeek 对话整理出来的方案。\"]},\"1239\":{\"h\":\"双写加锁\",\"t\":[\"首先第一阶段，类似的也是要双写集群，同步对新旧集群加锁、解锁，但此时业务上仍要依赖旧集群，即只要旧集群加锁成功，相当于线程拿到了锁，可以执行临界区的业务代码。而新集群的锁相当于是一个影子锁，只是复制旧锁操作，并且在操作失败的时候要打点统计，以便对业务并发竞争的程度有个认知。\",\"另外，DeepSeek 提出了最好使用带版本号的锁键，即新集群的所有锁键前缀加个“V2”来和旧集群的锁键区分开，并且能在异常情况下实现回滚操作。\"]},\"1240\":{\"h\":\"迁移\",\"t\":[\"这是最关键的一个阶段，如何借助远程配置，来保证多个线程能够同时切换依赖，到新集群去加解锁。这里 DeepSeek 给的方案，是根据锁键来进行灰度，例如系统中的一个分布式锁场景的 key 是用户的订单号，那么可以先对订单号进行哈希计算，并基于远程配置的灰度比例决定依赖旧集群还是新集群，这样就可以保证同一个锁对象的请求在同一时刻仅依赖旧集群或者新集群其中一个。\",\"但仔细想想这里其实仍然会存在问题，考虑一个极端的并发场景，远程的配置中心在下发“灰度比例”这个配置项时，分布式部署的各个机器其实是会有时延的，如果在切换的这短暂时间里，有若干正巧在灰度边界上的订单号并发请求打进来，那么两个请求可能分别依赖新旧集群的加锁结果，导致锁失效，从而产生并发问题。\",\"当然上面讨论的只是一个非常极端的场景，实际业务上不太可能出现，真要出现了自认倒霉，手动修数据吧😥不过我也尝试把这种情况提给了 DeepSeek 了，然后它给了我如下的答复，也许这些措施是有效的（反熵机制是个啥？？？），但是复杂度太高，铁定是不能做到我们的业务系统里的。\",\"后续只要把旧集群的老代码下掉即可，不过呢，分布式锁的迁移实在是麻烦，而且风险有点大，暂时还没有实际动手去迁，后面再说吧。（从技术角度想是可以迁的，从业务角度想还是放那吧，也没啥影响）\"]},\"1241\":{\"c\":[\"Java\"]},\"1242\":{\"c\":[\"缓存\"]},\"1243\":{\"h\":\"Code Review\"},\"1244\":{\"h\":\"风格\",\"t\":[\"if 后面哪怕只有一条语句，也要加上大括号\",\"判等时，只要有一方是对象，就尽量用 equals\",\"日期转换统一使用 DateUtils 工具类\",\"尽量使用各种工具类，如 Objects.isNull, StringUtils.isNotEmpty(), CollectionUtils.isEmpty(), DateUtils, JsonUtils 等等\",\"错误日志统一使用log.error(\\\"xxx: {}, xxx: {}\\\", JsonUtils.toJson(object), JsonUtils.toJson(object), e);占位符形式，且error要么记录进日志，要么继续向上抛出\"]},\"1245\":{\"h\":\"规范\",\"t\":[\"Enum类型可以在初始化时，通过static代码段构造枚举的map集合，同时定义codeOf方法，快速关联枚举码和枚举类\",\"分页查找时，应先根据条件过滤，再计算偏移和总数\",\"新功能直接从入口 Controller 开始写单测接口\",\"打印日志时，对象用 jsonUtils 转一下，避免后期对象变更需要重新加日志处理代码\",\"定时任务这种统一放到 crane/job 包下\",\"不要在循环中查库，一次性查出来配合 Stream 做处理\"]},\"1246\":{\"h\":\"Effective Java\",\"t\":[\"推荐阅读：https://github.com/clxering/Effective-Java-3rd-edition-Chinese-English-bilingual 双语版，其实原著的英文版读起来也不困难，主要是网上的中文版翻译太烂了，根本读不通...\"]},\"1247\":{\"h\":\"其它\",\"t\":[\"每当调用一个方法时，都要对它的行为保持怀疑，不要盲目地认为它一定会正常返回。越不熟悉的代码，就越应该对其代码行为保持怀疑。\"]},\"1248\":{\"h\":\"分布式缓存\"},\"1249\":{\"h\":\"缓存分类\",\"t\":[\"缓存之所以能够加快系统速度，本质原因在于：\",\"减小了 CPU 消耗：将原来需要实时计算的内容提前准备好，复用公用的数据，减少 CPU 消耗，从而提升响应性能\",\"减小了 I/O 消耗：将原来对网络、磁盘等慢速介质的读写访问变为对内存等快速介质的访问，从而提升响应性能\"]},\"1250\":{\"h\":\"客户端缓存\",\"t\":[\"也即浏览器的 HTTP 缓存，通过 HTTP 的缓存机制实现，有两种方式：\",\"强制缓存：根据响应中的 Cache-Control (相对时间) 和 Expires (绝对时间) 判断请求是否过期，没过期直接从缓存中取响应结果\",\"协商缓存：强制缓存没有命中时，可以与服务端协商之后，通过协商结果来判断是否使用本地缓存，一般响应 304 告知使用缓存。两种头部实现 \",\"Last-Modified 和 If-Modified-Since 根据时间判断是否有更新\",\"Etag 和 If-None-Match 根据唯一标识判断 （类似CAS）\"]},\"1251\":{\"h\":\"CDN 缓存\",\"t\":[\"CDN服务一般是由第三方提供的内容分发网络服务，主要是用于缓存静态的数据，比如：图片、音频、视频，这些数据基本都是不变的，那么命中率就很高。CDN厂商花费大价钱在全国各地建立CDN的服务站点，用于用户的就近访问，减少响应时间。\"]},\"1252\":{\"h\":\"服务端缓存\"},\"1253\":{\"h\":\"本地缓存\",\"t\":[\"指的是在应用中的缓存组件，其最大的优点是应用和 cache 在同一个进程内部，请求缓存非常快速，没有过多的网络开销等，在单应用不需要集群支持或者集群情况下各节点无需互相通知的场景下使用本地缓存较合适；同时，它的缺点也是应为缓存跟应用程序耦合，多个应用程序无法直接的共享缓存，各应用或集群的各节点都需要维护自己的单独缓存，对内存是一种浪费。常用实现如 HashMap、Ehcache、Caffeine Cache 以及通过 Spring Cache 进行整合等等，可以通过定时任务将数据库中的数据刷新到缓存中。\"]},\"1254\":{\"h\":\"分布式缓存\",\"t\":[\"与应用分离的缓存组件或服务，其最大的优点是自身就是一个独立的应用，与本地应用隔离，可以实现多个应用的共享访问。常用实现如 Memcached、Redis 等。相比于本地缓存，分布式缓存的优点包括 容量和性能可扩展、高可用性，缺点是存在网络延迟和复杂性的提升。\"]},\"1255\":{\"h\":\"缓存问题\"},\"1256\":{\"h\":\"缓存穿透\",\"t\":[\"大量请求的 key 不合理，既不存在于缓存，也不存在于数据库 。导致这些请求直接到达数据库服务器，根本不经过缓存这一层，从而对数据库造成了巨大的压力。\",\"解决方法：\",\"接口层进行校验，如用户鉴权，id 做基础校验，id 不合法的直接拦截\",\"缓存中设置无效的 key，例如 set <key> nullObject\",\"布隆过滤器（多个 hash 函数，key 对应的 hashCode 都存在，该元素才可能存在）\"]},\"1257\":{\"h\":\"缓存击穿\",\"t\":[\"请求的 key 对应的是热点数据 ，该数据存在于数据库中，但可能由于缓存过期，不存在于缓存中。进而导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力。\",\"解决方法：\",\"针对热点数据提前预热，设置热点数据永不过期\",\"通过分布式锁，保证只有第一个请求会落到数据库上，并将数据存入缓存。后续的请求可以直接从缓存中取数据，减少数据库的压力\",\"接口限流、熔断、降级\"]},\"1258\":{\"h\":\"缓存雪崩\",\"t\":[\"缓存在同一时间大面积的失效，或缓存服务器宕机，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。\",\"解决方法：\",\"搭建高可用的 Redis 集群，避免单点故障（主从、哨兵、集群）\",\"设置不同的失效时间，防止同一时间大量 key 失效。例如随机设置过期时间。\"]},\"1259\":{\"h\":\"缓存污染\",\"t\":[\"缓存中一些只会被访问一次或者几次的的数据，被访问完后，再也不会被访问到，但这部分数据依然留存在缓存中，消耗缓存空间。\",\"解决方法：\",\"合理设计缓存容量，建议设为总数据量 15%-30%\",\"调整缓存淘汰策略，如 volatile-lru, volatile-random, allkeys-lru 等\",\"像 Linux 内存页 / MySQL 数据页 将缓存分活跃/非活跃区，提高数据进入活跃区的门槛，来缓解缓存污染。\"]},\"1260\":{\"h\":\"锁机制\"},\"1261\":{\"h\":\"本地锁\",\"t\":[\"对于单体应用，可以直接使用 synchronized / JUC.Lock 这些本地锁解决缓存击穿，但要注意双重检查，以及查询缓存、查数据库、放入缓存都要在临界区里保证原子性。样例：\",\"/** * redis没有数据 -> 查询DB -> 放入缓存 -> 返回结果 */ public Data getDataWithLocalLock() { // 本地锁解决方案 synchronized (this) { // 双重检查 - 是否有缓存 String dataJson = stringRedisTemplate.opsForValue().get(\\\"dataJson\\\"); if (!StringUtils.isEmpty(dataJson)) return JSON.parseObject(dataJson, new TypeReference<Data>(){}); Object data = getDataFromDB(); stringRedisTemplate.opsForValue().set(\\\"dataJson\\\", JSON.toJSONString(data), 1, TimeUnit.DAYS); } }\"]},\"1262\":{\"h\":\"分布式锁\",\"t\":[\"随着业务发展的需要，单体系统演化成分布式集群系统后，由于分布式系统多线程的特点，且分布在不同机器上，使得本地锁策略失效。为了解决这个问题就需要一种跨机器的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题。通常可以基于 数据库、Redis、Zookeeper 等方式实现。\"]},\"1263\":{\"h\":\"Redis + Lua\",\"t\":[\"原理：基于 Redis（单线程）的原子操作 set <key> <random_value> NX EX 30，仅当 key 不存在时才会设置成功，否则返回 nil，并且设置过期时间。\",\"重难点：\",\"防止解锁失败（掉线/宕机）造成程序死锁，key 必须设置过期时间，并且和加锁操作是原子的\",\"为了防止解锁操作误删了其它线程加的锁，需要把 value 设为该线程唯一的特殊值(如 UUID)，解锁时先获取锁的值，和自己的特殊值相等时才进行删除。\",\"为了防止网络请求的延迟，造成误删其它线程加的锁，获取 value 进行对比和 删除 key 两个操作必须是原子的（Lua 脚本）。\",\"为了防止业务还未完成锁已经过期释放了，需要对锁进行自动续期，或直接设置一个很长的过期时间，例如业务中可以设 300s\",\"public Data getDataWithRedisLock() { // 1. 设置分布式锁以及过期时间 [set lock uuid nx ex] String uuid = UUID.randomUUID().toString(); Boolean lock = stringRedisTemplate.opsForValue().setIfAbsent(\\\"lock\\\", uuid, 30, TimeUnit.SECONDS); // 2. 加锁成功 -> 查询 DB if(lock) { Data data; try { data = getDataFromDB(); } finally { // 3. Lua 脚本执行原子查询和删除 String lockValue = stringRedisTemplate.opsForValue().get(\\\"lock\\\"); String script = \\\"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\\\"; stringRedisTemplate.execute(new DefaultRedisScript<>(script, Long.class), Arrays.asList(\\\"lock\\\"), uuid); } return data; } else { // 加锁失败 -> 自旋 try{ Thread.sleep(50); } catch (InterruptedException e) { e.printStackTrace(); } return getDataWithRedisLock(); } }\"]},\"1264\":{\"h\":\"Redisson\",\"t\":[\"Redisson 是一个在 Redis 的基础上实现的 Java 驻内存数据网格，提供了一系列分布式的Java常用对象和许多分布式服务，包括 BitSet, BlokingQueue, Lock, Bloom Filter 等，同时还提供了异步 Async、反射式 Reactive、RxJava2标准接口。\",\"使用：\",\"导入 Redisson 坐标\",\"配置 RedissonClient 对象\",\"获取锁对象 \",\"RLock 可重入锁\",\"RReadWriteLock 读写锁\",\"RSemaphore 信号量，配合 acquire()/release()，可以实现限流\",\"RCountDownLatch 闭锁，执行指定次数后继续\",\"// 注入 RedissonClient 对象 @Bean(destroyMethod = \\\"shutdown\\\") public RedissonClient redisson(){ Config config = new Config(); // 创建单例模式的配置 config.useSingleServer().setAddress(\\\"redis://\\\" + ipAddr + \\\":6379\\\"); return Redisson.create(config); } public Data getDataWithRedissonLock() { RLock lock = redissonClient.getLock(\\\"lock\\\"); lock.lock(); Data data; try { data = getDataFromDB(); } finally { lock.unlock(); } return data; }\",\"加锁方式：\",\"lock() 阻塞式加锁，如果没有指定时间，由看门狗定期在1/3 * 锁时间（默认 30s）时自动续期，本质上是定时任务。\",\"tryLock() 可以获得加锁结果\",\"lock()/tryLock() 如果传递了加锁时间和单位，则到期自动释放锁，看门狗不续命\"]},\"1265\":{\"h\":\"缓存一致性\",\"t\":[\"指缓存与数据库的一致性问题，一般不要求强一致性，都是追求最终一致性。\"]},\"1266\":{\"h\":\"更新数据库 -> 删除缓存\",\"t\":[\"并发时可能有暂时的脏数据\",\"解决方法： \",\"重试机制，例如配合 MQ/Canal\",\"加分布式锁，原子地更新数据库和缓存。但是存在缓存资源浪费、性能降低的问题\"]},\"1267\":{\"h\":\"删除缓存 -> 更新数据库\",\"t\":[\"并发时依然有不一致的问题（A删除缓存，B查缓存不存在取数据库，然后又把旧数据存入缓存）\",\"解决方法：延迟双删，即删除缓存后更新数据库，然后等一段时间再删除缓存。但延迟时间很难评估\"]},\"1268\":{\"h\":\"设计思路\",\"t\":[\"缓存数据不应该是实时性、一致性要求超高的，所以缓存 + 过期时间，足够解决大部分业务对于缓存的要求\",\"性能和一致性不能同时满足，为了性能考虑，通常会采用「最终一致性」的方案\",\"遇到实时性、一致性要求高的数据，即使速度慢点，也应该查数据库\",\"我们不应该过度设计，增加系统的复杂性\"]},\"1269\":{\"h\":\"Spring Cache\",\"t\":[\"Spring 支持多种本地缓存的实现方式，例如 SimpleCache(ConcurrentMap实现), RedisCache, EhCache, CaffeineCache... 两个核心接口：\",\"org.springframework.cache.Cache 定义缓存的各种操作\",\"org.springframework.cache.CacheManager 管理各个cache缓存组件\",\"使用\",\"导入 spring-boot-starter-cache 依赖\",\"配置缓存类型，主启动类添加@EnableCaching\",\"需要缓存的方法上添加相应的注解\",\"原理\",\"缓存的自动配置类 CacheAutoConfiguration 向容器中导入了 CacheConfigurationImportSelector\",\"CacheConfigurationImportSelector 的 selectImports() 导入所有缓存类型的配置类，默认启用 SimpleCacheConfiguration\",\"SimpleCacheConfiguration 配置类向容器中注入了一个 ConcurrentMapCacheManager 实例\",\"ConcurrentMapCacheManager 底层创建一个 ConcurrentMapCache 管理缓存\",\"缓存注解\",\"@EnableCaching：用于 SpringBoot 的启动类开启注解功能\",\"@CacheConfig：用于对类进行配置，对整个类的缓存进行配置，可用 @Cacheable 取代\",\"@Cacheable：通常用于配置方法，将方法的返回结果注入到缓存对象中 \",\"value/cacheNames: 指定缓存名（跟在 key-prefix 后面）\",\"key/keyGenerator：指定缓存对应的 key 值，默认使用方法参数生成，可以使用 spel 指定\",\"condition/unless: 条件缓存\",\"sync：默认 false，为 true 时开启同步锁\",\"@CacheEvict：可用于类或方法，用于清空缓存 \",\"allEntries: true 表示删除域名下所有缓存\",\"@CachePut：强制执行方法并将返回结果放入缓存，常用于更新 DB 的方法 \",\"属性同 @Cacheable\",\"@Caching: @Cacheable + @CachePut + @CacheEvict\",\"实际问题\",\"读缓存： \",\"缓存穿透：spring.cache.redis.cache-null-values 指定是否缓存空数据\",\"缓存击穿：默认是无加锁的，可以置 Cacheable 的 sync 为 true\",\"缓存雪崩：可以设置随机时间\",\"写缓存： \",\"读写加锁\",\"引入 Canal\",\"读多写多的场景，可以直接查 DB\",\"常规数据（读多写少，即时性，一致性要求不高的数据）完全可以使用 Spring-Cache。特殊数据进行特殊设计。\"]},\"1270\":{\"c\":[\"分布式\"]},\"1271\":{\"c\":[\"缓存\"]},\"1272\":{\"h\":\"分布式事务\"},\"1273\":{\"h\":\"本地事务\",\"t\":[\"在单体应用中，多个业务操作使用同一条连接操作相同数据库中不同的数据表，一旦有异常可以很容易实现整体回滚。\",\"本地事务\"]},\"1274\":{\"h\":\"事务特征\",\"t\":[\"原子性：事务中包含的操作要么全部执行，要么全部不执行\",\"一致性：事务执行前后，数据库的完整性没有被破坏，即满足所有的约束条件和业务规则\",\"隔离性：事务间互不干扰，一个事务的执行不受其他事务的影响，也不影响其他事务。\",\"持久性：事务一旦提交，其对数据库的修改就会永久保存，即使发生系统故障或崩溃也不会丢失\"]},\"1275\":{\"h\":\"隔离级别\",\"t\":[\"Read_Uncommited: 读未提交，允许读取并发事务尚未提交的数据。可能产生脏读、不可重复读、幻读等问题\",\"Read_Commited: 读已提交，允许读取并发事务已经提交的数据，可以阻止脏读\",\"Repeatable_Read: 可重复读，对同一字段的多次读取结果都一致，可以阻止脏读、不可重复读问题\",\"Serializable: 可串行化，所有事务依次执行，可以阻止所有并发问题。\"]},\"1276\":{\"h\":\"传播行为\",\"t\":[\"Propagation_Required: @Transactional 默认模式，如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\",\"Propagation_Requires_New: 总是创建新事务，如果当前存在事务则挂起。开启的事务相互独立，互不干扰\",\"Propagation_Nested: 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；否则新建事务\",\"Propagation_Mandatory: 如果当前存在事务就加入；否则抛出异常\",\"另外还有三种可能不回滚的事务：\",\"Propagation_Supports: 如果当前存在事务就加入；否则以非事务的方式继续运行\",\"Propagation_Not_Supported: 以非事务方式运行，如果当前存在事务则把当前事务挂起\",\"Propagation_Never: 以非事务方式运行，如果当前存在事务则抛出异常\",\"Spring 管理事务有两种方式：手动硬编码的编程式、基于@Transactional的AOP声明式。\"]},\"1277\":{\"h\":\"分布式事务\",\"t\":[\"在分布式系统中，多个节点上的多个事务同时执行，这些事务之间可能存在相互依赖的关系。由于网络、硬件等原因，不同节点上的数据可能出现不一致，因此需要分布式事务来保证这些不同服务节点的事务要么全部完成，要么全部失败。\",\"分布式事务\"]},\"1278\":{\"h\":\"CAP 定理\",\"t\":[\"对于一个分布式系统，在满足 P 的前提下，只能满足 AP（如ZooKeeper）或 CP（如Eureka）：\",\"Consistency: 一致性，所有节点访问同一份最新的数据副本\",\"Availability：可用性，非故障的节点在合理的时间内返回合理的响应\",\"Partition Tolerance：分区容错性，出现网络分区时仍能对外提供服务\",\"CAP定理\",\"原因：若系统出现分区，系统中的某个节点在进行写操作。为了保证 C 一致性， 必须要禁止其他节点的读写操作，这就和 A 可用性发生冲突了。如果为了保证 A 可用性，其他节点的读写操作正常的话，那就和 C 一致性发生冲突了。如果不需要保证 P，即网络分区正常，那么 C 一致性和 A 可用性可以同时保证。\"]},\"1279\":{\"h\":\"BASE 理论\",\"t\":[\"BASE 理论核心思想是：即使无法做到强一致性，也应采用适当的方式来使系统达到最终一致性。\",\"Basically Available: 基本可用，系统在出现不可预知故障的时候，允许损失部分可用性 \",\"响应时间上的损失：响应时间增加\",\"系统功能上的损失：部分用户被导向一个降级页面\",\"Soft State：软状态，允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性（例如允许不同节点的副本同步过程存在延迟）\",\"Eventually Consistent：最终一致性，系统中所有的数据副本经过一段时间的同步后，最终达到一致。\",\"BASE 理论是对 CAP 中 一致性C 和 可用性A 权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求。\"]},\"1280\":{\"h\":\"Paxos\",\"t\":[\"共识算法：通过保持复制日志的一致性，即使面对故障，服务器也可以在共享状态上达成一致。\",\"Paxos 算法是第一个被证明完备的分布式系统共识算法。共识算法的作用是让分布式系统中的多个节点之间对某个提案（Proposal）达成一致的看法。例如哪个节点是 Leader、多个事件发生的顺序等。\",\"Paxos 主要包含两个部分：\",\"1. Basic Paxos\",\"多节点间如何就某个值（提案）达成共识\",\"Proposer：也称 Coordinator，负责接受客户端的请求并发起提案（提案编号、提议值）\",\"Acceptor：也称 Voter，负责对提议者的提案进行投票，同时需要记住自己的投票历史\",\"Learner：如果有超过半数接受者就某个提议达成了共识，那么学习者就需要接受这个提议，并就该提议作出运算，然后将运算结果返回给客户端。\",\"2. Multi Paxos\",\"一种思想，通过执行多个 Basic Paxos，就一系列值达成共识。\",\"针对存在恶意节点的情况（拜占庭问题），一般使用 PoW 工作量证明、PoS 权益证明 等公式算法。\"]},\"1281\":{\"h\":\"Raft\",\"t\":[\"节点类型\",\"一个 Raft 集群包括若干服务器，任何时间点，任意服务器一定会处于以下三个状态中的一个：\",\"Leader: 负责发起心跳，响应客户端，创建日志，同步日志\",\"Candidate: Leader 选举过程中的临时角色，由 Follower 转化而来，发起投票参与竞选\",\"Follower: 接受 Leader 的心跳和日志同步数据，投票给 Candidate\",\"在正常的情况下，只有一个服务器是 Leader，剩下的服务器是 Follower。Follower 是被动的，不会发送任何请求，只是响应来自 Leader 和 Candidate 的请求。\",\"选举\",\"任期：Raft 算法将时间划分为任意长度的任期（Redis 中的选举轮次），用连续的数字表示。每个任期都以一次选举开始。\",\"Raft 使用心跳机制来触发 Leader 的选举。\",\"Leader 通过心跳保持 Leader 状态\",\"Follower 通过心跳保持为 Follower 状态，并确认 Leader\",\"如果 Follower 在一个周期内没收到心跳，将开始一次选举 \",\"自增自己的 term 并转换为 Candidate，向其他节点请求投票\",\"如果超过半数节点投票给自己，则成为 Leader\",\"期间，如果收到其它节点声明 Leader 的心跳，且 term 号大于等于自己的 term，则退回 Follower，否则拒绝该请求并让该节点更新\",\"如果选举失败，随机一个新的超时时间，之后重新选举\",\"日志复制\",\"Entry：<term, index, cmd>的结构，每一个事件成为 entry，只有 Leader 可以创建 entry。\",\"Log：有 Entry 构成的数组，只有 Leader 才可以改变其他节点的 log。\",\"Leader 收到客户端请求后，会生成一个 entry，添加到自己的日志末尾，并广播给其它服务器，如果收到超过半数的成功响应，标记这个 entry 是 committed 的。Leader 通过强制 Follower 复制自己的日志来处理日志的不一致。\"]},\"1282\":{\"h\":\"事务方案\",\"t\":[\"刚性事务：遵循 ACID 原则，保证强一致性\",\"柔性事务：遵循 BASE 理论，保证最终一致性\"]},\"1283\":{\"h\":\"2PC 二阶段提交\",\"t\":[\"数据库支持的 2PC（2 Phase Commit 两阶段提交），又叫 XA Transactions。\",\"1-准备阶段：事务协调器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交（通过数据库的日志和加锁实现）\",\"2-提交阶段：事务协调器要求每个数据库提交数据。\",\"其中任何一个数据库否决此次提交，那么所有数据库都会被要求回滚它们在此事务中的那部分信息。\",\"2PC\",\"特点\",\"XA 比较简单，而且一旦商业数据库实现了 XA 协议，使用分布式事务的成本也比较低\",\"XA 性能不理想，特别是在交易下单链路，往往并发量很高，XA 无法满足高并发场景\",\"XA 目前在商业数据库支持的比较理想，在 MySQL 数据库中支持的不太理想，mysql 的 XA 实现，没有记录 prepare 阶段日志，主备切换回导致主库与备库数据不一致。\",\"许多 nosql 也没有支持 XA，这让 XA 的应用场景变得非常狭隘。\",\"也有 3PC，引入了超时机制\"]},\"1284\":{\"h\":\"TCC 事务\",\"t\":[\"TCC 指 Try-Confirm-Cancel 三阶段，是一种业务侵入式较强的事务方案，要求业务处理过程必须拆分为预留业务资源和确认/释放消费资源两个子过程。\",\"Try：尝试执行阶段，完成所有业务可执行性的检查（保障一致性），并且预留好全部需用到的业务资源（保障隔离性）。\",\"Confirm：确认执行阶段，不进行任何业务检查，直接使用 Try 阶段准备的资源来完成业务处理。Confirm 阶段可能会重复执行，因此本阶段所执行的操作需要具备幂等性。\",\"Cancel：取消执行阶段，释放 Try 阶段预留的业务资源。Cancel 阶段可能会重复执行，也需要满足幂等性。\",\"TCC事务补偿\",\"TCC 不同于 2PC 位于基础设施层面，而是位于用户代码层面，具有较高的灵活性和隔离性，但侵入性较强。通常基于某些分布式事务组件例如 Seata 完成。\"]},\"1285\":{\"h\":\"柔性事务 - 最大努力通知\",\"t\":[\"依赖持续重试来保证可靠性，提供可查询操作接口进行核对。\"]},\"1286\":{\"h\":\"柔性事务 - 可靠消息+最终一致性\",\"t\":[\"业务处理服务在业务事务提交之前，向实时消息服务请求发送消息，实时消息服务只 记录消息数据，而不是真正的发送。业务处理服务在业务事务提交之后，向实时消息服务确 认发送。只有在得到确认发送指令后，实时消息服务才会真正发送。\"]},\"1287\":{\"h\":\"Seata\",\"t\":[\"Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。\",\"TC - Transaction Coordinator 事务协调者，维护全局和分支事务的状态，驱动全局事务提交或回滚。\",\"TM - Transaction Manager 事务管理器，定义全局事务的范围：开始全局事务、提交或回滚全局事务。\",\"RM - Resource Manager 资源管理器，管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。\"]},\"1288\":{\"h\":\"MQ 实现最终一致性\",\"t\":[\"业务场景：当用户下单时，订单系统生成订单，商品系统扣减库存，促销系统扣减优惠券，最后订单入库。 虽然可以用定时任务轮询数据库完成业务需求，但消耗系统内存、增加数据库压力、时间误差大等问题，因此结合 MQ 的延迟队列和死信队列实现系统的最终一致性。\",\"订单业务\"]},\"1289\":{\"h\":\"订单业务\",\"t\":[\"用户下单后，订单系统需要\",\"发送订单创建的消息给 MQ，并设置 TTL，经过设定的 TTL 后进入死信队列，监听死信队列的服务根据订单的状态（已支付/未支付）进行后续业务处理（交付仓储物流/关单库存解锁），实现自动关单\",\"然后进入库存系统锁定库存\"]},\"1290\":{\"h\":\"库存锁定\",\"t\":[\"由于订单可能回滚，所以为了能够得到库存锁定的信息，在锁定时需要记录库存工作单（订单信息、商品信息、数量等）\",\"库存保存在 Redis 中，收到请求后判断库存是否充足，然后减掉 Redis 中的库存（Redis 中的库存扣完就无法下单了）\",\"锁定成功后向延迟队列发送消息(锁定的相关信息)，实现库存自动解锁。然后修改对应的订单状态，进入支付流程\",\"支付成功后订单进入出库状态，此时扣除数据库中的库存。如果中途失败，则取消订单，解锁库存等\",\"库存自动解锁：库存锁定(Redis 中)后，也会有一个消息发送到延迟队列，经过 TTL 后根据订单状态和工作单状态来判断是否进行库存解锁，只有订单是过期的，且工作单的库存处于锁定状态才进行库存解锁。\",\"自动关单和自动解锁库存两个业务通过重新查询当前的状态来保证幂等性。\"]},\"1291\":{\"h\":\"优惠券业务\",\"t\":[\"订单系统下单时，将扣减的优惠券事件放入消息队列中，最终优惠券系统会执行对应的业务，完成后通过手动确认的方式发送应答，告诉 MQ 删除这条消息，防止业务出现异常而消息已经被删除的问题。\",\"同时订单系统需要将对应的优惠券消息写入数据库，并把状态设为未完成，优惠券系统在消费成功后，也向 MQ 发送一个消息，通知订单系统将这个订单的优惠券业务状态设为完成，这样，即使消息积压导致消息丢失，也能通过定时任务将未完成的消息重新发送，实现最终一致性。\"]},\"1292\":{\"c\":[\"分布式\"]},\"1293\":{\"c\":[\"事务\"]},\"1294\":{\"h\":\"关于网关\"},\"1295\":{\"h\":\"网关概述\"},\"1296\":{\"h\":\"四层网关\",\"t\":[\"也被称为传输层网关，主要工作在OSI模型的传输层，处理TCP/UDP等传输层协议，典型的有阿里SLB、腾讯VGW等。\",\"它基于IP地址和端口号进行请求的转发，不关心应用层协议的具体内容。四层网关通过监听特定的IP地址和端口号，接收来自客户端的请求，并根据配置的路由规则，将请求转发到内部网络中的目标服务器。在转发过程中，四层网关会维护客户端与服务器之间的连接，确保数据的完整性和可靠性。适用场景：\",\"需要高性能和低资源消耗的TCP/UDP服务转发场景，如数据库代理、邮件代理等。\",\"无需解析应用层协议，只需要根据IP地址和端口号进行请求转发的场景。\",\"需要支持大规模并发连接和流量转发的场景，如CDN、负载均衡等。\",\"四层网关由于只处理传输层协议，不涉及应用层协议的解析和处理，因此相比七层协议，具有更高的性能和更低的资源消耗。\"]},\"1297\":{\"h\":\"七层网关\",\"t\":[\"主要工作在OSI模型的应用层，处理HTTP、HTTPS等应用层协议，典型的有百度BFE、阿里Higress。\",\"它基于URL、请求头等信息进行请求的转发，并可以对应用层协议进行深度解析和处理。七层网关通过解析请求中的URL、请求头等信息，根据配置的路由规则，将请求转发到内部网络中的目标服务器。在转发过程中，七层网关可以对请求和响应进行更细粒度的控制，如缓存、压缩、加密等。适用场景：\",\"需要基于URL、请求头等信息进行复杂路由和负载均衡的HTTP/HTTPS服务场景，如Web应用、API接口等。\",\"需要对请求和响应进行更细粒度的控制，如缓存、压缩、加密等处理的场景。\",\"需要支持HTTPS协议的场景，七层网关可以提供SSL卸载、证书管理等功能。\",\"七层网关由于能够解析和处理应用层协议，因此具有更多的功能和更高的灵活性，以及更高的安全性。\"]},\"1298\":{\"h\":\"API 网关\",\"t\":[\"API 网关是一个处于应用程序或服务（提供 REST API 接口服务）之前的系统，用来管理授权、访问控制和流量限制等，这样 REST API 接口服务就被 API 网关保护起来，对所有的调用者透明。因此，隐藏在 API 网关后面的业务系统就可以专注于创建和管理服务，而不用去处理这些策略性的基础设施。典型的有Spring Cloud Gateway、Zuul等。\"]},\"1299\":{\"h\":\"负载均衡\",\"t\":[\"负载均衡器分为四层交换机、七层交换机。L4 switch工作在OSI的传输层，主要分析IP层及TCP/UDP层，实现四层流量负载均衡，不关心应用协议，例如LVS，F5等。L7 switch工作在OSI的应用层，除了支持四层负载均衡以外，还能分析应用层的信息，如HAProxy，MySQL Proxy等。\",\"Nginx、LVS、HAProxy是目前使用最广泛的三种负载均衡软件。\"]},\"1300\":{\"h\":\"业务实践\",\"t\":[\"在具体架构设计时Nginx做负载均衡时，考虑到API网关在系统中不止一个（以集群的方式做高可用），通常可以将Nginx至于API网关前，负责对API网关的负载均衡，然后再由网关决定进入根据判定到哪个真实的web 服务器。 让两者的分工更加明确，也就是：API网关聚合服务，Nginx请求转发。\",\"业务网关：对于具体的后端业务应用或者是服务和业务有一定关联性的策略网关。业务网关针对具体的业务需要提供特定的流控策略、缓存策略、鉴权认证策略\",\"流量网关：与业务网关相反，定义全局性的、跟具体的后端业务应用和服务完全无关的策略网关。流量网关通常只专注于全局的Api管理策略，比如全局流量监控、日志记录、全局限流、黑白名单控制、接入请求到业务系统的负载均衡等\",\"业务网关一般部署在流量网关之后、业务系统之前，比流量网关更靠近业务系统。通常API网指的是业务网关。 有时候我们也会模糊流量网关和业务网关，让一个网关承担所有的工作,所以这两者之间并没有严格的界线。\"]},\"1301\":{\"h\":\"MGW\",\"t\":[\"MGW——美团点评高性能四层负载均衡\",\"MGW（Meituan Gateway）是一个提供10G/100G处理能力并且支持IPv6-IPv4双栈的四层网关服务，它能够提供业务外网ip到内网ip的转换，同时能够为业务多台机器提供负载均衡的功能。业务方一般用不太到。\",\"名词解释：\",\"VIP：由MGW发布的虚拟ip地址，对外提供服务的入口地址；资源允许的情况下，一般一个业务需求使用一个独立的vip，在新增VS页面不用指定，由系统自动分配。\",\"VPORT：由MGW发布的虚拟端口，通过虚拟ip+虚拟端口对外提供服务。\",\"VS：vs=vip+vport+protocol，virtual server，是一个四层的概念，由VIP（virtual ip，虚拟ip）、VPORT（virtual port，虚拟端口）、PROTOCOL（协议 TCP/UDP）组成，能唯一确定一个四层服务。\",\"RIP：RS的IP地址\",\"RPORT：RS的端口\",\"RS: rs=rip+rport， real server，指VS后端挂载的真实服务器，可以由RIP(real server ip，真实服务器ip地址)、RPORT（real server port，真实提供服务的端口）、协议（同vs的协议）确定。\"]},\"1302\":{\"h\":\"Oceanus\",\"t\":[\"Oceanus：美团HTTP流量定制化路由的实践\",\"Oceanus 是 HTTP 服务治理平台及七层负载均衡网关服务，致力于提供统一的自动化、智能化路由的解决方案，支持服务注册与发现、动态负载均衡、可视化管理、定制化路由、Session复用、熔断降级、一键截流和性能统计等功能。 业务主要用 Oceanus 管理 C 端的HTTP接口。\",\"流量分发策略：HTTP请求 -> 匹配站点域名 -> 匹配映射规则 -> 匹配该映射规则关联的策略\"]},\"1303\":{\"h\":\"Shepherd\",\"t\":[\"百亿规模API网关服务Shepherd的设计与实现\",\"Shepherd是一个高性能、高可用、易扩展的API网关，可以通过配置的方式，对外开放数据和能力，提供 API 完整生命周期的管理，包括API的创建，维护，发布和下线等，并提供鉴权认证、流量管控、熔断降级、数据缓存、流量路由等基础功能。 我们组业务一般用 Shepherd 管理 M端的HTTP接口，而C端接口在API层的处理逻辑特别复杂，需要很多定制化的实现，因此没有接入 Shepherd。\",\"从请求链路上看，Shepherd在Oceanus下游，HTTP请求经过Oceanus负载均衡转发到Shepherd，由Shepherd进行协议转换并调用内部服务。从产品定位上看，Oceanus是HTTP负载均衡服务，Shepherd是API托管服务。\"]},\"1304\":{\"h\":\"参考\",\"t\":[\"https://cloud.tencent.com/developer/article/2350984\",\"https://segmentfault.com/a/1190000041317227\",\"https://www.cnblogs.com/wzh2010/p/18133011\",\"https://tech.meituan.com/2017/01/05/mgw.html\",\"https://tech.meituan.com/2018/09/06/oceanus-custom-traffic-routing.html\",\"https://tech.meituan.com/2021/05/20/shepherd-api-gateway.html\"]},\"1305\":{\"c\":[\"微服务\"]},\"1306\":{\"c\":[\"网关\"]},\"1307\":{\"h\":\"Pro Git 阅读笔记\",\"t\":[\"闲来无事，读一读 Git Pro —— Git 圣经，记录一些以前没有注意过的问题和底层实现的原理。\"]},\"1308\":{\"h\":\"起步\"},\"1309\":{\"h\":\"特点\",\"t\":[\"Git 和其它版本控制系统在对待数据的方式上有很大的区别，大部分 VCS 系统（如 CVS、Subversion、Perforce等）以文件变更列表的方式存储系统，也就是基于文件的差异进行版本控制。\",\"deltas\",\"但是 Git 把数据看作是对小型文件系统的一系列快照，每次提交就会对当前的全部文件创建一个快照并保存这个快照的索引，如果文件没有修改就创建一个指向先前存储的链接。\",\"Git 中所有的数据在存储前都计算 SHA-1 校验和，然后以校验和来引用保存的信息。Git 数据库中保存的信息都是以文件内容的哈希值作为索引，而不是文件名。\"]},\"1310\":{\"h\":\"三种状态\",\"t\":[\"Git 管理的文件，即已跟踪的文件有三种状态，要牢记：\",\"commited 已提交：数据已经安全地保存在本地数据库中\",\"modified 已修改：修改了文件，但还没保存到数据库中\",\"staged 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\",\"这会让我们的 Git 项目拥有三个阶段：\",\"工作区：对项目的某个版本，从 Git 压缩数据库中独立提取出来的内容，可以使用和修改，对应已修改状态\",\"暂存区：是一个文件，保存了下次将要提交的文件列表信息，对应已暂存状态\",\"Git 目录：保存项目的元数据和对象数据库的地方，对应已提交状态\",\"基于上面的三种状态和三个阶段，Git 的基本工作流程是这样的：\",\"在工作区修改文件\",\"将下次想要提交的修改选择性添加到暂存区\",\"提交更新，即找到暂存区的文件，将快照永久性存储到 Git 目录\"]},\"1311\":{\"h\":\"配置文件\",\"t\":[\"Git 的配置分为三级，每一级会覆盖上一级的配置：\",\"系统级：/etc/gitconfig，针对系统中每一个用户以及他们仓库的通用配置，通过--system选项读写（Windows 在对应安装目录下）\",\"用户级：~/.gitconfig 或 ~/.config/git/config，针对当前用户，通过--global选项读写（Windows 在C盘Users目录下）\",\"仓库级：.git/config，针对特定仓库，通过--local选项读写\",\"可以使用git config --list --show-origin --show-scope命令查看当前环境所有的配置、所在文件位置，以及对应的作用域。git config --show-origin user.email查看最终生效的某个配置和来源。\"]},\"1312\":{\"h\":\"基础\"},\"1313\":{\"h\":\"本地命令\"},\"1314\":{\"h\":\"clone\",\"t\":[\"# HTTP/HTTPS 协议，可以指定文件夹名 git clone https://github.com/libgit2/libgit2 mylibgit # Git 协议 git clone git://github.com/username/repository.git # SSH 协议 git clone git@github.com:<username>/<repo>.git # 本地协议 git clone /mnt/d/ProgramData/GitDemo GitDemo2\"]},\"1315\":{\"h\":\"add\",\"t\":[\"add 命令有多个功能，比如跟踪新文件、放入暂存区、合并冲突时标记已解决等，通常可以把它理解为：精确地将内容添加到下一次提交中。\",\"git add file\"]},\"1316\":{\"h\":\"status\",\"t\":[\"-s参数可以简览状态，输出在文件名前有两列，第一列是暂存区状态，第二列是工作区状态，\\\"??\\\"表示尚未跟踪。\",\"git status -s // 输出： M README MM Rakefile A lib/git.rb ?? LICENSE.txt\"]},\"1317\":{\"h\":\"diff\",\"t\":[\"# 比较当前工作区和暂存区文件差异 git diff # 比较暂存区和数据库里最新版本的差异 git diff --staged git diff --cached\"]},\"1318\":{\"h\":\"commit\",\"t\":[\"# 提交所有已跟踪文件的修改，包括工作区和暂存区 git commit -a\"]},\"1319\":{\"h\":\"rm\",\"t\":[\"rm 命令操作的是暂存区和工作目录，不会影响已提交的 Git 数据库\",\"# 取消跟踪某个文件，即删除暂存区和工作目录下的该文件（需要当前暂存区和工作目录一致） git rm xxx.txt # 强制取消跟踪（强制删除，暂存区和工作目录可以不一致） git rm -f xxx.txt # 从暂存区中删除指定文件，常用于取消跟踪已经 add 的文件 git rm --cached xxx.txt\"]},\"1320\":{\"h\":\"restore\",\"t\":[\"注意 rm 和 restore 语义上的区别，虽然在某些场景下效果可能一样\",\"# 取消已暂存但尚未提交的文件修改，还原到最近依次提交时的状态 git restore --staged xxx.txt # 还原工作目录某文件到最近一次提交的状态 git restore xxx.txt\"]},\"1321\":{\"h\":\"mv\",\"t\":[\"Git 并不显式跟踪文件移动，但可以通过 mv 命令推断更名操作。\",\"git mv a.txt b.txt # 等价于下面三个命令的组合 mv a.txt b.txt git rm a.txt git add a.txt\"]},\"1322\":{\"h\":\"log\",\"t\":[\"log 命令打印提交历史记录，支持很多种格式化工具，调整输出样式，并且支持多种过滤器限定事件、作者、关键字等等，详细参数参考 Git - 查看提交历史。\",\"# 打印提交日志和差异信息，并限制条目数为 2 git log --patch -2 git log -p -2 # 打印统计信息，设置展示信息详略 git log --stat --pretty=[oneline|full|fuller] # 格式化输出，并图形化分支合并 git log --pretty=format:\\\"%h - %an, %ar : %s\\\" --graph # 查看 Junio Hamano 在 2008 年 10 月其间， 除了合并提交之外的哪些提交修改了测试文件 git log --pretty=\\\"%h - %s\\\" --author='Junio C Hamano' \\\\ --since=\\\"2008-10-01\\\" --before=\\\"2008-11-01\\\" --no-merges -- t/\"]},\"1323\":{\"h\":\"amend\",\"t\":[\"修正上次提交（提交暂存区中的文件，并修改 commit 信息），不会影响其它信息。实际上是用一个新的提交替换旧的提交，旧的提交就像从未存在过一样。\",\"git commit --amend\"]},\"1324\":{\"h\":\"reset\",\"t\":[\"# 取消暂存 b.txt git reset HEAD b.txt # 【危险】将当前分支的 HEAD 移动到指定提交上，并重置工作区和暂存区到该提交状态 git reset --hard <commit>\"]},\"1325\":{\"h\":\"远程仓库\"},\"1326\":{\"h\":\"remote\",\"t\":[\"# 展示所有远程分支简称和URL。clone 时的源地址默认名称为 origin git remote -v # 新增一个远程仓库 git remote add <shortname> <url> # 重命名远程仓库，会同步修改跟踪的分支名 git remote rename <shortname> <new_name> # 移除某个远程仓库，会同步删除跟踪分支和配置信息 git remote remove <remote> # 查看远程仓库信息 git remote show <remote> # * remote origin # Fetch URL: https://github.com/<username>/guide-rpc-framework.git # Push URL: https://github.com/<username>/guide-rpc-framework.git # HEAD branch: master [当前所处分支] # Remote branch: [远程仓库所有分支的状态，如已跟踪、未跟踪、已移除等] # master tracked # Local branch configured for 'git pull': # master rebases onto remote master [pull 时将远程 master 合到本地的 master] # Local ref configured for 'git push': # master pushes to master (fast-forwardable) [push 时将本地 master 推到远程的 master] # 修改远程url git remote set-url <remote_name> <new_url>\"]},\"1327\":{\"h\":\"fetch\",\"t\":[\"# 拉取最新的远程仓库数据到本地，但不会自动合并或修改 git fetch <remote>\"]},\"1328\":{\"h\":\"push\",\"t\":[\"# 将本地的 master 推送到 origin，有冲突时需要先拉取合并 git push origin master # 推送本地所有分支到 origin git push -all origin\"]},\"1329\":{\"h\":\"标签\",\"t\":[\"Git 里可以给特定的提交打上一个标签，可以通过 checkout 检出。标签分两种类型：\",\"轻量标签 lightweight：没有多余信息\",\"附注标签 annotated：包含标签信息等冗余信息，可以用 GPG 签名并验证\",\"# 检索标签 git tag git tag -l <pattern> git tag --list <pattern> # 创建轻量标签 git tag v1.0_lw # 创建附注标签 git tag -a v1.0 -m \\\"my version 1.4\\\" # 指定提交打标签 git tag <tagname> 9fceb02 # 查看标签信息 git show <tagname> # 推送单个标签到远程仓库 git push <remote> <tagname> # 推送所有标签到远程仓库，包括轻量、附注 git push <remote> --tags # 删除本地标签 git tag -d <tagname> # 删除远程仓库标签 git push origin :refs/tags/v1.4 # 将冒号前面的空值推送到远程标签名 git push origin --delete <tagname>\"]},\"1330\":{\"h\":\".gitignore 规则\",\"t\":[\"所有空行或者以#开头的行都会被 Git 忽略\",\"可以使用标准的 glob 模式（简化正则）匹配，它会递归地应用在整个工作区中 \",\"*匹配零个或多个任意字符\",\"[abc]匹配方括号中的单个字符\",\"?匹配一个任意字符\",\"[0-9]匹配范围区间\",\"a/**/z匹配任意中间目录，如a/z, a/b/z, a/b/c/z\",\"匹配模式可以以/开头防止递归\",\"匹配模式可以以/结尾指定目录\",\"要忽略指定模式以外的文件或目录，可以在模式前加上叹号!取反\",\"根目录下的.gitignore递归作用到整个仓库，子目录下的.gitignore仅作用于所在目录\",\"https://github.com/github/gitignore 给出了针对各种项目和语言的忽略跟踪文件，或者直接问 ChatGPT 吧更方便。\"]},\"1331\":{\"h\":\"分支\",\"t\":[\"几乎所有的版本控制系统都以某种形式支持分支，使用分支意味着可以把正在进行的工作从开发主线上分离开来，以免影响开发主线。下面看看 Git 实现分支的逻辑，需要牢记 Git 保存的不是文件的变化或者差异，而是不同时刻的快照。\"]},\"1332\":{\"h\":\"分支结构\",\"t\":[\"假设我们现在的 Git 项目里有三个文件已经暂存，当初次执行提交时，Git 会先计算每一个子目录的校验和， 然后在 Git 仓库中将这些校验和（黄色）保存为一个树对象（蓝色），记录着目录结构和 blob 文件索引，这个树就可以看作是仓库的一个快照。随后 Git 会创建一个提交对象（白色），除了包含提交本身相关的信息，比如作者、日期等等之外，还包含一个指向这个树对象的指针。\",\"当我们对仓库里的文件做一些修改，再次提交时，就会再次创建若干 blob 和一个树对象，以及一个提交对象，并且这个提交对象里包含一个指向上次提交对象（父对象）的指针，这样若干次的提交就形成了一个链表结构。\",\"至于分支，实质上就是指向一个提交记录的可变指针，比如默认的 master 就指向了主干上最新的提交记录，而创建一个新分支/标签实际上就是创建一个指向 HEAD 所在提交记录的指针，实现上也就是往一个文件里写入 40 个字节的 SHA-1 值和 1 个换行符，因此效率非常高。HEAD 是一个特殊指针，指向当前所在的本地分支，随着 checkout 检出而移动。\"]},\"1333\":{\"h\":\"分支管理\",\"t\":[\"# 创建分支 git branch testing # 创建并切换到该分支 git checkout -b issu47 # 分支重命名，缺省是当前分支 git branch -m <oldBranch> newBranch # 显示所有分支，以及他们的最新提交记录/过滤已提交/未提交 git branch -v --merged --no-merged # 展示分支和对应的跟踪分支，以及提交差异 git branch -vv # 列出所有分支 git branch -a # * 是当前所在分支，remotes 表示远程分支，origin 是某个远程仓库引用，最后是远程分支名 * master remotes/origin/HEAD -> origin/master remotes/origin/branch1 remotes/origin/master # 删除分支 git branch -d hotfix # 强制删除还未合并的分支 git branch -D unmerged\",\"另外，团队可以根据不同的需求和常见，选择合适的分支开发流，如集中式、集成管理者、主管与副主管等等，可以参考：5 个 Git 工作流，改善你的开发流程 - 削微寒 - 博客园。\"]},\"1334\":{\"h\":\"分支合并\"},\"1335\":{\"h\":\"Fast-forward\",\"t\":[\"如果一个分支的任务完成，需要将它合并入主分支。对于下面这个分支结构，当前处在 master 分支。\",\"如果执行git merge hotfix，由于 hotfix 指向的 C4 提交是 merge 指向的 C2 提交的直接后继，因此 Git 将执行fast-forward以快进方式合并，即让 master 指针直接后移。之后可以执行 git branch -d hotfix删除已合并的分支。\"]},\"1336\":{\"h\":\"Recursive\",\"t\":[\"但实际中更多的是下面这种无法快进的分支合并结构，即两个分支有共同祖先，但不是直接后继。\",\"此时如果执行git merge iss53，那么 Git 将针对两个分支的末端提交和它们的公共祖先执行三方合并（C4、C5、C2），创建一个新的快照和提交 C6 作为最新版本，并且 C6 会有两个父提交 C4 和 C5。\",\"如果在三方合并的过程中，遇到合并冲突，即不同分支同时修改了同一块数据，那么 Git 会将冲突的内容用下面的格式展示在文件中，然后暂停下来，由用户自己处理完冲突后手动暂存和提交。\",\"<<<<<<< HEAD:index.html <!-- HEAD 指示版本 --> <div id=\\\"footer\\\"> contact : email.support@github.com </div> <!-- 当前分支所在的版本在上面 --> ======= <div id=\\\"footer\\\"> please contact us at support@github.com </div> >>>>>>> iss53:index.html <!-- 要合并的分支版本在下面 -->\"]},\"1337\":{\"h\":\"变基\",\"t\":[\"不同于 merge 的三方合并或快进，rebase 变基操作可以将修改的补丁（C4）迁移到另一个分支（master）上。\",\"# 将某个分支变基到 master上，默认是当前分支 git rebase master <branch> # 选中在 client 分支但不在 server 分支的修改。变基到 master 上 git rebase --onto master server client\",\"假设我们有如下的分支结构，当前在 experiment 分支上，想要变基到 master 上，整个流程是这样的：\",\"Git 首先会找到两个分支的共同祖先 C2\",\"然后对比当前分支（experiment）相对于该祖先的历次提交，提取相应的修改暂存\",\"接着将当前分支指向目标（master）基底 C3，依次应用暂存的修改 C4'\",\"最后 experiment 会指向最后一次修改的补丁 C4'\",\"至此变基完成，然后手动检出到 master 执行快进合并即可。\",\"变基与合并的结果没有任何区别，但变基使得提交历史更加整洁，原本并行的开发过程就像是串行的一样。但是变基存在一定风险，切记不要对已推送至别处的提交执行变基操作。\",\"从合作的开发者的角度看，提交记录就是开发的历史，理论上不应该\\\"篡改\\\"，而从读者或者是新加入的开发者角度看可能只需要关注最终的结果，过程方便易读最好，所以变基与合并各有不同。\"]},\"1338\":{\"h\":\"远程分支\",\"t\":[\"远程引用是对远程仓库的引用（指针），包括分支、标签等以 <remote>/<branch/tag> 的形式命名，origin 是默认的远程仓库引用。\",\"# 克隆远程仓库并指定一个引用名，默认是 origin git clone -o booyah <url> # 展示远程引用的完整列表 git ls-remote origin # 缓存单个/所有远程仓库的最新数据到本地，但并不修改本地工作目录 git fetch <remote> git fetch --all # 拉取并尝试合并远程分支 = fetch + merge git pull # 添加新的远程引用 git remote add <shortname> <url> # 将本地的 serverfix 分支推送到 origin 远程仓库 # 实际上 serverfix 是 refs/heads/serverfix:refs/heads/serverfix 的简化 git push origin serverfix # 将本地的 serverfix 分支推送到 origin 远程仓库的 awesome 分支 git push origin serverfix:awesome # 删除远程分支 git push origin --delete serverfix\",\"从一个远程跟踪分支检出一个本地分支会自动创建跟踪分支，跟踪的远程分支叫做上游分支。也就是说本地的某个分支关联到远程仓库的某个分支，在拉取和推送时能自动关联到对应的上游分支。\",\"# 检出远程 origin 仓库的 serverfix 分支，命名为 local_branch，并自动跟踪 git checkout -b local_branch origin/serverfix # 简化版，本地分支默认同名 git checkout --track origin/serverfix git checkout serverfix # 修改正在跟踪的上游分支 git branch -u origin/awesome git branch --set-upstream-to origin/awesome\"]},\"1339\":{\"h\":\"高级工具\",\"t\":[\"众所周知，高级工具，就是很麻烦，通常也用不太到的奇技淫巧...\"]},\"1340\":{\"h\":\"提交引用\"},\"1341\":{\"h\":\"单提交\",\"t\":[\"# 通过 SHA-1 引用，支持简写（只要没有冲突） git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b git show 1c002dd4b536e7479f git show 1c002d # 查看分支指向的特定提交 git rev-parse topic1 # 查看引用日志，记录本地仓库最近几个月 HEAD/分支 引用变更的历史 git reflog # HEAD 五次提交前的记录 git show HEAD@{5} # HEAD 两个月前的提交记录 git show HEAD@{2.months.ago} # HEAD 上一次提交 git show HEAD^ # HEAD 上一次提交的第二个父提交（三方合并时所在分支为第一父提交，另一个分支为第二父提交） git show HEAD^2 # HEAD 父提交的父提交 git show HEAD~2 git show HEAD~~\"]},\"1342\":{\"h\":\"多提交\",\"t\":[\"# 双点区间，输出在 refA 中但不在 refB 中的提交 git log refA..refB git log origin/master..HEAD # 在 refA，不在 refB 和 refC 中的提交 git log refA ^refB --not refC # 三点区间，输出被 refA 和 refB 其中一个包含，但不同时包含的提交，并显示处于哪一侧 git log --left-right refA...refB\"]},\"1343\":{\"h\":\"贮藏清理\",\"t\":[\"stash 还是一个很有用，也很常用的功能，可以跟踪文件的修改与暂存的改动，将未完成的修改保存到一个栈上，留待以后重新应用这些改动。\",\"# 贮藏当前的修改，-u/--include-untracked 包括未跟踪的 git stash -u git stash push -m \\\"stash info\\\" # 展示贮藏列表 git stash list # 应用栈顶贮藏 git stash apply # 指定应用某个贮藏记录 git stash apply stash@{1} # 应用贮藏并抛弃 git stash pop # 创建新分支并应用栈顶贮藏 git stash branch new_branch # 抛弃某个贮藏 git stash drop stash@{0} # ----------------------------------------------------------- # 清理工作目录，移除未被跟踪文件。 # -f 强制 # -d 删除空的子目录 # -n 展示将执行的具体操作 # -i 进入交互模式 git clean -f -d -n\"]},\"1344\":{\"h\":\"重写历史\",\"t\":[\"# 将当前分支指针移动到三个提交之前的父提交，开始变基 # 可以保留、修改、抛弃、压缩提交 git rebase -i HEAD~3 # 通过脚本一次性改写大量提交 git filter-branch --tree-filter 'rm -f passwords.txt' HEAD # 移动 HEAD 和当前分支到指定提交，根据参数修改空间内的文件 git reset --soft <commit> git reset --mixed <commit> git reset --hard <commit> # 撤销某个提交，但并不改变提交历史，而是创建一个新的提交记录 git revert <commit> git revert <start_commit>...<end_commit>\",\"下面谈谈 reset 和 checkout 两个命令的原理。首先要知道 Git 管理了三颗不同的树：\",\"HEAD 上一次提交的快照，下一次提交的父结点。也就是当前分支引用的指针，总是指向该分支上的最后一次提交。\",\"Index 预期的下一次提交的快照。，理解成暂存区。\",\"Working Directory 沙盒，也就是当前的工作目录。\",\"假设我们当前仓库里有一个文件的v1版本，状态如下： \",\"当我们修改了文件为 v2 版本后，状态如下： \",\"当执行完 git add 命令后： \",\"当执行完 git commit 命令后： \",\"现在如果执行 git status 将没有输出，因此三棵树是完全一样的。这时候如果我们执行 git reset --soft HEAD~来回到上一个提交，实际上是移动了当前分支（是一个指针）已到了上一次提交，HEAD 也跟着移动过去了，reset 执行就到此为止了，没有修改暂存区/工作区数据。\",\"而如果执行的是git reset --mixed HEAD~，那么会进一步的，用 HEAD 指向的快照来更新暂存区内的数据，这也是 reset 无参的缺省行为。\",\"而如果执行的是git reset --hard HEAD~，那么会再进一步的，用 HEAD 指向的快照来更新暂存区，以及工作区内的数据，并且是强制的没有任何提示的，所以是一个危险的操作！\",\"最后如果执行的是git reset file.txt带有文件路径的形式，那么本质上只是将某个文件从快照中复制到暂存区。\",\"搞懂了 reset 之后，再看 checkout 就容易多了，checkout 实际上只是移动了 HEAD 指针指向另一个分支指向的提交，并没有改变任何分支的指针。\"]},\"1345\":{\"h\":\"Hooks\",\"t\":[\"Git 支持在特定的重要动作发生时触发自定义脚本，即钩子，存放在.git/hooks目录下。分类如下：\",\"客户端钩子：clone 时不随同复制 \",\"提交工作流： \",\"pre-commit键入提交信息前运行，如果以非0值退出将放弃提交。用于检查即将提交的快照\",\"prepare-commit-msg启动提交信息编辑器之前，默认信息被创建之后运行。可以编辑默认的提交信息\",\"commit-msg提交信息编辑后运行，非0值退出将放弃提交。可以校验项目状态和提交信息\",\"post-commit整个提交过程完成后运行，可用于通知事件\",\"电子邮件：由git am命令调用 \",\"applypatch-msg、pre-applypatch、post-applypatch\",\"其它： \",\"pre-rebase运行于变基之前，非0值退出将中止变基\",\"post-rewrite被那些会替换提交记录的命令调用，如 git rebase\",\"post-checkout checkout 执行成功后运行，可以调整工作目录\",\"post-merge merge 执行成功后运行，可以恢复 Git 无法跟踪的工作区数据\",\"pre-push在git push运行期间， 更新了远程引用但尚未传送对象时被调用\",\"pre-auto-gc垃圾回收开始之前被调用\",\"服务端钩子： \",\"pre-receive处理来自客户端的推送操作时运行，非0值退出将拒绝推送更新\",\"update也是处理客户端推送，但会为每个分支各执行一次，哪个运行结果非0就拒绝更新哪个分支\",\"post-receive整个过程完结以后运行，可以用来更新其他系统服务或者通知用户\"]},\"1346\":{\"h\":\"数据恢复\",\"t\":[\"如果因为意外丢失了一些有用的提交，Git 有一些方式可以恢复丢失的提交数据：\",\"Reflog 日志：提交或改变分支时，Git 会在该日志中记录 HEAD 修改的值\",\"fsck：该工具可以检查数据库的完整性，显示出所有悬空的对象（没有被其它对象指向）\",\"# 查看 HEAD 引用的变更记录 git reflog git log -g # 找到需要的提交记录，创建一个新分支指向它 git branch recover_branch 118cccf # 切换到所需的提交即可 git checkout recover_branch # 校验数据库完整性，找出所需的提交 git fsck\"]},\"1347\":{\"h\":\"其它\",\"t\":[\"Rerere = Reuse Recorded Resolution，可以实现重用冲突解决的方案，通过git config rerere.enabled true开启这个功能后，会自动记录合并冲突的解决方案，后续遇到相同的冲突（很罕见的场景吧...）会自动应用解决方案。\",\"# 重用记录状态 git rerere status # 显式解决方案的当前状态 git rerere diff # 应用解决方案 git rerere\",\"Git 提供了一些辅助调试的命令：\",\"# 显式文件的 70-80 行，每行最后一次修改对应的提交记录; -C 自动追踪复制源 git blame -L 70,80 -C file.txt # 在提交之间以二分的方式检出，标记 good/bad 从而快速找出出问题的首次提交 git bisect start git bisect run test-error.sh git bisect good/bad git bisect reset\",\"Git 支持子模块功能，允许将一个 Git 仓库作为另一个仓库的子目录，同时保持提交的独立。\",\"git submodule add https://github.com/<username>/<repo> git submodule init git submodule update git submodule sync --recursive git submodule foreach 'git stash'\",\"Bundle 打包功能可以将更新打包成一个二进制文件，用于传输。\",\"# 创建一个 repo.bundle 包含所有用于重建 master 分支所需的数据 git bundle create repo.bundle HEAD master # 指定打包区间 git bundle create commits.bundle master ^9a466c5 # 验证打包 git bundle verify commits.bundle\",\"Git 拥有一个凭证系统处理身份认证，有以下几种选项：\",\"默认所有都不缓存。 每一次连接都会询问你的用户名和密码\",\"cache 模式会将凭证存放在内存中一段时间，例如 15 分钟后从内存中清除\",\"**store **凭证用明文的形式存放在磁盘中，并且永不过期\",\"Mac 的 osxkeychain 模式会将凭证存入提供的钥匙串中\",\"Windows 下有类似的 Git Credential Manager for Windows 辅助工具\"]},\"1348\":{\"h\":\"内部原理\",\"t\":[\"从根本上来讲，Git 是一个内容寻址文件系统，核心部分是一个简单的键值对数据库，在此之上提供了一个版本控制系统的用户界面。\"]},\"1349\":{\"h\":\"目录结构\",\"t\":[\"$ ls -F1 hooks/ # 客户端/服务端的钩子脚本 info/ # 全局性排除文件，放置不希望记录到 .gitignore 文件的忽略模式 objects/ # 存储所有数据内容 refs/ # 存储指向数据的提交对象的指针 config # 本仓库特定的配置文件 description # 供 GitWeb 程序使用，无需关心 HEAD # HEAD 指针当前的引用 index # 保存暂存区信息\"]},\"1350\":{\"h\":\"Git 对象\",\"t\":[\"每次运行 git add 、git commit 命令时，Git 所做的实质上就是：\",\"将被改写的文件保存为数据对象 blob\",\"更新暂存区，记录树对象 tree\",\"最后创建一个指明顶层树对象和父提交的提交对象 commit\",\"数据对象、树对象、提交对象 三种主要的 Git 对象均以单独文件的形式保存在.git/objects目录下。\",\"操纵 Git 对象的命令有以下的一些底层命令，也是 Git 上层命令实际调用的方法。\",\"# 返回对象的 hash 键，-w 写入数据库 git hash-object -w xxx.txt # 查阅对象 # -p 判断对象内容类型，显式大致内容 # -t 打印对象类型，如 blob/tree/commit # -s 查看大小 git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4 # 手动加入暂存区，100644 普通文件，100755 可执行文件，120000 符号链接 git update-index --add --cacheinfo 100644 83baae618040... file.txt # 将暂存区内容写入一个树对象 git write-tree # 将一个已有的树读入暂存区 git read-tree --prefix=bak d8329f... # 创建提交对象，-p 指定父提交 git commmit-tree <tree> -p <parent>\"]},\"1351\":{\"h\":\"Git 引用\",\"t\":[\"GIt 中通过引用 refs (references) 来替代原始的 SHA-1 值，更加简便。引用都保存在.git/refs目录下，包括heads保存分支引用、tags标签引用、refs/remotes远程引用等。HEAD 文件是一个特殊的引用，通常是一个符号引用（指向其它引用），指向目前所在的分支，除非是处在detached HEAD分离头指针状态。\",\"# 更新某个引用，所以说分支的本质就是指向某个提交的指针 # git branch <branch> 或 checkout 实际就是执行 update-ref git update-ref refs/heads/master 1a410efbd... # 创建标签引用 git update-ref refs/tags/v1.0 cac0cab # 查看 HEAD 指向的引用 git symbolic-ref HEAD # 指定 HEAD 引用 git symbolic-ref HEAD refs/heads/test\",\"不同于数据对象、树对象、提交对象，标签引用是一个永远指向某个提交对象的对象。而远程引用是一种只读的，只有在跟服务器通信时才会更新的对象，在执行完git remote add后，.git/config中会自动添加一个小节，指定远程版本库名称、URL，以及对应的引用规范 +<src>:<dst>：\",\"+表示即使在不能快进的情况下也要强制更新引用\",\"<src>是一个代表远程版本库引用的模式，只能全部通配，不能部分通配\",\"<dst>是本地跟踪的远程引用的位置\",\"# fetch 时获取远程服务器的 refs/heads 下的所有引用，写入本地的 refs/remotes/origin 中 # push 时推送本地的 master 到远程服务器上的 qa/master 分支 [remote \\\"origin\\\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/*:refs/remotes/origin/* push = refs/heads/master:refs/heads/qa/master # 一下三个命令等价 git log origin/master git log remotes/origin/master git log refs/remotes/origin/master # 本地的 空 推送到远程的 topic，可以实现删除远程服务器上的 topic 引用 git push origin :topic git push origin --delete topic\"]},\"1352\":{\"c\":[\"工具\"]},\"1353\":{\"c\":[\"Git\"]},\"1354\":{\"h\":\"面试八股\"},\"1355\":{\"h\":\"实习 -- 目的地搜索优化\",\"t\":[\"以前用户在搜索机场数据时，只会展示对应的城市机场信息，新的需求是用户在搜索某个景点信息时，展示对应城市的机场信息。另外优化了两个问题：\",\"邻近机场距离由机场-邻近城市 -> 机场-邻近机场：增加near_airport_distance的json格式串\",\"同音不同字的城市机场搜索：cityPinyin -> 机场 的 Map 切换为 MultiMap\"]},\"1356\":{\"h\":\"数据库设计\"},\"1357\":{\"h\":\"Scenic_Data\",\"t\":[\"4K 多条数据\",\"CREATE TABLE `scenic_data` ( `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT, `scenic_id` varchar(32) NOT NULL DEFAULT '', `scenic_name` varchar(32) NOT NULL DEFAULT '', `city_code` char(3) DEFAULT NULL, `city_name` varchar(32) DEFAULT NULL, `scenic_longitude` varchar(32) NOT NULL DEFAULT '', `scenic_latitude` varchar(32) NOT NULL DEFAULT '', `deleted` int(11) NOT NULL DEFAULT '0', `operator` varchar(32) NOT NULL DEFAULT '', `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`), KEY `idx_city_code` (`city_code`), KEY `idx_scenic_id` (`scenic_id`), KEY `idx_deleted` (`deleted`) ) ENGINE=InnoDB AUTO_INCREMENT=7762 DEFAULT CHARSET=utf8mb4'\"]},\"1358\":{\"h\":\"Scenic_Near_Airports\",\"t\":[\"CREATE TABLE `scenic_near_airports` ( `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT, `scenic_id` varchar(32) NOT NULL DEFAULT '', `scenic_name` varchar(32) NOT NULL DEFAULT '', `near_city_code` char(3) NOT NULL DEFAULT '', `near_airport_code` char(3) NOT NULL DEFAULT '[]', `distance` int(11) DEFAULT '0', `deleted` int(11) NOT NULL DEFAULT '0', `operator` varchar(32) NOT NULL DEFAULT '', `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`), KEY `idx_scenic_near_airport` (`scenic_id`,`near_airport_code`), KEY `idx_deleted` (`deleted`) ) ENGINE=InnoDB AUTO_INCREMENT=7589 DEFAULT CHARSET=utf8mb4\"]},\"1359\":{\"h\":\"核心逻辑\"},\"1360\":{\"h\":\"景点/邻近机场落库\",\"t\":[\"ScenicDataPullJob#pullScenicPoiAndComputeNearAirport 每 6H 执行一次\",\"从景点服务拉取全量景点数据\",\"过滤有机场的城市、国内景点等等各种过滤\",\"和DB里面现有的的景点数据做diffAndSave\",\"计算景点的邻近机场，选取0-300km以内，且距离最近的三个机场\",\"落到景点邻近机场表里\"]},\"1361\":{\"h\":\"本地缓存/搜索树\",\"t\":[\"InitService#buildSuggestionEnv 服务启动时/每天凌晨执行 (本地缓存1.5G，机器8G，影响不大)\",\"读取数据库的最新数据，构建 景点id -> 邻近机场 的map集合\",\"根据拼音构建前缀搜索树 Trie Tree，key=景点拼音，value=景点id \",\"服务里缓存了很多前缀树，如城市拼音、城市拼音简称、机场、邻近机场、景点等等，存入一个Map<TrieTreeTypeEnum, TrieTree>里\",\"TrieTree封装了一个TreeNode根结点，每个TreeNode节点里面是一个TreeNode列表，和当前这个节点保存的字符，以及是否是叶子结点的标志位，叶子结点还会有一个存储景点Id的data字段\",\"搜索的时候按照用户输入的内容转换成拼音，然后一个个字符匹配，输入全部匹配完或者到达叶子结点即匹配成功，把当前这层后续的所有叶子结点里data域存储的景点Id返回出去，如果中途遇到某个字符不匹配，那么匹配失败返回个null出去\",\"TrieTree = TreeNode + 对外的方法\",\"TreeNode = List<TreeNode> + char + terminal + scenicId\"]},\"1362\":{\"h\":\"搜索逻辑\",\"t\":[\"用户输入过滤非法字符，转换成拼音\",\"根据拼音搜索前缀树，获得匹配的景点Id\",\"然后构造对应的景点信息\",\"接着用中文过滤一遍，防止中文搜索时同音不同名的景点信息（黄鹤楼/黄河楼）\",\"然后再过滤没有机场信息的景点\",\"如果过滤完的结果为空，会根据用户输入去查邻近城市的机场做一个兜底\",\"最后有一些后置的处理，像城市/景点的搜索热度等等。最后将搜索结果返回\"]},\"1363\":{\"h\":\"多线程使用\",\"t\":[\"中转av批量查询接口需求中，需要根据 ftd 批量查询中转联程的AV情况，以前已经有了单个查询请求的接口，这次需要新增批量查询接口。由于每次查询都是一个耗时的RPC调用，因此需要使用多线程提高效率。\",\"CompletableFuture<Void> allFuture = CompletableFuture.allOf(transferAvFlightReqs.stream() .map(request -> CompletableFuture .supplyAsync(() -> queryTransferAv((request))) .thenAccept((res) -> { String uniqueKey = getTransferAvUniqueKey(request); map.put(uniqueKey, res); })) .toArray(CompletableFuture[]::new)); allFuture.get(Config.BATCH_QUERY_TRANSFER_AV_TIMEOUT, TimeUnit.MILLISECONDS);\",\"主要的考虑点是要保证单个请求的失败不影响其它请求（thenAccept），并且基于单次查询的调用时间，通过配置的方式限制批量请求的总时间。\"]},\"1364\":{\"h\":\"项目\"},\"1365\":{\"h\":\"酷安好物\",\"t\":[\"酷安好物是一个好物推荐和购物商城，用户可以通过网页浏览商品信息、搜索商品、下单等，管理员通过系统后台维护商品SPU/SKU、订单管理、人员管理等。\",\"技术总体基于 SpringBoot+SpringCloud+MyBatis+Redis。主要使用 SpringBoot 框架完成后台商品 SPU/SKU 的上下架管理使用 MyBatisPlus 完成数据库的增删改查实现 MySQL 的主从同步使用 Redisson 实现分布式锁避免缓存击穿使用 阿里云OSS 实现图片的上传存储使用 Redis 对购物车数据进行缓存，减少对数据库的访问，加快处理速度\"]},\"1366\":{\"h\":\"Nginx 反向代理\",\"t\":[\"正向代理代理客户端，反向代理代理服务器。\",\"upstream gulimall{ server 127.0.0.1:10086; } server { listen 80; server_name gulimall *.gulimall; location /static { root D:\\\\Tools\\\\nginx\\\\html; } # 配置请求路由 location / { proxy_pass http://gulimall; proxy_set_header Host $host; } # include D:\\\\\\\\Tools\\\\\\\\nginx\\\\\\\\conf\\\\\\\\conf.d\\\\\\\\*.conf; # 包含了哪些配置文件 }\",\"本机请求 gulimall -> 本地 Nginx 服务器，如果是 /static 路径的静态资源直接从 Nginx 目录下返回\",\"其它 gulimall 域名下的请求根据 upstream 转发到网关\"]},\"1367\":{\"h\":\"JVM 调优\",\"t\":[\"JMeter 压测\",\"添加线程组 -> 查看结果树和汇总报告 -> 分析异常比例、吞吐量、响应时间等。\",\"发现：直接访问一个控制器的吞吐量可达 25000 QPS；而经过网关再访问吞吐量还剩 5500 QPS 左右，异常数量也会增加；而如果经过 Nginx 代理吞吐量仅剩 2200 QPS 左右。\",\"优化：\",\"三级目录原本是根据父目录 id 查三次数据库，查询 DB 速度很慢。可以优化业务逻辑，一次性全部查出再封装树形结构，QPS 从 2500 提高到了 7000。\",\"商品信息展示的业务，网络传输数据量过大，导致页面加载过慢，可以通过 TO 传输对象精简返回的数据量，加快页面的加载\",\"JConsole\",\"Java 监视和管理控制台，根据 PID 连接查看进程信息，可以查看虚拟机内存使用情况，包括堆空间、Eden、Survivor等，包括 Young GC、Old GC 时间，以及线程数量等信息\",\"jmapjstack 查看堆栈信息，以及排查死锁问题jhsdb jmap --heap --pid 20536 查看进程使用的GC算法、堆配置信息和各内存区域内存使用信息jstat -gc -h3 31736 1000 10 查看 GC 情况，各个空间的使用量jmap -dump:format=b,file=dump.hprof 20536 生成堆转储快照 heap profile -> VisualVM/JProfile 查看内存占用情况 -> 定位大对象 -> 定位代码中创建的位置 -> 排查 BUG\"]},\"1368\":{\"h\":\"缓存\",\"t\":[\"引入 data-redis-starter -> 配置 redis 地址、访问 -> 使用 StringRedisTemplate 操作 Redis （redisTemplate 是 Spring 对 Lettuce/Jedis 的封装）\",\"@Test void testRedis() { ValueOperations<String, String> stringStringValueOperations = redisTemplate.opsForValue(); String val = stringStringValueOperations.get(\\\"Hello\\\"); if(val == null) { System.out.println(\\\"Key 'Hello' does not exist. Then set it...\\\"); stringStringValueOperations.set(\\\"Hello\\\", \\\"World\\\"); val = stringStringValueOperations.get(\\\"Hello\\\"); } System.out.println(\\\"Hello = \\\" + val); }\",\"购物车缓存\",\"使用 Redis 的原因：减轻数据库压力、速度快、共享缓存\",\"具体操作：导入 Spring Cache 和 Redis 依赖坐标，ttl过期时间设为30分钟，@EnableCaching 开启缓存，在对应的控制器方法上标注 @Cacheable 注解对结果缓存。在 save 和 delete 方法上标注 @CacheEvict 标注，对数据库做修改时删除缓存，保证数据一致性。\",\"数据结构：Map<String, Map<String, CatItemInfo>> Cart:UID = {{SKU1 = Info1}, {SKU2 = Info2}}\",\"以 业务名+用户ID 作为 key\",\"以商品 id 作为值的 field\",\"以商品相关信息的 json 数据作为值的 value\"]},\"1369\":{\"h\":\"多线程使用\",\"t\":[\"自定义线程池，并使用 CompletableFuture 异步编排实现根据 skuId 检索商品详细信息，SKU 分基本信息、图片信息、销售属性、介绍、规格参数。其中，图片信息是可以和基本信息并发检索的，通过 runAsync 实现，而后面三个属性必须先获取到 SKU 的 spuId 才能检索，因此通过 thenAcceptAsync 实现。最后通过 CompletableFuture.allOf(...) 等待所有检索完成再返回。\",\"CompletableFuture::supplyAsync(Supplier， executor) 相比于 CompletableFuture::runAsync(Runnable， executor) 可以获取返回值\",\"如果没有指定线程池，则默认使用 ForkJoinPool.commonPool()\",\"get() 获取结果时，如果结果非空则 reportGet()，否则 waitingGet()\",\"线程池配置\",\"return new ThreadPoolExecutor(20, 200, 10,TimeUnit.SECONDS, new LinkedBlockingDeque<>(10000), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy());\",\"/** * 查询页面详细内容 */ @Override public SkuItemVo item(Long skuId) throws ExecutionException, InterruptedException { SkuItemVo skuItemVo = new SkuItemVo(); // 1. sku 基本信息 CompletableFuture<SkuInfoEntity> infoFuture = CompletableFuture.supplyAsync(() -> { SkuInfoEntity info = getById(skuId); skuItemVo.setInfo(info); return info; }, executor); // 2. sku图片信息 CompletableFuture<Void> imageFuture = CompletableFuture.runAsync(() -> { List<SkuImagesEntity> images = imagesService.getImagesBySkuId(skuId); skuItemVo.setImages(images); }, executor); // 3. 获取spu销售属性组合 list (在 1 之后) CompletableFuture<Void> saleAttrFuture = infoFuture.thenAcceptAsync(res -> { List<ItemSaleAttrVo> saleAttrVos = skuSaleAttrValueService.getSaleAttrsBuSpuId(res.getSpuId()); skuItemVo.setSaleAttr(saleAttrVos); }, executor); // ...... // TODO 6. 查询当前 sku 是否参与秒杀优惠 // 等待所有任务都完成在返回 CompletableFuture.allOf(imageFuture, saleAttrFuture, descFuture, baseAttrFuture).get(); return skuItemVo; }\"]},\"1370\":{\"h\":\"订单、库存\",\"t\":[\"业务逻辑：当用户下单时，订单系统生成订单，商品系统扣减库存，促销系统扣减优惠券，最后订单入库。\",\"可以采用 2PC、3PC、TCC 等分布式事务方案（适合要求强一致性的场景例如金融支付），但本项目采用 MQ 保证事务的最终一致性。\"]},\"1371\":{\"h\":\"订单业务\",\"t\":[\"用户下单后，订单系统需要\",\"发送订单创建的消息给 MQ，并设置 TTL，经过设定的 TTL 后进入死信队列，监听死信队列的服务根据订单的状态（已支付/未支付）进行后续业务处理（交付仓储物流/关单库存解锁），实现自动关单\",\"然后进入库存系统锁定库存\"]},\"1372\":{\"h\":\"库存锁定\",\"t\":[\"由于订单可能回滚，所以为了能够得到库存锁定的信息，在锁定时需要记录库存工作单（订单信息、商品信息、数量等）\",\"库存保存在 Redis 中，收到请求后判断库存是否充足，然后减掉 Redis 中的库存（Redis 中的库存扣完就无法下单了）\",\"锁定成功后向延迟队列发送消息(锁定的相关信息)，实现库存自动解锁。然后修改对应的订单状态，进入支付流程\",\"支付成功后订单进入出库状态，此时扣除数据库中的库存。如果中途失败，则取消订单，解锁库存等\",\"库存自动解锁：库存锁定(Redis 中)后，也会有一个消息发送到延迟队列，经过 TTL 后根据订单状态和工作单状态来判断是否进行库存解锁，只有订单是过期的，且工作单的库存处于锁定状态才进行库存解锁。\",\"自动关单和自动解锁库存两个业务通过重新查询当前的状态来保证幂等性。\"]},\"1373\":{\"h\":\"优惠券业务\",\"t\":[\"订单系统下单时，将扣减的优惠券事件放入消息队列中，最终优惠券系统会执行对应的业务，完成后通过手动确认的方式发送应答，告诉 MQ 删除这条消息，防止业务出现异常而消息已经被删除的问题。\",\"同时订单系统需要将对应的优惠券消息写入数据库，并把状态设为未完成，优惠券系统在消费成功后，也向 MQ 发送一个消息，通知订单系统将这个订单的优惠券业务状态设为完成，这样，即使消息积压导致消息丢失，也能通过定时任务将未完成的消息重新发送，实现最终一致性。\"]},\"1374\":{\"h\":\"MQ\",\"t\":[\"消息丢失\",\"MQ 本身有持久化机制，此外还有：\",\"消息确认机制 \",\"ConfirmCallback\",\"ReturnCallback\",\"ConsumerAck\",\"消息生产端给每个消息注入一个唯一 ID，消费者基于 ID 进行校验，实现消息检测，防止消息丢失\",\"注：分布式 ID 的生成可以使用 自增主键、UUID、Redis、雪花算法等\",\"重复消费(幂等性)\",\"防止消息被重复消费，也即解决消费者端幂等性问题。可以通过建立消息的日志表（MySQL/Redis），记录消息的 ID 和执行状态（未执行/已完成），然后根据消息的执行状态做进一步的判断处理。\",\"消息积压\",\"一般是消费者端的性能问题。\",\"扩容，增加消费者的数量\",\"降级一些非核心业务，减少服务端的压力\",\"通过监控、日志等手段分析业务逻辑是否影响了性能\"]},\"1375\":{\"h\":\"秒杀设计\",\"t\":[\"服务单一职责 + 独立部署：秒杀服务即使自己扛不住挂掉，也不影响其他服务\",\"秒杀链接加密：防止恶意攻击、链接暴露\",\"库存预热 + 快速扣减：秒杀读多写少，无需每次实时校验库存，提前扣减库存放到 Redis 中，并用信号量控制进来的请求数\",\"动静分离：nginx 做好动静分离，保证动态请求才打到后端的服务集群，并使用 CDN 网络分担集群压力\",\"恶意请求拦截：网关层识别非法攻击请求并拦截\",\"流量错峰：利用验证码、加入购物车等手段均摊流量\",\"限流、熔断、降级：前后端限流，限制次数，快速失败降级运行，熔断隔离防止雪崩\",\"队列削峰：所有秒杀成功的请求进入队列，慢慢处理后续流程\"]},\"1376\":{\"h\":\"手写Spring\"},\"1377\":{\"h\":\"IoC\"},\"1378\":{\"h\":\"BeanFactory\",\"t\":[\"最基本的可初始化的容器：DefaultListableBeanFactory 通过一层层的继承关系主要实现了两个接口：\",\"BeanFactory： Map 存储 BeanName 和 BeanDefinition（全限定类名+属性集合） 的映射关系\",\"SingletonBeanRegistry：Map 存储 BeanName 和单例 Bean 的映射，需要时候通过 BeanName 从 map 里获取 Bean 对象，如果获取的时候不存在对应的Bean对象，就从BeanFactory中取BeanDefinition实例化（反射/Cglib）后放入map\",\"注：实例化一般就是反射创建对象，区别于拦截器通过Cglib动态创建代理对象\"]},\"1379\":{\"h\":\"ApplicationContext\",\"t\":[\"更进一步，ApplicationContext 组合了 BeanFactory（具有加载 BeanDefinition 和 存储 Bean 的功能），还提供了很多额外的扩展点，例如自动装载、后置处理器、Aware 接口、监听器等等。\",\"注：BeanFactory是需要手动注册Bean的，获取时自动实例化。而Context创建时根据配置自动注册Bean。\",\"创建 ApplicationContex 时，传入Bean的配置文件，然后进入 refresh() 方法，执行应用上下文的初始化：\",\"refreshBeanFactory：创建 BeanFactory 装载所有 BeanDefinition（包括各种处理器、监听器）\",\"invokeBeanFactoryPostProcessor：实例化所有 BeanFactoryPostProcessor 并执行后置处理\",\"registerBeanPostProcessor：实例化所有 BeanPostProcessor 并执行后置处理\",\"InitApplicationEventMulticaster：初始化事件发布器，创建所有 ApplicationListener 的集合用于事件处理\",\"registerListeners：实例化 ApplicationListener 并放入监听器集合\",\"preInstantiateSingletons：实例化所有单例 Bean\",\"finishRefresh：发布容器刷新完成事件\",\"注：事件处理 publishEvent -> multicastEvent -> getListenersForEvent -> onApplicationEvent 具体的监听器负责对事件是否响应、如何响应\"]},\"1380\":{\"h\":\"AOP\",\"t\":[\"DefaultAdvisorAutoProxyCreator 是默认的代理创建器，基于容器中所有的 AspectJExpressionPointcutAdvisor 对当前要创建的 Bean 作匹配，然后通过 ProxyFactory 选择基于 JDK/CGLIB 创建实际的代理对象作为 Bean 返回，最终加入到容器中。（基于AspectJ实现的）\",\"AspectJExpressionPointcutAdvisor 整合了切面 pointcut、拦截方法 advice、表达式 expression，能够基于 expression 做匹配，构建 AdvisedSupport(代理目标、拦截器)。\"]},\"1381\":{\"h\":\"Bean 生命周期\",\"t\":[\"让Bean实现DisposableBean（destroy）, InitializingBean（afterPropertiesSet）, Aware（setters）接口，在容器的各个阶段执行相应的生命周期回调。\"]},\"1382\":{\"h\":\"循环依赖\",\"t\":[\"Spring 框架设计解决循环依赖需要用到三个Map：\",\"// 一级缓存，存放成品对象 private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(); // 二级缓存，存放未填充属性的半成品对象 protected final Map<String, Object> earlySingletonObjects = new HashMap<>(); // 三级缓存，存放代理对象 private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>();\",\"获取单例 Bean 方法如下：\",\"public Object getSingleton(String beanName) { Object singletonObject = singletonObjects.get(beanName); if (singletonObject == null) { // 没有就到二级缓存中取 singletonObject = earlySingletonObjects.get(beanName); if (singletonObject == null) { // 二级还没有去三级缓存找，只有代理对象才会放到三级缓存 ObjectFactory<?> singletonFactory = singletonFactories.get(beanName); if (singletonFactory != null) { singletonObject = singletonFactory.getObject(); //把三级缓存中代理工厂的真实对象取出来放入二级缓存 earlySingletonObjects.put(beanName, singletonObject); singletonFactories.remove(beanName); } } } return singletonObject; }\",\"单例 Bean 在实例化后立刻放入三级缓存（非代理 Bean 是一个假工厂直接返回该对象）\",\"当其他 Bean 依赖此 Bean 时从三级缓存中移除，取出真实对象放入二级缓存提前暴露出来。\",\"当对象完全创建完成后，调用 registerSingleton 放入一级缓存，同时移除二级和三级缓存中的引用。\"]},\"1383\":{\"h\":\"事务管理\",\"t\":[\"编程式：transactionManager、TransactionTemplate\",\"声明式：@Transactional（基于TransactionInterceptor）\",\"TransactionDefinition：事务定义信息 \",\"事务隔离级别\",\"传播行为、超时\",\"只读\",\"回滚规则\",\"TransactionStatus：事务运行状态 \",\"是否回滚\",\"暂停的外部事务\",\"并且封装了一个实际的事务对象（Connection）\",\"TransactionManager：事务管理器，Spring 事务策略的核心管理器。 \",\"getTransaction()\",\"commit()\",\"rollback()\",\"TransactionSynchronizationManager：基于ThreadLocal绑定线程事务，以及提供一些回调\",\"public abstract class TransactionSynchronizationManager { // 当前线程开启状态的所有数据库连接 Map // key是DataSource数据源对象 // value是数据库连接ConnectionHolder private static final ThreadLocal<Map<Object, Object>> resources = new NamedThreadLocal<>(\\\"Transactional resources\\\"); // 事务同步器集合，可扩展的接口，定义了若干不同事物阶段的回调 private static final ThreadLocal<Set<TransactionSynchronization>> synchronizations = new NamedThreadLocal<>(\\\"Transaction synchronizations\\\"); }\"]},\"1384\":{\"h\":\"数据结构\"},\"1385\":{\"h\":\"排序算法\",\"t\":[\"冒泡 $O(n^2)$, 选择 $O(n^2)$, 插入 $O(n^2)$, 归并 $O(nlogn)$, 快排 $O(nlogn)$, 堆排 $O(nlogn)$\"]},\"1386\":{\"h\":\"查找算法\",\"t\":[\"顺序查找、二分查找、哈希查找、树表查找（二叉排序树、平衡树、红黑树）\"]},\"1387\":{\"h\":\"满二叉树和完全二叉树\",\"t\":[\"满二叉树:每一层的节点数都达到最大值，即$2{h-1}$个，其中h是树的高度。满二叉树的总节点数是$2h-1$个。完全二叉树:除了最后一层外，其他层的节点数都达到最大值，且最后一层的节点都连续集中在最左边。总节点数在$2{h-1}$到$2h-1$之间。\",\"满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。\"]},\"1388\":{\"h\":\"图\",\"t\":[\"一个图就是一些顶点的集合，这些顶点通过一系列边结对（连接）。\",\"存储结构：邻接表、十字链表、邻接多重表Prim算法：选已连通集合到未连通集合最小权值边的顶点Kruscal算法：选最小权值边，直到构成一个连通图\"]},\"1389\":{\"h\":\"哈希冲突\",\"t\":[\"开放定址法：从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。线行探查法、平方探查法、双散列函数探查法。\",\"链地址法：将哈希值相同的元素构成一个同义词的单链表\",\"再哈希法\",\"公共溢出区\"]},\"1390\":{\"h\":\"布隆过滤器\",\"t\":[\"能够快速检索一个元素是否在给定的大集合中，一个布隆过滤器中有多个不同的哈希函数，\",\"加入一个元素时，取哈希，对应位数组下标置 1\",\"判断一个元素是否存在时，计算哈希判断对应位是否为 1。都为 1 则可能存在，只要有一位非 1，则一定不存在\",\"使用场景：快速判断一个数是否存在于大数据量的集合中、防止缓存穿透、邮箱的垃圾过滤、黑名单功能、去重等。\"]},\"1391\":{\"h\":\"计网\"},\"1392\":{\"h\":\"基础\"},\"1393\":{\"h\":\"TCP/IP 网络模型\",\"t\":[\"物数网传会表应。其中只有应用层在用户空间，其它层都在 OS 内核中。\",\"应用层：网络应用程序和网络之间的接口\",\"表示层：负责把数据转换成兼容另一个系统能识别的格式\",\"会话层：负责建立、管理和终止表示层实体之间的通信会话\",\"传输层：负责端到端的数据传输\",\"网络层：负责数据的路由、转发、分片\",\"数据链路层：负责数据的封帧和差错检测，以及 MAC 寻址；\",\"物理层：负责在物理网络中传输数据帧\"]},\"1394\":{\"h\":\"键入网址到网页显示\",\"t\":[\"对 URL 网址进行解析，生成 HTTP 请求消息\",\"进行 DNS 查询：域名 -> IP地址\",\"和目标服务器通过三次握手，建立 TCP 连接。连接建立后，封装 TCP 报文，交付网络层\",\"网络层封装IP数据包，写入源 IP 地址、目标 IP 地址、协议等信息，然后交付网络接口层\",\"网络接口层通过 ARP 协议获得下一跳 MAC 地址，封装数据帧发送出去。\",\"数据包经过若干个交换机/路由器的转发，来到目标 IP 所在的子网，再交给目标 IP 对应的的服务器\",\"服务器一层层解析数据包，根据端口交付给对应的进程。\",\"进程将响应数据封装成 HTTP 响应报文，然后也一层层封装，发回给客户端进程，也就是浏览器。\",\"客户端的浏览器对接收到的数据包解析，然后渲染整个网页的显示。\",\"最后，如果没有别的数据请求了，双方就进行 TCP 四次挥手断开连接\"]},\"1395\":{\"h\":\"内核收发数据包\",\"t\":[\"应用程序通过系统调用，跟 Socket 层进行数据交互，经过传输层、网络层、网络接口层，最后由网卡负责接收和发送网络包。\",\"接收\",\"网卡接收到一个网络包后，通过 DMA 写入 RingBuffer 环形缓冲区\",\"接着网卡向 CPU 发起硬件中断（屏蔽中断 -> 软中断 -> 取消屏蔽），唤醒数据接收服务程序\",\"内核中的ksoftirqd线程负责处理软中断，通过 poll 方法轮询处理数据（从 RingBuffer 取 sk_buff 帧交由协议栈，放入 Socket 接收缓冲区）\",\"应用层程序调用 Socket 接口，将接收缓冲区数据拷贝到应用层缓冲区，然后唤醒用户进程\",\"发送\",\"程序调用 socket 发送数据时，内核申请一个内核态的 sk_buff 内存，将待发送数据拷贝到 sk_buff 中，并加入发送缓冲区\",\"网络协议栈从发送缓冲区中取出 sk_buff，向下逐层处理（对于 TCP，会拷贝一份 sk_buff 副本以支持重传）\",\"网卡驱动程序从发送队列中读取 sk_buff，挂到 RingBuffer 中，并将数据映射到 DMA 内存区域，触发真实发送\",\"发送完成后，网卡触发硬中断释放内存（sk_buff 和 RingBuffer，收到 ACK 后释放 TCP 数据包对应的原始 sk_buff）\",\"期间共发生了三次内存拷贝：用户数据 -> 内核 sk_buff -> TCP 拷贝 -> sk_buff 大于 MTU 时拷贝成多份小 sk_buff\"]},\"1396\":{\"h\":\"网络分析\",\"t\":[\"一般使用 tcpdump 在 Linux 下抓取数据包存入 pcap 文件，然后到 Wireshark 中进行分析\",\"tcpdump -i <eth0> <protocol> and host <ip> -nn\",\"数据格式：时间戳 协议 源地址.源端口 > 目的地址.目的端口 网络包详情\",\"数据链路层可以得到 源 MAC 地址、目标 MAC 地址、类型等\",\"IP 层可以得到 源 IP、目的 IP、TTL、IP 包长度、协议等字段\"]},\"1397\":{\"h\":\"HTTP\"},\"1398\":{\"h\":\"HTTP 协议\",\"t\":[\"超文本传输协议，超文本指文字、图片、视频等等信息，传输指在多个设备之间，协议指规定了通信的方式。\",\"状态码\",\"1xx 提示信息\",\"2xx 成功。如 200 OK；204 No Content\",\"3xx 重定向。如 301 永久重定向；304 资源未修改\",\"4xx 发送报文有误。如 400 请求错误；404 资源不存在\",\"5xx 服务器处理出错。如 500 服务器内部错误；503 服务器忙\",\"字段\",\"Host: 服务器域名\",\"Content-Length: 本次回应的数据长度\",\"Connection: 是否使用长连接 Keep-Alive。只要任意一端没有提出断开，就保持TCP连接状态\",\"Content-Type: 服务器回应客户端本次数据的格式 Content-Type: text/html; Charset=utf-8\",\"Accept: 客户端声明自己接收的数据格式，Accept: */*表示任意\",\"Content-Encoding / Accept-Encoding: 发送 / 可接受的压缩格式\"]},\"1399\":{\"h\":\"HTTP 缓存\",\"t\":[\"强制缓存：根据响应中的 Cache-Control (相对时间) 和 Expires (绝对时间) 判断请求是否过期，没过期直接从缓存中取响应结果\",\"协商缓存：强制缓存没有命中时，可以与服务端协商之后，通过协商结果来判断是否使用本地缓存，一般响应 304 告知使用缓存。两种头部实现 \",\"Last-Modified 和 If-Modified-Since 根据时间判断是否有更新\",\"Etag 和 If-None-Match 根据唯一标识判断 （类似CAS）\"]},\"1400\":{\"h\":\"HTTP 优化\",\"t\":[\"尽量避免发送 HTTP 请求\",\"对于重复性的 HTTP 请求，通过缓存技术，避免发送请求。具体的：\",\"客户端把第一次请求以及响应的数据保存在本地磁盘上，key 是 URL，value 是响应\",\"响应过期后，再次发送请求会在 Etag 头部带上唯一标识响应的摘要，服务器将摘要和本地资源作比较\",\"如果一致，响应 304 Not Modified，无需携带数据\",\"减少请求次数\",\"减少重定向请求次数：如果资源转移了，且由代理服务器转发，可能产生多次重定向。而如果重定向的工作交由代理服务器完成，就能减少 HTTP 请求次数了\",\"合并请求： \",\"把多个访问小文件的请求合并成一个大的请求，减少重复发送的 HTTP 头部\",\"例如对于很多小图片，可以使用 CSS Image Sprites 合成一个大图片；服务端 Webpack 工具打包 js/css 资源；图片二进制数据用 Base64 编码跟随 HTML 一起发送\",\"但可能一个小资源变化后，必须重新下载整个大资源\",\"延迟发送请求： \",\"按需下载，用户滑动到某个元素才加载\",\"减少响应数据的大小\",\"无损压缩：例如霍夫曼编码、gzip，适用于文本、代码、可执行文件等\",\"有损压缩：WebP/PNG、H264/H265...，适用于音频、视频、图片等\"]},\"1401\":{\"h\":\"HTTPS 协议\",\"t\":[\"HTTP 默认端口 80，HTTPS 默认端口 443。HTTPS 在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。\",\"混合加密：通信建立前基于非对称加密的数字证书交换会话秘钥，通信过程中基于对称加密用会话秘钥来加密明文数据\",\"摘要算法：通过哈希函数计算传输内容的指纹，保证消息完整性。\",\"数字证书：将服务器公钥放在 CA 机构的数字证书中，只要证书是可信的，公钥就是可信的\",\"非对称加密算法：RSA、DSA、ECDHE...对称加密算法：DES、AES、RC5...散列摘要算法：SHA1、SHA256、MD5...\"]},\"1402\":{\"h\":\"TLS 握手\",\"t\":[\"RSA 密钥协商算法\",\"HTTP 完成 TCP 连接建立需要三次握手，而 HTTPS 还要进行 SSL/TLS 四次握手（2个RTT）。旧版 TLS 使用 RSA 算法实现：\",\"第一次 - 客户端：Client Hello 包括 TLS版本 + client_random + 支持的密码套件\",\"第二次 - 服务端：Server Hello 包括 确认 TLS 版本 + server_random + 选择的密码套件，以及 Server Certificate 内含数字证书、\",\"第三次 - 客户端： \",\"Client Key Exchange 内含用服务端 RSA 公钥加密的新随机数 pre-master\",\"然后双方基于三个随机数生成基于对称加密的会话密钥。\",\"接着发送 Change Cipher Spec 告诉服务端开始使用加密方式发送消息\",\"最后发送 Encrypted Hashshake Message (Finished)，对之前的数据做个摘要并用会话密钥加密，让服务器做验证，确保加密通信安全可用\",\"第四次 - 服务端：也发送 Change Cipher Spec 和 Encrypted Hashshake Message，验证加密通信安全可用\",\"RSA 算法缺陷：不支持前向保密，一旦服务端私钥泄露，过去所有被截获的 TLS 通信密文都会被破解。因此产生了 ECDHE 密钥算法。\",\"改进：ECDHE 密钥协商算法\",\"基于离散对数、ECC 椭圆曲线计算得到会话密钥\",\"支持前向保密\"]},\"1403\":{\"h\":\"数字证书\",\"t\":[\"用来认证公钥持有者的身份，防止第三方进行冒充。\",\"数字证书 = 公钥 + 持有者信息 + CA 机构信息 + CA 对这份文件的数字签名、算法、有效期等\",\"其中数字签名由 CA 对持有者的相关信息 Hash 后用 CA 私钥加密而得\",\"客户端从服务端拿到数字证书后，用 CA 公钥解密数字签名，与服务端信息做对比，一致则是可信赖的\"]},\"1404\":{\"h\":\"HTTP 演进\",\"t\":[\"HTTP/1.1\",\"优点：简单、灵活、易于扩展、应用广泛、跨平台。相比于1.0，HTTP/1.1 使用长连接减少连接建立释放的开销，支持管道化传输，可以一次发起多个请求\",\"缺点：\",\"无状态，得用Cookie解决\",\"不安全：明文传输\",\"性能一般：存在响应的队头阻塞问题（HTTP 完成一个请求+响应才能处理下一个）\",\"HTTP/2\",\"基于HTTPS，安全性得到保证\",\"头部压缩：HPack 算法压缩 Header 部分固定重复的字段\",\"二进制帧：分数据帧和控制帧两类\",\"多路复用：一个 TCP 连接包含多个 Stream，不同的 HTTP 请求通过 Stream ID 区分\",\"支持服务器主动推送（偶数号 Stream）\",\"缺陷：由于基于TCP，仍然存在 TCP 层队头阻塞问题（只有前一个字节数据到达，后面的字节数据才能从内核缓冲区中取出）\",\"HTTP/3\",\"使用基于 UDP 的 QUIC 协议（一个在 UDP 之上的伪 TCP + TLS + HTTP/2 的多路复用协议）。特点：\",\"单向递增的 Packet Number，配合 StreamID 和 Offset 字段，支持乱序确认而不影响数据包的正确组装\",\"无队头阻塞：多个 Stream 之间独立，互不影响。某个流发生丢包仅影响该流\",\"更快的连接建立：QUIC 本身包含 TLS 1.3，一个 RTT 内就可以完成连接建立和密钥协商\",\"支持连接迁移：通过连接ID标记通信的两个端点，避免网络切换后的握手、慢启动造成网络卡顿\",\"优化 HTTP 层：简化帧结构、QPack 压缩算法\"]},\"1405\":{\"h\":\"Get 和 Post\",\"t\":[\"Get 的语义是从服务器获取指定的资源，请求的参数一般是以 KV 形式写在 URL 中（浏览器会对 URL 的长度有限制， HTTP协议没有）\",\"POST 的语义是根据请求体对指定的资源做出处理，请求携带的数据一般是在报文 body 中，格式任意，大小不限\",\"Get 方法是安全且幂等的，不会破坏服务器上的资源，且多次执行的结果相同（因此 GET 请求的数据可以缓存，POST 需要手动设置）。\",\"Post 方法不是安全，也不是幂等的。\",\"HTTP 请求都是明文，因此GET/POST都不安全，此外GET没有规定不能携带请求体，POST请求URL也可以有参数。\"]},\"1406\":{\"h\":\"对比 RPC\",\"t\":[\"纯裸 TCP 可以收发数据，但它是个无边界的数据流，上层需要定义消息格式用于定义消息边界。于是就有了各种协议，HTTP 和各类 RPC 协议就是在 TCP 之上定义的应用层协议。RPC本质上是一种调用方式，具体的实现 gRPC/Thrift 才是协议，目的是希望程序员能像调用本地方法那样去调用远端的服务方法。当然 RPC 也不一定非得基于 TCP。\",\"区别：\",\"服务发现：RPC一般有专门的中间服务，如 Zookeeper 来保存服务名和IP信息（HTTP当然也能实现）\",\"底层连接形式：RPC使用连接池\",\"传输内容：HTTP报文非常冗余，而RPC定制化程度高，性能也更好。因此内网服务之间通常使用 RPC。\",\"不过，HTTP/2 通过压缩做了很多改进，性能甚至优于RPC，例如 gRPC 基于 HTTP/2 实现。但由于历史原因，RPC仍在使用。\"]},\"1407\":{\"h\":\"TCP\"},\"1408\":{\"h\":\"TCP/UDP 区别\",\"t\":[\"TCP是有连接的、面向字节流的可靠传输协议。\",\"UDP是无连接的，面向数据报的协议，尽最大努力交付，不保证可靠传输。\",\"TCP提供流量控制，即源端通过滑动窗口来告诉对端自己的发送窗口大小，从而控制对端发送数据的速度；UDP没有流量控制。\",\"TCP提供拥塞控制，即当网络拥塞时，TCP会降低自己的发送速度，从而避免网络拥塞的恶性循环；UDP没有拥塞控制。\",\"TCP开销大，头部至少20个字节，而UDP头部固定只有8个字节。\"]},\"1409\":{\"h\":\"三次握手\",\"t\":[\"过程：\",\"首先服务端主动监听某个端口，处于 Listen 状态\",\"客户端随机一个序列号，并发送 SYN 报文给服务端。此时客户端处于 SYN-SENT 状态\",\"服务端接收到客户端的 SYN 报文后，也随机一个序列号，然后发送 SYN+ACK 报文给客户端，并且确认客户端报文的序列号。此时服务端处于 SYN-RCVD 状态\",\"客户端收到服务端报文后，序列号+1，再次向服务端回应一个 ACK 报文，同时确认服务端报文的序列号。此次报文已经可以携带数据了。之后客户端处于 ESTABLISHED 状态\",\"服务端收到客户端应答报文后，也进入 Established 状态。三次握手完成。\",\"TCP 通过 (源IP、源端口、目的IP、目的端口) 这样的四元组来唯一确定一条连接。\",\"为什么需要三次握手：\",\"首要原因是防止旧的（阻塞在网络中）重复连接初始化造成混乱。如果只有两次握手，服务端没有中间状态给客户端来阻止旧连接，导致连接释放后服务端又建立一个旧连接，造成资源浪费。\",\"同步双方的初始序列号，两次握手只能保证服务端确认了客户端的序列号，不能保证客户端确认了服务端的序列号。\",\"握手丢失\",\"第一次握手 SYN 丢失: 触发超时重传，Linux 会重传 5 次，且超时时间 RTO 呈指数上涨（翻倍 1 -> 3 -> 7 -> 15 -> 31）\",\"第二次握手 SYN + ACK 丢失：客户端重传 SYN，服务端重传 SYN + ACK，一直重传至最大次数\",\"第三次握手 ACK 丢失：服务端处于 SYN_RECV 状态，一直重传 SYN + ACK 直至最大次数后断开连接。客户端处于 Established 状态，由于 TCP 保活机制，可能持续 2 小时才会发现该连接已失效，而如果客户端已经发送数据了，会一直重传数据包直至最大次数（默认 15 次）\",\"注：\",\"所有重传次数都有/proc/sys/net/ipv4/下的内核参数限定\",\"网络包进主机顺序：Wire -> NIC -> tcpdump -> netfilter/iptables（防火墙）\",\"网络包出主机顺序：iptables -> tcpdump -> NIC -> Wire\"]},\"1410\":{\"h\":\"四次挥手\",\"t\":[\"过程：\",\"客户端打算关闭连接时，会发送一个 FIN 报文，之后客户端进入 FIN_WAIT_1 状态。\",\"服务端收到该报文后，回复一个 ACK 应答，进入 CLOSE_WAIT 状态。\",\"客户端收到服务端的 ACK 应答后，进入 FIN_WAIT_2 状态。\",\"等服务端处理完数据后，也向客户端发送 FIN 报文，之后服务端进入 LAST_ACK 状态。\",\"客户端收到服务端的 FIN 报文后，也回复一个 ACK 应答，之后进入 TIME_WAIT 状态\",\"服务端收到了 ACK 应答报文后，就进入了 CLOSE 状态，至此服务端已经完成连接的关闭。\",\"客户端在经过 2MSL（最大报文生存时间，Linux中为30s） 时间后，自动进入 CLOSE 状态，至此客户端也完成连接的关闭。\",\"为什么需要四次挥手？\",\"关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据。\",\"服务端收到客户端的 FIN 报文时，先回一个 ACK 应答报文，而服务端可能还有数据需要处理和发送，等服务端把这些数据都处理发送完，才发送 FIN 报文给客户端来表示现在同意关闭连接。\",\"也就是要等待服务端把手上的数据处理发送完再关闭。\",\"为什么需要 TIME_WAIT 状态？\",\"等待 2MSL 让两个方向上现有的数据包都被丢弃，使得旧连接的数据包在网络中都自然消失，防止被后面相同四元组的新连接错误的接收\",\"等待足够的时间以确保第四次挥手的 ACK 能让服务端接收，从而帮助其正常关闭\",\"TIME_WAIT 会占用系统资源，因此在高并发下可以适当调整该时间，避免资源浪费和连接延迟。例如开启 tcp_tw_reuse 重用处于 TIME_WAIT 状态的连接，并开启 PAWS 防回绕时间戳（双方维护最近一次收到数据包的时间戳）\",\"三次挥手\",\"如果第一次挥手后，如果被动关闭方接收到 FIN 且没有数据要继续发送，同时开启了 TCP 延迟确认机制，那么第二、三次挥手 ACK+FIN 可以合并传输，实现三次挥手。\",\"TCP 延迟确认：没有响应数据要发送时，ACK 将延迟一段时间随数据一块发送，以提高网络效率。\"]},\"1411\":{\"h\":\"重传机制\",\"t\":[\"超时重传：在发送数据时，设定一个定时器，当超过指定的时间后，没有收到对方的 ACK 确认应答报文（数据包丢失/确认应答丢失），就会重发该数据。\",\"问题：超时重传时间 RTO 的设定，理论上应略大于 RTT。但RTT无法准确计算，Linux采用加权移动平均，采样估计。\",\"快速重传：当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。\",\"问题：重传时是重传一个还是重传所有已经发出去的数据包，只重传一个可能造成延迟重传，重传所有可能浪费网络资源\",\"SACK: Selective ACK在 TCP 头部「选项」字段里加一个 SACK，将已收到的数据信息发给「发送方」，这样发送方就可以只重传丢失的数据。\",\"Duplicate SACK：使用 SACK 来告诉「发送方」有哪些数据被重复接收了，这样「发送方」就知道数据没有丢，是「接收方」的 ACK 确认报文丢了。\"]},\"1412\":{\"h\":\"流量控制\",\"t\":[\"流量控制是为了避免「发送方」的数据填满「接收方」的缓存，并不涉及整体网络中的流量。\",\"滑动窗口：\",\"为了提高网络的传输效率，引入滑动窗口，双方各自维护发送窗口和接收窗口。在发送窗口范围内的数据都可以发送出去，窗口后延之外的数据都是暂时不能发送的数据。随着接收到的数据，窗口会向后移动。\",\"一般由接收方告诉发送方自己还有多少缓冲区可以用于接收数据，发送方根据接收方的处理能力调整窗口大小。但双方窗口只是近似相等，传输过程存在延迟，窗口也时刻在变化。发送窗口 = min(拥塞窗口，接收窗口)\",\"优化点\",\"为了防止资源紧张时，操作系统减小缓存，同时收缩窗口，导致丢包和窗口变负值的情况，TCP规定必须先收缩窗口，再减少缓存。窗口缩减为0后，需要定时发送窗口探测报文，确认当前窗口大小，避免双方持久等待。\",\"糊涂窗口综合征：发送方为了填满接收方几个字节的窗口，发送一整个 TCP 报文，而 TCP + IP 首部就有40字节，会造成极大资源浪费。\",\"接收方在窗口小于 min(MSS, 0.5*cache) 时，就发送0窗口通告\",\"Nagle 延迟处理算法：必须等窗口 >=MSS 且数据大小 >= MSS，或者收到之前发送数据的 ACK，才会继续发送；否则一直囤积数据。\",\"接收方不通告小窗口 + 发送方开启 Nagle 算法，才能避免糊涂窗口综合症。\"]},\"1413\":{\"h\":\"拥塞控制\",\"t\":[\"拥塞控制是为了避免「发送方」的数据填满整个网络，由发送方维护，根据网络的拥塞程度动态变化。（以下窗口大小的单位都是 MSS，而不是个）\",\"慢启动\",\"指在刚刚加入网络的连接中，一点一点地提速，不要一上来就把链路占满。开始先初始化cwnd = 1，表明可以传一个MSS大小的数据。每当收到一个ACK，cwnd+1；也就是说每经过一个RTT，cwnd = cwnd*2，呈指数上升。阈值ssthresh（slow start threshold）慢启动门限是一个上限，当cwnd >= ssthresh时，就会进入拥塞避免算法。\",\"拥塞避免\",\"cwnd超过慢启动门限后，每收到一个ACK，cwnd = cwnd + 1/cwnd；也就是说每经过一个RTT，cwnd = cwnd + 1。此时发包数呈线性增长，避免增长过快导致网络拥塞。\",\"拥塞发生\",\"一旦发生丢包、延时导致重传，进入拥塞发生阶段：ssthresh = 0.5 * cwnd，cwnd重置为1 （Linux初始值为10）\",\"快重传\",\"当接收方发现一个乱序到达的报文段，就会发送三次前一个包的 ACK。发送端接收到三个相同的ACK报文，就会进行快速重传，不必等到超时再重传。这时设置 cwnd /= 2，ssthresh = cwnd，进入快恢复。\",\"快恢复\",\"快速恢复算法是认为，如果还能收到 3 个重复的 ACK 说明网络也没那么糟糕，因此没必要像 RTO 超时那么强烈。此时发送方把 ssthresh 设为当前 cwnd 的一半\"]},\"1414\":{\"h\":\"半/全连接队列\",\"t\":[\"TCP 三次握手时，Linux 会维护两个队列：\",\"半连接队列，也称 SYN 队列，底层是哈希表 \",\"服务端收到客户端的 SYN 后，内核会把该连接存储到半连接队列中，并响应 SYN + ACK\",\"SYN 洪泛攻击、DDos 都是半连接队列溢出\",\"全连接队列，也称 accept 队列，底层是链表 \",\"服务端收到第三次握手的 ACK 后，内核会把连接从半连接队列中移除，然后创建新的完全连接加入全连接队列，等待进程调用 accept 把连接取出\",\"不管是半连接，还是全连接队列，都有最大长度限制，超过后会直接丢弃或返回 RST 包。需要注意，TCP 三次握手的过程是发生在 accept 调用之前的。\"]},\"1415\":{\"h\":\"TCP 优化\",\"t\":[\"三次握手\",\"客户端：可以根据网络稳定性、目标服务器繁忙程度修改 SYN 重传次数，调整握手时间上限。例如在内网中降低重试次数，尽快把错误暴露给应用程序\",\"服务端：调整半/全连接队列长度、SYN+ACK 报文重传次数\",\"绕过三次握手：tcp_fastopen 减少一个 RTT\",\"四次挥手\",\"主动方：调整 FIN 报文重传次数、FIN_WAIT2 状态时间、孤儿连接上限\"]},\"1416\":{\"h\":\"分片问题\",\"t\":[\"如果TCP层不进行分片，仅在IP层分片，那么当一个TCP报文段的某个IP分片丢失，接收方的IP层无法组装成一个完整的TCP报文，也就不会响应ACK给发送方。于是发送方就会一直等待直到超时重传，因此由IP层进行分片传输效率很低。\",\"所以，为了达到最佳的传输效能 TCP 协议在建立连接的时候通常要协商双方的 MSS 值，使得IP包长度不会大于MTU，也就不用IP分片了。这样即使一个IP分片丢失，进行重发时也是以 MSS 为单位。\"]},\"1417\":{\"h\":\"粘包问题\",\"t\":[\"对于UDP，OS不会对消息进行拆分，每个UDP报文就是一个完整的用户消息。而对于TCP，消息可能会被操作系统分组成多个 TCP 报文，因此接收方的程序如果不知道发送方发送的消息长度/边界，就无法读出一个有效的用户消息。因此我们说 TCP 是面向字节流的协议。\",\"当两个消息各自的部分内容被分到同一个 TCP 报文时，即产生 TCP 粘包问题，这时接收方如果不知道消息边界的话，无法读出有效的信息。\",\"解决方法\",\"固定长度的消息：不灵活\",\"特殊字符作为边界：两个用户消息之间插入特殊字符，例如 HTTP 协议通过回车符+换行符作为报文的边界（注意转义）\",\"自定义消息结构：分包头和数据，在包头里记录数据部分的长度，接收方通过解析包头就可以知道消息的边界了。\"]},\"1418\":{\"h\":\"序列号和确认号\",\"t\":[\"序列号\",\"初始序列号：TCP 建立连接时，客户端和服务端基于时钟、源/目的 IP/端口 生成的随机数\",\"序列号：TCP 头部的一个 32位 无符号数字段，到达 4G 后归零。标识了 TCP 发送端到 TCP 接收端的数据流的一个字节，用于传输确认、丢失重传、有序接收。 \",\"序列号 = 上一次发送的序列号 + 数据长度。如果上一次是 SYN/FIN，则改为上一次序列号 +1\",\"客户端和服务端随机生成初始序列号，以避免历史报文被下一个相同四元组的连接接收。但也无法完全避免，可以开启 TCP 时间戳机制，防止序列号回绕。\",\"合法的序列号：报文的序列号比期望下一个收到的序列号要大\",\"合法的时间戳：报文的时间戳比最后收到的报文时间戳要大\",\"确认号\",\"指下一次「期望」收到的数据的序列号，发送端收到接收方发来的 ACK 确认报文以后，就可以认为在这个序号以前的数据都已经被正常接收。用来解决丢包的问题。\",\"确认号 = 上一次收到的报文序列号 + 数据长度。如果收到的是 SYN/FIN，则改为上一次序列号 +1\"]},\"1419\":{\"h\":\"保活机制\",\"t\":[\"如果两端的 TCP 连接一直没有数据交互，达到了触发 TCP 保活机制的条件，并且开启了 TCP-keepalive 机制，那么内核里的 TCP 协议栈就会发送探测报文。\",\"如果对端正常响应，那么 TCP 保活时间重置，等待下一次保活时机到来\",\"如果对端连续几次没有响应，达到保活探测次数后，TCP 会报告该 TCP 连接已死亡\",\"如果没有开启 TCP-keepalive，并且双方都没有进行数据传输，那么客户端和服务端的 TCP 连接将会一直保持存在。\"]},\"1420\":{\"h\":\"关闭连接\",\"t\":[\"关闭 socket 有两个系统调用：\",\"close() 同时关闭 socket 发送方向和读取方向，使得 socket 不再有发送和接收数据的能力。但如果多线程共享该 socket，则 close() 会让引用计数 -1，只要引用计数非0，其它线程还可以正常读写该 socket\",\"shutdown() 可以指定仅关闭 socket 发送方向/读取方向。如果多线程共享该 socket，则其它线程将受到影响\",\"因此，close() 是一种粗暴的关闭方式，不会经历四次挥手的过程，等到对端发送数据恢复 RST 才能正确关闭连接。\",\"粗暴的关闭进程可以关闭 TCP 连接，但不优雅。可以通过伪造 RST 报文来关闭连接，但要同时满足四元组相同、序列号是对方期望的两个条件。\",\"killcx 工具： \",\"主动向处于 Established 状态的服务端发送 SYN，接收 Challenge ACK，获得服务器期望的序列号和确认号\",\"利用 Challenge ACK 信息伪造两个 RST 报文发送给客户端(序列号)和服务端(确认号)，让它们优雅地释放连接\",\"tcpkill 工具： \",\"在双方进行 TCP 通信时，拿到对方下一次期望的序列号，然后伪造 RST 报文来关闭连接\",\"仅适用于活跃的 TCP 连接\",\"如果进程崩溃，OS 内核会自动发送 FIN 完成 TCP 四次挥手关闭连接；而如果主机宕机，对端是无法感知的，需要 TCP 保活机制来探测主机是否正常。在 Linux 中，需要至少 2H 11min 15s 才能发现一个死亡连接。\"]},\"1421\":{\"h\":\"IP\"},\"1422\":{\"h\":\"IP 地址\",\"t\":[\"ABCDE 地址 -> CIDR 无分类地址\",\"IP 地址 & 子网掩码 = 网络号\",\"IPv4 地址 32 位，而 IPv6 地址 128 位，且支持自动分配 IP 地址，简化包头，提高传输性能，提升了安全性\",\"localhost 是一个域名，不过会解析成 127.0.0.1 本地回环地址\",\"ping 127.0.0.1/本地IP最后都会走 本地回环接口（假网卡），然后插入input_pkt_queue链表后，通过软中断通知ksoftirqd接收数据，因此断网也能 Ping 通\",\"如果服务器 listen 的是 0.0.0.0，表示监听本机的所有 IPv4 地址\"]},\"1423\":{\"h\":\"IP 和 MAC 地址\",\"t\":[\"MAC 地址的作用是实现「直连」的两个设备之间通信，在网络传输寻址过程中是一直变化的。\",\"而 IP 则负责在「没有直连」的两个网络之间进行通信传输，源IP地址和目标IP地址在整个传输过程中是不会变化的（除非 NAT）\",\"如果只用 MAC 地址，路由器就需要记住每个MAC地址所在的子网，而 MAC 地址有48位，路由器无法存储这么多子网信息\",\"IP 地址是设备上线以后，才能根据进入哪个子网来分配的，在设备还没有 IP 的时候需要用 MAC 地址来区分不同的设备\",\"IP 地址类似住址门牌号，住在不同地方就有不同门牌号，快递根据门牌号找到所在位置。而 MAC 地址类似身份证号，设备出厂就固定写死了，但是知道身份证号是没法找到人的，身份证号和地理位置无关。\"]},\"1424\":{\"h\":\"DNS\",\"t\":[\"域名解析协议，域名 -> IP地址\",\"查询顺序：\",\"浏览器缓存 -> OS缓存 -> 本地DNS （主机和本地DNS服务器之间递归查询）\",\"还没有就由本地DNS发出查询：根DNS -> 顶级DNS -> 权威DNS （DNS服务器之间迭代查询）\"]},\"1425\":{\"h\":\"ARP\",\"t\":[\"地址解析解析，IP -> MAC\",\"原理：广播 ARP 请求 -> 解包匹配 -> 单播 ARP 响应 -> 有限缓存\",\"RARP：MAC -> IP，用于打印机服务器等小型嵌入式设备接入网络\"]},\"1426\":{\"h\":\"DHCP\",\"t\":[\"动态主机配置协议，动态获取IP地址\",\"原理（全程 UDP广播）：\",\"客户端（0.0.0.0:68）使用 UDP 广播（255.255.255.255:67），发起 DHCP DISCOVER\",\"DHCP 服务器响应 DHCP OFFER，携带可租约的 IP 地址、子网掩码、默认网关、DNS 服务器以及 IP 地址租用期等信息\",\"客户端收到一个 DHCP OFFER 后，回复 DHCP REQUEST，回显配置的参数\",\"DHCP 服务器响应 DHCP ACK 确认配置信息\"]},\"1427\":{\"h\":\"ICMP\",\"t\":[\"互联网控制报文协议，用于确认 IP 包是否成功送达目标地址、报告发送过程中 IP 包被废弃的原因和改善网络设置等。\",\"分类：\",\"用于诊断的查询报文 \",\"如 Ping 命令利用 ICMP-回送请求、ICMP-回送应答 两类报文\",\"用于通知出错原因的差错报文 \",\"如 Traceroute 命令利用 ICMP-超时消息 报文，通过设置特殊的 TTL 追踪沿途路由，以及一个不可能的端口号（ICMP-端口不可达）标记已到达目的主机\",\"如 Traceroute 命令利用 ICMP-禁止分片 报文，通过设置不分片确定路径上合适的 MTU 大小\"]},\"1428\":{\"h\":\"NAT\",\"t\":[\"网络地址转换协议。基于转换表将 私有IP -> 公有IP（通常用 NAPT：网络地址和端口转化协议，私有IP + 端口 -> 共有IP + 端口）\",\"缺点：外网无法主动连接、性能开销大、重启连接断开解决：IPv6、NAT穿透（应用程序主动建立端口映射）\"]},\"1429\":{\"h\":\"IGMP\",\"t\":[\"因特网组管理协议。用于维护 IGMP 路由表，管理加入、离开组播组的主机\"]},\"1430\":{\"h\":\"操作系统\"},\"1431\":{\"h\":\"硬件结构\"},\"1432\":{\"h\":\"冯诺依曼结构\",\"t\":[\"运算器、控制器、存储器、输入设备、输出设备\",\"CPU = 控制单元 + 逻辑运算单元 + 寄存器\",\"寄存器分 通用寄存器、指令寄存器、程序计数器\",\"总线分 地址总线（指定内存地址）、控制总线（指定读/写）、数据总线（传输数据）\"]},\"1433\":{\"h\":\"指令\",\"t\":[\"指令周期的四级流水线：Fetch -> Decode -> Execute -> Store\",\"硬件32/64位指CPU位宽，软件32/64位指指令的位宽。\",\"64位相比32位的优势：\",\"64位CPU可以一次计算超过32位的数字，但很少有程序计算这么大的数字，只有计算大数字才能体现超过32位CPU的性能\",\"64位CPU可以寻址更大的物理内存空间，32位最高寻址4G\"]},\"1434\":{\"h\":\"多级存储器\",\"t\":[\"寄存器: 一般在半个CPU周期内完成读写\",\"CPU Cache：RAM 静态随机存储器，断电丢失。 \",\"L1：2-4个时钟周期，几十KB。分数据缓存、指令缓存\",\"L2：10-20个时钟周期，几百KB\",\"L3: 20-60个时钟周期，几十MB。多核共享\",\"内存：DRAM 动态随机存取存储器，电容需要定时刷新。200-300个时钟周期\",\"SSD/HDD 硬盘：断电后数据不丢失，SSD比内存慢 10-1000 倍，HDD比内存慢 10W 倍\",\"每个存储器只和相邻的一层存储器设备进行交互，形成缓存体系。\"]},\"1435\":{\"h\":\"CPU Cache\",\"t\":[\"CPU Cache 是由很多个 Cache Line 组成的，Cache Line 是 CPU 从内存读取数据的基本单位（例如一次载入 64Byte），由各种标志（Tag）+ 数据块（Data Block）组成。\",\"直接映射\",\"通过取模运算，计算内存块对应的 Cache Line 地址\",\"组标记 Tag： 记录是否是对应的内存块（因为多个内存块会映射到同一个 Cache Line）\",\"有效位 Valid Bit：标记数据是否还有效\",\"偏移量 Offset：定位 CPU 读取 Cache Line 中哪个 Word 字\",\"因此，一个内存的访问地址由 组标记、Cache Line 索引、偏移量 三者共同定位。其它映射例如全相联、组相联等类似。\",\"提升缓存命中率\",\"提升缓存命中率，也就可以提升程序执行速度，优化方法例如：\",\"按内存布局顺序访问\",\"有规律的条件分支语句可以充分利用 CPU 的分支预测器\",\"当有多个同时执行的「计算密集型」线程，可以把线程绑定在某一个 CPU 核心上，避免线程在不同核心来回切换，影响缓存命中率。\",\"写入数据\",\"写直达 Write Through：把数据同时写入内存和Cache。每次写操作都会写回内存，消耗性能\",\"写回 Write Back：将新数据写入 Cache Block 里，只有当修改过的 Cache Block「被替换」时才需要写到内存中。\",\"缓存一致性问题\",\"由于 L1/L2 Cache 是多个核心各自独有的，因此可能带来多核心的缓存一致性问题。因此需要一种同步机制，能够实现：\",\"写传播：某个 CPU 核心里的 Cache 数据更新时，必须要传播到其他核心的 Cache。 \",\"实现方法：总线嗅探，每个 CPU 核心监听总线上的广播事件，检查是否有相同的数据在自己的 L1 Cache 里，如果有事件就更新。会加重总线负载，且不能保证事务串行化\",\"事务串行化：某个 CPU 核心里对数据的操作顺序，必须在其他核心看起来顺序是一样的 \",\"实现方法：MESI协议，标记 Cache Line 的四种不同状态\",\"Modified：已修改。Cache 数据和内存中数据不一致，可以自由写入，被替换时需要写回内存。\",\"Exclusive：独占。仅一个核心存储该 Cache Line，可以自由写入，不需要通知其它核心。如果其它核心从内存读取了该 Cache Line，那么将转为共享状态\",\"Shared：共享。修改时需要向所有其它核心广播请求，要求把该 Cache Line 标记为无效，然后再更新\",\"Invalidated：已失效。数据不一致，不可以读取该状态数据。\",\"伪共享\",\"由于多个线程同时读写同一个 Cache Line 的不同变量，而导致 CPU Cache 失效的现象。\",\"解决方案：\",\"Cache Line 大小字节对齐（空间换时间）\",\"字节填充，例如 Disruptor 中的 RingBuffer 类数据前后填充 long，使得无论怎么加载 Cache Line，这整个 Cache Line 里都没有会发生更新操作的数据\"]},\"1436\":{\"h\":\"CPU 调度\",\"t\":[\"Linux 内核中，无论是进程还是线程，调度的都是 task_struct 结构体，区别在于线程的task_struct部分资源是共享了进程已创建的资源，如内存地址空间、代码段、文件描述符等。\",\"调度器\",\"Deadline：对应 dl_rq 运行队列\",\"Realtime：对应 rt_rq。\",\"Fair: 对应 cfs_rq。完全公平调度，优先选择 vruntime 少的任务，用于普通任务，内部组织成红黑树结构\",\"调度优先级从上到下，dl_rq -> rt_rq -> cfs_rq，也即实时任务总是先于普通任务被执行。\",\"进程优先级可以通过 nice | renice 设置/更改，范围 -20~19，是一个修正值，nice 值越小优先级越高。\"]},\"1437\":{\"h\":\"中断\",\"t\":[\"中断是系统用来响应硬件设备请求的一种机制，操作系统收到硬件的中断请求，会打断正在执行的进程，然后调用内核中的中断处理程序来响应请求。中断是一种异步的事件处理机制，可以提高系统的并发处理能力。\",\"Linux 为了解决中断处理程序执行过长和中断丢失的问题，将中断处理程序分成了两个阶段：\",\"上半部：直接处理硬件请求，也就是硬中断。 \",\"负责耗时短的工作，特点是快速执行，一般会暂时关闭中断请求。例如处理跟硬件相关或时间敏感的事情。\",\"下半部：由内核触发，也就是软中断。 \",\"负责上半部未完成的工作，特点是延迟执行，通常耗时较长。\",\"另外，硬中断会打断 CPU 正在执行的任务，然后立即执行中断处理程序。每个 CPU 都对应一个软中断内核线程，名为ksoftirqd/CPU.no\",\"watch -d cat /proc/softirqs 可以监控软中断变化，[]内的是内核线程\"]},\"1438\":{\"h\":\"数值存储\",\"t\":[\"负数用补码表示：统一和正数的加减法操作十进制转二进制：整数除 2 取余并反转，小数乘 2 取整\",\"浮点数存储：\",\"$(-1)^\\\\text{符号位} * (1 + \\\\text{尾数}) * 2^{\\\\text{指数} - 127}$\",\"尾数位决定了浮点数的精度\",\"指数位决定了浮点数的表示范围\",\"由于计算机存储浮点数有位数限制，有的小数无法用「完整」的二进制来表示，所以只能以近似值保存。进而，两个近似数相加，得到的必然也是一个近似数。\"]},\"1439\":{\"h\":\"OS 结构\"},\"1440\":{\"h\":\"内核态和用户态\",\"t\":[\"内核具有很高的权限，可以控制 cpu、内存、硬盘等硬件，而应用程序具有的权限很小，因此 OS 把内存分成了两个区域：\",\"内核空间：这个内存空间只有内核程序可以访问\",\"用户空间：这个内存空间专门给应用程序使用\",\"用户空间的代码只能访问一个局部的内存空间，而内核空间的代码可以访问所有内存空间。因此，程序使用用户空间即该程序在用户态执行，程序使用内核空间即程序在内核态执行。应用如果需要进入内核态，需要通过中断发起系统调用，内核处理完后再触发中断回到用户态。\"]},\"1441\":{\"h\":\"内核设计\",\"t\":[\"Linux 是宏内核设计，包含多个模块，整个内核像一个完整的程序，且拥有最高的权限\",\"Windows 是混合型内核，微内核（内核只保留基本能力）基础上搭建其它模块\"]},\"1442\":{\"h\":\"内存管理\"},\"1443\":{\"h\":\"虚拟内存\",\"t\":[\"为了在多进程环境下，使得进程之间的内存地址不受影响，相互隔离，于是 OS 提供一种机制，将不同进程的虚拟地址和内存的物理地址映射起来。程序仅访问虚拟地址，由 OS 转换成不同的物理地址。\",\"程序中使用的地址叫虚拟内存地址\",\"硬件里的空间地址叫物理内存地址\",\"每个进程都有自己的页表，所以每个进程的虚拟内存空间就是相互独立的。进程也没有办法访问其他进程的页表，所以这些页表是私有的，这就解决了多进程之间地址冲突的问题。\",\"内存分段程序由若干个逻辑段组成，例如代码分段、数据分段、栈段、堆段。不同的段有不同的属性，于是用分段的形式把这些段分离出来。\",\"分段机制下的虚拟地址由两部分组成:\",\"段选择因子: 保存在段寄存器里，包括两部分： \",\"段号：段表的索引，段表 = 段基地址 + 段界限 + 特权等级\",\"特权标志位\",\"段内偏移量：段基地址 + 段内偏移量 -> 物理内存地址\",\"缺陷：\",\"内存碎片：主要是外部内存碎片，不连续内存空间导致无法加载一个新进程。可以通过内存交换解决（也就是Swap分区）\",\"内存交换效率低：内存交换需要在硬盘和内存间交换数据，硬盘速度太慢，如果交换一个很大的空间，将造成卡顿\",\"内存分页\",\"为了解决内存分段的「外部内存碎片和内存交换效率低」的问题，就出现了内存分页。分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小，这样的一个连续且尺寸固定的内存空间叫页（Linux下一页4KB）。\",\"分页机制下的虚拟地址由两部分组成:\",\"页号：作为页表的索引，页表包含物理页所在物理内存的基地址\",\"页内偏移：页基地址 + 页内偏移量 -> 物理地内存址\",\"优点：\",\"由于每个页的大小固定，因此存在内部碎片问题。但碎片很小\",\"内存不足时，OS 换出最近未使用的页面，需要时再换入。每次交换仅几个页面，因此效率较高\",\"缺点：\",\"每个程序都有自己的虚拟地址空间，因此页表占用空间大\",\"解决办法：多级页表。充分利用程序的局部性原理，一级页表需要覆盖所有虚拟地址，而二级页表按需创建。对于 64 位系统，需要四级目录。\",\"优化：TLB 快表。利用局部性原理，把页表项缓存在 CPU 的一个专门芯片 TLB （Translation Lookaside Buffer 转址旁路缓存）中。\",\"段页式内存管理\",\"段页结合，虽然增加了硬件成本和系统开销，但提高了内存的利用率。\",\"先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；\",\"接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页；\",\"因此，访问内存地址时：\",\"到段表中根据段号查询页表地址\",\"到页表中查询物理页号\",\"物理页基地址 + 页内偏移量 得到物理内存地址\",\"虚拟内存优点\",\"虚拟内存可以使得进程对运行内存超过物理内存大小，因为程序运行符合局部性原理，CPU 访问内存会有很明显的重复访问的倾向性，对于那些没有被经常使用到的内存，我们可以把它换出到物理内存之外，比如硬盘上的 swap 区域。\",\"由于每个进程都有自己的页表，所以每个进程的虚拟内存空间就是相互独立的。进程也没有办法访问其他进程的页表，所以这些页表是私有的，这就解决了多进程之间地址冲突的问题。\",\"页表里的页表项中除了物理地址之外，还有一些标记属性的比特，比如控制一个页的读写权限，标记该页是否存在等。在内存访问方面，操作系统提供了更好的安全性。\"]},\"1444\":{\"h\":\"Linux 内存管理\",\"t\":[\"由于 Intel CPU 历史原因，Linux 不得不使用虚拟的段式内存，只用于访问控制和内存保护，主要还是页式内存管理。整个内存空间分为了内核空间和用户空间，每个进程的虚拟地址的内核部分都关联相同的物理内存，这样进程切换到内核态后就可以很方便地访问内核空间内存。\",\"而用户空间内存分为：\",\"代码段: 包括二进制可执行代码；\",\"数据段: 包括已初始化的静态常量和全局变量；\",\"BSS 段: 包括未初始化的静态变量和全局变量；\",\"堆段: 包括动态分配的内存，从低地址开始向上增长；\",\"文件映射段: 包括动态库、共享内存等，从低地址开始向上增长\",\"栈段: 包括局部变量和函数调用的上下文等。栈的大小是固定的，一般是 8 MB。当然系统也提供了参数，以便我们自定义大小；\",\"对于 32位 OS，内核空间占 1G，用户空间 3G，即理论上可以申请最大 3G 虚拟内存；对于 64位系统，内核空间 128T，用户空间 128T，中间是未定义，即理论上可以申请最大 128G 虚拟内存。\"]},\"1445\":{\"h\":\"内存分配\",\"t\":[\"malloc() 不是系统调用，而是 C 的库函数，用于动态分配内存。\",\"malloc() 分配的是虚拟内存，只有在初次访问时由 OS 触发缺页中断，建立实际的映射关系。（因此申请时可以超出物理内存限制）\",\"分配空间时，malloc() 会预分配一定的空间作为内存池，例如 malloc(1) 会直接分配 132KB。\",\"每次分配的内存块前有 16Byte 头信息，因此 free() 只需要知道起始地址就知道该释放多大的内存空间。\",\"两种方式：\",\"通过 brk() 系统调用从堆分配内存，堆顶指针上移。\",\"用于小于 128KB 的内存申请。\",\"free() 时会先放进 malloc 内存池中以复用，等进程退出后再归还 OS\",\"通过 mmap() 系统调用在文件映射区域分配内存。\",\"用于大于 128KB 的内存申请。\",\"free() 后直接归还 OS\",\"因此，mmap() 方式会频繁发生运行态的切换和缺页中断，而 brk() 通过内存池减少了系统调用和缺页中断。但是 brk() 不断分配小空间，回收后可能无法用于大内存的分配，进而产生内存碎片，导致内存泄漏。\",\"内存泄露：程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。内存溢出：OOM，指应用系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于能提供的最大内存。此时程序就运行不了，系统会提示内存溢出。\"]},\"1446\":{\"h\":\"内存回收\",\"t\":[\"malloc() 分配虚拟内存后，程序初次访问时会触发缺页中断，进而中断处理程序会判断物理内存是否足够，不足时将进行内存回收。\",\"回收流程：kswapd -> direct reclaim -> OOM Killer\",\"后台内存回收 kswapd：在物理内存紧张的时候，会唤醒 kswapd 内核线程来回收内存，异步非阻塞\",\"直接内存回收 direct reclaim：如果后台异步回收跟不上进程内存申请的速度，就会开始直接回收，同步阻塞\",\"OOM: 如果直接回收仍然无法满足程序的申请，内核将触发 OOM，由 OOM Killer 根据每个进程的内存占用情况和 oom_score_adj 值进行打分，得分最高的进程会被杀掉，直到释放足够的内存（可通过/proc/[pid]/oom_score_adj调整被杀掉的概率）。\",\"可回收内存\",\"OS 通过页面置换算法得到以下两类可回收的内存：\",\"文件页 File-backed Page：内核缓存的磁盘数据（Buffer）和内核缓存的文件数据（Cache） \",\"可以直接释放，需要时重新从磁盘读取\",\"脏页需要先写回\",\"匿名页 Anonymous Page：像 堆、栈 这样的没有实际载体的数据 \",\"通过 Linux 的 Swap 机制，把不常用的内存写入磁盘，需要时重新载入\",\"文件页、匿名页的回收都基于 LRU 算法，分别对应 active、inactive 两个双向链表（共四个链表），优先回收不常访问的内存。\",\"性能优化\",\"直接内存回收会阻塞线程，文件页、匿名页都需要磁盘 IO，因此频繁的内存回收会影响系统性能。优化措施：\",\"减小 /proc/sys/vm/swappiness，使其倾向于回收文件页（干净页可以直接回收，好于 Swap 换入换出）。范围0-100\",\"增大 /proc/sys/vm/min_free_kbytes ，调整页阈值，及早触发后台回收，避免进入直接内存回收阻塞进程\",\"内核定义了三个内存阈值：pages_min, pages_low, pages_high。后两者基于 pages_min 计算而得\",\"内存处在 pages_min 和 pages_low 之间时会触发后台回收 kswapd\",\"对于 NUMA 架构的 CPU，可以置 /proc/sys/vm/zone_reclaim_mode 为 0，以支持访问远端 Node 内存\",\"SMP：也称 UMA（Uniform Memory Access），每个 CPU 地位平等，共享物理资源，因此访问内存时间都相同。但总线压力大，可用带宽小\",\"NUMA：非 UMA，对 CPU 分组，每组 Node 有独立的物理资源，通过总线访问其它 Node 内存，但耗时稍长（但收益高于内存回收）\"]},\"1447\":{\"h\":\"Swap 机制\",\"t\":[\"物理内存不够用时，需要将内存数据换出到磁盘，需要时再从磁盘换入内存，这个过程由 Swap 机制控制。一般回收像 堆、栈 这样的没有实际载体的匿名页数据\",\"触发场景\",\"内存不足：系统所需内存超过可用物理内存，内核会进行直接内存回收，保证正在执行进程的可用性。同步。\",\"内存闲置：通过后台守护进程 kSwapd 将不再使用的内存回收。异步。\",\"开启方法\",\"Swap 分区：硬盘上的独立区域，仅用于交换分区\",\"Swap 文件：文件系统中的特殊文件\"]},\"1448\":{\"h\":\"缓存命中率\",\"t\":[\"预读失效\",\"Linux/MySQL 为读缓存提供了预读机制，通过一次磁盘顺序读将多个 Page (4KB)装入 Page Cache (16KB)，减少磁盘IO，提高吞吐量。而如果预读的数据没有被访问，就是预读失效，占用了 LRU 链表前排的位置，大大降低了缓存命中率。\",\"改进方法：让预读页停留在内存里的时间要尽可能短，因此可以划分冷数据和热数据。\",\"Linux：两个 LRU 链表，活跃 LRU 链表 active_list，非活跃 LRU 链表 inactive_list \",\"预读页先加入 inactive_list 头部，待真正被访问时才插入 active_list 头部\",\"active_list 淘汰的页面降级到 inactive_list 头部\",\"MySQL：LRU 链表划分前半部分 young 区域和后半部分 old 区域 \",\"预读页先加入 old 区域头部，待真正被访问时才插入 young 区域头部\",\"young 区域淘汰的页面降级到 old 区域头部\",\"缓存污染\",\"批量读取数据时（例如 SQL 全表扫描），由于数据仅被访问一次，这些大量数据都会被加入到「活跃 LRU 链表」里，然后之前缓存在活跃 LRU 链表（或者 young 区域）里的热点数据全部都被淘汰了，如果这些大量的数据在很长一段时间都不会被访问的话，那么整个活跃 LRU 链表（或者 young 区域）就被污染了。\",\"改进方法：提高进入活跃 LRU 链表（或者 young 区域）的门槛，避免热点数据不会被轻易替换掉。\",\"Linux：内存页第二次访问时才进行升级\",\"MySQL：内存页第二次被访问时，判断它停留在 old 区域的时间，超过 1s 就升级到 young 区域，否则停留在 old 区域\"]},\"1449\":{\"h\":\"进程管理\"},\"1450\":{\"h\":\"进程\",\"t\":[\"运行中的程序，就被称为「进程」（Process）。\",\"运行状态（Running）：该时刻进程占用 CPU\",\"就绪状态（Ready）：可运行，由于其他进程处于运行状态而暂时停止运行\",\"阻塞状态（Blocked）：该进程正在等待某一事件发生（如等待输入/输出操作的完成）而暂时停止运行，这时，即使给它CPU控制权，它也无法运行\",\"创建状态（new）：进程正在被创建时的状态\",\"结束状态（Exit）：进程正在从系统中消失时的状态\",\"另外还有挂起状态，描述进程暂时被淘汰出内存的状态（sleep/换出等）：\",\"阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现；\",\"就绪挂起状态：进程在外存（硬盘），但只要进入内存，立刻运行；\",\"根据进程所处的不同状态，将进程对应的进程控制块 PCB 通过链表组织起来，例如就绪队列、阻塞队列等\"]},\"1451\":{\"h\":\"线程\",\"t\":[\"线程是进程当中的一条执行流程。同一个进程内多个线程之间可以共享代码段、数据段、打开的文件等资源，但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流是相对独立的。\",\"优点\",\"一个进程中可以同时存在多个线程；\",\"各个线程之间可以并发执行；\",\"各个线程之间可以共享地址空间和文件等资源；\",\"缺点当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃。（针对C/C++）\",\"实现\",\"用户线程：在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理\",\"内核线程：在内核中实现的线程，是由内核管理的线程\",\"轻量级进程：在内核中来支持用户线程\"]},\"1452\":{\"h\":\"进程和线程对比\",\"t\":[\"进程是资源分配的基本单位，而线程是处理器调度的基本单位。\",\"进程拥有自己的地址空间，因此不会相互影响；而线程共享进程的地址空间，包括内存和资源。\",\"线程是轻量级的进程，由于涉及资源少，而且相同的地址空间不需要切换页表，线程的创建、销毁以及切换所需的开销都比进程小。\"]},\"1453\":{\"h\":\"线程和协程对比\",\"t\":[\"协程是一种运行在线程之上的用户态模型，也称纤程，在线程的基础上通过时分复用的方式运行多个协程。\",\"一个线程可以有多个协程，一个进程也可以单独拥有多个协程\",\"线程进程都是同步机制，而协程则是异步\",\"协程切换不需要内核态/用户态的转换，可以直接在用户态切换上下文\",\"协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态\"]},\"1454\":{\"h\":\"上下文切换\",\"t\":[\"CPU 上下文切换：先把前一个任务的 CPU 上下文（CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。\",\"根据任务的不同，分三种：\",\"进程上下文切换\",\"在内核态完成，交换信息存储在 PCB 中\",\"不仅包含了虚拟内存、栈、全局变量等用户空间的资源，还包括内核堆栈、寄存器等内核空间的资源。\",\"线程上下文切换\",\"当两个线程不是属于同一个进程，则切换的过程就跟进程上下文切换一样；\",\"当两个线程是属于同一个进程，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的寄存器状态和栈数据\",\"涉及资源少，开销比进程低得多\",\"中断上下文切换\",\"响应硬件中断时发生\",\"比进程和线程上下文切换更快，因为通常涉及极少的的状态信息\"]},\"1455\":{\"h\":\"进程间通信\",\"t\":[\"每个进程的用户地址空间都是独立的，不能互相访问，但内核空间是所有进程共享的，因此进程之间要通信必须通过内核。\"]},\"1456\":{\"h\":\"管道（Pipe）\",\"t\":[\"特点：一种用于父子进程之间的单向通信方式，通过pipe创建，仅存在于内存。\",\"优点：简单、轻量级、适用于一对一通信。\",\"缺点：单向通信，不适用于无亲缘关系的进程之间的通信。\"]},\"1457\":{\"h\":\"命名管道（Named Pipe）\",\"t\":[\"特点：一种允许无亲缘关系的进程之间进行双向通信的方式。通过mkfifo创建。\",\"优点：支持双向通信，适用于多个进程之间的通信。\",\"缺点：需要显式创建和命名，效率低，不适合进程间频繁交换数据\"]},\"1458\":{\"h\":\"消息队列（Message Queue）\",\"t\":[\"消息队列解决了管道通信效率低的问题。\",\"特点：允许不同进程之间进行异步通信，通过消息传递数据。\",\"优点：支持多对多通信、异步通信，消息具有格式化结构。\",\"缺点：需要额外的编程工作来管理消息队列，消息拷贝开销大，不适合大数据的传输\"]},\"1459\":{\"h\":\"共享内存（Shared Memory）\",\"t\":[\"共享内存解决了 MQ 的消息拷贝导致额外开销的问题，是速度最快的 IPC 方式，因为不需要在内核和用户空间之间复制数据。前提是处理好多进程并发访问的问题。\",\"特点：允许多个进程访问同一块内存区域，实现高效的数据共享。\",\"优点：高效、快速，适用于大量数据共享。\",\"缺点：需要额外的同步机制来保证数据一致性，对内存管理要求较高。\"]},\"1460\":{\"h\":\"信号量（Semaphore）\",\"t\":[\"信号量机制防止了多进程竞争共享资源而造成数据错乱的问题。\",\"特点：用于控制多个进程对共享资源访问的方式，本质上是一个整型的计数器，可用于同步和互斥。 \",\"原子 P 操作：用于进入共享资源前，信号量减 1，然后如果信号量 < 0，则表明资源已被占用，进程需阻塞等待；否则表明还有资源可使用，进程继续正常执行\",\"原子 V 操作：用于离开共享资源后，信号量加 1，然后如果信号量 <= 0，则表明当前有阻塞中的进程，会将该进程唤醒运行；否则表明当前没有阻塞中的进程\",\"P、V必须成对出现。\",\"如果信号量初始值为1，即互斥信号量，任何时刻仅有一个进程访问，很好的保护了共享内存。\",\"如果信号量初始值为0，即同步信号量，保证进程执行的先后，例如生产者-消费者模型\",\"优点：支持进程同步和互斥，可用于多种通信场景。\",\"缺点：编程复杂性较高，容易引入死锁等问题。\"]},\"1461\":{\"h\":\"套接字（Socket）\",\"t\":[\"特点：基于网络协议的IPC方式，用于不同主机上的进程之间进行通信。 \",\"int socket(int domain, int type, int protocal)\",\"domain: 协议族，如 UPv4 对应 AF_INET, IPv6 对应 AF_INET6， 本地通信 AF_LOCAL/AF_UNIX\",\"type：类型，如 TCP 对应 SOCKET_STREAM, UDP 对应 SOCKET_DGRAM, SOCK_RAW\",\"protocol：协议，基本废弃，填0\",\"对于 TCP，需要 bind, listen, accept, write, read... 服务端监听和传送数据使用的是两个socket（门卫和员工）\",\"对于 UDP，只要 bind, sendto, recvfrom\",\"优点：支持跨网络通信，可用于分布式系统。\",\"缺点：相对复杂，需要网络协议支持。\"]},\"1462\":{\"h\":\"信号（Signal）\",\"t\":[\"对于异常情况下的工作模式，需要用「信号」的方式来通知进程。例如 Ctrl+Z 产生 SigSTP 信号，Ctrl+C 产生 SigINT 信号\",\"特点：用于通知进程发生事件（来自软件/硬件）的轻量级方式，通常用于处理异步事件。\",\"优点：简单、快速，用于处理异步事件。\",\"缺点：只能传递简单的信息，不适合大量数据交换。\"]},\"1463\":{\"h\":\"线程间通信\",\"t\":[\"临界区：访问共享资源的代码片段，产生来自多线程间的竞争条件导致程序运行的不确定性。互斥：保证一个进程/线程在临界区执行时，其他进程/线程应该被阻止进入临界区同步：并发进程/线程在一些关键点上可能需要互相等待与互通消息，这种相互制约的等待与互通信息称为进程/线程同步\",\"通常使用 锁/信号量 实现进程/线程互斥，信号量功能更强大，还能实现同步。\",\"互斥锁（Mutex）：用于控制对共享资源的访问，保证多个线程访问共享资源时的互斥性。底层可以基于测试并设置/等待队列\",\"信号量（Semaphore）：一种同步工具，用于保证多个线程之间的顺序性和互斥性。P操作减1，小于0阻塞；V加1，小于等于0唤醒线程。初始置 1 即互斥，置 0 即同步。\",\"条件变量（Condition Variable）：用于线程间的等待和唤醒，一个线程可以等待某个条件变量满足后被唤醒。\",\"屏障（Barrier）：用于多个线程之间的同步，当所有线程到达屏障时，才能继续执行后续操作。\",\"自旋锁（Spinlock）：一种忙等待的同步工具，它会不断地检测共享资源是否可用，直到资源可用后才能继续执行后续操作。\"]},\"1464\":{\"h\":\"线程创建数量\",\"t\":[\"受限于进程的虚拟内存空间上限和系统参数限制\",\"每分配一个线程需要分配一定的虚拟内存，例如对于 32位 系统，用户空间3G，每个线程占 10M 虚拟内存，则能创建约 300 个线程\",\"/proc/sys/kernel/threads-max 表示系统支持的最大线程数，默认 14553\",\"/proc/sys/kernel/pid_max 表示系统全局的进程/线程 PID 号数值的限制，默认 32768\",\"/proc/sys/vm/max_map_count 表示限制一个进程可以拥有的VMA(虚拟内存区域)的数量，默认 65530\"]},\"1465\":{\"h\":\"关闭进程\",\"t\":[\"线程崩溃\",\"一般来说，如果线程因为非法访问内存引起崩溃，那么进程也会崩溃。因为各个线程的地址空间是共享的，非法访问会导致内存的不确定性。\",\"进程崩溃\",\"进程结束是由于 OS内核 发起的系统调用，向进程发送信号，例如 SIGKILL，然后执行自定义/默认的信号处理函数(除SIGKILL)，执行完毕后结束进程。\",\"因此，对于 JVM 这种自己定义了信号处理函数的进程，可以发送 SIGTERM（kill 的默认信号）命令，执行一些资源清理后再 exit 优雅地退出。而像 StackOverFlowError、NPE 等非法访问内存，JVM 自定了 SIGSEGV 信号处理函数，内部通过栈回溯恢复线程执行并抛出异常。而其它的 SIGSEGV 信号 JVM 不做特殊处理，生成崩溃日志并退出。\"]},\"1466\":{\"h\":\"死锁\",\"t\":[\"死锁：多个线程互相持有对方所需要的资源，并且都在等待对方释放资源，导致这些线程都被阻塞，无法继续执行，进而陷入了一种僵局的状态。Java 程序可以使用 jstack 工具检查死锁。\",\"死锁条件\",\"互斥：多个线程不能同时使用同一个资源。\",\"请求与保持：线程持有资源后不会主动释放已经持有的资源\",\"不可抢占：线程已经持有的资源不会被其它线程剥夺\",\"循环等待：两个线程获取资源的顺序构成了环形链\",\"预防死锁\",\"破环互斥：资源非独占，即多个进程可以同时访问一个资源\",\"破环请求与保持：可以一次性请求所有所需的资源，或运行过程中逐步释放掉已使用完毕的资源\",\"破坏不可抢占：已持有资源的进程在提出新的资源请求没有得到满足时，它必须释放已经保持的所有资源\",\"破坏循环等待条件：通过对资源进行排序，按编号顺序申请，保证资源申请不形成环路（最常用，将稀缺资源设置较大的编号，按从小到大的序号申请）\",\"避免死锁银行家算法：在分配资源时判断是否会出现死锁，只在不会出现死锁的情况下才分配资源。但是进程必须事先声明每个进程请求得最大资源数。\",\"Available：可利用资源向量\",\"Max：最大需求矩阵\",\"Allocation: 已分配矩阵\",\"Need：需求矩阵\"]},\"1467\":{\"h\":\"经典同步问题\",\"t\":[\"哲学家进餐问题\",\"拿筷子前加上互斥信号量\",\"偶数编号哲学家先拿左边筷子，后拿右边筷子；奇书编号哲学家先拿右边筷子，后拿左边筷子\",\"state 数组记录每位哲学家的 进餐/思考/饥饿 状态\",\"读者/写者问题\",\"读者有限：wMutex 写互斥，rCount 读个数，rCountMutex 对rCount的互斥\",\"写者优先：rMutex 读互斥，wDataMutex 写互斥，wCount 写数量，wCountMutext 对wCount的互斥\",\"公平策略：读写互斥、优先级相同、一个写者访问临界区、多个读者同时访问临界区\"]},\"1468\":{\"h\":\"锁机制\",\"t\":[\"为了避免资源竞争而导致数据错乱，共享资源访问前需要加锁，\",\"互斥锁： \",\"加锁失败后，线程会释放 CPU，并被内核置为睡眠状态\",\"等到锁被释放后，内核在合适的时机唤醒线程\",\"加锁失败/唤醒线程会进行用户态和内核态的上下文切换，存在性能开销。因此如果被锁住的代码执行时间很短应选择自旋锁\",\"自旋锁： \",\"加锁失败后，线程会忙等待，直到它拿到锁\",\"底层基于 CAS，在用户态完成加锁和解锁，开销较小。忙等通过 while循环/PAUSE指令 来实现，推荐PAUSE，加锁失败时cpu睡眠 30 clock 降低了读频率\",\"对于单核CPU，需要配合抢占式的调度器，否则自旋的线程永远不会放弃 CPU\",\"加锁失败时，互斥锁进行线程切换，自旋锁则忙等\",\"读写锁： \",\"读取共享资源用读锁，修改共享资源用写锁。可以基于互斥锁/自旋锁\",\"根据实现还分为读优先锁和写优先锁，但存在饥饿问题，以及公平读写锁\",\"适用于能明确区分 read/write，且读多写少的场景\",\"以上三种锁都是悲观锁，即认为多线程同时修改共享资源的概率比较高，于是很容易出现冲突，所以访问共享资源前，先要上锁。\",\"而乐观锁，也叫无锁编程，假定冲突的概率很低，先修改完共享资源，再验证这段时间内有没有发生冲突，如果没有那么操作完成，否则放弃本次操作，并进行重试来解决冲突。乐观锁适用于冲突概率很低，且加锁成本非常高的场景。\"]},\"1469\":{\"h\":\"调度算法\"},\"1470\":{\"h\":\"进程调度\",\"t\":[\"也即线程调度。根据如何处理时钟中断 ，把调度算法分抢占式和非抢占式。\",\"调度原则\",\"CPU 利用率：调度程序应确保 CPU 是始终匆忙的状态，这可提高 CPU 的利用率；\",\"系统吞吐量：吞吐量表示的是单位时间内 CPU 完成进程的数量，长作业的进程会占用较长的 CPU 资源，因此会降低吞吐量，相反，短作业的进程会提升系统吞吐量；\",\"周转时间：周转时间是进程运行+阻塞时间+等待时间的总和，一个进程的周转时间越小越好；\",\"等待时间：这个等待时间不是阻塞状态的时间，而是进程处于就绪队列的时间，等待的时间越长，用户越不满意；\",\"响应时间：用户提交请求到系统第一次产生响应所花费的时间，在交互式系统中，响应时间是衡量调度算法好坏的主要标准。\",\"调度算法\",\"先来先服务 FCFS：非抢占式，先来的进程一直运行到退出或阻塞。不利于短作业，适用于 CPU 繁忙型作业，不适合 I/O 繁忙型作业的系统\",\"最短作业优先 SJF：优先选择运行时间最短的进程。不利于长作业，甚至饥饿\",\"高响应比优先 HRRN：响应比 = (等待时间 + 要求服务时间) / 要求服务时间。权衡了短作业和长作业，但要求服务时间是不可预知的，因此只是理想算法\",\"时间片轮转 RR：Round-Robin，关键在于时间片的设定，过短导致怕频繁的上下文切换，过长会引起短作业进程的响应时间变长\",\"最高优先级 HPF：分抢占式和非抢占式，还分静态优先级和动态优先级（运行时间增加降低优先级，等待时间增加提高优先级）。可能导致低优先级饥饿\",\"多级反馈队列 MFQ： \",\"多级：多个优先级队列，优先级越高时间片越短\",\"反馈：如果有新进程加入优先级高的队列，立刻停止当前运行进程，转而去运行优先级高的队列；\",\"新进程放入第一级队列，时间片用完放入下一级队列，被强占则放入原队列末尾\",\"兼顾了长短作业，同时有较好的响应时间\"]},\"1471\":{\"h\":\"页面调度\",\"t\":[\"缺页中断和一般中断的区别：\",\"缺页中断在指令执行「期间」产生和处理中断信号，而一般中断在一条指令执行「完成」后检查和处理中断信号。\",\"缺页中断返回到该指令的开始重新执行「该指令」，而一般中断返回到该指令的「下一个指令」执行。\",\"当出现缺页异常，需调入新页面而内存已满时，选择被置换的物理页面：\",\"最佳页面置换：理想算法，置换未来最长时间不访问的页面\",\"先进先出置换：换出驻留时间最长的页面\",\"最近最久未使用 LRU：换出最长时间未被访问的页面。实现开销会比较大\",\"时钟页面置换：所有页面保存在一个环形链表中，维护指向最老的页面。发生缺页时，顺时针找到一个访问位为 0 的页面置换\",\"最不常用置换 LFU：换出访问次数最少的页面。但没有考虑时间问题，可以定期减少已访问次数。\"]},\"1472\":{\"h\":\"磁盘调度\",\"t\":[\"先来先服：简单粗暴，磁道分散，性能低\",\"最短寻道时间优先：优先选择从当前磁头位置所需寻道时间最短的请求，存在饥饿\",\"Scan：磁头在一个方向上移动，访问所有未完成的请求，直到磁头到达该方向上的最后的磁道，才调换方向。中间磁道访问频率高\",\"CScan：磁头朝一个方向移动时处理请求，返回时直接复位不处理请求。对各个位置磁道响应频率比较平均\",\"LOOK：类似 Scan，但磁头在移动到最远的请求位置时就立即反向移动。\",\"C-LOOK：类似 CScan，也是最远请求时就返回，且返回途中不处理请求\"]},\"1473\":{\"h\":\"文件系统\",\"t\":[\"Linux 一切皆文件，包括普通文件、目录、块设备、管道、Socket 等等\"]},\"1474\":{\"h\":\"基本组成\",\"t\":[\"Linux 为每个文件分配两个数据结构：\",\"inode：索引节点，文件的唯一标识，记录文件元信息，例如 inode 编号、文件大小、访问权限、创建/修改时间、磁盘位置等\",\"dentry：目录项，多个目录项关联起来形成目录结构。记录文件的名字、inode 指针、其他目录项层级关联等。本质是内核在内存中维护的数据结构，不存放于磁盘。\",\"磁盘格式化时会被分成三个存储区域：\",\"超级块：用来存储文件系统的元信息，比如块个数、块大小、空闲块等等。挂载文件系统时进入内存\",\"索引节点区：用来存储索引节点。当文件被访问时进入内存\",\"数据块区：用来存储文件或目录数据。当文件被访问时进入内存\",\"目录\",\"目录项记录着文件名，和索引节点是多对一的关系，即文件可以有别名，例如硬链接的实现。而目录也是磁盘上的文件，记录子目录和文件。目录项既可以表示文件，也可以表示目录项。\",\"存储\",\"磁盘读写的最小单位是扇区，默认 512B，而文件系统把多个扇区构成一个逻辑块，默认 4KB，以逻辑块为单位读写磁盘。\",\"虚拟文件系统\",\"VFS 位于用户层和文件系统中间，为用户提供一个统一的接口。根据存储位置的不同，分为磁盘文件系统（Ext2/3/4）、内存文件系统（/proc, /sys）、网络文件系统(NFS, SMB)\",\"硬/软链接\",\"硬链接：多个目录项中的索引节点指向一个文件 \",\"不可用于跨文件系统，每个文件系统有各自的 inode 结构和列表\",\"只有删除文件的所有硬链接以及源文件时，系统才会删除该文件\",\"软链接：重新创建一个有独立 inode 的文件，其内容是另一个文件的路径 \",\"可以跨文件系统\",\"即使目标文件删除了，软链接仍在，只不过找不到目标文件\"]},\"1475\":{\"h\":\"文件使用\",\"t\":[\"open -> write/read -> close\",\"打开文件后，OS 为每个进程维护一个打开文件表，每一项代表一个文件描述符 FD，包括： \",\"文件指针：跟踪读写位置\",\"打开计数器：打开该文件的进程数，计数器为0时才关闭文件，删除该条目\",\"文件磁盘位置\",\"访问权限\"]},\"1476\":{\"h\":\"文件存储\",\"t\":[\"连续存放\",\"文件存放在磁盘连续的物理空间中\",\"文件数据紧密相连，读写效率高（一次磁盘寻道就可以读出整个文件）\",\"但会产生磁盘碎片、文件长度不易扩展的问题\",\"非连续存放\",\"链表方式： \",\"数据离散不连续，分隐式链表（指针相连）、显式链接（链接表存储块地址）\",\"可以消除磁盘碎片，文件长度也可以动态扩展\",\"但隐式链表无法直接访问数据块，只能通过指针顺序访问，而且指针还消耗额外存储空间\",\"而显式链接通过文件分配表，提高了检索速度，减少磁盘访问次数，但不适用于大磁盘\",\"索引方式 \",\"为每个文件创建一个索引数据块，存放指向文件数据块的指针列表。文件头中保存索引数据块的指针\",\"文件的创建、增大、缩小都很方便，没有碎片问题，支持顺序读写和随机读写\",\"但存储索引占用额外空间。对于大文件，需要链式索引块/多级索引块\",\"Unix 系统对于不同大小的文件，采取链表、一级索引、二级索引、三级索引等方式。\"]},\"1477\":{\"h\":\"空闲空间管理\",\"t\":[\"空闲表\",\"维护一张表，包括空闲区的第一个块号和空闲块个数\",\"适用于少量空闲区场景，否则表项太多查询效率低\",\"空闲链表\",\"空闲块构成链表\",\"简单，但不能随机访问，IO 多效率低，指针消耗了块的存储空间\",\"位图法\",\"Linux 文件系统采用了位图法，用二进制的一位来表示磁盘中一个块的使用情况\",\"inode 空闲块也是位图法管理\"]},\"1478\":{\"h\":\"文件 IO\",\"t\":[\"缓冲/非缓冲 IO\",\"根据是否利用标准库缓冲，分：\",\"缓冲 IO：利用标准库的缓存实现文件的加速访问，而标准库再通过系统调用访问文件\",\"非缓冲 IO：直接通过系统调用访问文件，不经过标准库缓存\",\"直接/非直接 IO\",\"根据是否利用操作系统的缓存，分：\",\"直接 IO：不会发生内核缓存和用户程序之间数据复制，而是直接经过文件系统访问磁盘\",\"非直接 IO：读操作时，数据从内核缓存中拷贝给用户程序，写操作时，数据从用户程序拷贝给内核缓存，再由内核决定什么时候写入数据到磁盘\",\"触发写回的场景有：\",\"在调用 write 的最后，当发现内核缓存的数据太多的时候，内核会把数据写到磁盘上；\",\"用户主动调用 sync，内核缓存会刷到磁盘上；\",\"当内存十分紧张，无法再分配页面时，也会把内核缓存的数据刷到磁盘上；\",\"内核缓存的数据的缓存时间超过某个时间时，也会把数据刷到磁盘上；\",\"阻塞/非阻塞 和 同步/异步 IO、\",\"阻塞 IO：程序执行 read 时线程会被阻塞，一直等到内核数据准备好，并把数据从内核缓冲区拷贝到应用程序的缓冲区中，拷贝过程完成 read 才会返回\",\"非阻塞 IO：read 请求在数据未准备好的情况下立即返回，程序可以继续往下执行。但应用程序会不断轮询内核，直到内核将数据准备好并将数据拷贝到应用程序缓冲区，read 调用才可以获取到结果（针对轮询的优化：IO 多路复用 select/poll/epoll）\",\"无论是阻塞 I/O、非阻塞 I/O，还是基于非阻塞 I/O 的多路复用都是同步调用，因为它们在 read 调用时，内核将数据从内核空间拷贝到应用程序空间的过程都是需要等待的，也就是说这个过程是同步的。\",\"而真正的异步 I/O 是「内核数据准备好」和「数据从内核态拷贝到用户态」这两个过程都不用等待，例如 aio_read()\"]},\"1479\":{\"h\":\"Page Cache\",\"t\":[\"Page Cache 本质上是由 Linux 内核管理的内存区域，通过 mmap/buffered IO 将文件读取到内存空间实际上都是读取到 Page Cache 中。\",\"由多个 Page(4KB) 构成，但不是所有 Page 都构成 Page Cache，例如匿名页\",\"Page Cache 用于缓存文件的页数据，buffer cache 用于缓存块设备（如磁盘）的块数据。\",\"可以加快数据访问，同时基于预读，可以减少IO，提高磁盘吞吐量\",\"但需要占用额外物理内存空间，物理内存紧张时可能导致频繁的 swap\",\"数据一致性问题\",\"两方面：数据一致 + 元数据一致\",\"fsync(fd)：将文件的脏数据和脏元数据全部刷新至磁盘\",\"fdatasync(fd)：将文件脏数据刷新至磁盘，同时只刷新必要的元数据，如文件大小\",\"sync()：刷新回脏的文件元数据\",\"对比 Direct IO\",\"Page Cache 在内核空间开辟缓冲区\",\"mmap：用户空间做内存映射，指向 Page Cache\",\"Direct IO：去掉 Page Cache，交由 DMA，直接在用户空间开辟缓冲区\"]},\"1480\":{\"h\":\"设备管理\",\"t\":[\"IO 设备分两大类：\",\"块设备：数据存储在固定大小的块中，每个块有自己的地址。如硬盘、USB等\",\"字符设备：以字符为单位收发数据，不可寻址。例如鼠标、键盘等\"]},\"1481\":{\"h\":\"设备控制器\",\"t\":[\"每个设备都有一个设备控制器，来屏蔽设备之间的差异。它包括：\",\"芯片：执行逻辑\",\"寄存器： \",\"状态寄存器：告诉 CPU 工作是否已经完成\",\"命令寄存器：保存要执行的命令\",\"数据寄存器：保存需要传输的数据\",\"块数据通常传输的数据量大，因此设备控制器设立了可读写的数据缓冲区。\",\"设备控制器和 CPU 的通信方式包括：\",\"端口 IO：每个控制寄存器分配一个 I/O 端口，通过特殊汇编指令操作\",\"内存映射 IO：将所有控制寄存器映射到内存空间中，这样就可以像读写内存一样读写数据缓冲区\",\"IO 控制方式\",\"轮询：傻瓜式，占用CPU\",\"中断：软中断/硬中断，CPU 经常被打断占用\",\"DMA：直接内存访问，由硬件完成数据读写内存，CPU 仅在传输开始和结束时干预\"]},\"1482\":{\"h\":\"设备驱动程序\",\"t\":[\"设备控制器属于硬件，而设备驱动程序属于 OS。提供 OS -> 设备驱动程序 -> 设备控制器的中间层接口，初始化时需要注册中断处理函数。\",\"IO 完成 -> 控制器发起中断 -> 保护被中断进程的 CPU 上下文 -> 执行中断处理函数 -> 恢复中断进程上下文\"]},\"1483\":{\"h\":\"通用块层\",\"t\":[\"针对块设备，Linux 通过通用块层管理不同的块设备，提供文件系统和驱动程序之间的抽象接口：\",\"向上为文件系统/应用程序提供访问块设备的标准接口\",\"向下把各种磁盘设备抽象为统一的块设备\",\"并且进行 IO请求 的调度，以提高读写效率\",\"调度算法\",\"无调度：不做任何处理。通常用于虚拟机，将 IO 交由物理机负责\",\"先入先出\",\"完全公平：每个进程维护一个 IO 调度队列，按时间片均匀分布每个进程的 IO请求\",\"优先级调度：适合大量进程的系统，如桌面环境、多媒体应用等\",\"最终期限调度：分读、写IO队列，并确保达到最终期限的请求被优先处理。适用于 IO压力大的场景。如 DB\"]},\"1484\":{\"h\":\"Linux IO 分层\",\"t\":[\"文件系统：虚拟文件/其它文件系统的具体实现，向上提供统一的文件访问接口，向下通过通用块层访问设备\",\"通用块层：包括块设备的 I/O 队列和 I/O 调度器，选择 IO请求 发给设备层\",\"设备层：包括硬件设备、设备控制器和驱动程序，负责最终物理设备的 I/O 操作\",\"Linux 提供了页缓存、索引节点缓存、目录项缓存、缓冲区等来提高 IO效率。\"]},\"1485\":{\"h\":\"网络系统\"},\"1486\":{\"h\":\"零拷贝\",\"t\":[\"DMA：Direct Memory Access 直接内存访问，在进行 I/O 设备和内存的数据传输的时候，数据搬运的工作全部交给 DMA 控制器，CPU 不再参与任何与数据搬运相关的事情，从而处理别的事务。如今每个 I/O 设备里都有自己的 DMA 控制器。\",\"以文件传输的场景为例，数据从磁盘 -> 内核缓冲区（磁盘高速缓存 PageCache）-> 用户空间 -> Socket 缓冲区 -> 网卡。整个过程需要产生4次内核态和用户态的上下文切换（read/write 2次系统调用），以及4次数据拷贝（CPU 和 DMA 各负责2次），效率很低。可以通过零拷贝技术减少这两个开销，实现方式有两种：\",\"mmap + write：mmap()系统调用直接把内核缓冲区里的数据映射到用户空间，减少了一次数据拷贝\",\"sendfile：用一次sendfile()系统调用替代read() + write()，并且直接把内核缓冲区数据拷贝到 socket 缓冲区里，减少了2次上下文切换和1次数据拷贝\",\"Zero-Copy: 如果网卡支持 SG-DMA 技术，网卡可以直接从内核缓冲中拷贝数据，全程不需要 CPU 拷贝，减少了2次上下文切换和2次数据拷贝\",\"也因此，零拷贝技术不允许对数据内容做进一步的加工。\",\"PageCachePageCache 的优化包括\",\"缓存最近被访问的数据\",\"预读功能\",\"但对于大文件，PageCache 会被大文件占满，优化失效带来性能问题。因此高并发场景下，针对大文件的传输，尽量使用异步IO，绕开 PageCache（也称直接 IO，而使用 PageCache 的叫做 缓存IO）。另外，如果应用程序已经实现了磁盘缓存，可以使用 直接IO，减少额外性能损耗。\"]},\"1487\":{\"h\":\"I/O 多路复用\",\"t\":[\"基本 Socket 模型\",\"通过 Socket 建立 TCP 连接时，监听和传输数据的是两个 Socket，OS 内核为每个 Socket 维护了两个队列：\",\"TCP 半连接队列：保存还没有完成三次握手的连接，此时服务端处于 syn_rcvd 的状态；\",\"TCP 全连接队列：保存完成了三次握手的连接，此时服务端处于 established 状态；\",\"这种模式基于同步阻塞，只能一对一通信\",\"多进程模型\",\"服务器的主进程负责监听客户的连接，一旦与客户端连接完成，通过 fork 创建子进程服务客户。但是，子进程退出后可能保留一些信息成为僵尸进程消耗资源，需要主进程通过 wait/waitpid 回收资源。\",\"由于进程上下文切换开销（虚拟内存、栈、全局变量等用户空间资源，以及内核堆栈、寄存器等内核空间资源）很大，因此这种模式并发量不能很高。\",\"多线程模型\",\"当服务器与客户端 TCP 完成连接后，通过 pthread_create() 函数创建线程，然后将「已连接 Socket」的文件描述符传递给线程函数，接着在线程里和客户端进行通信，从而达到并发处理的目的。但是频繁创建和销毁线程，系统开销也是不小的，可以通过线程池进行优化，但是注意需要对存放 Socket 的队列同步加锁。\",\"无论基于进程还是线程，对于一台机器想要达到 C10K 的并发量还是很困难的。\",\"I/O 多路复用\",\"一个进程处理每个请求如果仅需 1ms，那么多个请求复用一个进程就可以实现高并发，也叫时分多路复用。select/poll/epoll是内核提供给用户态的多路复用系统调用，进程可以通过这些系统调用函数从内核中获取多个事件。\",\"select\",\"将已连接的 Socket 放到一个文件描述符集合，然后调用 select 将文件描述符集合拷贝到内核里，由内核遍历判断是否有事件，标记可读/可写\",\"接着再把整个描述符集合拷贝回用户态，用户态再遍历一次找到可读/可写的 Socket，取出进行处理\",\"需要 2 次遍历文件描述符集合，用固定长度的 BitsMap 表示描述符集合，个数受限\",\"poll\",\"以链表形式组织一个动态数组表示文件描述符集合，和 select 一样也要在内核态和用户态各遍历 1 次\",\"epoll\",\"先用 epoll_create 创建一个 epoll 文件描述符 epfd，通过 epoll_ctl 将需要监视的 socket 添加到 epfd 中，最后调用 epoll_wait 等待数据\",\"内核中使用红黑树来跟踪进程所有待检测的文件描述符，CRUD 效率很高\",\"使用事件驱动的机制，内核中维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数，内核会将其加入到这个就绪事件列表中。用户调用 epoll_wait 得到有事件发生的描述符个数。只将有事件发生的 Socket 集合传递给应用程序，因此只在 epoll_wait 期间发生了一次内存拷贝，大大提高了效率\",\"两种事件触发模式：\",\"边缘触发： \",\"当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次\",\"因此程序要保证一次性将内核缓冲区的数据读取完；\",\"一般和非阻塞 I/O 搭配使用，效率要高于水平触发\",\"水平触发： \",\"当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束\",\"select/poll 仅有水平触发，epoll 默认是水平触发\"]},\"1488\":{\"h\":\"网络模式\",\"t\":[\"Reactor 模式\",\"一种非阻塞同步网络模式，对事件反应，来了一个事件，Reactor 就有相对应的反应/响应。核心部分有两个：\",\"Reactor：负责监听和分发事件，事件类型包含连接事件、读写事件；\",\"处理资源池：负责处理事件，如 read -> 业务逻辑 -> send；\",\"单 Reactor 单进程/线程\",\"Reactor 对象通过 select（IO 多路复用接口）监听事件，将事件通过 dispatch 分发给 Acceptor / Handler。Acceptor 负责建立连接，并创建一个 Handler 对象来处理后续的响应事件。\",\"缺点：\",\"无法充分利用多核 CPU 性能\",\"Handler 处理业务时无法处理其它事件\",\"实现简单，但仅适用于业务处理非常快速的场景，不适用计算机密集型的场景。例如 Redis 6.0 之前的版本就是 单 Reactor 单进程。\",\"**单 Reactor 多进程/线程\",\"Handler 对象不再直接负责业务处理，只负责数据接收和发送，read 读取到数据后交给子线程里的 Processor 进行业务处理，处理完后再发回 Handler。\",\"缺点：只有一个 Reactor 承担所有事件的舰艇和响应，且只在主线程中运行，在面对瞬间高并发的场景时，容易成为性能的瓶颈的地方。\",\"多 Reactor 多进程/线程\",\"MainReactor 收到事件后将新连接分配给 SubReactor 继续监听，再次发生事件时由 SubReactor 调用相应的 Handler 响应。主线程只负责接收新连接，子线程负责完成后续的业务处理，且无须返回数据。\",\"例如著名的 Netty、Memcache 都是多 Reactor 多线程，Nginx 是多 Reactor 多进程。\",\"Proactor\",\"Proactor 是异步网络模式，不用等待 数据准备 和 数据拷贝 两个过程，完全由内核完成并通知。\",\"Reacto 和 Proactor 都是一种基于事件分发的网络编程模式，区别在于 Reactor 感知的是就绪可读写（待完成）事件，Proactor 感知的是已完成的读写事件。\",\"然而，Linux 下的 AIO 系列函数都是用户空间模拟的异步，且仅支持本地文件 AIO，不支持网络 Socket，因此基于 Linux 的高性能网络程序都是 Reactor 方案。\"]},\"1489\":{\"h\":\"一致性哈希\",\"t\":[\"不同的负载均衡算法适用的业务场景也不同的，例如轮询策略只适用于每个节点数据一致的场景，但是不适合分布式系统，可能访问不到需要的数据。\",\"哈希算法可以建立数据和节点的映射关系，但节点变化时，所有数据需要进行迁移，开销过大。\",\"一致性哈希\",\"将「存储节点」和「数据」都映射到一个首尾相连的哈希环上，如果增加或者移除一个节点，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据也不会受到影响。\",\"虚拟节点\",\"一致性哈希算法不能保证分布均匀，可能大量请求集中在一个节点。\",\"因此可以引入虚拟节点，对一个真实节点做多个副本，并将虚拟节点也映射到哈希环上。以此提高节点的均衡度和稳定性。带虚拟节点的一致性哈希适合硬件配置不同的节点的场景，以及节点规模会发生变化的场景。\"]},\"1490\":{\"h\":\"网络性能\",\"t\":[\"指标\",\"带宽：链路的最大传输速率\",\"延时：请求数据包发送后，收到对端响应，所需要的时间延迟\",\"吞吐量：单位时间内成功传输的数据量\",\"PPS：Packet Per Second 发包速率\",\"网络可用性、并发连接数、丢包率、重传率\",\"查看网络信息\",\"ifconfig/ip 查看网络配合和收发数据包的统计信息\",\"ss/netstat 查看 socket、网络协议栈、网口、路由表信息\",\"sar 查看当前网络的吞吐率和 PPS\"]},\"1491\":{\"h\":\"Java\"},\"1492\":{\"h\":\"集合\"},\"1493\":{\"h\":\"ArrayList\",\"t\":[\"ArrayList底层是可以动态扩展的 Object 数组，默认初始容量是10。\",\"当添加元素超过当前的 capacity 时，就会触发扩容机制，扩容机制主要由内部的 grow() 方法实现。 \",\"首先会根据默认容量和存储所需容量的较大者确定一个最小扩容容量minCapacity\",\"然后将现在的容量扩大1.5倍左右，确定一个新容量\",\"接着开辟一个新数组，容量为上面两个容量的较大者，将所有元素复制到新数组中完成扩容\",\"最后把新添加元素放到扩容后的数组末尾\"]},\"1494\":{\"h\":\"HashMap\",\"t\":[\"JDK 1.8 之前 HashMap 由 数组+链表 组成的，数组是 HashMap 的主体，链表是为了用拉链法解决哈希冲突。\",\"JDK 1.8 之后 HashMap 在解决哈希冲突时，如果链表长度大于8，并且数组长度超过64，就会把链表转化为红黑树，以减少搜索时间。\",\"如果 HashMap 存储元素超过一个阈值，阈值等于当前容量 * 0.75（负载因子），就会将数组扩容至当前的2倍，然后进行rehash，把数据放到新的位置。\",\"默认大小是 16，负载因子 0.75 是统计学上 Hash 后遵循泊松分布的结果。扩容 $2^n$是为了在确定索引时index = hashcode % capacity可以利用位运算。\"]},\"1495\":{\"h\":\"HashTable/TreeMap\",\"t\":[\"HashTable 也实现了 Map 接口，基于锁机制实现了线程安全，因此效率低，多线程环境下推荐使用 ConcurrentHashMap。\",\"TreeMap 是基于红黑树实现的有序键值对集合。\"]},\"1496\":{\"h\":\"Set\",\"t\":[\"HashSet 底层基于 HashMap，使用哈希表存储元素，具有快速的查找性能，但不保证元素的顺序。\",\"LinkedHashSet 底层使用哈希表存储元素，并通过链表维护元素的插入顺序。\",\"TreeSet 底层实现是基于红黑树（TreeMap），支持元素自动排序\"]},\"1497\":{\"h\":\"ConcurrentHashMap\",\"t\":[\"JDK 7 以前的ConcurrentHashMap使用分段锁，每个segment上同时只有一个线程操作。JDK 8后理想情况下，每个table元素都可以并发：\",\"结构上是数组+链表/红黑树，当冲突链表达到一定长度时，链表会转换成红黑树。\",\"ConcurrentHashMap 通过 CAS 和 Synchronized 实现并发安全\",\"put放入元素的时候 \",\"首先根据 key 计算哈希定位 Node，如果对应位置的 Node 为 null，尝试 CAS 写入，失败就进入下次循环重试(最外层是个无限循环)\",\"如果要放的位置为 MOVED（-1），说明其它线程正在扩容，参与一起扩容。\",\"否则的话，通过 Synchronized 对 Node 加锁，判断是链表还是红黑树，写入数据，实现并发安全\",\"最后进行检查，如果是链表，且长度超过阈值 8，就扩容数组/转换成红黑树（数组超过64）\",\"get获取元素的时候 \",\"直接根据哈希值，找对指定位置，如果头节点就是要找的直接返回\",\"否则按链表/红黑树查找所要的元素\",\"get 操作不需要加锁，因为 Node 的元素 val 和指针 next 都是 volatile 修饰的，可以保证多线程下并发的可见性。\",\"扩容的时候： \",\"先根据运算得到需要遍历的次数i，然后利用tabAt方法获得i位置的元素f，初始化一个forwardNode实例fwd\",\"如果f == null，则在table中的i位置放入fwd，否则采用头插法的方式把当前旧table数组的指定任务范围的数据给迁移到新的数组中。然后给旧table原位置赋值fwd。\",\"直到遍历过所有的节点以后就完成了复制工作，把table指向nextTable，并更新sizeCtl为新数组大小的0.75倍，扩容完成。\",\"在此期间如果其他线程的有读写操作都会判断head节点是否为forwardNode节点，如果是就帮助扩容。\"]},\"1498\":{\"h\":\"CopyOnWriteArrayList\",\"t\":[\"在读写锁（仅写操作排他）的基础上，更进一步，读取完全不用加锁，仅写写互斥需要同步。\",\"CopyOnWriteArrayList 类的所有可变操作，如add、set等，都是创建底层数组的副本，修改完后再替换原有数据实现的\",\"对于读操作，内部array不会发生修改，只会被替换，因此无需任何同步控制就可以保证数据安全\",\"对于写操作，加锁保证同步，避免多线程写的时候拷贝多份副本\"]},\"1499\":{\"h\":\"并发安全的 Queue\",\"t\":[\"Java 提供的线程安全的 Queue 分为阻塞队列、非阻塞队列。\",\"非阻塞队列 - ConcurrentLinkedQueue\",\"通过 CAS 实现线程安全\",\"底层使用链表，在高并发环境下性能非常好\",\"阻塞队列 - BlockingQueue\",\"通过加锁实现线程安全\",\"广泛用于生产者-消费者模型，队列容器已满时，生产者线程阻塞，队列容器为空时，消费者线程阻塞，直至队列非空\",\"继承自 Queue，实现类有： \",\"ArrayBlockingQueue：数组实现的有界队列，创建时指定容量。采用 ReentrantLock 控制并发，默认非公平\",\"LinkedBlockingQueue：基于单向链表的无界/有界队列，可指定大小.采用 ReentrantLock 控制并发\",\"PriorityBlockingQueue：基于堆的无界队列，支持优先级，内部自动扩容。采用 ReentrantLock 控制并发\",\"SynchronousQueue：容量固定为 1 的同步队列，内部没有使用 AQS，而是通过 CAS 控制并发，生产和消费必须一一配对\",\"DelayedWorkQueue：基于堆的优先级阻塞队列\"]},\"1500\":{\"h\":\"ConcurrentSkipListMap\",\"t\":[\"利用空间换时间的思想，通过维护多层链表实现的 Map，查询时间复杂度 O(logN)。内部通过 CAS 实现并发安全。\"]},\"1501\":{\"h\":\"IO\"},\"1502\":{\"h\":\"Java IO 体系\",\"t\":[\"顶层两大类四个接口：\",\"InputStream/OutputStream：字节输入输出流\",\"FileInputStream/FileOutputStream: 文件输入输出流\",\"BufferedInputStream/BufferedOutputStream: 缓冲输入输出流，每次批量读/写字节到缓冲区，减少IO，提高重复单字节读写场景的效率\",\"ObjectInputStream/ObjectOutputStream: 对象序列化/反序列化流\",\"PrintStream：字节打印流\",\"Reader/Writer：字符输入输出流\",\"InputStreamReader/OutputStreamWriter: 字节 -> 字符的转换流\",\"FileReader/FileWriter: 文件字符输入输出流\",\"BufferedReader/BufferedWriter：缓冲字符字符输入输出流\",\"PrintWriter: 字符打印流\"]},\"1503\":{\"h\":\"IO 中的设计模式\",\"t\":[\"装饰器模式BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName), \\\"UTF-8\\\"));通过组合替代继承，在不改变原有对象的情况下扩展原始类的功能。\",\"适配器模式InputStreamReader 对字节解码，将字节流转化为字符流，OutputStreamWriter 对字符编码，将字符流转换为字节流不同区装饰器侧重于动态增强原始类的功能，适配器专注解决接口不兼容，不能交互的类，让它们能够一起工作。\",\"工厂模式如Files::newInputStream创建InputStream对象，Paths::get创建Path对象...\",\"观察者模式NIO中的文件目录监听服务基于WatchService接口、Watchable接口，内部通过一个守护线程定期轮询检测文件变化实现。\"]},\"1504\":{\"h\":\"IO 模型\",\"t\":[\"Unix中的五种IO模型：同步阻塞 I/O、同步非阻塞 I/O、I/O 多路复用、信号驱动 I/O 和异步 I/O\",\"Java中的三种常见IO模型：\",\"BIO：同步阻塞IO，用程序发起 read 调用后，会一直阻塞，直到内核把数据拷贝到用户空间\",\"NIO，同步非阻塞IO，准备数据阶段不阻塞，只有拷贝阶段才阻塞，应用程序要不断轮询数据是否准备好。而IO多路复用通过 select/epoll 等系统调用减少CPU使用。Java使用Selector、Channel、Buffer等抽象实现。\",\"AIO：异步IO，基于事件和回调机制\"]},\"1505\":{\"h\":\"并发\"},\"1506\":{\"h\":\"线程安全的三大特性\",\"t\":[\"原子性：若干个操作要么全部执行，要么全部不执行\",\"可见性：当一个线程修改了共享变量的值，其他线程能够立即看到这个修改。（原因在于 Java 的共享内存模型，线程直接操作的都是缓存）\",\"有序性：程序的执行顺序与代码的顺序相同（原因在于指令重排序）\",\"Synchronized 保证了原子性和可见性：加互斥锁 -> 清空工作内存 -> 拷贝最新数据到工作内存 -> 执行代码 -> 刷新工作内存到主内存 -> 释放互斥锁\",\"Volatile 保证了可见性和有序性：通过 store/load 指令保证对 volatile 变量的读写都是最新的，且通过内存屏障禁止指令重排序\"]},\"1507\":{\"h\":\"Volatile 关键字\",\"t\":[\"Volatile关键字的作用有两个：\",\"保证变量的可见性：每次对 volatile 修饰的本地变量修改时，会立刻刷新回主内存，读取时也会先从主内存读入本地内存再访问\",\"通过插入特定的内存屏障，禁止指令重排序\"]},\"1508\":{\"h\":\"创建线程的方式\",\"t\":[\"继承 Thread 创建线程类，重写 run 方法。\",\"实现 Runnable 接口实现 run 方法，并作为参数来创建 Thread。\",\"实现 Callable 接口实现 call 方法，并作为参数来创建 FutureTask。Callable可以获取到返回值\",\"除此之外，还可以使用线程池来创建线程\"]},\"1509\":{\"h\":\"线程生命周期\",\"t\":[\"Java 线程在运行的生命周期中有 6 种不同状态：\",\"NEW：线程刚被创建的初始状态\",\"RUNNABLE：调用start后的运行状态\",\"BLOCKED：阻塞状态，需要等待锁释放\",\"WAITING：等待状态，等待其它线程的一些特殊事件，如notify(), join()\",\"TIMED_WAITING：有限等待\",\"TERMINATED：线程执行完毕的终止状态其中，Java中的Runnnable状态包含OS层面线程的Ready和Running两个状态\"]},\"1510\":{\"h\":\"减少线程切换\",\"t\":[\"无锁并发编程\",\"CAS 算法\",\"使用最少线程\",\"协程\"]},\"1511\":{\"h\":\"线程池\",\"t\":[\"优点：\",\"降低资源消耗\",\"提高响应速度\",\"提高线程的可管理性\",\"Executor 框架：JDK 5 引入的管理线程池的框架，包括三大部分：\",\"任务 Runnable / Callable \",\"Callable可以返回结果/抛出异常\",\"执行者 Executor \",\"实现类 ThreadPoolExecutor，通过 execute/submit 提交执行\",\"异步计算结果 Future \",\"实现类 FutureTask\",\"submit 和 execute 区别\",\"submit 可以获得执行结果。实现上是将 Runnable/Callable 对象封装成 RunnableFuture 传递给 execute 执行，而 RunnableFuture 继承自 Runnable 并且可以保存执行结果。\",\"execute 只能执行 Runnable，因此不能获得执行结果\",\"ThreadPoolExecutor\",\"ThreadPoolExecutor(int corePoolSize, // 指定常驻线程数量 int maximumPoolSize, // 指定允许的最大线程数量 long keepAliveTime, // 当线程数量超过corePoolSize后，多余的空闲线程的存活时间 TimeUnit unit, // keepAliveTime单位 BlockingQueue<Runnable> workQueue, // 任务队列，保存被提交但尚未被执行的任务 ThreadFactory threadFactory, // 线程工厂，用于创建线程 RejectedExecutionHandler handler // 任务过多时的拒绝策略 )\",\"任务队列 - BlockingQueue：指被提交但未执行的任务队列，一个BlockingQueue接口的对象，仅用于存放Runnable对象。常用的队列实现有： \",\"SynchronousQueue: 直接提交的队列，没有容量，来一个任务执行一个，没有多余线程则执行拒绝策略\",\"ArrayBlockingQueue: 有界任务队列，构造时指定容量\",\"LinkedBlockingQueue: 无界任务队列，任务繁忙时会一直创建线程执行，直至资源耗尽\",\"PriorityBlockingQueue: 带有执行优先级的无界队列\",\"拒绝策略 - RejectedExecutionHandler：指定当任务数量超过系统实际承载能力时的策略，通常是线程池中的线程已经用完，达到了最大线程数，排队队列也已满的情况。ThreadPoolExecutor提供了以下策略： \",\"AbortPolicy: 默认策略，丢弃并抛出RejectedExecutionException异常\",\"CallersRunsPolicy: 绕过线程池，由主线程直接调用任务的run()方法执行\",\"DiscardOldestPolicy: 抛弃队列中等待最久的任务，然后尝试再次提交当前任务\",\"DiscardPolicy: 丢弃且不抛异常\",\"线程数量设定\",\"线程池的大小应该根据应用程序的负载进行调整，如果线程池太小，可能会导致应用程序的性能下降，因为没有足够的线程来处理所有的请求。如果线程池太大，也会导致程序的性能下降，因为线程之间的上下文切换会消耗大量的CPU时间。\",\"CPU 密集型：设置一个较小的线程数量，比如 N + 1，N 是 CPU 核心数，使得处理任务时充分利用 CPU\",\"IO 密集型：设置一个较大的线程数量，比如 2N + 1，使得 CPU 等待 IO 完成时可以处理其它任务\",\"线程执行逻辑\",\"在底层实现上，是不区分核心/非核心线程的，所有线程统一放在 Condition 的等待队列中，因此线程调度时执行的是轮询策略，线程池中的空闲线程依次执行任务。而过期销毁非核心线程是根据当前活跃的线程数来判断的。\"]},\"1512\":{\"h\":\"sleep()和wait()对比\",\"t\":[\"共同点：两者都可以暂停线程的执行区别：\",\"sleep()不释放锁，而wait()会释放对应的对象锁\",\"wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的notify()或者notifyAll()方法。除非使用 wait(long timeout) 超时后线程会自动苏醒。\",\"sleep()方法执行完成后，线程会自动苏醒\",\"因此，wait()定义在Object类中，通常被用于线程间交互/通信，而sleep()是Thread类的静态方法，用于简单地暂停执行。\",\"另外，yield() 方法是暂停当前正在执行的线程对象，并执行其他线程。join() 方法可以使得一个线程在另一个线程结束后再执行\"]},\"1513\":{\"h\":\"CAS 底层实现\",\"t\":[\"CAS 是一种通过硬件实现的乐观锁并发安全的技术，基本思想是，给定一个内存地址，一个期望值和一个新值，如果该地址的当前值和期望值相等，就用新值替换它，否则不做任何操作。底层实现依赖于 CPU 的 CAS 指令，保证了操作的原子性，Java 中可以通过 Unsafe 类的方法调用 CAS 指令。\",\"CAS 存在 ABA 问题，可以通过版本号/标记位解决。\"]},\"1514\":{\"h\":\"ThreadLocal 原理\",\"t\":[\"每个线程内部都有一个 ThreadLocalMap 对象，本质上是一个键值对（key-value）映射，其中 key 是 ThreadLocal 实例对象本身的弱引用，value 是该线程内部的变量值。在不同线程中访问同一个 ThreadLocal 对象时，实际上是访问了各自线程内部的 ThreadLocalMap 对象中的不同 value，从而避免了多线程之间对变量的共享和访问冲突。\",\"使用场景\",\"例如 SimpleDateFormat/Random 这样的工具类，每个线程都要用到，如果每个线程都 new 一个很麻烦，因此可以改成static共用。但是可能会线程不安全，因此可以使用 threadLocal 每个线程分配一个，保证线程安全\",\"对于同一个线程内所有方法需要共享的资源，比如用户信息，为了避免参数一层层显式传递，同时保证线程的安全，可以使用 threadLocal 保存。这样每个线程内访问的都是相同的资源，不同线程访问的是不同资源。\",\"为什么是弱引用\",\"假如使用强引用，当ThreadLocal不再使用需要回收时，发现某个线程中ThreadLocalMap存在该ThreadLocal的强引用，无法回收，从而造成内存泄漏。\",\"使用弱引用可以防止长期存在的线程（通常使用了线程池）导致ThreadLocal无法回收造成内存泄漏。\",\"内存泄漏问题\",\"TheadLocalMap 的 key 所关联的 ThreadLocal 实例是弱引用，因此如果 key 没有其它关联的强引用，那么 key 就会被 GC 自动回收，而 value 是强引用不会被自动回收，导致 value 一直存在，产生内存泄漏。因此 ThreadLocal 在底层实现上会进行过期 Entry 的清理。\",\"Set() 实现\",\"根据当前线程获取 ThreadLocalMap 对象，没有的话就新建\",\"计算 key 的哈希，内部的 nextHashCode() 每次添加时自增一个斐波那契数/黄金分割数，来和数组/槽容量相与（使得哈希分布更均匀）\",\"如果哈希对应的槽为空，直接放入\",\"如果槽非空 \",\"并且 key 为 null，即该 Entry 的 key 弱引用已被 GC，说明这是个过期的槽 staleSlot，执行 replaceStaleEntry() 然后返回\",\"并且 key 和当前 ThreadLocal 一致，直接更新；不一致就向后遍历直到找到空槽\",\"这时找到了一个空槽，创建一个新 Entry 放入\",\"执行 cleanSomeSlots() 启发式清理； \",\"启发式清理结束后，如果 size 超过阈值（容量2/3），进行探测式清理 expungeStaleEntry()\",\"探测式清理结束后，如果 size 超过 3/4 * thresh 就执行 rehash()\",\"过期 key 的清理\",\"replaceStaleEntry()\",\"从 staleSlot 向前迭代找过期槽，更新 slotToExpunge，直到空槽\",\"从 staleSlot 向后迭代找 key 相同的，执行更新，直到空槽\",\"最后从 slotToExpunge 开始执行启发式过期数据清理\",\"启发式清理 - cleanSomeSlots()\",\"当容量/2的位置开始探测式清理\",\"探测式清理 - expungeStaleEntry()\",\"以当前 Entry 往后清理，遇到值为 null 则结束清理，属于线性探测清理\",\"get() 实现\",\"计算 key 的哈希定位槽位\",\"如果槽的 key 一致直接返回，否则向后迭代查找 \",\"迭代过程中如果发现空槽，触发探测式数据回收 expungeStaleEntry()\",\"InheritableThreadLocal\",\"ThreadLocal 无法在异步场景下给子线程共享父线程中创建的线程副本，可以使用 InheritableThreadLocal，在 Thread 构造方法中传递数据。但一般异步处理都使用线程池复用，存在数据不一致问题，可以用阿里开源的 TransmittableThreadLocal 组件。\"]},\"1515\":{\"h\":\"Synchronized 锁机制\",\"t\":[\"指定对象/用于普通方法上是对实例对象加锁，指定类对象/用于静态方法就是对类加锁。本质上是竞争对象关联的 Monitor 对象的 Owner 身份。\",\"JDK6 之前是基于监视器 Monitor 的重量级锁机制，在 JDK6 引入了偏向锁、轻量级锁等优化机制。\",\"偏向锁：当一个线程访问同步块并获得锁时，会在对象头和栈帧的锁记录里存储锁偏向的线程 ID，然后下一次这个线程再次访问同步块时，如果该对象没有被其它线程竞争，就可以直接进入，不需要获取锁资源。目的是在无竞争的情况下，减小锁的获取和释放的操作，提高程序的性能。\",\"轻量级锁：用于多线程交替执行同步块的场景。如果一个线程试图进入同步块，但是发现对象头里锁偏向的线程 ID 不是自己，就会引发竞争，这时偏向锁就会升级成轻量级锁。轻量级锁使用 CAS 操作来尝试获取锁。如果CAS操作失败，表示有竞争，锁就会膨胀为重量级锁。\",\"重量级锁：使用操作系统的互斥量（Mutex）来实现锁。在重量级锁的状态下，线程会被阻塞，直到获取到锁。\",\"除此之外，整个过程中还有自旋、自适应自旋等等的优化措施。\"]},\"1516\":{\"h\":\"AQS\",\"t\":[\"AbstractQueuedSynchronizer 抽象队列同步器，为建锁和同步器提供了一些通用功能的是实现，能简单且高效地构造出应用广泛的大量的同步器\",\"核心思想\",\"如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是基于 CLH 锁实现的。\",\"CLH 锁是对自旋锁的一种改进，是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系），暂时获取不到锁的线程将被加入到该队列中。AQS 将每条请求共享资源的线程封装成一个 CLH 队列锁的一个结点（Node）来实现锁的分配。在 CLH 队列锁中，一个节点表示一个线程，它保存着线程的引用（thread）、 当前节点在队列中的状态（waitStatus）、前驱节点（prev）、后继节点（next）。\",\"实现\",\"AQS 使用 int 成员变量 state 表示同步状态，通过内置的 线程等待队列 来完成获取资源线程的排队工作。\",\"两种资源共享方式：Exclusive 独占、Share 共享。\",\"基于AQS的同步工具类：Semaphore, CountDownLatch, CyclicBarrier...\"]},\"1517\":{\"h\":\"ReentrantLock 原理\",\"t\":[\"ReentrantLock 属于乐观锁类型，默认非公平的，多线程并发情况下。能保证共享数据安全性，线程间有序性。它通过原子操作和阻塞实现锁机制，一般使用 lock 获取锁，unlock 释放锁。\",\"ReentrantLock 的可重入功能基于 AQS 的同步状态 state 实现的。当某一线程获取锁后，将 state 值+1，并记录下当前持有锁的线程，再有线程来获取锁时，判断这个线程与持有锁的线程是否是同一个线程，如果是，将 state 值再 +1，如果不是，阻塞线程。\"]},\"1518\":{\"h\":\"公平锁和非公平锁的实现\",\"t\":[\"公平锁和非公平锁是两种不同的锁的实现方式，它们的区别在于是否保证等待锁的线程按照先来后到的顺序获取锁。公平锁会让线程进入一个队列中排队等待，每次只有队首的线程能够获取锁，这样可以避免线程饥饿，但是会增加线程切换的开销。非公平锁则不考虑等待顺序，每个线程都有机会抢占锁，这样可以提高响应速度，但是可能导致某些线程长时间得不到锁。\",\"以基于 AQS 的 ReentrantLock 为例，如果是公平锁，会先判断队列中是否有其他等待的节点，如果有，则直接加入到队尾；如果没有，则尝试修改state变量的值。非公平锁则不管队列中是否有其他等待的节点，直接尝试修改 state 变量的值，如果成功，则获取到了锁；如果失败，则再判断队列中是否有其他等待的节点，如果有，则加入到队尾；如果没有，则再次尝试修改state变量的值。\"]},\"1519\":{\"h\":\"JVM\"},\"1520\":{\"h\":\"内存区域\",\"t\":[\"线程私有：\",\"程序计数器： \",\"当前线程所执行的字节码的行号指示器，各线程私有互不影响，不会 OOM\",\"虚拟机栈： \",\"由一个个栈帧组成，栈帧包括局部变量表、操作数栈、动态链接、返回地址等信息\",\"入栈、出栈对应方法的调用和结束（正常/异常）\",\"若栈内存不允许动态扩展，栈深超过最大深度 -> StackOverFlow\",\"若栈内存允许动态扩展，无法申请足够栈空间 -> OOM\",\"本地方法栈： \",\"和虚拟机栈基本类似，用于 Native 方法\",\"HotSpot 虚拟机中和 Java 虚拟机栈合二为一\",\"线程共享：\",\"堆： \",\"JVM 最大的一块内存，用于存放几乎所有的对象实例（栈上分配、标量替换等技术除外）\",\"由GC管理，分新生代、老年代、永久代（元空间取代）\",\"堆空间不足 -> OOM\",\"方法区: \",\"存储已被虚拟机加载的类信息、常量、静态变量、代码缓存等数据\",\"JDK 8 以前用永久代实现方法区，容易 OOM\",\"JDK 8 后使用元空间实现方法区，使用直接内存，能加载更多类，不容易 OOM\"]},\"1521\":{\"h\":\"对象创建\",\"t\":[\"创建过程：\",\"类加载检查 \",\"遇到new指令时，先检查对应的类是否已经加载、解析和初始化，如果没有先执行类加载过程\",\"分配内存 \",\"从堆中分配内存\",\"分配方式：规整的碰撞指针法 或 不规整的空闲列表法（取决于GC算法）\",\"并发问题：CAS+失败重试 或 TLAB预先分配的缓冲内存\",\"初始化零值\",\"设置对象头 \",\"Mark Word：HashCode、GC分代年龄、锁状态、偏向标记等\",\"kClass Pointer：指向类元数据的指针\",\"执行对象的<init>方法（父类<init> -> 实例域语句 -> 构造方法）\",\"对象内存布局：\",\"对象头 \",\"Mark Word：HashCode、GC分代年龄、锁状态、偏向标记等\",\"kClass Pointer：指向类元数据的指针\",\"实例数据：对象真正存储的有效信息\",\"对齐填充：8Byte对齐\",\"对象访问定位：栈帧的局部变量表中的reference引用 --> 堆中对象实例 和 方法区中对象类型\",\"句柄：堆中划分句柄池，记录对象实例指针和对象类型指针。优点是稳定，对象移动时只要改变句柄\",\"直接指针：直接指向堆中对象实例。优点是速度快，节省一次指针定位。\"]},\"1522\":{\"h\":\"对象存活判断\",\"t\":[\"判断方法\",\"引用计数法：计数器加减。无法解决循环依赖问题\",\"可达性分析：GC Roots 引用链分析，如果一个对象到 GC Roots 没有任何引用链相连，即不可达对象，可以被回收。GC Roots 通常包括： \",\"虚拟机栈/本地方法栈 中引用的对象。\",\"方法区中类静态属性引用的对象。\",\"方法区中常量引用的对象。\",\"引用类型\",\"强引用Strongly Reference：任何情况下都不回收此对象，甚至抛出OOM\",\"软引用Soft Reference：可有可无，内存足够就不回收，内存溢出前才回收\",\"弱引用Weak Reference：弱于软引用，GC扫描到就立即回收\",\"虚引用Phantom Reference：也叫幻影引用，任何时候都可能被回收，主要用于跟踪对象被垃圾回收的活动\"]},\"1523\":{\"h\":\"GC 算法\",\"t\":[\"标记-清除算法 Mark-Sweep \",\"过程：标记出需要回收的对象，然后统一回收\",\"缺点：执行效率随对象数量增长而降低、内存碎片化\",\"标记-复制算法 Mark-Copy \",\"将内存划为大小相等的两块，每次使用其中一块。当一块内存用完，将存活对象复制到另一块上面，然后把已使用的内存块一次性清理掉\",\"缺点：将可用内存缩小为原来的一半\",\"改进：Appel式回收，划分为一块较大的Eden空间和两块较小的Survivor空间，每次分配只用Eden和其中一块Survivor\",\"标记-整理算法 Mark-Compact \",\"先标记出需要回收的对象，然后让所有存活对象移向内存空间的一端，最后直接清理掉边界以外的内存\",\"缺点：移动时必须 STW\",\"新生代：一般使用 标记-复制 算法，因为每次 GC 都会有大量对象死亡，只要复制少量对象即可完成。老年代：一般使用 标记-清除、标记-整理 算法，因为其中的对象存活几率较高，而且没有额外空间分配担保\"]},\"1524\":{\"h\":\"GC 分类\",\"t\":[\"JVM 的堆内存分为新生代、老年代，分别对应 Young GC、Full GC。划分不同的内存空间是为了优化 GC 性能，新生代的复制算法能够快速回收掉生命周期短暂的对象，而老年代的垃圾回收则更加谨慎，因为它包含了较长时间存活的对象。这种分代的设计提高了垃圾回收的效率，提供了更好的性能和响应时间。\",\"Young GC\",\"新生代是用于存储新创建的对象的区域。在新生代中，大部分对象都是朝生夕灭的，也就是说，它们很快就会变得不可达并被回收。因此 Young GC 非常频繁，回收速度也比较快。当 Eden 区空间不足或 Survivor 区空间不足时，就会触发 Young GC，将 Eden 区和 Survivor 区中存活的对象复制到另一个 Survivor 区，然后清空 Eden 区和原 Survivor 区。\",\"频繁 Young GC 可能的原因：\",\"Eden/Survivor 区空间不足，触发 Young GC\",\"对象过多，导致 Eden/Survivor 区满了，触发 Full GC，间接触发 Young GC\",\"优化：\",\"增加 JVM 内存\",\"调整 JVM 参数\",\"减少对象创建、对象引用、对象大小\",\"晋升老年代\",\"老年代用于存储较长时间存活的对象。当对象在新生代经过多次(15次)垃圾回收仍然存活时，它们会被晋升到老年代。此外还有一些特殊情况：\",\"对象的大小大于 Eden 的二分之一会直接分配在 old 区\",\"Young GC 后，Survivor 仍然放不下则放到老年代\",\"动态年龄判断，大于等于某个年龄的对象超过了 Survivor 空间一半 ，大于等于某个年龄的对象直接进入老年代\",\"Full GC\",\"指对整个堆内存进行垃圾回收，包括新生代和老年代。Full GC 的过程是：首先会执行一次 Young GC，然后对整个堆进行垃圾回收。Full GC 会暂停整个应用程序，通常开销较大，频率较低。\",\"触发 Full GC 的时机：\",\"System.gc()方法的调用，不一定立即回收\",\"老年代空间不足\",\"永久代/元空间不足\",\"Minor GC 前，会检查老年代是否有足够的连续空间，如果当前老年代最大可用连续空间小于平均历次晋升到老年代大小，则触发 Full GC。（排查是不是频繁创建大对象）\",\"Minor GC 后，新生代 Survivor 空间不足，需要放入老年代，而老年代空间也不足，则触发Full GC\"]},\"1525\":{\"h\":\"GC 实现\",\"t\":[\"垃圾收集算法是内存回收的方法论，而垃圾收集器就是垃圾收集算法的具体实现。\",\"GC分类:\",\"部分收集 Partial GC\",\"新生代收集 Minor GC\",\"老年代收集 Major GC\",\"混合收集 Mixed GC\",\"整堆收集 Full GC\",\"Serial\",\"用于新生代，单线程，基于标记-复制算法\",\"简单高效，但GC时必须STW\",\"Serial Old\",\"用于老年代，单线程，基于标记-整理算法\",\"Serial的老年代版本，可以作为 CMS 的后备方案\",\"ParNew\",\"用于新生代，多线程，基于标记-复制算法\",\"Serial的多线程版本，GC时必须STW\",\"Parallel Scavenge\",\"用于新生代，多线程，基于标记-复制算法\",\"类似ParNew，区别在于目标是达到一个可控的吞吐量, 因此提供了很多参数调节和自适应调节策略\",\"Parallel Old\",\"用于老年代，多线程，基于标记-整理算法\",\"Parallel Scavenge的老年代版本，注重吞吐量和CPU资源\",\"CMS (Concurrent Mark-Sweep)\",\"用于老年代，多线程，基于标记-清除算法\",\"四个步骤： \",\"初始标记：标记GC Roots能直接关联的对象。\",\"并发标记：遍历对象图。与用户线程并发。\",\"重新标记：修正并发标记阶段产生的标记变动(因用户线程的并发执行)。STW。\",\"并发清除：清理标记死亡的对象。与用户线程并发\",\"优点：并发收集，低停顿。仅重新标记阶段需要STW\",\"缺点：对CPU资源敏感，无法处理\\\"浮动垃圾\\\"， 存在大量内存碎片\",\"CMS 尽可能减小应用程序的停顿时间，适合要求低延迟的场景。\",\"G1\",\"面向局部收集的设计思路和基于Region内存布局\",\"Region： \",\"连续的Java堆划分为多个大小相等的独立Region，每个Region根据需要扮演Eden/Survivor/老年代\",\"Humongous区域专门存储大对象\",\"G1跟踪各个Region里面的垃圾堆积的\\\"价值\\\"大小。价值即回收所获得的空间大小以及回收所需时间的经验值，后台维护一个优先级列表。\",\"四个步骤： \",\"初始标记：标记GC Roots能直接关联的对象，并修改TAMS指针以便正确分配对象。暂停用户线程。\",\"并发标记：遍历对象图。与用户线程并发。(用SATB原始快照处理引用变化)\",\"最终标记：处理并发阶段结束后遗留的少量SATB记录。暂停用户线程。\",\"筛选回收：更新Region的统计数据，根据优先级选择Region回收集，移动存活对象并清理旧Region的全部空间。暂停用户线程。\",\"目的：延迟可控的情况下，获得尽可能高的吞吐量。\",\"特点：并发、独立GC分代收集、空间整合、可预测停顿\",\"G1 适合大内存的应用，能够获得更高的吞吐量。\"]},\"1526\":{\"h\":\"类文件结构\",\"t\":[\"魔数、Class文件版本号、常量池、访问标志、当前类、父类、接口的索引集合、字段表集合、方法表集合、属性表集合 十大块。\"]},\"1527\":{\"h\":\"类加载过程\",\"t\":[\"加载（Loading）： 类的加载阶段是指将类的字节码数据从文件或其他途径读取到内存中，并且在内存中创建一个代表该类的java.lang.Class对象。类加载器负责完成加载阶段的工作。加载条件：仅当有类主动去使用该Class。包括new、反射、克隆、反序列化、调用类静态方法、调用其子类、main方法等等。\",\"链接（Linking）： 链接阶段包括三个子阶段：验证（Verification）、准备（Preparation）、解析（Resolution）。\",\"验证： 确保被加载的类的正确性，包括文件格式的验证、元数据的验证、字节码的验证、符号引用的验证。\",\"准备： 在方法区中为类的静态变量分配内存，并将其初始化为默认值。\",\"解析： 将常量池内的符号引用替换为直接引用，得到类/接口/字段/方法在内存中的指针或偏移量\",\"初始化（Initialization）： 调用类对象的<clinit>()方法，对类变量赋值。<clinit>是编译器自动收集类中所有类变量的赋值动作和静态代码块（static{}块）中的语句合并产生的。当初始化一个类时，其父类尚未初始化，则需要先触发其父类的初始化。虚拟机会保证一个类的初始化过程是线程安全的。\",\"使用\",\"卸载：该类的 Class对象 被GC，要求：\",\"该类的所有的实例对象都已被 GC，也就是说堆不存在该类的实例对象。\",\"该类没有在其他任何地方被引用\",\"该类的类加载器的实例已被 GC（所以JDK自带类加载器加载的类不会被回收）\"]},\"1528\":{\"h\":\"类加载器\",\"t\":[\"内置类加载器：\",\"BoostrapClassLoader 启动类加载器：C++实现的顶层加载器，负责加载java/base下的核心系统类\",\"ExtentionClassLoader 扩展类加载器：负责加载扩展目录下的jar包和类。JDK 9 移除。\",\"PlatformClassLoader 模块加载器：JDK9引入取代Ext，负责加载非核心模块类\",\"AppClassLoader 应用程序类加载器：负责加载用户应用classpath下的所有jar包和类\",\"双亲委派模型：\",\"除 BootstrapClassLoader 外，每个类加载器都有对应的父类加载器。如果父类加载器为 null，默认就是 BootstrapClassLoader（自定义加载器继承ClassLoader）\",\"任意一个 ClassLoader 在尝试加载一个类的时候，都会先自底向上尝试调用父类的loadClass()方法去加载类，如果父类不能加载该类，再自顶向下交由子类去完成。\",\"好处：避免类的重复加载，限制使用者对JVM系统的影响。保证了Java程序的稳定运行\"]},\"1529\":{\"h\":\"内存排查工具\",\"t\":[\"JMeter 压测\",\"添加线程组 -> 查看结果树和汇总报告 -> 分析异常比例、吞吐量、响应时间等。\",\"JConsole\",\"Java 监视和管理控制台，根据 PID 连接查看进程信息，可以查看虚拟机内存使用情况，包括堆空间、Eden、Survivor等，包括 Young GC、Old GC 时间，以及线程数量等信息\",\"jmapjstack 查看堆栈信息，以及排查死锁问题jhsdb jmap --heap --pid 20536 查看进程使用的GC算法、堆配置信息和各内存区域内存使用信息jstat -gc -h3 31736 1000 10 查看 GC 情况，各个空间的使用量jmap -dump:format=b,file=dump.hprof 20536 生成堆转储快照 heap profile -> VisualVM/JProfile 查看内存占用情况 -> 定位大对象 -> 定位代码中创建的位置 -> 排查 BUG\"]},\"1530\":{\"h\":\"其它\"},\"1531\":{\"h\":\"反射机制\",\"t\":[\"反射可以在运行时分析类以及执行类中方法，通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。例如 Spring、MyBatis 等框架大量使用反射机制，动态代理的实现也依赖于反射。\",\"反射可以让代码更加灵活，为各种框架开箱即用提供便利；但也增加了安全问题，比如无视泛型参数的安全检查，性能也会稍差一点。\",\"获取Class对象的四种方法：\",\"Target.class\",\"Class.forName(...)\",\"instance.getClass()\",\"ClassLoader::loadClass(...)\"]},\"1532\":{\"h\":\"代理模式\",\"t\":[\"代理模式是一种使用代理对象来代替对真实对象访问的设计模式，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。\",\"静态代理\",\"对目标对象每个方法的增强都手动完成。（创建接口，实现类和代理类，将目标对象注入进代理类，在代理类的对应方法调用目标类中的对应方法并做增强）\",\"JVM层面上，静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\",\"缺点：不灵活且麻烦\",\"动态代理\",\"JVM 层面上，动态代理是在运行时动态生成类字节码，并加载到 JVM 中。更加灵活。\",\"JDK 动态代理： \",\"Proxy.newProxyInstance(ClassLoader, Class[], InvocationHandler) 获得某个类的代理对象\",\"当动态代理对象调用一个方法时，这个方法的调用就会被转发到实现 InvocationHandler 接口类的 invoke(ProxyObject, Method, args) 方法来调用\",\"缺点：只能代理实现了接口的类\",\"CGLIB 动态代理 \",\"一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。通过继承方式实现代理。\",\"例如 Spring 的 AOP 模块，如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\",\"Enhancer 类用于动态获取被代理类\",\"自定义 MethodInterceptor::intercept(Object, method, args, proxy) 实现增强。当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\",\"JDK 动态代理基于接口实现，只能代理实现了接口的类，而 CGLIB 基于继承，可以代理任何类。\"]},\"1533\":{\"h\":\"异常机制\",\"t\":[\"异常分类\",\"Throwable 是所有异常和错误的超类 \",\"Error 错误：一般是与 JVM 相关的问题，如系统崩溃，内存空间不足，方法调用栈溢出等。Error 一般会导致程序中断，并且无法恢复和预防。例如 OutOfMemoryError, StackOverFlowError\",\"Exception 异常：程序运行中可以预料的意外情况，并且应该被捕获进行处理，使程序恢复运行 \",\"RuntimeException 运行时异常：都是非检查异常，例如 NullPointerException, ArrayIndexOutOfBounds, IllegalArgument...\",\"非运行时异常：都是检查异常/编译时异常，例如 IOException, NoSuchMethodException\",\"检查异常在编译前需要手动处理，要么在方法上通过 throws 抛出，由调用该方法的方法处理异常，要么 try-catch 捕获异常自己处理。检查异常会在方法调用链上显式传递，因此推荐使用非检查异常。\",\"finally 块原理\",\"字节码层面上，会把 finally 语句复制到 try 和 catch 块的末尾。\",\"如果 finally 块有 return 语句，那么 try/catch 块中的 return 都会失效。\",\"如果 finally 块没有 return 语句，那么无论在 finally 块中是否修改返回值，返回值都不会改变，仍然是执行 finally 代码块之前的值。\",\"try-with-resources 语法糖经过编译后转换为 try-catch-finally 语句\"]},\"1534\":{\"h\":\"static 关键字\",\"t\":[\"static 关键字可以修饰 类、方法、变量和代码块。\",\"修饰类：被 static 修饰的类称为静态内部类。静态内部类可以访问外部类的静态成员变量和方法，但不能访问外部类的非静态成员。\",\"修饰方法：被 static 修饰的方法称为静态方法。静态方法可以直接通过类名调用，不需要实例化对象。静态方法只能访问类的静态成员变量和方法，不能访问非静态成员变量和方法。\",\"修饰变量：被 static 修饰的变量称为静态变量，也称为类变量。静态变量在类加载时被初始化，并且所有对象共享同一个静态变量的值。静态变量可以通过类名直接访问，也可以通过对象名访问。\",\"修饰代码块：被 static 修饰的代码块称为静态代码块。静态代码块在类加载时被执行，只执行一次。静态代码块通常用于初始化静态成员变量。\",\"另外，子类不能覆写父类的静态方法（@Override会报错），但是可以定义相同方法将其隐藏。\"]},\"1535\":{\"h\":\"equals() 和 hashcode()\",\"t\":[\"在Java中，如果两个对象的 equals() 返回 true，则它们的 hashcode() 必须返回相同的值。\",\"因为在 Java 中，hashcode() 用于获取对象的哈希值，而哈希值用于确定对象在哈希表中的索引位置。如果索引位置上已经有元素了，会调用 equals() 判断两个对象是否相同，相同就添加失败，不相同就散列到其它位置上。\",\"如果重写了 equals(), 但没有重写 hashcode()，会导致所有对象的 hashcode 都不相同，都能添加成功，那么基于哈希的集合就会出现很多重复元素\"]},\"1536\":{\"h\":\"String 类型\",\"t\":[\"存储位置\",\"// 在方法区的常量池中，引用存储的也是常量池中的地址（常量池在编译期间就会生成） String str1 = \\\"hello\\\"; String str2 = \\\"hello\\\"; System.out.println(str1==str2); //true // 堆中，引用存储的也是堆中的地址 String str3 = new String(\\\"高大天\\\"); String str4 = new String(\\\"高大天\\\"); System.out.println(str3==str4); //false\",\"在进行字符串拼接时，如果都是静态字符串相加，结果会加入常量池；如果含有变量则不会进入常量池。String::intern() 会将该字符串对应的常量加入常量池，并返回在常量池中的地址。\",\"不可变对象\",\"String 底层是 final 修饰的 char[] 数组，因此是不可变的。好处是便于实现字符串常量池，使多线程安全，避免安全问题，以及加快字符串处理速度。StringBuilder不是线程安全的，而StringBuffer是线程安全的\"]},\"1537\":{\"h\":\"MySQL\"},\"1538\":{\"h\":\"三范式\",\"t\":[\"第一范式： 要求任何一张表必须有主键，每个字段都不可再分。\",\"第二范式： 建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，不要产生部分依赖。\",\"第三范式： 建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，不要产生传递依赖。\"]},\"1539\":{\"h\":\"SQL 注入\",\"t\":[\"所谓SQL注入，就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。\",\"尽量用预编译机制 prepareStatement，少用字符串拼接的方式传参，它是sql注入问题的根源。\",\"要对特殊字符转义，比如 % 作为 like 语句中的参数时，要对其进行转义处理\",\"对所有的异常情况进行捕获，不要在接口直接返回异常信息，因为有些异常信息中包含了sql信息，比如库名，表名，字段名等。攻击者拿着这些信息，就能通过sql注入随心所欲的攻击你的数据库了。\",\"使用sqlMap等代码检测工具，它能检测sql注入漏洞。\",\"需要对数据库sql的执行情况进行监控，有异常情况，及时邮件或短信提醒。\",\"对生产环境的数据库建立单独的账号，只分配DML相关权限，且不能访问系统表。切勿在程序中直接使用管理员账号。\",\"建立代码review机制，能找出部分隐藏的问题，提升代码质量。\",\"对于不能使用预编译传参时，要么开启druid的filter防火墙，要么自己写代码逻辑过滤掉所有可能的注入关键字。\"]},\"1540\":{\"h\":\"架构\",\"t\":[\"主要分为两层：Server 层和存储引擎层。\",\"Server 层：负责 MySQL 的所有核心服务，包括连接管理、安全认证、SQL 解析与执行、事务管理、并发控制、日志记录等。Server 层与存储引擎层之间通过 API 进行通信。\",\"存储引擎层：负责 MySQL 数据的存储和读取。MySQL 支持多种存储引擎，如 InnoDB、MyISAM、Memory、CSV 等。每个存储引擎都有其独特的数据存储和索引结构，可以根据不同的场景选择不同的存储引擎，提高数据访问效率。\",\"在架构上，MySQL 的 Server 层和存储引擎层是相互独立的，用户可以通过替换存储引擎来改变 MySQL 的数据存储方式，而不会影响 MySQL Server 层的其他功能。\"]},\"1541\":{\"h\":\"InnoDb 和 MyISAM 区别\",\"t\":[\"InnoDB 支持事务和 MVCC，MyISAM 不支持\",\"InnoDB 支持外键，MyISAM 不支持\",\"InnoDB 支持行级锁和表级锁，并且默认就是行级锁，MyISAM 只支持表级锁\",\"InnoDB 是聚集索引，数据即索引，MyISAM 只有二级索引，数据和索引是分离的\",\"InnoDB 不支持全文检索，MyISAM 支持\"]},\"1542\":{\"h\":\"MyISAM 的优势\",\"t\":[\"快速：MyISAM 存储引擎使用表级锁，因此在读写操作时不会出现死锁问题，且在读操作时不需要加锁，因此读取速度较快，适合于以读操作为主的应用场景。\",\"索引：MyISAM 存储引擎支持全文本索引和空间索引，能够满足一些特殊的查询需求。\",\"低存储空间：MyISAM 存储引擎对数据存储的方式非常紧凑，数据文件大小通常比 InnoDB 存储引擎小，因此对于存储空间有限的应用场景来说，MyISAM 更为适合。\"]},\"1543\":{\"h\":\"对比 NoSQL\",\"t\":[\"关系型数据库基于表的结构，适用于处理结构化数据；NoSQL 通常是键值对、文档、图形等数据结构，适合存储半结构化/非结构化数据\",\"MySQL 数据表需要严谨的设计；NoSQL 数据库不需要事先设计好，支持动态添加字段和修改结构，灵活性和扩展性更好\",\"MySQL 使用 SQL 语句进行查询，支持复杂的关系查询和聚合操作；NoSQL 则使用各种不同的查询语句进行查询，不支持复杂关系查询，但读取和写入效率更高\",\"使用场景需要基于应用的实际需求、数据处理量、数据类型和数据访问模式等考虑。MySQL 适合数据结构固定、需要处理事务、处理海量数据、高度关联的应用。NoSQL 适合处理非结构化数据、高扩展性和高并发、实时查询、数据分析的场景。\"]},\"1544\":{\"h\":\"索引\"},\"1545\":{\"h\":\"索引类型\",\"t\":[\"聚集索引：按表中的主键建立的索引，叶子节点存放的就是实际的行数据。（主键索引）\",\"非聚集索引：按表中的非主键建立的索引，叶子节点存放的是主键值，如果需要其他列信息需要进行回表查询。（非主键/二级索引）\"]},\"1546\":{\"h\":\"B+树 对比\",\"t\":[\"使用哈希表可以把检索单个数据的复杂度近似为O(1)，但是哈希表不支持排序和范围查找，如果是带条件的批量检索数据就得一次次 IO 去查找\",\"红黑树在大数据量的情况下，层级较深，可能导致检索速度慢的问题\",\"B 树（B- 树），一种多路平衡查找树，它的所有节点既放键，也放数据，所以一个数据页中存储的键值对比较少，因此空间利用率较低，进而导致 IO 次数增加，性能降低\",\"而 B+ 树，仅在叶子节点存放数据，非叶子节点只存放下一层的索引，因此查询效率比较稳定；在大数据量的情况下，树的高度较小，查询性能好；同时还支持排序和范围查找。\",\"注：InnoDB 的数据是按数据页为单位来读写的，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB。\"]},\"1547\":{\"h\":\"索引失效情况\",\"t\":[\"使用 SELECT * 进行查询;\",\"创建了联合索引，但查询条件没有遵循最左匹配原则;\",\"在索引列上进行计算、函数、(显式/隐式)类型转换等操作(可能破坏索引值的有序性，因此优化器直接放弃使用索引);\",\"以 % 开头的 LIKE 查询比如 like '%abc';\",\"查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;\"]},\"1548\":{\"h\":\"索引优化\",\"t\":[\"在经常用于查询的列上建立索引\",\"尽量使用覆盖索引（索引覆盖了查询需求），避免回表\",\"避免索引失效\",\"索引也不能过多，造成写入性能降低（自增的主键对写入性能影响小，而非自增主键可能引起页分裂导致写性能降低）\",\"对字符串可以使用前缀索引（如身份证这样的长字符串不适合做主键，索引空间占用过多。但要合理选择前缀的长度，可以根据区分度来选择）\",\"索引下推优化：在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数（而不是每条记录都回表再判断是否符合条件）\",\"考虑区分度：区分度指的是索引列中不同值的个数与总记录数之比，用于衡量索引列的区分度。区分度越高，索引效果越好，查询速度越快。\",\"使用缓存、分库分表、优化硬件和系统\"]},\"1549\":{\"h\":\"事务\"},\"1550\":{\"h\":\"四个特征\",\"t\":[\"原子性：事务中包含的操作要么全部执行，要么全部不执行\",\"一致性：事务执行前后，数据库的完整性没有被破坏，即满足所有的约束条件和业务规则\",\"隔离性：事务间互不干扰，一个事务的执行不受其他事务的影响，也不影响其他事务。\",\"持久性：事务一旦提交，其对数据库的修改就会永久保存，即使发生系统故障或崩溃也不会丢失\"]},\"1551\":{\"h\":\"并发问题\",\"t\":[\"脏写：一个事务修改了另一个未提交事务修改过的数据\",\"脏读：一个事务读到了另一个事务还未提交的数据\",\"不可重复读：一个事务先后读取同一条记录，期间另一个事务修改了数据，导致第一个事务两次读取的数据不一致\",\"幻读：一个事务按照某些条件查询，期间另一个事务插入了新的数据，导致第一个事务再次查询时发现多出一些记录\"]},\"1552\":{\"h\":\"隔离级别\",\"t\":[\"Read_Uncommited: 读未提交，允许读取并发事务尚未提交的数据。可能产生脏读、不可重复读、幻读等问题\",\"Read_Commited: 读已提交，允许读取并发事务已经提交的数据，可以阻止脏读\",\"Repeatable_Read: 可重复读，对同一字段的多次读取结果都一致，可以阻止脏读、不可重复读问题\",\"Serializable: 可串行化，所有事务依次执行，可以阻止所有并发问题。\",\"MySQL默认是 RR，并且通过 MVVC 机制阻止了幻读问题。\"]},\"1553\":{\"h\":\"三大日志\",\"t\":[\"一个事务的日志操作顺序：加载数据页 -> 写 Undo Log -> 写 Redo Log -> 写 Bin Log -> 提交 Redo Log\"]},\"1554\":{\"h\":\"Undo Log\",\"t\":[\"更新行记录时，首先将数据页加载到 BufferPool，然后将旧值写入 Undo Log，存储事务执行之前的数据版本。作用有二：\",\"当事务回滚或者发生其他异常时，可以利用 Undo Log 将数据恢复到事务开始之前的状态。\",\"用于 MVVC，读取记录时判断版本是否对当前事务可见，以此实现非锁定读\",\"分类：\",\"insert undo log：insert操作仅对本事务可见，因此在事务提交后可直接删除\",\"update undo log：update/delete操作，需要提供MVVC，因此分两阶段 delete_mark -> purge\"]},\"1555\":{\"h\":\"Redo Log\",\"t\":[\"执行器更新完 BufferPool 里的数据页后，写入 Redo Log 重做日志，记录事务对数据库所做的修改，保证在发生数据库故障时，可以通过重做日志将数据库恢复到事务提交后的状态。\",\"原因：数据库按页面从磁盘读取数据加载到 Buffer Pool 中，后续的操作都是对 Buffer Pool 进行，因此需要定时把 Buffer Pool 写回磁盘，但是\",\"刷新整个页面过于浪费\",\"写入磁盘是随机IO，速度慢\",\"因此，MySQL 在事务执行过程中利用 Redo Log，记录修改的具体信息，这样即使系统崩溃也能快速恢复数据，而且：\",\"占用空间小\",\"写入是顺序IO，速度快\",\"刷盘时机：每条 redo 记录由\\\"表空间号+数据页号+偏移量+修改数据长度+具体修改的数据\\\"组成。innodb_flush_log_at_trx_commit参数控制刷盘策略：\",\"0：事务提交时不立即向磁盘同步redo日志，交给后台线程\",\"1：默认值，事务提交时立即同步 (fsync)\",\"2：事务提交时将redo日志写入OS缓冲区，不保证立即刷新到磁盘。这种方式除非DB和OS都挂了，否则是能够保证持久性的\",\"日志文件组：硬盘上的Redo Log文件有多个，构成一个环形日志文件组，循环写入。日志组维护两个属性，一个 write_pos 是当前记录的位置，一个 checkpoint 是已经刷盘的位置。\"]},\"1556\":{\"h\":\"Bin Log\",\"t\":[\"执行器写完 Redo Log 后，开始写 Bin Log，最后再写 Redo Log 完成两阶段提交。binlog 是一种逻辑日志，记录数据库中所有的修改操作，用于数据备份、主从复制以及数据恢复。\",\"三种格式：\",\"statement：记录SQL原文。可能产生数据不一致，例如时间函数now()\",\"row: 默认。记录SQL原文以及操作的具体数据。占空间，而且消耗IO资源\",\"mixed：混合前两种，根据是否可能引起数据不一致采用row/statement\",\"写入时机：事务执行时，先写入 binlog cache，提交时再写入磁盘上的 binlog 文件。sync_binlog 变量控制刷盘时机：\",\"0：每次提交事务仅 write（写入系统缓存），由OS负责 fsync (写入磁盘)\",\"1：每次提交任务都 fsync\",\"N：每次提交任务仅 write，累积 N 个事务后 fsync\",\"两阶段提交：redo log 让 InnoDB 存储引擎拥有了崩溃恢复能力。binlog 保证了 MySQL 的数据持久性。因此需要确保两份日志的一致性，为此采用两阶段提交机制：\",\"将 redo log 拆分成 prepare 和 commit 两阶段，事务写入 Redo Log 后就处于 prepare 状态\",\"事务写入 binlog 后，再将 redo log 设为 commit 状态，最后提交事务\",\"事务期间如果发生异常 \",\"查询 redo log 处于 commit 则直接提交就行\",\"查询 redo log 处于 prepare，且 redo log 里面的 XID 和 bin log 里面的 XID 一致，说明两份日志逻辑一致，可以直接提交\",\"否则回滚事务\",\"如果不使用两阶段提交，无论是先写 Redo Log 再写 Bin Log 还是反过来，一旦期间发生崩溃，都会导致用日志恢复出来的数据和原库不一致。\"]},\"1557\":{\"h\":\"MVVC 机制\",\"t\":[\"MVVC 基于 Undo Log 实现了非锁定读。\",\"快照读：也叫非锁定读，读取操作不会去等待行上锁的释放，而是读取行的一个快照数据，根据版本号/时间戳判断可见性\",\"当前读：也叫锁定读，通过加锁，总是读取数据的最新版本\",\"行记录的隐藏字段\",\"row_id: 可选，没有主键/Unique字段的记录，引擎默认生成该隐藏列作为主键\",\"transaction_id: 最后一次插入或更新该行的事务 id\",\"roll_pointer: 回滚指针，指向该行的 undo log（构成的版本链）\",\"ReadView\",\"字段\",\"含义\",\"m_ids\",\"生成 ReadView 时系统中活跃的读写事务的id列表\",\"min_trx_id\",\"生成 ReadView 时系统中活跃的读写事务最小id\",\"max_trx_id\",\"生成 ReadView 时系统应分配给下一个事务的id值（最大活跃事务id+1）\",\"creator_trx_id\",\"生成该 ReadView 的事务id（仅实际增删改时才分配，只读事务id默认0）\",\"访问规则有了 ReadView 后，查询过程会顺着版本链遍历，根据ReadView的访问规则，直到找到一条可访问的版本，或不含该记录。其中，trx_id 为被访问版本的 transaction_id 属性值：\",\"条件\",\"是否可以访问\",\"说明\",\"trx_id == creator_trx_id\",\"可以访问该版本\",\"成立，说明数据是当前事务自己更改的\",\"trx_id < min_trx_id\",\"可以访问该版本\",\"成立，说明该版本在当前事务生成 ReadView 前已经提交\",\"trx_id > max_trx_id\",\"不可以访问该版本\",\"成立，说明该版本在当前事务生成 ReadView 后才开启\",\"min_trx_id <= trx_id <= max_trx_id\",\"如果trx_id在m_ids中，不可以访问；否则可以访问\",\"m_ids存在trx_id则说明该事务还是活跃的，不存在则说明该事务已提交\",\"不同隔离级别\",\"Read_Uncommited: 读取记录时直接查看最新版本，没有视图概念\",\"Read_Commited: 事务每次 SELECT 查询前都会生成独立的 ReadView，因此导致不可重复读\",\"Repeatable_Read: 事务只在第一次 SELECT 查询前生成一个 ReadView，整个事务期间共享该 ReadView，因此可以避免不可重复读的问题\",\"Seriablizable：加锁来避免并发访问\",\"RR 防止幻读\",\"对于 普通的select，RR使用 MVVC 快照读 解决幻读问题\",\"对于 select...for update/lock in share mode 等当前读，InnoDB使用临键锁对查询范围加锁以防止幻读\"]},\"1558\":{\"h\":\"锁机制\",\"t\":[\"InnoDB 支持多粒度锁，特定场景下，行级锁可以与表级锁共存。\"]},\"1559\":{\"h\":\"全局锁\",\"t\":[\"flush tables with read lock 对整个库加只读锁，常用于全库的逻辑备份。\",\"mysqldump -single-transaction 适用于支持事务的引擎的逻辑备份。\"]},\"1560\":{\"h\":\"表级锁\",\"t\":[\"表级锁对整张表上锁，实现简单粒度粗，因此并发性能差。\",\"lock tables ... read/write\",\"意向锁：一种不与行级锁冲突的表级锁，由引擎维护，无法手动操作的。分：\",\"意向共享锁 S：事务有意向对表中的某些行加共享锁\",\"意向排他锁 X：事务有意向对表中的某些行加排他锁\",\"意向锁不会与行级的共享 / 排他锁互斥。一个事务想要对一个数据行加锁时，会先获取该数据行所在表的意向锁。这样其它事务对表加排他锁时可以直接检测表的意向锁，而不用检测每一行是否有排他锁。\"]},\"1561\":{\"h\":\"行级锁\",\"t\":[\"行级锁对一个行记录上锁，粒度细，并发性能好。\",\"细分的话，行级锁分三种：\",\"记录锁，锁定单个行记录\",\"间隙锁，对索引记录的间隙上锁，确保索引记录间隙不变，防止其他事务在这个间隙插入新记录\",\"临键锁，是记录锁和间隙锁的组合，同时锁住行记录和记录前面的间隙\",\"加行锁时，实行两阶段协议：需要时上锁，事务结束 commit 时才释放。因此，一般要把容易产生锁冲突、影响并发度的加锁语句放在后面。默认情况下，InnoDB在查询时使用临键锁来保证数据的一致性和避免幻读问题，不同隔离级别使用的锁不一样。\"]},\"1562\":{\"h\":\"加锁语句\",\"t\":[\"-- 快照读，不加锁 select ... -- 对满足查询条件的行加上行级写锁 select ... for update -- 加共享读锁 SELECT ... LOCK IN SHARE MODE select ... for share -- 加表锁 LOCK TABLES UNLOCK TABLES\"]},\"1563\":{\"h\":\"主从同步\",\"t\":[\"主从同步指多个从服务器实时将主服务器上的数据同步到从服务器上，以实现数据备份、负载均衡、容灾等功能。\",\"主服务器将更改记录到二进制日志（binlog）中，记录所有更改数据的日志。\",\"从服务器通过 change master 设置主库的 IP、端口、用户名、密码、日志文件位置等\",\"从服务器执行 start slave 命令，启动两个线程，一个 I/O 线程，一个 SQL 线程 \",\"IO 线程请求主库的 binlog，写入自己的 Relay Log 中继日志中。而主库会生成 Log Dump 线程负责给从库 IO 线程传输 BinLog\",\"SQL 线程读取 Relay Log，并解析成具体的操作，实现主从操作的一致性，最终数据保持一致\",\"show master status; 查看 Master 状态\",\"show slave status 查看 Slave 状态\",\"主从复制原理\",\"主库将数据库中数据的变化写入到 binlog\",\"从库连接主库\",\"从库创建一个 I/O 线程向主库请求更新的 binlog\",\"主库创建一个 binlog dump 线程来发送 binlog ，从库中的 I/O 线程负责接收\",\"从库的 I/O 线程将接收的 binlog 写入到 relay log 中\",\"从库的 SQL 线程读取 relay log 同步数据本地（也就是再执行一遍 SQL ）。\",\"但是由于主从同步延迟，可能导致数据不一致的问题，解决方案：\",\"强制将读请求路由到主库处理：例如 Sharding-JDBC，实现简单但会增加主库压力\",\"延迟读取\",\"读写分离\",\"读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上，可以小幅提升写性能，大幅提升读性能。\",\"通过多台数据库服务器，配置主从复制，然后写请求发给 Master，读请求发给 Slaves。具体实现方法：\",\"代理方式：例如 MyCat，MySQL Router等\",\"组件方式：Sharding-JDBC\"]},\"1564\":{\"h\":\"分库分表\",\"t\":[\"分库是将数据库中的数据分散到不同的数据库上，包括：\",\"垂直分库：把单一数据库按照业务进行划分，不同的业务使用不同的数据库，进而将一个数据库的压力分担到多个数据库\",\"水平分库：把同一张表按一定规则拆分到不同的数据库中，每个库可以位于不同服务器上，实现水平扩展，解决了单表的存储和性能瓶颈的问题。\",\"分表是对单表的数据进行拆分，包括：\",\"垂直分表：对数据表列的拆分，把一张列比较多的表拆分为多张表\",\"水平分表：对数据表行的拆分，把一张行比较多的表拆分为多张表，可以解决单一表数据量过大的问题\",\"建议使用 ShardingSphere 实现分库分表。\",\"分片算法：解决数据被水平分片之后，数据该存放在哪个表的问题。\",\"哈希分片：适合随机读写，不适合经常需要范围查询的场景\",\"范围分片：按照特性的范围区间分配数据。适合需要经常进行范围查找的场景，不利于随机读写\",\"地理位置分片\",\"融合算法\",\"带来的问题：\",\"join 操作无法使用，需要手动封装数据\",\"事务问题\",\"分布式 ID\"]},\"1565\":{\"h\":\"SQL 语句\"},\"1566\":{\"h\":\"执行过程\",\"t\":[\"语法解析：数据库会首先对 SQL 语句进行语法解析，确定查询的语义和执行的操作，如果语法不正确，会直接返回错误信息。\",\"查询优化：数据库会对 SQL 语句进行查询优化，包括表选择、连接方式、索引使用等等，以找到最优的查询执行计划。\",\"编译执行计划：优化器找到最优的执行计划后，会将该执行计划编译成可执行的机器码。\",\"执行查询：数据库引擎开始执行编译后的机器码，按照执行计划从存储引擎中获取数据，并进行筛选、排序、聚合等操作，最终生成结果集。\",\"返回结果：执行完毕后，数据库将结果集返回给客户端应用程序。\",\"优化：创建索引、数据分区、避免全表扫描、合理使用缓存\"]},\"1567\":{\"h\":\"语法语句\",\"t\":[\"执行顺序：from -> where -> group by -> having -> select -> order by -> limit (MySQL 中 group by / having 可以使用 select 指定的别名)\",\" -- 表清空，并重置自增计数器. truncate ta_name; -- 仅重置自增计数器 ALTER TABLE tb_name auto_increment=1; -- count(*) 会统计所有非 null 个数，包括 0 -- sum(if(exp, 1, 0)) 可以排除 0 值求和 -- case 条件语句 select CASE when age < 25 then '25岁以下' when age >= 25 then '25岁及以上' END as age_cnt, count(*) number from ... -- if 条件语句 select if(1 < 2, 1, 0) ... -- 日期格式化 select date_format(date, \\\"%Y-%m\\\") from ... select year(date)/month(date) from ... -- 日期增加函数 SELECT DATE_ADD(orderDate, INTERVAL 2 DAY) from ... -- 日期差，以 MINUTE/SECOND/HOUR 等返回 select TIMESTAMPDIFF(MINUTE, start_time, end_time) ... -- 取后面一行的 timestamp 列 select lead(timestamp, 1, null) over ( -- 按 trace_id 水平分片 parition by trace_id order by timestamp ) as toTime from ...; -- 截取子串, start 从 1 开始 select substr(str, start, len) from ... -- 将字符串 str 按 , 分割，选取第n个前的字符 select substring_index(str, \\\",\\\", 1) from ... -- 删除 str 中 前后/前导/尾随 的 \\\"xxx\\\" select trim( {BOTH/LEADING/TRAILING} \\\"xxx\\\" from str) from ... select concat(s1, s2, ...) from xxx; select upper(s)/lower(s) from xxx; -- 组内拼接字符串 select group_concat(distinct concat_ws(':', date(start_time), tag) SEPARATOR ';') as detail -- 窗口函数，用于对数据实时分析处理，即本行以及之前的行进行计算 -- 如 rank(), dense_rank(), row_number() 以及 聚合函数 -- group by 分组后每个类别聚合成一行，而窗口函数不会减少行数 select <窗口函数> over (partition by <分组列> order by <排序列>) from ... -- 索引 CREATE [UNIQUE | FULLTEXT] INDEX index_name on tb_name(col1, col2); ALTER TABLE <表名> ADD [UNIQUE | FULLTEXT] [INDEX] index_content(content); DROP INDEX <索引名> ON <表名> ALTER TABLE <表名> DROP INDEX <索引名> -- 重新统计索引信息 analyze table t; -- 重建表，使得索引紧凑，节约存储空间 alter table t engine = InnoDB; optimize table t; -- 强制使用索引 a select * from t force index(a) where ...\"]},\"1568\":{\"h\":\"count 效率\",\"t\":[\"count(字段) < count(主键id) < count(1) ≈ count(*)\",\"InnoDB 计数时需要先获取所需字段，然后判断是否可能为空，如果不可能为空计数器直接+1，否则还要取出字段判断是否为空再修改计数器，影响性能。因此应尽量使用 count(*)。\"]},\"1569\":{\"h\":\"Redis\"},\"1570\":{\"h\":\"数据结构\",\"t\":[\"5 种基本数据结构： \",\"String 字符串：基于 SDS 简单动态字符串的结构，记录了当前长度，修改时可以根据字符串长度动态扩展\",\"List 列表：基于双向链表的实现\",\"Hash 散列：基于压缩列表或哈希字典，是一个 String 类型键值对的映射表\",\"Set 集合：基于压缩列表或整数集合实现的无序集合，其中的的元素没有先后顺序但都唯一，底层用哈希表实现\",\"Zset 有序集合：基于压缩列表或跳表，相比于 Set，Zset 增加了一个分数 score，使得集合中元素可以按分值进行有序排列\",\"3 种特殊数据结构： \",\"HyperLogLogs 基数统计\",\"Bitmap 位存储：连续的二进制位，每个bit表示某个元素的对应值或状态\",\"Geospatial 地理位置\"]},\"1571\":{\"h\":\"速度快的原因\",\"t\":[\"内存存储：In-Memory 存储，没有磁盘 IO 开销\",\"单线程模型：使用单个线程处理请求，避免了多个线程之间切换和锁资源的开销\",\"非阻塞IO：Redis 使用基于 epoll 多路复用技术，提高了网络 IO 的性能\",\"优化的数据结构\",\"底层模型：Redis 自己构建了 VM 虚拟内存机制（冷热数据分离）\",\"另外，Redis 的事务模型主要关注原子性和隔离性，而不提供传统数据库的一致性（在一个 MULTI/EXEC 事务块中发生错误可能产生不一致）和持久性（依赖持久化机制）。\"]},\"1572\":{\"h\":\"线程模型\",\"t\":[\"Redis 服务器是基于 Reactor 模式的单线程事件驱动程序，处理文件事件和时间事件。\",\"时间事件：定时/周期性操作，目前是只有serverCron一个时间函数\",\"文件事件：Redis 通过 IO 多路复用程序 来监听多个socket，每当一个socket准备好执行连接应答、写入、读取、关闭等操作时，就会产生一个文件事件。然后文件事件分派器会接收I/O多路复用程序传来的套接字，并根据套接字产生的事件的类型调用相应的事件处理器，也就是与不同任务的套接字关联的一个个函数。\",\"Redis 6 引入了多线程模型，但是仅用于网络数据的读写这类耗时操作上，来提高网络IO的读写性能，执行命令仍然是单线程顺序执行。\"]},\"1573\":{\"h\":\"过期删除策略\",\"t\":[\"惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。\",\"定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。\",\"定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性删除 结合的方式，在一定时间内分多次遍历服务器中的各个数据库，从expires字典中随机检查一部分键的过期时间，并删除过期键。\"]},\"1574\":{\"h\":\"缓存淘汰机制\",\"t\":[\"volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\",\"volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\",\"volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\",\"allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）\",\"allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\",\"no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\",\"4.0 版本后增加以下两种：\",\"volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰\",\"allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key\"]},\"1575\":{\"h\":\"持久化机制\"},\"1576\":{\"h\":\"RDB - 快照\",\"t\":[\"将某一时刻的内存数据，以二进制的方式写入磁盘。可以将快照复制到其他服务器从而创建具有相同数据的服务器副本，也可以将快照留在原地以便重启服务器的时候使用。\",\"两种命令：\",\"save 命令：主线程执行，会阻塞主线程；\",\"bgsave : 子线程执行，不会阻塞主线程，默认选项。\",\"RDB 默认的保存文件为 dump.rdb，优点是以二进制存储的，因此占用的空间更小、数据存储更紧凑，与 AOF 相比，RDB 具备更快的重启恢复能力。但是有数据丢失的风险。\"]},\"1577\":{\"h\":\"AOF - 仅追加文件\",\"t\":[\"指将所有的操作命令，以文本的形式追加到文件中。appendfsync 决定何时写入磁盘，appendfsync 选项值：\",\"always：每次有数据修改发生时都会写入AOF文件。效率最慢，安全性最高\",\"everysec：默认，每秒钟同步一次，显式地将多个写命令同步到硬盘。效率适中\",\"no：由 OS 决定何时进行同步。效率最高安全性最差\",\"AOF重写：为了避免大量写命令造成AOF文件体积过大，以及还原时间过长，需要用 BGREWRITEAOF 命令，通过读取数据库中的键值对，对AOF文件重写。在执行 BGREWRITEAOF 命令时，Redis 服务器会维护一个 AOF 重写缓冲区，该缓冲区会在子进程创建新 AOF 文件期间，记录服务器执行的所有写命令。当子进程完成创建新 AOF 文件的工作之后，服务器会将重写缓冲区中的所有内容追加到新 AOF 文件的末尾，使得新的 AOF 文件保存的数据库状态与现有的数据库状态一致。最后，服务器用新的 AOF 文件替换旧的 AOF 文件，以此来完成 AOF 文件重写操作。\",\"优点是存储频率更高，因此丢失数据的风险就越低，并且 AOF 并不是以二进制存储的，所以它的存储信息更易懂。缺点是占用空间大，重启之后的数据恢复速度比较慢。\"]},\"1578\":{\"h\":\"缓存三大问题\"},\"1579\":{\"h\":\"缓存穿透\",\"t\":[\"大量请求的 key 不合理，既不存在于缓存，也不存在于数据库 。导致这些请求直接到达数据库服务器，根本不经过缓存这一层，从而对数据库造成了巨大的压力。\",\"解决方法：\",\"接口层进行校验，如用户鉴权，id 做基础校验，id 不合法的直接拦截\",\"缓存中设置无效的 key，例如 set <key> nullObject\",\"布隆过滤器（多个 hash 函数，key 对应的 hashCode 都存在，该元素才可能存在）\"]},\"1580\":{\"h\":\"缓存击穿\",\"t\":[\"请求的 key 对应的是热点数据 ，该数据存在于数据库中，但可能由于缓存过期，不存在于缓存中。进而导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力。\",\"解决方法：\",\"针对热点数据提前预热，设置热点数据永不过期\",\"通过分布式锁，保证只有第一个请求会落到数据库上，并将数据存入缓存。后续的请求可以直接从缓存中取数据，减少数据库的压力\",\"接口限流、熔断、降级\"]},\"1581\":{\"h\":\"缓存雪崩\",\"t\":[\"缓存在同一时间大面积的失效，或缓存服务器宕机，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。\",\"解决方法：\",\"搭建高可用的 Redis 集群，避免单点故障（主从、哨兵、集群）\",\"设置不同的失效时间，防止同一时间大量 key 失效。例如随机设置过期时间。\"]},\"1582\":{\"h\":\"分布式锁\",\"t\":[\"原理：基于 Redis（单线程）的原子操作 set <key> <random_value> NX EX 30，仅当 key 不存在时才会设置成功，否则返回 nil。\",\"优化：\",\"防止解锁失败（掉线/宕机）造成程序死锁，key 必须设置过期时间。且和加锁应是原子的\",\"为了防止锁过期后解锁操作误删了其它线程加的锁，因此可以给 value 设为该线程唯一的 UUID，解锁时先获取锁的值，和自己的 UUID 相等才删除。\",\"为了防止网络请求的延迟，造成误删其它线程加的锁，获取 value 进行对比和 删除 key 必须是原子的，可以使用 Lua 脚本实现。\",\"为了防止业务还未完成锁已经过期释放了，需要对锁进行自动续期，或直接设置一个很长的过期时间，例如业务中可以设 300s\"]},\"1583\":{\"h\":\"缓存一致性问题\",\"t\":[\"指缓存与数据库的一致性问题，一般不要求强一致性，都是追求最终一致性。\"]},\"1584\":{\"h\":\"更新数据库 -> 删除缓存\",\"t\":[\"并发时可能有暂时的脏数据\",\"解决方法： \",\"重试机制，例如配合 MQ/Canal\",\"加分布式锁，原子地更新数据库和缓存。但是存在缓存资源浪费、性能降低的问题\"]},\"1585\":{\"h\":\"删除缓存 -> 更新数据库\",\"t\":[\"并发时依然有不一致的问题（A删除缓存，B查缓存不存在取数据库，然后又把旧数据存入缓存）\",\"解决方法：延迟双删，即删除缓存后更新数据库，然后等一段时间再删除缓存。但延迟时间很难评估\"]},\"1586\":{\"h\":\"设计思路\",\"t\":[\"缓存数据不应该是实时性、一致性要求超高的，所以缓存 + 过期时间，足够解决大部分业务对于缓存的要求\",\"性能和一致性不能同时满足，为了性能考虑，通常会采用「最终一致性」的方案\",\"遇到实时性、一致性要求高的数据，即使速度慢点，也应该查数据库\",\"我们不应该过度设计，增加系统的复杂性\"]},\"1587\":{\"h\":\"高可用模式\"},\"1588\":{\"h\":\"主从复制\",\"t\":[\"将一个 Redis 实例作为主节点，多个 Redis 实例作为从节点，主节点将自己的数据同步到从节点。（数据的完整副本）\",\"从节点可以提供读取服务，实现读写分离。\",\"当主节点宕机时，可以在从节点中选举出一个新的主节点来保证服务的可用性。\",\"优点是部署简单，并且由于保存了数据的完整副本，因此降低了数据丢失的风险。\",\"缺点是主节点宕机后，需要人工介入手动恢复，造成服务的不可用\"]},\"1589\":{\"h\":\"哨兵模式\",\"t\":[\"Sentinel 是一个专门用于监控 Redis 实例的工具，通过 PING 自动检测 Redis 实例的状态，自动进行故障转移，选举新的主节点，保证服务的可用性。\",\"优点是实现了自动故障转移，无需人工干预\",\"缺点是在发生故障转移时可能会出现数据丢失的情况。\"]},\"1590\":{\"h\":\"集群模式\",\"t\":[\"将数据分散到多个节点上进行存储和管理，降低系统对单主节点的依赖，并且大大提高 Redis 服务的读写性能\",\"除了主从和哨兵的功能外，集群模式下不同的 key 放到不同的 Redis 中，每个 Redis 实例负责一部分的槽，可以实现数据分片。\",\"优点是可以水平扩展，提高了并发读写的能力\",\"缺点是配置较为复杂。\"]},\"1591\":{\"h\":\"Spring\"},\"1592\":{\"h\":\"IoC\"},\"1593\":{\"h\":\"IoC 理解\",\"t\":[\"IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理，由 Spring 容器（本质上就是个Map）完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。\"]},\"1594\":{\"h\":\"声明 Bean\",\"t\":[\"@Component：通用的注解，可标注任意类为 Spring 组件。通过类路径扫描来自动侦测以及自动装配到 Spring 容器中\",\"@Repository: 对应持久层，主要用于数据库相关操作。\",\"@Service: 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。\",\"@Controller: 对应控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面\",\"@Bean: 作用于方法上，表示方法返回的实例装配到Spring容器中。常用于第三方库的类装配\",\"@Configuration：声明配置类\",\"框架启动时，Spring 通过扫描各种注解，把需要交给 Spring 管理的 Bean 初始化为 BeanDefinition 的列表，进而创建 Bean 的实例。\"]},\"1595\":{\"h\":\"注入 Bean\",\"t\":[\"@Autowired: Spring 内置注解 \",\"默认 byType，根据接口类型去匹配注入接口实现类\",\"当一个接口存在多个实现类，转为 byName，即变量名和类名匹配\",\"建议@Qualifier(value = \\\"serviceImpl1\\\")显式指定名称\",\"@Resource：JDK 提供的注解 \",\"默认 byName，否则 byType\",\"建议通过 name 属性显式指定名称\",\"@Inject 基本不用\"]},\"1596\":{\"h\":\"Bean 作用域\",\"t\":[\"singleton：默认，容器中只有唯一实例。\",\"prototype: 每次获取都会创建一个新实例。\",\"request(Web)：每一次 HTTP 请求都会产生一个新实例，且仅在当前 HTTP 请求内有效。\",\"session(Web)：每一次来自新 session 的 HTTP 请求都会产生一个新实例，且仅在当前 session 内有效。\",\"application/global-session(Web)：每个 Web 应用在启动时创建一个实例，且仅在当前应用启动时间内有效。\",\"websocket(Web)：每一次 WebSocket 会话产生一个新实例\"]},\"1597\":{\"h\":\"Bean 生命周期\",\"t\":[\"实例化：通过反射或者工厂方法创建 Bean 对象。\",\"属性注入：通过配置文件或者注解给 Bean 对象的属性赋值。\",\"初始化：调用 Bean 对象的初始化方法，比如 @PostConstruct注解的方法，或者实现了InitializingBean接口的afterPropertiesSet方法，或者配置文件中指定的init-method方法。\",\"销毁：调用 Bean 对象的销毁方法，比如@PreDestroy注解的方法，或者实现了DisposableBean接口的destroy方法，或者配置文件中指定的destroy-method方法。\",\"其它扩展点：BeanPostProcessor, BeanFactoryPostProcessor, InstantiationAwareBeanPostProcessor, SmartInstantiationAwareBeanPostProcessor...\"]},\"1598\":{\"h\":\"自动装配\",\"t\":[\"Spring 的自动装配通过注解或者一些简单的配置就能在 Spring Boot 的帮助下自动导入一些Bean来实现某些功能。\",\"整个SpringBoot项目的启动类都是添加@SpringBootApplication注解的，这个注解主要包括三个子注解: \",\"@SpringBootConfiguration 表示当前是个配置类\",\"@ComponentScan 包扫描(并且可以排除一些包/类)\",\"@EnableAutoConfiguration 自动装配的关键注解\",\"@EnableAutoConfiguration 分两部分： \",\"@AutoConfigurationPackage 里面是 @Import 注解导入了一个 Registrar 类，负责扫描主启动类包及其子包的组件并加载到 Spring 容器中\",\"另一个 @Import 导入了 AutoConfigurationImportSelector 类，这个类实现了 ImportSelector 接口，实现了 selectImports 方法，用于获取所有符合条件的类的全限定类名，并加载到容器中\",\"selectImports 方法首先会判断是否开启了自动装配，如果开启的话继续。\",\"接着调用 SpringFactoriesLoader::loadMetaData 扫描所有依赖项目的 META-INF 目录下的 spring.factories 文件里，定义的 Key 为 EnableAutoConfiguration 的类的全类名，也就是所有需要装配的 Bean\",\"然后调用 getAutoConfigurationEntry 来加载这些 Bean，具体的： \",\"判断自动装配是否开启\",\"获取 EnableAutoConfiguration 注解中的 exclude 和 excludeName 做一个过滤并且去重，然后返回一个需要加载的 Bean 的结果集\",\"然后根据 Bean 上添加的 Conditional 条件注解再做一次过滤\",\"最后就可以把这些剩下的 Bean 装入容器了\"]},\"1599\":{\"h\":\"解决循环依赖\",\"t\":[\"循环依赖就是循环引用，指两个或多个bean互相持有对方，形成一个闭环。分：\",\"构造器循环依赖：无法解决\",\"Setter 循环依赖： \",\"对于 Singleton 的 Bean，可以提前暴露一个单例工厂方法，使得其它Bean能够引用到（去掉本身的 @Bean）\",\"对于 Prototype 的 Bean，无法解决。spring容器不缓存prototype作用域的bean，因此无法提前暴露一个正在创建中的bean。\",\"原理\",\"Spring 通过三级缓存解决循环依赖：\",\"一级缓存：单例池，限制 bean 在 beanFactory 中仅存一份private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);\",\"二级缓存：早期曝光对象private final Map<String, Object> earlySingletonObjects = new HashMap<>(16);\",\"三级缓存：早期曝光对象工厂private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16);\",\"当 A、B 两个类发生循环引用时，在 A 完成实例化后，就使用实例化后的对象去创建一个对象工厂，并添加到三级缓存中，如果 A 被 AOP 代理，那么通过这个工厂获取到的就是A代理后的对象，如果 A 没有被 AOP 代理，那么这个工厂获取到的就是 A 实例化的对象。当 A 进行属性注入时，会去创建 B，同时 B 又依赖了 A，所以创建 B 的同时又会去调用getBean(a) 来获取需要的依赖，此时的 getBean(a) 会从缓存中获取。\",\"首先从一级缓存中获取，但 A 没有填充和初始化完成，因此不存在一级缓存中；接着去二级缓存获取，也不存在；最后去三级缓存获取，可以获取到。\",\"第二步，调用对象工厂的getObject方法来获取到对应的对象，得到这个对象后将其注入到B中。\",\"紧接着B会走完它的生命周期流程，包括初始化、后置处理器等。当B创建完后，会将B再注入到A中，此时A再完成它的整个生命周期。至此，循环依赖结束！\",\"为什么不用二级缓存？\",\"如果要使用二级缓存解决循环依赖，意味着所有Bean在实例化后就要完成AOP代理，这样违背了Spring设计的原则，Spring在设计之初就是通过AnnotationAwareAspectJAutoProxyCreator这个后置处理器来在Bean生命周期的最后一步来完成AOP代理，而不是在实例化后就立马进行AOP代理。\"]},\"1600\":{\"h\":\"AOP\"},\"1601\":{\"h\":\"AOP 理解\",\"t\":[\"Spring AOP 就是基于动态代理(如果实现了接口使用基于实现的JDK Proxy，否则使用基于继承的CGLib代理)，能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，有利于未来的可拓展性和可维护性。\"]},\"1602\":{\"h\":\"通知类型\",\"t\":[\"Around::before -> Before -> target::proceed -> Around::after -> AfterReturning / AfterThrowing -> After\"]},\"1603\":{\"h\":\"MVC\"},\"1604\":{\"h\":\"MVC 理解\",\"t\":[\"MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。\",\"Spring MVC 下我们一般把后端项目分为：\",\"Entity层：实体类\",\"Dao层：操作数据库\",\"Service层：处理业务\",\"Controller层：返回数据给前台页面\"]},\"1605\":{\"h\":\"核心组件和原理\",\"t\":[\"DispatcherServlet：核心的中央处理器，负责接收请求、分发，并给予客户端响应。\",\"HandlerMapping：处理器映射器，根据 uri 去匹配查找能处理的 Handler ，并会将请求涉及到的拦截器和 Handler 一起封装。\",\"HandlerAdapter：处理器适配器，根据 HandlerMapping 找到的 Handler ，适配执行对应的 Handler；\",\"Handler：请求处理器，处理实际请求的处理器。\",\"ViewResolver：视图解析器，根据 Handler 返回的逻辑视图/视图，解析并渲染真正的视图，传递给 DispatcherServlet 响应客户端\"]},\"1606\":{\"h\":\"其它\"},\"1607\":{\"h\":\"Spring 启动流程\",\"t\":[\"首先从main找到run()方法，在执行run()方法之前new一个SpringApplication对象\",\"进入run()方法，创建应用监听器SpringApplicationRunListeners开始监听\",\"然后加载SpringBoot配置环境(ConfigurableEnvironment)，然后把配置环境(Environment)加入监听对象中\",\"然后加载应用上下文(ConfigurableApplicationContext)，当做run方法的返回对象\",\"最后创建Spring容器，refreshContext(context)，实现starter自动化配置和bean的实例化等工作。\"]},\"1608\":{\"h\":\"常用注解\",\"t\":[\"@SpringBootApplication: 启动类，是@SpringBootConfiguration, @EnalbeAutoConfiguration, @ComponentScan三个注解的集合\",\"@Autowired：自动装配，被注入的类要被Spring容器管理\",\"@Compoent, @Repository, @Service, @Controller：声明 Bean\",\"@RestController: @Controller + @ResponseBody 的集合，REST风格的控制器，将函数的返回值直接写入HTTP响应体\",\"@Scope 声明作用域\",\"@Configuration 声明配置类\",\"@GetMapping 获取资源，@PostMapping 创建新资源，@PutMapping 更新资源，@DeleteMapping 删除资源\",\"@PathVariable 获取路径参数，@RequestParam 获取查询参数，@RequestBody 获取请求体参数并自动绑定到Java对象（利用HttpMessageConverter，且一个请求方法中仅能有一个）\",\"@Value(\\\"${...}\\\") 读取简单配置信息，[@ConfigurationProperties(prefix ](/ConfigurationProperties(prefix ) = \\\"...\\\") 读取配置并绑定到 Bean， @PropertySource(\\\"xxx\\\") 读取指定配置文件\",\"参数校验：@Validate 加在Controller上开启校验，具体规则有 @NotEmpty, @NotBlank, @Pattern, @Max, @Size... (加在 Entity 实体类的属性上)\",\"全局异常：@ControllerAdvice 定义全局异常处理类，@ExceptionHandler 声明异常处理方法\",\"JPA 相关：@Entity 实体类，@Table 表名， @Id 声明主键，@GeneratedValue 主键生成策略， @Column 声明字段， @Transient 声明不持久化字段（或用static/final修饰），@Lob 大字段，@Enumerated 枚举类型字段，@@EnableJpaAuditing 开启JPA审计，@Transactional 开启事务\",\"Json数据处理：@JsonIgnoreProperties 过滤特定字段不返回/不解析，@JsonFormat 格式化Json数据，@JsonUnwrapped 扁平化对象\",\"测试相关：@ActiveProfiles 声明生效的Spring配置文件，@Test 测试方法，@WithMockUser 模拟真实用户和权限\"]},\"1609\":{\"h\":\"SpringBoot 优势\",\"t\":[\"SpringBoot 依靠大量注解实现自动化配置，只需要添加相应的场景依赖，就可以快速构建出一个独立的 Spring 应用\",\"通过自动 starter 依赖，简化了构建配置\",\"内嵌服务器使得应用程序可以直接运行，不需要单独部署\",\"SpringBoot 整合了大量第三方功能，并提供了默认配置，例如 mybatis、redis等，实现开箱即用\",\"SpringBoot 提供了一些用于生产环境运行时的特性，例如指标、监控检查和外部化配置。\"]},\"1610\":{\"h\":\"SpringBoot 缺点\",\"t\":[\"缺少灵活性，有时需要在项目中扩展一些功能就需要手动配置\",\"集成度较高，使用过程中不太容易了解底层；\",\"难以适应较为复杂的场景，一旦项目变得复杂，就需要考虑功能的划分和更加细致的配置\"]},\"1611\":{\"h\":\"事务传播行为\",\"t\":[\"Spring 管理事务有两种方式：编程式（手动硬编码）、声明式（基于@Transactional的AOP）\",\"Propagation_Required: @Transactional 默认模式，如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\",\"Propagation_Requires_New: 总是创建新事务，如果当前存在事务则挂起。开启的事务相互独立，互不干扰\",\"Propagation_Nested: 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；否则新建事务\",\"Propagation_Mandatory: 如果当前存在事务就加入；否则抛出异常\",\"另外还有三种可能不回滚的事务：\",\"Propagation_Supports: 如果当前存在事务就加入；否则以非事务的方式继续运行\",\"Propagation_Not_Supported: 以非事务方式运行，如果当前存在事务则把当前事务挂起\",\"Propagation_Never: 以非事务方式运行，如果当前存在事务则抛出异常\"]},\"1612\":{\"h\":\"事务隔离级别\",\"t\":[\"Isolation_Default: 使用后端数据库默认的隔离级别，例如 MySQL 默认 REPEATABLE_READ\",\"Isolation_Read_Uncommited: 最低级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读\",\"Isolation_Read_Commited: 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生\",\"Isolation_Repeatable_Read: 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\",\"Isolation_Serializable: 最高级别，完全服从 ACID，所有事务依次执行，可以防止脏读、不可重复读、幻读等问题，当严重影响性能。\"]},\"1613\":{\"h\":\"Spring Cache\",\"t\":[\"Spring 支持多种缓存的实现方式，例如 SimpleCache(ConcurrentMap实现), RedisCache, EhCache, CaffeineCache... 有两个核心接口：\",\"org.springframework.cache.Cache：用于定义缓存的各种操作\",\"org.springframework.cache.CacheManager：用于管理各个cache缓存组件\",\"原理\",\"缓存的自动配置类 CacheAutoConfiguration 向容器中导入了 CacheConfigurationImportSelector\",\"CacheConfigurationImportSelector 的 selectImports() 导入所有缓存类型的配置类，默认启用 SimpleCacheConfiguration\",\"SimpleCacheConfiguration 配置类向容器中注入了一个 ConcurrentMapCacheManager 实例\",\"ConcurrentMapCacheManager 底层创建一个 ConcurrentMapCache 管理缓存\",\"缓存注解\",\"@EnableCaching：用于 SpringBoot 的启动类开启注解功能\",\"@CacheConfig：用于对类进行配置，对整个类的缓存进行配置，可用 @Cacheable 取代\",\"@Cacheable：通常用于配置方法，将方法的返回结果注入到缓存对象中 \",\"value/cacheNames: 指定缓存名（跟在 key-prefix 后面）\",\"key/keyGenerator：指定缓存对应的 key 值，默认使用方法参数生成，可以使用 spel 指定\",\"condition/unless: 条件缓存\",\"sync：默认 false，为 true 时开启同步锁\",\"@CacheEvict：可用于类或方法，用于清空缓存 \",\"allEntries: true 表示删除域名下所有缓存\",\"@CachePut：强制执行方法并将返回结果放入缓存，常用于更新 DB 的方法 \",\"属性同 @Cacheable \",\"@Caching: @Cacheable + @CachePut + @CacheEvict \",\"缺陷\",\"读缓存： \",\"缓存穿透：spring.cache.redis.cache-null-values 指定是否缓存空数据\",\"缓存击穿：默认是无加锁的，可以置 Cacheable 的 sync 为 true\",\"缓存雪崩：可以设置随机时间\",\"写缓存： \",\"读写加锁\",\"引入 Canal\",\"读多写多的场景，可以直接查 DB\",\"总结：\",\"常规数据（读多写少，即时性，一致性要求不高的数据，完全可以使用 Spring-Cache\",\"写模式(只要缓存的数据有过期时间就足够了)\",\"特殊数据进行特殊设计\"]},\"1614\":{\"h\":\"Spring 单例并发问题\",\"t\":[\"Spring 中的 Bean 默认都是单例的，Spring也没有对 Bean 有线程安全的控制策略，并发安全问题由开发决定。单例 Bean 的并发安全取决于 Bean 是有状态还是无状态，即是否有数据存储功能，例如 User 里面存储了用户数据。因此不应把有状态的 Bean 定义成单例 Bean。要么使用 prototype 作用域，要么使用本地变量 ThreadLocal。\"]},\"1615\":{\"h\":\"JPA 取消持久化\",\"t\":[\"static String transient1; // not persistent because of static final String transient2 = \\\"Satish\\\"; // not persistent because of final transient String transient3; // not persistent because of transient @Transient String transient4; // not persistent because of @Transient\"]},\"1616\":{\"h\":\"分布式\"},\"1617\":{\"h\":\"概念\",\"t\":[\"分布式：把整个系统拆分成不同的服务，部署在不同的服务器/集群上减轻单体服务的压力，提高并发量和性能，提高开发效率，便于维护和扩展。\",\"注册中心：负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互。\",\"监控中心：负责统计各服务调用次数，调用时间等。\",\"负载均衡：改善跨多个计算资源的工作负载分布，来优化资源使用，最大化吞吐量，最小化响应时间，并避免任何单个资源的过载。\"]},\"1618\":{\"h\":\"CAP 和 BASE\",\"t\":[\"CAP 理论\",\"对于一个分布式系统，在满足 P 的前提下，只能满足 AP（如ZooKeeper）或 CP（Eureka）：\",\"Consistency: 一致性，所有节点访问同一份最新的数据副本\",\"Availability：可用性，非故障的节点在合理的时间内返回合理的响应\",\"Partition Tolerance：分区容错性，出现网络分区时仍能对外提供服务\",\"原因：若系统出现分区，系统中的某个节点在进行写操作。为了保证 C 一致性， 必须要禁止其他节点的读写操作，这就和 A 可用性发生冲突了。如果为了保证 A 可用性，其他节点的读写操作正常的话，那就和 C 一致性发生冲突了。如果不需要保证 P，即网络分区正常，那么 C 一致性和 A 可用性可以同时保证。\",\"BASE 理论\",\"BASE 理论核心思想是：即使无法做到强一致性，也应采用适当的方式来使系统达到最终一致性。\",\"Basically-Available: 基本可用，系统在出现不可预知故障的时候，允许损失部分可用性（响应时间上的损失/系统功能上的损失）\",\"Soft-state：软状态，允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性（允许不同节点的副本同步过程存在延迟）\",\"Eventually-Consistent：最终一致性，系统中所有的数据副本经过一段时间的同步后，最终达到一致。\",\"BASE 理论是对 CAP 中一致性 C 和可用性 A 权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求。\"]},\"1619\":{\"h\":\"Paxos\",\"t\":[\"共识算法：通过保持复制日志的一致性，即使面对故障，服务器也可以在共享状态上达成一致。\",\"Paxos 算法是第一个被证明完备的分布式系统共识算法。共识算法的作用是让分布式系统中的多个节点之间对某个提案（Proposal）达成一致的看法。例如哪个节点是 Leader、多个事件发生的顺序等。\",\"Paxos 主要包含两个部分：\",\"1. Basic Paxos\",\"多节点间如何就某个值（提案）达成共识\",\"Proposer：也称 Coordinator，负责接受客户端的请求并发起提案（提案编号、提议值）\",\"Acceptor：也称 Voter，负责对提议者的提案进行投票，同时需要记住自己的投票历史\",\"Learner：如果有超过半数接受者就某个提议达成了共识，那么学习者就需要接受这个提议，并就该提议作出运算，然后将运算结果返回给客户端。\",\"2. Multi Paxos\",\"一种思想，通过执行多个 Basic Paxos，就一系列值达成共识。\",\"针对存在恶意节点的情况（拜占庭问题），一般使用 PoW 工作量证明、PoS 权益证明 等公式算法。\"]},\"1620\":{\"h\":\"Raft\",\"t\":[\"节点类型\",\"一个 Raft 集群包括若干服务器，任何时间点，任意服务器一定会处于以下三个状态中的一个：\",\"Leader: 负责发起心跳，响应客户端，创建日志，同步日志\",\"Candidate: Leader 选举过程中的临时角色，由 Follower 转化而来，发起投票参与竞选\",\"Follower: 接受 Leader 的心跳和日志同步数据，投票给 Candidate\",\"在正常的情况下，只有一个服务器是 Leader，剩下的服务器是 Follower。Follower 是被动的，不会发送任何请求，只是响应来自 Leader 和 Candidate 的请求。\",\"选举\",\"任期：Raft 算法将时间划分为任意长度的任期（Redis 中的选举轮次），用连续的数字表示。每个任期都以一次选举开始。\",\"Raft 使用心跳机制来触发 Leader 的选举。\",\"Leader 通过心跳保持 Leader 状态\",\"Follower 通过心跳保持为 Follower 状态，并确认 Leader\",\"如果 Follower 在一个周期内没收到心跳，将开始一次选举 \",\"自增自己的 term 并转换为 Candidate，向其他节点请求投票\",\"如果超过半数节点投票给自己，则成为 Leader\",\"期间，如果收到其它节点声明 Leader 的心跳，且 term 号大于等于自己的 term，则退回 Follower，否则拒绝该请求并让该节点更新\",\"如果选举失败，随机一个新的超时时间，之后重新选举\",\"日志复制\",\"Entry：<term, index, cmd>的结构，每一个事件成为 entry，只有 Leader 可以创建 entry。\",\"Log：有 Entry 构成的数组，只有 Leader 才可以改变其他节点的 log。\",\"Leader 收到客户端请求后，会生成一个 entry，添加到自己的日志末尾，并广播给其它服务器，如果收到超过半数的成功响应，标记这个 entry 是 committed 的。Leader 通过强制 Follower 复制自己的日志来处理日志的不一致。\"]},\"1621\":{\"h\":\"API 网关\",\"t\":[\"主要功能：请求转发、请求过滤基于这两个功能，继而实现 安全认证、流量控制、日志、监控...\",\"常见网关：Netflix Zuul, Spring Cloud Gateway, Kong, APISIX, Shenyu...\"]},\"1622\":{\"h\":\"分布式 ID\",\"t\":[\"在分布式系统中，不同的数据节点要为数据生成全局唯一主键，也即分布式ID，需要满足：\",\"全局唯一\",\"高性能\",\"高可用\",\"方便易用\",\"除此之外，还应保证安全、有序递增、有具体业务含义、独立部署\",\"常见解决方案\",\"数据库主键自增：实现简单，但很多缺点\",\"数据库号段模式：批量获取 ID，存入内存，需要时取用。\",\"NoSQL：例如利用 Redis Cluster实现 id 原子递增\",\"UUID 算法：基于 MAC 地址、时间戳、命名空间、随机数等信息生成唯一 ID。但占用存储空间过大，且无序，影响DB性能\",\"Snowflake 算法：雪花算法，灵活有序。但如果机器时间不正确可能产生重复ID。\",\"开源方案例如 百度的 UidGenerator，美团的 Leaf，滴滴的 Tinyid\"]},\"1623\":{\"h\":\"RPC\",\"t\":[\"RPC，Remote Procedure Call 远程过程调用，通过网络编程实现不同服务器上的方法调用。\",\"核心功能的实现由以下五个部分实现：\",\"客户端（服务消费端）：调用远程方法的一端\",\"客户端 Stub（桩）： 本质上是代理类，把调用的类、方法、参数等信息传递到服务端（序列化/反序列化 + 接收/发送）\",\"网络传输： 将调用信息传输到服务端，服务端执行完后通过网络把结果再传输回来。实现方式比如最基本的 Socket、性能以及封装更优秀的 Netty\",\"服务端 Stub（桩）：指接收到客户端执行请求后，调用处理器然后返回结果给客户端的类（序列化/反序列化 + 接收/发送）\",\"服务端（服务提供端）：提供远程方法的一端\",\"HTTP 和 RPC\",\"纯裸 TCP 是能收发数据，但它是个无边界的数据流，上层需要定义消息格式用于定义消息边界。于是就有了各种协议，HTTP 和各类 RPC 协议就是在 TCP 之上定义的应用层协议。RPC本质上是一种调用方式，具体的实现 gRPC/Thrift 才是协议，目的是希望程序员能像调用本地方法那样去调用远端的服务方法。RPC也不一定非得基于TCP。\",\"区别：\",\"服务发现：RPC一般有专门的中间服务保存服务名和IP信息（HTTP当然也能实现）\",\"底层连接形式：RPC使用连接池\",\"传输内容：HTTP报文非常冗余，而RPC定制化程度高，性能也更好。是内部网络使用RPC的主要原因\",\"当然HTTP/2通过压缩做了很多改进，甚至优于RPC，但由于历史原因，RPC仍在使用。\"]},\"1624\":{\"h\":\"消息队列\"},\"1625\":{\"h\":\"基本概念\",\"t\":[\"中间件：一类提供系统软件和应用软件之间连接、便于软件各部件之间的沟通的软件，应用软件可以借助中间件在不同的技术架构之间共享信息与资源。\",\"消息队列：存放消息的容器，FIFO 按序消费。参与消息传递的双方称为 生产者 和 消费者，生产者负责发送消息，消费者负责处理消息。\",\"优点\",\"异步处理，提高系统性能，减少响应时间\",\"削峰/限流\",\"降低系统耦合性\",\"缺点\",\"系统可用性降低：例如消息丢失，MQ宕机等问题\",\"系统复杂性提高：需要保证无重复消费、消息丢失、消息传递顺序性等问题\",\"一致性问题：消费者没有正确消费消息的情况\",\"JMSJava Message Service Java消息服务的一套 API 规范。例如 ActiveMQ\",\"消息格式：StreamMessage, MapMessage, TextMessage, ObjectMessage, BytesMessage\",\"消息模型：P2P 点对点、PubSub 订阅模型\",\"AMQPAdvanced Message Queuing Protocol 高级消息队列协议，应用层面向消息的中间件开发标准协议，支持跨平台、跨语言，兼容 JMS。例如 RabbitMQ\",\"仅支持 byte[] 消息类型\",\"基于 Exchange 提供的路由算法，提供多种消息模型，例如 direct exchange, fanout exchange, topic change, headers exchange, system exchange\",\"常见 MQ\",\"Kafka、RocketMQ、RabbitMQ、Pulsar\"]},\"1626\":{\"h\":\"Kafka\",\"t\":[\"Kafka 是一个分布式流式处理平台，用作消息队列和数据处理。有三个关键功能：\",\"消息队列：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。\",\"容错的持久方式存储记录消息流： Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险。\",\"流式处理平台： 在消息发布的时候进行处理，Kafka 提供了一个完整的流式处理类库。\",\"优点：极致的性能、生态兼容性\",\"消息模型\",\"队列模型\",\"PubSub 发布订阅模型：使用 Topic 作为消息通信载体，广播给订阅者\",\"概念模型\",\"Consumer\",\"Producer\",\"Broker：代理，一个独立的 Kafka 实例，多个 Broker 组成 Cluster\",\"Topic：主题，Producer 发送消息到特定主题，Consumer 订阅特定主题的消息\",\"Partition: Topic 的一部分。一个 Topic 可以有多个 Partition ，并且同一 Topic 下的 Partition 可以分布在不同的 Broker 上，这也就表明一个 Topic 可以横跨多个 Broker\"]},\"1627\":{\"h\":\"RabbitMQ\"},\"1628\":{\"h\":\"概念\",\"t\":[\"RabbitMQ 是使用 Erlang 语言实现的 AMQP 消息中间件，整体上是一个生产者与消费者模型，主要负责接收、存储和转发消息。\",\"消息\",\"消息头：一系列可选属性，也叫标签。例如 routing-key 路由键, priority 优先权，delivery-mode 持久性存储...\",\"消息体：payload\",\"Exchange 交换机\",\"RabbitMQ 中消息必须先经过 Exchange，再根据路由规则分配到对应的 Queue。如果路由不到，可能返回给 Producer 或直接丢弃。\",\"RabbitMQ 通过 Binding 将 Exchange 和 Queue 绑定关联，并指定一个 BindingKey 作为路由规则。Producer 发送消息时需要指定 RoutingKey，与 BindingKey 匹配时就会路由到对应的消息队列中。多个队列绑定到同一个 Exchange 可以使用相同的 BindingKey，具体路由还依赖于交换器类型。\",\"分四种类型：\",\"direct：把消息路由到那些 Bindingkey 与 RoutingKey 完全匹配的 Queue 中。常用于处理有优先级的任务\",\"fanout：把发送到该 Exchange 的消息路由到所有与它绑定的 Queue 中，不需要任何判断，因此速度最快\",\"topic：将消息路由到 BindingKey 和 RoutingKey 相匹配的队列中，例如 * 匹配一个单词，# 匹配零/多个单词\",\"headers：路由规则不依赖于路由键的匹配规则，而是根据发送的消息内容中的 headers 属性进行匹配，完全匹配才会路由\",\"因此，RabbitMQ 工作模式有 简单模式、work 工作模式、PubSub 模式、Routing 路由模式、Topic 主题模式\",\"Queue 消息队列\",\"Queue 用来保存消息，直到发送给消费者，一个消息可以投入一个或多个队列。\",\"多个消费者可以订阅同一个队列，这时队列中的消息会被平均分摊（Round-Robin，即轮询）给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理，这样避免消息被重复消费。\",\"Broker 服务节点\",\"一个 RabbitMQ 实例可以看作一个 Broker。\"]},\"1629\":{\"h\":\"常见问题\",\"t\":[\"死信队列Dead-Letter-Exchange 私信交换机/死信队列，当消息在一个队列中变成死信(dead message)之后，它能重新被发送到另一个交换器中，这个交换器就是 DLX，绑定 DLX 的队列就称之为死信队列。\",\"导致死信的原因：\",\"消息被拒（Basic.Reject/Basic.Nack）且 requeue = false\",\"消息 TTL 过期\",\"队列满了无法添加\",\"延迟队列RabbitMQ 本身不支持延迟队列，但又两种实现方式：\",\"利用死信交换机和消息的存活时间 TTL 模拟延迟\",\"插件 rabbitmq-delayed-message-exchange\",\"优先级队列\",\"可以通过 x-max-priority 参数实现优先级队列。不过，当消费速度大于生产速度且 Broker 没有堆积的情况下，优先级显得没有意义。\",\"消息传输\",\"RabbitMQ 使用信道 Channel 来传输数据，信道是建立在 TCP 连接上的虚拟连接，一条 TCP 连接上可以有上千条信道复用，每条信道都有唯一ID，并且对应一个线程使用。\",\"保证消息可靠性\",\"Producer 到 RabbitMQ：事务机制 或 Confirm 机制\",\"RabbitMQ 中：持久化、集群、普通模式、镜像模式\",\"RabbitMQ 到 Consumer：basicAck 机制、死信队列、消息补偿机制\",\"保证消息顺序性\",\"拆分多个 Queue，每个 Queue 一个消费者\",\"Consumer 内部用队列排队，分发给底层不同的 worker 处理\",\"保证高可用RabbitMQ 基于主从做高可用，有三种模式：\",\"单机模式：生产环境不用\",\"普通集群：多台机器启动多个 RabbitMQ 实例，创建的 Queue 只放在一个实例上，实例之间同步 Queue 的元数据，以找到 Queue 所在的实例\",\"镜像集群：创建 Queue 存在于多个实例上，每次写消息到 Quee 都会同步到所有实例。缺点就是性能开销大，网络压力重\"]},\"1630\":{\"h\":\"开发工具\"},\"1631\":{\"h\":\"Linux\",\"t\":[\"# 显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等 top -p <进程号> -u <用户名> ps -ef # 向进程发送信号，例如 -9 SIGKILL kill -9 pid # 启动/停止/重启/重新加载配置 一个Unit服务 systemctl start | stop | restart | reload free # 可用内存和已使用情况 vmstat # 虚拟内存统计 df # 文件系统磁盘空间占用 iostat # IO 统计 ifstat # 统计网络接口流量状态 # 递归修改文件权限 chmod -R 777 dir # 查看网络配合和收发数据包的统计信息 ifconfig/ip # 查看 socket、网络协议栈、网口、路由表信息 ss/netstat # 查看当前网络的吞吐率和 PPS sar # secure copy 远程安全拷贝 scp local_file remote_username@remote_ip:remote_file # 统计行数 wc -l file # 日志处理 (awk 处理文本 -> 排序 -> 去重统计 -> 统计结果逆序 -> top 3) awk '{print substr($4, 2, 11)}' access.log | sort | uniq -c | sort -rn | head -n 3 # 以 6 个线程，3 万个连接，持续 60s 对目标进行压测 wrk -t 6 -c 30000 -d 60s http://xxx:8080\"]},\"1632\":{\"h\":\"Maven\",\"t\":[\"作用\",\"项目构建：提供标准的、跨平台的自动化项目构建方式。\",\"依赖管理：方便快捷的管理项目依赖的资源（jar 包），避免资源间的版本冲突问题。\",\"统一开发结构：提供标准的、统一的项目结构。\",\"坐标\",\"groupId：项目隶属的组织或公司\",\"artifactId：项目的名称\",\"version\",\"其它可选：packaging（jar/war/...）、classifier\",\"依赖范围三套不同的classpath：\",\"编译 classpath ：编译主代码有效\",\"测试 classpath ：编译、运行测试代码有效\",\"运行 classpath ：项目运行时有效\",\"不同的依赖范围：\",\"compile：默认，对编译、测试、运行都有效\",\"provided：对编译、测试有效，如Servlet\",\"test：仅用于测试，如JUnit\",\"runtime：仅用于运行，如JDBC Driver\",\"system：必须通过systemPath指定，不依赖Maven\",\"依赖冲突遵循 路径最短优先 -> 声明顺序优先 两大原则。\",\"<exception> 手动排除依赖\",\"Maven 仓库除了本地仓库，远程仓库分三类：\",\"中央仓库：Maven 社区维护\",\"私服：设在局域网内的仓库服务\",\"其它公共仓库：用于加速访问，或部分构件不存在于中央仓库\",\"依赖查找顺序：本地仓库 -> 远程仓库 -> 报错\",\"生命周期\",\"default\",\"clean\",\"site\",\"每个生命周期里包含多个阶段，阶段间前后依赖，当执行某个阶段的时候，会先执行它前面的阶段。\",\"多模块管理\",\"降低代码之间的耦合性（从类级别的耦合提升到 jar 包级别的耦合）\",\"减少重复，提升复用性\",\"每个模块都可以是自解释的（通过模块名或者模块文档）\",\"模块还规范了代码边界的划分，开发者很容易通过模块确定自己所负责的内容\"]},\"1633\":{\"h\":\"Git\",\"t\":[\"Git 不同与其它版本控制记录文件修改的增量，而是直接保存修改文件的快照。\",\"文件三种状态\",\"已提交（committed）：数据已经安全的保存在本地数据库中。\",\"已修改（modified）：已修改表示修改了文件，但还没保存到数据库中。\",\"已暂存（staged）：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。\",\"由此引出三个工作区：工作目录、暂存区、Git 仓库\",\"常用命令\",\"# 添加远程地址 git remote add origin <server> # 贮藏修改到栈上 git stash # 应用贮藏的修改 git stash apply\",\"merge 和 rebase 区别\",\"merge 合并分支会新增一个merge commit，然后将两个分支的历史联系起来。对现有分支不会以任何方式被更改，但是会导致历史记录相对复杂\",\"rebase 找到两个分支最近的共同祖先，将整个分支移动到另一个分支上，修改各自的冲突，整合所有分支上的提交。好处是历史记录更加清晰，是在原有提交的基础上将差异内容反映进去，消除了 git merge所需的不必要的合并提交\"]},\"1634\":{\"h\":\"Docker\",\"t\":[\"优势Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\",\"一致的运行环境，能够更轻松地迁移\",\"对进程进行封装隔离，容器与容器之间互不影响，更高效地利用系统资源\",\"可以通过镜像复制多个一致的容器\",\"重要概念\",\"镜像：一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数\",\"容器：镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等，每个容器相互隔离\",\"仓库：集中存放镜像文件的地方\",\"容器\",\"容器镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。\",\"容器化软件适用于不同OS的应用，在任何环境中都能够始终如一地运行。\",\"容器赋予了软件独立性，使其免受外在环境差异的影响\",\"对比虚拟机\",\"容器是一个应用层抽象，用于将代码和依赖资源打包在一起。多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行。容器占用空间少，启动快\",\"虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。\",\"常用命令\",\"docker version # 查看docker版本 docker images # 查看所有已下载镜像，等价于：docker image ls 命令 docker container ls # 查看所有容器 docker ps #查看正在运行的容器 docker image prune # 清理临时的、没有被使用的镜像文件。-a, --all: 删除所有没有用的镜像，而不仅仅是临时文件； docker search mysql # 查看mysql相关镜像 docker pull mysql:5.7 # 拉取mysql镜像 docker image ls # 查看所有已下载镜像 docker rmi xxx # 删除镜像 docker rm xxx # 删除容器 docker start xxx docker restart xxx docker stop xxx docker kill xxx docker udpate --restart=always xxx # 设置容器自启动 docker logs -ft xxx # 实时显示日志，并打印时间戳 docker top xxx # 容器内运行了哪些进程 docker exec -it xxx bash # 与容器交互 docker cp file xxx:dir # 将文件从宿主机拷贝到容器指定位置，反之也可以 docker inspect xxx # 查看容器/数据卷细节 docker run -v volume:dir # 将volume/宿主机目录 映射到 容器内的dir docker commit -m \\\"描述信息\\\" -a \\\"镜像作者\\\" tomcat01 my_tomcat:1.0 # 打包镜像 docker save my_tomcat:1.0 -o my-tomcat-1.0.tar # 备份镜像 docker load -i my-tomcat-1.0.tar # 加载本地镜像\"]},\"1635\":{\"h\":\"系统设计\"},\"1636\":{\"h\":\"熔断降级\",\"t\":[\"熔断\",\"A 服务调用 B 服务的某个功能，由于网络不稳定问题，或者 B 服务卡机，导致功能时间超长。如果这样子的次数太多。我们就可以直接将 B 断路了（A 不再请求 B 接口），凡是调用 B 的直接返回降级数据，不必等待 B 的超长执行。 这样 B 的故障问题，就不会级联影响到 A。\",\"降级\",\"整个网站处于流量高峰期，服务器压力剧增，根据当前业务情况及流量，对一些服务和页面进行有策略的降级（停止服务，所有的调用直接返回降级数据）。以此缓解服务器资源的的压力，以保证核心业务的正常运行，同时也保持了客户和大部分客户的得到正确的相应。\",\"相同点\",\"为了保证集群大部分服务的可用性和可靠性，防止崩溃，牺牲一部分服务\",\"用户最终都是体验到某个功能不可用\",\"不同点、\",\"熔断是被调用方故障，触发系统主动规则\",\"降级是基于全局考虑，手动停止一些正常服务，释放资源\"]},\"1637\":{\"h\":\"服务限流\",\"t\":[\"限流就是对请求的速率进行限制，避免瞬时的大量请求击垮软件系统。\",\"固定窗口计数器\",\"即时间窗口，规定了单位时间内处理的请求数量。\",\"例如用 counter 计数请求，超过阈值后拒绝请求，等时间到了重置\",\"这种限流算法无法保证限流速率，因而无法保证突然激增的流量。例如一分钟内的前55s没有请求，后1s突然有1000个请求，系统直接被击垮\",\"滑动窗口计数器\",\"在固定窗口计数器基础上，把时间以一定比例分片，对窗口内请求数计数。\",\"分片越细，窗口滚动越平滑，限流也就越精确\",\"漏桶算法\",\"类似漏桶漏水，任意速率流入，固定速率流出\",\"可以使用队列保存请求，定期从队列中取出请求执行\",\"令牌桶算法\",\"以一定速率网桶里添加令牌，桶满就不再添加\",\"请求在处理前需要拿到一个令牌，处理完毕后将令牌丢弃\"]},\"1638\":{\"h\":\"高可用\",\"t\":[\"描述一个系统在大部分时间都是可用的，即使在发生硬件故障或者系统升级的时候，服务仍然是可用的。\",\"系统不可用原因\",\"黑客攻击\",\"硬件故障\",\"并发量/用户请求量激增\",\"代码中的坏味道导致内存泄漏或者其他问题，进而引发程序崩溃\",\"网站架构中的某个组件宕机\",\"自然灾害、人为破坏\",\"......\",\"提高方法\",\"集群，避免单点故障\",\"限流，避免瞬时流量高峰冲垮系统\",\"超时和重试机制\",\"熔断，系统自动收集所依赖服务的资源使用情况和性能指标，当所依赖的服务恶化或者调用失败次数达到某个阈值的时候就迅速失败，让当前系统立即切换依赖其他备用服务。\",\"异步调用，或配合消息队列\",\"缓存机制\",\"冗余设计\",\"高可用集群：同一份服务部署两份或者多份，以便故障时快速切换\",\"同城/异地灾备，备用服务不处理请求\",\"同城/异地多活，备用服务也处理请求\"]},\"1639\":{\"h\":\"性能测试\",\"t\":[\"性能测试：通过测试工具模拟用户请求系统，目的主要是为了测试系统的性能是否满足要求\",\"负载测试：对被测试的系统继续加大请求压力，直到服务器的某个资源已经达到饱和，达到系统上限\",\"压力测试：不去管系统资源的使用情况，对系统继续加大请求压力，直到服务器崩溃无法再继续提供服务\",\"稳定性测试：模拟真实场景，给系统一定压力，看看业务是否能稳定运行\"]},\"1640\":{\"h\":\"RestFul\",\"t\":[\"Resource Representational State Transfer “资源”在网络传输中以某种“表现形式”进行“状态转移”。\",\"资源：特定 URI 对应的对象数据\",\"表现形式：资源具体的呈现形式，如JSON、XML、Image等\",\"状态转移：通过CRUD，使得服务器端资源状态的改变\",\"动作\",\"GET：请求获取特定资源\",\"POST：创建新资源\",\"PUT：更新资源\",\"DELETE：删除资源\",\"PATCH：部分更新\"]},\"1641\":{\"h\":\"软件工程\",\"t\":[\"瀑布模型\",\"软件概念 -> 需求分析 -> 架构设计 -> 详细设计 -> 编码 -> 测试\",\"敏捷开发模型一种以人为核心、迭代、循序渐进的开发方法。在敏捷开发中，软件项目的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。\",\"开发策略软件复用、分而治之、逐步演进、优化折中\"]},\"1642\":{\"h\":\"认证授权\",\"t\":[\"认证：验证身份凭据\",\"授权：管理操作权限\",\"RBAC 模型：Role-Based Access Control 基于角色的权限访问控制，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。\",\"Cookie 和 Session\",\"Cookie：保存在客户端（浏览器），一般用来保存用户信息。（例如存放 SessionId 用于服务器标记用户）Session：保存在服务端，记录用户的状态。（HTTP是无状态的，需要Session标记并跟踪特定用户）\",\"一般 Session 的安全性更高，Cookie尽量加密放到服务端解密。\",\"Session 一般依赖于 Cookie 实现。，但也可以不用 Cookie，例如直接放在 url 中，但安全性和用户体验降低。\",\"Cookie 无法防止 CSRF 跨站请求伪造（以用户身份发送虚假请求），但 Token 令牌可以禁止（Token 保存在 localStorage 中，前端负责携带 Token）\",\"Cookie 和 Token 都无法阻止 XSS 跨站脚本攻击（注入恶意代码，通过脚本盗用信息）\"]},\"1643\":{\"h\":\"SSO\",\"t\":[\"Single Sign On 单点登录，在多个应用的系统中，只需要登陆一次，就可以访问其它相互信任的应用系统。对于同域下的不同服务，只要扩大 Cookie 作用域到顶域，然后共享 session 即可（Redis 统一存储 Session）。但对于不同域下的服务，需要单独部署 SSO 系统，只要登录了这个公共的登陆服务就代表对应的服务群都登录了。\",\"跨域 SSO\",\"用户访问 app1 系统，app1 没有登录，跳转到SSO\",\"SSO 也没有登录，弹出用户登录页\",\"用户填写用户名、密码，SSO 进行认证后，将登录状态写入 SSO 的 session，并通知浏览器中写入 SSO 域下的 Cookie\",\"SSO 登录完成后会生成一个 ST (Service Ticket)，携带并跳转到 app1 系统\",\"app1 拿到 ST 后，向 SSO 发送请求验证 ST 是否有效\",\"验证通过后，app1 将登录状态写入 Session 并设置 app1 域下的 Cookie\",\"访问 App2\",\"用户访问 app2 系统，app2 没有登录，跳转到SSO\",\"由于 SSO 已经登录了，不需要重新登录认证\",\"SSO 生成 ST，携带并跳转到 app2 系统\",\"app2 拿到 ST 后，向 SSO 发送请求验证 ST 是否有效\",\"验证成功后，app2 将登录状态写入 Session 并设置 app2 域下的 Cookie\"]},\"1644\":{\"h\":\"设计模式\"},\"1645\":{\"h\":\"单例\",\"t\":[\"确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。\",\"// 懒汉 public class Singleton { private static Singleton instance; private Singleton (){} public static synchronized Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } } // 饿汉 public class Singleton { private static Singleton instance = new Singleton(); private Singleton (){} public static Singleton getInstance() { return instance; } } // 双重校验锁 public class Singleton { // 实例化对象分三个步骤：分配内存对象 -> 初始化对象 -> 将对象指向刚分配的内存空间 // Volatile 禁止指令重排序，防止另一个线程访问一个初始化未完成的对象（2、3步重排序） private volatile static Singleton singleton; private Singleton (){} public static Singleton getSingleton() { if (singleton == null) { // 只有第一次初始化才需要加锁，后续不需要 synchronized (Singleton.class) { // 如果多个线程同时通过了第一次检查，防止第二个进入临界区的线程再次创建对象 if (singleton == null) { singleton = new Singleton(); } } } return singleton; } }\"]},\"1646\":{\"h\":\"工厂模式\",\"t\":[\"通过定义工厂类来创建对象，让使用者不用知道具体的参数就可以创建出所需的产品类。\"]},\"1647\":{\"h\":\"适配器模式\",\"t\":[\"解决两个软件实体间的接口不兼容的问题\"]},\"1648\":{\"h\":\"策略模式\",\"t\":[\"相同的目标，用不同的方法实现。例如 Spring 中加载 BeanDefinition 可以从类路径加载、文件系统加载、网络资源加载，可以通过不同的类，实现共同的接口来实现。\"]},\"1649\":{\"h\":\"代理模式\",\"t\":[\"一个类代表另一个类的功能。在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。\"]},\"1650\":{\"h\":\"手撕算法\"},\"1651\":{\"h\":\"LRU\",\"t\":[\"public class LRUCache { class DLinkedNode { int key; int value; DLinkedNode prev; DLinkedNode next; public DLinkedNode() {} public DLinkedNode(int _key, int _value) {key = _key; value = _value;} } private Map<Integer, DLinkedNode> cache = new HashMap<Integer, DLinkedNode>(); private int size; private int capacity; private DLinkedNode head, tail; public LRUCache(int capacity) { this.size = 0; this.capacity = capacity; // 使用伪头部和伪尾部节点 head = new DLinkedNode(); tail = new DLinkedNode(); head.next = tail; tail.prev = head; } public int get(int key) { DLinkedNode node = cache.get(key); if (node == null) { return -1; } // 如果 key 存在，先通过哈希表定位，再移到头部 moveToHead(node); return node.value; } public void put(int key, int value) { DLinkedNode node = cache.get(key); if (node == null) { // 如果 key 不存在，创建一个新的节点 DLinkedNode newNode = new DLinkedNode(key, value); // 添加进哈希表 cache.put(key, newNode); // 添加至双向链表的头部 addToHead(newNode); ++size; if (size > capacity) { // 如果超出容量，删除双向链表的尾部节点 DLinkedNode tail = removeTail(); // 删除哈希表中对应的项 cache.remove(tail.key); --size; } } else { // 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部 node.value = value; moveToHead(node); } } private void addToHead(DLinkedNode node) { node.prev = head; node.next = head.next; head.next.prev = node; head.next = node; } private void removeNode(DLinkedNode node) { node.prev.next = node.next; node.next.prev = node.prev; } private void moveToHead(DLinkedNode node) { removeNode(node); addToHead(node); } private DLinkedNode removeTail() { DLinkedNode res = tail.prev; removeNode(res); return res; } }\"]},\"1652\":{\"h\":\"堆排\",\"t\":[\"class Solution { public void heapSort(int[] nums) { int heapSize = nums.length; buildHeap(nums, heapSize); for(int i = nums.length - 1; i >= 0; i--) { System.out.print(nums[0] + \\\" \\\"); swap(nums, 0, i); --heapSize; heapify(nums, 0, heapSize); } } void buildHeap(int[] nums, int heapSize) { for (int i = heapSize / 2; i >= 0; i--) heapify(nums, i, heapSize); } void heapify(int[] nums, int i, int heapSize) { int l = 2 * i + 1, r = 2 * i + 2; int maxIdx = i; if(l < heapSize && nums[maxIdx] < nums[l]) maxIdx = l; if(r < heapSize && nums[maxIdx] < nums[r]) maxIdx = r; if(maxIdx != i){ swap(nums, i, maxIdx); heapify(nums, maxIdx, heapSize); } } void swap(int[] nums, int i, int j) { int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; } }\"]},\"1653\":{\"h\":\"快排\",\"t\":[\"class Solution { private static Random rand = new Random(System.currentTimeMillis()); public int[] sortArray(int[] nums) { quickSort(nums, 0, nums.length - 1); return nums; } private void quickSort(int[] nums, int left, int right) { if(left >= right) return; int r = rand.nextInt(right - left + 1); swap(nums, left, left + r); int pivot = left; int lt = left + 1, gt = right; while(true) { while(lt <= right && nums[lt] < nums[pivot]) lt++; while(gt >= left && nums[gt] > nums[pivot]) gt--; if(lt >= gt) break; swap(nums, lt++ ,gt--); } swap(nums, pivot, gt); quickSort(nums, left, gt - 1); quickSort(nums, gt + 1, right); } private void swap(int[] nums, int i, int j) { int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; } }\"]},\"1654\":{\"h\":\"归并排序\",\"t\":[\"class Solution { int[] tmp; public int[] sortArray(int[] nums) { tmp = new int[nums.length]; mergeSort(nums, 0, nums.length - 1); return nums; } public void mergeSort(int[] nums, int l, int r) { if (l >= r) { return; } int mid = (l + r) >> 1; mergeSort(nums, l, mid); mergeSort(nums, mid + 1, r); int i = l, j = mid + 1; int cnt = 0; while (i <= mid && j <= r) { if (nums[i] <= nums[j]) { tmp[cnt++] = nums[i++]; } else { tmp[cnt++] = nums[j++]; } } while (i <= mid) { tmp[cnt++] = nums[i++]; } while (j <= r) { tmp[cnt++] = nums[j++]; } for (int k = 0; k < r - l + 1; ++k) { nums[k + l] = tmp[k]; } } }\"]},\"1655\":{\"h\":\"背包\",\"t\":[\"0-1背包\",\"// 前 i 件商品，总重量 j 的前提下的最大价值 dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - w[i]] + v[i])\",\"完全背包\",\"// 前 i 种硬币（可重复），总金额 j 的组合方式 dp[i][j] = dp[i - 1][j] + dp[i][j - coins[i - 1]]\"]},\"1656\":{\"h\":\"斐波那契\",\"t\":[\"不要写递归！！！复杂度 $O(2^n)$!!!\",\"写 DP，复杂度 O(n)\"]},\"1657\":{\"h\":\"二分细节\",\"t\":[\"while(l < r)\",\"如果更新时 l = mid + 1 和 r = mid; 则 mid = left + (right - left + 1) / 2;\",\"如果更新时 l = mid 和 r = mid - 1; 则 mid = left + (right - left + 1) / 2;\",\"返回时优先取 r，避免越界\",\"二分的本质是「二段性」而非「单调性」二分不仅适用于 01 特性（满足/不满足），还适用于** 一定满足/不一定满足** 这样的特性\"]},\"1658\":{\"h\":\"场景题\",\"t\":[\"40亿 bit ~= 500 MB；1亿整数 ~= 400 MB\",\"两个文件分别有 50亿 URL，找出其中相同的 URL\",\"先哈希切分多个小文件，对每个文件建立 HashSet，查找相同的 URL；优化：前缀字典树，降低存储成本提高查询效率\",\"大量数据找出 Top 100 频度的字符串\",\"分而治之，哈希取余 -> HashMap 统计频度 -> 容量 K 的小顶堆求 Top K\",\"大量数据中找出不重复的数字\",\"分治法：切分小文件 -> Hashset/HashMap 找出每个小文件不重复的整数 -> 合并每个子结果\",\"位图法：用两位 bit 表示数字状态，00没出现，01出现一次，10出现多次。前提是内存可以容纳所有 bit\",\"大量数据中判断一个数是否存在\",\"分治法：/位图法：每个存在的整数对应的 bit 置 1，然后直接查询该数对应位是否为 1。\",\"5亿个数中找出中位数\",\"双堆法：一个大根堆，一个小根堆。大根堆的最大元素小于小根堆的最小元素，保证两个堆的元素个数不超过 1。如果数据总数为偶数，中位数就是两个堆顶的平均值，否则是容量较大的堆的堆顶元素。\",\"分治法: 先遍历一轮，二进制最高位为 1 的写入 file1，否则写入 file0，则中位数位于数量较多的文件中。继续按 位 划分，直到可以定位到中位数。\",\"Redis 数据结构的应用\",\"ZSet 可以用于实现排行榜数据，例如根据某个权重排序，获得排名顺序。\",\"Set 可以用于集合的交集、并集计算等。例如计算每日新增用户数，用两天的用户 set 作差（sdiffstore命令）\",\"Bitmap 不记录数据本身，只能判断是否存在，可以用于每月的签到记录的场景。\"]},\"1659\":{\"c\":[\"Java\"]},\"1660\":{\"c\":[\"面试\"]},\"1661\":{\"h\":\"LeetCode-位运算\",\"t\":[\"链接：https://leetcode.cn/problems/single-number/\",\"LeetCode136\",\"找出数组中唯一成单的数字，主要学习异或运算的性质和哈希表的使用。\"]},\"1662\":{\"h\":\"解法1. 异或运算\",\"t\":[\"异或运算的三个性质\",\"任何数和0做异或，结果仍是原来的数 $$ a \\\\bigoplus 0 = a $$\",\"任何数和自身做异或结果是0 $$ a \\\\bigoplus a = 0 $$\",\"异或运算满足交换律和结合律 $$ a \\\\bigoplus b \\\\bigoplus a = b \\\\bigoplus a \\\\bigoplus a = b $$\",\"因此数组中所有元素异或即可得到单个的元素。时间复杂度$O(n)$\",\"class Solution { public int singleNumber(int[] nums) { int ans = nums[0]; for(int i = 1; i < nums.length; i++){ ans ^= nums[i]; } return ans; } }\"]},\"1663\":{\"h\":\"解法2. 哈希表\",\"t\":[\"使用哈希表存储每个数字和该数字出现的次数。最后次数为1的就是单个数字\",\"Class Solution { public int singleNumber(int[] nums) { Map<Integer, Integer> map = new HashMap<>(); for(Integer i : nums){ Integer count = map.get(i); map.put(i, count == null ? 1 : ++count;); } for(Integer i : nums){ if(map.get(i) == 1) return i; } }\",\"时间复杂度$O(n)$,空间复杂度$O(n)$\",\"链接：https://leetcode.cn/problems/number-of-1-bits/\",\"LeetCode191\"]},\"1664\":{\"h\":\"方法1 - 移位\",\"t\":[\"循环检查二进制的每一位是否为1，例如让n和 $2^i$ 进行与运算，或者让n和1相与并右移n，得到二进制末尾是否为1 时间复杂度$O(k)$, 其中$k$是二进制位数\",\"public class Solution { // you need to treat n as an unsigned value public int hammingWeight(int n) { int count = 0; while (n != 0) { count += n & 1; n >>>= 1; } return count; } }\",\"注，Java中：\",\"<< 左移，高位舍弃，低位补0\",\">> 右移，舍弃最低位，高位用符号位填补，正数补0，负数补1\",\">>> 无符号右移，舍弃最低位，高位用0填补\"]},\"1665\":{\"h\":\"方法二 - Brian Kernighan 算法\",\"t\":[\"利用 $n \\\\And (n-1)$ 能够把二进制中的最低位1变为0的特性，反复操作，直至n=0\",\"n&n-1\",\"可以看到，n-1会把n末尾的0变1，直到遇到最低位的1把它变0，其余保持不变。相与时，n末尾的0与运算后仍是0，而最低位1和0相与得0，其余位不变。因此，$n \\\\And (n-1)$把n的最低位1变成了0，其余位不变。\",\"时间复杂度$O(logn)$, 循环次数就是n的二进制中1的个数\",\"public class Solution { public int hammingWeight(int n) { int ret = 0; while (n != 0) { n &= n - 1; ret++; } return ret; } }\"]},\"1666\":{\"h\":\"方法3 - 分治 (Variable-Precision SWAR 算法)\",\"t\":[\"0x55555555 = 0B0101...0101 0x33333333 = 0B0011...0011 0x0f0f0f0f = 0B00001111...00001111\",\"贴上Java中的Integer::bitCount()源码，太神奇了！\",\"public static int bitCount(int i) { i = i - ((i >>> 1) & 0x55555555); // 此时i每两位的值是原数字每两位1的个数 i = (i & 0x33333333) + ((i >>> 2) & 0x33333333); // 此时i每4位的值是原数字每4位1的个数 i = (i + (i >>> 4)) & 0x0f0f0f0f; // 此时i每8位的值是原数字每8位1的个数 i = i + (i >>> 8); // 每两个8位合并统计 i = i + (i >>> 16); // 两个16位合并统计 return i & 0x3f; // 取出低6位，因为32bit最高只有32个1 }\",\"注意第二行，前半句保留奇数组的\\\"两位\\\"，后半句保留偶数组的\\\"两位\\\"，然后相加使得相邻的两个\\\"两位\\\"合并统计，即得到每4位1的个数 分开&的原因在于2bit最多表示3个1，不足以表示原数字每4位1的个数，因此要多做一次&然后相加 而在第三行，4bit(0-15)可以表示8位二进制1的个数，因此只需要&一次\",\"链接：https://leetcode.cn/problems/hamming-distance/\",\"LeetCode461\",\"先把两数字异或，然后同LeetCode191，统计1的个数。\",\"class Solution { public int hammingDistance(int x, int y) { int s = x ^ y, ret = 0; while (s != 0) { s &= s - 1; ret++; } return ret; } }\"]},\"1667\":{\"c\":[\"算法\"]},\"1668\":{\"c\":[\"LeetCode\"]},\"1669\":{\"h\":\"LeetCode-排列组合\",\"t\":[\"子集、组合、排列问题就是从序列中以给定规则取若干元素构成集合的集合。本质上就是穷举所有解，而这些解呈现树形结构，因此合理使用回溯算法框架就可以一网打尽。\",\"主要记住下面两棵回溯树，所有问题都是这两棵树的变种，关键在于剪枝的判断。\",\"组合_子集树\",\"排列树\",\"回溯框架\",\"class Solution { List<List<Integer>> res = new LinkedList<>(); LinkedList<Integer> track = new LinkedList<>(); public List<List<Integer>> subsets(int[] nums) { //前置处理，如排序、处理空集等 backtrace(nums, 0); return ans; } void backtrace(int[] nums, int startIndex) { if(符合条件){ ans.add(new LinkedList<>(track)); return; } if(不符合条件) return; for (int i = startIndex; i < nums.length; i++) { cur.add(nums[i]); backtrace(nums, i + 1); cur.remove(cur.size() - 1); } } }\"]},\"1670\":{\"h\":\"子集\",\"t\":[\"无重复元素的数组，不可复选，求所有子集。 Leetcode-78. 子集\",\"套用框架，关键在于用start控制树枝的遍历，避免产生重复的子集\",\"void backtrack(int[] nums, int start) { // 前序位置，每个节点的值都是一个子集 res.add(new LinkedList<>(track)); for (int i = start; i < nums.length; i++) { track.addLast(nums[i]); // 关键：通过 start 控制树枝遍历，避免产生重复子集 backtrack(nums, i + 1); track.removeLast(); } }\"]},\"1671\":{\"h\":\"组合\",\"t\":[\"无重复元素的数组，不可复选，求指定元素个数的组合。 Leetcode-77. 组合\",\"所以本质上组合问题和子集问题是一样的，子集不要求元素的个数，组合指定了结果集的大小。\",\"void backtrace(int n, int k, int startIndex) { // 关键：达到指定个数加入结果集并返回 if(cur.size() == k){ ans.add(new ArrayList<>(cur)); return; } for (int i = startIndex; i <= n; i++) { cur.add(i); backtrace(n, k, i + 1); cur.remove(cur.size() - 1); } }\"]},\"1672\":{\"h\":\"排列\",\"t\":[\"无重复元素的数组，不可复选，求全排列 Leetcode-46. 全排列\",\"排列问题不同于子集/组合，任何元素顺序不一致都是不同的解，换句话说，任意位置都可以是任意未使用的元素，因此不能再用start控制元素遍历的顺序了。 但是要求元素不可复选，因此关键是要用 used[] 数组判断元素是否已经加入当前的排列结果。\",\"void backtrack(int[] nums) { // 所有元素都已经加入排列，符合条件，加入结果集并返回 if (track.size() == nums.length) { res.add(new LinkedList(track)); return; } for (int i = 0; i < nums.length; i++) { // 关键：已经加入当前排列结果，不可复选 if (used[i]) continue; track.addLast(nums[i]); used[i] = true; backtrack(nums); used[i] = false; track.removeLast(); } }\"]},\"1673\":{\"h\":\"子集\",\"t\":[\"存在重复元素的数组，不可复选，求所有子集。结果中不能有重复的集合。 Leetcode-90.子集II\",\"回溯树如下，由于相同的元素后续遍历的结果会产生重复，因此需要剪枝： \",\"实现上，就先要对数组进行排序让相同的元素挨在一起，方便回溯剪枝\",\"public List<List<Integer>> subsetsWithDup(int[] nums) { // 前置操作：排序。方便回溯剪枝 Arrays.sort(nums); backtrack(nums, 0); return ans; } void backtrack(int[] nums, int start) { ans.add(new LinkedList<>(track)); for (int i = start; i < nums.length; i++) { //关键：相邻的等值元素产生重复，剪枝 if(i > start && nums[i] == nums[i - 1]) continue; track.addLast(nums[i]); backtrack(nums, i + 1); track.removeLast(); } }\"]},\"1674\":{\"h\":\"组合\",\"t\":[\"存在重复元素的数组，不可复选，求和为target的组合。结果中不能有重复的集合。 Leetcode-40. 组合总和 II\",\"组合本质上和可重不可复选子集问题是一样的，关键只要记录当前子集的和是否达到target，没达到继续遍历，达到了就加入结果集，超过了就剪枝。\",\"public List<List<Integer>> combinationSum2(int[] candidates, int target) { Arrays.sort(candidates); backtrack(candidates, 0, 0, target); return ans; } // sum记录当前track集合总和 void backtrack(int[] nums, int start, int sum, int target) { // 达到target加入结果集 if (sum == target) { ans.add(new LinkedList<>(track)); return; } // 超过target剪枝 if(sum > target) return; for (int i = start; i < nums.length; i++) { // 和子集一样，相邻的等值树枝会产生重复，剪枝 if (i > start && nums[i] == nums[i - 1]) continue; track.addLast(nums[i]); backtrack(nums, i + 1, sum + nums[i], target); track.removeLast(); } }\"]},\"1675\":{\"h\":\"排列\",\"t\":[\"存在重复元素的数组，不可复选，求所有不重复的全排列。 Leetcode-47. 全排列 II\",\"解法1：记录前一条树枝的值，对值相同的树枝不遍历，避免产生相同的子树。\",\"元素可重排列解法1\",\"public List<List<Integer>> permuteUnique(int[] nums) { Arrays.sort(nums); used = new boolean[nums.length]; backtrack(nums); return ans; } void backtrack(int[] nums) { if (track.size() == nums.length) { ans.add(new LinkedList<>(track)); return; } // 解法1关键：记录上一个排列的值，下一个值如果相同则不遍历 int lastNum = -11; for (int i = 0; i < nums.length; i++) { if (used[i] || nums[i] == lastNum) continue; lastNum = nums[i]; track.addLast(nums[i]); used[i] = true; backtrack(nums); used[i] = false; track.removeLast(); } }\",\"解法2：控制相同元素的前后顺序。例如 [1,2,2] 看成 [1,2,2']，我们要求2'必须出现在2之后，保证了无重复的排列结果。 (之所以出现重复，是因为把相同元素形成的排列视为了不同的序列，但实际上它们应该是相同的)\",\"元素可重排列解法2\",\"public List<List<Integer>> permuteUnique(int[] nums) { Arrays.sort(nums); used = new boolean[nums.length]; backtrack(nums); return ans; } void backtrack(int[] nums) { // 所有元素都已经加入排列，符合条件，加入结果集并返回 if (track.size() == nums.length) { ans.add(new LinkedList<>(track)); return; } for (int i = 0; i < nums.length; i++) { if (used[i]) continue; // 解法2关键：控制相同元素的前后顺序 if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) continue; track.addLast(nums[i]); used[i] = true; backtrack(nums); used[i] = false; track.removeLast(); } }\"]},\"1676\":{\"h\":\"组合\",\"t\":[\"无重复元素的数组，可复选，求和为target的元素组合。 Leetcode-39. 组合总和\",\"标准的子集/组合问题我们使用start + 1使得下一层递归时不可复选元素，现在可以复选了，那么去掉+1就可以了。无重可复选的子集问题也类似。\",\"public List<List<Integer>> combinationSum(int[] candidates, int target) { Arrays.sort(candidates); backtrack(candidates, 0, 0, target); return ans; } void backtrack(int[] nums, int start, int sum, int target){ if(sum == target) ans.add(new LinkedList<>(track)); if(sum >= target) return; for (int i = start; i < nums.length; i++) { track.addLast(nums[i]); // 关键：下一层递归仍从i开始遍历，也即可复选元素 backtrack(nums, i, sum + nums[i], target); track.removeLast(); } }\"]},\"1677\":{\"h\":\"排列\",\"t\":[\"LeetCode没有这样的例题，但其实思路和上面的组合一样，现在元素可复选就更简单了，直接去掉used数组就可以了。\",\"void backtrack(int[] nums) { if (track.size() == nums.length) { res.add(new LinkedList(track)); return; } for (int i = 0; i < nums.length; i++) { track.add(nums[i]); backtrack(nums); track.removeLast(); } }\",\"子集和组合本质上一样，区别在于组合指定了集合大小 \",\"无重不可复选通过start + 1控制元素不复选\",\"有重不可复选通过判断 nums[i] == nums[i - 1] 来避免相同元素产生重复集合\",\"无重可复选只要去除 start 的 +1 操作，让元素可复选即可\",\"排列的重点在于任意位置放不同元素产生的序列是不一样的，因此需要 used[] 数组判断当前元素是否已经加入排列 \",\"有重不可复选有两种特殊解法，一种是记录上一次加入排列的元素，另一种是控制相同元素在排列中的顺序\",\"无重可复选只要去除used数组，让元素可复选即可\",\"元素可重问题通常都要先对数组排序，方便后续的回溯剪枝\"]},\"1678\":{\"c\":[\"算法\"]},\"1679\":{\"c\":[\"LeetCode\"]},\"1680\":{\"h\":\"Linux 命令备忘录\"},\"1681\":{\"h\":\"more\",\"t\":[\"# 翻页查看文件，空格翻页，q 退出 more <path>\"]},\"1682\":{\"h\":\"mkdir\",\"t\":[\"# 自动创建不存在的父目录 mkdir -p <path>\"]},\"1683\":{\"h\":\"find\",\"t\":[\"# 指定目录查找文件，支持通配符 find <path> -name <key> # 查找大于/小于 n kB/MB/GB 的文件 find <path> -size +|-n[kMG]\"]},\"1684\":{\"h\":\"grep\",\"t\":[\"# 从文件中过滤出关键字，-n显示行号 grep -n <key> <path>\"]},\"1685\":{\"h\":\"wc\",\"t\":[\"# 数量统计，行数 | 单词数 | 字符数 | 字节数 （缺省参数则没有字符数） wc -l -w -m -c <path>\",\"> & >>\",\"# 覆写 echo \\\"Hello\\\" > test.txt # 追加，反引号的会被当做命令处理 echo `pwd` >> test.txt\"]},\"1686\":{\"h\":\"tail\",\"t\":[\"# 查看文件尾部内容，-f 持续追踪，-n 指定行数 tail -f -n <num> <path> # 没有 -f 可以简化行数 tail -<num> <path>\"]},\"1687\":{\"h\":\"tr\",\"t\":[\"# 文本替换 tr \\\"xxx\\\" \\\"yyy\\\" # 例，输出：12*456789 echo \\\"123456789\\\" | tr \\\"3\\\" \\\"*\\\"\"]},\"1688\":{\"h\":\"tar\",\"t\":[\"Linux 常用的压缩格式包括 tar 归档文件（tarball，仅封装不压缩）、gz 格式压缩（gzip）等。\",\"# -z gzip模式（默认是talball，一般放于选项开头），-v 显示解压缩过程，-f 压缩/解压的文件(放于选项末尾) # 用于压缩的：-c 压缩 tar -zcvf test.tar 1.txt 2.txt 3.txt # 用于解压的：-x 解压，-C 解压目的地（该选项单独使用） tar -zxvf test.tar.gz -C /home/chanper # 也可以用 zip 解压缩 zio 格式，-r 递归文件夹，-d 解压目的地 zip -r test.zip file1 file2 unzip test.zip -d /home/chanper\"]},\"1689\":{\"h\":\"vim\",\"t\":[\"三种工作模式:\",\"命令模式：所敲的按键编辑器都理解为命令，以命令驱动执行不同的功能\",\"输入模式：对文件内容进行自由编辑\",\"底线命令模式：以:开始，通常用于文件的保存、退出\"]},\"1690\":{\"h\":\"终端操作\",\"t\":[\"ctrl + d，退出登出\",\"ctrl + r，输入内容去匹配历史命令（history）\",\"ctrl + a，跳到命令开头\",\"ctrl + e，跳到命令结尾\",\"ctrl + ←，向左跳一个单词\",\"ctrl + →，向右跳一个单词\",\"ctrl + l，清空终端内容，等同clear（cmd 里面是 cls）\"]},\"1691\":{\"h\":\"su/sudo\",\"t\":[\"切换用户，之后可以用exit/Ctrl+d退回上一个用户。sudo 可以临时提权，以 root 身份执行，但需要在/etc/sudoers文件中配置。\",\"# - 表示是否加载环境变量 su - <user>\"]},\"1692\":{\"h\":\"用户管理\",\"t\":[\"# 创建用户组 groupadd <group_name> # 删除用户组 groupdel <group_name> # 创建用户 # -g 指定用户组，否则创建同名组自动加入 # -d 指定用户 HOME 目录 useradd -g -d <username> # 删除用户，-r 会同时删除用户 HOME 目录 userdel -r <username> # 查看用户所属组 id <username> # 将指定用户加入指定用户组 usermod -aG <group_name> <username> # 查看所有用户，输出：用户名:密码(x):用户ID:组ID:描述信息(无用):HOME目录:执行终端(默认bash) getent passwd # 查看所有用户组，输出：组名称:组认证(显示为x):组ID getent group\"]},\"1693\":{\"h\":\"权限管理\",\"t\":[\"# -R 路径内所有内容应用同样的操作 chmod -R 751 <path> chmod u=rwx,g=rx,o=x <path> # 修改所属用户、用户组，仅限于 root 操作 chown -R <user>:<group> <path> chown chanper:group1 test.txt chown :root test.txt\"]},\"1694\":{\"h\":\"软件管理\",\"t\":[\"# -y 自动确认 yum -y install/remove/search <software> # -y 自动确认 apt -y install/remove/search <software>\"]},\"1695\":{\"h\":\"systemctl\",\"t\":[\"# 服务管理，如 network/firewalld/ssh... systemctl start/stop/status/enable/disable <service>\"]},\"1696\":{\"h\":\"ln\",\"t\":[\"ln 命令默认创建的是硬链接，即源文件、目标文件是同一个 inode 指向的文件；而软链接源、目标是两份文件，类似 Windows 下的快捷方式。\",\"# -s 表示软链接 ln -s <src> <dst>\"]},\"1697\":{\"h\":\"date\",\"t\":[\"# 根据格式串输出日期，-d 可以计算日期 date -d=<date_string> +<format> date -d \\\"+1 day\\\" +%Y-%m-%d # 指定时区，实际是通过 /etc/localtime 这个软链接指定的 sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\"]},\"1698\":{\"h\":\"网络通信\",\"t\":[\"# -c 指定检查次数 ping -c <num> ip/hostname # -b 后台下载，日志写入当前工作目录的 wget-log 文件，配合 tail 可以查看下载进度 wget -b <url> # 发送 http 请求，-O 下载文件 curl -O <url> curl cip.cc # 查看端口占用 netstat -anp | grep <port>\"]},\"1699\":{\"h\":\"进程管理\",\"t\":[\"# 查看进程，-e 全部进程，-f 全部信息 ps -ef # 杀死进程，-9 强制，否则仅发送关闭信号，具体由进程自身处理 kill -9 pid\"]},\"1700\":{\"h\":\"系统状态\",\"t\":[\"# 查看 CPU、内存使用情况 # -d 刷新时间，-n 刷新次数 top -d -n # 查看硬盘使用，-h 人性化单位 df -h # 查看 CPU、磁盘信息，-x 显示更多信息 iostat -x <interval> <times> # 查看网络状况，-n 查看网络，DEV 查看网络接口 sar -n DEV <interval> <times>\"]},\"1701\":{\"h\":\"环境变量\",\"t\":[\"环境变量是 KV 结构，例如HOME=/home/chanper，PATH记录执行命令的搜索路径。默认的环境变量存储在针对用户的~/.bashrc、针对全局的/etc/profile等文件中。\",\"# 查看所有环境变量 env # 取环境变量值 (cmd 里是 %key%) echo $USER echo ${PATH}abcd # 临时设置环境变量 export key=value # 重新加载环境变量 source <profile>\"]},\"1702\":{\"c\":[\"工具\"]},\"1703\":{\"c\":[\"Linux\"]},\"1704\":{\"h\":\"Mock 测试\"},\"1705\":{\"h\":\"前言\",\"t\":[\"错误率恒定定律：程序员的错误产出比是个常数\",\"规模代价平方定律：定位并修复一个BUG所需的代价正比于目标代码规模的平方\",\"错误率恒定定律告诉我们错误是不可避免的，而规模代价平方定律告诉我们要尽早发现错误。单元测试作为一个行之有效的工程实践，目的就是尽早在尽量小的范围内暴露错误。单元测试除了是一种测试手段外，更是一种改善代码设计的工具。\",\"持续集成要求在提交代码前后都要执行自动化测试用例，且强调自动化测试要对被测软件提供快速且高质量的验证反馈，持续集成实践对自动化测试有四个基本要求：\",\"快速，自动化测试用例的执行速度要快\",\"便捷，每名工程师都能随时很方便地执行自动化测试用例，不需他人帮助也不会影响到他人\",\"及时，一旦功能发生了改变，就能够通过自动化测试用例的运行，告知本次代码变更对软件质量的影响\",\"可信，运行结果可信赖，不存在随机失败或成功\",\"要切记：单元测试是最小粒度的测试，一般应该止步于类，不应存在读写数据库、远程调用、三方组件调用等。\"]},\"1706\":{\"h\":\"Mock测试\",\"t\":[\"Mock通常针对设定好的调用方法与需要响应的参数封装模拟出合适的对象实例，或者模拟对象的使用，当对象提供非确定的结果、难以创建或重现、对象方法执行太慢等情况，都适合使用Mock测试。\"]},\"1707\":{\"h\":\"引入依赖\",\"t\":[\"Java常用的Mock测试包是Mockito。不过Mockito对于final、static、protected、private等方法的支持不够完善，可以使用增强版的PowerMock库。\",\"<dependency> <groupId>org.mockito</groupId> <artifactId>mockito-core</artifactId> <version>${your version}</version> <scope>test</scope> </dependency>\"]},\"1708\":{\"h\":\"常用注解\",\"t\":[\"@Mock：基于Class创建一个模拟对象，并可以控制该对象的行为，以便在测试中替代真实的依赖。和Mockito.mock(class) 功能一样 \",\"Mock对象所有行为都不会执行实际代码\",\"没有指定模拟行为的方法，会返回返回类型的默认值，例如int返回0，String返回null\",\"@Spy：基于Class/Object创建间谍对象，默认执行所有真实逻辑，也可以指定模拟部分行为。和Mockito.spy(class)适合需要部分模拟，部分真实行为的测试对象。 \",\"Spy对象默认会执行所有方法的实际代码\",\"@InjectMock：加在实现类上，用于创建类的实例，并自动将@Mock/@Spy注解创建的模拟对象注入相应的字段\"]},\"1709\":{\"h\":\"初始化\",\"t\":[\"Java的Mock测试一般配合@RunWith(MockitoJUnitRunner.class)或者 MockitoAnnotations.initMocks()，自动初始化@Mock、@Spy、@Captor和@InjectMocks注解的字段。\",\"@RunWith(MockitoJUnitRunner.class) public class SomeTest { @Mock private SomeDependency someDependency; // 手动初始化方式 // @Before // public void setUp() { // MockitoAnnotations.initMocks(this); // } }\"]},\"1710\":{\"h\":\"打桩\"},\"1711\":{\"h\":\"模拟返回\",\"t\":[\"Junit的测试有自动隔离，所以Mock对象在一个测试方法中的打桩，并不会继承到另一个测试方法。\",\"@Mock TestClass testClassMock; // 等价于mock方法 // TestClass testClassMock = mock(TestClass.class); @Test public void testReturn() { when(testClassMock.getDataSize()).thenReturn(2); // 打桩 = 控制对象行为，模拟返回 int size = testClassMock.getDataSize(); Assert.assertEquals(2, size); when(testClassMock.getDataSize()).thenReturn(10, 20).thenReturn(20, 100); // 模拟多次调用返回 Assert.assertEquals(10, testClassMock.getDataSize()); Assert.assertEquals(20, testClassMock.getDataSize()); when(testClassMock.getContent(0)).thenReturn(\\\"hello\\\"); // 根据输入返回 when(testClassMock.getContent(1)).thenReturn(\\\"world\\\"); String result = testClassMock.getContent(0) + \\\" \\\" + testClassMock.getContent(1); Assert.assertEquals(\\\"hello world\\\", result); when(testClassMock.getContent(anyInt())).thenReturn(\\\"haha\\\"); // 不依赖输入返回 Assert.assertEquals(\\\"haha\\\", testClassMock.getContent(2)); Assert.assertEquals(\\\"haha\\\", testClassMock.getContent(20)); }\"]},\"1712\":{\"h\":\"参数匹配\",\"t\":[\"如果参数匹配既申明了精确匹配，也声明了模糊匹配；又或者同一个值的精确匹配出现了两次，使用时会匹配符合匹配条件的最新声明的匹配。\",\"// 精确匹配 0 when(testList.get(0)).thenReturn(\\\"a\\\"); Assert.assertEquals(\\\"a\\\", testList.get(0)); // 精确匹配 0 when(testList.get(0)).thenReturn(\\\"b\\\"); Assert.assertEquals(\\\"b\\\", testList.get(0)); // 模糊匹配 when(testList.get(anyInt())).thenReturn(\\\"c\\\"); Assert.assertEquals(\\\"c\\\", testList.get(0)); Assert.assertEquals(\\\"c\\\", testList.get(1));\",\"匹配函数列表\",\"函数名\",\"匹配类型\",\"any()\",\"所有对象类型\",\"anyInt()\",\"基本类型 int、非 null 的 Integer 类型\",\"anyChar()\",\"基本类型 char、非 null 的 Character 类型\",\"anyShort()\",\"基本类型 short、非 null 的 Short 类型\",\"anyBoolean()\",\"基本类型 boolean、非 null 的 Boolean 类型\",\"anyDouble()\",\"基本类型 double、非 null 的 Double 类型\",\"anyFloat()\",\"基本类型 float、非 null 的 Float 类型\",\"anyLong()\",\"基本类型 long、非 null 的 Long 类型\",\"anyByte()\",\"基本类型 byte、非 null 的 Byte 类型\",\"anyString()\",\"String 类型(不能是 null)\",\"anyList()\",\"List 类型(不能是 null)\",\"anyMap()\",\"Map 类型(不能是 null)\",\"anyCollection()\",\"Collection 类型(不能是 null)\",\"anySet()\",\"Set 类型(不能是 null)\",\"any(Class)\",\"type类型的对象(不能是 null)\",\"isNull()\",\"null\",\"notNull()\",\"非 null\",\"isNotNull()\",\"非 null\"]},\"1713\":{\"h\":\"模拟异常\",\"t\":[\"Random mockRandom = mock(Random.class); // 可以指定多次抛出的异常，依次抛出。超出次数后，自动抛出最后一个异常 when(mockRandom.nextInt()).thenThrow(new RuntimeException(\\\"异常1\\\"), new RuntimeException(\\\"异常2\\\")); try { mockRandom.nextInt(); Assert.fail(); } catch (Exception ex) { Assert.assertTrue(ex instanceof RuntimeException); Assert.assertEquals(\\\"异常1\\\", ex.getMessage()); } try { mockRandom.nextInt(); Assert.fail(); } catch (Exception ex) { Assert.assertTrue(ex instanceof RuntimeException); Assert.assertEquals(\\\"异常2\\\", ex.getMessage()); } // 如果方法返回值为空，使用 doThrow doThrow(new RuntimeException(\\\"异常\\\")).when(exampleService).hello();\"]},\"1714\":{\"h\":\"调用验证\",\"t\":[\"// 验证调用次数 @Test public void verifyTimes() { TestClass mock = mock(TestClass.class); when(mock.getDataSize()).thenReturn(100); mock.getDataSize(); mock.getDataSize(); // 方法是否被调用2次 verify(mock, times(2)).getDataSize(); // 方法是否从未被使用 verify(mock, never()).getContent(anyInt()); //会报错：never wanted but invoked verify(mock, never()).getDataSize(); // 被调用至少1次 verify(mock, atLeast(1)).getDataSize(); // 被调用至多3次 verify(mock, atMost(3)).getDataSize(); mock.getContent(100); mock.getContent(200); mock.getContent(100); verify(mock, times(2)).getContent(100); verify(mock, atLeast(1)).getContent(200); verify(mock, times(3)).getContent(anyInt()); } // 验证调用顺序 @Test public void verifyOrder() { TestClass mock = mock(TestClass.class); mock.getContent(39); mock.getContent(80); InOrder inOrder = inOrder(mock); // 如果取消注释，会报错verification in order failure // inOrder.verify(mock).getContent(80); inOrder.verify(mock).getContent(39); inOrder.verify(mock).getContent(80); TestClass secondMock = mock(TestClass.class); mock.getContent(100); secondMock.getContent(200); InOrder inOrderOfMock = inOrder(mock, secondMock); inOrderOfMock.verify(mock).getContent(100); inOrderOfMock.verify(secondMock).getContent(200); }\"]},\"1715\":{\"h\":\"参数捕获\",\"t\":[\"// 验证调用次数 @Test public void verifyTimes() { TestClass mock = mock(TestClass.class); when(mock.getDataSize()).thenReturn(100); mock.getDataSize(); mock.getDataSize(); // 方法是否被调用2次 verify(mock, times(2)).getDataSize(); // 方法是否从未被使用 verify(mock, never()).getContent(anyInt()); //会报错：never wanted but invoked verify(mock, never()).getDataSize(); // 被调用至少1次 verify(mock, atLeast(1)).getDataSize(); // 被调用至多3次 verify(mock, atMost(3)).getDataSize(); mock.getContent(100); mock.getContent(200); mock.getContent(100); verify(mock, times(2)).getContent(100); verify(mock, atLeast(1)).getContent(200); verify(mock, times(3)).getContent(anyInt()); } // 验证调用顺序 @Test public void verifyOrder() { TestClass mock = mock(TestClass.class); mock.getContent(39); mock.getContent(80); InOrder inOrder = inOrder(mock); // 如果取消注释，会报错verification in order failure // inOrder.verify(mock).getContent(80); inOrder.verify(mock).getContent(39); inOrder.verify(mock).getContent(80); TestClass secondMock = mock(TestClass.class); mock.getContent(100); secondMock.getContent(200); InOrder inOrderOfMock = inOrder(mock, secondMock); inOrderOfMock.verify(mock).getContent(100); inOrderOfMock.verify(secondMock).getContent(200); }\"]},\"1716\":{\"h\":\"SpringBoot测试\",\"t\":[\"Spring Test与JUnit等其他测试框架结合起来，提供了便捷高效的测试手段。而Spring Boot Test 是在Spring Test之上的再次封装，增加了切片测试，增强了mock能力。整体上，Spring Boot Test支持的测试种类，大致可以分为如下三类：\",\"单元测试：一般面向方法，编写一般业务代码时，测试成本较大。涉及到的注解有@Test。\",\"切片测试：一般面向难于测试的边界功能，介于单元测试和功能测试之间。涉及到的注解有@RunWith，@WebMvcTest等。\",\"功能测试：一般面向某个完整的业务功能，同时也可以使用切面测试中的mock能力，推荐使用。涉及到的注解有@RunWith，@SpringBootTest等。\",\"功能测试过程中的几个关键要素及支撑方式如下：\",\"测试运行环境：通过@RunWith 和 @SpringBootTest启动spring容器。\",\"mock能力：Mockito提供了强大mock功能。例如@MockBean注解可以使得这个注解的 bean 替换掉 SpringBoot 管理的原生 bean\",\"断言能力：AssertJ、Hamcrest、JsonPath提供了强大的断言能力。\"]},\"1717\":{\"h\":\"引入依赖\",\"t\":[\"增加spring-boot-starter-test依赖，使用@RunWith和@SpringBootTest注解，即可开始测试。\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency>\",\"一旦依赖了spring-boot-starter-test，以下类库将被一同依赖进去，包括JUnit、Spring Test & Spring Boot Test、AssertJ、Hamcrest、Mockito、JSONassert、JsonPath。\"]},\"1718\":{\"h\":\"编写用例\",\"t\":[\"SpringBoot测试可以在测试时启动Spring容器，更全面的测试功能集成。\",\"@RunWith(SpringRunner.class) @SpringBootTest public class SpringBootApplicationTests { @Autowired private UserService userService; @Test public void testAddUser() { User user = new User(); user.setName(\\\"john\\\"); user.setAddress(\\\"earth\\\"); userService.add(user); } }\",\"@RunWith是Junit4提供的注解，将Spring和Junit链接了起来。 @SpringBootTest替代了spring-test中的@ContextConfiguration注解，目的是加载ApplicationContext，启动spring容器。\"]},\"1719\":{\"c\":[\"测试\"]},\"1720\":{\"c\":[\"mock\"]},\"1721\":{\"h\":\"机票业务\",\"t\":[\"民航业是一个相对比较封闭的行业，专业性又非常强。机票在线预订也算得上是最早的电子商务形态，比互联网的应用可能早了20~30年。在这几十年的发展过程中，民航业以及机票分销经历了多次行业变革、地缘政治变化、市场经济调整、技术变革、企业管理变革等各种因素的影响，形成了现在的机票分销业务形态。\"]},\"1722\":{\"h\":\"民航信息化\",\"t\":[\"一个旅客出行前会有一个行程规划，然后到OTA（Online Travel Agent）网站去查询航班以及票价信息，然后选择合适的航班预订，下单，等待出票。在这个过程中，旅客跟航司之间需要有很多信息交互，首先是航司会定期发布航班计划（比如2020-06-01 15:30 北京首都 ~18:00 上海虹桥 CA1515），发布票价（票价主要跟舱位有关，拿电商的思路来理解，舱位就是航司的商品）。当旅客或OTA发起订票请求时，航司需要完成订票的处理（占座、扣减库存、出票等）。在这一阶段，对于航司来说，最重要的就是对航班库存的管理，需要建立一套库存控制系统。对于航司、OTA或旅客来说，需要一套在线订票系统来完成机票的销售。\"]},\"1723\":{\"h\":\"PSS - 旅客服务系统\",\"t\":[\"PSS：Passenger Service System，旅客服务系统，是航空公司IT架构中最核心的部分，它负责管理旅客与航司之间的所有交互，从订票到旅行的全流程都要跟PSS系统打交道；PSS不是一个单一的系统，通常由三大系统组成，分别是：\",\"CRS（Computer Reservation System）：计算机订座系统，也叫代理人订座系统，是给代理商分销使用的订座系统，可查询航班计划、航班可用座位、票价信息、订座记录等，能够完成座位预订和航段销售；\",\"ICS（Inventory Control System）：库存控制系统，也叫航空公司订座系统，是给航空公司工作人员使用的系统，用来发布航班计划、调整航班可用座位数、控制运价、收益管理、航空联盟、销售控制等；\",\"DCS（Departure Control System）：离港控制系统，是给机场工作人员使用的，为旅客办理离港及其它相关服务的系统总称；包括值机手续、登机控制、航班配载平衡、行李处理、登机牌打印、行李牌打印等；\"]},\"1724\":{\"h\":\"GDS - 全球分销系统\",\"t\":[\"由CRS逐渐演变而来的，功能上和CRS类似，但CRS侧重于库存管理和订座，GDS侧重于分销；GDS的主要功能包括从旅客查询座位到下单支付出票以及售后的退票改签环节。另外，GDS除了分销机票以外，还会覆盖整个旅游领域，包括酒店、租车、火车、轮船等产品的分销。\",\"GDS的主机系统通过连接到航司的CRS系统来获取实时的航班舱位信息（也就是库存），所以这里有一个很重要的区别就是CRS是真正拥有航司库存的系统（库存真正意义上来说是在ICS系统中），而GDS并不拥有库存，只是通过连接协议来获取库存信息。\",\"国内航司除春秋航空、九元航空外，所有的PSS系统都是托管给中航信来建设和维护的，所以国内航司的数据全部在中航信的主机里面，即便是航司直销（旗舰店或航司官网），背后还是航信的PSS系统在处理，这对我们理解后续的机票业务流程很重要。\"]},\"1725\":{\"h\":\"机票分销\"},\"1726\":{\"h\":\"分销模式\",\"t\":[\"早期航空公司都是靠着代理商（国内主要是代理机构、国外主要是旅行社）来进行机票的分销，后来随着OTA平台的兴起，分销交互产生了变化。OTA平台是从OTA的基础上发展起来的，平台是一种撮合交易的模式，用流量变现，向商家收取佣金。拿电商来对比，苏宁易购、京东自营这种类似于OTA，淘宝、拼多多就类似于OTA平台，所以淘宝上也可以开苏宁的店。行业发展早期的时候，携程就是OTA，去哪儿就是OTA平台，但随着行业的变化，像去哪儿、携程、美团，基本都变成了即是OTA，又是平台的角色。即做自己接客的事（自营业务），又做平台模式，撮合商家和消费者。在提直降代的背景下，OTA平台也直接对接航空公司，建立航司旗舰店。至此，机票的线上分销基本就变成了下图这种模式。\"]},\"1727\":{\"h\":\"业务模式\",\"t\":[\"直接对接航空公司的官方接口，以旗舰店的形式售卖航司产品。\",\"对接行业里的各级代理商，代理商在平台上投放自己的产品。 \",\"口直连型代理，这些代理有一定的研发能力或者是采用一些非正规渠道出票（比如网站抓取），可以通过接口的形式给平台提供数据\",\"政策投放型代理，平台通过提供一个统一的政策价格计算引擎，方便代理商直接投放销售政策（返点+留钱）\",\"自营业务，需要申请一级/二级代理资质。一级可以销售国际机票，二级只能销售国内机票，有了代理资质就有了office号和航协号\"]},\"1728\":{\"h\":\"核心数据\",\"t\":[\"机票分销行业信息化历史很悠久，系统信息化、标准化程度很高，作为OTA或OTA平台，就是个中间商，不掌握机票核心数据。类比电商系统，除了价格和库存两个要素，主要的区别在于机票中的产品指【航班+舱位】，对乘客来说购买的是飞机上的一个座位。\",\"国内航空数据基本都在中航信的系统里，抓取数据早前是用 eterm 黑屏终端软件，后来又推出了以互联网接口形式的 IBE+ 系统。OTA需要定时抓取+缓存数据，不同渠道的数据成本不一样，都是按调用量收费的。而航拓的放大配置是用来多工发送 eterm 命令，提升抓取效率的。\"]},\"1729\":{\"h\":\"航班 SK\",\"t\":[\"航班信息主要包括航班时刻和航班状态，简称SK，比如【2020-06-04 07:45~10:00 HU7605 BJS-SHA】。SK决定了旅客出行的时间安排、飞行器信息。国内航班时刻都来自中航信系统，通过黑屏系统指令获取（可以认为是航司的CRS系统）；国际的航班时刻来自OAG这家公司，它覆盖了全球900多家航空公司的航班时刻数据，\"]},\"1730\":{\"h\":\"航班时刻\",\"t\":[\"航班计划的一种表现形式，以制定航班时刻表的形式公布。完整的航班计划包括：\",\"航线：由出发地城市机场 + 目的地城市机场组成，行业里叫OD（Origin-Destination）\",\"航班：以航班号为标识，由航空公司二字码和数字组成。数字国内4位，如MU7889，国际3位如CA982\",\"班次：指航班频率，每周班次的确定会根据航空公司的运量、运力、机型和经济效益等因素来安排。\",\"班期：航班的飞行日期。\",\"机型：不同的机型有不同的飞行性能（如小时耗油量、航程、升限、最大起飞全重、爬升能力等），对应不同的飞机座位数、不同座舱布局，运营成本也不相同。\",\"民航局每年会召集各航空公司人员开两次会议来商定各家航司的航班时刻，分别是夏秋季，北京上海广州的时刻由民航总局审批，其它由地方管理局审批。航班时刻作为一种稀缺资源，它的分配策略目前世界上存在两种模式：一种是IATA模式（欧洲以及中国采用此模式），按照固定的优先顺序进行行政性分配；一种是美国模式，在行政性分配基础上增加了市场化配置手段，也就是航司之间可以进行航班时刻的交易。\"]},\"1731\":{\"h\":\"航班状态\",\"t\":[\"航班状态是跟旅客真正飞行过程紧密相关的信息，包括航班实际起飞、实际到达、延误、取消、备降、返航等；\"]},\"1732\":{\"h\":\"运价 FD\",\"t\":[\"机票的价格，专业术语叫运价。运价是一个统一的叫法，包括基础票价、附加费和税费。运价的核心要素包括运价、规则、航线路径，也就是从xx到xx的某条航线路径上，满足xx规则的情况下，运价是xx。\",\"国际机票的运价，是没有折扣的说法的，但是也分头等舱、公务舱、经济舱三大类，相较于国内机票，复杂度更高，影响因素有35类，运价数据达到亿级别、运价规则有2亿之多。因此需要设计一套复杂的大规模计算引擎来实现运价的计算，这套运价计算系统业内称为shopping系统，就是负责国际机票运价搜索的。\",\"国际主流的GDS，包括国内的中航信，几乎都是从ATPCO这家公司获取国际运价数据。\",\"运价分类FD：公布运价，也叫基础运价，是航司发布出去，所有渠道、所有代理商都可以看到的运价，包括其它竞争的航司也可以看到这部分运价。\",\"NFD：私有运价，也叫文件运价，是指航司为了提高销量或客座率，把一些折扣比较大的运价以文件形式发给跟航司关系比较紧密的某些渠道或某些代理商，其它渠道或代理商是看不到这部分运价的。\",\"Shopping：其实是用【运价 + AV】计算来的，意思就是找到指定日期下的多个最低价（不同航班组合就有不同的最低价），是一个机票搜索功能；\"]},\"1733\":{\"h\":\"票价\",\"t\":[\"机票价格不等于运价，票价是在运价的基础之上根据各种优惠、折扣、营销政策（留点+反钱）而计算得到的销售价格，是旅客购买机票实际支付的价格，背后也需要一套复杂的政策计算引擎来完成这项工作。\",\"运价+政策 = 票价\"]},\"1734\":{\"h\":\"舱位 AV\",\"t\":[\"Availability的前两个字母缩写，座位可用情况，可以类比成商品的库存。AV在eTerm里是个指令，用来查询具体某个航班下各舱位还有多少座位可用。\",\"OTA 平台不掌握实际的库存信息，包括平台上的商家也不掌握，真正的库存信息都在航司，具体的说在航司的ICS系统里，而大多国内航司的ICS系统部署在中航信的主机上，与中航信的GDS系统通过协议共享数据，中航信的GDS又与其它GDS系统共享数据。\",\"因为不同系统间传输协议等级不一样，库存数据就不一定能及时地同步到各个GDS中，不同代理人通过不同GDS看到的库存信息就会不一样。另外，航空公司工作人员会根据航班收益管理系统来预测和判断未来一段时间，哪些舱位（也就是价格）应该释放出来，应该放出多少座位，这也会导致库存的变化。所以如何保证库存及时准确，尽量减少超售或座位空置的情况是整个机票分销环节非常难的一部分。\"]},\"1735\":{\"h\":\"舱位分类\",\"t\":[\"大部分情况下，飞机上真实的物理座位就三种：经济舱，商务舱，头等舱。它们的座位大小不同，舒适度不同，服务种类也不同。但其实航司的舱位类型比三种多多了，主要原因是在基础的物理舱位上，航空公司包装出来了不同的销售策略，可以理解为机票不是单纯的买座位，买的其实是一种包装出来的产品，一种服务。\",\"F:6,U:C,J:A,C:A,D:A,Q:A,I:A,W:C,P:Q,Y:A,B:A,M:A,E:A,H:A,K:A,L:Q,N:Q,R:Q,S:Q,V:Q,T:Q,G:Q,Z:Q\",\"比如E舱和M舱都是经济舱，但是E舱票价贵，但是可能退票费和改签费要便宜，M舱虽然票价便宜，但是如果未来你要改签或者退票，要收取更贵的退票费和改签费。航司会根据当时的销售情况，动态的调整舱位的开关状态，以此来获得更高的利润。\"]},\"1736\":{\"h\":\"舱位状态\",\"t\":[\"理论上舱位分：可售卖状态、不可售卖状态，实际上需要更多的状态标识来优化运营。\",\"A 可以提供 9 个以上座位 1-9 可以提供 1-9 个座位,这种情况下系统显示具体的可利用座位数 L 没有可利用座位,但旅客可以候补 Q 永久申请状态,没有可利用座位,但可以申请(HN) S 因达到限制销售数而没有可利用座位,但可以候补 C 该等级彻底关闭,不允许候补或申请 X 该等级取消, 不允许候补或申请 Z 座位可利用情况不明,这种情况有可能在外航航班上出现\"]},\"1737\":{\"h\":\"舱位缓存\",\"t\":[\"作为商业产品，GDS通过按流量收费模式获取收益，一般有两种收费规则：\",\"面向航空公司收取分销费用，也就是每产生一个预订，就像航空公司收取一定的费用；\",\"面向代理人（OTA）收费流量费用，按照数据查询量收取流量费用，这里一般会有查订比，超出查订比的部分额外收费；\",\"所以，对OTA来说，就要考虑查询流量的问题，每天都有大量的机票搜索请求，每一次航线日期的查询都要展示大量的航班库存信息，但是真正预订机票的用户并没那么多，查询/预订的比例很容易超出GDS的限制。所以，OTA一般都会在本地系统增加一个缓存，来达到提升接口性能、降低数据查询成本的目的。如何让数据刷新实现效率最大化（用最小的刷新量实现最大的数据准确性），是库存系统技术上最大的挑战之一。\",\"另外，机票的库存分为两部分，一部分是公共库存，也就是散客票，另一部分是各旅行社或OTA的私有库存，就是团队票，也叫包机/切位，一般是旅游线路的包机。包机是指把整个飞机的所有座位包下来，切位是包下飞机上的部分座位。这部分库存信息，除特定OTA外，平台和其它OTA是看不到的，也就不能售卖。但有时候因旅客行程变更导致座位浪费，出于成本考虑，通常会把空出来的座位在互联网平台上投放出去，尽量弥补损失。\"]},\"1738\":{\"h\":\"专业术语\",\"t\":[\"PNRPassenger Name Record，旅客订座记录，包括旅客的行程日期，航班座位占用的数量及旅客身份证件信息；一个订单可能对应多个 PNR（成人/儿童），一个 PNR 可以是多个乘客的订座信息。只要订座了就会产生PNR，可以不支付。\",\"SS黑屏系统的一种指令，用于生编占座，SS之后会生成一个PNR\",\"RT提取PNR，查看PNR的一个状态，如果PNR状态不对的话，说明是生成的PNR是有问题的\",\"票号旅客在支付成功后，系统出票，会产生一个电子票号，这是真正的乘客乘机凭证，只有票号才能办理乘机手续。每个乘机人对应一个唯一的票号。\",\"Open票：从购票之日起未使用的机票，有效期为一年；\",\"签转：更改航空公司；\",\"K位：向航司申请低折扣的票；\"]},\"1739\":{\"h\":\"舱位介绍\",\"t\":[\"包括舱位等级（舱等）和舱位代码（舱位）：\",\"舱等：指舱位等级，一般包括头等舱、商务（公务）舱、经济舱三种；\",\"舱位：指舱位代码，也叫子舱位，是某一个舱等下的细分舱位，在国内机票销售中，不同的舱位代表了不同的折扣（各家航司有差异）；\",\"一个字母代表一个价格，字母后面有一个数字代表数量。约定俗成的以Y为票价的全价，后面9折、8折、7折分别有不同的字母代表，而各个航空公司根据各自喜好排列出相应地舱位表，但大部分航司排列都类似，而且两个临近舱位之间的折扣差为一个折扣左右。\"]},\"1740\":{\"h\":\"舱位状态：\",\"t\":[\"A：Available，舱位可售，当可售座位数小于10时，直接显示数字，否则显示A；\",\"Q：永久申请状态，无可用座位，但可申请；\",\"S：因达到限制销售数而没有可用座位，但可候补；\",\"L：无可用座位，但可候补；\",\"C：该等级彻底关闭，不可申请和候补；\"]},\"1741\":{\"h\":\"九大航权\",\"t\":[\"航权，也称航空自由权(Freedoms of the Air)，是世界航空业通过国际民航组织（ICAO）制定的一种国家性质的航空运输权利，因为航空运输只要超出自己的国界就涉及到其他国家的主权，国际航空运输就需要一个在全球行业范围内有一个统一的规定，航权就属于这个规定其中的一部分。在不同的两个国家交换与协商这些权利时，一般采取对等原则，有时候某一国会提出较高的交换条件或收取补偿费以适当保护该国航空企业的权益。\"]},\"1742\":{\"h\":\"第一航权: 领空飞越权\",\"t\":[\"各个FIR提供区域内飞航情报服务和告警服务。国际航线不可避免地要涉及它国控制的情报区，第一航权即为飞越非本国情报区的权利。\"]},\"1743\":{\"h\":\"第二航权: 技术经停权\",\"t\":[\"飞往外国途中，因技术需要（如添加燃料、飞机故障或气象原因备降）在协议国降落、经停，但不得作任何业务性工作，如上下客、货、邮。\"]},\"1744\":{\"h\":\"第三航权: 目的地下客权\",\"t\":[\"飞机可以在协议国境内卸下乘客、邮件或货物（本国装载客货飞协议国）。\"]},\"1745\":{\"h\":\"第四航权: 目的地上客权\",\"t\":[\"飞机可以在协议国境内载运乘客，邮件或货物返回（协议国装载客货飞本国）。通常来说，第三航权和第四航权是同时具备的。\"]},\"1746\":{\"h\":\"第五航权: 中间点权或延远权\",\"t\":[\"承运人从本国运输客货到另一国时可以将第三国（也就是始发地国家和目的地国家以外的其他国家）作为中点 (转) 站上下客货，再到达目的地国。或者，承运人将自己国家始发的客货运到协议国家，上客货后，可以运到第三国。该航班的出发地必须为该外国航空公司的所属国家。第五航权是针对两个国家的双边协定而言的，在两国的协定中允许对方行使有关第三国运输的权利。但是在没有第三国同意的情况下，这个权力等于没有。\"]},\"1747\":{\"h\":\"第六航权: 桥梁权\",\"t\":[\"某国或地区的航空公司在境外两国或地区间载运客货，但途中必须经过登记国（此为第三及第四自由的结合）的权利。\"]},\"1748\":{\"h\":\"第七航权: 完全第三国运输权\",\"t\":[\"在境外两国或地区间载运客货而不用返回本国。\"]},\"1749\":{\"h\":\"第八航权: 境内运输权（连续的国内运输）\",\"t\":[\"某国或地区的航空公司在协议国或地区领域内的两个或两个以上机场间载运客货的权利，须以本国为起点或终点。\"]},\"1750\":{\"h\":\"第九航权: 完全境内运输权（独立的国内运输）\",\"t\":[\"在协议国内的两个或以上机场间的航线，无须涉及承运人注册国。\"]},\"1751\":{\"h\":\"国际运价计算引擎\",\"t\":[\"国际运价计算引擎，是国际机票业务核心的基础服务。旅客在输入出发地目的地的条件下，系统通过一系列的组合计算，为旅客寻找最便宜的航班报价。早期，该环节的技术服务，由全球分销商（GDS）统一掌握，但随着互联网的发展，传统的GDS报价已经无法满足航空公司及OTA的销售意图，技术能力强大的OTA（携程，去哪儿，飞猪）也在做自己的国际运价计算引擎，来满足各自的业务需要。\"]},\"1752\":{\"h\":\"技术挑战\",\"t\":[\"国际航班报价搜索是个“NP-complete problem”，难度主要体现在以下四点。\",\"数据量大&计算量大 ：全球海量的路径(600万+)、航班(700万+)、运价数据(2亿+)、规则(2亿+)；以上图PEK-IAH举例：系统侧的计算量理论最大可达5亿次，实际经过预处理和计算过程策略优化后，单程计算量最大为900W次；\",\"数据更新频率快：运价、航班变化频繁，库存数据实时变化；\",\"规则复杂：国际机票业务规则航司迭代时间久远，共35类规则限制，逻辑复杂；\",\"高性能要求：用户响应时间敏感，秒级以内的性能要求。\",\"下图为报价搜索系统的一个流程图例，以北京到休斯顿的一次搜索为例，需要在400毫秒的时间内进行5亿次的运算。\"]},\"1753\":{\"c\":[\"工作\"]},\"1754\":{\"c\":[\"机票\"]},\"1755\":{\"h\":\"Life\"},\"1756\":{\"c\":[\"life\"]},\"1757\":{\"h\":\"三大教\"},\"1758\":{\"h\":\"犹太教 Judaism\",\"t\":[\"最早产生的一神教，信上帝\",\"至今，一直在等待救世主的到来\",\"只有犹太人可以信\",\"乱七八糟的资料汇成了《旧约》（塔纳赫）\"]},\"1759\":{\"h\":\"基督教 Christianity\",\"t\":[\"公元一世纪，耶稣宣称自己就是犹太教所谓的救世主，上帝的儿子，创传基督教\",\"救世主已经来过了，即耶稣，他拯救了全世界的人（被罗马人钉死在十字架上，罗马人最早是多神教）\",\"全世界任何人都可以信\",\"乱七八糟的书汇总起来编了一本圣经《新约》\",\"过圣诞节（庆祝圣子耶稣诞生的节日）\",\"后来由于东西罗马帝国的分裂，对各种事情的意见分歧，基督教就分裂成西罗马的天主教和东罗马的东正教，都称自己是正统基督。\"]},\"1760\":{\"h\":\"东正教 Orthodoxy\",\"t\":[\"东罗马宣称自己才是耶稣的正统一支，现在主要分布在东欧和俄罗斯。\"]},\"1761\":{\"h\":\"天主教 Catholicism\",\"t\":[\"因行为称义\",\"生而有罪，行得救赎（赎罪券）\",\"胸口画十字的就是天主教，有教皇（最接近神的人）\",\"由于教会一直在贪污腐败，马丁路德等人开始宗教改革，又分裂出新教\"]},\"1762\":{\"h\":\"马龙派\",\"t\":[\"是天主教会的一部分，为安提约基亚（安提阿或西叙利亚）礼拜仪式传统的一个分支，是东仪天主教会的23个成员之一。该教会是完全与罗马教廷共融的，居住于黎巴嫩贝鲁特北部的Bkirki。新任宗主教当选时必须要报告教宗，并获得其认可，以体现马龙派教会对天主教教会的归附。\"]},\"1763\":{\"h\":\"新教 Protestantism\",\"t\":[\"因信称义\",\"生而有罪，信得救赎\",\"不画十字，教堂分片，没有唯一的大主教\"]},\"1764\":{\"h\":\"伊斯兰教 Islam\",\"t\":[\"伊斯兰也信上帝、摩西、妥拉，也承认耶稣传教，但不认可耶稣是上帝的儿子，耶稣只是个先知。\",\"信先知穆罕默德（公元7世纪创传）\",\"穆罕默德受上帝的启示记载成《古兰经》\",\"然后呢，穆罕默德死了之后，伊斯兰教因为谁是正统继承人，以及很多其它问题分裂成什叶派、逊尼派。\"]},\"1765\":{\"h\":\"什叶派 Shiism\",\"t\":[\"主张世袭，支持穆罕默德的堂弟、女婿阿里•本•阿比•塔利卜，以及哈希姆家族（即圣族）的阿里及其直系后裔为正统继承人\",\"人数不及逊尼派，约占10%，主要分布在伊朗、伊拉克、巴林和阿塞拜疆\"]},\"1766\":{\"h\":\"逊尼派 Sunnism\",\"t\":[\"主张继承人应按照阿拉伯人的传统，从部落上层根据资历、威望选举产生\",\"伊斯兰教中占比超过90%，主要分布在西亚、北非的大多数阿拉伯国家\"]},\"1767\":{\"h\":\"其它分支\",\"t\":[\"瓦哈比派\",\"逊尼派的一支极端保守派别，起源于18世纪的沙特阿拉伯，由穆罕默德·本·阿卜杜勒·瓦哈卜（Muhammad ibn Abd al-Wahhab）。主要分布在沙特阿拉伯、阿拉伯联合酋长国、苏丹、肯尼亚等地区。\",\"强调回归原始的伊斯兰教教义，回归先知的教诲\",\"推崇极端主义和暴力，认为通过暴力手段维护伊斯兰教的信仰是最为重要的\",\"主张清除异己分子，认为其他宗教、哲学和社会观点都应该被摒弃，只保留最纯粹的伊斯兰教信仰\",\"瓦哈比派将奥斯曼帝国伊斯兰教的很大一块视为多神崇拜，从而使自己走上了与帝国冲突的道路。尽管正统伊斯兰教规定容忍犹太教和基督教等其他一神信仰，但却绝对不能容忍多神崇拜或多神信仰。事实上，所有优秀的穆斯林都有责任让多神崇拜者认识到他们信仰的错误，并将他们带上伊斯兰教的正道。如果做不到这一点，穆斯林就有责任参加“圣战”打击和消灭多神崇拜。瓦哈比主义将苏非主义和圣人崇拜等主流宗教行为定性为多神崇拜，这直接挑战了奥斯曼帝国的宗教合法性。\",\"苏非主义\",\"\\\"苏非主义\\\"（Sufism）是伊斯兰教内的一种宗教修行和灵性实践的方式，其追随者被称为苏菲（Sufis）。苏菲主义强调个体灵魂的内在寻求与真主的连接，以及通过祷告、默想、神秘主义仪式等方法实现心灵的提升。\",\"伊斯兰教神秘主义有很多种形式，从行乞苦修到著名的德尔维希旋转舞。从把斋到吟诵、从舞蹈到自焚，苏非派使用多种技巧来达到同造物主神秘结合的狂喜。\",\"德鲁兹教\",\"中东地区的一个秘契主义族教群体，德鲁兹信仰创始人哈姆扎·伊本·阿里源自伊斯兰教什叶派伊斯玛仪派，它的教义受到基督教和诺斯底主义等的较大影响。尽管德鲁兹信仰最初是从伊斯兰教什叶派支系——伊斯玛仪派中发展出来的，但德鲁兹教派的信徒通常不被认为是穆斯林，而且德鲁兹教派在神学实践上更接近基督教，目前主要分布在中东地区的黎巴嫩、叙利亚、以色列、约旦。\",\"推荐up：\",\"摘录《征服与革命中的阿拉伯人》 —— 尤金·罗根\",\"1517年，奥斯曼塞利姆苏丹征服了统治埃及的马木鲁克王朝，意味着自伊斯兰教兴起，阿拉伯世界第一次被一个非阿拉伯国家的首都统治。然后数个世纪后，马木鲁克家族依然拥有比伊斯坦布尔任命的总督更大的政治权利，在埃及，就像在黎巴嫩、阿尔及利亚一样，奥斯曼的统治适应了当地政治。许多情况下，奥斯曼人不愿或无法在各阿拉伯行省建立标准化的政府，而是选择与本地精英合作统治（羁縻统治）。奥斯曼人运行着自己的奴隶征募制度，将年轻的基督教男孩从村中带走，让他们远离家人长大，皈依伊斯兰教，培养成军人或文职，这在当时那个流动性有限的社会中向上流动的唯一手段。\",\"首先，国家需要一支庞大的军队来行使其权力。维持一支庞大的军队需要巨大的财富，而税收是国家唯一的常规财富来源。为了征税，国家必须促进国民生活的繁荣。为了国民生活的繁荣，国家必须维护法律的公正，这就回到了国家的责任上来，从而完成了一个完整的循环。\",\"埃及的塔赫塔维到法国学习游历得到的认知，像极了晚清的五大臣出洋：\",\"法国科学技术上的优越性 \",\"他意识到伊斯兰世界在科学上已远远落后于欧洲，并认为伊斯兰世界有义务和权利恢复这一学问，因为西方自文艺复兴以来所取得的进步是建立在中世纪伊斯兰教所取得的科学成就的基础上的。他认为奥斯曼帝国借鉴欧洲的现代技术进步不过是西方偿还对伊斯兰科学欠下的债\",\"法国宪章如何保障普通公民的权利，而不是强化精英的控制。\",\"法国的言论自由，强调了平民有机会使用新闻媒体的重要性，新闻媒体具有让人们为自己的行为负责的力量\",\"人民有权推翻君主以维护他们的合法权利\",\"能在高位上的人，不可能有大善人，尤其是中东，不沾点血根本坐不稳。看待国际关系，要剥离意识形态，看立场。生活中也是一样，尤且是看待那些身处高位的人，他们完全可以言行不一致。而我们要学会观察：3他们说话的时候，哪些是人话，哪些是鬼话；做事情的时候，哪些是烟雾弹，哪些是试错，哪些是有效行动。\"]},\"1768\":{\"c\":[\"随笔\"]},\"1769\":{\"c\":[\"宗教\"]},\"1770\":{\"h\":\"北京实习游记\"},\"1771\":{\"h\":\"新的开始\",\"t\":[\"2023的上半年对我太不友好了，身体上经受了病痛，精神上又经历了三个月焦虑的找实习，投简历、面试，反复被挂、反复被捞，终于在5月末赶上美团的暑期实习末班车上岸了。睡了一夜卧铺，6月4号早上，再次来到北京城。\",\"看了三个房，最后懒着继续找，租了个老破小也就住下了，反正我的物质生活质量要求也不高，糙着过活。这一天北京的太阳大得很，天倒是还挺好看。\",\"偌大的北京，倒是见不到几个路边摊/门面店，已经开始想念长沙的烟火气了。最后还是去吃了麦当当穷鬼套餐，吃完饭骑车兜风去公司逛了逛，晚霞也好看，生活似乎在变好。\",\"晚上又跑去奥体公园兜了一圈，北京大爷大妈不跳广场舞，跳的都是交际舞，太摩登了🤣。\"]},\"1772\":{\"h\":\"入职前的快乐\",\"t\":[\"离入职还有两天，开始到处快乐。6月5号顶着大太阳逛天坛\",\"6月6号又是大太阳，逛国家博物馆和天安门，完了在地道里坐了3小时，就为了看7.40分的降国旗，但说实话降国旗并不震撼，没有放国歌么得感情。\",\"晚上回来发现脖子黑了一大圈...\"]},\"1773\":{\"h\":\"开始痛苦\",\"t\":[\"6月7号入职了，没想到mentor竟然就是leader，还好后来把我甩给了组里的另一位前辈...幸运的是，抽到了M1的MBP嘿嘿嘿。刚坐下还没擦干净桌子，就被拉去开早会了。啥？还有早会这种东西？是我太单纯了，因为作为实习生，我不仅有早会，还有晚上的跟mentor的今日总结。周五的时候还有工作量、周报一堆麻烦事...\",\"然而最痛苦的不是琐碎的工作模式，而是学习上的痛苦。之前学的开源组件基本也都用不上，虽然原理大致类似，用法却都要重新学。自己学的那些皮毛，跟公司的研发流程一比，简直就是九牛一毛。\",\"第一周入职的三天，我的脑袋就没舒服过，从中午就开始头疼，却也还要学下去，不然晚上没法跟mentor交差了。也不知道是打工人的生活不适应，还是北京水土不服，浑身不舒坦，肌肉酸痛、鼻炎出血、智齿发作，哪哪都有问题。\",\"生活总是让我们遍体鳞伤 但到后来 那些受伤的地方一定会变成我们最强壮的地方。\"]},\"1774\":{\"h\":\"第一个周末\",\"t\":[\"纵使工作上很痛苦，生活总是要继续的，买了哑铃偶尔回来撸撸铁，虽然公司也有健身房。跑步已经很久没跑了，左小腿的肌肉，还有右膝盖的旧伤怕是难好了。但是周末依然要快乐!\",\"6月10号，终于走进了我大清的紫禁城\",\"没想到3个小时也就逛完了，顺便看到这天是世界遗产日，圆明园可以免门票，特种兵直接冲！\"]},\"1775\":{\"h\":\"第二周啦\",\"t\":[\"渐渐适应，周五开始上需求了嘿嘿嘿。虽然上班很累，不过确实如师兄所言，“快速成长”！\",\"本周恭王府、什刹海、三里屯，说实话都那样，恭王府40块的门票也没看到啥好看的。所以北京的景点虽然多，但是基本都历史价值大于观赏价值吧。晚上再去看个偷心晚宴演出。短暂的周末又结束了。\",\"哦对了顺便贴个有趣的 TED Talk：\"]},\"1776\":{\"h\":\"端午假期\",\"t\":[\"提前一周就预约好了，端午小长假的第二天，正好也是自己的第24个破壳日，终于来到了长城，见到的第一眼，真的太震撼了。\",\"不到长城非好汉，一朝终成好汉。\",\"端午第三天，实验室的小伙伴终于拿到了阿里offer来到北京，陪他体检、找房子。厚积薄发，阿里的待遇是真的香，马泉营的公寓也是真的香，着实羡慕死我了。\"]},\"1777\":{\"h\":\"第三周\",\"t\":[\"这周基本就是在熟练 DevOps 一整套开发部署上线流程。并且开始上真的业务需求了，好复杂...Leader讲了一小时也没听太明白...周末也就逛了个 798艺术区，文化素养不够也就打个卡。\"]},\"1778\":{\"h\":\"第四周\",\"t\":[\"这周基本完成了一个大需求，虽然技术涉及不深，但是业务真的好复杂。。。也不知道是产品和运营用这种复杂的东西能分析出个啥子。。。\",\"还有上上周自己自己开发的第一个需求被发现bug了，真尴尬，早报里这阵子的某个数据都是错的😥嘿嘿，找bug也找了老半天，还麻烦前辈花了好多时间一起找问题真不好意思😅\",\"这周末颐和园+北海公园暴走25000步，这不得瘦死\",\"已经实习一个月了，下周二就要第一次发工资了嘻嘻。转正也快开启了，这周重启leetcode，也要稍微花点时间准备秋招呢。\"]},\"1779\":{\"h\":\"第五周\",\"t\":[\"上周的需求开发完之后，这周一直在联调测试，周五终于上线。\",\"上线完发现线上环境配置文件忘了改，重发...\",\"快到饭点了，leader说有个后门接口改一下，重发...\",\"快下班了，运营录入数据发现DB压力有点大，改，重发...\",\"另外就一直在修组里的高风险（就是升级maven组件），跟打游戏过关一样，一个一个服务升级组件，申请权限发布，快把组里的所有服务都拿到权限了。看到那一坨坨shit依赖管理我真的强迫症要犯了，都TM用框架管理依赖了，非要自己定义个版本干啥子，冲突了又得慢慢查文档...\",\"周末躺着... 应付老板突如其来的任务、准备周会分享... Over...\"]},\"1780\":{\"h\":\"第六周\",\"t\":[\"沉迷学习...困于业务...\"]},\"1781\":{\"h\":\"第七周\",\"t\":[\"周一，需求上线，刚部署完第一台机器，error日志疯了，我也疯了，幸好mentor在边上及时禁用了机器😅\",\"周二，修完bug上线，观察快结束又 NPE 了，我吐了呀... 查完日志外部调用超时，给我传了个null，真的，写代码不要假想传进来的任何参数都是正常的，应该假定任何参数都是可能不正常的。mt：“事不过三” 一个破需求改改弄弄三次PR三次上线😅\",\"// java 中这条语句的调用方和参数都不能为空，少了校验，参数传进来是null导致异常 graySiteIds.contains(siteId); // 打印结果是：null_123 我吐了呀，这不得骂一句傻逼Java System.out.println(null + \\\"_123\\\");\",\"周三，跟千里飞来的妈去天安门广场升旗，仪仗队的影子我是一点没见着，主打一个自拍杆海的氛围。看完又回去接着上班，TMD 前两天上线就 NPE 的需求，好不容易上线了，产品和运营的口径出分歧了呵呵...合着整个需求从一开始的文档便都是错的，我呸！晚上还是自己分享周会，感谢老天爷今天没让我猝死。\",\"周四的团建，吃到一半接到报警🚨嘿嘿，然后就开始拿出程序员的饭碗开始debug了笑死。\",\"周末下大暴雨，原本的清北游泡汤，躺床上又把甄嬛传倍速过情关。。。这周还真的是异常的充实～\"]},\"1782\":{\"h\":\"第八周\",\"t\":[\"写了前端，是的，我终究是没有逃过要写前端的命。还是个BG内刚推出6个月的低代码平台，组里也没有人会用，让我摸索过河，顺便写份使用文档帮大家以后快速上手🥹太谢谢我的mt了，为我的产出疯狂着想。这难用的平台，活活折磨了我4pd...\"]},\"1783\":{\"h\":\"第九周\",\"t\":[\"每天干点没人干的脏活，确实挺脏的...上周末提交完三千字的自评，这周 ld one one 了，许愿一个意向🙏🙏🙏遇上一个好 mt 不得不说是有点福气的，帮我到处打听hc，旁敲侧击 ld 的意见。祝他腿伤早点好吧，早日跑个全马！\"]},\"1784\":{\"h\":\"第十周\",\"t\":[\"没有收到意向的一周...这周几乎只忙了一个需求，自己一个人干了两个系统的开发、测试、联调、上线，顺带着发现了一个线上的bug把它修了🥲我真的很好用，我不转正谁转正，哼\"]},\"1785\":{\"h\":\"第十一周\",\"t\":[\"周一中午刚睡醒就收到团子的意向了，秋招的第一个offer😇都没有心情写需求了，只想躺着。不过也快离职了，大伙给我的需求也少了，此时此刻，我正因为需求写完太无聊，补齐了一下这篇游记。回看这篇游记，会发现内容逐渐贫乏，确实周末也很少出去逛了，北京大抵也差不多那样。生活的热情就是这样日复一日的消失的吗\",\"虽然这周我很闲，因为leader带孩子把腿弄伤了请了三天的假，摸鱼肆无忌惮。可我隔壁的老大哥可一点也不闲，眼看着他被产品、运营一个个找过来对问题，脸上的生气一点点消失，搞了一天都没开始自己的需求开发，说话的时候仿佛已经被生活打压垮了。。。弄的我都不好意思再问他问题了😢然后他就请假了，留我一个人周五跟航司联调。。。一脸懵逼各种奇奇怪怪的问题冒出来了\",\"在北京的最后一个周末，骑着共享单车进城吹长安街的风，爽得一批～\"]},\"1786\":{\"h\":\"Last Week\",\"t\":[\"最后一周，没有新的需求，把进行中的需求都上线结束，印象最深的是某著名航司的网络抖动能连着抖几天，卡着整个需求，可惜人家是食物链的上游，太厉害了！周四把自己的软资产交接，这三个月就跟打游戏过关卡一样，一点点把组里各个系统的权限拿到手，在 git history 里永久性地留下自己的名字。想想无数人使用着自己写的程序，也可能因为自己写的 bug 造成 COE，只能说既兴奋又刺激。\",\"终究还是到了离职的日子了，这一周我下班都很早，每天晚上骑车或者坐班车，看着沿途灯光灿烂的高楼大厦，再到自己住的老破小，我都在思考毕业后到底要不要回到这。帝都引以为傲的医疗、教育、养老，似乎对我这种对买房、结婚、生娃都没兴趣的人没有丝毫的吸引力。很遗憾，这个问题还没想到答案。话又说回来，实习的几个月真的成长了很多，一个人来到帝都，安定下来，习惯下来，生活下来。学城的文档里说校招生对公司会有一种归属感，确实，因为从学生到打工人的身份转变就发生在这里，美团是我这的第一家公司，给了我人生的第一桶金，这个印记它永远占着了。从高考完离家上大学，到千里之外读研，再从学校步入职场，每跳出一个舒适圈都让人有一番成长，“拥抱变化”--这是哪个大厂的老话来着记不得了。\",\"我好喜欢晚上下了班车回家那段路，因为那段路没什么人，我可以静静地看着月亮听着歌、哼着小曲骑着车。\",\"要说实习最开心的事，莫过于遇到星哥这样的mt，亦师亦友，而且友超过了师，临走都要出来送送我，我就差哇的一声哭出来了（偶尔感性完全占据了我的智性），不过当着他的面还是不好意思。之前跟星哥吃完饭散步闲聊，虽然他北漂多年，也确实挣了很多钱，买了房（每个月房贷利息就要5k多ciao），家庭圆满，但是也很难感受到幸福，星哥给我的感觉已经是组里最乐观开朗的人了，所以人总是要找点兴趣来慰藉，比如跑步、骑车、上山、下海。他也才工作四年罢了，身体却已落下一身伤病，当然也有平时运动的原因。虽说程序员的工作是一个创造性的过程，但日复一日的业务需求终究还是会把人磨平，现在想想在学校里可以一整天埋头钻研技术，无所顾虑的日子太自由了。我的转正自评里很多都是些老套的俗话，但在未来长期规划里的最后一点我是认真的，也希望自己能朝着这个方向走下去：\",\"保持运动的习惯，打造良好的身体素质，坚持自己所热爱的，永远保持积极向上、探索世界的精神。\",\"24岁的我，对人生的感悟是：原本不是我决定来到这世界的，既然来走这一遭，那就去看看世界，体验世界，千万不要困在一个圈里、一个牢笼里。我想去拉萨，我想用双脚去到更远的地方。\",\"这份实习日记到这就完结了，最后带着美团的老话走啦：既往不恋，纵情向前！\"]},\"1787\":{\"c\":[\"life\"]},\"1788\":{\"c\":[\"实习\"]},\"1789\":{\"h\":\"Github 私有仓库 + Actions 自动部署博客\"},\"1790\":{\"h\":\"背景\",\"t\":[\"之前个人博客都是基于 VuePress，直接整个项目上传到 Github 公共仓库中，然后利用 Github Actions 直接构建到仓库中的一个分支上，再把这个分支部署到 Github Pages 上，就这样用了很久，但是一直有几个问题比较困扰：\",\"源码公开可见，可以被随意复制粘贴到别的地方\",\"修改记录一览无遗，没有隐私性\",\"部分文档不想公开，即使删除后，仍能通过提交记录找回来\",\"综上，网上搜索一番后，发现可以通过 GitHub 创建私有仓库，把源码提交到私有仓库后，通过 Actions 触发自动构建，并推送到一个公开仓库中，再在公开仓库中触发 Github Pages 的部署流程，完成博客更新发布的自动化流程。\",\"GitHub Actions 是 GitHub 提供的一种自动化工作流服务，用于构建、测试和部署项目。它允许你在代码仓库中配置和运行自动化的工作流程，以响应各种事件，比如代码推送、Pull 请求合并等。GitHub Actions 可以帮助团队自动化软件开发过程中的重复性任务，提高效率并确保代码的质量。\",\"GitHub Pages 是 GitHub 提供的一项免费静态网站托管服务。它允许你使用 GitHub 仓库来托管和发布个人、项目或组织的静态网页。\"]},\"1791\":{\"h\":\"折腾\",\"t\":[\"首先我们需要在 Github 创建一个私有的仓库叫 private_repo，并将本地的 Vuepress 博客项目和 private_repo 关联起来：\",\"git remote add origin https://github.com/<username>/private_repo\",\"然后修改博客项目根目录下 .github/workflows/deploy.yml文件，在 workflows 目录下的文件都会被尝试解析为工作流。\",\"# 工作流名称 name: Publish Blog # 当推送到 main 分支时触发任务 on: push: branches: - main # 工作流 jobs: # 名称 build-and-push: # 运行环境 runs-on: ubuntu-latest # 步骤 steps: - name: 检出项目 uses: actions/checkout@v4 with: # 拉取记录数，因为只需要基于最新的版本构建，所以设为1就好 fetch-depth: 1 # 下面三个步骤是 VuePress 的构建流程，根据不同 Static Site Generators 自定义 - name: 安装 pnpm uses: pnpm/action-setup@v2 with: version: 8 run_install: true - name: 设置 Node.js uses: actions/setup-node@v4 with: node-version: 18 cache: pnpm - name: 构建文档 env: NODE_OPTIONS: --max_old_space_size=8192 run: |- pnpm run docs:build > src/.vuepress/dist/.nojekyll # 关键步骤：利用这个 action 将生成的文档 push 到指定仓库 - name: 部署到公共仓库 uses: peaceiris/actions-gh-pages@v3 with: # Personal Access Token 下面讲 personal_token: ${{ secrets.PUBLISH_BLOG }} # 指定push的仓库 external_repository: <username>/public_repo # 指定push的分支 publish_branch: main # push 的目录 publish_dir: src/.vuepress/dist # 是否只保留最新的提交记录 force_orphan: true\",\"然后我们再到 Github 上创建一个公共仓库 public_repo，然后到 Settings -> developer settings -> Personal access tokens -> Fine-grained tokens 创建一个 Personal Access Token（PAT）。这里 Github 提供了两种 PAT：\",\"Fine-grained tokens：细粒度的访问令牌，可以指定适用的仓库，有效期最多一年\",\"Tokens：经典访问令牌，无法指定具体仓库，粒度较粗，有效期可以无限\",\"推荐使用新的 Fined-grained tokens，更加安全，有效期可以长一点，偶尔维护一下也不麻烦。给予这个 token 公共仓库 public_repo 的读写权限即可，生成后记得复制一下 token，因为关闭页面后这个 token 就看不到值了。\",\"然后我们到 private_repo 的 Settings -> Secrets and variables -> Actions 页面，创建一个 Secret，名称任意，value 就填刚刚生成的 PAT 即可。\",\"这一步的原因在于，Github Actions 是在一个容器里运行的，因此要推送代码到某个仓库前必须通过某种方式验证对这个仓库有读写权限。上一步创建的 PAT 正好就授予了 public_repo 的读写权限，因此 private_repo 这个仓库在执行 Github Actions 时，可以通过${{ secrets.<secret_name> }}这样的形式来引用这个 PAT，进而通过权限系统的校验。\",\"最后，我们把本地的 VuePress 项目推送到 private_repo，就会自动触发构建流程推送到 public_repo 了，记得在 public_repo 中开启 Github Pages，从主分支的根目录执行部署即可。\",\"文末参考的几篇文章里都是使用手动执行 Shell 脚本的方式去推送，比如通过\",\"git push \\\"https://${{github.actor}}:${{secrets.pat}}@github.com/username/xxx.git\\\"\",\"这种基于用户名+密码的校验方式去验证，但 Github 在 2021 年已经关闭这种不安全的验证方式，全部换成基于 Token 的鉴权了。正好在网上偶然看到这么个可以执行自动推送的 action，相比 Shel 脚本使用更方便，看了下源码，是通过\",\"https://x-access-token:${personalToken}@${getServerUrl().host}/${publishRepo}.git\",\"利用x-access-token头部实现的鉴权。\"]},\"1792\":{\"h\":\"Vercel 部署\",\"t\":[\"突然想到自己还有个 Dynadot 白嫖的域名没用上，这次顺便给他用起来的吧。先到 Vercel 上授权 Github 仓库，然后同样的，设置从 public_repo 的根目录直接部署即可。主要是利用 Vercel 实现自定义域名和 CDN 加速，服务器是必不可能买的。\",\"Vercel 提供了一种简单而强大的方式来部署和托管前端应用程序。其自动化、全球 CDN、Serverless 架构等特性使得开发者能够更专注于应用的开发而不必过多关注基础设施的维护。\",\"然后到 Dynadot 上，根据 Vercel - Domain 里面给的提示给域名设置一个 A 记录，等待10分钟让 DNS 记录扩散到全球的 DNS 服务器即可：\",\"复习一下 DNS(domain -> IP) 记录类型:\",\"A 记录: Address Record，将域名映射到 IPv4 地址，例如： example.com IN A 192.168.1.1\",\"AAAA 记录：IPv6 Address Record，将域名映射到 IPv6 地址，例如： example.com IN AAAA 2001:0db8:85a3:0000:0000:8a2e:0370:7334\",\"CNAME 记录：Canonical Name，用于创建域名的别名，将一个域名指向另一个域名，例如将 www 别名指向 example.com： www IN CNAME example.com\",\"MX 记录： Mail Exchange，指定邮件服务器的域名和优先级，它告诉发送电子邮件的邮件服务器应该将邮件发送到哪个邮件服务器。例如表示邮件服务器 mailserver.example.com 具有优先级为 10： example.com IN MX 10 mailserver.example.com\",\"PTR 记录: Pointer Record，用于将 IP 地址映射回域名，主要用于反向 DNS 查找。例如表示 IP 地址 192.168.1.1 对应的域名是 host.example.com： 1.1.168.192.in-addr.arpa IN PTR host.example.com\",\"TXT 记录：Text Record，用于存储文本信息，它通常用于验证域名的所有权、提供 SPF 记录（用于邮件认证）等。例如： example.com IN TXT \\\"v=spf1 include:_spf.example.com ~all\\\"\",\"另外可以通过\",\"dig +short example.com A @223.5.5.5\",\"命令向指定 DNS 服务器查询指定域名的指定记录。\"]},\"1793\":{\"h\":\"参考\",\"t\":[\"https://www.xheldon.com/tech/the-using-of-github-pages.html\",\"https://juejin.cn/post/7008847699919241229\",\"https://zhangferry.com/2022/07/24/github_action_for_blog_deploy/\"]},\"1794\":{\"c\":[\"博客\"]},\"1795\":{\"c\":[\"折腾\"]},\"1796\":{\"h\":\"骑行入坑记\",\"t\":[\"在学校一开始买自行车只是因为长沙的夏天过于炎热，为了从宿舍到实验室那“遥远”的2公里通勤，在学校附近花了400来块买了辆凤凰牌山地车，不过好像是盗版，因为那个凤凰的标是拼音，而不是英文的Phoenix，不过借着这辆小破车学会了基本的变速啥的，也骑着它骑过30公里，算是把屁股都坐烂了。\",\"后来沉迷过一阵子的跑步，然后膝盖受伤，无奈转向了撸铁和骑车作为运动，毕业前的寒假又在闲鱼上花了600收了辆二手的沃雷顿追风200。\",\"第一次骑上了公路车，和山地车完全不一样，轻轻松松速度就能上20，骑上去也还挺帅，骑着它我的最远骑行距离也到了100km，开始用行者记录自己的骑行记录。\",\"毕业时，把那辆车400块出了，在北京又买了心心念念许久的公路车，不过也着实就纠结了好久，在XDS AD350、Java 鱼类6Top、瑞豹Super AL几个中纠结了好久，最后还是花了💰3888买了个自认为颜值最高的AD350，不过还只是浅浅骑了两次，没时间骑长距离，确实如网上所说存在一些会蹭的小毛病，不过问题不大，帅就完事了。\",\"配置\",\"XDS AD350\",\"Java 鱼雷6-Top\",\"Java 鱼雷6-Top 7120\",\"瑞豹 Super AL\",\"车架材质\",\"铝合金\",\"铝合金\",\"铝合金\",\"铝合金\",\"车架类型\",\"破风架\",\"破风架\",\"破风架\",\"耐力架\",\"前叉\",\"铝合金\",\"碳纤维\",\"碳纤维\",\"铝合金\",\"轮组\",\"700c*28c，桶轴\",\"700c*25c，桶轴\",\"700c*25c，桶轴\",\"700c*28c，桶轴\",\"刹车\",\"油压碟刹\",\"油压碟刹\",\"油压碟刹\",\"油压碟刹\",\"变速器\",\"蓝图R7 2x10速\",\"蓝图RX 2x12速\",\"禧玛诺105 2x12速\",\"蓝图R9 2x11速\",\"重量\",\"10.8\",\"11.8\",\"11.8\",\"10.4\",\"价格\",\"3888\",\"3999\",\"4999\",\"3999\",\"骑车的时候可以听风的声音，而且是持续的心肺有氧，真的很爽～不过也要注意安全！\",\"配件：\",\"洛克兄弟Q5尾灯\",\"迪卡侬RC500骑行裤\",\"洛克兄弟骑行水壶\",\"GUB K80头盔\"]},\"1797\":{\"c\":[\"life\"]},\"1798\":{\"c\":[\"自行车\"]},\"1799\":{\"h\":\"第一台相机\",\"t\":[\"在经历了 Sony A6400 -> Nikon Z50 -> Nikon Z30 -> Canon R50 -> Nikon Z50 这一路的纠结，买了退退了买，其实心里一直是倾向于尼康的，风景大片不比人有意思多了。最终，我的第一台相机到手 -- Nikon Z50 😁😁😁\",\"买什么佳能索尼，尼康才是真男人~必须放一个尼康战歌助助兴！\",\"这优雅严肃的机械设计，哪个碳基生物会不喜欢呢！\",\"港版套机，镜头尼克尔 Z DX 16-50mm f/3.5-6.3 VR\",\"APS-C 画幅\",\"有效像素 2088万\",\"处理器 EXPEED 6\",\"ISO 100-51200\",\"快门速度：1/4000 至 30 秒\",\"支持 180° 翻转屏、电子取景器、内置闪光灯\",\"Mirco-USB接口\",\"发布于 2019年10月\"]},\"1800\":{\"c\":[\"life\"]},\"1801\":{\"c\":[\"摄影\"]},\"1802\":{\"h\":\"个人观影指北\"},\"1803\":{\"h\":\"爱优B腾\",\"t\":[\"以爱奇艺、优酷、哔哩哔哩、腾讯为主的在线流媒体平台，包括近几年崛起的芒果TV，应该是受众最多的正版观影方式，优点是简单省事，不需要自己去找资源，点开即开，而且不同设备平台上都有对应的软件。\",\"但是这些平台的缺点也很明显，首先一个是要花钱开会员，包括但不限于vip、svip、超前点播等一系列恶心操作，而且由于版权的分散，很可能今天想看的电影在爱奇艺，明天想看的在腾讯，于是不得不同时开多个平台的会员，money--。另一方面，这几大流媒体平台的视频质量堪忧，所谓的1080p、蓝光通常都是虚标的，可能只是把分辨率强行拉升，而实际码率低的不行，下面这张图是B站up主来碗红豆泥的视频里的截图，只能说在座的各位都是垃圾，B站算是矮子里的将军。\",\"相比之下，我电脑里下载的1991年的720p版本《刺杀肯尼迪》的平均码率都已经超过5Mbps，可见为了节省带宽资源，几个流媒体平台的视频画质压缩得有多狠。\"]},\"1804\":{\"h\":\"在线影视站\",\"t\":[\"除了上面这几个正版流媒体平台，网上还有众多的盗版在线视频网站，像什么影视大全之类，通常是只有网页端，移动端体验不佳。当然在安卓平台上经常有此类的app传播，不过隐私安全问题很难保证。这些平台的视频质量参差不齐，有的也不错，比如低端影视的视频质量蛮高的，需要自己一个个辨别。这些网站的使用体验都一般，经常是广告满天飞，很讨厌。它们最大的问题是经常跑路，或者被封禁，可能过段时间就得重新找一个网站，太心累，个人非常不推荐，只适合找非常小众的电影偶尔凑活用。\"]},\"1805\":{\"h\":\"网盘\",\"t\":[\"这也是国内用户最主要盗版观影方式了，以百度网盘、阿里云盘、夸克网盘、迅雷网盘为主，好处是使用方便，热门的资源更新快，可以直接在线看，视频质量高。可以配合阿里小站、夸克小站等资源站使用。\",\"缺点是需要开会员，否则功能上各种限制，像百度网盘这种，不开会员基本处于不可用的状态（谁能想到5G时代还得忍受100kbps的下载速度啊），而且跟各个流媒体平台一样吃相难看。不过最大的问题还是资源容易被封，尤其是热门的资源/不健康的资源，容易被ban掉。使用体验上，国内的网盘普遍不咋地，界面杂七杂八，尤其是百度网盘（抵制百度，从我做起），而且疯狂想要你的个人数据，比如一直提示你备份自己的相册，上传到它们的网盘里，然后它们拿去干嘛了可想而知，虽然不太可能泄露出去，但就是不想给。\",\"而像坚果云、OneDrive、Google Drive这些同步盘，虽然也能传播资源，但是总归容量太小不合适，而且资源太少，很难找。\"]},\"1806\":{\"h\":\"网盘进阶\",\"t\":[\"目前综合各方面最好用的应该还是阿里云盘，界面还算清爽，不过官方客户端还是要开会员才能原画播放视频，而且也开始限速了（阿里的承诺永远不能信）。\"]},\"1807\":{\"h\":\"Alist\",\"t\":[\"不过好在目前阿里云盘的第三方接口还没有限速，可以配合第三方应用挂载，甚至使用本地播放器实现原画观看。这里推荐电脑端使用Alist挂载，不仅支持阿里云盘，还支持多种网盘、存储类型的统一管理，不过使用上需要一定的门槛。\"]},\"1808\":{\"h\":\"VidHub\",\"t\":[\"对于移动端，推荐使用VidHub，可以自动刮削视频文件信息，获取整理电影剧集封面和详细信息，打造私人影视库。当然不差钱的可以选择infuse，支持的视频格式更多，不过很贵就是了。\",\"PS: 传闻五月底阿里云盘要推出第三方的权益包，可能第三方也会进行限速，而且无法原画质观看。VidHub新版本也开始收费了，建议先观望。\"]},\"1809\":{\"h\":\"Emby/Plex/Jellyfin\",\"t\":[\"上面的Alist/VidHub都是通过第三方去连接自己的网盘资源，还有一些开源的解决方案，如Emby/Plex/Jellyfin等可以连接一个共有的/私有的资源库服务器，资源库整合了很多网盘的资源，就像自己的影视库一样。\",\"如果要自己建私人库，就得自己买硬盘，找资源等等，还是挺麻烦的，笔者本身并没有收藏的爱好，属于看完即删，想看再下的类型，因此选择使用公共服。公共服也分免费的公益服和收费的公共服，然而视频传输的硬件、网络开销都是非常大的，所以免费的很少，或者很难拿到账号。收费的就比较多了，Telegram上可以搜到很多，比如大名鼎鼎的Misakaf，低配版3￥/月，价格倒也不算贵。不过资源库的资源是需要维护的，更新及不及时得看负责人了。\"]},\"1810\":{\"h\":\"下载站\",\"t\":[\"其实，下载站才是我现在最常使用的观影方式，总感觉下到自己硬盘的资源才是自己的，而且看的时候不用担心网速问题影响观影体验。下载站是能够获取最高质量影视作品的最佳方式。\",\"放十年前，迅雷一定是最流行的下载方式，吸血p2p下载让它成为了唯一能下死种的下载器，不过这几年迅雷的封禁、软件的体验，都让我不想碰它，已经很多年没有用过了。而像电影天堂这样的下载站要么是p2p下载，要么就是迅雷私有链接，普遍都不太靠谱，经常下载没速度，尤其是国内这种大局域网的网络环境下，很多字幕组、压制组其实都转战网盘了。\",\"相比之下，私有种子PT站就好很多，我现在正在用的就是天大的北洋园PT站，已经用了3年了，上传量也有2.6TB了，基本想要的资源都有，新出的资源也会很快上线，而且这种我为人人，人人为我的下载方式配合考核机制非常符合互联网的开放精神，在此感谢各个压制组。缺点就是准入门槛较高，要么得是高校学生，要么得蹲公开注册的时间点申请，并且对网络有一定限制，像有的高校PT站限制IPv6访问和下载，当然这对在校生来说更好了，因为IPv6的流量不计费，而在普通家庭用户的局域网环境下一般也能下载，但是可能无法上传（可以做种），还是比较头疼的。\",\"PT站的这种方式阻挡了大部分低素质伸手党，以及不愿看使用说明的小白/懒人，维持小范围的用户规模也可以规避审查，有利于社区的长久发展，个人还是非常支持的。除了北洋园这样的高校PT站，还有很多公网的PT站，可以Telegram上关注开放注册的消息。\"]},\"1811\":{\"h\":\"总结对比\",\"t\":[\"方式\",\"优点\",\"缺点\",\"正版流媒体\",\"方便\",\"付费、画质一般、版权分散\",\"在线影视站\",\"方便，资源统一，免费\",\"画质较差，网站体验一般，容易跑路\",\"网盘\",\"较方便，手动找资源\",\"付费、隐私问题、资源和谐\",\"网盘+第三方\",\"较方便，暂时免费\",\"资源库需要维护\",\"下载站\",\"不算方便，需要先下载再观看\",\"资源全、质量高\",\"2024/05 个人方案：阿里云盘+VidHub、Emby、北洋园\",\"2024/08 update: 放弃阿里云盘观影，仅作为文件备份盘。阿里云盘推出了第三方权益包，不花钱走第三方应用的流量会限速，即使花钱也有流量限制，基本等于废了。\",\"2024/12 update: 我的北洋园G了😭，不确定是【不可抗力】还是【停机维护】。。。目前转战到咖啡pt。另外最近开始使用网易爆米花，和 VidHub 功能基本一致，但支持多设备同步，且资源信息会一直保留，不会因为资源失效就消失不见，可以更好得记录自己的观影历史\",\"2025/03 update: 北洋园回来了！网易爆米花越来越好用了，配合天翼云盘等，开个会员还是挺爽的，热门的电影基本都有\"]},\"1812\":{\"c\":[\"life\"]},\"1813\":{\"c\":[\"电影\"]},\"1814\":{\"h\":\"2023 年终总结\"},\"1815\":{\"h\":\"时间线\",\"t\":[\"1月 抗击新冠疫情\",\"2月 在家摆烂过年\",\"3-5月 找实习，整整三个月，每天都是复习背八股，面试，复盘，刷牛客和力扣，所幸最后终于还是拿到了几个厂的offer\",\"6-8月 人生第一份工作，一夜的卧铺从长沙坐到北京，租房、买生活用品、安定下来，实习日记\",\"9-10月 离职回学校备战秋招，然而并没有什么大的收获，直接签了实习的单位\",\"11-12月 每天敷衍导师，快乐地享受生活，旅游、健身、看书、电影、学自己想学的，年底回去给表弟当伴郎，和家人们一起团聚嬉闹。这样的日子太美好了，然而也所剩不多了\"]},\"1816\":{\"h\":\"旅行\",\"t\":[\"2023年一共去了5个城市：\",\"张家界：大自然的鬼斧神工\",\"北京：璀璨的华夏文明\",\"天津：不甘没落的北方都市\",\"广州：传统与现代兼并包容\",\"盐城：安逸舒适的三线城市\",\"应该是长这么大，第一次一年去这么多城市，小时候都没怎么出去玩过，长大了有一定经济能力了就特别向往自由，就连网易云的年终关键字都是“自由”。不过实习的日子让我明白，生存会压榨生活的空间，所以趁着自己毕业前还有半年的自由时光，多出去走走吧，也作为自己的毕业旅行。2024年的6月，一定要去梦中都想去的西藏！\"]},\"1817\":{\"h\":\"书影音\",\"t\":[\"其实自己一直不爱看书，一看书就犯困，相较于静态的书更喜欢电影，所以23年也就看了5本书（标记了一本以前看的），其中还有两本技术书。不过在读王小波的时候，有种和一个已逝的人对话的奇妙感受，年末又因为B站王骁的中东系列开始看《征服与革命中的的阿拉伯人》，历史书还是挺有意思的。23年因为要找工作，卸载了王者，大半年过去对游戏已经没兴趣了，现在每天晚上看会儿书，充实点不太灵光的脑子。24年争取多看一本，看6本！\",\"影视今年87部，应该还有两部豆瓣词条被封的，主要《加勒比海盗》、《进击的巨人》两个系列占了大头，不过今年最喜欢的还是《流浪地球》和《走向共和》了。2024继续争取一周一部电影吧。\",\"摇滚乐，因为乐夏喜欢上了摇滚乐，也可能是年纪大了，一些老歌越听越有味道，有点后悔没去新裤子的长沙演唱会，不过还是更喜欢音乐节那种蹦迪氛围。回春丹的《鲜花》在我这就是年度最佳现场！\"]},\"1818\":{\"h\":\"运动\",\"t\":[\"一年过去了，膝盖还是不咋样，稍微好一点就想去跑两圈，结果就是反反复复。。。23年肌肉量确实长了不少，不过跑的少了体脂也跟着上来了。最近开始了解公路车，等上班了高低整一辆。\",\"今年还去跑了个长沙马拉松的欢乐跑，以前不懂为什么要费那么大劲办这么个没什么观赏价值的活动，但是实际参与了才能感受到现场的那种氛围，大家即使困顿于生存，有各种不如意，但是也都在不停地奔跑，认真快乐的体验生活。\",\"生命不止，折腾不止。\"]},\"1819\":{\"h\":\"数码\",\"t\":[\"今年用实习的工资，正式从安卓换 iPhone 了，其实有挺多不方便的，红外、门禁等等，最好的方案是iphone配合NFC手环+能联网的家电，不过苹果的软件生态还是最强的护城河，苹果的任何新特性，软件厂都能巴巴得往上赶，适配积极性这方面安卓目前完全没法比。年底又给妈妈换了 iPhone 15，标准版的背板实在是太TM舒服了，比手上的 pro 温润多了，可惜哈皮厨子的刀法太操蛋了。\",\"24年计划学一学摄影，买个入门相机玩一玩～放几年前我还是个买手机只买红米，完全不看相机参数的人，这几年也渐渐想要留下人生中那些不想遗忘的时刻，拍照也会开始注意构图。很喜欢up主 Links 的一句话：摄影，一瞬即永恒！\"]},\"1820\":{\"h\":\"爱情\",\"t\":[\"🈚️\"]},\"1821\":{\"c\":[\"life\"]},\"1822\":{\"c\":[\"年终总结\"]},\"1823\":{\"h\":\"2024 年终总结\"},\"1824\":{\"h\":\"时间线\",\"t\":[\"1-6月：写论文、旅游、毕业，享受最后的学生时光\",\"7-12月：回到北京，步入社会，成为一个真正的牛马\"]},\"1825\":{\"h\":\"旅行\",\"t\":[\"上半年，没有了找工作的压力，唯一的正事就是写毕业论文，自己身上也攒了点小钱，于是一有时间就跑出去玩，想榨干青春的最后一点疯狂。2024年一共去了19个城市：\",\"一月，放寒假后就开始从学校一路玩回去，从长沙出发 -> 武汉 -> 南昌 -> 苏州，再回到上海，一直到除夕前夜才到家，也确实累着了。华中三杰真的好吃又实惠。进入长三角，又是完全不一样的风土人情，物价直接起飞。\",\"二月，过完春节，和妈妈一起去趟山东，刚落地泰安，就被路上的好心大哥提醒大雪封山，G。匆匆吃了个早饭就买票先去济南转了两天，玩完再回到泰安爬山，泰山虽然盛名，但山色其实一般。\",\"四月，回到学校后，和对象一起去了隔壁的湘潭，第一次尝试槟榔，翻江倒胃，感觉差点晕在马路上；五一节前，又错峰去了趟古都西安，没带厚衣服，在冷雨中感受了秦都的震撼。\",\"五月，和对象又一起夜爬了武功山，第一次在山上露营、吃泡面、过夜，高山草甸真的好美啊\",\"六月，西宁-拉萨-林芝-山南-日喀则-那曲-兰州。我终于，踏上了西藏的土地，这一程，终身难忘。想对23年的自己说，愿望实现了！第三极——西藏\",\"九月，中秋节跑去山海关兜了一圈，角山+老龙头入海口+天下第一关，很安逸的小县城\",\"十月，国庆看海游记，威海-烟台-大连，见了多年未见的老友，第一次坐海上轮渡，超喜欢威海，想天天去爬猫头山\",\"上半年真的挺疯狂的，到处浪，很累，但也真的真的很快乐，高山、大海、草原、雪山、荒原、日出、晚霞，还有路上遇到的、看到的人们。明明还没开始做牛马，就已经无限向往旷野了。下半年明显就过得乏味很多，上班的每一天都有新的挑战，周末才能有时间在家好好躺着休息，干点自己喜欢的事，骑车、电影、逛论坛，可是还要做饭、打扫卫生等等杂事。唉...\"]},\"1826\":{\"h\":\"书影音\",\"t\":[\"下半年由于天天要坐半个小时的地铁上班，并且地铁上没有信号！！！只能通过看书来打发时间，2024 年一共看了 12 本书（含一本豆瓣未收录的《独行西藏》），达成目标（6 本）✅ 印象最深的是陈忠实的《白鹿原》，看完白鹿原上两代人的波折命运，再回望开篇年少的白嘉轩先后娶七房太太，感觉像跟着书中的人物过了完整的一生。\",\"影视今年一共 75 部，今年最喜欢的是《热辣滚烫》，想到了自己减肥的那段时光，有被共情到，看的老子哇啦哇啦的，贾玲的两部作品，每一部都狠狠触动我的感情。还有《繁华》，老胡还是帅啊。2025 年尽量继续一周一部，但比较难，周末一有事就顾不上了。\",\"今年去了两次 livehouse，现场的氛围果然还是不一样，而且能听乐手创造出一些即兴的演奏，希望明年能去一次音乐节。年度歌手时隔 4 年，再次回到 Linkin Park，应该单纯是歌单里他们的歌最多。\"]},\"1827\":{\"h\":\"运动\",\"t\":[\"上半年学校的健身房装修跑路，下半年上班劳碌，只有周末会出去骑车，偶尔在公司撸撸铁，在家做做操，保持基本形态就行。现在更多的是把运动当成一个放松的活动，倒没有对身材有过多的追求了。不过今年挑战了骑行 100km，也算是为了未来骑行 318 苦练基本功。年底在北京也第一次尝试了滑雪这项运动，不过一年一次就够了，真的巨累。\"]},\"1828\":{\"h\":\"数码\",\"t\":[\"年初狠下心，全款拿下了 Nikon Z50 小套，今年的所有旅行，我都带着它一起，所幸也拍下了很多很满意的照片，500px 签约进度 24/30（虽然还没有赚到一分钱）。下半年，心心念念想买长焦，正好上班挣了点小钱，一咬牙一跺脚，Nikkor Z 24200 三期免息拿下！\",\"上班之后在公司一直用 Mac，回到家再用自己的 Windows 怎么都不得劲，又一咬牙一跺脚，三期免息+学生优惠，拿下 MacBook Pro 14 和 Airpods Pro，特别是耳机，上班路上真的幸福感提升明显。\",\"另外为了提升自己的居住幸福指数，还买了米家的两个小玩意，空调伴侣和热水器的智能插座，可以定时开关，查看电量等等，男人的快乐就是这么简单～另一方面，也可能是年纪大了，现在对数码的兴趣越来越小了，以前几乎天天都要逛酷安刷帖子，现在也很少打开了。\"]},\"1829\":{\"h\":\"爱情\",\"t\":[\"有幸福，也有遗憾。\"]},\"1830\":{\"c\":[\"life\"]},\"1831\":{\"c\":[\"年终总结\"]},\"1832\":{\"h\":\"第三极——西藏\",\"t\":[\"记不清是从什么时候开始的，西藏成了心中的一个执念，执念这个东西很难得，也挺可怕的，人活着不就是为了几个执念。一年前，认识了一个骑行进藏的骑友，看了况露兄的《行疆》，从此对西藏的向往一发不可收拾，真的是做梦都能梦到，想想就会热泪盈眶的那种。终于在2024年的毕业季，踏上了西藏的旅程。\"]},\"1833\":{\"h\":\"进藏\",\"t\":[\"抖音上流传着一句话“青春没有售价，硬座直达拉萨”，一开始也是打算直接长沙一路硬卧直到拉萨，后来发现长沙-西宁这段的风景其实没太多可看的，壮丽的景色从西宁才真正开始，于是选择了长沙飞到西宁，再换乘晚上的火车硬座到拉萨。\",\"飞机+硬座的价格比全程硬卧还便宜点，而且中途可以在西宁歇上一个白天。很多人都会选择广州-拉萨的Z265次，或者上海-拉萨的Z165次列车，但其实这两辆车过了西宁后很多时间都在晚上，看不到沿途的风景，晚一点发车的Z8991和Y971应该是目前最佳的进藏火车，除了青海湖是在半夜经过，从可可西里开始，往后的青藏铁路风景一定不会让你失望。\",\"飞抵西宁时的丹霞地貌着实震惊到本江苏人了，层层叠叠的山峦，这辈子都没见过这么多的山，而城市就是在一群大山的夹缝中建造起来的，人类真的是太牛了！\",\"我们在西宁呆了一个白天，落地曹家堡（bu，第四声）机场直奔下南关街吃了当地的民族特色美食，然而并不是很习惯，玫瑰糕、牛舌饼、炒羊肠、酿皮都不是很对胃口，不过西北面食的油辣子是真的香。下午去了藏文化博物馆，落地机场的时候薅了青海的免费景点门票立省￥60。\",\"晚上吃了点杂七杂八的，喝了点当地的酸奶（原味的巨酸），就到西宁火车站准备硬座进藏了。刚上车的时候看见一个藏族阿姨用一个布兜背着一个可爱的宝宝，排队升卧铺的人都很善良地让阿姨优先买票，另一个藏族阿姨直接带了床被子睡在硬座中间，真的是经验丰富。\",\"刚上车的时候是无比兴奋的，心心念念的旅途就要出发了，我们又是合照，又是擦玻璃。然而当夜幕降临，整个人就开始坐立难安，以前从来没有坐过这么久的硬座，无论换什么姿势都不舒服，后面车厢的人不多，可以占一整排躺下，但也难受，最后还是趴在充气枕上半睡半醒坐了一宿，脚边的暖气热得发烫，供氧口呼呼作响...正当精力慢慢消耗殆尽时，天蒙蒙亮了，惺忪的睡眼迷迷糊糊得看见了雪山，是雪山！第一次亲眼见到了雪山！立刻跑到后面拍醒了FY，开始一顿狂拍，这一刻突然觉得一夜的痛苦都是值得的。\",\"兴奋过后，是无尽的头痛，但伴随着青藏高原的美景。由于限速，列车以80km/h的速度慢慢向拉萨驶去，一路上经过了可可西里无人区、沱沱河、三江源、唐古拉山、措那湖、羌塘草原、藏北草原、当雄、羊八井、念青唐古拉山、拉萨河，最后到达拉萨火车站。第一次见到牦牛和藏羚羊，在一望无际的荒野和草原上，它们是少有的生物。中国人在这片荒原上造出了一条天路，通向这个地球上离天最近的地方，真的佩服！\",\"火车上我们也认识了周边一起进藏的小伙伴，两个大四的安徽女生，也是毕业旅行，我们分享零食，聊毕业，聊人生。还有一个在武汉读书的研二小伙，来自日喀则的藏族人，每次回家都得两三天的路程，我问了他很多感兴趣的话题，他父母都是藏传佛教的信徒，会去转山、磕长头，而他现在已经是一名中共党员了，他没有去过珠峰，他依然想回到西藏。\"]},\"1834\":{\"h\":\"拉萨的第一天\",\"t\":[\"一下火车，就感觉到空气的稀薄，呼吸都要很大一口才能让心脏满意，雪域高原，名不虚传。拉萨作为西藏的首府，也是被群山环绕着，城中肉眼可见高耸的光秃秃的大山，建筑风格以白色为主，房顶到处飘扬着经幡。我们坐公交（支持交通联合好评）前往酒店，路上见到了红山上的宫殿，传说中的布达拉宫，拉萨城区确实不发达，不过布达拉宫和大昭寺附近也是人头攒动，和国内的三线城市差不多吧。在公交上，有种很奇妙的感觉，在拉萨这座城市，我一个汉族人才是少数民族，他们说的话我听不懂，举止谈吐也和内地很不一样。\",\"放下行李，第一件事就是用美团外卖点了3瓶氧气罐，开始狂吸。晚上出门吃了第一顿牦牛火锅，很难说好吃，唯一不错的是特制藏族酱料，不过氛围感很好，有藏族小伙唱歌，还给我们戴哈达。后来经司机汪师傅口中得知，我们游客吃的牦牛火锅基本都是假的...回去的路上，高反越来越严重，头痛欲裂，真的就像有人在挠你的脑浆，空气也是可以感知的干燥😭一边吸着氧，一边慢慢往回走，到了酒店实在脏得忍不住，没听劝还是洗澡洗头了。\"]},\"1835\":{\"h\":\"拉萨一日游\"},\"1836\":{\"h\":\"扎基寺\",\"t\":[\"睡了一觉，高反好了很多，但也不能说舒服，鼻孔慢慢开始出血，嘴唇渐渐发黑。在西藏这片土地，生存确实不易。早上在路边吃了顿四川人开的“麻辣牛肉面”，正好是周三，我们就去了扎基寺“求财”。早上十点多，寺外已经排起了长队，队伍的另一边坐着一些乞讨的妇人和儿童。在拉萨，乞讨者随处可见。\",\"扎基寺里供奉的是唯一的女财神扎基拉姆，寺内外有专卖的求财套件：白酒、艾草松叶，以及酥油和哈达。进了寺庙要被僧人流水线般按住磕头，他们甚至还会说英文“Quickly”，还有很多僧侣就坐在大堂里面点钱换给信众，身边摆满了1元/5角的纸钞，每个佛像、喇嘛像前都塞满了纸钞。信仰，在西藏很重要。\"]},\"1837\":{\"h\":\"西藏博物馆\",\"t\":[\"参观完扎基寺，路边的茶馆喝了杯6元一壶的甜茶，很好喝！据说拉萨有1800多家茶馆，以前都是用的牛奶，后来人多了就开始慢慢用甜奶粉冲兑了。茶馆的氛围很好，不同桌的藏族大叔大妈们都能互相说笑说再见，虽然我们一点也听不懂。\",\"喝完我们就去了西藏博物馆，浅浅了解了西藏的历史，西藏博是刚扩建不久的，建筑和设施都很新很好看。西藏的历史基本就是三大部落象雄、苏毗、雅砻，统一于吐蕃王朝，再分裂，后依附于中原王朝。最重要的是西藏的宗教历史，从最开始的原始苯教，到佛教辩法战胜苯教徒后兴盛，又被打压反反复复。和伊斯兰教一样，佛教也有非常多的分支，藏传佛教和印度的佛教、汉传佛教很不一样，藏传佛教本身又有四大派别，太复杂太宏大了。另外很重要的就是西藏的农奴制社会，非常的黑暗，一直持续到我党解放西藏，不过直到今天，西藏还是有很大的生产力没有解放出来。\"]},\"1838\":{\"h\":\"八廓街\",\"t\":[\"下一站是八廓街，鼎鼎大名的大昭寺就在这里，里面有文成公主带进西藏的释迦牟尼十二岁等身像。外围是一圈藏式的商业街，喝了西藏特色的阿刁奶茶（很甜不推荐），我们还在这里喝了青稞酸奶，吃了牛肉干锅作为晚饭（很Nice！）。在这里也第一次见到磕长头的，即使是烈日当空，大昭寺作为藏人心中的圣地，充满了庄严和神圣。\"]},\"1839\":{\"h\":\"布达拉宫\",\"t\":[\"到布达拉宫的时候，已经是八点多了，然而拉萨的上空依然太阳高悬。我们一直等到九点多天才黑，就是为了一睹夜晚的布达拉宫。\",\"等天黑的过程中，偶遇一个大姐过来借充电宝，闲聊中了解到她一个人从北京直飞拉萨，来见她在林芝援藏的儿子，言语间可以看出大姐是个有文化且勇敢的人！\"]},\"1840\":{\"h\":\"跟团六日游\",\"t\":[\"大多数人的第一次进藏，都会走拉萨-林芝-山南小环线，不过我又对珠峰有那么一点点的执念，于是选择了日喀则环线，多了珠峰大本营和纳木措。其实心里是非常想走阿里大环线的，奈何时间不够，种在心里吧，毕竟每个去过拉萨的人最后都会回到拉萨。\"]},\"1841\":{\"h\":\"Day01 - 6.6\",\"t\":[\"一大早坐公交到罗布林卡北门，简单吃了个藏面、牛肉饼子，配酥油茶（都不咋地），就上了藏AL5591汪师傅的车，西藏所有正规旅行团的车都是藏AL+4位数字，师傅一路骂黑车，一边也骂西藏文旅部门，一边又在准备投靠黑车...我们上的是一个小巴车，一共12人的团，由于我们到的最晚，导致我和FY全程都是分开坐的，一开始很失落，后面发现也正因此我们结识了更多的友谊。\",\"出了拉萨城，汪师傅一路念经，路过巴松措的时候吃了团餐，真的太难吃了，什么鸡爪炒魔芋、鸡爪炒土豆，名副其实“生命维持餐”。师傅念着念着就开到了林芝-雅鲁藏布大峡谷。绕着盘山公路上行就到了南迦巴瓦山下的索松村，我们真的很幸运，看到了南迦巴瓦和彩虹同框！\",\"晚上师傅带我们到7782燥吧参加了一个篝火晚会，真的，驻场乐队的每一首歌都是我的最爱，新裤子、许巍、赵雷、Beyond...每一首都仿佛击打在我的心上。主唱一边骂着狗比人生，一边唱着激情的摇滚和动人的民谣。主唱听着像北京口音，说他们乐队三人都是废物，跑到林芝来唱歌，听着听着热泪就溢出来了。然后是雪山下的蹦迪，刚开始蹦我的手机就掉地上了，然后就全程在找手机...到10点钟，索松村不让插电放音响了，我又不愿离开，于是大家围着篝火，开始不插电清唱，同车的WJ、WY还夸我唱歌好听来着。还有同车的一个大哥请我们喝了拉萨啤酒，司机汪师傅给我们全车人点歌，这一夜真的太幸福了，仿佛自己过了一种完全不一样的人生。才第一天，我就知道，西藏我来对了，来值了！\"]},\"1842\":{\"h\":\"Day02 - 6.7\",\"t\":[\"为了看南迦巴瓦的日出，6点钟就醒了，憨憨FY叫不醒，我就一个人跑出去坐在秋千上等待日出，可惜云雾太多，放弃回去接着睡了，路上看到一个大哥在雪山下晨跑。\",\"早餐是稀饭、馒头、咸菜，跟团的6天每天早晨都是这三样...出雅鲁藏布大峡谷的路上，近观了昨天路过的丹娘佛掌沙丘，也是个小景点，可以付费滑沙，但是看着沙丘上的两个小姐姐滑下去又得自己往上爬也是蛮累的。\",\"接着是无尽的公路、雪山、草原、牦牛。\",\"路过贡德林草原的时候，我们下车挂了经幡，经幡上印有佛经，在信奉藏传佛教的人们看来，随风而舞的经幡飘动一下，就是诵经一次，在不停地向神传达人的愿望，祈求神的庇佑，经幡成了连接神与人的纽带。下午又去了趟亲猴台喂猴子，然后再回头到达泽当，也就是山南市的行政处，泽当很小，基本就是一条道可以逛完整个市区。今天几乎一整天都在车上，很累，不过晚上还是和FY、WJ、WY一起逛了当地的神力时代广场。\"]},\"1843\":{\"h\":\"Day03 - 6.8\",\"t\":[\"吃完生命维持早餐，我们继续驱车，经过一座座大山边凿出来的盘山公路，在一个观景台看到了藏獒、小羊羔，以及穿着漂亮的牦牛，他们都被藏民拴着，作为游客拍照打卡收费的工具，其实看着是有些可怜的。我们到西藏寻找自由，它们失去自由。\",\"经过一段拥堵的公路，我们到了西藏的三大圣湖之一：羊卓雍措，见到的第一面，我们全车了都叫了出来，汪师傅让我们喊了句国粹：“卧槽！” 太蓝了！从未见过的蓝，难以置信的深蓝！太美了！\",\"等到了另一个观景台，看到很多海鸥，在羊湖找到了打鸟的乐趣。太！美！啦！\",\"离开羊湖，下一站是卡若拉冰川，就是在这个海拔5000多米的高原上，我们竟然还要爬山...真的是每走一步都是煎熬，每爬几十米就得坐下歇歇，猛吸几口氧气，所幸安全登顶。这还没完，下山更是一条陡坡，几乎是一点点往下滑到底的，真的太危险了。卡若拉也是整个行程中最危险的，高反最严重的地方，还好我们全车人都成功到达终点。\",\"今天最后的景点是满拉水库，经过卡若拉的生死考验，到这里已经无心观景了，只记得水有点绿...晚上到日喀则市区已经是将近十点钟了，师傅推荐租氧气罐，大哥因为今天身体实在不适激情下单了一罐￥700的氧气，而我们其它人由于贫穷决定听天由命。晚上点了顿肯德基外卖狠狠吃了一顿！\"]},\"1844\":{\"h\":\"Day04 - 6.9\",\"t\":[\"一早发车，经过不知道多少个山路十八弯，我们终于到了珠穆朗玛峰国家公园。路上看到一个骑着自行车上珠峰大本营的老哥，太TM牛逼了！\",\"经过珠峰108拐后，到了一个观景台，在这里，我们看到了5座海拔8000米以上的山峰：珠穆朗玛峰、洛子峰、马卡鲁峰、卓奥友峰以及希夏邦马峰。太！壮！观！了！我问同车的爽姐想不想爬珠峰，她说这辈子还真可以试试哈哈哈~\",\"又沿着盘山公路拐啊拐，我们到了景区门口换乘环保车，继续坐车1个小时到达了珠峰大本营，近距离看到了世界最高峰——珠穆朗玛峰！然后由于太冷，打卡完高程碑我们就躲到了超市取暖，真的好冷啊。然后一直到8点多，看到WJ她们的消息，我们立刻跑出去开始一顿狂拍日照珠峰。听师傅说，以前珠峰大本营离珠峰还要更近，这几年由于环境问题又后撤了几十公里。其实从山形上，珠峰并不是最美的，更多的在于它的世界第一高的意义，世人都知道世界第一高是珠穆朗玛峰，但很少人知道世界第二高峰——乔戈里峰就在我国新疆。\",\"拍完照，我们准备乘环保车到山腰处的扎西宗乡入住，路上遇到一个摄影师大哥，向我们展示他拍的日照金山和珠峰银河，这位大哥一个月上了三次珠峰，脸都快黑成藏族了，感觉就像《白日梦想家》里的摄影师尚恩照进了现实，下图就是这位大哥当晚的成果，太震撼了！\",\"到了扎西宗乡，我和FY奇奇怪怪被单独安排到了一个四人间，和一个司机师傅住，还好师傅人不错。我们吃完泡面，就和同车的四个女生一起去看星空，我们朝着黑暗的方向前进，渐渐得，满天繁星出现在我们眼前！他们还看到了流星，而我在沉迷调整相机一次都没看到...由于技术太烂，相机拍的全是废片，转投手机。快结束的时候，我越过路边的小溪，在人家的田地里终于拍到了一张满意的成片。\",\"到了住处，实在是太激动了，忍不住把这几天的照片筛了9张，简单处理就发了个朋友圈，来之前想了很多关于西藏的文案，最后用的只是当晚的简单记录：“和朋友们一起拍到了美美的星空，睡觉~”\"]},\"1845\":{\"h\":\"Day05 - 6.10\",\"t\":[\"今天我们离开了日喀则，几乎全程都在车上赶路，经过了不知多少的雪山、草原，不过在经过唐古拉山观景台的时候，我们很幸运得又看到了一次彩虹，晚上到达了当雄。\",\"这天正好是端午节，汪师傅和我们一起吃了牦牛火锅（据说是正宗的），还在距家4000多公里的地方吃上了粽子。吃完我们学生五人组在当雄县闲逛，原来这里是青藏铁路经过的地方，我们进藏的时候就已经路过了。\"]},\"1846\":{\"h\":\"Day06 - 6.11\",\"t\":[\"最后一天了，一早从当雄出发直奔纳木措，很近，2个小时就到了。到景区换乘环保车，这车也是当地居民的公交，遇到好几个藏族的小学生也搭我们的车，想给其中一个让座来着，可是小朋友好像有点怕，朝后退了退不愿意坐，不过下车后还是朝我们挥了挥手。到了纳木措，也是很震撼，虽然可能被羊湖震撼过一次，冲击力没有那么强了。\",\"汪师傅带我们爬了后面的小山，虽然海拔也有4700多，不过这几天下来身体适应了很多，小分队全程没有吸氧也爬上去了，上面的景色太美了！给汪师傅拍下了他的人生照片，霸气!\",\"下了小山后，又开始打鸟，由于焦段不够，相机基本都是废片，还是切手机了。\",\"结束了纳木措的行程，我们下午就一路回拉萨城了。最后汪师傅带我们到了一个特产店免费吃，我觉得还行就买了几十块的小零食。然后各自回了酒店，结束了这趟跟团游。\",\"这一天到这还没结束，晚上我们和WJ、WY、XX三人又约了一起去汪师傅推荐的娜玛瑟德餐厅吃了顿饭，这家餐厅很丰富，既有藏餐，也有西餐、尼泊尔餐、印度餐等等，有个服务员小哥就是尼泊尔人，在一旁服务四个德国人。中途还偶遇了同车的黄毛姐姐。在娜玛瑟德终于吃到了糌粑，一瞬间感觉和小时候吃的某种东西味道口感一摸一样，但是记不得是什么了。吃完我们五人散步到布达拉宫广场就散了。\"]},\"1847\":{\"h\":\"拉萨的最后一天\",\"t\":[\"好好睡了一觉后，我和FY去吃了酒店附近的山东饺子馆，很久没有吃过这么香的东西了。然后去喝了布达拉宫边上的霸王茶姬，接着就去参观布达拉宫了。红山上的布达拉宫，以及罗布林卡曾是西藏的政教统治者达赖喇嘛的住所，里面有大量的历史文物，不过很多都看不到，游客参观的线路只是很小一部分，而且门票收费巨贵，我们为了省钱选了二号路线，100块的门票在室内二十多分钟就结束了。其中令我最震撼的是耗费3721公斤黄金打造出来的五世达赖灵塔（墓葬），明显比其他喇嘛的大一圈，也从另一方面反映出当时对普通民众的盘剥。抛开这些历史问题，单从建筑设计上来说，布达拉宫还是非常壮观的。\",\"参观完后我们坐在出口的树荫下休息，看着男男女女、老老少少的信徒绕着布达拉宫磕长头、朝拜，思绪万千。\",\"结束后，我们吃了顿巨辣的麻辣烫，点了外卖作为明天火车上的中饭，就前往拉萨火车站了，在车站还用了支付宝和高德打车的会员权益蹭了下贵宾厅。\"]},\"1848\":{\"h\":\"出藏\",\"t\":[\"出藏我们依然选择了火车+飞机的路线，不过这次在兰州中转，我们机智得选择了拉萨-格尔木的硬卧+格尔木-兰州的硬座，最后再从兰州飞回长沙。上车后，对面的是6个来自内蒙古的大四学生，一聊才发现和我们一样也是硬卧换硬座，而且座位也都还在一起，太巧了。\",\"到兰州当晚吃了辣子王的牛肉面，不同于湖南的辣，西北的辣子香而不辣，太好吃了！第二天去逛了逛甘肃省博物馆，看了马踏飞燕，逛了逛中山桥，见到了黄河，那是真的黄啊。当晚就乘飞机回长沙了，飞机上和隔壁的兰州本地大哥聊了一路，才了解到正因为兰州在西北少数民族和中原文化的交汇点，所以牛肉面会诞生在兰州这座城市。\"]},\"1849\":{\"h\":\"后记\",\"t\":[\"飞机落地长沙，就感到潮湿和闷热，恍惚间已经开始想念西藏了。这十二天的旅程如此快就结束了，回想进藏时的兴奋期待，出藏时的疲惫困倦，一切也都结束了。在西藏，我看到了内地一辈子也看不到的绝美风光，高耸大山、江河湖泊、冰川草原、牦牛与藏羚羊，太美了，真的太美了。\",\"还有一路的朋友们，进藏时的两个大四女生、藏族小哥，布达拉宫广场偶遇的探亲阿姨，团里的勇敢爽姐、黄毛姐、很照顾我们的山东大哥、辞职旅行的河南小夫妻，极度i人的抑郁二人组，以及风趣幽默，看淡人生，只是偶尔开黄腔的司机汪师傅，出藏时的内蒙古六人团，飞机上的兰州大哥等等。特别是WJ+WY+XX三人组，我们在一起聊学业、聊未来、聊星座，聊生辰八字、聊人生，聊为什么不结婚，聊为什么不需要按着父母的意愿而活。\",\"以前觉得自己一个人旅行还算挺勇敢的，来到西藏，发现这个世界不缺勇敢的人。最后一天回到拉萨城时，爽姐就已经开始在车上电话处理工作事宜了，我们所有人也都一样，终归要回到平淡的生活上。这一切的一切，就像汪师傅的音乐所唱，一场游戏一场梦。\",\"“所有到过西藏的人都相信他们会回到西藏”，我也是这样想的，古格王朝、象雄遗址、当惹雍措、冈仁波齐...也许是自驾，也许是骑摩托，也许是骑自行车，318我还没真正走过呢!\"]},\"1850\":{\"c\":[\"life\"]},\"1851\":{\"c\":[\"旅行\"]},\"1852\":{\"h\":\"WebRTC 学习\"},\"1853\":{\"h\":\"1. 获取音视频设备\",\"t\":[\"navigator.mediaDevices.enumerateDevices() .then(gotDevices) .catch(handleError);\"]},\"1854\":{\"h\":\"2. 获取音视频访问+约束\",\"t\":[\"var constraints = { video: {width: 640, height: 320, frameRate: { ideal: 60, max: 120}, facingMode: 'environment', deviceId: videoDeviceId ? videoDeviceId : undefined }, // audio: true }; navigator.mediaDevices.getUserMedia(constraints) .then(gotMediaStream) .catch(handleError);\"]},\"1855\":{\"h\":\"3. 视频特效\",\"t\":[\"<style> .none { -webkit-filter: none; } .blur { -webkit-filter: blur(5px); } .grayscale { -webkit-filter: grayscale(1); } .invert { -webkit-filter: invert(1); } .sepia { -webkit-filter: sepia(1); } </style> ...... <label>Filter: </label> <select id=\\\"filter\\\"> <option value=\\\"none\\\">None</option> <option value=\\\"blur\\\">blur</option> <!-- 模糊 --> <option value=\\\"grayscale\\\">Grayscale</option> <!-- 灰度 --> <option value=\\\"invert\\\">invert</option> <!-- 反色 --> <option value=\\\"sepia\\\">sepia</option> <!-- 褐度 --> </select>\",\"videPlayer.className = filterSelect.value;\"]},\"1856\":{\"h\":\"4. 截取视频帧\",\"t\":[\"// picutre是canvas元素 picture.getContext('2d').drawImage(videPlayer, 0, 0, picture.width, picture.height);\"]},\"1857\":{\"h\":\"5. MediaStream API\",\"t\":[\"MediaStream.addTrack()\",\"MediaStream.removeTrack()\",\"MediaStream.getVideoTracks()\",\"MediaStream.getAudioTracks()\",\"MediaStream.onaddtrack()\",\"MediaStream.onremovetrack()\",\"MediaStream.onended()\",\"videoTrack.getSettings()\"]},\"1858\":{\"h\":\"6. 音视频录制-MediaRecorder\",\"t\":[\"MediaRecorder.start(millisec)\",\"MediaRecorder.pause()\",\"MediaRecorder.stop()\",\" var options = { mimeType: 'video/webm;codecs=vp9' } if (!MediaRecorder.isTypeSupported(options.mimeType)){ console.error(`${options.mimeType} is not supported!`); return; } try{ // stream是录制源 // navigator.mediaDevices.getUserMedia(constraints) 录制视频流 // nnavigator.mediaDevices.getDisplayMedia() 录制桌面显示流(experimental) mediaRecorder = new MediaRecorder(window.stream, options); } catch(e){ console.error('Failed to create MediaRecorder: ', e); return; } // 交付数据时的回调，数据放入buffer，用buffer创建Blob，最后生成URL mediaRecorder.ondataavailable = handleDataAvailable; // 每10ms返回一段数据 mediaRecorder.start(10);\"]},\"1859\":{\"h\":\"7. SocketIO\",\"t\":[\"WebSocket实现客户端和服务器之间的双向通信，SocketIO将WebSocket、AJAX等封装成统一的接口，解决了兼容性问题。\",\"// 创建 var socketIo = require('socket.io'); var io = socketIo.listen(https_server); // 监听客户端连接 io.sockets.on('connection', function(socket)) // 给所有用户 msg={join, leave...} socket.emit(\\\"msg\\\", data); // 给除了自己以外的客户端广播消息 socket.broadcast.emit('msg', data); // 发送给除自己之外的用户 socket.to(room).emit('msg', data); // 发送给房间内所有人 io.in(room).emit('msg', data); // 监听事件 socket.on('joined', function(data)); socket.on('message', function(data)); socket.on('leaved', function(data)); socket.on('disconnect', function(data));\"]},\"1860\":{\"h\":\"8. Stun/Turn/ICE\",\"t\":[\"Stun 协议 （Session Traversal Utilities for NAT） 利用NAT将内网地址映射到一个公网ip和端口 参考： evilpan_Stun\",\"Turn 协议 (Traversal Using Relays around NAT) 用于对称型NAT，实现无法直接连通的客户端的中继服务。 参考：evilpan_Turn\",\"ICE 协议 (Interactive Connectivity Establishment) 为Peers选取最佳的连通方式(Candidate)，包括：1）局域网内直接连通；2）Stun/Turn 映射地址连通； 3）Turn 中继连通。 SDP: （Session Description Protocol）会话描述协议，信息格式的描述标准，描述支持的媒体格式、Candidate等等。 参考：evilpan_ICE 步骤： \",\"形成Candidate Pair：Peer A收集所有Candidate后通过信令传给Peer B，B收到后也收集自己的Candidate，双方都拿到全部列表后，将候选者形成配对\",\"连通性检查：候选对优先级排序，对每个候选对进行发送检查和接受检查\"]},\"1861\":{\"h\":\"9. 媒体协商过程\",\"t\":[\"RTCPeerConnection 类\",\"pc = new RTCPeerConnection([configs]);\",\"方法分类： - 媒体协商 - Stream/Track - 传输相关方法 - 统计相关方法\",\"媒体协商过程 Peer A创建Offer，并执行 pc1.setLocalDescription (收集A的candidates)，发送给signal, Peer B 收到后执行 pc2.setRemoteDescription，然后创建Answer，执行 pc2.setLocalDescription (收集B的candidates)，发送给signal，A收到后，执行 pc1.setRemoteDescription。完成后，双方就知道对方的信息了，就可以协商传输的媒体类型。\",\"具体方法：\",\"pc.createOfffer([options])\",\"pc.createAnswer([options])\",\"pc.setLocalDescription(sessionDescription)\",\"pc.setRemoteDescription(sessionDescription)\",\"pc.addTrack(track, stream)\",\"pc.remove(track, stream)\",\"onnegotiationneeded\",\"onicecandidate \"]},\"1862\":{\"h\":\"10. SDP规范\",\"t\":[\"分为两层：\",\"会话层包括：会话名称、目的、存活时间、多个媒体信息等\",\"媒体层：媒体格式、传输协议、传输IP和端口、媒体负载类型等\",\"Session Description\",\"Media Desciption\",\"v=协议版本\",\"o=所有者/id\",\"m=媒体名称和传输地址\",\"s=会话名称\",\"b=带宽信息\",\"c=连接信息\",\"c=连接信息\",\"a=全局属性\",\"a=会话属性\",\"示例： o=- 70717123728795 2 IN IP4 127.0.0.1 o=<username><session id><version><network type><address type><address> c=IN IP4 0.0.0.0 c=<network type><address type><connection type> m=audio 1024 UDP/TLS/RTP/ASVPF 111 103 104 9 0 8 106 m=<media><port><transport><fmt/payload type list> a=framerate:30 a=rtpmap:103 ISAC/16000 a=fmtp:103 apt=106 a=<type>:<value>\",\"WebRTC 中的SDP\",\"分为：\",\"会话元(v, o, t)\",\"网络描述(c, a=candidate)\",\"流描述(m,a=rtpmap, a=fmtp)\",\"安全描述(a=crypto, a=ice-frag, a=ice-pwd, a=fingerprint)\",\"服务质量 (a=rtcp-fb, a=group, a=rtcpmux)\"]},\"1863\":{\"c\":[\"工具\"]},\"1864\":{\"c\":[\"WebRTC\"]},\"1865\":{\"h\":\"Windows平台搭建Dash系统\"},\"1866\":{\"h\":\"1. Dash简介\",\"t\":[\"Dynamic Adaptation Streaming over HTTP (Dash): HTTP上的动态自适应视频流技术，它将一个视频划分为许多个segment，每个segment有不同质量的副本，能够在播放时根据用户当前的网络状况选择最佳的码率，减少卡顿。详情: https://dashif.org/\"]},\"1867\":{\"h\":\"2. 配置环境\",\"t\":[\"环境 \",\"系统：Windows 10\",\"客户端：Chrome\",\"工具 (安装好并将bin目录加入系统环境变量) \",\"服务器：Nginx 安装教程\",\"编解码器：FFmpeg\",\"视频切片工具：Bento4\",\"播放器：dash.js\",\"视频 \",\"Big Buck Bunny 可以去 https://download.blender.org/peach/bigbuckbunny_movies/ 下载\"]},\"1868\":{\"h\":\"3. 对视频进行编码\",\"t\":[\"目标编码格式：H.264/AVC\",\"目标分辨率级别： \",\"1920×1080 (1080p)\",\"1280×720 (720p)\",\"854×480 (480p)\",\"640×360 (360p)\",\"256×144 (144p)\",\"编码命令：\",\" ffmpeg -i Big_Buck_Bunny_1080p.avi -s 1920x1080 -c:v libx264 -keyint_min 48 -g 48 -sc_threshold 0 -an BBB_1920x1080.mp4 ffmpeg -i Big_Buck_Bunny_1080p.avi -s 1280x720 -c:v libx264 -keyint_min 48 -g 48 -sc_threshold 0 -an BBB_1280x720.mp4 ffmpeg -i Big_Buck_Bunny_1080p.avi -s 896x504 -c:v libx264 -keyint_min 48 -g 48 -sc_threshold 0 -an BBB_896x504.mp4 ffmpeg -i Big_Buck_Bunny_1080p.avi -s 640x360 -c:v libx264 -keyint_min 48 -g 48 -sc_threshold 0 -an BBB_640x360.mp4 ffmpeg -i Big_Buck_Bunny_1080p.avi -s 256x144 -c:v libx264 -keyint_min 48 -g 48 -sc_threshold 0 -an BBB_256x144.mp4\",\"-i：输入文件名\",\"-s：输出的分辨率\",\"-c:v libx264：将视频编码为H.264/AVC格式\",\"-keyint_min 48 -g 48 -sc_threshold 0：固定GOP长度为48帧(即2s，具体由帧率决定)。这里如果没有这个参数后面bento4切分时会报错，具体原因见 FFmpeg的GOP（I帧）对齐问题\",\"-an：不对音频进行编码，dash中音视频分开编码\",\"最后是输出文件名\",\"可以写个bat，扔那边慢慢跑，视频小的话几十秒就好了。完成后：\",\" ​\"]},\"1869\":{\"h\":\"4. 视频切片\",\"t\":[\"使用bento4的mp4fragment对视频进行fragment\",\"mp4fragment --fragment-duration 2000 BBB_1920x1080.mp4 fragmented_1080p.mp4 mp4fragment --fragment-duration 2000 BBB_1280x720.mp4 fragmented_720p.mp4 mp4fragment --fragment-duration 2000 BBB_896x504.mp4 fragmented_480p.mp4 mp4fragment --fragment-duration 2000 BBB_640x360.mp4 fragmented_360p.mp4 mp4fragment --fragment-duration 2000 BBB_256x144.mp4 fragmented_144p.mp4\",\"--fragment-duration：指定fragment时长为2s\",\"使用mp4dash对已fragment的视频进行切片\",\"mp4dash fragmented_1080p.mp4 fragmented_720p.mp4 fragmented_480p.mp4 fragmented_360p.mp4 fragmented_144p.mp4\",\"成后目录中会自动生成out文件夹，里面有mpd文件和切分的segment\",\"视频切片完成\"]},\"1870\":{\"h\":\"5. 编写简易网页播放器\",\"t\":[\"参考：https://github.com/Dash-Industry-Forum/dash.js​\",\"将out里面的video文件夹和stream.mpd放到nginx的html文件夹里，下载dash.all.min.js也放入html文件夹中。\",\"具体的目录结构可以自定义。我这边的目录如下：\",\"demo目录\",\"DashJS.html代码如下：\",\"<!doctype html> <html> <head> <title>Dash.js Rocks</title> <style> video { width: 640px; height: 360px; } </style> </head> <body> <div> <video id=\\\"videoPlayer\\\" controls></video> </div> <script src=\\\"./dash.all.min.js\\\"></script> <script> (function(){ var url = \\\"./stream.mpd\\\"; var player = dashjs.MediaPlayer().create(); player.initialize(document.querySelector(\\\"#videoPlayer\\\"), url, true); })(); </script> </body> </html>\",\"​\"]},\"1871\":{\"h\":\"6. 配置Nginx服务器\",\"t\":[\"配置访问控制，参考：跨源资源共享（CORS） - HTTP | MDN\",\"修改Nginx的conf下的nginx.conf文件中的server段，主要是加入location /file那一块\",\"server { listen 8800; server_name localhost; location / { root html; index index.html index.htm; } location /file { if ($request_method = 'OPTIONS') { add_header Access-Control-Allow-Origin $http_origin; add_header Access-Control-Allow-Methods $http_access_control_request_method; add_header Access-Control-Allow-Credentials true; add_header Access-Control-Allow-Headers $http_access_control_request_method; add_header Access-Control-Max-Age 1728000; return 204; } } #error_page 404 /404.html; error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } }\",\"验证Nginx配置是否正确，正确后启动Nginx\",\"nginx -t start nginx\"]},\"1872\":{\"h\":\"7. 验证\",\"t\":[\"最后打开 http://localhost:8800/DashDemo/DashJS.html 验证是否成功即可\",\"​\"]},\"1873\":{\"h\":\"参考\",\"t\":[\"[1] DSAH视频系统（服务器&播放器）搭建 - 代码先锋网\",\"[2] Nginx 搭建DASH服务器_山城过雨的博客-CSDN博客\",\"[3] Making Your Own Simple MPEG-DASH Server (Windows 10) : 12 Steps - Instructables\"]},\"1874\":{\"c\":[\"工具\"]},\"1875\":{\"c\":[\"视频流\"]},\"1876\":{\"h\":\"youtube-dl & ffmpeg 常用命令\"},\"1877\":{\"h\":\"youtube-dl\",\"t\":[\"列出可下载的视频/音频格式\",\"youtube-dl -F https://www.youtube.com/watch?v=iJvr0VPsn-s -o output.mp4\",\"仅下载音频\",\"youtube-dl -x https://www.youtube.com/watch?v=iJvr0VPsn-s -o output.mp3\",\"下载最佳视频+音频并用ffmpeg合并\",\"youtube-dl -f bestvideo+bestaudio https://www.youtube.com/watch?v=iJvr0VPsn-s\",\"指定分辨率视频和音频，并合并\",\"youtube-dl -f 308+120 https://www.youtube.com/watch?v=iJvr0VPsn-s\",\"转码\",\"youtube-dl -i input.mkv output.mp4\"]},\"1878\":{\"h\":\"ffmpeg\",\"t\":[\"ffmpeg缩放分辨率\",\"ffmpeg -i 1.mp4 -strict -2 -s 640x480 output.mp4 #用-1按原比例缩放，保证视频不变型 ffmpeg -i 1.mp4 -strict -2 -vf scale=-1:480 output.mp4\",\"ffmpeg 截取视频片段和视频帧\",\"ffmpeg -i BBB_2560x1440.mp4 -ss 0:00 -t 10 BBB_10s.mp4 # -ss 开始截取的时间, -t 截取时长, -ss 截取帧的时间，单位秒 ffmpeg -i BBB_8Y.mp4 -ss 5 -f image2 BBB_8Y_5s.jpg\",\"ffmpeg 调整YUV格式视频亮度\",\"ffmpeg -i input.mp4 -vf lutyuv=y=val*0.5:u=128:v=128 output.mp4\"]},\"1879\":{\"c\":[\"工具\"]},\"1880\":{\"c\":[\"折腾\"]},\"1881\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"山城过雨的博客\",{\"1\":{\"1873\":1}}],[\"山南小环线\",{\"1\":{\"1840\":1}}],[\"山南\",{\"1\":{\"1825\":1}}],[\"​\",{\"1\":{\"1868\":1,\"1870\":1,\"1872\":1}}],[\"扔那边慢慢跑\",{\"1\":{\"1868\":1}}],[\"播放器\",{\"1\":{\"1867\":1,\"1873\":1}}],[\"媒体负载类型等\",{\"1\":{\"1862\":1}}],[\"媒体格式\",{\"1\":{\"1862\":1}}],[\"媒体层\",{\"1\":{\"1862\":1}}],[\"媒体协商\",{\"1\":{\"1861\":1}}],[\"媒体协商过程\",{\"0\":{\"1861\":1},\"1\":{\"1861\":1}}],[\"候选对优先级排序\",{\"1\":{\"1860\":1}}],[\"局域网内直接连通\",{\"1\":{\"1860\":1}}],[\"局部领头遵循先到先得\",{\"1\":{\"942\":1}}],[\"局部内部类\",{\"0\":{\"297\":1}}],[\"局部变量\",{\"1\":{\"241\":1,\"348\":1,\"1087\":1}}],[\"局部变量表\",{\"0\":{\"204\":1},\"1\":{\"240\":3,\"359\":1}}],[\"录制桌面显示流\",{\"1\":{\"1858\":1}}],[\"录制视频流\",{\"1\":{\"1858\":1}}],[\"音视频录制\",{\"0\":{\"1858\":1}}],[\"音频格式\",{\"1\":{\"1877\":1}}],[\"音频\",{\"1\":{\"1212\":1,\"1251\":1}}],[\"褐度\",{\"1\":{\"1855\":1}}],[\"灰度\",{\"1\":{\"1855\":1}}],[\"灰度比例\",{\"1\":{\"1240\":1}}],[\"冈仁波齐\",{\"1\":{\"1849\":1}}],[\"象雄遗址\",{\"1\":{\"1849\":1}}],[\"古格王朝\",{\"1\":{\"1849\":1}}],[\"古兰经\",{\"1\":{\"1764\":1}}],[\"爽姐就已经开始在车上电话处理工作事宜了\",{\"1\":{\"1849\":1}}],[\"爽得一批～\",{\"1\":{\"1785\":1}}],[\"辞职旅行的河南小夫妻\",{\"1\":{\"1849\":1}}],[\"团里的勇敢爽姐\",{\"1\":{\"1849\":1}}],[\"团队可以根据不同的需求和常见\",{\"1\":{\"1333\":1}}],[\"冰川草原\",{\"1\":{\"1849\":1}}],[\"冰箱\",{\"1\":{\"373\":1}}],[\"江河湖泊\",{\"1\":{\"1849\":1}}],[\"恍惚间已经开始想念西藏了\",{\"1\":{\"1849\":1}}],[\"格尔木的硬卧+格尔木\",{\"1\":{\"1848\":1}}],[\"格式压缩\",{\"1\":{\"1688\":1}}],[\"格式任意\",{\"1\":{\"1405\":1}}],[\"格式化json数据\",{\"1\":{\"1608\":1}}],[\"格式化输出\",{\"1\":{\"1155\":1,\"1322\":1}}],[\"格式化串作为错误消息\",{\"1\":{\"59\":1}}],[\"格式\",{\"1\":{\"643\":1,\"1688\":1}}],[\"格式的序列化器\",{\"1\":{\"417\":1}}],[\"格式简洁\",{\"1\":{\"407\":1}}],[\"朝拜\",{\"1\":{\"1847\":1}}],[\"朝后退了退不愿意坐\",{\"1\":{\"1846\":1}}],[\"墓葬\",{\"1\":{\"1847\":1}}],[\"印度餐等等\",{\"1\":{\"1846\":1}}],[\"印象最深的是陈忠实的\",{\"1\":{\"1826\":1}}],[\"印象最深的是某著名航司的网络抖动能连着抖几天\",{\"1\":{\"1786\":1}}],[\"尼泊尔餐\",{\"1\":{\"1846\":1}}],[\"尼康才是真男人~必须放一个尼康战歌助助兴\",{\"1\":{\"1799\":1}}],[\"尼康风光狗\",{\"1\":{\"0\":1}}],[\"霸气\",{\"1\":{\"1846\":1}}],[\"冲击力没有那么强了\",{\"1\":{\"1846\":1}}],[\"冲突了又得慢慢查文档\",{\"1\":{\"1779\":1}}],[\"冲突\",{\"1\":{\"553\":1}}],[\"据说是正宗的\",{\"1\":{\"1845\":1}}],[\"据说拉萨有1800多家茶馆\",{\"1\":{\"1837\":1}}],[\"睡觉~\",{\"1\":{\"1844\":1}}],[\"睡了一觉\",{\"1\":{\"1836\":1}}],[\"睡了一夜卧铺\",{\"1\":{\"1771\":1}}],[\"忍不住把这几天的照片筛了9张\",{\"1\":{\"1844\":1}}],[\"脸都快黑成藏族了\",{\"1\":{\"1844\":1}}],[\"脸上的生气一点点消失\",{\"1\":{\"1785\":1}}],[\"拍完照\",{\"1\":{\"1844\":1}}],[\"拍照也会开始注意构图\",{\"1\":{\"1819\":1}}],[\"乔戈里峰就在我国新疆\",{\"1\":{\"1844\":1}}],[\"世人都知道世界第一高是珠穆朗玛峰\",{\"1\":{\"1844\":1}}],[\"珠峰并不是最美的\",{\"1\":{\"1844\":1}}],[\"珠穆朗玛峰\",{\"1\":{\"1844\":2}}],[\"听师傅说\",{\"1\":{\"1844\":1}}],[\"听着听着热泪就溢出来了\",{\"1\":{\"1841\":1}}],[\"她说这辈子还真可以试试哈哈哈~\",{\"1\":{\"1844\":1}}],[\"观\",{\"1\":{\"1844\":1}}],[\"观察快结束又\",{\"1\":{\"1781\":1}}],[\"观察者模式nio中的文件目录监听服务基于watchservice接口\",{\"1\":{\"1503\":1}}],[\"观察者节点所处状态\",{\"1\":{\"1201\":1}}],[\"观察新老集群读取的数据是否一致\",{\"1\":{\"1236\":1}}],[\"壮\",{\"1\":{\"1844\":1}}],[\"壮丽的景色从西宁才真正开始\",{\"1\":{\"1833\":1}}],[\"卓奥友峰以及希夏邦马峰\",{\"1\":{\"1844\":1}}],[\"洛子峰\",{\"1\":{\"1844\":1}}],[\"洛克兄弟骑行水壶\",{\"1\":{\"1796\":1}}],[\"洛克兄弟q5尾灯\",{\"1\":{\"1796\":1}}],[\"卡若拉也是整个行程中最危险的\",{\"1\":{\"1843\":1}}],[\"卡着整个需求\",{\"1\":{\"1786\":1}}],[\"猛吸几口氧气\",{\"1\":{\"1843\":1}}],[\"啦\",{\"1\":{\"1843\":1}}],[\"美\",{\"1\":{\"1843\":1}}],[\"美团是我这的第一家公司\",{\"1\":{\"1786\":1}}],[\"美团\",{\"1\":{\"1726\":1}}],[\"美团的\",{\"1\":{\"1622\":1}}],[\"美团http流量定制化路由的实践\",{\"1\":{\"1302\":1}}],[\"美团点评高性能四层负载均衡\",{\"1\":{\"1301\":1}}],[\"卧槽\",{\"1\":{\"1843\":1}}],[\"汪师傅带我们爬了后面的小山\",{\"1\":{\"1846\":1}}],[\"汪师傅和我们一起吃了牦牛火锅\",{\"1\":{\"1845\":1}}],[\"汪师傅让我们喊了句国粹\",{\"1\":{\"1843\":1}}],[\"汪师傅一路念经\",{\"1\":{\"1841\":1}}],[\"今天我们离开了日喀则\",{\"1\":{\"1845\":1}}],[\"今天最后的景点是满拉水库\",{\"1\":{\"1843\":1}}],[\"今天几乎一整天都在车上\",{\"1\":{\"1842\":1}}],[\"今年的所有旅行\",{\"1\":{\"1828\":1}}],[\"今年去了两次\",{\"1\":{\"1826\":1}}],[\"今年最喜欢的是\",{\"1\":{\"1826\":1}}],[\"今年用实习的工资\",{\"1\":{\"1819\":1}}],[\"今年还去跑了个长沙马拉松的欢乐跑\",{\"1\":{\"1818\":1}}],[\"泽当很小\",{\"1\":{\"1842\":1}}],[\"祈求神的庇佑\",{\"1\":{\"1842\":1}}],[\"牦牛与藏羚羊\",{\"1\":{\"1849\":1}}],[\"牦牛\",{\"1\":{\"1842\":1}}],[\"近距离看到了世界最高峰\",{\"1\":{\"1844\":1}}],[\"近观了昨天路过的丹娘佛掌沙丘\",{\"1\":{\"1842\":1}}],[\"近实时的搜索与数据分析引擎\",{\"1\":{\"31\":1}}],[\"咸菜\",{\"1\":{\"1842\":1}}],[\"馒头\",{\"1\":{\"1842\":1}}],[\"憨憨fy叫不醒\",{\"1\":{\"1842\":1}}],[\"仿佛自己过了一种完全不一样的人生\",{\"1\":{\"1841\":1}}],[\"司机汪师傅给我们全车人点歌\",{\"1\":{\"1841\":1}}],[\"索松村不让插电放音响了\",{\"1\":{\"1841\":1}}],[\"索引使用等等\",{\"1\":{\"1566\":1}}],[\"索引效果越好\",{\"1\":{\"1548\":1}}],[\"索引下推优化\",{\"1\":{\"1548\":1}}],[\"索引空间占用过多\",{\"1\":{\"1548\":1}}],[\"索引也不能过多\",{\"1\":{\"1548\":1}}],[\"索引覆盖了查询需求\",{\"1\":{\"1548\":1}}],[\"索引优化\",{\"0\":{\"1548\":1}}],[\"索引类型\",{\"0\":{\"1545\":1}}],[\"索引方式\",{\"1\":{\"1476\":1}}],[\"索引节点缓存\",{\"1\":{\"1484\":1}}],[\"索引节点区\",{\"1\":{\"1474\":1}}],[\"索引节点\",{\"1\":{\"1474\":1}}],[\"索引越界\",{\"1\":{\"998\":1}}],[\"索引越多\",{\"1\":{\"708\":1}}],[\"索引2\",{\"1\":{\"773\":1}}],[\"索引重复值常用于单表查询中但点区间太多\",{\"1\":{\"722\":1}}],[\"索引共占用页面数\",{\"1\":{\"720\":1}}],[\"索引结果可能匹配多条记录\",{\"1\":{\"710\":1}}],[\"索引结构的叶子节点关联的是对应的主键\",{\"1\":{\"699\":1}}],[\"索引结构的叶子节点直接保存了行数据\",{\"1\":{\"699\":1}}],[\"索引结构\",{\"0\":{\"698\":1},\"1\":{\"697\":1}}],[\"索引并不是多多益善\",{\"1\":{\"708\":1}}],[\"索引列等值匹配的值\",{\"1\":{\"728\":1}}],[\"索引列的类型尽量小\",{\"1\":{\"708\":1}}],[\"索引列需要占用额外空间\",{\"1\":{\"697\":1}}],[\"索引具体结构和索引创建时的字段声明顺序有关\",{\"1\":{\"707\":1}}],[\"索引选择性越高则查询效率越高\",{\"1\":{\"707\":1}}],[\"索引才会生效\",{\"1\":{\"703\":1}}],[\"索引将失效\",{\"1\":{\"703\":3}}],[\"索引失效情况\",{\"0\":{\"703\":1,\"1547\":1}}],[\"索引语法\",{\"0\":{\"701\":1}}],[\"索引用法\",{\"0\":{\"700\":1}}],[\"索引作为聚集索引\",{\"1\":{\"699\":1}}],[\"索引即数据\",{\"1\":{\"699\":1}}],[\"索引分类\",{\"0\":{\"699\":1}}],[\"索引大大提高了查询效率\",{\"1\":{\"697\":1}}],[\"索引概述\",{\"0\":{\"697\":1}}],[\"索引原理⭐\",{\"0\":{\"696\":1}}],[\"索引段\",{\"1\":{\"694\":1}}],[\"索引的具体类型主要分为以下几类\",{\"1\":{\"699\":1}}],[\"索引的使用也满足最左前缀法则\",{\"1\":{\"617\":1}}],[\"索引的一些配置\",{\"1\":{\"42\":1}}],[\"索引组织表\",{\"1\":{\"615\":1}}],[\"索引信息\",{\"1\":{\"564\":1}}],[\"索引上的等值查询\",{\"1\":{\"557\":1}}],[\"索引变量\",{\"1\":{\"538\":1}}],[\"索引条目的偏移量存储的是相对于\",{\"1\":{\"478\":1}}],[\"索引文件中找到小于等于目标\",{\"1\":{\"476\":1}}],[\"索引文件\",{\"1\":{\"476\":1}}],[\"索引定位\",{\"0\":{\"476\":1}}],[\"索引0不使用\",{\"1\":{\"240\":1}}],[\"索引引用\",{\"1\":{\"240\":1}}],[\"索引库一旦创建无法修改已有的mapping\",{\"1\":{\"45\":1}}],[\"索引库不存在\",{\"1\":{\"43\":1}}],[\"索引库已经存在\",{\"1\":{\"43\":1}}],[\"索引库名称\",{\"1\":{\"48\":2}}],[\"索引库名\",{\"1\":{\"42\":1,\"45\":1,\"47\":1,\"49\":1,\"50\":2}}],[\"索引别名\",{\"1\":{\"42\":1}}],[\"索引操作\",{\"0\":{\"41\":1}}],[\"索引\",{\"0\":{\"1544\":1},\"1\":{\"34\":1,\"240\":1,\"570\":1,\"698\":1,\"1435\":1,\"1542\":1,\"1567\":1}}],[\"跑到林芝来唱歌\",{\"1\":{\"1841\":1}}],[\"跑步已经很久没跑了\",{\"1\":{\"1774\":1}}],[\"跑步1354公里\",{\"1\":{\"0\":1}}],[\"赵雷\",{\"1\":{\"1841\":1}}],[\"驻场乐队的每一首歌都是我的最爱\",{\"1\":{\"1841\":1}}],[\"驻内存数据网格\",{\"1\":{\"1264\":1}}],[\"雅鲁藏布大峡谷\",{\"1\":{\"1841\":1}}],[\"雅砻\",{\"1\":{\"1837\":1}}],[\"师傅推荐租氧气罐\",{\"1\":{\"1843\":1}}],[\"师傅念着念着就开到了林芝\",{\"1\":{\"1841\":1}}],[\"师傅一路骂黑车\",{\"1\":{\"1841\":1}}],[\"鸡爪炒土豆\",{\"1\":{\"1841\":1}}],[\"鸡肋\",{\"1\":{\"297\":1}}],[\"牛肉饼子\",{\"1\":{\"1841\":1}}],[\"牛舌饼\",{\"1\":{\"1833\":1}}],[\"毕竟每个去过拉萨的人最后都会回到拉萨\",{\"1\":{\"1840\":1}}],[\"毕业\",{\"1\":{\"1824\":1}}],[\"毕业时\",{\"1\":{\"1796\":1}}],[\"毕业前的寒假又在闲鱼上花了600收了辆二手的沃雷顿追风200\",{\"1\":{\"1796\":1}}],[\"奈何时间不够\",{\"1\":{\"1840\":1}}],[\"言语间可以看出大姐是个有文化且勇敢的人\",{\"1\":{\"1839\":1}}],[\"鼎鼎大名的大昭寺就在这里\",{\"1\":{\"1838\":1}}],[\"八廓街\",{\"0\":{\"1838\":1}}],[\"汉传佛教很不一样\",{\"1\":{\"1837\":1}}],[\"藏族小哥\",{\"1\":{\"1849\":1}}],[\"藏传佛教本身又有四大派别\",{\"1\":{\"1837\":1}}],[\"藏传佛教和印度的佛教\",{\"1\":{\"1837\":1}}],[\"藏北草原\",{\"1\":{\"1833\":1}}],[\"佛教也有非常多的分支\",{\"1\":{\"1837\":1}}],[\"浅浅了解了西藏的历史\",{\"1\":{\"1837\":1}}],[\"喝了西藏特色的阿刁奶茶\",{\"1\":{\"1838\":1}}],[\"喝了点当地的酸奶\",{\"1\":{\"1833\":1}}],[\"喝完我们就去了西藏博物馆\",{\"1\":{\"1837\":1}}],[\"茶馆的氛围很好\",{\"1\":{\"1837\":1}}],[\"喇嘛像前都塞满了纸钞\",{\"1\":{\"1836\":1}}],[\"艾草松叶\",{\"1\":{\"1836\":1}}],[\"寺内外有专卖的求财套件\",{\"1\":{\"1836\":1}}],[\"寺外已经排起了长队\",{\"1\":{\"1836\":1}}],[\"乞讨者随处可见\",{\"1\":{\"1836\":1}}],[\"麻辣牛肉面\",{\"1\":{\"1836\":1}}],[\"麻烦的地方在于处理数据的边界\",{\"1\":{\"788\":1}}],[\"嘴唇渐渐发黑\",{\"1\":{\"1836\":1}}],[\"鼻孔慢慢开始出血\",{\"1\":{\"1836\":1}}],[\"鼻炎出血\",{\"1\":{\"1773\":1}}],[\"扎基寺里供奉的是唯一的女财神扎基拉姆\",{\"1\":{\"1836\":1}}],[\"扎基寺\",{\"0\":{\"1836\":1}}],[\"举止谈吐也和内地很不一样\",{\"1\":{\"1834\":1}}],[\"房顶到处飘扬着经幡\",{\"1\":{\"1834\":1}}],[\"呼吸都要很大一口才能让心脏满意\",{\"1\":{\"1834\":1}}],[\"磕长头\",{\"1\":{\"1833\":1}}],[\"聊为什么不需要按着父母的意愿而活\",{\"1\":{\"1849\":1}}],[\"聊为什么不结婚\",{\"1\":{\"1849\":1}}],[\"聊生辰八字\",{\"1\":{\"1849\":1}}],[\"聊星座\",{\"1\":{\"1849\":1}}],[\"聊未来\",{\"1\":{\"1849\":1}}],[\"聊人生\",{\"1\":{\"1833\":1,\"1849\":1}}],[\"聊毕业\",{\"1\":{\"1833\":1}}],[\"聊天室\",{\"0\":{\"852\":1}}],[\"念青唐古拉山\",{\"1\":{\"1833\":1}}],[\"羊卓雍措\",{\"1\":{\"1843\":1}}],[\"羊八井\",{\"1\":{\"1833\":1}}],[\"羊群效应\",{\"0\":{\"1186\":1}}],[\"羌塘草原\",{\"1\":{\"1833\":1}}],[\"措那湖\",{\"1\":{\"1833\":1}}],[\"唐古拉山\",{\"1\":{\"1833\":1}}],[\"沱沱河\",{\"1\":{\"1833\":1}}],[\"兴奋过后\",{\"1\":{\"1833\":1}}],[\"惺忪的睡眼迷迷糊糊得看见了雪山\",{\"1\":{\"1833\":1}}],[\"脚边的暖气热得发烫\",{\"1\":{\"1833\":1}}],[\"脚本使用更方便\",{\"1\":{\"1791\":1}}],[\"脚本的方式去推送\",{\"1\":{\"1791\":1}}],[\"脚本的sha1校验和\",{\"1\":{\"965\":1}}],[\"脚本实现\",{\"1\":{\"1582\":1}}],[\"脚本执行原子查询和删除\",{\"1\":{\"1263\":1}}],[\"脚本执行以下步骤\",{\"1\":{\"1217\":1}}],[\"脚本\",{\"1\":{\"1263\":1}}],[\"脚本复制\",{\"0\":{\"967\":1}}],[\"脚本管理命令\",{\"0\":{\"966\":1}}],[\"酿皮都不是很对胃口\",{\"1\":{\"1833\":1}}],[\"炒羊肠\",{\"1\":{\"1833\":1}}],[\"玫瑰糕\",{\"1\":{\"1833\":1}}],[\"落地机场的时候薅了青海的免费景点门票立省￥60\",{\"1\":{\"1833\":1}}],[\"落地曹家堡\",{\"1\":{\"1833\":1}}],[\"落到景点邻近机场表里\",{\"1\":{\"1360\":1}}],[\"青春没有售价\",{\"1\":{\"1833\":1}}],[\"抖音上流传着一句话\",{\"1\":{\"1833\":1}}],[\"踏上了西藏的旅程\",{\"1\":{\"1832\":1}}],[\"踏上了西藏的土地\",{\"1\":{\"1825\":1}}],[\"执念这个东西很难得\",{\"1\":{\"1832\":1}}],[\"执行终端\",{\"1\":{\"1692\":1}}],[\"执行查询\",{\"1\":{\"1566\":1}}],[\"执行过程\",{\"0\":{\"1566\":1}}],[\"执行效率随对象数量增长而降低\",{\"1\":{\"1523\":1}}],[\"执行效率较低\",{\"1\":{\"242\":1}}],[\"执行对象的<init>方法\",{\"1\":{\"1521\":1}}],[\"执行者\",{\"1\":{\"1511\":1}}],[\"执行代码\",{\"1\":{\"1506\":1}}],[\"执行中断处理函数\",{\"1\":{\"1482\":1}}],[\"执行逻辑\",{\"1\":{\"1481\":1}}],[\"执行应用上下文的初始化\",{\"1\":{\"1379\":1}}],[\"执行一些资源清理后再\",{\"1\":{\"1465\":1}}],[\"执行一些状态修改和资源释放\",{\"1\":{\"1050\":1,\"1051\":1}}],[\"执行一次\",{\"1\":{\"1360\":1}}],[\"执行成功后运行\",{\"1\":{\"1345\":2}}],[\"执行就到此为止了\",{\"1\":{\"1344\":1}}],[\"执行快进合并即可\",{\"1\":{\"1337\":1}}],[\"执行指定次数后继续\",{\"1\":{\"1264\":1}}],[\"执行指定命令\",{\"1\":{\"926\":1}}],[\"执行哈希计算\",{\"1\":{\"1228\":1}}],[\"执行bin\",{\"1\":{\"1226\":1}}],[\"执行后\",{\"1\":{\"1115\":1}}],[\"执行后续工作\",{\"1\":{\"927\":1}}],[\"执行前\",{\"1\":{\"1115\":1}}],[\"执行多个任务\",{\"1\":{\"1111\":1}}],[\"执行任务前置\",{\"1\":{\"1115\":1}}],[\"执行任务的接口方法\",{\"1\":{\"1111\":1}}],[\"执行任务时会使用工作窃取算法\",{\"1\":{\"153\":1}}],[\"执行完空的\",{\"1\":{\"1116\":1}}],[\"执行完后的状态\",{\"1\":{\"1112\":1}}],[\"执行完\",{\"1\":{\"1090\":1,\"1116\":1}}],[\"执行完毕后\",{\"1\":{\"1566\":1}}],[\"执行完毕后结束进程\",{\"1\":{\"1465\":1}}],[\"执行完毕后节点会通过消息告知其它节点自己目前负责的槽信息\",{\"1\":{\"946\":1}}],[\"执行完毕的终止状态\",{\"1\":{\"1089\":1}}],[\"执行完毕做一次清理\",{\"1\":{\"196\":1}}],[\"执行目标\",{\"1\":{\"1087\":1,\"1088\":1}}],[\"执行目标对象本体方法\",{\"1\":{\"1021\":1,\"1022\":1}}],[\"执行回滚\",{\"1\":{\"1059\":1}}],[\"执行rollback\",{\"1\":{\"1051\":1}}],[\"执行commit\",{\"1\":{\"1050\":1}}],[\"执行count操作是非常耗时的\",{\"1\":{\"619\":1}}],[\"执行业务流程\",{\"1\":{\"1059\":1}}],[\"执行业务方法\",{\"1\":{\"1038\":1,\"1055\":1}}],[\"执行业务逻辑\",{\"1\":{\"97\":1}}],[\"执行父类对应的方法\",{\"1\":{\"1016\":1}}],[\"执行步骤如下\",{\"1\":{\"975\":1}}],[\"执行步骤\",{\"1\":{\"974\":1}}],[\"执行步骤包括\",{\"1\":{\"939\":1}}],[\"执行脚本函数\",{\"1\":{\"965\":1}}],[\"执行刚刚在lua环境中定义的函数\",{\"1\":{\"965\":1}}],[\"执行命令仍然是单线程顺序执行\",{\"1\":{\"1572\":1}}],[\"执行命令的交互过程如下\",{\"1\":{\"964\":1}}],[\"执行命令并向集群广播该条publish消息\",{\"1\":{\"949\":1}}],[\"执行错误\",{\"1\":{\"961\":1}}],[\"执行事务方法的时候就会走这里面的\",{\"1\":{\"1059\":1}}],[\"执行事务\",{\"1\":{\"959\":1}}],[\"执行事件循环\",{\"1\":{\"929\":1}}],[\"执行lua脚本的lua环境\",{\"1\":{\"929\":1}}],[\"执行load指令将准备好的数据\",{\"1\":{\"614\":1}}],[\"执行被延迟的bgrewriteaof\",{\"1\":{\"928\":1}}],[\"执行预备操作\",{\"1\":{\"927\":1}}],[\"执行期间\",{\"1\":{\"911\":3}}],[\"执行用户自定义的\",{\"1\":{\"873\":1}}],[\"执行和\",{\"1\":{\"873\":1}}],[\"执行计算\",{\"1\":{\"822\":2}}],[\"执行计划\",{\"0\":{\"727\":1}}],[\"执行计划中\",{\"1\":{\"706\":1}}],[\"执行语句\",{\"1\":{\"729\":1}}],[\"执行in\",{\"1\":{\"726\":1}}],[\"执行管理操作的客户端程序\",{\"1\":{\"675\":1}}],[\"执行sql语句并退出\",{\"1\":{\"675\":1}}],[\"执行原理\",{\"1\":{\"657\":1}}],[\"执行创建存储过程的sql时\",{\"1\":{\"628\":1}}],[\"执行删除过期\",{\"1\":{\"1573\":1}}],[\"执行删\",{\"1\":{\"620\":1}}],[\"执行频率\",{\"1\":{\"612\":1}}],[\"执行顺序\",{\"0\":{\"971\":1},\"1\":{\"585\":1,\"1567\":1}}],[\"执行额外的逻辑\",{\"1\":{\"523\":1}}],[\"执行器写完\",{\"1\":{\"1556\":1}}],[\"执行器更新完\",{\"1\":{\"1555\":1}}],[\"执行器\",{\"1\":{\"570\":1,\"1224\":1}}],[\"执行器是\",{\"1\":{\"540\":1}}],[\"执行器会批量执行所有更新语句\",{\"1\":{\"513\":1}}],[\"执行器类型\",{\"1\":{\"508\":1}}],[\"执行引擎执行本地机器码\",{\"1\":{\"242\":1}}],[\"执行速度较慢\",{\"1\":{\"242\":1}}],[\"执行垃圾回收等\",{\"1\":{\"236\":2}}],[\"执行其\",{\"1\":{\"196\":1}}],[\"执行它们实际关联对象的\",{\"1\":{\"196\":1}}],[\"执行清理工作\",{\"1\":{\"195\":1}}],[\"执行清理\",{\"1\":{\"188\":1}}],[\"执行更新\",{\"1\":{\"154\":1,\"1514\":1}}],[\"执行\",{\"0\":{\"544\":1},\"1\":{\"154\":1,\"270\":1,\"383\":1,\"388\":1,\"543\":1,\"544\":1,\"768\":3,\"820\":1,\"863\":1,\"873\":1,\"1012\":1,\"1059\":1,\"1113\":1,\"1154\":1,\"1224\":1,\"1226\":3,\"1471\":1,\"1511\":1,\"1514\":2,\"1861\":2}}],[\"执行时机不同\",{\"1\":{\"585\":1}}],[\"执行时间接调用了forkjointask\",{\"1\":{\"153\":1}}],[\"执行时\",{\"1\":{\"148\":1}}],[\"执行操作\",{\"1\":{\"143\":2}}],[\"执行的结果同样经\",{\"1\":{\"101\":1}}],[\"执行结果保存至输出缓冲区\",{\"1\":{\"927\":1}}],[\"执行结果为\",{\"1\":{\"823\":1}}],[\"执行结果\",{\"1\":{\"97\":1,\"818\":1}}],[\"执行异步任务\",{\"1\":{\"77\":1}}],[\"怎么都不得劲\",{\"1\":{\"1828\":1}}],[\"心心念念的旅途就要出发了\",{\"1\":{\"1833\":1}}],[\"心心念念想买长焦\",{\"1\":{\"1828\":1}}],[\"心跳检测\",{\"0\":{\"937\":1}}],[\"苦练基本功\",{\"1\":{\"1827\":1}}],[\"繁华\",{\"1\":{\"1826\":1}}],[\"繁忙型作业的系统\",{\"1\":{\"1470\":1}}],[\"繁忙型作业\",{\"1\":{\"1470\":1}}],[\"贾玲的两部作品\",{\"1\":{\"1826\":1}}],[\"唉\",{\"1\":{\"1825\":1}}],[\"逛了逛中山桥\",{\"1\":{\"1848\":1}}],[\"逛论坛\",{\"1\":{\"1825\":1}}],[\"逛国家博物馆和天安门\",{\"1\":{\"1772\":1}}],[\"干点自己喜欢的事\",{\"1\":{\"1825\":1}}],[\"干净页可以直接回收\",{\"1\":{\"1446\":1}}],[\"荒原\",{\"1\":{\"1825\":1}}],[\"雪域高原\",{\"1\":{\"1834\":1}}],[\"雪山\",{\"1\":{\"1825\":1,\"1842\":1}}],[\"雪花算法\",{\"1\":{\"1622\":1}}],[\"雪花算法等\",{\"1\":{\"1374\":1}}],[\"草原\",{\"1\":{\"1825\":1,\"1842\":1,\"1845\":1}}],[\"烟台\",{\"1\":{\"1825\":1}}],[\"威海\",{\"1\":{\"1825\":1}}],[\"威望选举产生\",{\"1\":{\"1766\":1}}],[\"角山+老龙头入海口+天下第一关\",{\"1\":{\"1825\":1}}],[\"西北的辣子香而不辣\",{\"1\":{\"1848\":1}}],[\"西藏我来对了\",{\"1\":{\"1841\":1}}],[\"西藏所有正规旅行团的车都是藏al+4位数字\",{\"1\":{\"1841\":1}}],[\"西藏还是有很大的生产力没有解放出来\",{\"1\":{\"1837\":1}}],[\"西藏的历史基本就是三大部落象雄\",{\"1\":{\"1837\":1}}],[\"西藏博是刚扩建不久的\",{\"1\":{\"1837\":1}}],[\"西藏博物馆\",{\"0\":{\"1837\":1}}],[\"西藏成了心中的一个执念\",{\"1\":{\"1832\":1}}],[\"西藏\",{\"0\":{\"1832\":1},\"1\":{\"1825\":1}}],[\"西宁这段的风景其实没太多可看的\",{\"1\":{\"1833\":1}}],[\"西宁\",{\"1\":{\"1825\":1}}],[\"愿望实现了\",{\"1\":{\"1825\":1}}],[\"兰州的硬座\",{\"1\":{\"1848\":1}}],[\"兰州\",{\"1\":{\"1825\":1}}],[\"林芝\",{\"1\":{\"1825\":1,\"1840\":1}}],[\"拉萨一日游\",{\"0\":{\"1835\":1}}],[\"拉萨城区确实不发达\",{\"1\":{\"1834\":1}}],[\"拉萨作为西藏的首府\",{\"1\":{\"1834\":1}}],[\"拉萨的最后一天\",{\"0\":{\"1847\":1}}],[\"拉萨的第一天\",{\"0\":{\"1834\":1}}],[\"拉萨的z165次列车\",{\"1\":{\"1833\":1}}],[\"拉萨的z265次\",{\"1\":{\"1833\":1}}],[\"拉萨河\",{\"1\":{\"1833\":1}}],[\"拉萨\",{\"1\":{\"1825\":1}}],[\"拉取记录数\",{\"1\":{\"1791\":1}}],[\"拉取mysql镜像\",{\"1\":{\"1634\":1}}],[\"拉取并尝试合并远程分支\",{\"1\":{\"1338\":1}}],[\"拉取最新的远程仓库数据到本地\",{\"1\":{\"1327\":1}}],[\"拉取\",{\"1\":{\"1219\":1}}],[\"拉取消息\",{\"0\":{\"484\":1},\"1\":{\"484\":1}}],[\"拉取数据返回消息的最大条数\",{\"1\":{\"485\":1}}],[\"拉取数据\",{\"1\":{\"480\":1,\"488\":1}}],[\"六月\",{\"1\":{\"1825\":1}}],[\"泰山虽然盛名\",{\"1\":{\"1825\":1}}],[\"玩完再回到泰安爬山\",{\"1\":{\"1825\":1}}],[\"玩机数码社区\",{\"1\":{\"0\":1}}],[\"匆匆吃了个早饭就买票先去济南转了两天\",{\"1\":{\"1825\":1}}],[\"华中三杰真的好吃又实惠\",{\"1\":{\"1825\":1}}],[\"武汉\",{\"1\":{\"1825\":1}}],[\"步入社会\",{\"1\":{\"1824\":1}}],[\"步骤\",{\"1\":{\"214\":1,\"767\":1,\"942\":1,\"1791\":1,\"1860\":1}}],[\"享受最后的学生时光\",{\"1\":{\"1824\":1}}],[\"享元模式\",{\"1\":{\"146\":1}}],[\"🈚️\",{\"1\":{\"1820\":1}}],[\"爱情\",{\"0\":{\"1820\":1,\"1829\":1}}],[\"爱优b腾\",{\"0\":{\"1803\":1}}],[\"温润多了\",{\"1\":{\"1819\":1}}],[\"苹果的任何新特性\",{\"1\":{\"1819\":1}}],[\"红山上的布达拉宫\",{\"1\":{\"1847\":1}}],[\"红外\",{\"1\":{\"1819\":1}}],[\"红黑树在大数据量的情况下\",{\"1\":{\"1546\":1}}],[\"红黑树查找所要的元素\",{\"1\":{\"1497\":1}}],[\"红黑树\",{\"1\":{\"698\":1,\"1386\":1,\"1497\":1}}],[\"红黑树实现\",{\"1\":{\"305\":1}}],[\"稍微好一点就想去跑两圈\",{\"1\":{\"1818\":1}}],[\"稍后由一个叫\",{\"1\":{\"196\":1}}],[\"膝盖还是不咋样\",{\"1\":{\"1818\":1}}],[\"鲜花\",{\"1\":{\"1817\":1}}],[\"摇滚乐\",{\"1\":{\"1817\":1}}],[\"影视今年一共\",{\"1\":{\"1826\":1}}],[\"影视今年87部\",{\"1\":{\"1817\":1}}],[\"影响因素有35类\",{\"1\":{\"1732\":1}}],[\"影响db性能\",{\"1\":{\"1622\":1}}],[\"影响性能\",{\"1\":{\"1568\":1}}],[\"影响并发度的加锁语句放在后面\",{\"1\":{\"1561\":1}}],[\"影响缓存命中率\",{\"1\":{\"1435\":1}}],[\"影响不大\",{\"1\":{\"1361\":1}}],[\"影响启动效率\",{\"1\":{\"1077\":1}}],[\"影响结果集外\",{\"1\":{\"971\":1}}],[\"影响\",{\"1\":{\"770\":1}}],[\"影响查询效率\",{\"1\":{\"707\":1}}],[\"征服与革命中的的阿拉伯人\",{\"1\":{\"1817\":1}}],[\"征服与革命中的阿拉伯人\",{\"1\":{\"1767\":1}}],[\"书影音\",{\"0\":{\"1817\":1,\"1826\":1}}],[\"盐城\",{\"1\":{\"1816\":1}}],[\"盐值\",{\"1\":{\"14\":1}}],[\"璀璨的华夏文明\",{\"1\":{\"1816\":1}}],[\"健身\",{\"1\":{\"1815\":1}}],[\"健康状态\",{\"1\":{\"33\":1}}],[\"旅行\",{\"0\":{\"1816\":1,\"1825\":1},\"2\":{\"1851\":1}}],[\"旅游\",{\"1\":{\"1815\":1,\"1824\":1}}],[\"旅客在输入出发地目的地的条件下\",{\"1\":{\"1751\":1}}],[\"旅客订座记录\",{\"1\":{\"1738\":1}}],[\"旅客服务系统\",{\"0\":{\"1723\":1},\"1\":{\"1723\":1}}],[\"旅客跟航司之间需要有很多信息交互\",{\"1\":{\"1722\":1}}],[\"抗击新冠疫情\",{\"1\":{\"1815\":1}}],[\"抗修改\",{\"1\":{\"14\":1}}],[\"质量高\",{\"1\":{\"1811\":1}}],[\"质量要求高\",{\"1\":{\"1212\":1}}],[\"较方便\",{\"1\":{\"1811\":2}}],[\"版权分散\",{\"1\":{\"1811\":1}}],[\"版本后增加以下两种\",{\"1\":{\"1574\":1}}],[\"版本后\",{\"1\":{\"1344\":1}}],[\"版本会+1\",{\"1\":{\"1174\":1}}],[\"版本里\",{\"1\":{\"1057\":1}}],[\"版本可能会有较大重构\",{\"1\":{\"809\":1}}],[\"版本引入\",{\"1\":{\"795\":1}}],[\"版本链\",{\"0\":{\"753\":1},\"1\":{\"753\":1}}],[\"版本和执行的\",{\"1\":{\"553\":1}}],[\"版本之后\",{\"1\":{\"826\":1}}],[\"版本之后利用的是\",{\"1\":{\"383\":1}}],[\"版本之前基于\",{\"1\":{\"383\":1}}],[\"版本号从45开始\",{\"1\":{\"240\":1}}],[\"版本号\",{\"1\":{\"240\":1,\"848\":1}}],[\"版本号解决\",{\"1\":{\"148\":1}}],[\"版本\",{\"1\":{\"95\":1,\"784\":1,\"849\":1,\"1168\":1,\"1402\":1}}],[\"付费\",{\"1\":{\"1811\":2}}],[\"懒人\",{\"1\":{\"1810\":1}}],[\"懒汉\",{\"1\":{\"1645\":1}}],[\"懒汉单例\",{\"1\":{\"290\":1}}],[\"吸血p2p下载让它成为了唯一能下死种的下载器\",{\"1\":{\"1810\":1}}],[\"迅雷一定是最流行的下载方式\",{\"1\":{\"1810\":1}}],[\"迅雷网盘为主\",{\"1\":{\"1805\":1}}],[\"月\",{\"1\":{\"1809\":1}}],[\"月其间\",{\"1\":{\"1322\":1}}],[\"笔者本身并没有收藏的爱好\",{\"1\":{\"1809\":1}}],[\"笔记\",{\"0\":{\"56\":1}}],[\"界面还算清爽\",{\"1\":{\"1806\":1}}],[\"界面杂七杂八\",{\"1\":{\"1805\":1}}],[\"抵制百度\",{\"1\":{\"1805\":1}}],[\"夸克小站等资源站使用\",{\"1\":{\"1805\":1}}],[\"夸克网盘\",{\"1\":{\"1805\":1}}],[\"热辣滚烫\",{\"1\":{\"1826\":1}}],[\"热门的电影基本都有\",{\"1\":{\"1811\":1}}],[\"热门的资源更新快\",{\"1\":{\"1805\":1}}],[\"热点数据太多\",{\"1\":{\"651\":1}}],[\"热点探测的方式有两种\",{\"1\":{\"268\":1}}],[\"热点代码可能被多次编译\",{\"1\":{\"267\":1}}],[\"刺杀肯尼迪\",{\"1\":{\"1803\":1}}],[\"明显比其他喇嘛的大一圈\",{\"1\":{\"1847\":1}}],[\"明明还没开始做牛马\",{\"1\":{\"1825\":1}}],[\"明天想看的在腾讯\",{\"1\":{\"1803\":1}}],[\"明文传输\",{\"1\":{\"1404\":1}}],[\"腾讯为主的在线流媒体平台\",{\"1\":{\"1803\":1}}],[\"腾讯vgw等\",{\"1\":{\"1296\":1}}],[\"哔哩哔哩\",{\"1\":{\"1803\":1}}],[\"摄影\",{\"1\":{\"1819\":1},\"2\":{\"1801\":1}}],[\"摄影学习ing\",{\"1\":{\"0\":1}}],[\"画质较差\",{\"1\":{\"1811\":1}}],[\"画质一般\",{\"1\":{\"1811\":1}}],[\"画幅\",{\"1\":{\"1799\":1}}],[\"画的太好了\",{\"1\":{\"1117\":1}}],[\"镜头尼克尔\",{\"1\":{\"1799\":1}}],[\"镜像作者\",{\"1\":{\"1634\":1}}],[\"镜像运行时的实体\",{\"1\":{\"1634\":1}}],[\"镜像\",{\"1\":{\"1634\":1}}],[\"镜像集群\",{\"1\":{\"1629\":1}}],[\"镜像模式\",{\"1\":{\"1629\":1}}],[\"港版套机\",{\"1\":{\"1799\":1}}],[\"😁😁😁\",{\"1\":{\"1799\":1}}],[\"💡\",{\"0\":{\"791\":1}}],[\"风景大片不比人有意思多了\",{\"1\":{\"1799\":1}}],[\"风格\",{\"0\":{\"1244\":1}}],[\"风格的比较器实现\",{\"1\":{\"61\":1}}],[\"迪卡侬rc500骑行裤\",{\"1\":{\"1796\":1}}],[\"价格倒也不算贵\",{\"1\":{\"1809\":1}}],[\"价格\",{\"1\":{\"1796\":1}}],[\"价值\",{\"1\":{\"1525\":1}}],[\"价值密度低\",{\"1\":{\"1212\":1}}],[\"价值即回收所获得的空间大小以及回收所需时间的经验值\",{\"1\":{\"177\":1,\"1525\":1}}],[\"禧玛诺105\",{\"1\":{\"1796\":1}}],[\"蓝光通常都是虚标的\",{\"1\":{\"1803\":1}}],[\"蓝图r9\",{\"1\":{\"1796\":1}}],[\"蓝图rx\",{\"1\":{\"1796\":1}}],[\"蓝图r7\",{\"1\":{\"1796\":1}}],[\"蓝色\",{\"1\":{\"1332\":1}}],[\"油压碟刹\",{\"1\":{\"1796\":4}}],[\"刹车\",{\"1\":{\"1796\":1}}],[\"桶轴\",{\"1\":{\"1796\":4}}],[\"桶满就不再添加\",{\"1\":{\"1637\":1}}],[\"碳纤维\",{\"1\":{\"1796\":2}}],[\"耐力架\",{\"1\":{\"1796\":1}}],[\"车架类型\",{\"1\":{\"1796\":1}}],[\"车架材质\",{\"1\":{\"1796\":1}}],[\"铝合金\",{\"1\":{\"1796\":6}}],[\"鱼雷6\",{\"1\":{\"1796\":2}}],[\"鱼类6top\",{\"1\":{\"1796\":1}}],[\"帅就完事了\",{\"1\":{\"1796\":1}}],[\"瑞豹\",{\"1\":{\"1796\":1}}],[\"瑞豹super\",{\"1\":{\"1796\":1}}],[\"瑞士程序员大佬\",{\"1\":{\"376\":1}}],[\"轻轻松松速度就能上20\",{\"1\":{\"1796\":1}}],[\"轻量标签\",{\"1\":{\"1329\":1}}],[\"轻量级\",{\"1\":{\"1456\":1}}],[\"轻量级进程\",{\"1\":{\"1451\":1}}],[\"轻量级锁使用\",{\"1\":{\"1515\":1}}],[\"轻量级锁等优化机制\",{\"1\":{\"1515\":1}}],[\"轻量级锁在锁记录存储\",{\"1\":{\"1077\":1}}],[\"轻量级锁适用于两个线程交替执行的场景\",{\"1\":{\"1076\":1}}],[\"轻量级锁\",{\"0\":{\"1076\":1},\"1\":{\"1515\":1}}],[\"轻量级和高效\",{\"1\":{\"282\":1}}],[\"轻量型采集器的平台\",{\"1\":{\"31\":1}}],[\"遥远\",{\"1\":{\"1796\":1}}],[\"突然想到自己还有个\",{\"1\":{\"1792\":1}}],[\"突出强调应用程序的运行过程\",{\"1\":{\"390\":1}}],[\"细粒度的访问令牌\",{\"1\":{\"1791\":1}}],[\"细分的话\",{\"1\":{\"1561\":1}}],[\"细分功能\",{\"1\":{\"817\":1}}],[\"博客\",{\"2\":{\"1794\":1}}],[\"博客项目和\",{\"1\":{\"1791\":1}}],[\"博客园\",{\"1\":{\"1333\":1}}],[\"折腾不止\",{\"1\":{\"1818\":1}}],[\"折腾\",{\"0\":{\"1791\":1},\"2\":{\"1795\":1,\"1880\":1}}],[\"折扣\",{\"1\":{\"1733\":1}}],[\"折扣后金额\",{\"1\":{\"124\":1}}],[\"纵情向前\",{\"1\":{\"1786\":1}}],[\"纵使工作上很痛苦\",{\"1\":{\"1774\":1}}],[\"千万不要困在一个圈里\",{\"1\":{\"1786\":1}}],[\"探索世界的精神\",{\"1\":{\"1786\":1}}],[\"探测式清理结束后\",{\"1\":{\"1514\":1}}],[\"探测式清理\",{\"1\":{\"154\":1,\"1514\":1}}],[\"坚持自己所热爱的\",{\"1\":{\"1786\":1}}],[\"虽说程序员的工作是一个创造性的过程\",{\"1\":{\"1786\":1}}],[\"虽然海拔也有4700多\",{\"1\":{\"1846\":1}}],[\"虽然可能被羊湖震撼过一次\",{\"1\":{\"1846\":1}}],[\"虽然可以用定时任务轮询数据库完成业务需求\",{\"1\":{\"1288\":1}}],[\"虽然我们一点也听不懂\",{\"1\":{\"1837\":1}}],[\"虽然还没有赚到一分钱\",{\"1\":{\"1828\":1}}],[\"虽然也能传播资源\",{\"1\":{\"1805\":1}}],[\"虽然不太可能泄露出去\",{\"1\":{\"1805\":1}}],[\"虽然他北漂多年\",{\"1\":{\"1786\":1}}],[\"虽然这周我很闲\",{\"1\":{\"1785\":1}}],[\"虽然这种方式不提供java的实现\",{\"1\":{\"1130\":1}}],[\"虽然技术涉及不深\",{\"1\":{\"1778\":1}}],[\"虽然上班很累\",{\"1\":{\"1775\":1}}],[\"虽然公司也有健身房\",{\"1\":{\"1774\":1}}],[\"虽然原理大致类似\",{\"1\":{\"1773\":1}}],[\"虽然增加了硬件成本和系统开销\",{\"1\":{\"1443\":1}}],[\"虽然在某些场景下效果可能一样\",{\"1\":{\"1320\":1}}],[\"虽然好像源码里调用的是同一个\",{\"1\":{\"1137\":1}}],[\"虽然声明是uint8\",{\"1\":{\"888\":1}}],[\"虽然\",{\"1\":{\"401\":1}}],[\"虽然需要遍历整个对象图\",{\"1\":{\"224\":1}}],[\"虽然是个链\",{\"1\":{\"188\":1}}],[\"虽然速度很快但质量一般\",{\"1\":{\"83\":1}}],[\"星哥给我的感觉已经是组里最乐观开朗的人了\",{\"1\":{\"1786\":1}}],[\"家庭圆满\",{\"1\":{\"1786\":1}}],[\"亦师亦友\",{\"1\":{\"1786\":1}}],[\"莫过于遇到星哥这样的mt\",{\"1\":{\"1786\":1}}],[\"学自己想学的\",{\"1\":{\"1815\":1}}],[\"学城的文档里说校招生对公司会有一种归属感\",{\"1\":{\"1786\":1}}],[\"学习笔记\",{\"0\":{\"1159\":1}}],[\"学习\",{\"0\":{\"30\":1,\"1852\":1},\"1\":{\"1\":1}}],[\"习惯下来\",{\"1\":{\"1786\":1}}],[\"话又说回来\",{\"1\":{\"1786\":1}}],[\"似乎对我这种对买房\",{\"1\":{\"1786\":1}}],[\"养老\",{\"1\":{\"1786\":1}}],[\"教育\",{\"1\":{\"1786\":1}}],[\"教堂分片\",{\"1\":{\"1763\":1}}],[\"帝都引以为傲的医疗\",{\"1\":{\"1786\":1}}],[\"想给其中一个让座来着\",{\"1\":{\"1846\":1}}],[\"想想就会热泪盈眶的那种\",{\"1\":{\"1832\":1}}],[\"想想无数人使用着自己写的程序\",{\"1\":{\"1786\":1}}],[\"想到了自己减肥的那段时光\",{\"1\":{\"1826\":1}}],[\"想天天去爬猫头山\",{\"1\":{\"1825\":1}}],[\"想对23年的自己说\",{\"1\":{\"1825\":1}}],[\"想榨干青春的最后一点疯狂\",{\"1\":{\"1825\":1}}],[\"想看再下的类型\",{\"1\":{\"1809\":1}}],[\"想要变基到\",{\"1\":{\"1337\":1}}],[\"想要修改已有数据只能强制覆盖已有的文件\",{\"1\":{\"1218\":1}}],[\"想要连接多个数据库需要创建多个\",{\"1\":{\"524\":1}}],[\"骑着它我的最远骑行距离也到了100km\",{\"1\":{\"1796\":1}}],[\"骑着共享单车进城吹长安街的风\",{\"1\":{\"1785\":1}}],[\"骑上去也还挺帅\",{\"1\":{\"1796\":1}}],[\"骑行入坑记\",{\"0\":{\"1796\":1}}],[\"骑行1087公里\",{\"1\":{\"0\":1}}],[\"骑车的时候可以听风的声音\",{\"1\":{\"1796\":1}}],[\"骑车\",{\"1\":{\"1786\":1,\"1825\":1}}],[\"弄的我都不好意思再问他问题了😢然后他就请假了\",{\"1\":{\"1785\":1}}],[\"搞了一天都没开始自己的需求开发\",{\"1\":{\"1785\":1}}],[\"搞懂了\",{\"1\":{\"1344\":1}}],[\"眼看着他被产品\",{\"1\":{\"1785\":1}}],[\"眼看有被\",{\"1\":{\"376\":1}}],[\"摸鱼肆无忌惮\",{\"1\":{\"1785\":1}}],[\"补齐了一下这篇游记\",{\"1\":{\"1785\":1}}],[\"补充\",{\"0\":{\"333\":1},\"1\":{\"383\":1}}],[\"秋招的第一个offer😇都没有心情写需求了\",{\"1\":{\"1785\":1}}],[\"哼着小曲骑着车\",{\"1\":{\"1786\":1}}],[\"哼\",{\"1\":{\"1784\":1}}],[\"联调\",{\"1\":{\"1784\":1}}],[\"联合索引很多时候可以覆盖索引\",{\"1\":{\"708\":1}}],[\"联合索引中\",{\"1\":{\"702\":1}}],[\"联合索引遵守最左前缀法则\",{\"1\":{\"702\":1}}],[\"联合索引结构图\",{\"1\":{\"699\":1}}],[\"联合索引\",{\"1\":{\"699\":1}}],[\"联合的多个查询结果的列数\",{\"1\":{\"606\":1}}],[\"联合查询比使用or效率高\",{\"1\":{\"606\":1}}],[\"联合查询\",{\"0\":{\"606\":1}}],[\"祝他腿伤早点好吧\",{\"1\":{\"1783\":1}}],[\"旁敲侧击\",{\"1\":{\"1783\":1}}],[\"帮我到处打听hc\",{\"1\":{\"1783\":1}}],[\"帮助\",{\"1\":{\"1093\":1,\"1216\":1}}],[\"帮助开发人员了解java应用程序的行为和性能瓶颈\",{\"1\":{\"238\":1}}],[\"帮助清理\",{\"1\":{\"196\":1}}],[\"躺床上又把甄嬛传倍速过情关\",{\"1\":{\"1781\":1}}],[\"吃完我们五人散步到布达拉宫广场就散了\",{\"1\":{\"1846\":1}}],[\"吃完我们学生五人组在当雄县闲逛\",{\"1\":{\"1845\":1}}],[\"吃完生命维持早餐\",{\"1\":{\"1843\":1}}],[\"吃完饭骑车兜风去公司逛了逛\",{\"1\":{\"1771\":1}}],[\"吃了牛肉干锅作为晚饭\",{\"1\":{\"1838\":1}}],[\"吃泡面\",{\"1\":{\"1825\":1}}],[\"吃到一半接到报警🚨嘿嘿\",{\"1\":{\"1781\":1}}],[\"产品和运营的口径出分歧了呵呵\",{\"1\":{\"1781\":1}}],[\"产生内存泄漏\",{\"1\":{\"1514\":1}}],[\"产生和处理中断信号\",{\"1\":{\"1471\":1}}],[\"产生来自多线程间的竞争条件导致程序运行的不确定性\",{\"1\":{\"1463\":1}}],[\"产生\",{\"1\":{\"1462\":2}}],[\"产生少量的undo日志\",{\"1\":{\"750\":1}}],[\"产生大量磁盘io\",{\"1\":{\"651\":1}}],[\"产生数据发送消息的程序\",{\"1\":{\"413\":1}}],[\"产生机器代码\",{\"1\":{\"269\":1}}],[\"产生了新对象\",{\"1\":{\"176\":1}}],[\"仪仗队的影子我是一点没见着\",{\"1\":{\"1781\":1}}],[\"幸好mentor在边上及时禁用了机器😅\",{\"1\":{\"1781\":1}}],[\"幸运的是\",{\"1\":{\"1773\":1}}],[\"困于业务\",{\"1\":{\"1780\":1}}],[\"沉迷学习\",{\"1\":{\"1780\":1}}],[\"早餐是稀饭\",{\"1\":{\"1842\":1}}],[\"早上十点多\",{\"1\":{\"1836\":1}}],[\"早上在路边吃了顿四川人开的\",{\"1\":{\"1836\":1}}],[\"早日跑个全马\",{\"1\":{\"1783\":1}}],[\"早报里这阵子的某个数据都是错的😥嘿嘿\",{\"1\":{\"1778\":1}}],[\"早期\",{\"1\":{\"1751\":1}}],[\"早期航空公司都是靠着代理商\",{\"1\":{\"1726\":1}}],[\"早期曝光对象工厂private\",{\"1\":{\"1599\":1}}],[\"早期曝光对象private\",{\"1\":{\"1599\":1}}],[\"早期的默认存储引擎\",{\"1\":{\"679\":1}}],[\"早期日志实现\",{\"1\":{\"378\":1}}],[\"早期绑定\",{\"1\":{\"245\":1}}],[\"着实羡慕死我了\",{\"1\":{\"1776\":1}}],[\"厚积薄发\",{\"1\":{\"1776\":1}}],[\"陪他体检\",{\"1\":{\"1776\":1}}],[\"哦对了顺便贴个有趣的\",{\"1\":{\"1775\":1}}],[\"恭王府40块的门票也没看到啥好看的\",{\"1\":{\"1775\":1}}],[\"渐渐得\",{\"1\":{\"1844\":1}}],[\"渐渐适应\",{\"1\":{\"1775\":1}}],[\"渐进式采取分而治之的方式\",{\"1\":{\"883\":1}}],[\"渐进式rehash\",{\"1\":{\"883\":1}}],[\"渐进方式\",{\"1\":{\"883\":1}}],[\"渐进rehash\",{\"1\":{\"883\":1}}],[\"圆明园可以免门票\",{\"1\":{\"1774\":1}}],[\"买个入门相机玩一玩～放几年前我还是个买手机只买红米\",{\"1\":{\"1819\":1}}],[\"买生活用品\",{\"1\":{\"1815\":1}}],[\"买什么佳能索尼\",{\"1\":{\"1799\":1}}],[\"买了退退了买\",{\"1\":{\"1799\":1}}],[\"买了房\",{\"1\":{\"1786\":1}}],[\"买了哑铃偶尔回来撸撸铁\",{\"1\":{\"1774\":1}}],[\"买的其实是一种包装出来的产品\",{\"1\":{\"1735\":1}}],[\"智齿发作\",{\"1\":{\"1773\":1}}],[\"智能化路由的解决方案\",{\"1\":{\"1302\":1}}],[\"肌肉酸痛\",{\"1\":{\"1773\":1}}],[\"浑身不舒坦\",{\"1\":{\"1773\":1}}],[\"却也还要学下去\",{\"1\":{\"1773\":1}}],[\"却为业务模块所共同调用的逻辑或责任\",{\"1\":{\"1601\":1}}],[\"啥\",{\"1\":{\"1773\":1}}],[\"刚开始蹦我的手机就掉地上了\",{\"1\":{\"1841\":1}}],[\"刚上车的时候是无比兴奋的\",{\"1\":{\"1833\":1}}],[\"刚上车的时候看见一个藏族阿姨用一个布兜背着一个可爱的宝宝\",{\"1\":{\"1833\":1}}],[\"刚落地泰安\",{\"1\":{\"1825\":1}}],[\"刚部署完第一台机器\",{\"1\":{\"1781\":1}}],[\"刚坐下还没擦干净桌子\",{\"1\":{\"1773\":1}}],[\"刚性事务\",{\"1\":{\"1282\":1}}],[\"晚一点发车的z8991和y971应该是目前最佳的进藏火车\",{\"1\":{\"1833\":1}}],[\"晚霞\",{\"1\":{\"1825\":1}}],[\"晚霞也好看\",{\"1\":{\"1771\":1}}],[\"晚上我们和wj\",{\"1\":{\"1846\":1}}],[\"晚上到达了当雄\",{\"1\":{\"1845\":1}}],[\"晚上到日喀则市区已经是将近十点钟了\",{\"1\":{\"1843\":1}}],[\"晚上点了顿肯德基外卖狠狠吃了一顿\",{\"1\":{\"1843\":1}}],[\"晚上师傅带我们到7782燥吧参加了一个篝火晚会\",{\"1\":{\"1841\":1}}],[\"晚上出门吃了第一顿牦牛火锅\",{\"1\":{\"1834\":1}}],[\"晚上吃了点杂七杂八的\",{\"1\":{\"1833\":1}}],[\"晚上还是自己分享周会\",{\"1\":{\"1781\":1}}],[\"晚上再去看个偷心晚宴演出\",{\"1\":{\"1775\":1}}],[\"晚上回来发现脖子黑了一大圈\",{\"1\":{\"1772\":1}}],[\"晚上又跑去奥体公园兜了一圈\",{\"1\":{\"1771\":1}}],[\"晚期绑定\",{\"1\":{\"245\":1}}],[\"偌大的北京\",{\"1\":{\"1771\":1}}],[\"糙着过活\",{\"1\":{\"1771\":1}}],[\"租房\",{\"1\":{\"1815\":1}}],[\"租了个老破小也就住下了\",{\"1\":{\"1771\":1}}],[\"租车\",{\"1\":{\"1724\":1}}],[\"身边摆满了1元\",{\"1\":{\"1836\":1}}],[\"身体却已落下一身伤病\",{\"1\":{\"1786\":1}}],[\"身体上经受了病痛\",{\"1\":{\"1771\":1}}],[\"身份执行\",{\"1\":{\"1691\":1}}],[\"身份\",{\"1\":{\"1515\":1}}],[\"身份证号和地理位置无关\",{\"1\":{\"1423\":1}}],[\"身份证最后为x\",{\"1\":{\"583\":1}}],[\"身份验证\",{\"1\":{\"927\":1}}],[\"身份认证\",{\"1\":{\"923\":1}}],[\"宗教\",{\"2\":{\"1769\":1}}],[\"尤其是国内这种大局域网的网络环境下\",{\"1\":{\"1810\":1}}],[\"尤其是百度网盘\",{\"1\":{\"1805\":1}}],[\"尤其是热门的资源\",{\"1\":{\"1805\":1}}],[\"尤其是中东\",{\"1\":{\"1767\":1}}],[\"尤且是看待那些身处高位的人\",{\"1\":{\"1767\":1}}],[\"尤金\",{\"1\":{\"1767\":1}}],[\"法国的言论自由\",{\"1\":{\"1767\":1}}],[\"法国宪章如何保障普通公民的权利\",{\"1\":{\"1767\":1}}],[\"法国科学技术上的优越性\",{\"1\":{\"1767\":1}}],[\"埃及的塔赫塔维到法国学习游历得到的认知\",{\"1\":{\"1767\":1}}],[\"培养成军人或文职\",{\"1\":{\"1767\":1}}],[\"皈依伊斯兰教\",{\"1\":{\"1767\":1}}],[\"羁縻统治\",{\"1\":{\"1767\":1}}],[\"奥斯曼人运行着自己的奴隶征募制度\",{\"1\":{\"1767\":1}}],[\"奥斯曼人不愿或无法在各阿拉伯行省建立标准化的政府\",{\"1\":{\"1767\":1}}],[\"奥斯曼的统治适应了当地政治\",{\"1\":{\"1767\":1}}],[\"奥斯曼塞利姆苏丹征服了统治埃及的马木鲁克王朝\",{\"1\":{\"1767\":1}}],[\"罗根\",{\"1\":{\"1767\":1}}],[\"罗马人最早是多神教\",{\"1\":{\"1759\":1}}],[\"摘录\",{\"1\":{\"1767\":1}}],[\"摘要算法\",{\"1\":{\"1401\":1}}],[\"叙利亚\",{\"1\":{\"1767\":1}}],[\"德鲁兹信仰创始人哈姆扎\",{\"1\":{\"1767\":1}}],[\"德鲁兹教\",{\"1\":{\"1767\":1}}],[\"神秘主义仪式等方法实现心灵的提升\",{\"1\":{\"1767\":1}}],[\"神清气爽\",{\"1\":{\"10\":1}}],[\"默想\",{\"1\":{\"1767\":1}}],[\"默认执行所有真实逻辑\",{\"1\":{\"1708\":1}}],[\"默认bash\",{\"1\":{\"1692\":1}}],[\"默认都是单例的\",{\"1\":{\"1614\":1}}],[\"默认选项\",{\"1\":{\"1576\":1}}],[\"默认就是\",{\"1\":{\"1528\":1}}],[\"默认大小是\",{\"1\":{\"1494\":1}}],[\"默认大小为16mb\",{\"1\":{\"638\":1}}],[\"默认初始容量是10\",{\"1\":{\"1493\":1}}],[\"默认网关\",{\"1\":{\"1426\":1}}],[\"默认端口\",{\"1\":{\"1401\":2}}],[\"默认所有都不缓存\",{\"1\":{\"1347\":1}}],[\"默认信息被创建之后运行\",{\"1\":{\"1345\":1}}],[\"默认模式\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"默认启用\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"默认能够存储\",{\"1\":{\"1167\":1}}],[\"默认8080建议更换\",{\"1\":{\"1164\":1}}],[\"默认容量integer\",{\"1\":{\"1107\":1}}],[\"默认根据父线程\",{\"1\":{\"1088\":2}}],[\"默认最低\",{\"1\":{\"1057\":1}}],[\"默认最大\",{\"1\":{\"445\":1}}],[\"默认采用的\",{\"1\":{\"1035\":2}}],[\"默认采用statement\",{\"1\":{\"643\":1}}],[\"默认对每条单独的\",{\"1\":{\"1033\":1}}],[\"默认代理了除\",{\"1\":{\"1016\":1}}],[\"默认升序\",{\"1\":{\"969\":1,\"970\":1}}],[\"默认每隔1s随机选出五个节点\",{\"1\":{\"949\":1}}],[\"默认有16个\",{\"1\":{\"906\":1}}],[\"默认习惯是\",{\"1\":{\"828\":1}}],[\"默认使用方法参数生成\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"默认使用的是executors\",{\"1\":{\"1108\":1}}],[\"默认使用的都是守护线程\",{\"1\":{\"796\":1}}],[\"默认使用直接内存\",{\"1\":{\"826\":1}}],[\"默认使用行级锁\",{\"1\":{\"549\":1}}],[\"默认4s\",{\"1\":{\"1077\":1}}],[\"默认48m\",{\"1\":{\"739\":1}}],[\"默认45s\",{\"1\":{\"483\":1}}],[\"默认隔离级别为repeatable\",{\"1\":{\"737\":1}}],[\"默认on\",{\"1\":{\"719\":1}}],[\"默认行格式就是dynamic\",{\"1\":{\"687\":1}}],[\"默认dynamic行格式\",{\"1\":{\"683\":1}}],[\"默认debug\",{\"1\":{\"355\":1}}],[\"默认hash索引\",{\"1\":{\"680\":1}}],[\"默认独立表空间innodb\",{\"1\":{\"673\":1}}],[\"默认session\",{\"1\":{\"671\":3}}],[\"默认开启\",{\"1\":{\"643\":1,\"675\":1,\"791\":1}}],[\"默认个数\",{\"1\":{\"640\":1}}],[\"默认文件为ibdata1\",{\"1\":{\"639\":1}}],[\"默认256k\",{\"1\":{\"616\":1}}],[\"默认约束\",{\"1\":{\"598\":1}}],[\"默认情况下\",{\"1\":{\"557\":1,\"1561\":1}}],[\"默认情况下只启用本地的会话缓存\",{\"1\":{\"533\":1}}],[\"默认的环境变量存储在针对用户的~\",{\"1\":{\"1701\":1}}],[\"默认的保存文件为\",{\"1\":{\"1576\":1}}],[\"默认的信号处理函数\",{\"1\":{\"1465\":1}}],[\"默认的代理创建器\",{\"1\":{\"1023\":1}}],[\"默认的就是表锁\",{\"1\":{\"552\":1}}],[\"默认的简单执行器\",{\"1\":{\"542\":1}}],[\"默认56\",{\"1\":{\"732\":1}}],[\"默认50\",{\"1\":{\"615\":1,\"872\":1}}],[\"默认50mb\",{\"1\":{\"485\":1}}],[\"默认50个\",{\"1\":{\"485\":1}}],[\"默认5s\",{\"1\":{\"485\":1}}],[\"默认5min\",{\"1\":{\"483\":1,\"485\":1}}],[\"默认删除最早的\",{\"1\":{\"477\":1}}],[\"默认会把分区的\",{\"1\":{\"472\":1}}],[\"默认会优先使用\",{\"1\":{\"376\":1}}],[\"默认false\",{\"1\":{\"470\":1}}],[\"默认1mb\",{\"1\":{\"935\":1}}],[\"默认16mb\",{\"1\":{\"739\":1}}],[\"默认16k\",{\"1\":{\"459\":1}}],[\"默认1000ms\",{\"1\":{\"732\":1}}],[\"默认13\",{\"1\":{\"732\":1}}],[\"默认128m\",{\"1\":{\"731\":1}}],[\"默认1g\",{\"1\":{\"467\":1}}],[\"默认是talball\",{\"1\":{\"1688\":1}}],[\"默认是水平触发\",{\"1\":{\"1487\":1}}],[\"默认是当前分支\",{\"1\":{\"1337\":1}}],[\"默认是无加锁的\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"默认是父线程的类加载器\",{\"1\":{\"1087\":1}}],[\"默认是关注op\",{\"1\":{\"867\":1}}],[\"默认是关闭的\",{\"1\":{\"512\":1}}],[\"默认是分号作为结束符\",{\"1\":{\"628\":1}}],[\"默认是1g\",{\"1\":{\"476\":1}}],[\"默认是\",{\"1\":{\"467\":2,\"491\":2,\"827\":1,\"843\":1,\"1338\":1}}],[\"默认是int最大值\",{\"1\":{\"460\":1}}],[\"默认即true开启\",{\"1\":{\"461\":1}}],[\"默认3600s\",{\"1\":{\"1219\":1}}],[\"默认37\",{\"1\":{\"732\":1}}],[\"默认3306\",{\"1\":{\"569\":1}}],[\"默认3s\",{\"1\":{\"483\":1}}],[\"默认30s\",{\"1\":{\"460\":1,\"467\":1}}],[\"默认32m\",{\"1\":{\"459\":1}}],[\"默认0\",{\"1\":{\"459\":1}}],[\"默认异步\",{\"1\":{\"456\":1}}],[\"默认\",{\"1\":{\"450\":1,\"459\":1,\"467\":2,\"469\":1,\"485\":5,\"586\":1,\"623\":1,\"631\":1,\"643\":1,\"839\":1,\"857\":1,\"916\":1,\"1035\":1,\"1057\":2,\"1087\":1,\"1088\":6,\"1228\":1,\"1264\":1,\"1269\":1,\"1409\":1,\"1464\":3,\"1474\":2,\"1556\":1,\"1577\":1,\"1595\":2,\"1596\":1,\"1612\":1,\"1613\":1,\"1632\":1}}],[\"默认时1个副本\",{\"1\":{\"445\":1}}],[\"默认自动创建\",{\"1\":{\"699\":1}}],[\"默认自动\",{\"1\":{\"422\":1}}],[\"默认丢弃所有的日志记录\",{\"1\":{\"382\":1}}],[\"默认实现打印日志\",{\"1\":{\"382\":1}}],[\"默认utf\",{\"1\":{\"357\":1}}],[\"默认值是\",{\"1\":{\"599\":1}}],[\"默认值见\",{\"1\":{\"519\":1}}],[\"默认值为1\",{\"1\":{\"460\":1}}],[\"默认值\",{\"1\":{\"348\":1,\"450\":1,\"493\":1,\"533\":1,\"638\":1,\"722\":1,\"739\":1,\"861\":1,\"1555\":1}}],[\"默认策略是\",{\"1\":{\"494\":1}}],[\"默认策略\",{\"1\":{\"332\":1,\"1109\":1,\"1511\":1}}],[\"默认打开文件流会清空\",{\"1\":{\"317\":1,\"318\":1}}],[\"默认长度10\",{\"1\":{\"304\":1}}],[\"默认方法实际调用的这一层\",{\"1\":{\"826\":1}}],[\"默认方法\",{\"1\":{\"292\":1}}],[\"默认条件下\",{\"1\":{\"269\":1}}],[\"默认为0\",{\"1\":{\"1164\":1}}],[\"默认为\",{\"1\":{\"485\":1}}],[\"默认为7000\",{\"1\":{\"233\":1}}],[\"默认为true\",{\"1\":{\"36\":1}}],[\"默认单位是秒\",{\"1\":{\"230\":1}}],[\"默认分配顺序\",{\"1\":{\"215\":1}}],[\"默认不刷新\",{\"1\":{\"533\":1}}],[\"默认不使用分代收集\",{\"1\":{\"178\":1}}],[\"默认不可中断\",{\"1\":{\"156\":1}}],[\"默认非公平的\",{\"1\":{\"1517\":1}}],[\"默认非公平\",{\"1\":{\"159\":1,\"1499\":1}}],[\"默认基于时间\",{\"1\":{\"477\":1}}],[\"默认基于\",{\"1\":{\"157\":1}}],[\"默认在default库执行\",{\"1\":{\"110\":1}}],[\"默认数据库在hdfs的路径为\",{\"1\":{\"107\":1}}],[\"圣战\",{\"1\":{\"1767\":1}}],[\"圣经\",{\"1\":{\"1307\":1}}],[\"穆斯林就有责任参加\",{\"1\":{\"1767\":1}}],[\"穆罕默德死了之后\",{\"1\":{\"1764\":1}}],[\"穆罕默德受上帝的启示记载成\",{\"1\":{\"1764\":1}}],[\"哲学和社会观点都应该被摒弃\",{\"1\":{\"1767\":1}}],[\"哲学家进餐问题\",{\"1\":{\"1467\":1}}],[\"肯尼亚等地区\",{\"1\":{\"1767\":1}}],[\"苏毗\",{\"1\":{\"1837\":1}}],[\"苏州\",{\"1\":{\"1825\":1}}],[\"苏非派使用多种技巧来达到同造物主神秘结合的狂喜\",{\"1\":{\"1767\":1}}],[\"苏非主义\",{\"1\":{\"1767\":2}}],[\"苏菲主义强调个体灵魂的内在寻求与真主的连接\",{\"1\":{\"1767\":1}}],[\"苏丹\",{\"1\":{\"1767\":1}}],[\"苏宁易购\",{\"1\":{\"1726\":1}}],[\"瓦哈比主义将苏非主义和圣人崇拜等主流宗教行为定性为多神崇拜\",{\"1\":{\"1767\":1}}],[\"瓦哈比派将奥斯曼帝国伊斯兰教的很大一块视为多神崇拜\",{\"1\":{\"1767\":1}}],[\"瓦哈比派\",{\"1\":{\"1767\":1}}],[\"瓦哈卜\",{\"1\":{\"1767\":1}}],[\"北洋园回来了\",{\"1\":{\"1811\":1}}],[\"北洋园\",{\"1\":{\"1811\":1}}],[\"北非的大多数阿拉伯国家\",{\"1\":{\"1766\":1}}],[\"北京大抵也差不多那样\",{\"1\":{\"1785\":1}}],[\"北京大爷大妈不跳广场舞\",{\"1\":{\"1771\":1}}],[\"北京实习游记\",{\"0\":{\"1770\":1}}],[\"北京上海广州的时刻由民航总局审批\",{\"1\":{\"1730\":1}}],[\"北京首都\",{\"1\":{\"1722\":1}}],[\"北京\",{\"1\":{\"596\":1,\"1816\":1}}],[\"巴林和阿塞拜疆\",{\"1\":{\"1765\":1}}],[\"伊斯玛仪派中发展出来的\",{\"1\":{\"1767\":1}}],[\"伊斯兰也信上帝\",{\"1\":{\"1764\":1}}],[\"伊斯兰教神秘主义有很多种形式\",{\"1\":{\"1767\":1}}],[\"伊斯兰教中占比超过90\",{\"1\":{\"1766\":1}}],[\"伊斯兰教因为谁是正统继承人\",{\"1\":{\"1764\":1}}],[\"伊斯兰教\",{\"0\":{\"1764\":1}}],[\"伊本\",{\"1\":{\"1767\":1}}],[\"伊拉克\",{\"1\":{\"1765\":1}}],[\"塔利卜\",{\"1\":{\"1765\":1}}],[\"塔纳赫\",{\"1\":{\"1758\":1}}],[\"阿尔及利亚一样\",{\"1\":{\"1767\":1}}],[\"阿拉伯世界第一次被一个非阿拉伯国家的首都统治\",{\"1\":{\"1767\":1}}],[\"阿拉伯联合酋长国\",{\"1\":{\"1767\":1}}],[\"阿卜杜勒\",{\"1\":{\"1767\":1}}],[\"阿比\",{\"1\":{\"1765\":1}}],[\"阿里的承诺永远不能信\",{\"1\":{\"1806\":1}}],[\"阿里的待遇是真的香\",{\"1\":{\"1776\":1}}],[\"阿里源自伊斯兰教什叶派伊斯玛仪派\",{\"1\":{\"1767\":1}}],[\"阿里云盘推出了第三方权益包\",{\"1\":{\"1811\":1}}],[\"阿里云盘+vidhub\",{\"1\":{\"1811\":1}}],[\"阿里云盘\",{\"1\":{\"1805\":1}}],[\"阿里云oss\",{\"1\":{\"1365\":1}}],[\"阿里云短信测试\",{\"1\":{\"14\":1}}],[\"阿里云短信\",{\"1\":{\"14\":1}}],[\"阿里higress\",{\"1\":{\"1297\":1}}],[\"阿里开源的消息队列\",{\"1\":{\"808\":1}}],[\"阿里巴巴在2012年开源的分布式消息中间件\",{\"1\":{\"426\":1}}],[\"阿里巴巴参考\",{\"1\":{\"410\":1}}],[\"阿里巴巴\",{\"1\":{\"391\":1}}],[\"什么鸡爪炒魔芋\",{\"1\":{\"1841\":1}}],[\"什么都不做\",{\"1\":{\"148\":1}}],[\"什刹海\",{\"1\":{\"1775\":1}}],[\"什叶派\",{\"0\":{\"1765\":1}}],[\"逊尼派的一支极端保守派别\",{\"1\":{\"1767\":1}}],[\"逊尼派\",{\"0\":{\"1766\":1},\"1\":{\"1764\":1}}],[\"耶稣只是个先知\",{\"1\":{\"1764\":1}}],[\"耶稣宣称自己就是犹太教所谓的救世主\",{\"1\":{\"1759\":1}}],[\"妥拉\",{\"1\":{\"1764\":1}}],[\"妥善存储海量待处理数据\",{\"1\":{\"1213\":1}}],[\"妥善关闭\",{\"1\":{\"514\":1}}],[\"摩西\",{\"1\":{\"1764\":1}}],[\"居住于黎巴嫩贝鲁特北部的bkirki\",{\"1\":{\"1762\":1}}],[\"礼拜仪式传统的一个分支\",{\"1\":{\"1762\":1}}],[\"马卡鲁峰\",{\"1\":{\"1844\":1}}],[\"马泉营的公寓也是真的香\",{\"1\":{\"1776\":1}}],[\"马木鲁克家族依然拥有比伊斯坦布尔任命的总督更大的政治权利\",{\"1\":{\"1767\":1}}],[\"马龙派\",{\"0\":{\"1762\":1}}],[\"马丁路德等人开始宗教改革\",{\"1\":{\"1761\":1}}],[\"胸口画十字的就是天主教\",{\"1\":{\"1761\":1}}],[\"赎罪券\",{\"1\":{\"1761\":1}}],[\"东罗马宣称自己才是耶稣的正统一支\",{\"1\":{\"1760\":1}}],[\"东正教\",{\"0\":{\"1760\":1}}],[\"庆祝圣子耶稣诞生的节日\",{\"1\":{\"1759\":1}}],[\"乱七八糟的书汇总起来编了一本圣经\",{\"1\":{\"1759\":1}}],[\"乱七八糟的资料汇成了\",{\"1\":{\"1758\":1}}],[\"救世主已经来过了\",{\"1\":{\"1759\":1}}],[\"创传基督教\",{\"1\":{\"1759\":1}}],[\"创建私有仓库\",{\"1\":{\"1790\":1}}],[\"创建应用监听器springapplicationrunlisteners开始监听\",{\"1\":{\"1607\":1}}],[\"创建了联合索引\",{\"1\":{\"1547\":1}}],[\"创建了一个对象\",{\"1\":{\"290\":1}}],[\"创建接口\",{\"1\":{\"1532\":1}}],[\"创建过程\",{\"1\":{\"1521\":1}}],[\"创建子进程服务客户\",{\"1\":{\"1487\":1}}],[\"创建子进程执行保存\",{\"1\":{\"911\":1}}],[\"创建状态\",{\"1\":{\"1450\":1}}],[\"创建所有\",{\"1\":{\"1379\":1}}],[\"创建标签引用\",{\"1\":{\"1351\":1}}],[\"创建提交对象\",{\"1\":{\"1350\":1}}],[\"创建附注标签\",{\"1\":{\"1329\":1}}],[\"创建轻量标签\",{\"1\":{\"1329\":1}}],[\"创建日志\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"创建单例模式的配置\",{\"1\":{\"1264\":1}}],[\"创建单级目录\",{\"1\":{\"779\":1}}],[\"创建分支\",{\"1\":{\"1333\":1}}],[\"创建分桶表\",{\"1\":{\"1228\":1}}],[\"创建分区表\",{\"1\":{\"118\":1,\"1228\":1}}],[\"创建目录\",{\"1\":{\"1218\":1}}],[\"创建节点并设置权限\",{\"1\":{\"1177\":1}}],[\"创建节点的事务id\",{\"1\":{\"1174\":1}}],[\"创建节点\",{\"0\":{\"1173\":1}}],[\"创建权限\",{\"1\":{\"1168\":1}}],[\"创建远程连接用户\",{\"0\":{\"1151\":1}}],[\"创建实现类定义具体的远程执行逻辑\",{\"1\":{\"1125\":1}}],[\"创建实际的代理对象作为\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"创建特定的线程池\",{\"1\":{\"1110\":1}}],[\"创建代理对象\",{\"1\":{\"1058\":1}}],[\"创建保存点\",{\"1\":{\"1049\":1}}],[\"创建携带空事务的事务状态\",{\"1\":{\"1049\":1}}],[\"创建事务\",{\"1\":{\"1038\":1}}],[\"创建和删除子节点会收到通知\",{\"1\":{\"1191\":1}}],[\"创建和\",{\"1\":{\"970\":1}}],[\"创建和管理的线程\",{\"1\":{\"278\":1}}],[\"创建排序辅助函数\",{\"1\":{\"963\":1}}],[\"创建全局表格redis\",{\"1\":{\"963\":1}}],[\"创建基础lua环境\",{\"1\":{\"963\":1}}],[\"创建基于\",{\"1\":{\"156\":2}}],[\"创建lua环境\",{\"0\":{\"963\":1}}],[\"创建连向主服务器的网络连接\",{\"1\":{\"939\":1}}],[\"创建共享对象\",{\"1\":{\"929\":1}}],[\"创建相应的redisclient\",{\"1\":{\"924\":1}}],[\"创建与连接\",{\"0\":{\"924\":1}}],[\"创建与载入\",{\"0\":{\"911\":1}}],[\"创建不带网络连接的伪客户端\",{\"1\":{\"916\":1}}],[\"创建定时器自动删除\",{\"1\":{\"908\":1}}],[\"创建新资源\",{\"1\":{\"1608\":1,\"1640\":1}}],[\"创建新分支并应用栈顶贮藏\",{\"1\":{\"1343\":1}}],[\"创建新用户用于slave来连接主库\",{\"1\":{\"1154\":1}}],[\"创建新事务\",{\"1\":{\"1041\":3}}],[\"创建新的pubsubpattern结构\",{\"1\":{\"955\":1}}],[\"创建新的频道键\",{\"1\":{\"954\":1}}],[\"创建新的空白哈希表\",{\"1\":{\"883\":1}}],[\"创建新结点时\",{\"1\":{\"886\":1}}],[\"创建新类\",{\"1\":{\"358\":1}}],[\"创建客户端启动类\",{\"1\":{\"813\":1}}],[\"创建客户端请求\",{\"1\":{\"450\":1}}],[\"创建服务端启动类\",{\"1\":{\"813\":1}}],[\"创建服务器\",{\"1\":{\"782\":1,\"783\":1,\"1125\":1}}],[\"创建固定数量\",{\"1\":{\"791\":1}}],[\"创建固定线程数量的线程池\",{\"1\":{\"332\":1}}],[\"创建多级目录\",{\"1\":{\"779\":1}}],[\"创建checkpoint时\",{\"1\":{\"739\":1}}],[\"创建stu\",{\"1\":{\"623\":1}}],[\"创建searchrequest对象\",{\"1\":{\"51\":1}}],[\"创建视图\",{\"1\":{\"622\":1}}],[\"创建用户组\",{\"1\":{\"1692\":1}}],[\"创建用户test\",{\"1\":{\"590\":2}}],[\"创建用户\",{\"1\":{\"590\":1,\"1692\":1}}],[\"创建表结构的语句\",{\"1\":{\"675\":1}}],[\"创建表时指定表空间\",{\"1\":{\"639\":1}}],[\"创建表时设置外键\",{\"1\":{\"599\":1}}],[\"创建表空间\",{\"1\":{\"639\":1}}],[\"创建表\",{\"1\":{\"575\":1}}],[\"创建下面三种实现的代理\",{\"1\":{\"544\":1}}],[\"创建完但尚未启动的状态\",{\"1\":{\"1089\":1}}],[\"创建完\",{\"1\":{\"542\":1}}],[\"创建完成后根据已有的\",{\"1\":{\"1058\":1}}],[\"创建完成后\",{\"1\":{\"196\":1,\"1059\":1}}],[\"创建会话\",{\"0\":{\"542\":1}}],[\"创建消费者\",{\"1\":{\"488\":1}}],[\"创建生产者\",{\"1\":{\"456\":1}}],[\"创建只有一个线程的线程池对象\",{\"1\":{\"332\":1}}],[\"创建临时线程\",{\"1\":{\"332\":1}}],[\"创建线程类\",{\"1\":{\"1508\":1}}],[\"创建线程的方式\",{\"0\":{\"1508\":1}}],[\"创建线程的开销很大\",{\"1\":{\"332\":1}}],[\"创建线程池\",{\"0\":{\"1106\":1},\"1\":{\"1106\":1,\"1110\":1}}],[\"创建线程对象\",{\"1\":{\"327\":1}}],[\"创建redis\",{\"1\":{\"963\":1}}],[\"创建request\",{\"1\":{\"47\":1}}],[\"创建request对象\",{\"1\":{\"42\":1,\"43\":1,\"44\":1}}],[\"创建rdb和命令缓冲区并发送\",{\"1\":{\"935\":1}}],[\"创建runnable接口匿名内部类\",{\"1\":{\"328\":1}}],[\"创建等功能\",{\"1\":{\"314\":1}}],[\"创建一条流水线\",{\"1\":{\"312\":1}}],[\"创建一个私有的仓库叫\",{\"1\":{\"1791\":1}}],[\"创建一个新的节点\",{\"1\":{\"1651\":1}}],[\"创建一个新的快照和提交\",{\"1\":{\"1336\":1}}],[\"创建一个新\",{\"1\":{\"1514\":1}}],[\"创建一个新分支指向它\",{\"1\":{\"1346\":1}}],[\"创建一个临时序号节点\",{\"1\":{\"1184\":1,\"1185\":1}}],[\"创建一个代理对象放入容器\",{\"1\":{\"1060\":1}}],[\"创建一个名为\",{\"1\":{\"446\":1}}],[\"创建一个线程池\",{\"1\":{\"332\":1}}],[\"创建一个初始线程数为\",{\"1\":{\"161\":1}}],[\"创建一个初始计数为\",{\"1\":{\"160\":1}}],[\"创建一个初始许可证数量为\",{\"1\":{\"159\":1}}],[\"创建一个\",{\"1\":{\"53\":2,\"1347\":1,\"1487\":1,\"1791\":2}}],[\"创建格式\",{\"1\":{\"295\":1,\"296\":1,\"298\":1}}],[\"创建类的实例\",{\"1\":{\"247\":1}}],[\"创建并切换到该分支\",{\"1\":{\"1333\":1}}],[\"创建并删除数据库等\",{\"1\":{\"675\":1}}],[\"创建并开启\",{\"1\":{\"196\":1}}],[\"创建并行度\",{\"1\":{\"153\":1}}],[\"创建时指定容量\",{\"1\":{\"1499\":1}}],[\"创建时需要指定清理的工作\",{\"1\":{\"195\":1}}],[\"创建时间事件\",{\"1\":{\"929\":1}}],[\"创建时间\",{\"1\":{\"37\":1}}],[\"创建引用处理线程\",{\"1\":{\"188\":1}}],[\"创建引用时没有使用\",{\"1\":{\"186\":1}}],[\"创建引用时如果使用了\",{\"1\":{\"186\":1}}],[\"创建重入锁关联的条件变量\",{\"1\":{\"156\":1}}],[\"创建流对应的任务reducetask\",{\"1\":{\"153\":1}}],[\"创建数据库\",{\"0\":{\"107\":1},\"1\":{\"574\":1,\"591\":1}}],[\"创建动态代理对象\",{\"1\":{\"91\":1}}],[\"创建eventbus实例\",{\"1\":{\"84\":1}}],[\"创建的\",{\"1\":{\"826\":1,\"1629\":1}}],[\"创建的对象都是强引用\",{\"1\":{\"191\":1}}],[\"创建的也是不可变实例\",{\"1\":{\"79\":1}}],[\"创建的都是不可变实例\",{\"1\":{\"79\":1}}],[\"创建空的\",{\"1\":{\"58\":1}}],[\"创建可能为\",{\"1\":{\"58\":1}}],[\"创建包含非空值的\",{\"1\":{\"58\":1}}],[\"创建索引时定义的顺序\",{\"1\":{\"702\":1}}],[\"创建索引\",{\"1\":{\"53\":1,\"701\":1,\"1566\":1}}],[\"创建\",{\"0\":{\"42\":1,\"47\":1,\"826\":1,\"1067\":1,\"1196\":1,\"1197\":1},\"1\":{\"51\":1,\"53\":3,\"91\":1,\"92\":1,\"163\":1,\"418\":1,\"542\":1,\"544\":1,\"628\":1,\"636\":1,\"785\":1,\"786\":1,\"813\":2,\"826\":1,\"834\":1,\"863\":2,\"873\":2,\"911\":1,\"924\":1,\"1012\":2,\"1059\":1,\"1114\":3,\"1115\":1,\"1379\":2,\"1474\":1,\"1629\":1,\"1859\":1}}],[\"犹太教\",{\"0\":{\"1758\":1}}],[\"难度主要体现在以下四点\",{\"1\":{\"1752\":1}}],[\"难以置信的深蓝\",{\"1\":{\"1843\":1}}],[\"难以创建或重现\",{\"1\":{\"1706\":1}}],[\"难以适应较为复杂的场景\",{\"1\":{\"1610\":1}}],[\"难以调试等\",{\"1\":{\"1136\":1}}],[\"难以保证即使进行故障转移\",{\"1\":{\"949\":1}}],[\"难以支持高并发的场景\",{\"1\":{\"549\":1}}],[\"难以满足用户在某些场景下的实时性要求\",{\"1\":{\"442\":1}}],[\"须以本国为起点或终点\",{\"1\":{\"1749\":1}}],[\"境内运输权\",{\"0\":{\"1749\":1}}],[\"桥梁权\",{\"0\":{\"1747\":1}}],[\"桥接模式通过将抽象部分与实现部分分离\",{\"1\":{\"375\":1}}],[\"桥接模式通过将继承关系转化为组合关系\",{\"1\":{\"375\":1}}],[\"桥接模式\",{\"0\":{\"375\":1},\"1\":{\"375\":1}}],[\"站上下客货\",{\"1\":{\"1746\":1}}],[\"承运人将自己国家始发的客货运到协议国家\",{\"1\":{\"1746\":1}}],[\"承运人从本国运输客货到另一国时可以将第三国\",{\"1\":{\"1746\":1}}],[\"承担所有事件的舰艇和响应\",{\"1\":{\"1488\":1}}],[\"货\",{\"1\":{\"1743\":1}}],[\"领空飞越权\",{\"0\":{\"1742\":1}}],[\"制定的一种国家性质的航空运输权利\",{\"1\":{\"1741\":1}}],[\"制定通信双方要共同遵守的通信规则\",{\"1\":{\"845\":1}}],[\"舱\",{\"1\":{\"1739\":1}}],[\"舱等\",{\"1\":{\"1739\":2}}],[\"舱位可售\",{\"1\":{\"1740\":1}}],[\"舱位介绍\",{\"0\":{\"1739\":1}}],[\"舱位缓存\",{\"0\":{\"1737\":1}}],[\"舱位状态\",{\"0\":{\"1736\":1,\"1740\":1}}],[\"舱位分类\",{\"0\":{\"1735\":1}}],[\"舱位\",{\"0\":{\"1734\":1},\"1\":{\"1739\":2}}],[\"舱位就是航司的商品\",{\"1\":{\"1722\":1}}],[\"儿童\",{\"1\":{\"1738\":1}}],[\"座位可利用情况不明\",{\"1\":{\"1736\":1}}],[\"座位可用情况\",{\"1\":{\"1734\":1}}],[\"舒适度不同\",{\"1\":{\"1735\":1}}],[\"商务\",{\"1\":{\"1739\":1}}],[\"商务舱\",{\"1\":{\"1735\":1}}],[\"商品信息展示的业务\",{\"1\":{\"1367\":1}}],[\"商品信息\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"商品系统扣减库存\",{\"1\":{\"1288\":1,\"1370\":1}}],[\"商品金额\",{\"1\":{\"124\":1}}],[\"飞抵西宁时的丹霞地貌着实震惊到本江苏人了\",{\"1\":{\"1833\":1}}],[\"飞猪\",{\"1\":{\"1751\":1}}],[\"飞机落地长沙\",{\"1\":{\"1849\":1}}],[\"飞机上的兰州大哥等等\",{\"1\":{\"1849\":1}}],[\"飞机上和隔壁的兰州本地大哥聊了一路\",{\"1\":{\"1848\":1}}],[\"飞机上真实的物理座位就三种\",{\"1\":{\"1735\":1}}],[\"飞机+硬座的价格比全程硬卧还便宜点\",{\"1\":{\"1833\":1}}],[\"飞机可以在协议国境内载运乘客\",{\"1\":{\"1745\":1}}],[\"飞机可以在协议国境内卸下乘客\",{\"1\":{\"1744\":1}}],[\"飞机故障或气象原因备降\",{\"1\":{\"1743\":1}}],[\"飞往外国途中\",{\"1\":{\"1743\":1}}],[\"飞行器信息\",{\"1\":{\"1729\":1}}],[\"飞行记录\",{\"1\":{\"238\":1}}],[\"哪哪都有问题\",{\"1\":{\"1773\":1}}],[\"哪些是有效行动\",{\"1\":{\"1767\":1}}],[\"哪些是试错\",{\"1\":{\"1767\":1}}],[\"哪些是烟雾弹\",{\"1\":{\"1767\":1}}],[\"哪些是鬼话\",{\"1\":{\"1767\":1}}],[\"哪些是人话\",{\"1\":{\"1767\":1}}],[\"哪些舱位\",{\"1\":{\"1734\":1}}],[\"哪个碳基生物会不喜欢呢\",{\"1\":{\"1799\":1}}],[\"哪个运行结果非0就拒绝更新哪个分支\",{\"1\":{\"1345\":1}}],[\"哪个任务先成功执行完毕\",{\"1\":{\"1113\":2}}],[\"营销政策\",{\"1\":{\"1733\":1}}],[\"欧洲以及中国采用此模式\",{\"1\":{\"1730\":1}}],[\"爬升能力等\",{\"1\":{\"1730\":1}}],[\"班期\",{\"1\":{\"1730\":1}}],[\"班次\",{\"1\":{\"1730\":1}}],[\"抓取数据早前是用\",{\"1\":{\"1728\":1}}],[\"返航等\",{\"1\":{\"1731\":1}}],[\"返点+留钱\",{\"1\":{\"1727\":1}}],[\"返回时优先取\",{\"1\":{\"1657\":1}}],[\"返回时直接复位不处理请求\",{\"1\":{\"1472\":1}}],[\"返回数据给前台页面\",{\"1\":{\"1604\":1}}],[\"返回数组中一个元素占用的大小\",{\"1\":{\"1141\":1}}],[\"返回数组中第一个元素的偏移地址\",{\"1\":{\"1141\":1}}],[\"返回地址等信息\",{\"1\":{\"1520\":1}}],[\"返回对象的\",{\"1\":{\"1350\":1}}],[\"返回结果\",{\"1\":{\"1261\":1,\"1566\":1}}],[\"返回结果时转换为character\",{\"1\":{\"674\":1}}],[\"返回系统指针的大小\",{\"1\":{\"1143\":1}}],[\"返回任务队列里尚未完成的任务\",{\"1\":{\"1116\":1}}],[\"返回此任务执行结果\",{\"1\":{\"1113\":2}}],[\"返回此ip地址的主机名\",{\"1\":{\"339\":1}}],[\"返回类型\",{\"1\":{\"1068\":1}}],[\"返回值都不会改变\",{\"1\":{\"1533\":1}}],[\"返回值为4\",{\"1\":{\"1143\":1}}],[\"返回值写回等处理\",{\"1\":{\"1126\":1}}],[\"返回值是true\",{\"1\":{\"1044\":1}}],[\"返回值代表有多少\",{\"1\":{\"785\":1}}],[\"返回特殊值\",{\"1\":{\"988\":1}}],[\"返回第一个元素\",{\"1\":{\"987\":2}}],[\"返回位数组\",{\"1\":{\"974\":1}}],[\"返回客户端\",{\"1\":{\"971\":1}}],[\"返回指定域\",{\"1\":{\"969\":1}}],[\"返回count个\",{\"1\":{\"969\":1}}],[\"返回频道对应的订阅数\",{\"1\":{\"957\":1}}],[\"返回null\",{\"1\":{\"822\":1}}],[\"返回发生了且未处理的事件\",{\"1\":{\"786\":1}}],[\"返回读取字节数\",{\"1\":{\"777\":1}}],[\"返回0\",{\"1\":{\"619\":1}}],[\"返回0~1内的随机数\",{\"1\":{\"594\":1}}],[\"返回给服务层\",{\"1\":{\"619\":3}}],[\"返回给客户端确认写请求执行完毕\",{\"1\":{\"1205\":1}}],[\"返回给客户端请求的那个\",{\"1\":{\"1205\":1}}],[\"返回给客户端\",{\"1\":{\"26\":1}}],[\"返回res1\",{\"1\":{\"596\":2}}],[\"返回value1\",{\"1\":{\"596\":1}}],[\"返回起始时间date1和结束时间date2之间的天数\",{\"1\":{\"595\":1}}],[\"返回当前订阅模式数\",{\"1\":{\"957\":1}}],[\"返回当前被订阅的所有频道\",{\"1\":{\"957\":1}}],[\"返回当前时间\",{\"1\":{\"595\":1}}],[\"返回当前日期和时间\",{\"1\":{\"595\":1}}],[\"返回当前日期\",{\"1\":{\"595\":1}}],[\"返回当前正在执行的线程对象的引用\",{\"1\":{\"330\":1}}],[\"返回x\",{\"1\":{\"594\":1}}],[\"返回从字符串str从start位置起的len个长度的字符串\",{\"1\":{\"593\":1}}],[\"返回的逻辑视图\",{\"1\":{\"1605\":1}}],[\"返回的结果是多行多列\",{\"1\":{\"611\":1}}],[\"返回的结果是一行\",{\"1\":{\"610\":1}}],[\"返回的结果是一列\",{\"1\":{\"609\":1}}],[\"返回的\",{\"1\":{\"540\":1}}],[\"返回的future调用get\",{\"1\":{\"456\":1}}],[\"返回的每个leader节点对应的批记录列表\",{\"1\":{\"450\":1}}],[\"返回\",{\"1\":{\"363\":1,\"383\":1,\"542\":1,\"783\":2,\"998\":1,\"1023\":1,\"1380\":1,\"1535\":1}}],[\"返回ip地址字符串\",{\"1\":{\"339\":1}}],[\"返回本主机的地址对象\",{\"1\":{\"339\":1}}],[\"返回array\",{\"1\":{\"122\":2}}],[\"返回出去\",{\"1\":{\"97\":1}}],[\"返回一个可以执行延迟\",{\"1\":{\"1110\":1}}],[\"返回一个携带空事务的事务状态\",{\"1\":{\"1049\":1}}],[\"返回一个文件流\",{\"1\":{\"779\":1}}],[\"返回一个日期\",{\"1\":{\"595\":1}}],[\"返回一个结果\",{\"1\":{\"77\":1}}],[\"返回一个\",{\"1\":{\"73\":1}}],[\"返回普通\",{\"1\":{\"67\":1}}],[\"政策投放型代理\",{\"1\":{\"1727\":1}}],[\"口直连型代理\",{\"1\":{\"1727\":1}}],[\"撮合商家和消费者\",{\"1\":{\"1726\":1}}],[\"携程\",{\"1\":{\"1726\":1,\"1751\":1}}],[\"携程就是ota\",{\"1\":{\"1726\":1}}],[\"携带可租约的\",{\"1\":{\"1426\":1}}],[\"携带并跳转到\",{\"1\":{\"27\":2,\"1643\":2}}],[\"拼多多就类似于ota平台\",{\"1\":{\"1726\":1}}],[\"拼接在底层没有发生内存的拷贝\",{\"1\":{\"830\":1}}],[\"拼接\",{\"1\":{\"302\":1,\"593\":1}}],[\"拼接字符串\",{\"0\":{\"302\":1}}],[\"淘宝\",{\"1\":{\"1726\":1}}],[\"淘汰的页面降级到\",{\"1\":{\"1448\":1}}],[\"京东自营这种类似于ota\",{\"1\":{\"1726\":1}}],[\"旗舰店或航司官网\",{\"1\":{\"1724\":1}}],[\"九月\",{\"1\":{\"1825\":1}}],[\"九大航权\",{\"0\":{\"1741\":1}}],[\"九元航空外\",{\"1\":{\"1724\":1}}],[\"九个步骤\",{\"1\":{\"178\":1}}],[\"轮组\",{\"1\":{\"1796\":1}}],[\"轮船等产品的分销\",{\"1\":{\"1724\":1}}],[\"轮询策略如果同一消费组内\",{\"1\":{\"496\":1}}],[\"轮询\",{\"1\":{\"452\":1,\"1481\":1}}],[\"火车上我们也认识了周边一起进藏的小伙伴\",{\"1\":{\"1833\":1}}],[\"火车\",{\"1\":{\"1724\":1}}],[\"登机牌打印\",{\"1\":{\"1723\":1}}],[\"登机控制\",{\"1\":{\"1723\":1}}],[\"登录wsl的mysql\",{\"1\":{\"1155\":1}}],[\"登录完成后会生成一个\",{\"1\":{\"27\":1,\"1643\":1}}],[\"登录成功\",{\"1\":{\"15\":1}}],[\"登录时同样用\",{\"1\":{\"14\":1}}],[\"航权就属于这个规定其中的一部分\",{\"1\":{\"1741\":1}}],[\"航权\",{\"1\":{\"1741\":1}}],[\"航司会根据当时的销售情况\",{\"1\":{\"1735\":1}}],[\"航司需要完成订票的处理\",{\"1\":{\"1722\":1}}],[\"航空公司包装出来了不同的销售策略\",{\"1\":{\"1735\":1}}],[\"航空公司工作人员会根据航班收益管理系统来预测和判断未来一段时间\",{\"1\":{\"1734\":1}}],[\"航空联盟\",{\"1\":{\"1723\":1}}],[\"航程\",{\"1\":{\"1730\":1}}],[\"航线路径\",{\"1\":{\"1732\":1}}],[\"航线\",{\"1\":{\"1730\":1}}],[\"航班变化频繁\",{\"1\":{\"1752\":1}}],[\"航班座位占用的数量及旅客身份证件信息\",{\"1\":{\"1738\":1}}],[\"航班状态是跟旅客真正飞行过程紧密相关的信息\",{\"1\":{\"1731\":1}}],[\"航班状态\",{\"0\":{\"1731\":1}}],[\"航班的飞行日期\",{\"1\":{\"1730\":1}}],[\"航班计划的一种表现形式\",{\"1\":{\"1730\":1}}],[\"航班时刻作为一种稀缺资源\",{\"1\":{\"1730\":1}}],[\"航班时刻\",{\"0\":{\"1730\":1}}],[\"航班信息主要包括航班时刻和航班状态\",{\"1\":{\"1729\":1}}],[\"航班\",{\"0\":{\"1729\":1},\"1\":{\"1730\":1,\"1752\":1}}],[\"航班+舱位\",{\"1\":{\"1728\":1}}],[\"航班配载平衡\",{\"1\":{\"1723\":1}}],[\"航班可用座位\",{\"1\":{\"1723\":1}}],[\"扣减库存\",{\"1\":{\"1722\":1}}],[\"民航局每年会召集各航空公司人员开两次会议来商定各家航司的航班时刻\",{\"1\":{\"1730\":1}}],[\"民航信息化\",{\"0\":{\"1722\":1}}],[\"民航业以及机票分销经历了多次行业变革\",{\"1\":{\"1721\":1}}],[\"民航业是一个相对比较封闭的行业\",{\"1\":{\"1721\":1}}],[\"企业管理变革等各种因素的影响\",{\"1\":{\"1721\":1}}],[\"便捷\",{\"1\":{\"1705\":1}}],[\"便于软件各部件之间的沟通的软件\",{\"1\":{\"1625\":1}}],[\"便于维护和扩展\",{\"1\":{\"1617\":1}}],[\"便于减少系统的重复代码\",{\"1\":{\"1601\":1}}],[\"便于系统异常时恢复数据\",{\"1\":{\"639\":1}}],[\"便于日志查询\",{\"1\":{\"408\":1}}],[\"杀死进程\",{\"1\":{\"1699\":1}}],[\"→\",{\"1\":{\"1690\":1}}],[\"←\",{\"1\":{\"1690\":1}}],[\"底线命令模式\",{\"1\":{\"1689\":1}}],[\"底层会通过限制删除操作执行的时长和频率来减少删除操作对\",{\"1\":{\"1573\":1}}],[\"底层会通过匿名内部类的构造器拷贝传入该变量值\",{\"1\":{\"146\":1}}],[\"底层模型\",{\"1\":{\"1571\":1}}],[\"底层用哈希表实现\",{\"1\":{\"1570\":1}}],[\"底层可以基于测试并设置\",{\"1\":{\"1463\":1}}],[\"底层可以发挥\",{\"1\":{\"391\":1}}],[\"底层连接形式\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"底层创建一个\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"底层执行\",{\"1\":{\"1223\":1}}],[\"底层就是执行\",{\"1\":{\"1138\":1}}],[\"底层io负责实际的数据传输\",{\"1\":{\"1126\":1}}],[\"底层是\",{\"1\":{\"1536\":1}}],[\"底层是链表\",{\"1\":{\"1414\":1}}],[\"底层是哈希表\",{\"1\":{\"1414\":1}}],[\"底层是利用\",{\"1\":{\"1091\":1}}],[\"底层是基于\",{\"1\":{\"362\":1}}],[\"底层依赖于\",{\"1\":{\"1074\":1}}],[\"底层的数据库引擎必须支持事务机制\",{\"1\":{\"1061\":1}}],[\"底层的真正读写是\",{\"1\":{\"799\":1}}],[\"底层编码\",{\"1\":{\"913\":1}}],[\"底层由notify\",{\"1\":{\"909\":1}}],[\"底层在redisdb结构的expires字典保存所有键的过期时间\",{\"1\":{\"908\":1}}],[\"底层内存会被回收\",{\"1\":{\"829\":1}}],[\"底层数据\",{\"1\":{\"825\":1}}],[\"底层数据结构是用哈希表实现\",{\"1\":{\"697\":1}}],[\"底层工作流程是这样的\",{\"1\":{\"799\":1}}],[\"底层实现依赖于\",{\"1\":{\"1513\":1}}],[\"底层实现是基于红黑树\",{\"1\":{\"1496\":1}}],[\"底层实现\",{\"0\":{\"970\":1,\"1513\":1},\"1\":{\"784\":1}}],[\"底层实现上\",{\"1\":{\"306\":1}}],[\"底层使用链表\",{\"1\":{\"1499\":1}}],[\"底层使用哈希表存储元素\",{\"1\":{\"1496\":1}}],[\"底层使用水平触发\",{\"1\":{\"786\":1}}],[\"底层使用零拷贝\",{\"1\":{\"777\":1}}],[\"底层使用了\",{\"1\":{\"212\":1,\"834\":1}}],[\"底层采用链表数据结构管理page\",{\"1\":{\"638\":1}}],[\"底层采用数组+链表+红黑树实现\",{\"1\":{\"304\":1}}],[\"底层类似一个二元信号量\",{\"1\":{\"366\":1}}],[\"底层仍是基于threadpoolexecutor实现的\",{\"1\":{\"332\":1}}],[\"底层\",{\"1\":{\"331\":1}}],[\"底层哈希表+双链表记录存储顺序\",{\"1\":{\"304\":1}}],[\"底层基于红黑树实现\",{\"1\":{\"304\":1,\"305\":1}}],[\"底层基于双链表\",{\"1\":{\"304\":1}}],[\"底层基于数组\",{\"1\":{\"304\":1}}],[\"底层基于\",{\"1\":{\"158\":1,\"161\":1,\"1468\":1,\"1496\":1}}],[\"底层同样是基于\",{\"1\":{\"157\":1}}],[\"底层通过写屏障保证\",{\"1\":{\"146\":1}}],[\"底层对应着\",{\"1\":{\"142\":1}}],[\"底层跟集群交换数据是通过自定义的二进制协议通信\",{\"1\":{\"38\":1}}],[\"归档文件\",{\"1\":{\"1688\":1}}],[\"归并排序\",{\"0\":{\"1654\":1}}],[\"归并\",{\"1\":{\"1385\":1}}],[\"覆写\",{\"1\":{\"1685\":1}}],[\"覆盖索引\",{\"0\":{\"706\":1}}],[\"覆盖管道\",{\"1\":{\"317\":1,\"318\":1}}],[\"翻江倒胃\",{\"1\":{\"1825\":1}}],[\"翻转屏\",{\"1\":{\"1799\":1}}],[\"翻页查看文件\",{\"1\":{\"1681\":1}}],[\"翻倍\",{\"1\":{\"1409\":1}}],[\"剪枝\",{\"1\":{\"1673\":1,\"1674\":1}}],[\"套用框架\",{\"1\":{\"1670\":1}}],[\"套接字\",{\"0\":{\"1461\":1},\"1\":{\"919\":1}}],[\"贴上java中的integer\",{\"1\":{\"1666\":1}}],[\"舍弃最低位\",{\"1\":{\"1664\":2}}],[\"场景题\",{\"0\":{\"1658\":1}}],[\"场景下需要维护用户状态\",{\"1\":{\"17\":1}}],[\"斐波那契\",{\"0\":{\"1656\":1}}],[\"件商品\",{\"1\":{\"1655\":1}}],[\"背后也需要一套复杂的政策计算引擎来完成这项工作\",{\"1\":{\"1733\":1}}],[\"背后还是航信的pss系统在处理\",{\"1\":{\"1724\":1}}],[\"背包\",{\"0\":{\"1655\":1}}],[\"背景\",{\"0\":{\"1233\":1,\"1790\":1}}],[\"饿汉\",{\"1\":{\"1645\":1}}],[\"饿汉单例\",{\"1\":{\"290\":1}}],[\"循序渐进的开发方法\",{\"1\":{\"1641\":1}}],[\"循环次数就是n的二进制中1的个数\",{\"1\":{\"1665\":1}}],[\"循环检查二进制的每一位是否为1\",{\"1\":{\"1664\":1}}],[\"循环写入\",{\"1\":{\"1555\":1}}],[\"循环依赖结束\",{\"1\":{\"1599\":1}}],[\"循环依赖就是循环引用\",{\"1\":{\"1599\":1}}],[\"循环依赖\",{\"0\":{\"1382\":1},\"1\":{\"1599\":1}}],[\"循环执行任务\",{\"1\":{\"1110\":2}}],[\"循环使用对象\",{\"1\":{\"1104\":1}}],[\"循环不变量\",{\"1\":{\"998\":1}}],[\"循环简化了对数组和集合的遍历操作\",{\"1\":{\"263\":1}}],[\"循环\",{\"0\":{\"633\":1},\"1\":{\"263\":1,\"304\":1}}],[\"循环展开\",{\"1\":{\"242\":1,\"274\":1}}],[\"循环等待\",{\"1\":{\"1466\":1}}],[\"循环等\",{\"1\":{\"241\":1}}],[\"循环引用表示已经终结了\",{\"1\":{\"196\":1}}],[\"循环栅栏\",{\"1\":{\"161\":1}}],[\"敏捷开发模型一种以人为核心\",{\"1\":{\"1641\":1}}],[\"瀑布模型\",{\"1\":{\"1641\":1}}],[\"冗余设计\",{\"1\":{\"1638\":1}}],[\"漏桶算法\",{\"1\":{\"1637\":1}}],[\"漏消费\",{\"1\":{\"499\":1}}],[\"牺牲一部分服务\",{\"1\":{\"1636\":1}}],[\"凡是调用\",{\"1\":{\"1636\":1}}],[\"凡是需要操作\",{\"1\":{\"1116\":1}}],[\"宿主机目录\",{\"1\":{\"1634\":1}}],[\"极度i人的抑郁二人组\",{\"1\":{\"1849\":1}}],[\"极致的性能\",{\"1\":{\"1626\":1}}],[\"极大文本数据\",{\"1\":{\"663\":1}}],[\"极大的提高了吞吐率\",{\"1\":{\"451\":1}}],[\"削峰\",{\"1\":{\"1625\":1}}],[\"削微寒\",{\"1\":{\"1333\":1}}],[\"桩\",{\"1\":{\"1623\":2}}],[\"滴滴的\",{\"1\":{\"1622\":1}}],[\"扁平化对象\",{\"1\":{\"1608\":1}}],[\"扁平映射\",{\"1\":{\"58\":1}}],[\"紧接着b会走完它的生命周期流程\",{\"1\":{\"1599\":1}}],[\"冷热数据分离\",{\"1\":{\"1571\":1}}],[\"散列\",{\"1\":{\"1570\":1}}],[\"散列摘要算法\",{\"1\":{\"1401\":1}}],[\"≈\",{\"1\":{\"1568\":1}}],[\"融合算法\",{\"1\":{\"1564\":1}}],[\"攻击者拿着这些信息\",{\"1\":{\"1539\":1}}],[\"卸载了王者\",{\"1\":{\"1817\":1}}],[\"卸载\",{\"1\":{\"1527\":1}}],[\"晋升老年代\",{\"1\":{\"1524\":1}}],[\"然而拉萨的上空依然太阳高悬\",{\"1\":{\"1839\":1}}],[\"然而当夜幕降临\",{\"1\":{\"1833\":1}}],[\"然而并不是很习惯\",{\"1\":{\"1833\":1}}],[\"然而并没有什么大的收获\",{\"1\":{\"1815\":1}}],[\"然而也所剩不多了\",{\"1\":{\"1815\":1}}],[\"然而视频传输的硬件\",{\"1\":{\"1809\":1}}],[\"然而最痛苦的不是琐碎的工作模式\",{\"1\":{\"1773\":1}}],[\"然而\",{\"1\":{\"1488\":1}}],[\"然后去喝了布达拉宫边上的霸王茶姬\",{\"1\":{\"1847\":1}}],[\"然后各自回了酒店\",{\"1\":{\"1846\":1}}],[\"然后由于太冷\",{\"1\":{\"1844\":1}}],[\"然后由新的主服务器代替已下线的主服务器继续处理命令请求\",{\"1\":{\"938\":1}}],[\"然后是雪山下的蹦迪\",{\"1\":{\"1841\":1}}],[\"然后它们拿去干嘛了可想而知\",{\"1\":{\"1805\":1}}],[\"然后它给了我如下的答复\",{\"1\":{\"1240\":1}}],[\"然后膝盖受伤\",{\"1\":{\"1796\":1}}],[\"然后同样的\",{\"1\":{\"1792\":1}}],[\"然后同leetcode191\",{\"1\":{\"1666\":1}}],[\"然后我们到\",{\"1\":{\"1791\":1}}],[\"然后我们再到\",{\"1\":{\"1791\":1}}],[\"然后我们在wsl中用ifconfig查询得到\",{\"1\":{\"1152\":1}}],[\"然后修改博客项目根目录下\",{\"1\":{\"1791\":1}}],[\"然后修改对应的订单状态\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"然后利用\",{\"1\":{\"1790\":1}}],[\"然后利用tabat方法获得i位置的元素f\",{\"1\":{\"1497\":1}}],[\"然后数个世纪后\",{\"1\":{\"1767\":1}}],[\"然后呢\",{\"1\":{\"1764\":1}}],[\"然后选择合适的航班预订\",{\"1\":{\"1722\":1}}],[\"然后相加\",{\"1\":{\"1666\":1}}],[\"然后相加使得相邻的两个\",{\"1\":{\"1666\":1}}],[\"然后直接查询该数对应位是否为\",{\"1\":{\"1658\":1}}],[\"然后直接调用静态方法而无需使用类名\",{\"1\":{\"263\":1}}],[\"然后发布到任何流行的\",{\"1\":{\"1634\":1}}],[\"然后发送\",{\"1\":{\"1409\":1}}],[\"然后加载应用上下文\",{\"1\":{\"1607\":1}}],[\"然后加载springboot配置环境\",{\"1\":{\"1607\":1}}],[\"然后加载新任务的上下文到这些寄存器和程序计数器\",{\"1\":{\"1454\":1}}],[\"然后文件事件分派器会接收i\",{\"1\":{\"1572\":1}}],[\"然后判断是否可能为空\",{\"1\":{\"1568\":1}}],[\"然后判定until条件是否满足\",{\"1\":{\"633\":1}}],[\"然后写请求发给\",{\"1\":{\"1563\":1}}],[\"然后清空\",{\"1\":{\"1524\":1}}],[\"然后清理eden和原先的survivor\",{\"1\":{\"171\":1}}],[\"然后让所有存活对象移向内存空间的一端\",{\"1\":{\"1523\":1}}],[\"然后让所有存活对象都向内存空间的一端移动\",{\"1\":{\"170\":1}}],[\"然后统一回收\",{\"1\":{\"1523\":1}}],[\"然后下一次这个线程再次访问同步块时\",{\"1\":{\"1515\":1}}],[\"然后返回一个需要加载的\",{\"1\":{\"1598\":1}}],[\"然后返回\",{\"1\":{\"1514\":1}}],[\"然后返回给\",{\"1\":{\"1219\":1}}],[\"然后给旧table原位置赋值fwd\",{\"1\":{\"1497\":1}}],[\"然后如果信号量\",{\"1\":{\"1460\":2}}],[\"然后之前缓存在活跃\",{\"1\":{\"1448\":1}}],[\"然后立即执行中断处理程序\",{\"1\":{\"1437\":1}}],[\"然后插入input\",{\"1\":{\"1422\":1}}],[\"然后伪造\",{\"1\":{\"1420\":1}}],[\"然后双方基于三个随机数生成基于对称加密的会话密钥\",{\"1\":{\"1402\":1}}],[\"然后到ota\",{\"1\":{\"1722\":1}}],[\"然后到\",{\"1\":{\"1396\":1,\"1791\":1,\"1792\":1}}],[\"然后唤醒用户进程\",{\"1\":{\"1395\":1}}],[\"然后渲染整个网页的显示\",{\"1\":{\"1394\":1}}],[\"然后也一层层封装\",{\"1\":{\"1394\":1}}],[\"然后构造对应的景点信息\",{\"1\":{\"1362\":1}}],[\"然后一直到8点多\",{\"1\":{\"1844\":1}}],[\"然后一个个字符匹配\",{\"1\":{\"1361\":1}}],[\"然后一次性\",{\"1\":{\"958\":1}}],[\"然后手动检出到\",{\"1\":{\"1337\":1}}],[\"然后对整个堆进行垃圾回收\",{\"1\":{\"1524\":1}}],[\"然后对比当前分支\",{\"1\":{\"1337\":1}}],[\"然后对消息进行验证\",{\"1\":{\"476\":1}}],[\"然后暂停下来\",{\"1\":{\"1336\":1}}],[\"然后减掉\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"然后等一段时间再删除缓存\",{\"1\":{\"1267\":1,\"1585\":1}}],[\"然后等待协调者重新分配增量的分区\",{\"1\":{\"497\":1}}],[\"然后又把旧数据存入缓存\",{\"1\":{\"1267\":1,\"1585\":1}}],[\"然后需要研究不一致的原因\",{\"1\":{\"1236\":1}}],[\"然后交付网络接口层\",{\"1\":{\"1394\":1}}],[\"然后交换选票信息\",{\"1\":{\"1203\":3}}],[\"然后交由\",{\"1\":{\"1113\":1}}],[\"然后保存\",{\"1\":{\"1155\":1}}],[\"然后打开输入以下内容\",{\"1\":{\"1154\":1}}],[\"然后打开生成的代理类\",{\"1\":{\"1015\":1}}],[\"然后逐一尝试链中每种拒绝策略\",{\"1\":{\"1109\":1}}],[\"然后尝试再次提交当前任务\",{\"1\":{\"1109\":1,\"1511\":1}}],[\"然后线程不断地去检查该变量从而决定要不要从\",{\"1\":{\"1093\":1}}],[\"然后自己进入\",{\"1\":{\"1076\":1}}],[\"然后提交\",{\"1\":{\"1059\":1}}],[\"然后放入一个\",{\"1\":{\"1059\":1}}],[\"然后决定是否为这个\",{\"1\":{\"1058\":1}}],[\"然后执行自定义\",{\"1\":{\"1465\":1}}],[\"然后执行类似过程\",{\"1\":{\"1205\":1}}],[\"然后执行一些\",{\"1\":{\"1051\":1}}],[\"然后执行相应的操作\",{\"1\":{\"242\":1}}],[\"然后开启嵌套事务并返回\",{\"1\":{\"1049\":1}}],[\"然后开始双方的数据通信\",{\"1\":{\"813\":1}}],[\"然后开始落盘实际的消息数据\",{\"1\":{\"461\":1}}],[\"然后以校验和来引用保存的信息\",{\"1\":{\"1309\":1}}],[\"然后以非事务运行\",{\"1\":{\"1041\":1}}],[\"然后以有序\",{\"1\":{\"919\":1}}],[\"然后创建answer\",{\"1\":{\"1861\":1}}],[\"然后创建新的完全连接加入全连接队列\",{\"1\":{\"1414\":1}}],[\"然后创建新事务\",{\"1\":{\"1041\":1}}],[\"然后创建词条到文档id的表索引\",{\"1\":{\"35\":1}}],[\"然后借助\",{\"1\":{\"1038\":1}}],[\"然后查看生成的字节码文件\",{\"1\":{\"1016\":1}}],[\"然后调用内核中的中断处理程序来响应请求\",{\"1\":{\"1437\":1}}],[\"然后调用\",{\"1\":{\"1074\":1,\"1487\":1,\"1598\":1}}],[\"然后调用四次32位\",{\"1\":{\"976\":1}}],[\"然后调用相应的函数进行更改\",{\"1\":{\"739\":1}}],[\"然后a根据给定的ip和端口\",{\"1\":{\"945\":1}}],[\"然后回复三个参数的multi\",{\"1\":{\"941\":1}}],[\"然后默认每10s通过命令连接向从服务器发送info命令\",{\"1\":{\"940\":1}}],[\"然后\",{\"1\":{\"864\":1,\"1190\":1}}],[\"然后跟踪源码\",{\"1\":{\"863\":1}}],[\"然后切换至写模式\",{\"1\":{\"768\":1}}],[\"然后才真正执行查询\",{\"1\":{\"717\":1}}],[\"然后存储在hash表中\",{\"1\":{\"698\":1}}],[\"然后用20个字节指向存储溢出数据的另一个页\",{\"1\":{\"686\":1}}],[\"然后累积计数\",{\"1\":{\"619\":1}}],[\"然后在\",{\"1\":{\"1015\":1,\"1025\":1,\"1155\":1,\"1332\":1}}],[\"然后在两者之间选择一个小值作为\",{\"1\":{\"839\":1}}],[\"然后在任务队列的任务都处理完成后\",{\"1\":{\"817\":1}}],[\"然后在从库上对这些日志重新执行\",{\"1\":{\"647\":1}}],[\"然后在排序缓冲区\",{\"1\":{\"616\":1}}],[\"然后在调用该方法时传递任意数量的参数\",{\"1\":{\"263\":1}}],[\"然后根据消息的执行状态做进一步的判断处理\",{\"1\":{\"1374\":1}}],[\"然后根据事务配置\",{\"1\":{\"1059\":1}}],[\"然后根据配置选择某一种方式创建动态代理\",{\"1\":{\"1020\":1}}],[\"然后根据配置的执行器类型创建\",{\"1\":{\"542\":1}}],[\"然后根据\",{\"1\":{\"518\":1,\"544\":1,\"1598\":1}}],[\"然后从新的\",{\"1\":{\"471\":1}}],[\"然后从\",{\"1\":{\"466\":1,\"471\":1}}],[\"然后准备同步\",{\"1\":{\"460\":1}}],[\"然后可以通过脚本启动集群\",{\"1\":{\"1222\":1}}],[\"然后可以\",{\"1\":{\"446\":1}}],[\"然后可以发送消息\",{\"1\":{\"446\":1}}],[\"然后指定一个\",{\"1\":{\"414\":1}}],[\"然后b系统和c系统再做出相应的处理\",{\"1\":{\"399\":1}}],[\"然后进行rehash\",{\"1\":{\"1494\":1}}],[\"然后进行特殊处理\",{\"1\":{\"348\":1}}],[\"然后进入库存系统锁定库存\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"然后进入\",{\"1\":{\"139\":1,\"1379\":1}}],[\"然后进入自旋等待状态\",{\"1\":{\"2\":1}}],[\"然后把配置环境\",{\"1\":{\"1607\":1}}],[\"然后把该槽的n\",{\"1\":{\"690\":1}}],[\"然后把当前任务加入队列中\",{\"1\":{\"332\":1}}],[\"然后把已使用的内存块一次性清理掉\",{\"1\":{\"169\":1,\"1523\":1}}],[\"然后new再创建一个新串赋给s2\",{\"1\":{\"301\":1}}],[\"然后通过\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"然后通过连接套接字发送给服务器\",{\"1\":{\"926\":1}}],[\"然后通过反射调用执行对应方法\",{\"1\":{\"101\":1}}],[\"然后通过signalnext唤醒下一个等待队列中的线程\",{\"1\":{\"5\":1}}],[\"然后将两个分支的历史联系起来\",{\"1\":{\"1633\":1}}],[\"然后将旧值写入\",{\"1\":{\"1554\":1}}],[\"然后将现在的容量扩大1\",{\"1\":{\"1493\":1}}],[\"然后将\",{\"1\":{\"1487\":1}}],[\"然后将运算结果返回给客户端\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"然后将各自结果汇总得到结果\",{\"1\":{\"1221\":1}}],[\"然后将新值value设置为这个二进制位的值\",{\"1\":{\"975\":1}}],[\"然后将数据写入新aof文件\",{\"1\":{\"917\":1}}],[\"然后将数据发送到支持的存储库中\",{\"1\":{\"31\":1}}],[\"然后将请求委派给被适配的对象\",{\"1\":{\"374\":1}}],[\"然后将回收对象依据其年龄\",{\"1\":{\"171\":1}}],[\"然后将其索引到\",{\"1\":{\"33\":1}}],[\"然后共享\",{\"1\":{\"27\":1,\"1643\":1}}],[\"然后第三方回调本应用的请求地址\",{\"1\":{\"15\":1}}],[\"然后就全程在找手机\",{\"1\":{\"1841\":1}}],[\"然后就开始拿出程序员的饭碗开始debug了笑死\",{\"1\":{\"1781\":1}}],[\"然后就可以修改用户密码了\",{\"1\":{\"1148\":1}}],[\"然后就可以开始接收\",{\"1\":{\"466\":1}}],[\"然后就进入\",{\"1\":{\"1012\":1}}],[\"然后就往\",{\"1\":{\"467\":1}}],[\"然后就来到\",{\"1\":{\"10\":1}}],[\"然后就回过去看了一下线程池源码\",{\"1\":{\"10\":1}}],[\"然后重新循环\",{\"1\":{\"6\":1}}],[\"然后再回头到达泽当\",{\"1\":{\"1842\":1}}],[\"然后再更新\",{\"1\":{\"1435\":1}}],[\"然后再过滤没有机场信息的景点\",{\"1\":{\"1362\":1}}],[\"然后再由网关决定进入根据判定到哪个真实的web\",{\"1\":{\"1300\":1}}],[\"然后再将数据同步到所有的\",{\"1\":{\"1187\":1}}],[\"然后再执行相关的操作\",{\"1\":{\"1034\":1}}],[\"然后再计算普通二级索引\",{\"1\":{\"717\":1}}],[\"然后再以一定频率刷新到磁盘\",{\"1\":{\"638\":1}}],[\"然后再进行cas设置同步状态\",{\"1\":{\"5\":1}}],[\"然后再次尝试获取锁\",{\"1\":{\"4\":1}}],[\"感觉就像\",{\"1\":{\"1844\":1}}],[\"感觉像跟着书中的人物过了完整的一生\",{\"1\":{\"1826\":1}}],[\"感觉差点晕在马路上\",{\"1\":{\"1825\":1}}],[\"感觉还是挺复杂的\",{\"1\":{\"75\":1}}],[\"感谢老天爷今天没让我猝死\",{\"1\":{\"1781\":1}}],[\"感知的是已完成的读写事件\",{\"1\":{\"1488\":1}}],[\"感知的是就绪可读写\",{\"1\":{\"1488\":1}}],[\"搭配使用\",{\"1\":{\"1487\":1}}],[\"搭建dash服务器\",{\"1\":{\"1873\":1}}],[\"搭建高可用的\",{\"1\":{\"1258\":1,\"1581\":1}}],[\"搭建\",{\"0\":{\"649\":1},\"1\":{\"1873\":1}}],[\"绕着盘山公路上行就到了南迦巴瓦山下的索松村\",{\"1\":{\"1841\":1}}],[\"绕开\",{\"1\":{\"1486\":1}}],[\"绕过三次握手\",{\"1\":{\"1415\":1}}],[\"绕过构造方法创建对象\",{\"1\":{\"1140\":1}}],[\"绕过线程池\",{\"1\":{\"332\":1,\"1109\":1,\"1511\":1}}],[\"傻瓜式\",{\"1\":{\"1481\":1}}],[\"芯片\",{\"1\":{\"1481\":1}}],[\"缩小都很方便\",{\"1\":{\"1476\":1}}],[\"缩小为o\",{\"1\":{\"879\":1}}],[\"磁头朝一个方向移动时处理请求\",{\"1\":{\"1472\":1}}],[\"磁头在一个方向上移动\",{\"1\":{\"1472\":1}}],[\"磁道分散\",{\"1\":{\"1472\":1}}],[\"磁盘信息\",{\"1\":{\"1700\":1}}],[\"磁盘高速缓存\",{\"1\":{\"1486\":1}}],[\"磁盘读写的最小单位是扇区\",{\"1\":{\"1474\":1}}],[\"磁盘格式化时会被分成三个存储区域\",{\"1\":{\"1474\":1}}],[\"磁盘位置等\",{\"1\":{\"1474\":1}}],[\"磁盘调度\",{\"0\":{\"1472\":1}}],[\"磁盘等慢速介质的读写访问变为对内存等快速介质的访问\",{\"1\":{\"1249\":1}}],[\"磁盘结构\",{\"0\":{\"639\":1}}],[\"磁盘文件\",{\"1\":{\"435\":2}}],[\"顺带着发现了一个线上的bug把它修了🥲我真的很好用\",{\"1\":{\"1784\":1}}],[\"顺便写份使用文档帮大家以后快速上手🥹太谢谢我的mt了\",{\"1\":{\"1782\":1}}],[\"顺便看到这天是世界遗产日\",{\"1\":{\"1774\":1}}],[\"顺时针找到一个访问位为\",{\"1\":{\"1471\":1}}],[\"顺序查找\",{\"1\":{\"1386\":1}}],[\"顺序执行多个命令的机制\",{\"1\":{\"958\":1}}],[\"顺序扫描哈希表\",{\"1\":{\"742\":1}}],[\"顺序io速度快\",{\"1\":{\"738\":1}}],[\"顺序插入时会形成一个链表\",{\"1\":{\"698\":1}}],[\"顺序写磁盘\",{\"1\":{\"478\":1}}],[\"顺序消息\",{\"1\":{\"428\":1}}],[\"顺序\",{\"1\":{\"365\":1}}],[\"顺序由源文件中定义顺序决定\",{\"1\":{\"253\":1}}],[\"兼顾了长短作业\",{\"1\":{\"1470\":1}}],[\"兼容互斥性\",{\"1\":{\"560\":1}}],[\"兼容性强\",{\"1\":{\"409\":1}}],[\"兼容\",{\"1\":{\"376\":1,\"404\":1,\"1625\":1}}],[\"甚至使用本地播放器实现原画观看\",{\"1\":{\"1807\":1}}],[\"甚至优于rpc\",{\"1\":{\"1623\":1}}],[\"甚至抛出oom\",{\"1\":{\"1522\":1}}],[\"甚至饥饿\",{\"1\":{\"1470\":1}}],[\"甚至eb级别的数据量\",{\"1\":{\"1212\":1}}],[\"乐观锁适用于冲突概率很低\",{\"1\":{\"1468\":1}}],[\"乐观读锁\",{\"1\":{\"158\":1}}],[\"忙等通过\",{\"1\":{\"1468\":1}}],[\"思绪万千\",{\"1\":{\"1847\":1}}],[\"思考\",{\"1\":{\"1467\":1}}],[\"思想的基础之上\",{\"1\":{\"150\":1}}],[\"奇书编号哲学家先拿右边筷子\",{\"1\":{\"1467\":1}}],[\"号数值的限制\",{\"1\":{\"1464\":1}}],[\"号大于等于自己的\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"置换未来最长时间不访问的页面\",{\"1\":{\"1471\":1}}],[\"置\",{\"1\":{\"1463\":1,\"1658\":1}}],[\"地缘政治变化\",{\"1\":{\"1721\":1}}],[\"地理位置\",{\"1\":{\"1570\":1}}],[\"地理位置分片\",{\"1\":{\"1564\":1}}],[\"地位平等\",{\"1\":{\"1446\":1}}],[\"地址映射回域名\",{\"1\":{\"1792\":1}}],[\"地址总线\",{\"1\":{\"1432\":1}}],[\"地址租用期等信息\",{\"1\":{\"1426\":1}}],[\"地址解析解析\",{\"1\":{\"1425\":1}}],[\"地址类似身份证号\",{\"1\":{\"1423\":1}}],[\"地址类似住址门牌号\",{\"1\":{\"1423\":1}}],[\"地址来区分不同的设备\",{\"1\":{\"1423\":1}}],[\"地址是设备上线以后\",{\"1\":{\"1423\":1}}],[\"地址有48位\",{\"1\":{\"1423\":1}}],[\"地址的作用是实现\",{\"1\":{\"1423\":1}}],[\"地址和\",{\"1\":{\"1077\":1}}],[\"地址和该\",{\"1\":{\"1076\":1}}],[\"地址\",{\"0\":{\"1422\":1,\"1423\":1},\"1\":{\"1076\":2,\"1152\":1,\"1220\":2,\"1368\":1,\"1394\":3,\"1396\":2,\"1422\":6,\"1423\":1,\"1426\":1,\"1435\":1,\"1622\":1,\"1792\":3}}],[\"地址指向的对象可变\",{\"1\":{\"291\":1}}],[\"匿名页都需要磁盘\",{\"1\":{\"1446\":1}}],[\"匿名页的回收都基于\",{\"1\":{\"1446\":1}}],[\"匿名页\",{\"1\":{\"1446\":1}}],[\"匿名内部类\",{\"0\":{\"298\":1}}],[\"硬座直达拉萨\",{\"1\":{\"1833\":1}}],[\"硬中断\",{\"1\":{\"1481\":1}}],[\"硬中断会打断\",{\"1\":{\"1437\":1}}],[\"硬链接\",{\"1\":{\"1474\":1}}],[\"硬\",{\"1\":{\"1474\":1}}],[\"硬盘上的redo\",{\"1\":{\"1555\":1}}],[\"硬盘上的独立区域\",{\"1\":{\"1447\":1}}],[\"硬盘速度太慢\",{\"1\":{\"1443\":1}}],[\"硬盘等硬件\",{\"1\":{\"1440\":1}}],[\"硬盘\",{\"1\":{\"1434\":1,\"1450\":2}}],[\"硬件故障\",{\"1\":{\"1638\":1}}],[\"硬件\",{\"1\":{\"1462\":1}}],[\"硬件里的空间地址叫物理内存地址\",{\"1\":{\"1443\":1}}],[\"硬件32\",{\"1\":{\"1433\":1}}],[\"硬件结构\",{\"0\":{\"1431\":1}}],[\"硬件等原因\",{\"1\":{\"1277\":1}}],[\"硬件指令集\",{\"1\":{\"265\":1}}],[\"硬件内存\",{\"1\":{\"142\":1}}],[\"电影\",{\"1\":{\"1815\":1,\"1825\":1},\"2\":{\"1813\":1}}],[\"电子取景器\",{\"1\":{\"1799\":1}}],[\"电子邮件\",{\"1\":{\"1345\":1}}],[\"电容需要定时刷新\",{\"1\":{\"1434\":1}}],[\"冯诺依曼结构\",{\"0\":{\"1432\":1}}],[\"报错\",{\"1\":{\"1632\":1}}],[\"报告发送过程中\",{\"1\":{\"1427\":1}}],[\"报文发送给客户端\",{\"1\":{\"1420\":1}}],[\"报文来关闭连接\",{\"1\":{\"1420\":2}}],[\"报文的时间戳比最后收到的报文时间戳要大\",{\"1\":{\"1418\":1}}],[\"报文的序列号比期望下一个收到的序列号要大\",{\"1\":{\"1418\":1}}],[\"报文重传次数\",{\"1\":{\"1415\":2}}],[\"报文时\",{\"1\":{\"1410\":1,\"1411\":1,\"1417\":1}}],[\"报文给客户端来表示现在同意关闭连接\",{\"1\":{\"1410\":1}}],[\"报文给客户端\",{\"1\":{\"1409\":1}}],[\"报文给服务端\",{\"1\":{\"1409\":1}}],[\"报文后\",{\"1\":{\"1409\":1,\"1410\":1}}],[\"报文\",{\"1\":{\"1394\":1,\"1409\":1,\"1410\":2,\"1412\":1,\"1417\":1,\"1427\":2}}],[\"顶层两大类四个接口\",{\"1\":{\"1502\":1}}],[\"顶层的abstractownablesynchronizer很简单\",{\"1\":{\"3\":1}}],[\"顶级dns\",{\"1\":{\"1424\":1}}],[\"住在不同地方就有不同门牌号\",{\"1\":{\"1423\":1}}],[\"粗暴的关闭进程可以关闭\",{\"1\":{\"1420\":1}}],[\"期望\",{\"1\":{\"1418\":1}}],[\"期间发生了一次内存拷贝\",{\"1\":{\"1487\":1}}],[\"期间共发生了三次内存拷贝\",{\"1\":{\"1395\":1}}],[\"期间不占用\",{\"1\":{\"782\":1}}],[\"期间另一个事务插入了新的数据\",{\"1\":{\"736\":1,\"1551\":1}}],[\"期间另一个事务修改了数据\",{\"1\":{\"736\":1,\"1551\":1}}],[\"期间\",{\"1\":{\"471\":1,\"799\":1,\"1281\":1,\"1471\":1,\"1620\":1}}],[\"期间需要从\",{\"1\":{\"101\":2}}],[\"孤儿连接上限\",{\"1\":{\"1415\":1}}],[\"洪泛攻击\",{\"1\":{\"1414\":1}}],[\"延误\",{\"1\":{\"1731\":1}}],[\"延时\",{\"1\":{\"1490\":1}}],[\"延时导致重传\",{\"1\":{\"1413\":1}}],[\"延迟读取\",{\"1\":{\"1563\":1}}],[\"延迟可控的情况下\",{\"1\":{\"1525\":1}}],[\"延迟处理算法\",{\"1\":{\"1412\":1}}],[\"延迟确认\",{\"1\":{\"1410\":1}}],[\"延迟确认机制\",{\"1\":{\"1410\":1}}],[\"延迟双删\",{\"1\":{\"1267\":1,\"1585\":1}}],[\"延迟版本的putobjectvolatile方法\",{\"1\":{\"1140\":1}}],[\"延迟执行任务\",{\"1\":{\"1110\":1}}],[\"延迟发送请求\",{\"1\":{\"1400\":1}}],[\"延迟发送\",{\"1\":{\"839\":1}}],[\"延迟物化\",{\"1\":{\"726\":1}}],[\"延迟过多的\",{\"1\":{\"469\":1}}],[\"延迟接收消息\",{\"1\":{\"432\":1}}],[\"延迟队列rabbitmq\",{\"1\":{\"1629\":1}}],[\"延迟队列\",{\"0\":{\"423\":1}}],[\"延迟加载对象\",{\"1\":{\"290\":1}}],[\"阈值等于当前容量\",{\"1\":{\"1494\":1}}],[\"阈值ssthresh\",{\"1\":{\"1413\":1}}],[\"阈值由innodb\",{\"1\":{\"732\":3}}],[\"呈指数上升\",{\"1\":{\"1413\":1}}],[\"呈指数上涨\",{\"1\":{\"1409\":1}}],[\"糊涂窗口综合征\",{\"1\":{\"1412\":1}}],[\"拥抱变化\",{\"1\":{\"1786\":1}}],[\"拥塞发生\",{\"1\":{\"1413\":1}}],[\"拥塞避免\",{\"1\":{\"1413\":1}}],[\"拥塞控制是为了避免\",{\"1\":{\"1413\":1}}],[\"拥塞控制\",{\"0\":{\"1413\":1}}],[\"拥塞窗口\",{\"1\":{\"1412\":1}}],[\"拥有一个凭证系统处理身份认证\",{\"1\":{\"1347\":1}}],[\"拥有唯一的路径\",{\"1\":{\"1167\":1}}],[\"窗口滚动越平滑\",{\"1\":{\"1637\":1}}],[\"窗口函数\",{\"1\":{\"1567\":1}}],[\"窗口缩减为0后\",{\"1\":{\"1412\":1}}],[\"窗口也时刻在变化\",{\"1\":{\"1412\":1}}],[\"窗口会向后移动\",{\"1\":{\"1412\":1}}],[\"窗口后延之外的数据都是暂时不能发送的数据\",{\"1\":{\"1412\":1}}],[\"窗口左闭右开\",{\"1\":{\"990\":1}}],[\"防回绕时间戳\",{\"1\":{\"1410\":1}}],[\"防火墙\",{\"1\":{\"1409\":1}}],[\"防止第二个进入临界区的线程再次创建对象\",{\"1\":{\"1645\":1}}],[\"防止第三方进行冒充\",{\"1\":{\"1403\":1}}],[\"防止另一个线程访问一个初始化未完成的对象\",{\"1\":{\"1645\":1}}],[\"防止崩溃\",{\"1\":{\"1636\":1}}],[\"防止幻读\",{\"1\":{\"1557\":1}}],[\"防止序列号回绕\",{\"1\":{\"1418\":1}}],[\"防止被后面相同四元组的新连接错误的接收\",{\"1\":{\"1410\":1}}],[\"防止被释放\",{\"1\":{\"831\":1}}],[\"防止缓存穿透\",{\"1\":{\"1390\":1}}],[\"防止恶意攻击\",{\"1\":{\"1375\":1}}],[\"防止消息被重复消费\",{\"1\":{\"1374\":1}}],[\"防止消息丢失\",{\"1\":{\"1374\":1}}],[\"防止中文搜索时同音不同名的景点信息\",{\"1\":{\"1362\":1}}],[\"防止业务出现异常而消息已经被删除的问题\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"防止解锁失败\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"防止同一时间大量\",{\"1\":{\"1258\":1,\"1581\":1}}],[\"防止无限制堆积\",{\"1\":{\"1120\":1}}],[\"防止初始阶段大量初始化工作产生大量锁撤销和锁升级\",{\"1\":{\"1077\":1}}],[\"防止用户添加额外的全局变量\",{\"1\":{\"963\":1}}],[\"防止竞争\",{\"1\":{\"911\":1}}],[\"防止\",{\"1\":{\"850\":1}}],[\"防止死锁等待\",{\"1\":{\"822\":1}}],[\"防止其他事务在这个间隙插入新记录\",{\"1\":{\"556\":1,\"1561\":1}}],[\"防止其他事务对该行进行修改\",{\"1\":{\"555\":1}}],[\"处于\",{\"1\":{\"1409\":1,\"1556\":2}}],[\"处理空集等\",{\"1\":{\"1669\":1}}],[\"处理文本\",{\"1\":{\"1631\":1}}],[\"处理文件事件和时间事件\",{\"1\":{\"1572\":1}}],[\"处理实际请求的处理器\",{\"1\":{\"1605\":1}}],[\"处理器\",{\"1\":{\"1799\":1}}],[\"处理器适配器\",{\"1\":{\"1605\":1}}],[\"处理器映射器\",{\"1\":{\"1605\":1}}],[\"处理器可以改变语句对应的机器指令的执行顺序\",{\"1\":{\"143\":1}}],[\"处理业务\",{\"1\":{\"1604\":1}}],[\"处理业务时无法处理其它事件\",{\"1\":{\"1488\":1}}],[\"处理海量数据\",{\"1\":{\"1543\":1}}],[\"处理完毕后将令牌丢弃\",{\"1\":{\"1637\":1}}],[\"处理完后再发回\",{\"1\":{\"1488\":1}}],[\"处理完所有元素才返回结果\",{\"1\":{\"1068\":1}}],[\"处理http\",{\"1\":{\"1297\":1}}],[\"处理tcp\",{\"1\":{\"1296\":1}}],[\"处理集群的所有事务请求\",{\"1\":{\"1194\":1}}],[\"处理非正常的线程中止\",{\"1\":{\"1100\":1}}],[\"处理已有事务\",{\"1\":{\"1049\":1}}],[\"处理起来更加优雅\",{\"1\":{\"1028\":1}}],[\"处理初次复制的情况\",{\"1\":{\"935\":1}}],[\"处理sigterm结束服务器信号\",{\"1\":{\"928\":1}}],[\"处理不同的\",{\"1\":{\"873\":1}}],[\"处理普通任务\",{\"1\":{\"872\":1}}],[\"处理子channel\",{\"1\":{\"864\":1}}],[\"处理原则\",{\"1\":{\"829\":2}}],[\"处理后返回给客户端\",{\"1\":{\"823\":1}}],[\"处理下一个read\",{\"1\":{\"797\":1}}],[\"处理下一个连接\",{\"1\":{\"797\":1}}],[\"处理写事件\",{\"1\":{\"797\":1}}],[\"处理读事件\",{\"1\":{\"797\":1}}],[\"处理事件\",{\"0\":{\"786\":1,\"873\":1},\"1\":{\"786\":1}}],[\"处理逻辑\",{\"1\":{\"750\":1}}],[\"处理过程中如果与字段的字符集不一致也会进行额外的转码\",{\"1\":{\"674\":1}}],[\"处理响应\",{\"1\":{\"456\":1}}],[\"处理网络请求的线程数量\",{\"1\":{\"445\":1}}],[\"处理依赖\",{\"0\":{\"382\":1}}],[\"处理多个任务按顺序执行\",{\"1\":{\"334\":1}}],[\"处理资源池\",{\"1\":{\"1488\":1}}],[\"处理资源\",{\"1\":{\"317\":1,\"318\":1}}],[\"处理注解期间\",{\"1\":{\"260\":1}}],[\"处理异常等\",{\"1\":{\"241\":1}}],[\"处理自循环\",{\"1\":{\"184\":1}}],[\"处理剩余的satb扫描\",{\"1\":{\"178\":1}}],[\"处理并发阶段结束后遗留的少量satb记录\",{\"1\":{\"177\":1,\"1525\":1}}],[\"处理效率比较低\",{\"1\":{\"170\":1}}],[\"处理结果\",{\"1\":{\"163\":1}}],[\"处理请求的配置\",{\"1\":{\"811\":1}}],[\"处理请求时将转码为character\",{\"1\":{\"674\":1}}],[\"处理请求\",{\"1\":{\"101\":1}}],[\"处理连接空闲状态\",{\"1\":{\"94\":1}}],[\"处理搜索结果集\",{\"1\":{\"33\":1}}],[\"处理\",{\"0\":{\"787\":1,\"788\":1,\"789\":1},\"1\":{\"31\":1,\"872\":1,\"873\":3,\"1211\":1,\"1223\":1,\"1629\":1}}],[\"浏览器\",{\"1\":{\"1642\":1}}],[\"浏览器缓存\",{\"1\":{\"1424\":1}}],[\"浏览器会对\",{\"1\":{\"1405\":1}}],[\"浏览历史等\",{\"1\":{\"17\":1}}],[\"偶遇一个大姐过来借充电宝\",{\"1\":{\"1839\":1}}],[\"偶尔在公司撸撸铁\",{\"1\":{\"1827\":1}}],[\"偶尔维护一下也不麻烦\",{\"1\":{\"1791\":1}}],[\"偶尔感性完全占据了我的智性\",{\"1\":{\"1786\":1}}],[\"偶尔读取期间执行定期维护\",{\"1\":{\"74\":1}}],[\"偶数编号哲学家先拿左边筷子\",{\"1\":{\"1467\":1}}],[\"偶数号\",{\"1\":{\"1404\":1}}],[\"演进\",{\"0\":{\"1404\":1}}],[\"私服\",{\"1\":{\"1632\":1}}],[\"私信交换机\",{\"1\":{\"1629\":1}}],[\"私钥加密而得\",{\"1\":{\"1403\":1}}],[\"私有种子pt站就好很多\",{\"1\":{\"1810\":1}}],[\"私有的资源库服务器\",{\"1\":{\"1809\":1}}],[\"私有仓库\",{\"0\":{\"1789\":1}}],[\"私有运价\",{\"1\":{\"1732\":1}}],[\"私有ip\",{\"1\":{\"1428\":2}}],[\"私有方法\",{\"1\":{\"292\":1}}],[\"私有方法不能被重写\",{\"1\":{\"291\":1}}],[\"私有构造器\",{\"1\":{\"196\":1}}],[\"私有\",{\"1\":{\"195\":1}}],[\"持续集成实践对自动化测试有四个基本要求\",{\"1\":{\"1705\":1}}],[\"持续集成要求在提交代码前后都要执行自动化测试用例\",{\"1\":{\"1705\":1}}],[\"持续追踪\",{\"1\":{\"1686\":1}}],[\"持续\",{\"1\":{\"1631\":1}}],[\"持有者信息\",{\"1\":{\"1403\":1}}],[\"持久序号节点\",{\"1\":{\"1169\":1}}],[\"持久性这三大特性由\",{\"1\":{\"735\":1}}],[\"持久性\",{\"1\":{\"735\":1,\"961\":1,\"1032\":1,\"1274\":1,\"1550\":1}}],[\"持久性存储\",{\"1\":{\"413\":1,\"1628\":1}}],[\"持久化机制\",{\"0\":{\"1575\":1}}],[\"持久化条件\",{\"1\":{\"929\":1}}],[\"持久化存储\",{\"1\":{\"475\":1}}],[\"持久化\",{\"0\":{\"473\":1,\"910\":1,\"915\":1,\"1170\":1},\"1\":{\"927\":1,\"1629\":1}}],[\"持久化能力\",{\"1\":{\"435\":1}}],[\"持久化等等\",{\"1\":{\"434\":1}}],[\"持久节点\",{\"1\":{\"91\":1,\"92\":1,\"1169\":1}}],[\"椭圆曲线计算得到会话密钥\",{\"1\":{\"1402\":1}}],[\"握手丢失\",{\"1\":{\"1409\":1}}],[\"握手\",{\"0\":{\"1402\":1}}],[\"握手完成\",{\"1\":{\"945\":1}}],[\"帧交由协议栈\",{\"1\":{\"1395\":1}}],[\"屏蔽中断\",{\"1\":{\"1395\":1}}],[\"屏障\",{\"1\":{\"1463\":1}}],[\"屏障后的store操作不能被重排序到屏障前\",{\"1\":{\"1142\":1}}],[\"屏障后的load操作不能被重排序到屏障前\",{\"1\":{\"1142\":1}}],[\"屏障前的store操作不能被重排序到屏障后\",{\"1\":{\"1142\":1}}],[\"屏障前的load操作不能被重排序到屏障后\",{\"1\":{\"1142\":1}}],[\"屏障指令等\",{\"1\":{\"1142\":1}}],[\"环形缓冲区\",{\"1\":{\"1395\":1}}],[\"环境\",{\"1\":{\"966\":1,\"1079\":1,\"1867\":1}}],[\"环境装载超时处理钩子\",{\"1\":{\"965\":1}}],[\"环境里\",{\"1\":{\"965\":1}}],[\"环境变量是\",{\"1\":{\"1701\":1}}],[\"环境变量\",{\"0\":{\"1701\":1}}],[\"环境变量来定位\",{\"1\":{\"778\":1}}],[\"环境变量以及动态链接库信息等\",{\"1\":{\"231\":1}}],[\"寻址\",{\"1\":{\"1393\":1}}],[\"物价直接起飞\",{\"1\":{\"1825\":1}}],[\"物理内存紧张时可能导致频繁的\",{\"1\":{\"1479\":1}}],[\"物理内存不够用时\",{\"1\":{\"1447\":1}}],[\"物理内存地址\",{\"1\":{\"1443\":1}}],[\"物理页基地址\",{\"1\":{\"1443\":1}}],[\"物理地内存址\",{\"1\":{\"1443\":1}}],[\"物理层\",{\"1\":{\"1393\":1}}],[\"物数网传会表应\",{\"1\":{\"1393\":1}}],[\"物化\",{\"1\":{\"726\":1}}],[\"邻接多重表prim算法\",{\"1\":{\"1388\":1}}],[\"邻接表\",{\"1\":{\"1388\":1}}],[\"邻近机场落库\",{\"0\":{\"1360\":1}}],[\"邻近机场\",{\"1\":{\"1355\":1,\"1361\":2}}],[\"邻近机场距离由机场\",{\"1\":{\"1355\":1}}],[\"邻近城市\",{\"1\":{\"1355\":1}}],[\"冒泡\",{\"1\":{\"1385\":1}}],[\"装入容器了\",{\"1\":{\"1598\":1}}],[\"装入\",{\"1\":{\"1448\":1}}],[\"装载所有\",{\"1\":{\"1379\":1}}],[\"装饰器模式bufferedwriter\",{\"1\":{\"1503\":1}}],[\"装饰模式\",{\"1\":{\"358\":1}}],[\"装饰的安全集合\",{\"1\":{\"162\":1}}],[\"装饰原始的线程池\",{\"1\":{\"77\":1}}],[\"装饰者模式\",{\"1\":{\"25\":1}}],[\"慢启动门限是一个上限\",{\"1\":{\"1413\":1}}],[\"慢启动\",{\"1\":{\"1413\":1}}],[\"慢启动造成网络卡顿\",{\"1\":{\"1404\":1}}],[\"慢慢处理后续流程\",{\"1\":{\"1375\":1}}],[\"慢查询的阈值\",{\"1\":{\"978\":1}}],[\"慢查询日志默认未开启\",{\"1\":{\"645\":1}}],[\"慢查询日志记录了所有执行时间超过参数long\",{\"1\":{\"645\":1}}],[\"慢查询日志\",{\"0\":{\"645\":1,\"978\":1},\"1\":{\"612\":1}}],[\"慢查询日志等\",{\"1\":{\"570\":1}}],[\"恶意请求拦截\",{\"1\":{\"1375\":1}}],[\"动作\",{\"1\":{\"1640\":1}}],[\"动静分离\",{\"1\":{\"1375\":1}}],[\"动态的调整舱位的开关状态\",{\"1\":{\"1735\":1}}],[\"动态年龄判断\",{\"1\":{\"1524\":1}}],[\"动态随机存取存储器\",{\"1\":{\"1434\":1}}],[\"动态获取ip地址\",{\"1\":{\"1426\":1}}],[\"动态主机配置协议\",{\"1\":{\"1426\":1}}],[\"动态负载均衡\",{\"1\":{\"1302\":1}}],[\"动态线程池参数\",{\"0\":{\"1120\":1}}],[\"动态创建\",{\"1\":{\"1009\":1}}],[\"动态规划\",{\"0\":{\"992\":1}}],[\"动态扩展一个类的功能\",{\"1\":{\"358\":1}}],[\"动态代理基于接口实现\",{\"1\":{\"1532\":1}}],[\"动态代理是在运行时动态生成类字节码\",{\"1\":{\"1532\":1}}],[\"动态代理的实现也依赖于反射\",{\"1\":{\"1531\":1}}],[\"动态代理实现类\",{\"1\":{\"1021\":1}}],[\"动态代理类的字节码写入磁盘\",{\"1\":{\"1016\":1}}],[\"动态代理原理对比\",{\"1\":{\"1014\":1}}],[\"动态代理\",{\"0\":{\"349\":1,\"1014\":1,\"1015\":1,\"1016\":1},\"1\":{\"1014\":2,\"1532\":5}}],[\"动态端口\",{\"1\":{\"340\":1}}],[\"动态生成类等\",{\"1\":{\"254\":1}}],[\"动态生成\",{\"1\":{\"249\":1}}],[\"动态分派\",{\"1\":{\"245\":1}}],[\"动态解析\",{\"1\":{\"244\":1}}],[\"动态链接\",{\"0\":{\"205\":1},\"1\":{\"1520\":1}}],[\"动态连接\",{\"1\":{\"203\":1}}],[\"动态\",{\"0\":{\"515\":1,\"534\":1},\"1\":{\"122\":2,\"540\":1}}],[\"购物车缓存\",{\"1\":{\"1368\":1}}],[\"情况\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"速度慢\",{\"1\":{\"1555\":1}}],[\"速度很慢\",{\"1\":{\"1367\":1}}],[\"速度快的原因\",{\"0\":{\"1571\":1}}],[\"速度快\",{\"1\":{\"216\":1,\"680\":1,\"1212\":1,\"1368\":1,\"1555\":1}}],[\"路过贡德林草原的时候\",{\"1\":{\"1842\":1}}],[\"路过巴松措的时候吃了团餐\",{\"1\":{\"1841\":1}}],[\"路上遇到一个摄影师大哥\",{\"1\":{\"1844\":1}}],[\"路上看到一个骑着自行车上珠峰大本营的老哥\",{\"1\":{\"1844\":1}}],[\"路上看到一个大哥在雪山下晨跑\",{\"1\":{\"1842\":1}}],[\"路上见到了红山上的宫殿\",{\"1\":{\"1834\":1}}],[\"路边的茶馆喝了杯6元一壶的甜茶\",{\"1\":{\"1837\":1}}],[\"路径内所有内容应用同样的操作\",{\"1\":{\"1693\":1}}],[\"路径最短优先\",{\"1\":{\"1632\":1}}],[\"路径的静态资源直接从\",{\"1\":{\"1366\":1}}],[\"路由模式\",{\"1\":{\"1628\":1}}],[\"路由表信息\",{\"1\":{\"1490\":1,\"1631\":1}}],[\"路由表\",{\"1\":{\"1429\":1}}],[\"路由表等提供网络距离最近的\",{\"1\":{\"1220\":1}}],[\"路由器无法存储这么多子网信息\",{\"1\":{\"1423\":1}}],[\"路由器就需要记住每个mac地址所在的子网\",{\"1\":{\"1423\":1}}],[\"路由器的转发\",{\"1\":{\"1394\":1}}],[\"路由处理\",{\"1\":{\"653\":1}}],[\"路由规则不依赖于路由键的匹配规则\",{\"1\":{\"414\":1,\"1628\":1}}],[\"路由规则\",{\"0\":{\"414\":1}}],[\"路由键\",{\"1\":{\"413\":1,\"1628\":1}}],[\"路由索引和搜索请求\",{\"1\":{\"33\":1}}],[\"黄毛姐\",{\"1\":{\"1849\":1}}],[\"黄金分割数\",{\"1\":{\"1514\":1}}],[\"黄河楼\",{\"1\":{\"1362\":1}}],[\"黄鹤楼\",{\"1\":{\"1362\":1}}],[\"黄色\",{\"1\":{\"1332\":1}}],[\"景点的搜索热度等等\",{\"1\":{\"1362\":1}}],[\"景点等等\",{\"1\":{\"1361\":1}}],[\"景点id\",{\"1\":{\"1361\":1}}],[\"景点\",{\"0\":{\"1360\":1}}],[\"`\",{\"1\":{\"1858\":1}}],[\"`$\",{\"1\":{\"1858\":1}}],[\"`pwd`\",{\"1\":{\"1685\":1}}],[\"`distance`\",{\"1\":{\"1358\":1}}],[\"`deleted`\",{\"1\":{\"1357\":2,\"1358\":2}}],[\"`near\",{\"1\":{\"1358\":3}}],[\"`idx\",{\"1\":{\"1357\":3,\"1358\":2}}],[\"`id`\",{\"1\":{\"1357\":2,\"1358\":2}}],[\"`update\",{\"1\":{\"1357\":1,\"1358\":1}}],[\"`create\",{\"1\":{\"1357\":1,\"1358\":1}}],[\"`city\",{\"1\":{\"1357\":3}}],[\"`operator`\",{\"1\":{\"1357\":1,\"1358\":1}}],[\"`scenic\",{\"1\":{\"1357\":6,\"1358\":4}}],[\"面试\",{\"1\":{\"1771\":1,\"1815\":1},\"2\":{\"1660\":1}}],[\"面试八股\",{\"0\":{\"1354\":1}}],[\"面向代理人\",{\"1\":{\"1737\":1}}],[\"面向航空公司收取分销费用\",{\"1\":{\"1737\":1}}],[\"面向局部收集的设计思路和基于region内存布局\",{\"1\":{\"1525\":1}}],[\"面向数据报的协议\",{\"1\":{\"1408\":1}}],[\"面向字节流的可靠传输协议\",{\"1\":{\"1408\":1}}],[\"面向消息的中间件\",{\"1\":{\"408\":1}}],[\"面向块的\",{\"1\":{\"324\":1}}],[\"供氧口呼呼作响\",{\"1\":{\"1833\":1}}],[\"供\",{\"1\":{\"1349\":1}}],[\"供以后对象分配使用\",{\"1\":{\"178\":1}}],[\"凭证用明文的形式存放在磁盘中\",{\"1\":{\"1347\":1}}],[\"沙盒\",{\"1\":{\"1344\":1}}],[\"贮藏修改到栈上\",{\"1\":{\"1633\":1}}],[\"贮藏当前的修改\",{\"1\":{\"1343\":1}}],[\"贮藏清理\",{\"0\":{\"1343\":1}}],[\"留我一个人周五跟航司联调\",{\"1\":{\"1785\":1}}],[\"留点+反钱\",{\"1\":{\"1733\":1}}],[\"留待以后重新应用这些改动\",{\"1\":{\"1343\":1}}],[\"留给了调用者\",{\"1\":{\"148\":1}}],[\"五月\",{\"1\":{\"1825\":1}}],[\"五一节前\",{\"1\":{\"1825\":1}}],[\"五次提交前的记录\",{\"1\":{\"1341\":1}}],[\"五种级别日志\",{\"1\":{\"384\":1}}],[\"众所周知\",{\"1\":{\"1339\":1}}],[\"白日梦想家\",{\"1\":{\"1844\":1}}],[\"白酒\",{\"1\":{\"1836\":1}}],[\"白鹿原\",{\"1\":{\"1826\":1}}],[\"白嫖的域名没用上\",{\"1\":{\"1792\":1}}],[\"白色\",{\"1\":{\"1332\":1}}],[\"白名单\",{\"1\":{\"657\":1}}],[\"仓库来托管和发布个人\",{\"1\":{\"1790\":1}}],[\"仓库\",{\"1\":{\"1633\":1,\"1634\":1,\"1792\":1}}],[\"仓库除了本地仓库\",{\"1\":{\"1632\":1}}],[\"仓库作为另一个仓库的子目录\",{\"1\":{\"1347\":1}}],[\"仓库的\",{\"1\":{\"1338\":1}}],[\"仓库中将这些校验和\",{\"1\":{\"1332\":1}}],[\"仓库级\",{\"1\":{\"1311\":1}}],[\"吧更方便\",{\"1\":{\"1330\":1}}],[\"展示对应城市的机场信息\",{\"1\":{\"1355\":1}}],[\"展示将执行的具体操作\",{\"1\":{\"1343\":1}}],[\"展示贮藏列表\",{\"1\":{\"1343\":1}}],[\"展示远程引用的完整列表\",{\"1\":{\"1338\":1}}],[\"展示分支和对应的跟踪分支\",{\"1\":{\"1333\":1}}],[\"展示所有远程分支简称和url\",{\"1\":{\"1326\":1}}],[\"展示10条\",{\"1\":{\"587\":1}}],[\"危险\",{\"1\":{\"1324\":1}}],[\"闲聊中了解到她一个人从北京直飞拉萨\",{\"1\":{\"1839\":1}}],[\"闲来无事\",{\"1\":{\"1307\":1}}],[\"闲下来就可以利用多线程提高它的利用率\",{\"1\":{\"1119\":1}}],[\"阅读笔记\",{\"0\":{\"1307\":1}}],[\"百度的\",{\"1\":{\"1622\":1}}],[\"百亿规模api网关服务shepherd的设计与实现\",{\"1\":{\"1303\":1}}],[\"百分比\",{\"1\":{\"1226\":1}}],[\"致力于提供统一的自动化\",{\"1\":{\"1302\":1}}],[\"致力于提供高性能和简单易用的分布式事务服务\",{\"1\":{\"1287\":1}}],[\"名副其实\",{\"1\":{\"1841\":1}}],[\"名不虚传\",{\"1\":{\"1834\":1}}],[\"名为ksoftirqd\",{\"1\":{\"1437\":1}}],[\"名词解释\",{\"1\":{\"1301\":1}}],[\"名称任意\",{\"1\":{\"1791\":1}}],[\"名称\",{\"1\":{\"569\":1,\"572\":1,\"628\":1,\"688\":1,\"822\":1,\"1068\":1,\"1791\":1}}],[\"名称服务器\",{\"1\":{\"427\":1}}],[\"黑屏终端软件\",{\"1\":{\"1728\":1}}],[\"黑客攻击\",{\"1\":{\"1638\":1}}],[\"黑名单功能\",{\"1\":{\"1390\":1}}],[\"黑白名单控制\",{\"1\":{\"1300\":1}}],[\"黑马程序员\",{\"1\":{\"1083\":1}}],[\"证书管理等功能\",{\"1\":{\"1297\":1}}],[\"证书密钥等\",{\"1\":{\"673\":1}}],[\"七层交换机\",{\"1\":{\"1299\":1}}],[\"七层网关由于能够解析和处理应用层协议\",{\"1\":{\"1297\":1}}],[\"七层网关可以提供ssl卸载\",{\"1\":{\"1297\":1}}],[\"七层网关可以对请求和响应进行更细粒度的控制\",{\"1\":{\"1297\":1}}],[\"七层网关通过解析请求中的url\",{\"1\":{\"1297\":1}}],[\"七层网关\",{\"0\":{\"1297\":1}}],[\"七个命令\",{\"1\":{\"939\":1}}],[\"促销系统扣减优惠券\",{\"1\":{\"1288\":1,\"1370\":1}}],[\"许巍\",{\"1\":{\"1841\":1}}],[\"许愿一个意向🙏🙏🙏遇上一个好\",{\"1\":{\"1783\":1}}],[\"许多情况下\",{\"1\":{\"1767\":1}}],[\"许多\",{\"1\":{\"1283\":1}}],[\"许可机制\",{\"1\":{\"365\":1}}],[\"柔性事务\",{\"0\":{\"1285\":1,\"1286\":1},\"1\":{\"1282\":1}}],[\"遵循\",{\"1\":{\"1282\":2}}],[\"剩下的服务器是\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"剩余候选者中选择优先级最高的从服务器\",{\"1\":{\"943\":1}}],[\"拜占庭问题\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"达成目标\",{\"1\":{\"1826\":1}}],[\"达成共识\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"达成一致的看法\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"达到target加入结果集\",{\"1\":{\"1674\":1}}],[\"达到指定个数加入结果集并返回\",{\"1\":{\"1671\":1}}],[\"达到系统上限\",{\"1\":{\"1639\":1}}],[\"达到了就加入结果集\",{\"1\":{\"1674\":1}}],[\"达到了最大线程数\",{\"1\":{\"1511\":1}}],[\"达到了触发\",{\"1\":{\"1419\":1}}],[\"达到保活探测次数后\",{\"1\":{\"1419\":1}}],[\"达到上限后会自动开启新的\",{\"1\":{\"1219\":1}}],[\"达到\",{\"1\":{\"827\":1}}],[\"达到n个字符串长度\",{\"1\":{\"593\":2}}],[\"权衡了短作业和长作业\",{\"1\":{\"1470\":1}}],[\"权衡的结果\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"权威dns\",{\"1\":{\"1424\":1}}],[\"权益证明\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"权限管理\",{\"0\":{\"1693\":1}}],[\"权限与角色相关联\",{\"1\":{\"1642\":1}}],[\"权限设置\",{\"1\":{\"1168\":1}}],[\"权限等\",{\"1\":{\"673\":1}}],[\"权限列表\",{\"1\":{\"591\":2}}],[\"权限\",{\"1\":{\"591\":1}}],[\"权限控制等\",{\"1\":{\"1601\":1}}],[\"权限控制\",{\"0\":{\"591\":1}}],[\"权限修饰符\",{\"1\":{\"291\":1}}],[\"足够解决大部分业务对于缓存的要求\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"足迹\",{\"1\":{\"0\":1}}],[\"闭锁\",{\"1\":{\"1264\":1}}],[\"坐标\",{\"1\":{\"1264\":1,\"1632\":1}}],[\"掉线\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"像有的高校pt站限制ipv6访问和下载\",{\"1\":{\"1810\":1}}],[\"像百度网盘这种\",{\"1\":{\"1805\":1}}],[\"像什么影视大全之类\",{\"1\":{\"1804\":1}}],[\"像极了晚清的五大臣出洋\",{\"1\":{\"1767\":1}}],[\"像去哪儿\",{\"1\":{\"1726\":1}}],[\"像城市\",{\"1\":{\"1362\":1}}],[\"像\",{\"1\":{\"1259\":1,\"1446\":1}}],[\"熔断是被调用方故障\",{\"1\":{\"1636\":1}}],[\"熔断隔离防止雪崩\",{\"1\":{\"1375\":1}}],[\"熔断\",{\"1\":{\"1257\":1,\"1375\":1,\"1580\":1,\"1636\":1,\"1638\":1}}],[\"熔断降级\",{\"0\":{\"1636\":1},\"1\":{\"33\":1,\"1302\":1,\"1303\":1}}],[\"布达拉宫广场偶遇的探亲阿姨\",{\"1\":{\"1849\":1}}],[\"布达拉宫还是非常壮观的\",{\"1\":{\"1847\":1}}],[\"布达拉宫\",{\"0\":{\"1839\":1}}],[\"布隆过滤器\",{\"0\":{\"1390\":1},\"1\":{\"1256\":1,\"1579\":1}}],[\"布尔\",{\"1\":{\"36\":1,\"51\":1}}],[\"判等时\",{\"1\":{\"1244\":1}}],[\"判断自动装配是否开启\",{\"1\":{\"1598\":1}}],[\"判断自己是否是最小的节点\",{\"1\":{\"1185\":1}}],[\"判断两个对象是否相同\",{\"1\":{\"1535\":1}}],[\"判断方法\",{\"1\":{\"1522\":1}}],[\"判断这个线程与持有锁的线程是否是同一个线程\",{\"1\":{\"1517\":1}}],[\"判断它停留在\",{\"1\":{\"1448\":1}}],[\"判断对象内容类型\",{\"1\":{\"1350\":1}}],[\"判断对业务性能的影响程度\",{\"1\":{\"1235\":1}}],[\"判断请求是否过期\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"判断是链表还是红黑树\",{\"1\":{\"1497\":1}}],[\"判断是真的数据发生不一致了\",{\"1\":{\"1236\":1}}],[\"判断是否被中断\",{\"1\":{\"1092\":1}}],[\"判断是否使用索引统计数据进行估算\",{\"1\":{\"717\":1}}],[\"判断是否入队\",{\"1\":{\"189\":1}}],[\"判断最小节点是否是读锁\",{\"1\":{\"1184\":1}}],[\"判断当前线程是否空闲来决定是否回收\",{\"1\":{\"1114\":1}}],[\"判断没有发生竞争\",{\"1\":{\"1077\":1}}],[\"判断数据库是否支持嵌套事务\",{\"1\":{\"1049\":1}}],[\"判断一个元素是否存在时\",{\"1\":{\"1390\":1}}],[\"判断一个线程是否属于当前\",{\"1\":{\"816\":1}}],[\"判断一下\",{\"1\":{\"998\":2}}],[\"判断左侧窗口是否要收缩\",{\"1\":{\"990\":1}}],[\"判断槽是否由当前节点负责\",{\"1\":{\"947\":1}}],[\"判断任务是否成功\",{\"1\":{\"822\":1}}],[\"判断文件是否存在\",{\"1\":{\"779\":1}}],[\"判断条件不同\",{\"1\":{\"585\":1}}],[\"判断注册目标是否是本引用队列\",{\"1\":{\"184\":1}}],[\"判断\",{\"1\":{\"58\":1,\"998\":1,\"1000\":1}}],[\"铁定是不能做到我们的业务系统里的\",{\"1\":{\"1240\":1}}],[\"差异\",{\"1\":{\"1236\":1}}],[\"差值\",{\"1\":{\"1120\":1}}],[\"迁读\",{\"1\":{\"1234\":1}}],[\"迁移到另一个分支\",{\"1\":{\"1337\":1}}],[\"迁移\",{\"0\":{\"1240\":1}}],[\"迁移读逻辑\",{\"0\":{\"1236\":1}}],[\"迁移过程中要设置观察指标\",{\"1\":{\"1234\":1}}],[\"迁移完成后\",{\"1\":{\"883\":1}}],[\"评估出各个缓存的重要性\",{\"1\":{\"1234\":1}}],[\"评估使用索引比全表更慢\",{\"1\":{\"703\":1}}],[\"男人的快乐就是这么简单～另一方面\",{\"1\":{\"1828\":1}}],[\"男\",{\"1\":{\"1226\":2}}],[\"块没有\",{\"1\":{\"1533\":1}}],[\"块中是否修改返回值\",{\"1\":{\"1533\":1}}],[\"块中的\",{\"1\":{\"1533\":1}}],[\"块中执行\",{\"1\":{\"365\":1}}],[\"块有\",{\"1\":{\"1533\":1}}],[\"块的末尾\",{\"1\":{\"1533\":1}}],[\"块原理\",{\"1\":{\"1533\":1}}],[\"块数据通常传输的数据量大\",{\"1\":{\"1481\":1}}],[\"块大小\",{\"1\":{\"1474\":1}}],[\"块设备\",{\"1\":{\"1473\":1,\"1480\":1}}],[\"块\",{\"1\":{\"1219\":1,\"1527\":1}}],[\"系列函数都是用户空间模拟的异步\",{\"1\":{\"1488\":1}}],[\"系列产品中也有\",{\"1\":{\"1218\":1}}],[\"系统侧的计算量理论最大可达5亿次\",{\"1\":{\"1752\":1}}],[\"系统出票\",{\"1\":{\"1738\":1}}],[\"系统信息化\",{\"1\":{\"1728\":1}}],[\"系统状态\",{\"0\":{\"1700\":1}}],[\"系统自动收集所依赖服务的资源使用情况和性能指标\",{\"1\":{\"1638\":1}}],[\"系统不可用原因\",{\"1\":{\"1638\":1}}],[\"系统直接被击垮\",{\"1\":{\"1637\":1}}],[\"系统设计\",{\"0\":{\"1635\":1}}],[\"系统库和设置\",{\"1\":{\"1634\":1}}],[\"系统开销也是不小的\",{\"1\":{\"1487\":1}}],[\"系统对于不同大小的文件\",{\"1\":{\"1476\":1}}],[\"系统才会删除该文件\",{\"1\":{\"1474\":1}}],[\"系统吞吐量\",{\"1\":{\"1470\":1}}],[\"系统所需内存超过可用物理内存\",{\"1\":{\"1447\":1}}],[\"系统会提示内存溢出\",{\"1\":{\"1445\":1}}],[\"系统会维护一个全局变量\",{\"1\":{\"744\":1}}],[\"系统调用替代read\",{\"1\":{\"1486\":1}}],[\"系统调用直接把内核缓冲区里的数据映射到用户空间\",{\"1\":{\"1486\":1}}],[\"系统调用在文件映射区域分配内存\",{\"1\":{\"1445\":1}}],[\"系统调用从堆分配内存\",{\"1\":{\"1445\":1}}],[\"系统级\",{\"1\":{\"1311\":1}}],[\"系统级别问题\",{\"1\":{\"345\":1}}],[\"系统中所有的数据副本经过一段时间的同步后\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"系统中的某个节点在进行写操作\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"系统功能上的损失\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"系统在出现不可预知故障的时候\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"系统一样\",{\"1\":{\"1218\":1}}],[\"系统的超级用户是\",{\"1\":{\"1218\":1}}],[\"系统的权限控制\",{\"1\":{\"1168\":1}}],[\"系统的\",{\"1\":{\"1154\":1}}],[\"系统相关\",{\"0\":{\"1143\":1}}],[\"系统任务的线程组\",{\"1\":{\"1099\":1}}],[\"系统异步\",{\"1\":{\"795\":1}}],[\"系统通过一系列的组合计算\",{\"1\":{\"1751\":1}}],[\"系统通过\",{\"1\":{\"795\":1}}],[\"系统表空间和独立表空间类似\",{\"1\":{\"695\":1}}],[\"系统表空间是更改缓冲区的存储区域\",{\"1\":{\"639\":1}}],[\"系统工具\",{\"0\":{\"675\":1},\"1\":{\"1634\":1}}],[\"系统数据库\",{\"1\":{\"673\":1}}],[\"系统变量分为global和session两个作用域\",{\"1\":{\"671\":1}}],[\"系统服务\",{\"1\":{\"569\":1}}],[\"系统复杂性提高\",{\"1\":{\"401\":1,\"1625\":1}}],[\"系统可用性降低\",{\"1\":{\"401\":1,\"1625\":1}}],[\"系统此刻日历对象\",{\"1\":{\"353\":1}}],[\"系统属性\",{\"1\":{\"231\":1}}],[\"系统\",{\"1\":{\"27\":5,\"1309\":1,\"1464\":1,\"1643\":5,\"1728\":1,\"1867\":1}}],[\"老老少少的信徒绕着布达拉宫磕长头\",{\"1\":{\"1847\":1}}],[\"老胡还是帅啊\",{\"1\":{\"1826\":1}}],[\"老版\",{\"1\":{\"1218\":1}}],[\"老年代空间不足\",{\"1\":{\"1524\":1}}],[\"老年代用于存储较长时间存活的对象\",{\"1\":{\"1524\":1}}],[\"老年代收集\",{\"1\":{\"1525\":1}}],[\"老年代收集器\",{\"1\":{\"172\":1}}],[\"老年代收集major\",{\"1\":{\"171\":1}}],[\"老年代\",{\"1\":{\"171\":1,\"177\":1,\"1520\":1,\"1523\":1,\"1524\":1,\"1525\":1}}],[\"云平台存储引擎\",{\"1\":{\"1213\":1}}],[\"云文件\",{\"1\":{\"1008\":1}}],[\"社交媒体\",{\"1\":{\"1212\":1}}],[\"社区维护\",{\"1\":{\"1632\":1}}],[\"社区活跃\",{\"1\":{\"654\":1}}],[\"社区提供了http协议支持\",{\"1\":{\"435\":1}}],[\"社区提供jms\",{\"1\":{\"435\":1}}],[\"社区支持多语言\",{\"1\":{\"435\":1}}],[\"社区的日志标准\",{\"1\":{\"376\":1}}],[\"深度复杂的挖掘分析需要机器学习参与\",{\"1\":{\"1212\":1}}],[\"深入原理\",{\"0\":{\"670\":1}}],[\"深入学习\",{\"0\":{\"503\":1}}],[\"深入理解jdk中的reference原理和源码实现\",{\"1\":{\"197\":2}}],[\"体验世界\",{\"1\":{\"1786\":1}}],[\"体积大\",{\"1\":{\"1212\":1}}],[\"体系完善\",{\"1\":{\"654\":1}}],[\"体系结构\",{\"0\":{\"570\":1}}],[\"体系\",{\"0\":{\"1502\":1},\"1\":{\"316\":1}}],[\"票号旅客在支付成功后\",{\"1\":{\"1738\":1}}],[\"票价是在运价的基础之上根据各种优惠\",{\"1\":{\"1733\":1}}],[\"票价\",{\"0\":{\"1733\":1},\"1\":{\"1733\":1}}],[\"票价信息\",{\"1\":{\"1723\":1}}],[\"票价主要跟舱位有关\",{\"1\":{\"1722\":1}}],[\"票当选\",{\"1\":{\"1203\":1}}],[\"票\",{\"1\":{\"1203\":3}}],[\"投简历\",{\"1\":{\"1771\":1}}],[\"投票给\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"投给自己\",{\"1\":{\"1203\":3}}],[\"投递失败的消息对象\",{\"1\":{\"421\":1}}],[\"投递失败的回调\",{\"1\":{\"421\":1}}],[\"投递确认\",{\"1\":{\"412\":1}}],[\"半连接队列\",{\"1\":{\"1414\":1,\"1487\":1}}],[\"半\",{\"0\":{\"1414\":1}}],[\"半数\",{\"1\":{\"1202\":1}}],[\"半包\",{\"1\":{\"809\":1,\"839\":1}}],[\"半包问题测试\",{\"1\":{\"850\":1}}],[\"半包问题\",{\"1\":{\"768\":1}}],[\"机型\",{\"1\":{\"1730\":1}}],[\"机型和经济效益等因素来安排\",{\"1\":{\"1730\":1}}],[\"机票\",{\"2\":{\"1754\":1}}],[\"机票价格不等于运价\",{\"1\":{\"1733\":1}}],[\"机票的库存分为两部分\",{\"1\":{\"1737\":1}}],[\"机票的价格\",{\"1\":{\"1732\":1}}],[\"机票的线上分销基本就变成了下图这种模式\",{\"1\":{\"1726\":1}}],[\"机票分销行业信息化历史很悠久\",{\"1\":{\"1728\":1}}],[\"机票分销\",{\"0\":{\"1725\":1}}],[\"机票在线预订也算得上是最早的电子商务形态\",{\"1\":{\"1721\":1}}],[\"机票业务\",{\"0\":{\"1721\":1}}],[\"机构信息\",{\"1\":{\"1403\":1}}],[\"机构的数字证书中\",{\"1\":{\"1401\":1}}],[\"机场直奔下南关街吃了当地的民族特色美食\",{\"1\":{\"1833\":1}}],[\"机场\",{\"1\":{\"1355\":2,\"1361\":1}}],[\"机器8g\",{\"1\":{\"1361\":1}}],[\"机器学习算法\",{\"1\":{\"1211\":1}}],[\"机器学习\",{\"1\":{\"1211\":1}}],[\"机器上\",{\"1\":{\"1187\":1,\"1634\":1}}],[\"机制阻止了幻读问题\",{\"1\":{\"1552\":1}}],[\"机制控制\",{\"1\":{\"1447\":1}}],[\"机制\",{\"0\":{\"1189\":1,\"1447\":1,\"1557\":1},\"1\":{\"1419\":1,\"1446\":1,\"1629\":2}}],[\"机制的\",{\"1\":{\"383\":1}}],[\"机制的核心\",{\"1\":{\"196\":1}}],[\"机制实现非阻塞读\",{\"1\":{\"558\":1}}],[\"机制实现的\",{\"1\":{\"460\":1,\"1060\":1}}],[\"机制实现\",{\"1\":{\"383\":1}}],[\"机制性能一般而且存在不确定性\",{\"1\":{\"196\":1}}],[\"机制更加安全可靠\",{\"1\":{\"195\":1}}],[\"机制支持的实现类\",{\"1\":{\"91\":1}}],[\"机制注入\",{\"1\":{\"91\":1}}],[\"公共服也分免费的公益服和收费的公共服\",{\"1\":{\"1809\":1}}],[\"公共仓库\",{\"1\":{\"1791\":1}}],[\"公共仓库中\",{\"1\":{\"1790\":1}}],[\"公共溢出区\",{\"1\":{\"1389\":1}}],[\"公元7世纪创传\",{\"1\":{\"1764\":1}}],[\"公元一世纪\",{\"1\":{\"1759\":1}}],[\"公务\",{\"1\":{\"1739\":1}}],[\"公务舱\",{\"1\":{\"1732\":1}}],[\"公布运价\",{\"1\":{\"1732\":1}}],[\"公有ip\",{\"1\":{\"1428\":1}}],[\"公钥解密数字签名\",{\"1\":{\"1403\":1}}],[\"公钥\",{\"1\":{\"1403\":1}}],[\"公钥加密的新随机数\",{\"1\":{\"1402\":1}}],[\"公钥就是可信的\",{\"1\":{\"1401\":1}}],[\"公司开源的一套\",{\"1\":{\"1178\":1}}],[\"公平锁会让线程进入一个队列中排队等待\",{\"1\":{\"1518\":1}}],[\"公平锁和非公平锁是两种不同的锁的实现方式\",{\"1\":{\"1518\":1}}],[\"公平锁和非公平锁的实现\",{\"0\":{\"1518\":1}}],[\"公平策略\",{\"1\":{\"1467\":1}}],[\"公平\",{\"1\":{\"157\":1}}],[\"续约\",{\"1\":{\"1169\":1}}],[\"宝⻢\",{\"1\":{\"1167\":1}}],[\"汽⻋\",{\"1\":{\"1167\":1}}],[\"赋予从库复制权限\",{\"1\":{\"1154\":1}}],[\"减轻数据库压力\",{\"1\":{\"1368\":1}}],[\"减小锁的获取和释放的操作\",{\"1\":{\"1515\":1}}],[\"减小\",{\"1\":{\"1446\":1}}],[\"减小了\",{\"1\":{\"1249\":2}}],[\"减小堆内存占用\",{\"1\":{\"1136\":1}}],[\"减少卡顿\",{\"1\":{\"1866\":1}}],[\"减少回表次数\",{\"1\":{\"1548\":1}}],[\"减少对象创建\",{\"1\":{\"1524\":1}}],[\"减少对数据库的访问\",{\"1\":{\"1365\":1}}],[\"减少线程切换\",{\"0\":{\"1510\":1}}],[\"减少io\",{\"1\":{\"1502\":1}}],[\"减少io操作步骤\",{\"1\":{\"431\":1}}],[\"减少额外性能损耗\",{\"1\":{\"1486\":1}}],[\"减少磁盘访问次数\",{\"1\":{\"1476\":1}}],[\"减少磁盘io\",{\"1\":{\"638\":1,\"1448\":1}}],[\"减少一个\",{\"1\":{\"1415\":1}}],[\"减少一次指针定位的时间开销\",{\"1\":{\"216\":1}}],[\"减少响应数据的大小\",{\"1\":{\"1400\":1}}],[\"减少响应时间\",{\"1\":{\"398\":1,\"1251\":1,\"1625\":1}}],[\"减少重复\",{\"1\":{\"1632\":1}}],[\"减少重复发送的\",{\"1\":{\"1400\":1}}],[\"减少重定向请求次数\",{\"1\":{\"1400\":1}}],[\"减少请求次数\",{\"1\":{\"1400\":1}}],[\"减少服务端的压力\",{\"1\":{\"1374\":1}}],[\"减少数据库的压力\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"减少数据在数据库和应用服务器之间的传输\",{\"1\":{\"627\":1}}],[\"减少堆内存压力\",{\"1\":{\"1136\":1}}],[\"减少资源在初始化和释放时的昂贵损耗\",{\"1\":{\"1104\":1}}],[\"减少了2次上下文切换和2次数据拷贝\",{\"1\":{\"1486\":1}}],[\"减少了2次上下文切换和1次数据拷贝\",{\"1\":{\"1486\":1}}],[\"减少了技术人员在使用\",{\"1\":{\"1178\":1}}],[\"减少了耗时的重分配操作\",{\"1\":{\"879\":1}}],[\"减少了一次数据拷贝\",{\"1\":{\"800\":1,\"1486\":1}}],[\"减少内存碎片\",{\"1\":{\"1104\":1}}],[\"减少内存溢出的可能\",{\"1\":{\"826\":1}}],[\"减少内存占用\",{\"1\":{\"271\":1}}],[\"减少上下文切换的开销\",{\"1\":{\"784\":1}}],[\"减少单列索引\",{\"1\":{\"708\":1}}],[\"减少\",{\"1\":{\"706\":1,\"802\":1,\"1249\":1}}],[\"减少阻塞\",{\"1\":{\"640\":1}}],[\"减少网络交互\",{\"1\":{\"627\":1}}],[\"减少网络浪费\",{\"1\":{\"500\":1}}],[\"减少计数\",{\"1\":{\"160\":1}}],[\"减少段的个数\",{\"1\":{\"34\":1}}],[\"委派模式\",{\"1\":{\"1135\":1}}],[\"顾名思义按照文件的方式进程传输\",{\"1\":{\"1130\":1}}],[\"核数\",{\"1\":{\"1119\":1}}],[\"核心功能的实现由以下五个部分实现\",{\"1\":{\"1623\":1}}],[\"核心的中央处理器\",{\"1\":{\"1605\":1}}],[\"核心组件和原理\",{\"0\":{\"1605\":1}}],[\"核心思想\",{\"1\":{\"1516\":1}}],[\"核心思想是即使无法做到\",{\"1\":{\"1207\":1}}],[\"核心思想是半区复制\",{\"1\":{\"169\":1}}],[\"核心部分有两个\",{\"1\":{\"1488\":1}}],[\"核心部分是一个简单的键值对数据库\",{\"1\":{\"1348\":1}}],[\"核心里对数据的操作顺序\",{\"1\":{\"1435\":1}}],[\"核心里的\",{\"1\":{\"1435\":1}}],[\"核心监听总线上的广播事件\",{\"1\":{\"1435\":1}}],[\"核心上\",{\"1\":{\"1435\":1}}],[\"核心逻辑\",{\"0\":{\"1359\":1}}],[\"核心数\",{\"1\":{\"791\":2,\"1511\":1}}],[\"核心数据库\",{\"1\":{\"673\":1}}],[\"核心数据\",{\"0\":{\"1728\":1},\"1\":{\"42\":1}}],[\"核心后台线程\",{\"1\":{\"640\":1}}],[\"核心接口\",{\"1\":{\"540\":1}}],[\"核心代码\",{\"1\":{\"476\":1}}],[\"核心源码\",{\"1\":{\"450\":1}}],[\"核心概念\",{\"0\":{\"413\":1}}],[\"核心是基于\",{\"1\":{\"409\":1}}],[\"核心模块\",{\"1\":{\"355\":1}}],[\"核心线程\",{\"1\":{\"332\":3}}],[\"核心就是\",{\"1\":{\"188\":1}}],[\"核心特点\",{\"1\":{\"178\":1}}],[\"核心\",{\"1\":{\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"179\":1}}],[\"核心实现\",{\"1\":{\"89\":1}}],[\"核心原理就是装饰者模式\",{\"1\":{\"25\":1}}],[\"核心方法\",{\"0\":{\"5\":1}}],[\"万个连接\",{\"1\":{\"1631\":1}}],[\"万个线程\",{\"1\":{\"1112\":1}}],[\"万级\",{\"1\":{\"435\":2}}],[\"拓展了\",{\"1\":{\"1111\":1}}],[\"金融\",{\"1\":{\"1104\":1}}],[\"金融互联网等\",{\"1\":{\"410\":1}}],[\"尚未启动的线程数\",{\"1\":{\"1099\":1}}],[\"尚未实例化\",{\"1\":{\"91\":1}}],[\"守护标记\",{\"1\":{\"1099\":1}}],[\"守护线程标志\",{\"1\":{\"1087\":1}}],[\"守护线程\",{\"1\":{\"196\":1,\"796\":1}}],[\"拷贝最新数据到工作内存\",{\"1\":{\"1506\":1}}],[\"拷贝过程完成\",{\"1\":{\"1478\":1}}],[\"拷贝内存\",{\"1\":{\"1136\":1}}],[\"拷贝\",{\"1\":{\"1136\":1,\"1395\":1,\"1486\":1}}],[\"拷贝到\",{\"1\":{\"1095\":1}}],[\"拷贝文件\",{\"1\":{\"779\":1,\"1218\":1}}],[\"满天繁星出现在我们眼前\",{\"1\":{\"1844\":1}}],[\"满二叉树一定是完全二叉树\",{\"1\":{\"1387\":1}}],[\"满二叉树的总节点数是$2h\",{\"1\":{\"1387\":1}}],[\"满二叉树\",{\"1\":{\"1387\":1}}],[\"满二叉树和完全二叉树\",{\"0\":{\"1387\":1}}],[\"满老师yyds\",{\"1\":{\"1083\":1}}],[\"满足xx规则的情况下\",{\"1\":{\"1732\":1}}],[\"满足\",{\"1\":{\"1657\":1}}],[\"满足短路条件时\",{\"1\":{\"1068\":1}}],[\"满足选项中任意条件\",{\"1\":{\"912\":1}}],[\"满足空值拒绝的外连接查询可以和内连接相互转换\",{\"1\":{\"725\":1}}],[\"满足业务需求的情况下\",{\"1\":{\"615\":1}}],[\"满足数据累积到batch\",{\"1\":{\"450\":1}}],[\"满足不同场景下的监控和调试需求\",{\"1\":{\"237\":1,\"238\":1}}],[\"满足不同场景下的监控和管理需求\",{\"1\":{\"236\":1}}],[\"满足上述条件下\",{\"1\":{\"215\":1}}],[\"申请权限发布\",{\"1\":{\"1779\":1}}],[\"申请读取某文件\",{\"1\":{\"1220\":1}}],[\"申请\",{\"1\":{\"1076\":1}}],[\"吞掉异常\",{\"1\":{\"1061\":1}}],[\"吞吐量表示的是单位时间内\",{\"1\":{\"1470\":1}}],[\"吞吐量会大幅度下降\",{\"1\":{\"435\":1}}],[\"吞吐量会有较小幅度的下降\",{\"1\":{\"435\":1}}],[\"吞吐量十万级\",{\"1\":{\"410\":1}}],[\"吞吐量百万级\",{\"1\":{\"410\":1}}],[\"吞吐量\",{\"1\":{\"143\":1,\"175\":1,\"788\":1,\"1367\":1,\"1490\":1,\"1529\":1}}],[\"贯穿了事务管理的整个流程\",{\"1\":{\"1045\":1}}],[\"挂载文件系统时进入内存\",{\"1\":{\"1474\":1}}],[\"挂到\",{\"1\":{\"1395\":1}}],[\"挂起一个线程\",{\"1\":{\"1138\":1}}],[\"挂起进入阻塞状态\",{\"1\":{\"1074\":1}}],[\"挂起\",{\"1\":{\"1045\":1}}],[\"挂起当前事务\",{\"1\":{\"1041\":2}}],[\"挂了\",{\"1\":{\"460\":2}}],[\"果想要保证事务的原子性\",{\"1\":{\"1034\":1}}],[\"典型场景是一个方法中包含多个insert\",{\"1\":{\"1031\":1}}],[\"典型的有spring\",{\"1\":{\"1298\":1}}],[\"典型的有百度bfe\",{\"1\":{\"1297\":1}}],[\"典型的有阿里slb\",{\"1\":{\"1296\":1}}],[\"典型的使用场景是做全库的逻辑备份\",{\"1\":{\"550\":1}}],[\"典型的是\",{\"1\":{\"146\":1}}],[\"典型的例子是\",{\"1\":{\"146\":1}}],[\"理想算法\",{\"1\":{\"1471\":1}}],[\"理解\",{\"0\":{\"1593\":1,\"1601\":1,\"1604\":1}}],[\"理解成暂存区\",{\"1\":{\"1344\":1}}],[\"理解为处理数据的工人\",{\"1\":{\"814\":1}}],[\"理解为数据的处理工序\",{\"1\":{\"814\":1}}],[\"理解为数据的通道\",{\"1\":{\"814\":1}}],[\"理解为流动的数据\",{\"1\":{\"814\":1}}],[\"理论核心思想是\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"理论的延伸\",{\"1\":{\"1207\":1}}],[\"理论是对\",{\"1\":{\"1207\":1,\"1279\":1,\"1618\":1}}],[\"理论\",{\"0\":{\"1206\":1,\"1207\":1,\"1279\":1},\"1\":{\"1282\":1,\"1618\":2}}],[\"理论上舱位分\",{\"1\":{\"1736\":1}}],[\"理论上应略大于\",{\"1\":{\"1411\":1}}],[\"理论上不应该\",{\"1\":{\"1337\":1}}],[\"理论上\",{\"1\":{\"1028\":1}}],[\"扫描所有依赖项目的\",{\"1\":{\"1598\":1}}],[\"扫描指定包\",{\"1\":{\"1026\":1}}],[\"扫描\",{\"1\":{\"1024\":1}}],[\"扫描如果有唯一索引\",{\"1\":{\"558\":4}}],[\"拦截方法\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"拦截\",{\"1\":{\"1019\":1}}],[\"拦截器\",{\"1\":{\"1380\":1}}],[\"拦截器后交付消费者\",{\"1\":{\"484\":1}}],[\"拦截器做增加处理\",{\"1\":{\"450\":1}}],[\"✅\",{\"1\":{\"1004\":3,\"1826\":1}}],[\"网易爆米花越来越好用了\",{\"1\":{\"1811\":1}}],[\"网盘+第三方\",{\"1\":{\"1811\":1}}],[\"网盘进阶\",{\"0\":{\"1806\":1}}],[\"网盘\",{\"0\":{\"1805\":1},\"1\":{\"1811\":1}}],[\"网上还有众多的盗版在线视频网站\",{\"1\":{\"1804\":1}}],[\"网上搜索一番后\",{\"1\":{\"1790\":1}}],[\"网站体验一般\",{\"1\":{\"1811\":1}}],[\"网站去查询航班以及票价信息\",{\"1\":{\"1722\":1}}],[\"网站架构中的某个组件宕机\",{\"1\":{\"1638\":1}}],[\"网口\",{\"1\":{\"1490\":1,\"1631\":1}}],[\"网卡可以直接从内核缓冲中拷贝数据\",{\"1\":{\"1486\":1}}],[\"网卡\",{\"1\":{\"1486\":1}}],[\"网卡触发硬中断释放内存\",{\"1\":{\"1395\":1}}],[\"网卡驱动程序从发送队列中读取\",{\"1\":{\"1395\":1}}],[\"网卡接收到一个网络包后\",{\"1\":{\"1395\":1}}],[\"网址进行解析\",{\"1\":{\"1394\":1}}],[\"网关层识别非法攻击请求并拦截\",{\"1\":{\"1375\":1}}],[\"网关后面的业务系统就可以专注于创建和管理服务\",{\"1\":{\"1298\":1}}],[\"网关保护起来\",{\"1\":{\"1298\":1}}],[\"网关是一个处于应用程序或服务\",{\"1\":{\"1298\":1}}],[\"网关\",{\"0\":{\"1298\":1,\"1621\":1},\"2\":{\"1306\":1}}],[\"网关概述\",{\"0\":{\"1295\":1}}],[\"网格型\",{\"1\":{\"1000\":1}}],[\"网络描述\",{\"1\":{\"1862\":1}}],[\"网络开销都是非常大的\",{\"1\":{\"1809\":1}}],[\"网络资源加载\",{\"1\":{\"1648\":1}}],[\"网络资源等等\",{\"1\":{\"1104\":1}}],[\"网络压力重\",{\"1\":{\"1629\":1}}],[\"网络协议栈\",{\"1\":{\"1490\":1,\"1631\":1}}],[\"网络协议栈从发送缓冲区中取出\",{\"1\":{\"1395\":1}}],[\"网络可用性\",{\"1\":{\"1490\":1}}],[\"网络性能\",{\"0\":{\"1490\":1}}],[\"网络系统\",{\"0\":{\"1485\":1}}],[\"网络文件系统\",{\"1\":{\"1474\":1}}],[\"网络地址和端口转化协议\",{\"1\":{\"1428\":1}}],[\"网络地址转换协议\",{\"1\":{\"1428\":1}}],[\"网络号\",{\"1\":{\"1422\":1}}],[\"网络包出主机顺序\",{\"1\":{\"1409\":1}}],[\"网络包进主机顺序\",{\"1\":{\"1409\":1}}],[\"网络包详情\",{\"1\":{\"1396\":1}}],[\"网络分析\",{\"0\":{\"1396\":1}}],[\"网络分担集群压力\",{\"1\":{\"1375\":1}}],[\"网络接口层\",{\"1\":{\"1395\":1}}],[\"网络接口层通过\",{\"1\":{\"1394\":1}}],[\"网络层之间加入了\",{\"1\":{\"1401\":1}}],[\"网络层封装ip数据包\",{\"1\":{\"1394\":1}}],[\"网络层\",{\"1\":{\"1393\":1,\"1395\":1}}],[\"网络应用程序和网络之间的接口\",{\"1\":{\"1393\":1}}],[\"网络应用框架中的地位就好比\",{\"1\":{\"808\":1}}],[\"网络模型\",{\"0\":{\"1393\":1}}],[\"网络模式\",{\"0\":{\"1171\":1,\"1488\":1}}],[\"网络距离\",{\"1\":{\"1220\":1}}],[\"网络连接等\",{\"1\":{\"857\":1}}],[\"网络框架\",{\"0\":{\"805\":1,\"837\":1}}],[\"网络\",{\"0\":{\"797\":1}}],[\"网络拥塞等原因\",{\"1\":{\"789\":1}}],[\"网络编程中共有\",{\"1\":{\"794\":1}}],[\"网络编程基于\",{\"1\":{\"792\":1}}],[\"网络编程\",{\"0\":{\"780\":1}}],[\"网络io瓶颈\",{\"1\":{\"651\":1}}],[\"网络传输数据量过大\",{\"1\":{\"1367\":1}}],[\"网络传输\",{\"1\":{\"474\":1,\"828\":1,\"1623\":1}}],[\"网络传输等\",{\"1\":{\"469\":1}}],[\"网络通信\",{\"0\":{\"337\":1,\"1698\":1}}],[\"网络如applet\",{\"1\":{\"249\":1}}],[\"树\",{\"1\":{\"1546\":3}}],[\"树表查找\",{\"1\":{\"1386\":1}}],[\"树对象\",{\"1\":{\"1350\":1,\"1351\":1}}],[\"树型\",{\"1\":{\"1000\":1}}],[\"树的高度较小\",{\"1\":{\"1546\":1}}],[\"树的度数\",{\"1\":{\"698\":1}}],[\"树的形状依赖于插入顺序\",{\"1\":{\"698\":1}}],[\"递归文件夹\",{\"1\":{\"1688\":1}}],[\"递归修改文件权限\",{\"1\":{\"1631\":1}}],[\"递归\",{\"1\":{\"1218\":1}}],[\"递归删除\",{\"1\":{\"1218\":1}}],[\"递归查看子目录\",{\"1\":{\"1218\":1}}],[\"递归查询子节点\",{\"1\":{\"1174\":1}}],[\"递归次数\",{\"1\":{\"999\":1}}],[\"递归的时间复杂度\",{\"1\":{\"999\":1}}],[\"递归地遍历所有的引用关系\",{\"1\":{\"224\":1}}],[\"别返回\",{\"1\":{\"998\":2}}],[\"别名指向\",{\"1\":{\"1792\":1}}],[\"别名b\",{\"1\":{\"605\":1}}],[\"别名a\",{\"1\":{\"605\":1}}],[\"别名2\",{\"1\":{\"582\":2}}],[\"别名1\",{\"1\":{\"582\":2}}],[\"别名配置\",{\"1\":{\"42\":1}}],[\"贪心+二分\",{\"0\":{\"995\":1}}],[\"快结束的时候\",{\"1\":{\"1844\":1}}],[\"快乐地享受生活\",{\"1\":{\"1815\":1}}],[\"快门速度\",{\"1\":{\"1799\":1}}],[\"快把组里的所有服务都拿到权限了\",{\"1\":{\"1779\":1}}],[\"快下班了\",{\"1\":{\"1779\":1}}],[\"快到饭点了\",{\"1\":{\"1779\":1}}],[\"快照\",{\"0\":{\"1576\":1}}],[\"快照读\",{\"1\":{\"1557\":2,\"1562\":1}}],[\"快表\",{\"1\":{\"1443\":1}}],[\"快递根据门牌号找到所在位置\",{\"1\":{\"1423\":1}}],[\"快恢复\",{\"1\":{\"1413\":1}}],[\"快重传\",{\"1\":{\"1413\":1}}],[\"快排\",{\"0\":{\"989\":1,\"1653\":1},\"1\":{\"1385\":1}}],[\"快速成长\",{\"1\":{\"1775\":1}}],[\"快速\",{\"1\":{\"1459\":1,\"1462\":1,\"1542\":1,\"1705\":1}}],[\"快速恢复算法是认为\",{\"1\":{\"1413\":1}}],[\"快速重传\",{\"1\":{\"1411\":1}}],[\"快速判断一个数是否存在于大数据量的集合中\",{\"1\":{\"1390\":1}}],[\"快速失败降级运行\",{\"1\":{\"1375\":1}}],[\"快速扣减\",{\"1\":{\"1375\":1}}],[\"快速关联枚举码和枚举类\",{\"1\":{\"1245\":1}}],[\"快速定位特定数据\",{\"1\":{\"699\":1}}],[\"快速匹配文档的方式\",{\"1\":{\"697\":1}}],[\"快速持久化\",{\"1\":{\"431\":1}}],[\"拾取\",{\"1\":{\"988\":1}}],[\"尾随\",{\"1\":{\"1567\":1}}],[\"尾数位决定了浮点数的精度\",{\"1\":{\"1438\":1}}],[\"尾数\",{\"1\":{\"1438\":1}}],[\"尾部入队\",{\"1\":{\"987\":1}}],[\"尾部入栈\",{\"1\":{\"986\":2}}],[\"尾部出栈\",{\"1\":{\"986\":2}}],[\"尾以及包含节点数\",{\"1\":{\"693\":1}}],[\"手写spring\",{\"0\":{\"1376\":1}}],[\"手撸\",{\"0\":{\"1004\":1}}],[\"手撕算法\",{\"0\":{\"982\":1,\"1650\":1}}],[\"手动找资源\",{\"1\":{\"1811\":1}}],[\"手动初始化方式\",{\"1\":{\"1709\":1}}],[\"手动停止一些正常服务\",{\"1\":{\"1636\":1}}],[\"手动排除依赖\",{\"1\":{\"1632\":1}}],[\"手动硬编码\",{\"1\":{\"1611\":1}}],[\"手动硬编码的编程式\",{\"1\":{\"1276\":1}}],[\"手动加入暂存区\",{\"1\":{\"1350\":1}}],[\"手动修数据吧😥不过我也尝试把这种情况提给了\",{\"1\":{\"1240\":1}}],[\"手动设置事务配置\",{\"1\":{\"1039\":1}}],[\"手动回滚\",{\"1\":{\"1038\":1}}],[\"手动开启事务\",{\"1\":{\"734\":1}}],[\"手动控制事务\",{\"1\":{\"614\":1}}],[\"手动提交\",{\"0\":{\"492\":1}}],[\"手动处理确认\",{\"1\":{\"422\":1}}],[\"手动置\",{\"1\":{\"196\":1,\"1093\":1}}],[\"手动触发gc\",{\"1\":{\"183\":1}}],[\"手动注册第二个\",{\"1\":{\"92\":1}}],[\"升限\",{\"1\":{\"1730\":1}}],[\"升级为轻量级锁\",{\"1\":{\"1077\":1}}],[\"升级为了重量级锁\",{\"1\":{\"1076\":1}}],[\"升降序\",{\"1\":{\"969\":1}}],[\"升序\",{\"1\":{\"586\":1}}],[\"钩子将定期在脚本运行的间隙中\",{\"1\":{\"966\":1}}],[\"伪共享\",{\"1\":{\"1435\":1}}],[\"伪客户端\",{\"1\":{\"964\":2}}],[\"伪记录加间隙锁\",{\"1\":{\"556\":1}}],[\"串行执行事务\",{\"1\":{\"961\":1}}],[\"串联起来\",{\"1\":{\"188\":1}}],[\"串联起来构成等待队列\",{\"1\":{\"3\":1}}],[\"剔除多余\",{\"1\":{\"1115\":1}}],[\"剔除所有与旧主服务器连接断开超过$down\",{\"1\":{\"943\":1}}],[\"剔除近5s内没有回复info命令的从服务器\",{\"1\":{\"943\":1}}],[\"剔除下线\",{\"1\":{\"943\":1}}],[\"客观下线\",{\"1\":{\"941\":1}}],[\"客户端收到一个\",{\"1\":{\"1426\":1}}],[\"客户端收到服务端的\",{\"1\":{\"1410\":2}}],[\"客户端收到服务端报文后\",{\"1\":{\"1409\":1}}],[\"客户端和服务端随机生成初始序列号\",{\"1\":{\"1418\":1}}],[\"客户端和服务端基于时钟\",{\"1\":{\"1418\":1}}],[\"客户端和服务器都不记录彼此的历史信息\",{\"1\":{\"17\":1}}],[\"客户端打算关闭连接时\",{\"1\":{\"1410\":1}}],[\"客户端处于\",{\"1\":{\"1409\":1}}],[\"客户端重传\",{\"1\":{\"1409\":1}}],[\"客户端随机一个序列号\",{\"1\":{\"1409\":1}}],[\"客户端从服务端拿到数字证书后\",{\"1\":{\"1403\":1}}],[\"客户端把第一次请求以及响应的数据保存在本地磁盘上\",{\"1\":{\"1400\":1}}],[\"客户端声明自己接收的数据格式\",{\"1\":{\"1398\":1}}],[\"客户端钩子\",{\"1\":{\"1345\":1}}],[\"客户端缓存\",{\"0\":{\"1250\":1}}],[\"客户端拿到\",{\"1\":{\"1220\":1}}],[\"客户端直接向1台datanode写数据\",{\"1\":{\"1220\":1}}],[\"客户端向服务端发送\",{\"1\":{\"1410\":1}}],[\"客户端向指定的\",{\"1\":{\"1220\":1}}],[\"客户端向\",{\"1\":{\"1220\":2}}],[\"客户端在经过\",{\"1\":{\"1410\":1}}],[\"客户端在发起一次写请求的时候\",{\"1\":{\"1204\":1}}],[\"客户端在监听的时候会创建两个子线程\",{\"1\":{\"1190\":1}}],[\"客户端框架\",{\"1\":{\"1178\":1}}],[\"客户端开启\",{\"1\":{\"1171\":1}}],[\"客户端执行psubscribe命令订阅模式后\",{\"1\":{\"955\":1}}],[\"客户端执行subscribe命令订阅频道后\",{\"1\":{\"954\":1}}],[\"客户端可以订阅一个或多个频道\",{\"1\":{\"953\":1}}],[\"客户端仍然会将关于槽i的命令请求发送至目前负责处理槽i的节点\",{\"1\":{\"947\":1}}],[\"客户端只会在接下来的一次命令请求中将关于槽i的命令请求发送至ask错误所指示的节点\",{\"1\":{\"947\":1}}],[\"客户端每次遇到关于槽i的命令请求时\",{\"1\":{\"947\":1}}],[\"客户端每次发送请求都会携带这些数据\",{\"1\":{\"17\":1}}],[\"客户端接收到ask错误后\",{\"1\":{\"947\":1}}],[\"客户端接收回复并转换协议\",{\"1\":{\"926\":1}}],[\"客户端就可以发送命令请求了\",{\"1\":{\"947\":1}}],[\"客户端将其转换成协议格式\",{\"1\":{\"926\":1}}],[\"客户端创建时间\",{\"1\":{\"923\":1}}],[\"客户端正在使用的套接字描述符\",{\"1\":{\"923\":1}}],[\"客户端使用\",{\"1\":{\"854\":1}}],[\"客户端的浏览器对接收到的数据包解析\",{\"1\":{\"1394\":1}}],[\"客户端的\",{\"1\":{\"813\":1}}],[\"客户端启动\",{\"1\":{\"1125\":1}}],[\"客户端启动类\",{\"1\":{\"812\":1}}],[\"客户端启动时用\",{\"1\":{\"672\":1}}],[\"客户端发送数据\",{\"1\":{\"785\":1}}],[\"客户端发起连接请求\",{\"1\":{\"785\":1}}],[\"客户端连接端口使用\",{\"1\":{\"1171\":1}}],[\"客户端连接就绪时触发\",{\"1\":{\"785\":1}}],[\"客户端连接服务端时\",{\"1\":{\"614\":1}}],[\"客户端数据导入工具\",{\"1\":{\"675\":1}}],[\"客户端对象查找工具\",{\"1\":{\"675\":1}}],[\"客户端进程采用上述的三种通信方式来与服务器进程建立连接\",{\"1\":{\"672\":1}}],[\"客户端支持\",{\"1\":{\"435\":1}}],[\"客户端几乎支持所有常用语言\",{\"1\":{\"412\":1}}],[\"客户端应用可以利用这些命令来实现它的业务功能\",{\"1\":{\"405\":1}}],[\"客户端所期待的接口\",{\"1\":{\"374\":1}}],[\"客户端是使用门面模式的类或者模块\",{\"1\":{\"373\":1}}],[\"客户端编译架构\",{\"1\":{\"269\":1}}],[\"客户端编译器\",{\"1\":{\"269\":1}}],[\"客户端类型\",{\"1\":{\"91\":1}}],[\"客户端示例\",{\"1\":{\"89\":1}}],[\"客户端版本需要和使用的es集群版本一致\",{\"1\":{\"39\":1}}],[\"客户端\",{\"0\":{\"98\":1,\"457\":1,\"489\":1,\"812\":1,\"922\":1,\"1172\":1,\"1178\":1},\"1\":{\"38\":1,\"100\":1,\"373\":1,\"782\":1,\"789\":1,\"792\":1,\"842\":1,\"843\":1,\"1349\":1,\"1402\":2,\"1415\":1,\"1426\":1,\"1623\":2,\"1867\":1}}],[\"客户端包括transport和rest\",{\"1\":{\"38\":1}}],[\"客户端保存\",{\"1\":{\"26\":1}}],[\"客户端自己保存\",{\"1\":{\"20\":1}}],[\"客户端存储session\",{\"1\":{\"20\":1}}],[\"客户端存储\",{\"0\":{\"20\":1}}],[\"＜runid＞来询问其它sentinel是否同意该主服务器已下线\",{\"1\":{\"941\":1}}],[\"＜current\",{\"1\":{\"941\":1}}],[\"＜port＞\",{\"1\":{\"941\":1}}],[\"＜ip＞\",{\"1\":{\"941\":1}}],[\"＜m\",{\"1\":{\"940\":4}}],[\"＜s\",{\"1\":{\"940\":4}}],[\"哨兵模式\",{\"0\":{\"1589\":1}}],[\"哨兵\",{\"1\":{\"938\":1,\"1258\":1,\"1581\":1}}],[\"初次复制时\",{\"1\":{\"935\":2}}],[\"初始置\",{\"1\":{\"1463\":1}}],[\"初始序列号\",{\"1\":{\"1418\":1}}],[\"初始0\",{\"1\":{\"948\":1}}],[\"初始状态是\",{\"1\":{\"814\":1}}],[\"初始状态\",{\"1\":{\"768\":1}}],[\"初始值也是8704\",{\"1\":{\"741\":1}}],[\"初始值和lsn一致\",{\"1\":{\"740\":1}}],[\"初始时仅infimum和supremum两个组\",{\"1\":{\"690\":1}}],[\"初始大小16m\",{\"1\":{\"639\":1}}],[\"初始引用更新\",{\"1\":{\"178\":1}}],[\"初始标记\",{\"1\":{\"176\":1,\"177\":1,\"178\":1,\"1525\":2}}],[\"初始化对象\",{\"1\":{\"1645\":1}}],[\"初始化为\",{\"1\":{\"1594\":1}}],[\"初始化零值\",{\"1\":{\"1521\":1}}],[\"初始化一个forwardnode实例fwd\",{\"1\":{\"1497\":1}}],[\"初始化时需要注册中断处理函数\",{\"1\":{\"1482\":1}}],[\"初始化方法\",{\"1\":{\"1012\":1}}],[\"初始化事件发布器\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"初始化事务\",{\"1\":{\"461\":1}}],[\"初始化sentinel的监视主服务器列表\",{\"1\":{\"939\":1}}],[\"初始化sentinel状态\",{\"1\":{\"939\":1}}],[\"初始化后台i\",{\"1\":{\"929\":1}}],[\"初始化lru时钟\",{\"1\":{\"929\":1}}],[\"初始化服务器数据结构\",{\"1\":{\"929\":1}}],[\"初始化服务器状态结构\",{\"1\":{\"929\":1}}],[\"初始化服务器\",{\"0\":{\"929\":1},\"1\":{\"939\":1}}],[\"初始化处理器的配置\",{\"1\":{\"813\":1}}],[\"初始化数据处理器\",{\"1\":{\"811\":1,\"812\":1}}],[\"初始化完成得到一个\",{\"1\":{\"541\":1}}],[\"初始化完了之后再自旋一次\",{\"1\":{\"6\":1}}],[\"初始化的主要工作是解析\",{\"1\":{\"541\":1}}],[\"初始化流程\",{\"1\":{\"483\":1}}],[\"初始化并返回\",{\"1\":{\"383\":1}}],[\"初始化实例资源\",{\"1\":{\"289\":1}}],[\"初始化类的静态变量和执行静态初始化块\",{\"1\":{\"253\":1}}],[\"初始化阶段是类加载过程的最后一步\",{\"1\":{\"253\":1}}],[\"初始化\",{\"0\":{\"253\":1,\"483\":1,\"541\":1,\"1709\":1},\"1\":{\"25\":1,\"383\":1,\"1527\":1,\"1597\":1}}],[\"初始化之后队列的头尾节点指向同一个\",{\"1\":{\"4\":1}}],[\"断言能力\",{\"1\":{\"1716\":1}}],[\"断路了\",{\"1\":{\"1636\":1}}],[\"断电后数据不丢失\",{\"1\":{\"1434\":1}}],[\"断电丢失\",{\"1\":{\"1434\":1}}],[\"断电等问题的影响\",{\"1\":{\"680\":1}}],[\"断线的从服务器\",{\"1\":{\"943\":1}}],[\"断线后重复制为了补足小部分缺失数据\",{\"1\":{\"934\":1}}],[\"断线后重复制\",{\"1\":{\"934\":1}}],[\"频度的字符串\",{\"1\":{\"1658\":1}}],[\"频道\",{\"0\":{\"954\":1}}],[\"频率较低\",{\"1\":{\"1524\":1}}],[\"频率\",{\"1\":{\"929\":1}}],[\"频繁\",{\"1\":{\"1524\":1}}],[\"频繁上下文切换也会导致性能降低\",{\"1\":{\"782\":1}}],[\"频繁的上下文切换会影响性能\",{\"1\":{\"134\":1}}],[\"末尾常量标记\",{\"1\":{\"913\":1}}],[\"载入多个函数库\",{\"1\":{\"963\":1}}],[\"载入配置选项\",{\"1\":{\"929\":1}}],[\"载入完成后关闭\",{\"1\":{\"924\":1}}],[\"载入数据\",{\"1\":{\"916\":1}}],[\"载入期间\",{\"1\":{\"911\":1}}],[\"载入\",{\"1\":{\"911\":1}}],[\"载入时自动转换\",{\"1\":{\"913\":1}}],[\"载入时\",{\"1\":{\"908\":2}}],[\"惰性求值\",{\"1\":{\"1065\":1}}],[\"惰性删除对\",{\"1\":{\"1573\":1}}],[\"惰性删除由db\",{\"1\":{\"908\":1}}],[\"惰性删除\",{\"1\":{\"908\":2,\"1573\":1}}],[\"惰性空间释放\",{\"1\":{\"879\":1}}],[\"告知本次代码变更对软件质量的影响\",{\"1\":{\"1705\":1}}],[\"告知使用缓存\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"告知集群自己成为新的主节点\",{\"1\":{\"948\":1}}],[\"告知从服务器删除这个过期键\",{\"1\":{\"908\":1}}],[\"告知事务程序\",{\"1\":{\"907\":1}}],[\"告诉服务端开始使用加密方式发送消息\",{\"1\":{\"1402\":1}}],[\"告诉\",{\"1\":{\"417\":1,\"528\":1,\"1095\":1,\"1291\":1,\"1373\":1,\"1481\":1}}],[\"介于单元测试和功能测试之间\",{\"1\":{\"1716\":1}}],[\"介于0~12的无符号整数\",{\"1\":{\"892\":1}}],[\"介绍的标签结构是一致的\",{\"1\":{\"541\":1}}],[\"介绍\",{\"0\":{\"396\":1,\"1065\":1},\"1\":{\"1100\":1,\"1369\":1}}],[\"杜绝了缓冲区溢出\",{\"1\":{\"879\":1}}],[\"走向共和\",{\"1\":{\"1817\":1}}],[\"走到这里说明\",{\"1\":{\"1116\":1}}],[\"走\",{\"1\":{\"872\":1}}],[\"说他们乐队三人都是废物\",{\"1\":{\"1841\":1}}],[\"说话的时候仿佛已经被生活打压垮了\",{\"1\":{\"1785\":1}}],[\"说实话都那样\",{\"1\":{\"1775\":1}}],[\"说白了是对原始\",{\"1\":{\"863\":1}}],[\"说明是生成的pnr是有问题的\",{\"1\":{\"1738\":1}}],[\"说明是外部事务的一部分\",{\"1\":{\"1050\":1}}],[\"说明该版本在当前事务生成\",{\"1\":{\"1557\":2}}],[\"说明该版本在当前事务生成readview后才开启\",{\"1\":{\"754\":1}}],[\"说明该版本在当前事务生成readview前已经提交\",{\"1\":{\"754\":1}}],[\"说明两份日志逻辑一致\",{\"1\":{\"1556\":1}}],[\"说明这是个过期的槽\",{\"1\":{\"1514\":1}}],[\"说明其它线程正在扩容\",{\"1\":{\"1497\":1}}],[\"说明网络也没那么糟糕\",{\"1\":{\"1413\":1}}],[\"说明前面还有锁\",{\"1\":{\"1185\":1}}],[\"说明配置成功\",{\"1\":{\"1155\":1}}],[\"说明有竞争\",{\"1\":{\"1077\":1}}],[\"说明有事务持有表内某个记录的行级排他锁\",{\"1\":{\"560\":1}}],[\"说明轻量级锁进行了锁膨胀\",{\"1\":{\"1076\":1}}],[\"说明外部还有事务\",{\"1\":{\"1051\":1}}],[\"说明对应的脚本已经传播给了所有从服务器\",{\"1\":{\"967\":1}}],[\"说明发生了命令丢失\",{\"1\":{\"937\":1}}],[\"说明数据是当前事务自己更改的\",{\"1\":{\"754\":1,\"1557\":1}}],[\"说明被\",{\"1\":{\"154\":1}}],[\"说明已经有其它线程更新了\",{\"1\":{\"148\":1}}],[\"说明\",{\"1\":{\"38\":1,\"558\":1,\"591\":1,\"599\":1,\"662\":1,\"663\":1,\"664\":1,\"754\":1,\"1557\":1}}],[\"决定何时写入磁盘\",{\"1\":{\"1577\":1}}],[\"决定何时进行同步\",{\"1\":{\"916\":1,\"1577\":1}}],[\"决定如何使用\",{\"1\":{\"1088\":1}}],[\"决定是否对当前要构造的\",{\"1\":{\"1023\":1}}],[\"决定是否发送给指定客户端消息\",{\"1\":{\"953\":1}}],[\"决定是否将aof\",{\"1\":{\"916\":1}}],[\"决定执行完整\",{\"1\":{\"935\":2}}],[\"决定分配内存的方式是pooledbytebufallocator还是unpooledbytebufallocator\",{\"1\":{\"860\":1}}],[\"决定日志是否输出的过滤器\",{\"1\":{\"388\":1}}],[\"视频流\",{\"2\":{\"1875\":1}}],[\"视频切片完成\",{\"1\":{\"1869\":1}}],[\"视频切片\",{\"0\":{\"1869\":1}}],[\"视频切片工具\",{\"1\":{\"1867\":1}}],[\"视频小的话几十秒就好了\",{\"1\":{\"1868\":1}}],[\"视频特效\",{\"0\":{\"1855\":1}}],[\"视频质量高\",{\"1\":{\"1805\":1}}],[\"视频\",{\"1\":{\"1251\":1,\"1400\":1,\"1867\":1}}],[\"视频等等信息\",{\"1\":{\"1398\":1}}],[\"视频等\",{\"1\":{\"1212\":1}}],[\"视频通话等需要即时响应的场景\",{\"1\":{\"858\":1}}],[\"视图解析器\",{\"1\":{\"1605\":1}}],[\"视图类似于给表加上一个外壳\",{\"1\":{\"625\":1}}],[\"视图可帮助用户屏蔽真实表结构变化带来的影响\",{\"1\":{\"625\":1}}],[\"视图不仅可以简化用户对数据的理解\",{\"1\":{\"625\":1}}],[\"视图中的行与基表中的行之间必须存在一对一的关系\",{\"1\":{\"624\":1}}],[\"视图中的数据并不实际存储在数据库中\",{\"1\":{\"621\":1}}],[\"视图名称\",{\"1\":{\"622\":7}}],[\"视图只保存了查询的sql逻辑\",{\"1\":{\"621\":1}}],[\"视图\",{\"0\":{\"621\":1},\"1\":{\"69\":2,\"73\":1,\"591\":1,\"621\":1,\"623\":3,\"1604\":1,\"1605\":1}}],[\"意思就是找到指定日期下的多个最低价\",{\"1\":{\"1732\":1}}],[\"意味着自伊斯兰教兴起\",{\"1\":{\"1767\":1}}],[\"意味着所有bean在实例化后就要完成aop代理\",{\"1\":{\"1599\":1}}],[\"意味着它是线程安全的\",{\"1\":{\"851\":1}}],[\"意向排他锁\",{\"1\":{\"560\":1,\"1560\":1}}],[\"意向共享锁\",{\"1\":{\"560\":1,\"1560\":1}}],[\"意向锁不会与行级的共享\",{\"1\":{\"1560\":1}}],[\"意向锁之间是互相兼容的\",{\"1\":{\"560\":1}}],[\"意向锁包含了共享\",{\"1\":{\"560\":1}}],[\"意向锁特点\",{\"1\":{\"560\":1}}],[\"意向锁是一种独立类型\",{\"1\":{\"560\":1}}],[\"意向锁是\",{\"1\":{\"560\":1}}],[\"意向锁\",{\"0\":{\"560\":1},\"1\":{\"1560\":1}}],[\"群聊\",{\"1\":{\"848\":1}}],[\"好好睡了一觉后\",{\"1\":{\"1847\":1}}],[\"好不容易上线了\",{\"1\":{\"1781\":1}}],[\"好复杂\",{\"1\":{\"1777\":1}}],[\"好于\",{\"1\":{\"1446\":1}}],[\"好用是好用的\",{\"1\":{\"1238\":1}}],[\"好在\",{\"1\":{\"846\":1}}],[\"好处是使用方便\",{\"1\":{\"1805\":1}}],[\"好处是历史记录更加清晰\",{\"1\":{\"1633\":1}}],[\"好处是便于实现字符串常量池\",{\"1\":{\"1536\":1}}],[\"好处\",{\"1\":{\"216\":2,\"1528\":1}}],[\"希望明年能去一次音乐节\",{\"1\":{\"1826\":1}}],[\"希望尽可能发送足够大的数据\",{\"1\":{\"839\":1}}],[\"希望能够有序消费\",{\"1\":{\"462\":1}}],[\"刨去\",{\"1\":{\"839\":1}}],[\"光纤分布式数据接口\",{\"1\":{\"839\":1}}],[\"滑动窗口计数器\",{\"1\":{\"1637\":1}}],[\"滑动窗口\",{\"0\":{\"990\":1},\"1\":{\"839\":2,\"1412\":1}}],[\"粘包问题\",{\"0\":{\"1417\":1},\"1\":{\"1417\":1}}],[\"粘包\",{\"1\":{\"839\":1}}],[\"粘包半包\",{\"0\":{\"838\":1}}],[\"粘性分配\",{\"1\":{\"497\":1}}],[\"谁能想到5g时代还得忍受100kbps的下载速度啊\",{\"1\":{\"1805\":1}}],[\"谁负责\",{\"1\":{\"829\":1}}],[\"谁是最后使用者\",{\"1\":{\"829\":1}}],[\"谁作为被驱动表\",{\"1\":{\"718\":1}}],[\"池化思想就是一种将资源统一在一起管理的一种思想\",{\"1\":{\"1104\":1}}],[\"池化功能更节约内存\",{\"1\":{\"826\":1}}],[\"池化\",{\"1\":{\"826\":1}}],[\"压制组其实都转战网盘了\",{\"1\":{\"1810\":1}}],[\"压测\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"压力测试\",{\"1\":{\"1639\":1}}],[\"压力\",{\"1\":{\"826\":1}}],[\"压力小\",{\"1\":{\"826\":1}}],[\"压缩算法\",{\"1\":{\"1404\":1}}],[\"压缩提交\",{\"1\":{\"1344\":1}}],[\"压缩数据库中独立提取出来的内容\",{\"1\":{\"1310\":1}}],[\"压缩列表内的集合元素按分值从小到大排序\",{\"1\":{\"900\":1}}],[\"压缩列表结点\",{\"1\":{\"892\":1}}],[\"压缩列表属性\",{\"1\":{\"891\":1}}],[\"压缩列表实例\",{\"1\":{\"891\":1}}],[\"压缩列表\",{\"0\":{\"890\":1},\"1\":{\"895\":1}}],[\"压缩的\",{\"1\":{\"662\":1}}],[\"压缩的基本单元是消息集\",{\"1\":{\"474\":1}}],[\"压缩日志\",{\"1\":{\"477\":1}}],[\"压缩\",{\"1\":{\"459\":1,\"1297\":2,\"1688\":2}}],[\"压缩后的offset可能是不连续的\",{\"1\":{\"477\":1}}],[\"压缩后通过\",{\"1\":{\"101\":1}}],[\"压缩后发送\",{\"1\":{\"101\":1}}],[\"压缩类型\",{\"1\":{\"91\":1,\"95\":1}}],[\"压缩性\",{\"1\":{\"14\":1}}],[\"测试和部署项目\",{\"1\":{\"1790\":1}}],[\"测试运行环境\",{\"1\":{\"1716\":1}}],[\"测试成本较大\",{\"1\":{\"1716\":1}}],[\"测试有效\",{\"1\":{\"1632\":1}}],[\"测试方法\",{\"1\":{\"1608\":1}}],[\"测试方法里面无效\",{\"1\":{\"1015\":1}}],[\"测试相关\",{\"1\":{\"1608\":1}}],[\"测试实例时\",{\"1\":{\"1188\":1}}],[\"测试实例\",{\"1\":{\"1188\":1}}],[\"测试\",{\"0\":{\"850\":1,\"1704\":1},\"1\":{\"823\":1,\"1155\":1,\"1632\":2,\"1641\":1,\"1784\":1},\"2\":{\"1719\":1}}],[\"测试注解\",{\"1\":{\"356\":1}}],[\"间接触发\",{\"1\":{\"1524\":1}}],[\"间接继承自\",{\"1\":{\"816\":1}}],[\"间\",{\"1\":{\"1227\":3}}],[\"间隙锁可以共存\",{\"1\":{\"556\":1}}],[\"间隙锁唯一目的是为了防止产生幻读\",{\"1\":{\"556\":1}}],[\"间隙锁对索引记录间隙\",{\"1\":{\"556\":1}}],[\"间隙锁\",{\"0\":{\"556\":1},\"1\":{\"554\":1,\"556\":1,\"1561\":1}}],[\"久经考验\",{\"1\":{\"807\":1}}],[\"种在心里吧\",{\"1\":{\"1840\":1}}],[\"种硬币\",{\"1\":{\"1655\":1}}],[\"种特殊数据结构\",{\"1\":{\"1570\":1}}],[\"种基本数据结构\",{\"1\":{\"1570\":1}}],[\"种不同状态\",{\"1\":{\"1509\":1}}],[\"种类多\",{\"1\":{\"1212\":1}}],[\"种状态\",{\"1\":{\"1089\":1}}],[\"种事务传播行为\",{\"1\":{\"1041\":1}}],[\"种\",{\"1\":{\"794\":1}}],[\"立刻跑到后面拍醒了fy\",{\"1\":{\"1833\":1}}],[\"立刻停止当前运行进程\",{\"1\":{\"1470\":1}}],[\"立刻运行\",{\"1\":{\"1450\":1}}],[\"立刻返回\",{\"1\":{\"785\":1}}],[\"立刻刷盘\",{\"1\":{\"467\":1}}],[\"立即刷盘\",{\"1\":{\"777\":1}}],[\"⚠️注\",{\"1\":{\"773\":1}}],[\"⚠️另外需要注意\",{\"1\":{\"768\":1}}],[\"你被代理了\",{\"1\":{\"1015\":1}}],[\"你好\",{\"1\":{\"771\":1,\"774\":1}}],[\"你可以实现发布\",{\"1\":{\"84\":1}}],[\"少了校验\",{\"1\":{\"1781\":1}}],[\"少用字符串拼接的方式传参\",{\"1\":{\"1539\":1}}],[\"少的任务\",{\"1\":{\"1436\":1}}],[\"少数服从多数\",{\"1\":{\"1203\":1}}],[\"少数机器宕机\",{\"1\":{\"435\":1}}],[\"少一次内存复制\",{\"1\":{\"826\":1}}],[\"少一次拷贝\",{\"1\":{\"770\":1}}],[\"起步\",{\"0\":{\"1308\":1}}],[\"起源于18世纪的沙特阿拉伯\",{\"1\":{\"1767\":1}}],[\"起源于\",{\"1\":{\"1214\":1}}],[\"起点\",{\"1\":{\"829\":1}}],[\"起到什么作用\",{\"1\":{\"762\":1}}],[\"起始索引为1\",{\"1\":{\"593\":1}}],[\"起始索引可以省略\",{\"1\":{\"587\":1}}],[\"起始索引从0开始\",{\"1\":{\"587\":1}}],[\"起始索引\",{\"1\":{\"587\":2}}],[\"得分最高的进程会被杀掉\",{\"1\":{\"1446\":1}}],[\"得用cookie解决\",{\"1\":{\"1404\":1}}],[\"得先知道服务器设计的演化\",{\"1\":{\"762\":1}}],[\"得到二进制末尾是否为1\",{\"1\":{\"1664\":1}}],[\"得到这个对象后将其注入到b中\",{\"1\":{\"1599\":1}}],[\"得到类\",{\"1\":{\"1527\":1}}],[\"得到有事件发生的描述符个数\",{\"1\":{\"1487\":1}}],[\"得到物理内存地址\",{\"1\":{\"1443\":1}}],[\"得到的必然也是一个近似数\",{\"1\":{\"1438\":1}}],[\"得到估算的总记录数\",{\"1\":{\"720\":1}}],[\"得到一个结果集\",{\"1\":{\"713\":1}}],[\"得到若干个\",{\"1\":{\"541\":1}}],[\"得到\",{\"1\":{\"383\":1}}],[\"得到指定主机\",{\"1\":{\"339\":1}}],[\"得到结果\",{\"1\":{\"53\":1}}],[\"得到响应\",{\"1\":{\"48\":1}}],[\"策略模式\",{\"0\":{\"1648\":1}}],[\"策略设计模式\",{\"0\":{\"1007\":1}}],[\"策略\",{\"1\":{\"751\":1,\"889\":1}}],[\"策略的分区分配会是均匀的\",{\"1\":{\"496\":1}}],[\"崩溃恢复\",{\"0\":{\"742\":1}}],[\"越不熟悉的代码\",{\"1\":{\"1247\":1}}],[\"越严重的问题越可能发生\",{\"1\":{\"737\":1}}],[\"越往后\",{\"1\":{\"618\":1}}],[\"×\",{\"1\":{\"737\":6}}],[\"√表示在当前隔离级别下该问题可能会出现\",{\"1\":{\"737\":1}}],[\"√\",{\"1\":{\"737\":6}}],[\"幻读或不可重复读\",{\"1\":{\"1612\":1}}],[\"幻读等问题\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1,\"1612\":1}}],[\"幻读\",{\"1\":{\"736\":2,\"737\":1,\"1551\":1}}],[\"脏读\",{\"1\":{\"736\":2,\"737\":1,\"1551\":1}}],[\"脏写问题十分严重\",{\"1\":{\"737\":1}}],[\"脏写\",{\"1\":{\"736\":2,\"1551\":1}}],[\"脏页需要先写回\",{\"1\":{\"1446\":1}}],[\"脏页\",{\"1\":{\"638\":1}}],[\"隔离性\",{\"1\":{\"735\":1,\"961\":2,\"1032\":1,\"1274\":1,\"1550\":1}}],[\"隔离级别越低\",{\"1\":{\"737\":1}}],[\"隔离级别支持\",{\"1\":{\"556\":1,\"557\":1}}],[\"隔离级别下都支持\",{\"1\":{\"555\":1}}],[\"隔离级别\",{\"0\":{\"737\":1,\"1035\":1,\"1275\":1,\"1552\":1},\"1\":{\"508\":1,\"737\":1,\"1035\":2,\"1040\":1,\"1042\":1,\"1043\":1}}],[\"李四\",{\"1\":{\"734\":1,\"1068\":1}}],[\"额外的这个线程就能顶上去\",{\"1\":{\"1119\":1}}],[\"额外声明\",{\"1\":{\"1061\":1}}],[\"额外添加了处理空轮询问题\",{\"1\":{\"870\":1}}],[\"额外信息\",{\"1\":{\"728\":1}}],[\"额外有2字节存储该列的实际长度\",{\"1\":{\"728\":1}}],[\"额外记录了一些关于系统信息的页面\",{\"1\":{\"695\":1}}],[\"估计编译器会根据方法名做优化\",{\"1\":{\"1137\":1}}],[\"估计值\",{\"1\":{\"719\":1}}],[\"估算值\",{\"1\":{\"928\":1}}],[\"估算成本后\",{\"1\":{\"728\":1}}],[\"派生表\",{\"1\":{\"726\":1}}],[\"松散索引扫描\",{\"1\":{\"726\":1}}],[\"倾向于使用索引\",{\"1\":{\"722\":1}}],[\"倾向于不适用索引\",{\"1\":{\"722\":1}}],[\"扇出数需要估算\",{\"1\":{\"718\":1}}],[\"嵌套事务\",{\"1\":{\"1044\":1}}],[\"嵌套循环连接\",{\"1\":{\"714\":1}}],[\"嵌入式系统\",{\"1\":{\"407\":1}}],[\"驱动全局事务提交或回滚\",{\"1\":{\"1287\":1}}],[\"驱动程序\",{\"1\":{\"1224\":1}}],[\"驱动表扇出数\",{\"1\":{\"718\":1}}],[\"驱动表只访问一次\",{\"1\":{\"714\":1}}],[\"驱动表只需访问一次\",{\"1\":{\"713\":1}}],[\"驱动表中的记录即使在被驱动表中找不到匹配的记录\",{\"1\":{\"713\":1}}],[\"驱动表中的记录如果在被驱动表中找不到匹配的记录\",{\"1\":{\"713\":1}}],[\"驱动表和被驱动表可互换\",{\"1\":{\"713\":1}}],[\"驱动器\",{\"1\":{\"526\":1}}],[\"请在创建表时使用not\",{\"1\":{\"708\":1}}],[\"请求合并等\",{\"1\":{\"1790\":1}}],[\"请求获取特定资源\",{\"1\":{\"1640\":1}}],[\"请求在处理前需要拿到一个令牌\",{\"1\":{\"1637\":1}}],[\"请求在数据未准备好的情况下立即返回\",{\"1\":{\"1478\":1}}],[\"请求过滤基于这两个功能\",{\"1\":{\"1621\":1}}],[\"请求转发\",{\"1\":{\"1621\":1}}],[\"请求处理器\",{\"1\":{\"1605\":1}}],[\"请求内有效\",{\"1\":{\"1596\":1}}],[\"请求都会产生一个新实例\",{\"1\":{\"1596\":2}}],[\"请求都是明文\",{\"1\":{\"1405\":1}}],[\"请求与保持\",{\"1\":{\"1466\":1}}],[\"请求携带的数据一般是在报文\",{\"1\":{\"1405\":1}}],[\"请求通过\",{\"1\":{\"1404\":1}}],[\"请求次数了\",{\"1\":{\"1400\":1}}],[\"请求错误\",{\"1\":{\"1398\":1}}],[\"请求头等信息进行复杂路由和负载均衡的http\",{\"1\":{\"1297\":1}}],[\"请求头等信息进行请求的转发\",{\"1\":{\"1297\":1}}],[\"请求头等信息\",{\"1\":{\"1297\":1}}],[\"请求缓存非常快速\",{\"1\":{\"1253\":1}}],[\"请求注册\",{\"1\":{\"1189\":1}}],[\"请求接收者加入到发送者所处的集群里\",{\"1\":{\"949\":1}}],[\"请求不符合协议\",{\"1\":{\"924\":1}}],[\"请求和结果处理\",{\"1\":{\"852\":1}}],[\"请求序号\",{\"1\":{\"848\":1}}],[\"请求解析成\",{\"1\":{\"846\":1}}],[\"请求数据包发送后\",{\"1\":{\"1490\":1}}],[\"请求数据太多\",{\"1\":{\"651\":1}}],[\"请求数太多\",{\"1\":{\"651\":1}}],[\"请求消息\",{\"1\":{\"484\":1,\"1394\":1}}],[\"请求套接字的缓冲区大小\",{\"1\":{\"445\":1}}],[\"请求调用过程执行完毕\",{\"1\":{\"101\":1}}],[\"请求\",{\"1\":{\"101\":2,\"470\":1,\"763\":1,\"1400\":2,\"1425\":1,\"1698\":1}}],[\"请求的数据可以缓存\",{\"1\":{\"1405\":1}}],[\"请求的参数一般是以\",{\"1\":{\"1405\":1}}],[\"请求的\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"请求的id\",{\"1\":{\"95\":1}}],[\"请求的时候指定分词模式\",{\"1\":{\"34\":1}}],[\"请求认证服务器的授权\",{\"1\":{\"15\":1}}],[\"请求参数\",{\"1\":{\"6\":1}}],[\"考虑区分度\",{\"1\":{\"1548\":1}}],[\"考虑到api网关在系统中不止一个\",{\"1\":{\"1300\":1}}],[\"考虑到值判等的开销\",{\"1\":{\"901\":1}}],[\"考虑一个极端的并发场景\",{\"1\":{\"1240\":1}}],[\"考虑一种情况\",{\"1\":{\"461\":1}}],[\"考虑列的基数\",{\"1\":{\"708\":1}}],[\"考虑针对查询字段建立索引时\",{\"1\":{\"699\":1}}],[\"聚集索引的叶子节点下挂的是这一行的数据\",{\"1\":{\"699\":1}}],[\"聚集索引和二级索引\",{\"1\":{\"699\":1}}],[\"聚集索引选取规则\",{\"1\":{\"699\":1}}],[\"聚集索引\",{\"1\":{\"699\":2,\"1545\":1}}],[\"聚合等操作\",{\"1\":{\"1566\":1}}],[\"聚合等各种\",{\"1\":{\"33\":1}}],[\"聚合了线程池的状态和线程数量两个域\",{\"1\":{\"1112\":1}}],[\"聚合统计等sql会耗费大量的cpu资源\",{\"1\":{\"651\":1}}],[\"聚合函数或窗口函数\",{\"1\":{\"624\":1}}],[\"聚合函数\",{\"0\":{\"584\":1},\"1\":{\"584\":1,\"585\":1,\"1567\":1}}],[\"聚合查询\",{\"0\":{\"584\":1}}],[\"聚合\",{\"1\":{\"51\":1,\"1112\":1}}],[\"综上\",{\"1\":{\"698\":1,\"1790\":1}}],[\"他依然想回到西藏\",{\"1\":{\"1833\":1}}],[\"他没有去过珠峰\",{\"1\":{\"1833\":1}}],[\"他父母都是藏传佛教的信徒\",{\"1\":{\"1833\":1}}],[\"他也才工作四年罢了\",{\"1\":{\"1786\":1}}],[\"他们还看到了流星\",{\"1\":{\"1844\":1}}],[\"他们都被藏民拴着\",{\"1\":{\"1843\":1}}],[\"他们甚至还会说英文\",{\"1\":{\"1836\":1}}],[\"他们说的话我听不懂\",{\"1\":{\"1834\":1}}],[\"他们完全可以言行不一致\",{\"1\":{\"1767\":1}}],[\"他们就产生了hash冲突\",{\"1\":{\"698\":1}}],[\"他认为奥斯曼帝国借鉴欧洲的现代技术进步不过是西方偿还对伊斯兰科学欠下的债\",{\"1\":{\"1767\":1}}],[\"他意识到伊斯兰世界在科学上已远远落后于欧洲\",{\"1\":{\"1767\":1}}],[\"他拯救了全世界的人\",{\"1\":{\"1759\":1}}],[\"他觉得\",{\"1\":{\"376\":1}}],[\"利于排序\",{\"1\":{\"698\":1}}],[\"利用nat将内网地址映射到一个公网ip和端口\",{\"1\":{\"1860\":1}}],[\"利用x\",{\"1\":{\"1791\":1}}],[\"利用这个\",{\"1\":{\"1791\":1}}],[\"利用死信交换机和消息的存活时间\",{\"1\":{\"1629\":1}}],[\"利用httpmessageconverter\",{\"1\":{\"1608\":1}}],[\"利用空间换时间的思想\",{\"1\":{\"1500\":1}}],[\"利用标准库的缓存实现文件的加速访问\",{\"1\":{\"1478\":1}}],[\"利用局部性原理\",{\"1\":{\"1443\":1}}],[\"利用验证码\",{\"1\":{\"1375\":1}}],[\"利用率\",{\"1\":{\"1119\":1,\"1470\":1}}],[\"利用多线程优化\",{\"0\":{\"791\":1}}],[\"利用索引进行范围匹配的访问方式\",{\"1\":{\"710\":1}}],[\"利用引用修改堆中数据后\",{\"1\":{\"359\":1}}],[\"利用\",{\"1\":{\"91\":1,\"383\":2,\"1420\":1,\"1665\":1}}],[\"叶子结点还会有一个存储景点id的data字段\",{\"1\":{\"1361\":1}}],[\"叶子结点中的记录头record\",{\"1\":{\"698\":1}}],[\"叶子节点存放的是主键值\",{\"1\":{\"1545\":1}}],[\"叶子节点存放的就是实际的行数据\",{\"1\":{\"1545\":1}}],[\"叶子节点存储的都是数据记录的地址\",{\"1\":{\"698\":1}}],[\"叶子节点存储实际数据\",{\"1\":{\"698\":1}}],[\"叶子节点有自己独有的区\",{\"1\":{\"694\":1}}],[\"仍能通过提交记录找回来\",{\"1\":{\"1790\":1}}],[\"仍是自己\",{\"1\":{\"1077\":1}}],[\"仍然是执行\",{\"1\":{\"1533\":1}}],[\"仍然放不下则放到老年代\",{\"1\":{\"1524\":1}}],[\"仍然存在\",{\"1\":{\"1404\":1}}],[\"仍然存在大数据量情况下\",{\"1\":{\"698\":1}}],[\"仍然以老集群的数据为准\",{\"1\":{\"1236\":1}}],[\"仍然能够对外提供满足一致性或可用性的服务\",{\"1\":{\"1206\":1}}],[\"仍然执行系统调用获取准确时间\",{\"1\":{\"928\":1}}],[\"仍要进行全表扫描\",{\"1\":{\"703\":1}}],[\"仍会向下查询依赖视图的规则\",{\"1\":{\"623\":1}}],[\"划分\",{\"1\":{\"1658\":1}}],[\"划分不同的内存空间是为了优化\",{\"1\":{\"1524\":1}}],[\"划分为一块较大的eden空间和两块较小的survivor空间\",{\"1\":{\"1523\":1}}],[\"划分为若干redo\",{\"1\":{\"739\":1}}],[\"划分为若干组\",{\"1\":{\"690\":1}}],[\"划分比例由innodb\",{\"1\":{\"732\":1}}],[\"划分5个不同的编译层次\",{\"1\":{\"267\":1}}],[\"太好吃了\",{\"1\":{\"1848\":1}}],[\"太巧了\",{\"1\":{\"1848\":1}}],[\"太震撼了\",{\"1\":{\"1844\":1}}],[\"太tm牛逼了\",{\"1\":{\"1844\":1}}],[\"太\",{\"1\":{\"1843\":1,\"1844\":1}}],[\"太美了\",{\"1\":{\"1843\":1,\"1849\":1}}],[\"太蓝了\",{\"1\":{\"1843\":1}}],[\"太复杂太宏大了\",{\"1\":{\"1837\":1}}],[\"太心累\",{\"1\":{\"1804\":1}}],[\"太厉害了\",{\"1\":{\"1786\":1}}],[\"太摩登了🤣\",{\"1\":{\"1771\":1}}],[\"太神奇了\",{\"1\":{\"1666\":1}}],[\"太大的表无法缓存在内存中\",{\"1\":{\"682\":1}}],[\"太乱了\",{\"1\":{\"82\":1}}],[\"受限于进程的虚拟内存空间上限和系统参数限制\",{\"1\":{\"1464\":1}}],[\"受到\",{\"1\":{\"770\":1}}],[\"受硬件\",{\"1\":{\"680\":1}}],[\"受物理内存的约束\",{\"1\":{\"212\":1}}],[\"均可以不指定\",{\"1\":{\"675\":1}}],[\"均匀分散在各个机器上\",{\"1\":{\"472\":1}}],[\"均匀处理消息任务\",{\"1\":{\"400\":1}}],[\"命名空间\",{\"1\":{\"1622\":1}}],[\"命名管道\",{\"0\":{\"1457\":1}}],[\"命名管道和共享内存\",{\"1\":{\"672\":1}}],[\"命名为\",{\"1\":{\"1338\":1}}],[\"命名服务\",{\"1\":{\"1162\":1}}],[\"命令向指定\",{\"1\":{\"1792\":1}}],[\"命令默认创建的是硬链接\",{\"1\":{\"1696\":1}}],[\"命令模式\",{\"1\":{\"1689\":1}}],[\"命令备忘录\",{\"0\":{\"1680\":1}}],[\"命令寄存器\",{\"1\":{\"1481\":1}}],[\"命令利用\",{\"1\":{\"1427\":3}}],[\"命令时\",{\"1\":{\"1350\":1,\"1577\":1}}],[\"命令后\",{\"1\":{\"1344\":2}}],[\"命令打印提交历史记录\",{\"1\":{\"1322\":1}}],[\"命令推断更名操作\",{\"1\":{\"1321\":1}}],[\"命令操作的是暂存区和工作目录\",{\"1\":{\"1319\":1}}],[\"命令有多个功能\",{\"1\":{\"1315\":1}}],[\"命令行方式和\",{\"1\":{\"1218\":1}}],[\"命令行也很像\",{\"1\":{\"1218\":1}}],[\"命令行中的参数优先级最高\",{\"1\":{\"671\":1}}],[\"命令可以让客户端成为一个监视器\",{\"1\":{\"979\":1}}],[\"命令可能出现\",{\"1\":{\"967\":1}}],[\"命令请求\",{\"1\":{\"967\":1}}],[\"命令请求改写成\",{\"1\":{\"967\":1}}],[\"命令请求处理器\",{\"1\":{\"919\":1}}],[\"命令转换成\",{\"1\":{\"967\":1}}],[\"命令要执行的脚本已经被从服务器载入\",{\"1\":{\"967\":1}}],[\"命令到达服务器\",{\"1\":{\"966\":1}}],[\"命令或者\",{\"1\":{\"966\":1}}],[\"命令直接关闭服务器\",{\"1\":{\"965\":1}}],[\"命令停止脚本\",{\"1\":{\"965\":1}}],[\"命令中传入的键名参数和脚本参数分别保存到keys数组和argv数组\",{\"1\":{\"965\":1}}],[\"命令载入过的脚本都保存至\",{\"1\":{\"964\":1}}],[\"命令入队\",{\"1\":{\"959\":1}}],[\"命令实现\",{\"1\":{\"945\":1,\"946\":1}}],[\"命令实现函数将回复保存在redisclient的输出缓冲区\",{\"1\":{\"926\":1}}],[\"命令传播\",{\"1\":{\"933\":1,\"934\":1}}],[\"命令的\",{\"1\":{\"928\":1}}],[\"命令执行过的脚本\",{\"1\":{\"964\":1}}],[\"命令执行过程\",{\"0\":{\"926\":1}}],[\"命令执行器\",{\"0\":{\"927\":1}}],[\"命令函数\",{\"1\":{\"923\":1}}],[\"命令参数和数量\",{\"1\":{\"923\":1}}],[\"命令回复处理器\",{\"1\":{\"919\":1}}],[\"命令追加\",{\"1\":{\"916\":1}}],[\"命令为例\",{\"1\":{\"846\":1}}],[\"命令\",{\"0\":{\"446\":1,\"960\":1,\"965\":1,\"969\":1},\"1\":{\"964\":1,\"967\":2,\"1154\":1,\"1465\":1,\"1563\":1,\"1576\":1,\"1577\":1,\"1634\":1,\"1728\":1}}],[\"命令格式\",{\"1\":{\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1}}],[\"试用版30天\",{\"1\":{\"666\":1}}],[\"试图再次跟上\",{\"1\":{\"470\":1}}],[\"免费\",{\"1\":{\"666\":3,\"1811\":1}}],[\"免除了几乎所有的\",{\"1\":{\"503\":1}}],[\"严重影响其它查询对buffer\",{\"1\":{\"732\":1}}],[\"严重错误\",{\"1\":{\"390\":2}}],[\"严格\",{\"1\":{\"662\":1}}],[\"附注\",{\"1\":{\"1329\":1}}],[\"附注标签\",{\"1\":{\"1329\":1}}],[\"附在\",{\"1\":{\"1074\":1}}],[\"附件\",{\"1\":{\"865\":1}}],[\"附属于某个段的区\",{\"1\":{\"693\":1}}],[\"附录\",{\"0\":{\"659\":1}}],[\"附加费和税费\",{\"1\":{\"1732\":1}}],[\"附加\",{\"1\":{\"996\":1}}],[\"附加器\",{\"1\":{\"388\":1}}],[\"附加信息\",{\"0\":{\"208\":1}}],[\"互斥\",{\"1\":{\"1463\":1,\"1466\":1}}],[\"互斥锁进行线程切换\",{\"1\":{\"1468\":1}}],[\"互斥锁\",{\"1\":{\"366\":1,\"1463\":1,\"1468\":1}}],[\"互联网控制报文协议\",{\"1\":{\"1427\":1}}],[\"互不影响\",{\"1\":{\"1404\":1}}],[\"互不干扰\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"互为备机\",{\"1\":{\"658\":1}}],[\"邮\",{\"1\":{\"1743\":1}}],[\"邮件或货物返回\",{\"1\":{\"1745\":1}}],[\"邮件或货物\",{\"1\":{\"1744\":1}}],[\"邮件代理等\",{\"1\":{\"1296\":1}}],[\"邮件告警等模块\",{\"1\":{\"657\":1}}],[\"邮箱的垃圾过滤\",{\"1\":{\"1390\":1}}],[\"邮箱\",{\"1\":{\"406\":1}}],[\"算是把屁股都坐烂了\",{\"1\":{\"1796\":1}}],[\"算法压缩\",{\"1\":{\"1404\":1}}],[\"算法缺陷\",{\"1\":{\"1402\":1}}],[\"算法实现\",{\"1\":{\"1402\":1}}],[\"算法将时间划分为任意长度的任期\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"算法是第一个被证明完备的分布式系统共识算法\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"算法同上\",{\"1\":{\"908\":1}}],[\"算法产生的缘由\",{\"1\":{\"839\":1}}],[\"算法\",{\"0\":{\"1523\":1,\"1665\":1,\"1666\":1},\"1\":{\"839\":2,\"858\":1,\"1403\":1,\"1412\":1,\"1446\":1,\"1510\":1,\"1523\":2,\"1622\":2},\"2\":{\"1003\":1,\"1667\":1,\"1678\":1}}],[\"算出分片\",{\"1\":{\"656\":1}}],[\"算术和逻辑指令\",{\"1\":{\"241\":1}}],[\"截取帧的时间\",{\"1\":{\"1878\":1}}],[\"截取时长\",{\"1\":{\"1878\":1}}],[\"截取视频片段和视频帧\",{\"1\":{\"1878\":1}}],[\"截取视频帧\",{\"0\":{\"1856\":1}}],[\"截取子串\",{\"1\":{\"1567\":1}}],[\"截取原始\",{\"1\":{\"832\":1}}],[\"截取字符串中的指定位置的子字符串\",{\"1\":{\"656\":1}}],[\"截断产生的问题\",{\"1\":{\"471\":1}}],[\"活活折磨了我4pd\",{\"1\":{\"1782\":1}}],[\"活跃\",{\"1\":{\"1448\":2}}],[\"活跃状态\",{\"1\":{\"749\":1}}],[\"活跃的\",{\"1\":{\"654\":1}}],[\"活动的\",{\"1\":{\"733\":1}}],[\"活动线程和内存等\",{\"1\":{\"657\":1}}],[\"活锁\",{\"1\":{\"134\":1}}],[\"垂直分表\",{\"1\":{\"652\":1,\"1564\":1}}],[\"垂直分库\",{\"1\":{\"652\":1,\"1564\":1}}],[\"水平触发\",{\"1\":{\"1487\":1}}],[\"水平分片\",{\"1\":{\"1567\":1}}],[\"水平分表\",{\"1\":{\"652\":1,\"1564\":1}}],[\"水平分库\",{\"1\":{\"652\":1,\"1564\":1}}],[\"水平拆分\",{\"1\":{\"652\":1}}],[\"水平扩展后需要\",{\"1\":{\"21\":1}}],[\"拆分多个\",{\"1\":{\"1629\":1}}],[\"拆分成\",{\"1\":{\"1556\":1}}],[\"拆分策略\",{\"0\":{\"652\":1},\"1\":{\"652\":1}}],[\"拆分任务\",{\"1\":{\"153\":1}}],[\"灾难时的数据恢复\",{\"1\":{\"643\":1}}],[\"职责\",{\"1\":{\"640\":1}}],[\"涉及的索引都不会被使用到\",{\"1\":{\"1547\":1}}],[\"涉及资源少\",{\"1\":{\"1454\":1}}],[\"涉及删除\",{\"1\":{\"749\":1}}],[\"涉及插入的undo日志\",{\"1\":{\"749\":1}}],[\"涉及os的读写缓存\",{\"1\":{\"740\":1}}],[\"涉及多表的查询大致执行过程为\",{\"1\":{\"713\":1}}],[\"涉及参数\",{\"1\":{\"638\":1}}],[\"涉及到的注解有\",{\"1\":{\"1716\":3}}],[\"涉及到了两个线程\",{\"1\":{\"450\":1}}],[\"涉及到大量的网络传输\",{\"1\":{\"450\":1}}],[\"触发自动构建\",{\"1\":{\"1790\":1}}],[\"触发系统主动规则\",{\"1\":{\"1636\":1}}],[\"触发探测式数据回收\",{\"1\":{\"1514\":1}}],[\"触发写回的场景有\",{\"1\":{\"1478\":1}}],[\"触发场景\",{\"1\":{\"1447\":1}}],[\"触发缺页中断\",{\"1\":{\"1445\":1}}],[\"触发超时重传\",{\"1\":{\"1409\":1}}],[\"触发真实发送\",{\"1\":{\"1395\":1}}],[\"触发后需要重复注册监听\",{\"1\":{\"1189\":1}}],[\"触发的条件由配置中的save选项定义\",{\"1\":{\"912\":1}}],[\"触发其它处理器\",{\"1\":{\"823\":1}}],[\"触发\",{\"1\":{\"785\":3,\"873\":1,\"1068\":1,\"1524\":3}}],[\"触发并执行触发器中定义的sql语句集合\",{\"1\":{\"636\":1}}],[\"触发器类型\",{\"1\":{\"636\":1}}],[\"触发器使用别名old和new来引用触发器中发生变化的记录内容\",{\"1\":{\"636\":1}}],[\"触发器的这种特性可以协助应用在数据库端确保数据的完整性\",{\"1\":{\"636\":1}}],[\"触发器是与表有关的数据库对象\",{\"1\":{\"636\":1}}],[\"触发器\",{\"0\":{\"636\":1},\"1\":{\"1032\":1}}],[\"捕获\",{\"1\":{\"1096\":1}}],[\"捕获的sqlstate代码的简写\",{\"1\":{\"634\":1}}],[\"捕获异常自己处理\",{\"1\":{\"1533\":1}}],[\"捕获异常\",{\"1\":{\"241\":1}}],[\"终归要回到平淡的生活上\",{\"1\":{\"1849\":1}}],[\"终身难忘\",{\"1\":{\"1825\":1}}],[\"终究还是到了离职的日子了\",{\"1\":{\"1786\":1}}],[\"终于在2024年的毕业季\",{\"1\":{\"1832\":1}}],[\"终于在5月末赶上美团的暑期实习末班车上岸了\",{\"1\":{\"1771\":1}}],[\"终于来到了长城\",{\"1\":{\"1776\":1}}],[\"终于走进了我大清的紫禁城\",{\"1\":{\"1774\":1}}],[\"终端操作\",{\"0\":{\"1690\":1}}],[\"终止状态\",{\"1\":{\"1116\":1}}],[\"终止执行当前程序\",{\"1\":{\"634\":1}}],[\"终结方法\",{\"1\":{\"312\":1}}],[\"终结器线程\",{\"1\":{\"196\":1}}],[\"终结器计数\",{\"1\":{\"184\":2}}],[\"打卡完高程碑我们就躲到了超市取暖\",{\"1\":{\"1844\":1}}],[\"打扫卫生等等杂事\",{\"1\":{\"1825\":1}}],[\"打造私人影视库\",{\"1\":{\"1808\":1}}],[\"打造良好的身体素质\",{\"1\":{\"1786\":1}}],[\"打击和消灭多神崇拜\",{\"1\":{\"1767\":1}}],[\"打桩\",{\"0\":{\"1710\":1},\"1\":{\"1711\":1}}],[\"打包镜像\",{\"1\":{\"1634\":1}}],[\"打包功能可以将更新打包成一个二进制文件\",{\"1\":{\"1347\":1}}],[\"打点判断两个集群的写操作次数是否一致\",{\"1\":{\"1235\":1}}],[\"打开该文件的进程数\",{\"1\":{\"1475\":1}}],[\"打开计数器\",{\"1\":{\"1475\":1}}],[\"打开文件后\",{\"1\":{\"1475\":1}}],[\"打开的文件等资源\",{\"1\":{\"1451\":1}}],[\"打开redis\",{\"1\":{\"947\":1,\"948\":1}}],[\"打开sentinelredisinstance\",{\"1\":{\"941\":2}}],[\"打开监听端口\",{\"1\":{\"929\":1}}],[\"打开游标\",{\"1\":{\"634\":1}}],[\"打印结果是\",{\"1\":{\"1781\":1}}],[\"打印对象类型\",{\"1\":{\"1350\":1}}],[\"打印统计信息\",{\"1\":{\"1322\":1}}],[\"打印提交日志和差异信息\",{\"1\":{\"1322\":1}}],[\"打印调用栈\",{\"1\":{\"1095\":1}}],[\"打印出结果\",{\"1\":{\"926\":1}}],[\"打印日志时\",{\"1\":{\"1245\":1}}],[\"打印日志\",{\"1\":{\"382\":2,\"391\":1}}],[\"打印流\",{\"0\":{\"322\":1}}],[\"打印各引用的状态\",{\"1\":{\"183\":2}}],[\"声明顺序优先\",{\"1\":{\"1632\":1}}],[\"声明生效的spring配置文件\",{\"1\":{\"1608\":1}}],[\"声明不持久化字段\",{\"1\":{\"1608\":1}}],[\"声明字段\",{\"1\":{\"1608\":1}}],[\"声明主键\",{\"1\":{\"1608\":1}}],[\"声明异常处理方法\",{\"1\":{\"1608\":1}}],[\"声明作用域\",{\"1\":{\"1608\":1}}],[\"声明配置类\",{\"1\":{\"1594\":1,\"1608\":1}}],[\"声明\",{\"0\":{\"1594\":1},\"1\":{\"1608\":1}}],[\"声明式事务中不要用\",{\"1\":{\"1061\":1}}],[\"声明式事务是基于\",{\"1\":{\"1060\":1}}],[\"声明式\",{\"0\":{\"1040\":1},\"1\":{\"1383\":1,\"1611\":1}}],[\"声明长度\",{\"0\":{\"844\":1}}],[\"声明游标\",{\"1\":{\"634\":2}}],[\"声明为\",{\"1\":{\"211\":1}}],[\"游客参观的线路只是很小一部分\",{\"1\":{\"1847\":1}}],[\"游标名称\",{\"1\":{\"634\":4}}],[\"游标\",{\"0\":{\"634\":1},\"1\":{\"634\":1}}],[\"游历\",{\"1\":{\"0\":1}}],[\"退出登出\",{\"1\":{\"1690\":1}}],[\"退出\",{\"1\":{\"1681\":1,\"1689\":1}}],[\"退出临界区\",{\"1\":{\"1076\":1}}],[\"退出临界区之后\",{\"1\":{\"1074\":1}}],[\"退出指定标记的循环体\",{\"1\":{\"633\":1}}],[\"退订模式时\",{\"1\":{\"955\":1}}],[\"退订频道时\",{\"1\":{\"954\":1}}],[\"退化为记录锁\",{\"1\":{\"557\":1}}],[\"累积\",{\"1\":{\"1556\":1}}],[\"累计值就加一\",{\"1\":{\"619\":1}}],[\"累加最后汇总\",{\"1\":{\"150\":1}}],[\"准则\",{\"1\":{\"616\":1}}],[\"准备周会分享\",{\"1\":{\"1779\":1}}],[\"准备数据阶段不阻塞\",{\"1\":{\"1504\":1}}],[\"准备阶段\",{\"1\":{\"1283\":1}}],[\"准备执行\",{\"1\":{\"864\":1}}],[\"准备两个mysql服务\",{\"1\":{\"649\":1}}],[\"准备进行搜索\",{\"1\":{\"53\":1}}],[\"准备\",{\"0\":{\"251\":1},\"1\":{\"51\":1,\"248\":1,\"1527\":2}}],[\"准备request\",{\"1\":{\"48\":1}}],[\"准备json参数\",{\"1\":{\"47\":1}}],[\"准备请求的参数\",{\"1\":{\"42\":1}}],[\"借助底层的\",{\"1\":{\"1137\":1}}],[\"借助已经有序的索引\",{\"1\":{\"616\":1}}],[\"借助读屏障\",{\"1\":{\"178\":1}}],[\"研发部\",{\"1\":{\"609\":1}}],[\"财务部\",{\"1\":{\"609\":1}}],[\"销售控制等\",{\"1\":{\"1723\":1}}],[\"销售属性\",{\"1\":{\"1369\":1}}],[\"销售部\",{\"1\":{\"608\":2}}],[\"销毁\",{\"1\":{\"1597\":1}}],[\"销毁以及切换所需的开销都比进程小\",{\"1\":{\"1452\":1}}],[\"销毁临时节点\",{\"1\":{\"1187\":1}}],[\"销毁标记\",{\"1\":{\"1099\":1}}],[\"销毁和切换开销更小\",{\"1\":{\"282\":1}}],[\"称过期字典\",{\"1\":{\"908\":1}}],[\"称基于编码的多态命令\",{\"1\":{\"901\":1}}],[\"称基于类型的多态命令\",{\"1\":{\"901\":1}}],[\"称undo\",{\"1\":{\"749\":1}}],[\"称block\",{\"1\":{\"739\":1}}],[\"称冷数据\",{\"1\":{\"732\":1}}],[\"称热数据\",{\"1\":{\"732\":1}}],[\"称之为自适应hash索引\",{\"1\":{\"638\":1}}],[\"称谓嵌套查询\",{\"1\":{\"607\":1}}],[\"称为虚拟列\",{\"1\":{\"1229\":1}}],[\"称为多路复用技术\",{\"1\":{\"784\":1}}],[\"称为undo\",{\"1\":{\"751\":1}}],[\"称为做一次checkpoint\",{\"1\":{\"741\":1}}],[\"称为脏页\",{\"1\":{\"731\":1}}],[\"称为condition\",{\"1\":{\"718\":1}}],[\"称为驱动表\",{\"1\":{\"713\":1}}],[\"称为基表\",{\"1\":{\"621\":1}}],[\"称为异常类\",{\"1\":{\"345\":1}}],[\"称为对象反序列化\",{\"1\":{\"321\":1}}],[\"称为对象序列化\",{\"1\":{\"321\":1}}],[\"称为\",{\"1\":{\"146\":1}}],[\"称为发生了竞态条件\",{\"1\":{\"134\":1}}],[\"隐私问题\",{\"1\":{\"1811\":1}}],[\"隐藏在\",{\"1\":{\"1298\":1}}],[\"隐藏了系统的复杂性\",{\"1\":{\"373\":1}}],[\"隐藏了大部分es细节\",{\"1\":{\"38\":1}}],[\"隐式使用\",{\"1\":{\"734\":1}}],[\"隐式提交语句\",{\"1\":{\"734\":1}}],[\"隐式\",{\"1\":{\"603\":1,\"725\":1,\"1547\":1}}],[\"隐式内连接\",{\"1\":{\"603\":1}}],[\"笛卡尔积\",{\"1\":{\"602\":1}}],[\"姓名\",{\"1\":{\"598\":1}}],[\"姓名为两个字\",{\"1\":{\"583\":1}}],[\"外围是一圈藏式的商业街\",{\"1\":{\"1838\":1}}],[\"外\",{\"1\":{\"1528\":1}}],[\"外网无法主动连接\",{\"1\":{\"1428\":1}}],[\"外每个节点都可以投票\",{\"1\":{\"1202\":1}}],[\"外连接消除\",{\"0\":{\"725\":1}}],[\"外连接\",{\"1\":{\"713\":1}}],[\"外连接查询\",{\"0\":{\"604\":1}}],[\"外键关联\",{\"1\":{\"652\":1}}],[\"外键字段\",{\"1\":{\"599\":1}}],[\"外键字段名\",{\"1\":{\"599\":2}}],[\"外键名\",{\"1\":{\"599\":1}}],[\"外键名称\",{\"1\":{\"599\":3}}],[\"外键\",{\"0\":{\"599\":1}}],[\"外键约束\",{\"1\":{\"598\":1}}],[\"外部内存碎片和内存交换效率低\",{\"1\":{\"1443\":1}}],[\"外部业务不回滚\",{\"1\":{\"1041\":1}}],[\"外部无事务\",{\"1\":{\"1041\":1}}],[\"外部有事务\",{\"1\":{\"1041\":1}}],[\"外部只能通过\",{\"1\":{\"195\":1}}],[\"外部表和数据是相互独立的\",{\"1\":{\"1228\":1}}],[\"外部表示意\",{\"1\":{\"113\":1}}],[\"外部表\",{\"1\":{\"113\":1,\"1228\":1}}],[\"唯一不错的是特制藏族酱料\",{\"1\":{\"1834\":1}}],[\"唯一的正事就是写毕业论文\",{\"1\":{\"1825\":1}}],[\"唯一标号\",{\"1\":{\"739\":1}}],[\"唯一二级索引进行等值匹配\",{\"1\":{\"728\":2}}],[\"唯一二级索引等值匹配\",{\"1\":{\"724\":1}}],[\"唯一二级索引列来定位一条记录的访问方式\",{\"1\":{\"710\":1}}],[\"唯一索引的选择性是1\",{\"1\":{\"707\":1}}],[\"唯一索引\",{\"1\":{\"699\":1}}],[\"唯一索引上的查询不会存在临键锁\",{\"1\":{\"557\":1}}],[\"唯一约束\",{\"1\":{\"598\":1}}],[\"切位是包下飞机上的部分座位\",{\"1\":{\"1737\":1}}],[\"切位\",{\"1\":{\"1737\":1}}],[\"切分小文件\",{\"1\":{\"1658\":1}}],[\"切勿在程序中直接使用管理员账号\",{\"1\":{\"1539\":1}}],[\"切记不要对已推送至别处的提交执行变基操作\",{\"1\":{\"1337\":1}}],[\"切入点\",{\"1\":{\"1059\":2}}],[\"切点接口\",{\"1\":{\"1018\":1}}],[\"切换用户\",{\"1\":{\"1691\":1}}],[\"切换到所需的提交即可\",{\"1\":{\"1346\":1}}],[\"切换为\",{\"1\":{\"1355\":1}}],[\"切换为读取限制\",{\"1\":{\"768\":1}}],[\"切换为读取位置\",{\"1\":{\"768\":1}}],[\"切换为写模式\",{\"1\":{\"767\":1}}],[\"切换至事务状态\",{\"1\":{\"959\":1}}],[\"切换至写模式\",{\"1\":{\"767\":1}}],[\"切换至读模式\",{\"1\":{\"767\":2}}],[\"切换数据库\",{\"1\":{\"574\":1}}],[\"切片测试\",{\"1\":{\"1716\":1}}],[\"切片后调用\",{\"1\":{\"831\":1}}],[\"切片后的多个\",{\"1\":{\"831\":1}}],[\"切片等操作\",{\"1\":{\"824\":1}}],[\"切片\",{\"0\":{\"831\":1},\"1\":{\"593\":1}}],[\"右移\",{\"1\":{\"1664\":1}}],[\"右四个相邻结点\",{\"1\":{\"1000\":1}}],[\"右外\",{\"1\":{\"604\":1}}],[\"右外连接\",{\"1\":{\"604\":1,\"713\":1}}],[\"右填充\",{\"1\":{\"593\":2}}],[\"右边都要执行\",{\"1\":{\"288\":1}}],[\"左小腿的肌肉\",{\"1\":{\"1774\":1}}],[\"左移\",{\"1\":{\"1664\":1}}],[\"左\",{\"1\":{\"1000\":1}}],[\"左右\",{\"1\":{\"1367\":2}}],[\"左右子节点\",{\"1\":{\"1000\":1}}],[\"左右两侧字段都有索引时\",{\"1\":{\"703\":1}}],[\"左外\",{\"1\":{\"604\":1}}],[\"左外和右外可以互相转换\",{\"1\":{\"604\":1}}],[\"左外连接\",{\"1\":{\"604\":1,\"713\":1}}],[\"左填充\",{\"1\":{\"593\":2}}],[\"左开右闭\",{\"1\":{\"557\":1}}],[\"撤销某个提交\",{\"1\":{\"1344\":1}}],[\"撤销超过\",{\"1\":{\"1077\":2}}],[\"撤销表空间\",{\"1\":{\"639\":1}}],[\"撤销权限\",{\"1\":{\"591\":1}}],[\"撤销阻塞对象\",{\"1\":{\"8\":1}}],[\"授予权限\",{\"1\":{\"591\":1}}],[\"授权\",{\"1\":{\"1642\":1}}],[\"授权时\",{\"1\":{\"591\":1}}],[\"授权认证\",{\"1\":{\"570\":1}}],[\"授权码\",{\"1\":{\"15\":2}}],[\"降级是基于全局考虑\",{\"1\":{\"1636\":1}}],[\"降级一些非核心业务\",{\"1\":{\"1374\":1}}],[\"降级\",{\"1\":{\"1257\":1,\"1375\":1,\"1580\":1,\"1636\":1}}],[\"降序\",{\"1\":{\"586\":1}}],[\"降低存储成本提高查询效率\",{\"1\":{\"1658\":1}}],[\"降低代码之间的耦合性\",{\"1\":{\"1632\":1}}],[\"降低模块间的耦合度\",{\"1\":{\"1601\":1}}],[\"降低系统耦合性\",{\"1\":{\"1625\":1}}],[\"降低系统对单主节点的依赖\",{\"1\":{\"1590\":1}}],[\"降低系统的开销\",{\"1\":{\"1104\":1}}],[\"降低系统的稳定性\",{\"1\":{\"1104\":1}}],[\"降低系统的复杂度\",{\"1\":{\"375\":1}}],[\"降低了读频率\",{\"1\":{\"1468\":1}}],[\"降低了线程对象和线程任务的耦合性\",{\"1\":{\"136\":1}}],[\"降低风险\",{\"1\":{\"1238\":1}}],[\"降低线程创建和销毁造成的损耗\",{\"1\":{\"1104\":1}}],[\"降低资源消耗\",{\"1\":{\"1104\":1,\"1511\":1}}],[\"降低延迟\",{\"1\":{\"858\":1}}],[\"降低cpu的消耗\",{\"1\":{\"697\":1}}],[\"降低数据查询成本的目的\",{\"1\":{\"1737\":1}}],[\"降低数据排序的成本\",{\"1\":{\"697\":1}}],[\"降低数据库的io成本\",{\"1\":{\"697\":1}}],[\"降低主库的访问压力\",{\"1\":{\"647\":1}}],[\"降低性能损耗\",{\"1\":{\"391\":1}}],[\"降低灵活性\",{\"1\":{\"272\":1}}],[\"降低业务处理能力\",{\"1\":{\"19\":1}}],[\"性别\",{\"1\":{\"598\":1,\"656\":1}}],[\"性别为女且年龄小于30\",{\"1\":{\"583\":1}}],[\"性能测试\",{\"0\":{\"1639\":1},\"1\":{\"1639\":1}}],[\"性能以及封装更优秀的\",{\"1\":{\"1623\":1}}],[\"性能降低\",{\"1\":{\"1546\":1}}],[\"性能降低的问题\",{\"1\":{\"1266\":1,\"1584\":1}}],[\"性能低\",{\"1\":{\"1472\":1}}],[\"性能优化\",{\"1\":{\"1446\":1}}],[\"性能开销大\",{\"1\":{\"1428\":1}}],[\"性能甚至优于rpc\",{\"1\":{\"1406\":1}}],[\"性能也会稍差一点\",{\"1\":{\"1531\":1}}],[\"性能也更好\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"性能也是最好的\",{\"1\":{\"707\":1}}],[\"性能一般\",{\"1\":{\"1404\":1}}],[\"性能不理想\",{\"1\":{\"1283\":1}}],[\"性能不及前者\",{\"1\":{\"653\":1}}],[\"性能和一致性不能同时满足\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"性能没有优势\",{\"1\":{\"795\":1}}],[\"性能可靠稳定\",{\"1\":{\"654\":1}}],[\"性能较高\",{\"1\":{\"653\":1}}],[\"性能较低但安全性较高\",{\"1\":{\"1162\":1}}],[\"性能较低\",{\"1\":{\"616\":1,\"1014\":1}}],[\"性能排序\",{\"1\":{\"619\":1}}],[\"性能要高于乱序插入\",{\"1\":{\"614\":1}}],[\"性能卓越\",{\"1\":{\"410\":1}}],[\"性能分析\",{\"1\":{\"236\":1,\"237\":1}}],[\"性能瓶颈等\",{\"1\":{\"235\":1}}],[\"性能监控和故障处理\",{\"1\":{\"228\":1}}],[\"性能\",{\"1\":{\"212\":1,\"1488\":1,\"1524\":1}}],[\"性能收集相关信息\",{\"1\":{\"208\":1}}],[\"性能差\",{\"1\":{\"162\":1,\"1221\":1}}],[\"性能十分优异\",{\"1\":{\"158\":1}}],[\"性能就很低\",{\"1\":{\"35\":1}}],[\"女婿阿里\",{\"1\":{\"1765\":1}}],[\"女\",{\"1\":{\"579\":1,\"580\":1,\"583\":1}}],[\"昵称\",{\"1\":{\"576\":2}}],[\"例子\",{\"1\":{\"603\":1,\"604\":1,\"605\":1,\"608\":1,\"609\":1,\"610\":1,\"611\":1}}],[\"例\",{\"1\":{\"576\":2,\"579\":1,\"580\":1,\"583\":1,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"590\":1,\"1687\":1}}],[\"例如表示\",{\"1\":{\"1792\":1}}],[\"例如表示邮件服务器\",{\"1\":{\"1792\":1}}],[\"例如将\",{\"1\":{\"1792\":1}}],[\"例如int返回0\",{\"1\":{\"1708\":1}}],[\"例如home=\",{\"1\":{\"1701\":1}}],[\"例如让n和\",{\"1\":{\"1664\":1}}],[\"例如计算每日新增用户数\",{\"1\":{\"1658\":1}}],[\"例如根据某个权重排序\",{\"1\":{\"1658\":1}}],[\"例如直接放在\",{\"1\":{\"1642\":1}}],[\"例如存放\",{\"1\":{\"1642\":1}}],[\"例如利用\",{\"1\":{\"1622\":1}}],[\"例如指标\",{\"1\":{\"1609\":1}}],[\"例如事务处理\",{\"1\":{\"1601\":1}}],[\"例如时间函数now\",{\"1\":{\"1556\":1}}],[\"例如轮询策略只适用于每个节点数据一致的场景\",{\"1\":{\"1489\":1}}],[\"例如著名的\",{\"1\":{\"1488\":1}}],[\"例如鼠标\",{\"1\":{\"1480\":1}}],[\"例如匿名页\",{\"1\":{\"1479\":1}}],[\"例如匿名内部类访问局部变量\",{\"1\":{\"146\":1}}],[\"例如硬链接的实现\",{\"1\":{\"1474\":1}}],[\"例如生产者\",{\"1\":{\"1460\":1}}],[\"例如就绪队列\",{\"1\":{\"1450\":1}}],[\"例如代码分段\",{\"1\":{\"1443\":1}}],[\"例如处理跟硬件相关或时间敏感的事情\",{\"1\":{\"1437\":1}}],[\"例如开启\",{\"1\":{\"1410\":1}}],[\"例如霍夫曼编码\",{\"1\":{\"1400\":1}}],[\"例如lvs\",{\"1\":{\"1299\":1}}],[\"例如哪个节点是\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"例如允许不同节点的副本同步过程存在延迟\",{\"1\":{\"1279\":1}}],[\"例如配合\",{\"1\":{\"1266\":1,\"1584\":1}}],[\"例如业务中可以设\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"例如随机设置过期时间\",{\"1\":{\"1258\":1,\"1581\":1}}],[\"例如系统中的一个分布式锁场景的\",{\"1\":{\"1240\":1}}],[\"例如有可能是\",{\"1\":{\"1236\":1}}],[\"例如用\",{\"1\":{\"1637\":1}}],[\"例如用内置的\",{\"1\":{\"1224\":1}}],[\"例如用mycat实现的一主一从读写分离示意图\",{\"1\":{\"658\":1}}],[\"例如文本\",{\"1\":{\"1212\":1}}],[\"例如带\",{\"1\":{\"1137\":1}}],[\"例如在内网中降低重试次数\",{\"1\":{\"1415\":1}}],[\"例如在\",{\"1\":{\"1091\":1}}],[\"例如自动装载\",{\"1\":{\"1011\":1,\"1379\":1}}],[\"例如项目提供了\",{\"1\":{\"1008\":1}}],[\"例如成为主节点\",{\"1\":{\"949\":1}}],[\"例如sentinel的命令表sentinelcmds中仅有\",{\"1\":{\"939\":1}}],[\"例如不载入持久化文件\",{\"1\":{\"939\":1}}],[\"例如wrappedbuffer用于包装\",{\"1\":{\"834\":1}}],[\"例如调用\",{\"1\":{\"767\":2}}],[\"例如trx\",{\"1\":{\"749\":1}}],[\"例如对于\",{\"1\":{\"1464\":1}}],[\"例如对于很多小图片\",{\"1\":{\"1400\":1}}],[\"例如对于插入语句\",{\"1\":{\"739\":1}}],[\"例如对象的销毁等\",{\"1\":{\"1099\":1}}],[\"例如对young区域继续划分等\",{\"1\":{\"732\":1}}],[\"例如myisam\",{\"1\":{\"728\":1}}],[\"例如多表连接的顺序\",{\"1\":{\"727\":1}}],[\"例如<any\",{\"1\":{\"726\":1}}],[\"例如记录数\",{\"1\":{\"717\":1}}],[\"例如所有表的字段\",{\"1\":{\"695\":1}}],[\"例如插入\",{\"1\":{\"623\":1}}],[\"例如识别表名\",{\"1\":{\"570\":1}}],[\"例如7个分区\",{\"1\":{\"495\":1}}],[\"例如firsttopic\",{\"1\":{\"475\":1}}],[\"例如电商\",{\"1\":{\"410\":1}}],[\"例如消息丢失\",{\"1\":{\"401\":1,\"1625\":1}}],[\"例如各种插头\",{\"1\":{\"374\":1}}],[\"例如小米推出的小爱同学智能音箱\",{\"1\":{\"373\":1}}],[\"例如jdk17的主版本就是45+17\",{\"1\":{\"240\":1}}],[\"例如元类型信息\",{\"1\":{\"214\":1}}],[\"例如后台运算而不需要太多交互\",{\"1\":{\"175\":1}}],[\"例如需要与用户交互的程序\",{\"1\":{\"175\":1}}],[\"例如新生代收集minor\",{\"1\":{\"171\":1}}],[\"例如一分钟内的前55s没有请求\",{\"1\":{\"1637\":1}}],[\"例如一次载入\",{\"1\":{\"1435\":1}}],[\"例如一个方法或一个类\",{\"1\":{\"1081\":1}}],[\"例如一个线程被中断\",{\"1\":{\"161\":1}}],[\"例如一条商户信息\",{\"1\":{\"34\":1}}],[\"例如charsets\",{\"1\":{\"79\":1}}],[\"例如字段类型\",{\"1\":{\"34\":1}}],[\"例如订单号\",{\"1\":{\"34\":1}}],[\"例如把所有订单放在一个索引里\",{\"1\":{\"34\":1}}],[\"例如创建或删除索引\",{\"1\":{\"33\":1}}],[\"例如通过\",{\"1\":{\"25\":1}}],[\"例如是否登录\",{\"1\":{\"17\":1}}],[\"例如重入次数\",{\"1\":{\"6\":1}}],[\"例如\",{\"1\":{\"2\":1,\"6\":1,\"14\":1,\"33\":1,\"36\":1,\"71\":1,\"79\":1,\"134\":1,\"146\":1,\"154\":1,\"193\":1,\"194\":1,\"211\":1,\"212\":1,\"241\":7,\"263\":8,\"362\":1,\"388\":1,\"404\":1,\"413\":1,\"416\":1,\"434\":1,\"465\":1,\"500\":1,\"510\":1,\"521\":1,\"531\":1,\"537\":1,\"601\":3,\"618\":1,\"674\":1,\"702\":1,\"782\":1,\"783\":1,\"788\":1,\"839\":1,\"842\":1,\"848\":1,\"1010\":1,\"1020\":1,\"1036\":1,\"1080\":1,\"1081\":1,\"1087\":1,\"1104\":1,\"1109\":1,\"1113\":1,\"1167\":1,\"1212\":1,\"1221\":1,\"1256\":1,\"1269\":1,\"1347\":1,\"1406\":1,\"1417\":1,\"1435\":1,\"1445\":1,\"1448\":1,\"1462\":1,\"1465\":1,\"1474\":1,\"1478\":1,\"1488\":1,\"1514\":1,\"1531\":1,\"1532\":1,\"1533\":3,\"1563\":2,\"1579\":1,\"1609\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1625\":3,\"1628\":2,\"1631\":1,\"1648\":1,\"1675\":1,\"1716\":1,\"1792\":3}}],[\"长大了有一定经济能力了就特别向往自由\",{\"1\":{\"1816\":1}}],[\"长作业的进程会占用较长的\",{\"1\":{\"1470\":1}}],[\"长文本字符串\",{\"1\":{\"663\":1}}],[\"长时间运行该日志文件将会非常大\",{\"1\":{\"644\":1}}],[\"长度为k的最长上升子序列末尾元素的值\",{\"1\":{\"995\":1}}],[\"长度相同的数组\",{\"1\":{\"970\":1}}],[\"长度由数据库数据决定\",{\"1\":{\"913\":1}}],[\"长度介于250\",{\"1\":{\"893\":1}}],[\"长度$<=\",{\"1\":{\"892\":3}}],[\"长度域和数据域间隔\",{\"1\":{\"844\":1}}],[\"长度域占用字节\",{\"1\":{\"844\":1}}],[\"长度域的偏移\",{\"1\":{\"844\":1}}],[\"长度信息\",{\"1\":{\"768\":1}}],[\"长度1~4个字节\",{\"1\":{\"674\":1}}],[\"长度1~3个字节\",{\"1\":{\"674\":1}}],[\"长度\",{\"1\":{\"576\":3,\"747\":1,\"849\":1,\"896\":2}}],[\"长期持续维护中\",{\"1\":{\"38\":1}}],[\"维持小范围的用户规模也可以规避审查\",{\"1\":{\"1810\":1}}],[\"维持一支庞大的军队需要巨大的财富\",{\"1\":{\"1767\":1}}],[\"维持和管理连接\",{\"1\":{\"570\":1}}],[\"维护了两个队列\",{\"1\":{\"1487\":1}}],[\"维护一张表\",{\"1\":{\"1477\":1}}],[\"维护一个独立的\",{\"1\":{\"788\":1}}],[\"维护指向最老的页面\",{\"1\":{\"1471\":1}}],[\"维护全局和分支事务的状态\",{\"1\":{\"1287\":1}}],[\"维护跳表相关信息\",{\"1\":{\"886\":1}}],[\"维护索引计数器变量rehashidx置0\",{\"1\":{\"883\":1}}],[\"维护索引结构的代价就越大\",{\"1\":{\"708\":1}}],[\"维护\",{\"1\":{\"809\":1,\"1303\":1}}],[\"维护成本高\",{\"1\":{\"807\":1}}],[\"维护可用内存块的记录表\",{\"1\":{\"214\":1}}],[\"维护版本号\",{\"1\":{\"150\":1}}],[\"错误率恒定定律告诉我们错误是不可避免的\",{\"1\":{\"1705\":1}}],[\"错误率恒定定律\",{\"1\":{\"1705\":1}}],[\"错误\",{\"1\":{\"846\":1,\"967\":1,\"1533\":1}}],[\"错误日志统一使用log\",{\"1\":{\"1244\":1}}],[\"错误日志是\",{\"1\":{\"642\":1}}],[\"错误日志\",{\"0\":{\"642\":1},\"1\":{\"570\":1}}],[\"错误检测和数据表示\",{\"1\":{\"405\":1}}],[\"禁止驱逐数据\",{\"1\":{\"1574\":1}}],[\"禁止指令重排序\",{\"1\":{\"1507\":1,\"1645\":1}}],[\"禁止分片\",{\"1\":{\"1427\":1}}],[\"禁止load\",{\"1\":{\"1142\":1}}],[\"禁止load操作重排序\",{\"1\":{\"1142\":1}}],[\"禁止store操作重排序\",{\"1\":{\"1142\":1}}],[\"禁止网络连接\",{\"1\":{\"569\":1}}],[\"禁止使用bigdecimal\",{\"1\":{\"351\":1}}],[\"操纵\",{\"1\":{\"1350\":1}}],[\"操纵和管理数据库的大型软件\",{\"1\":{\"569\":1}}],[\"操作无法使用\",{\"1\":{\"1564\":1}}],[\"操作来尝试获取锁\",{\"1\":{\"1515\":1}}],[\"操作不需要加锁\",{\"1\":{\"1497\":1}}],[\"操作不受之前元素的影响\",{\"1\":{\"1068\":1}}],[\"操作接口采用类sql语法\",{\"1\":{\"1223\":1}}],[\"操作文件内容\",{\"1\":{\"1218\":1}}],[\"操作命令\",{\"0\":{\"1165\":1}}],[\"操作时\",{\"1\":{\"1119\":1}}],[\"操作了\",{\"1\":{\"1077\":1}}],[\"操作会很浪费性能\",{\"1\":{\"1075\":1}}],[\"操作由集群管理工具redis\",{\"1\":{\"946\":1}}],[\"操作的字段建立索引\",{\"1\":{\"708\":1}}],[\"操作遵循\",{\"1\":{\"678\":1}}],[\"操作通过二进制日志传到从库服务器\",{\"1\":{\"647\":1}}],[\"操作符\",{\"1\":{\"609\":1}}],[\"操作关系型数据库的编程语言\",{\"1\":{\"569\":1}}],[\"操作设置的一种间隙锁\",{\"1\":{\"561\":1}}],[\"操作类型\",{\"1\":{\"988\":1}}],[\"操作类\",{\"1\":{\"339\":1}}],[\"操作系统提供了更好的安全性\",{\"1\":{\"1443\":1}}],[\"操作系统收到硬件的中断请求\",{\"1\":{\"1437\":1}}],[\"操作系统减小缓存\",{\"1\":{\"1412\":1}}],[\"操作系统使用\",{\"1\":{\"799\":1}}],[\"操作系统\",{\"0\":{\"1430\":1},\"1\":{\"265\":1,\"1119\":1}}],[\"操作数据库\",{\"1\":{\"1604\":1}}],[\"操作数通常直接存放在寄存器中\",{\"1\":{\"242\":1}}],[\"操作数通常不直接存放在寄存器中\",{\"1\":{\"242\":1}}],[\"操作数等压入栈\",{\"1\":{\"241\":1}}],[\"操作数栈\",{\"0\":{\"207\":1},\"1\":{\"203\":1,\"240\":1,\"1520\":1}}],[\"操作和锁状态的原子操作\",{\"1\":{\"158\":1}}],[\"操作成功返回\",{\"1\":{\"143\":1}}],[\"操作看上去可能是在乱序执行\",{\"1\":{\"143\":1}}],[\"操作\",{\"0\":{\"1068\":1},\"1\":{\"25\":1,\"143\":1,\"149\":1,\"362\":1,\"540\":1,\"796\":1,\"814\":2,\"819\":2,\"901\":1,\"1137\":2,\"1368\":1,\"1460\":2,\"1484\":1,\"1573\":1,\"1677\":1,\"1693\":1}}],[\"页表里的页表项中除了物理地址之外\",{\"1\":{\"1443\":1}}],[\"页表包含物理页所在物理内存的基地址\",{\"1\":{\"1443\":1}}],[\"页基地址\",{\"1\":{\"1443\":1}}],[\"页内偏移量\",{\"1\":{\"1443\":2}}],[\"页内偏移\",{\"1\":{\"1443\":1}}],[\"页号\",{\"1\":{\"730\":1,\"739\":1,\"1443\":1}}],[\"页也是innodb磁盘管理的最小单元\",{\"1\":{\"693\":1}}],[\"页是组成区的最小单元\",{\"1\":{\"693\":1}}],[\"页\",{\"1\":{\"693\":1}}],[\"页中某些记录的相对位置\",{\"1\":{\"688\":1}}],[\"页中尚未使用的空间\",{\"1\":{\"688\":1}}],[\"页的一些通用信息\",{\"1\":{\"688\":1}}],[\"页大小为16kb\",{\"1\":{\"683\":1}}],[\"页合并2\",{\"1\":{\"615\":1}}],[\"页合并1\",{\"1\":{\"615\":1}}],[\"页合并\",{\"1\":{\"615\":1}}],[\"页分裂2\",{\"1\":{\"615\":1}}],[\"页分裂1\",{\"1\":{\"615\":1}}],[\"页分裂\",{\"1\":{\"615\":1,\"739\":1}}],[\"页与页之间通过指针连接\",{\"1\":{\"615\":1}}],[\"页级锁是\",{\"1\":{\"563\":1}}],[\"页级锁\",{\"0\":{\"563\":1}}],[\"页面调度\",{\"0\":{\"1471\":1}}],[\"页面重用\",{\"0\":{\"750\":1}}],[\"页面链表\",{\"1\":{\"749\":1}}],[\"页面中的记录根据delete\",{\"1\":{\"747\":1}}],[\"页面数等\",{\"1\":{\"717\":1}}],[\"页面目录\",{\"1\":{\"688\":1}}],[\"页面头部\",{\"1\":{\"688\":1}}],[\"页面\",{\"1\":{\"447\":1,\"749\":1,\"1791\":1}}],[\"效率\",{\"0\":{\"1568\":1}}],[\"效率要高于水平触发\",{\"1\":{\"1487\":1}}],[\"效率低\",{\"1\":{\"1457\":1}}],[\"效率最高安全性最差\",{\"1\":{\"916\":1,\"1577\":1}}],[\"效率最慢\",{\"1\":{\"916\":1,\"1577\":1}}],[\"效率适中\",{\"1\":{\"916\":1,\"1577\":1}}],[\"效率太低\",{\"1\":{\"841\":1}}],[\"效率非常高\",{\"1\":{\"777\":1}}],[\"效率略低于const\",{\"1\":{\"710\":1}}],[\"效率通常高于b+tree索引\",{\"1\":{\"698\":1}}],[\"效率十分低下\",{\"1\":{\"697\":1}}],[\"效率较低\",{\"1\":{\"651\":1}}],[\"效率很高\",{\"1\":{\"619\":1,\"1487\":1}}],[\"效率很低\",{\"1\":{\"560\":1,\"1486\":1}}],[\"效率一般\",{\"1\":{\"460\":1}}],[\"假定冲突的概率很低\",{\"1\":{\"1468\":1}}],[\"假网卡\",{\"1\":{\"1422\":1}}],[\"假设我们当前仓库里有一个文件的v1版本\",{\"1\":{\"1344\":1}}],[\"假设我们有如下的分支结构\",{\"1\":{\"1337\":1}}],[\"假设我们现在的\",{\"1\":{\"1332\":1}}],[\"假设一个锁资源被多个线程共享\",{\"1\":{\"1076\":1}}],[\"假设接收方的窗口只剩了\",{\"1\":{\"839\":1}}],[\"假设发送方\",{\"1\":{\"839\":1}}],[\"假设消息一直向后传\",{\"1\":{\"829\":1}}],[\"假设存在索引记录\",{\"1\":{\"561\":1}}],[\"假设\",{\"1\":{\"560\":1}}],[\"假如使用强引用\",{\"1\":{\"154\":1,\"1514\":1}}],[\"待完成\",{\"1\":{\"1488\":1}}],[\"待真正被访问时才插入\",{\"1\":{\"1448\":2}}],[\"待补充文档\",{\"1\":{\"553\":1}}],[\"待发货\",{\"1\":{\"124\":1}}],[\"层层叠叠的山峦\",{\"1\":{\"1833\":1}}],[\"层层调用最后到达\",{\"1\":{\"866\":1}}],[\"层返回数据给前端页面\",{\"1\":{\"1594\":1}}],[\"层的其他功能\",{\"1\":{\"1540\":1}}],[\"层与存储引擎层之间通过\",{\"1\":{\"1540\":1}}],[\"层和存储引擎层是相互独立的\",{\"1\":{\"1540\":1}}],[\"层和存储引擎层\",{\"1\":{\"1540\":1}}],[\"层队头阻塞问题\",{\"1\":{\"1404\":1}}],[\"层可以得到\",{\"1\":{\"1396\":1}}],[\"层进行数据交互\",{\"1\":{\"1395\":1}}],[\"层进行记录\",{\"1\":{\"643\":1}}],[\"层接口\",{\"1\":{\"1010\":1}}],[\"层级更少\",{\"1\":{\"698\":1}}],[\"层级较深\",{\"1\":{\"698\":2,\"1546\":1}}],[\"层\",{\"1\":{\"553\":1,\"886\":1,\"1404\":1,\"1540\":1,\"1594\":1}}],[\"层面上\",{\"1\":{\"1532\":1}}],[\"层面的线程id\",{\"1\":{\"1077\":1}}],[\"层面的零拷贝\",{\"1\":{\"802\":1}}],[\"层面的实现上\",{\"1\":{\"193\":1}}],[\"层面\",{\"1\":{\"149\":1}}],[\"层面提供了实现可能\",{\"1\":{\"149\":1}}],[\"删了一列\",{\"1\":{\"553\":1}}],[\"删除哈希表中对应的项\",{\"1\":{\"1651\":1}}],[\"删除双向链表的尾部节点\",{\"1\":{\"1651\":1}}],[\"删除容器\",{\"1\":{\"1634\":1}}],[\"删除镜像\",{\"1\":{\"1634\":1}}],[\"删除所有没有用的镜像\",{\"1\":{\"1634\":1}}],[\"删除资源\",{\"1\":{\"1608\":1,\"1640\":1}}],[\"删除该条目\",{\"1\":{\"1475\":1}}],[\"删除空的子目录\",{\"1\":{\"1343\":1}}],[\"删除远程分支\",{\"1\":{\"1338\":1}}],[\"删除远程仓库标签\",{\"1\":{\"1329\":1}}],[\"删除分支\",{\"1\":{\"1333\":1}}],[\"删除分区后\",{\"1\":{\"118\":1}}],[\"删除分区\",{\"1\":{\"118\":1}}],[\"删除本地标签\",{\"1\":{\"1329\":1}}],[\"删除这条消息\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"删除缓存\",{\"0\":{\"1266\":1,\"1267\":1,\"1584\":1,\"1585\":1}}],[\"删除内部表会直接删除元数据\",{\"1\":{\"1228\":1}}],[\"删除节点\",{\"0\":{\"1176\":1}}],[\"删除权限\",{\"1\":{\"1168\":1}}],[\"删除第一个元素并返回\",{\"1\":{\"987\":2}}],[\"删除对应的pubsubpattern结构\",{\"1\":{\"955\":1}}],[\"删除对应订阅者链表的客户端\",{\"1\":{\"954\":1}}],[\"删除过期键\",{\"1\":{\"928\":1}}],[\"删除读取到的过期键\",{\"1\":{\"907\":1}}],[\"删除文件\",{\"1\":{\"779\":1,\"1218\":1}}],[\"删除时需要分两阶段\",{\"1\":{\"754\":1}}],[\"删除语句提交前\",{\"1\":{\"747\":1}}],[\"删除保存点\",{\"1\":{\"734\":1}}],[\"删除索引\",{\"1\":{\"701\":2}}],[\"删除后仅修改标志位和链表指针\",{\"1\":{\"689\":1}}],[\"删除操作\",{\"1\":{\"682\":1}}],[\"删除之后\",{\"1\":{\"643\":1}}],[\"删除全部\",{\"1\":{\"643\":1}}],[\"删除和更新可能会影响索引树中不相邻的二级索引页\",{\"1\":{\"638\":1}}],[\"删除视图\",{\"1\":{\"622\":1}}],[\"删除外键\",{\"1\":{\"599\":1}}],[\"删除用户组\",{\"1\":{\"1692\":1}}],[\"删除用户\",{\"1\":{\"590\":1,\"1692\":1}}],[\"删除数据\",{\"0\":{\"580\":1},\"1\":{\"591\":1}}],[\"删除数据库\",{\"0\":{\"108\":1},\"1\":{\"574\":1,\"591\":1}}],[\"删除字段\",{\"1\":{\"576\":1}}],[\"删除日志\",{\"1\":{\"477\":1}}],[\"删除表时仅删除元数据\",{\"1\":{\"1228\":1}}],[\"删除表\",{\"0\":{\"116\":1},\"1\":{\"575\":2}}],[\"删除已存在的\",{\"1\":{\"68\":1}}],[\"删除\",{\"0\":{\"44\":1,\"49\":1},\"1\":{\"314\":1,\"544\":1,\"599\":1,\"623\":1,\"628\":1,\"636\":1,\"643\":2,\"883\":2,\"985\":1,\"1263\":1,\"1567\":1,\"1582\":1,\"1634\":1}}],[\"备降\",{\"1\":{\"1731\":1}}],[\"备用服务也处理请求\",{\"1\":{\"1638\":1}}],[\"备用服务不处理请求\",{\"1\":{\"1638\":1}}],[\"备份镜像\",{\"1\":{\"1634\":1}}],[\"备份内容包含创建表\",{\"1\":{\"675\":1}}],[\"备份时加上\",{\"1\":{\"550\":1}}],[\"备注\",{\"1\":{\"38\":1,\"631\":1,\"828\":1}}],[\"业务模式\",{\"0\":{\"1727\":1}}],[\"业务逻辑\",{\"1\":{\"1370\":1,\"1488\":1}}],[\"业务名+用户id\",{\"1\":{\"1368\":1}}],[\"业务主要用\",{\"1\":{\"1302\":1}}],[\"业务方一般用不太到\",{\"1\":{\"1301\":1}}],[\"业务方法抛异常\",{\"1\":{\"1059\":1}}],[\"业务系统之前\",{\"1\":{\"1300\":1}}],[\"业务网关一般部署在流量网关之后\",{\"1\":{\"1300\":1}}],[\"业务网关针对具体的业务需要提供特定的流控策略\",{\"1\":{\"1300\":1}}],[\"业务网关\",{\"1\":{\"1300\":1}}],[\"业务实践\",{\"0\":{\"1300\":1}}],[\"业务场景\",{\"1\":{\"1288\":1}}],[\"业务处理服务在业务事务提交之后\",{\"1\":{\"1286\":1}}],[\"业务处理服务在业务事务提交之前\",{\"1\":{\"1286\":1}}],[\"业务\",{\"1\":{\"1115\":1}}],[\"业务代码\",{\"1\":{\"1039\":1,\"1040\":1}}],[\"业务操作时\",{\"1\":{\"615\":1}}],[\"业务基本上就得停摆\",{\"1\":{\"550\":1}}],[\"业务里写这种代码怕是要被人喷死\",{\"1\":{\"71\":1}}],[\"粒度较粗\",{\"1\":{\"1791\":1}}],[\"粒度细\",{\"1\":{\"1561\":1}}],[\"粒度小\",{\"1\":{\"549\":1}}],[\"粒度大\",{\"1\":{\"549\":1}}],[\"粒度最大\",{\"1\":{\"549\":1}}],[\"逐步演进\",{\"1\":{\"1641\":1}}],[\"逐步扩大迁移范围\",{\"1\":{\"1234\":1}}],[\"逐条记录恢复\",{\"1\":{\"742\":1}}],[\"逐个解析了配置文件里的标签\",{\"1\":{\"541\":1}}],[\"逐层解析\",{\"1\":{\"51\":1}}],[\"迭代\",{\"1\":{\"1641\":1}}],[\"迭代过程中如果发现空槽\",{\"1\":{\"1514\":1}}],[\"迭代项\",{\"1\":{\"538\":1}}],[\"迭代器\",{\"1\":{\"304\":1}}],[\"显式链接\",{\"1\":{\"1476\":1}}],[\"显式大致内容\",{\"1\":{\"1350\":1}}],[\"显式文件的\",{\"1\":{\"1347\":1}}],[\"显式解决方案的当前状态\",{\"1\":{\"1347\":1}}],[\"显式地将多个写命令同步到硬盘\",{\"1\":{\"916\":1,\"1577\":1}}],[\"显式记录该键已删除\",{\"1\":{\"908\":1}}],[\"显式\",{\"1\":{\"603\":1,\"725\":1,\"1547\":1}}],[\"显式内连接\",{\"1\":{\"603\":1}}],[\"显式指定名称\",{\"1\":{\"1595\":1}}],[\"显式指定列名映射\",{\"1\":{\"532\":1}}],[\"显式指定数据表列名的映射关系\",{\"1\":{\"532\":1}}],[\"显示更多信息\",{\"1\":{\"1700\":1}}],[\"显示为x\",{\"1\":{\"1692\":1}}],[\"显示解压缩过程\",{\"1\":{\"1688\":1}}],[\"显示当前系统正在执行的进程的相关信息\",{\"1\":{\"1631\":1}}],[\"显示分离来组织代码\",{\"1\":{\"1604\":1}}],[\"显示出所有悬空的对象\",{\"1\":{\"1346\":1}}],[\"显示所有分支\",{\"1\":{\"1333\":1}}],[\"显示所有jvm标志的值\",{\"1\":{\"231\":1}}],[\"显示详细信息\",{\"1\":{\"1175\":1}}],[\"显示指定数据库或者指定表的状态信息\",{\"1\":{\"675\":1}}],[\"显示指定名称的java系统属性的值\",{\"1\":{\"231\":1}}],[\"显示指定名称的jvm标志的值\",{\"1\":{\"231\":1}}],[\"显示简单格式\",{\"1\":{\"675\":1}}],[\"显示java堆的概要信息\",{\"1\":{\"232\":1}}],[\"显示java虚拟机的启动参数\",{\"1\":{\"231\":1}}],[\"显示java进程的环境变量\",{\"1\":{\"231\":1}}],[\"显示java系统属性的值\",{\"1\":{\"231\":1}}],[\"显示数据库及表的统计信息\",{\"1\":{\"675\":1}}],[\"显示数据所在hdfs块的偏移量\",{\"1\":{\"128\":1,\"1229\":1}}],[\"显示数据行所在文件的偏移量\",{\"1\":{\"128\":1,\"1229\":1}}],[\"显示数据行所在的具体文件\",{\"1\":{\"128\":1,\"1229\":1}}],[\"含一本豆瓣未收录的\",{\"1\":{\"1826\":1}}],[\"含最小\",{\"1\":{\"583\":1}}],[\"含义\",{\"1\":{\"519\":1,\"619\":1,\"631\":1,\"643\":1,\"649\":1,\"673\":1,\"699\":2,\"754\":1,\"828\":1,\"1557\":1}}],[\"含有指定值的属性的元素\",{\"1\":{\"357\":1}}],[\"我这边的目录如下\",{\"1\":{\"1870\":1}}],[\"我也是这样想的\",{\"1\":{\"1849\":1}}],[\"我也疯了\",{\"1\":{\"1781\":1}}],[\"我看到了内地一辈子也看不到的绝美风光\",{\"1\":{\"1849\":1}}],[\"我和fy去吃了酒店附近的山东饺子馆\",{\"1\":{\"1847\":1}}],[\"我和fy奇奇怪怪被单独安排到了一个四人间\",{\"1\":{\"1844\":1}}],[\"我觉得还行就买了几十块的小零食\",{\"1\":{\"1846\":1}}],[\"我越过路边的小溪\",{\"1\":{\"1844\":1}}],[\"我问同车的爽姐想不想爬珠峰\",{\"1\":{\"1844\":1}}],[\"我问了他很多感兴趣的话题\",{\"1\":{\"1833\":1}}],[\"我就一个人跑出去坐在秋千上等待日出\",{\"1\":{\"1842\":1}}],[\"我就知道\",{\"1\":{\"1841\":1}}],[\"我就差哇的一声哭出来了\",{\"1\":{\"1786\":1}}],[\"我又不愿离开\",{\"1\":{\"1841\":1}}],[\"我一个汉族人才是少数民族\",{\"1\":{\"1834\":1}}],[\"我都带着它一起\",{\"1\":{\"1828\":1}}],[\"我都在思考毕业后到底要不要回到这\",{\"1\":{\"1786\":1}}],[\"我终于\",{\"1\":{\"1825\":1}}],[\"我终究是没有逃过要写前端的命\",{\"1\":{\"1782\":1}}],[\"我现在正在用的就是天大的北洋园pt站\",{\"1\":{\"1810\":1}}],[\"我电脑里下载的1991年的720p版本\",{\"1\":{\"1803\":1}}],[\"我想用双脚去到更远的地方\",{\"1\":{\"1786\":1}}],[\"我想去拉萨\",{\"1\":{\"1786\":1}}],[\"我的北洋园g了😭\",{\"1\":{\"1811\":1}}],[\"我的第一台相机到手\",{\"1\":{\"1799\":1}}],[\"我的转正自评里很多都是些老套的俗话\",{\"1\":{\"1786\":1}}],[\"我的脑袋就没舒服过\",{\"1\":{\"1773\":1}}],[\"我可以静静地看着月亮听着歌\",{\"1\":{\"1786\":1}}],[\"我好喜欢晚上下了班车回家那段路\",{\"1\":{\"1786\":1}}],[\"我正因为需求写完太无聊\",{\"1\":{\"1785\":1}}],[\"我不转正谁转正\",{\"1\":{\"1784\":1}}],[\"我不仅有早会\",{\"1\":{\"1773\":1}}],[\"我呸\",{\"1\":{\"1781\":1}}],[\"我吐了呀\",{\"1\":{\"1781\":2}}],[\"我为什么不用参数传递呢\",{\"1\":{\"515\":1}}],[\"我们所有人也都一样\",{\"1\":{\"1849\":1}}],[\"我们在一起聊学业\",{\"1\":{\"1849\":1}}],[\"我们在西宁呆了一个白天\",{\"1\":{\"1833\":1}}],[\"我们机智得选择了拉萨\",{\"1\":{\"1848\":1}}],[\"我们吃了顿巨辣的麻辣烫\",{\"1\":{\"1847\":1}}],[\"我们吃完泡面\",{\"1\":{\"1844\":1}}],[\"我们为了省钱选了二号路线\",{\"1\":{\"1847\":1}}],[\"我们下午就一路回拉萨城了\",{\"1\":{\"1846\":1}}],[\"我们下车挂了经幡\",{\"1\":{\"1842\":1}}],[\"我们进藏的时候就已经路过了\",{\"1\":{\"1845\":1}}],[\"我们进入\",{\"1\":{\"541\":1}}],[\"我们很幸运得又看到了一次彩虹\",{\"1\":{\"1845\":1}}],[\"我们朝着黑暗的方向前进\",{\"1\":{\"1844\":1}}],[\"我们准备乘环保车到山腰处的扎西宗乡入住\",{\"1\":{\"1844\":1}}],[\"我们立刻跑出去开始一顿狂拍日照珠峰\",{\"1\":{\"1844\":1}}],[\"我们看到了5座海拔8000米以上的山峰\",{\"1\":{\"1844\":1}}],[\"我们终于到了珠穆朗玛峰国家公园\",{\"1\":{\"1844\":1}}],[\"我们竟然还要爬山\",{\"1\":{\"1843\":1}}],[\"我们全车了都叫了出来\",{\"1\":{\"1843\":1}}],[\"我们到了景区门口换乘环保车\",{\"1\":{\"1844\":1}}],[\"我们到了西藏的三大圣湖之一\",{\"1\":{\"1843\":1}}],[\"我们到西藏寻找自由\",{\"1\":{\"1843\":1}}],[\"我们继续驱车\",{\"1\":{\"1843\":1}}],[\"我们真的很幸运\",{\"1\":{\"1841\":1}}],[\"我们上的是一个小巴车\",{\"1\":{\"1841\":1}}],[\"我们一直等到九点多天才黑\",{\"1\":{\"1839\":1}}],[\"我们还在这里喝了青稞酸奶\",{\"1\":{\"1838\":1}}],[\"我们就去了扎基寺\",{\"1\":{\"1836\":1}}],[\"我们就可以直接将\",{\"1\":{\"1636\":1}}],[\"我们就可以创建\",{\"1\":{\"542\":1}}],[\"我们游客吃的牦牛火锅基本都是假的\",{\"1\":{\"1834\":1}}],[\"我们坐公交\",{\"1\":{\"1834\":1}}],[\"我们分享零食\",{\"1\":{\"1833\":1}}],[\"我们又是合照\",{\"1\":{\"1833\":1}}],[\"我们把本地的\",{\"1\":{\"1791\":1}}],[\"我们要求2\",{\"1\":{\"1675\":1}}],[\"我们创建具有现有对象的对象\",{\"1\":{\"1649\":1}}],[\"我们组业务一般用\",{\"1\":{\"1303\":1}}],[\"我们不应该过度设计\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"我们以5个节点的集群启动为例分析\",{\"1\":{\"1203\":1}}],[\"我们再退一步\",{\"1\":{\"1077\":1}}],[\"我们先退一步\",{\"1\":{\"1076\":1}}],[\"我们通常用的是它的一个实现类\",{\"1\":{\"1043\":1}}],[\"我们可以得到大数据的核心工作有三个\",{\"1\":{\"1213\":1}}],[\"我们可以得出\",{\"1\":{\"460\":1}}],[\"我们可以把它换出到物理内存之外\",{\"1\":{\"1443\":1}}],[\"我们可以把\",{\"1\":{\"1042\":1}}],[\"我们可以用\",{\"1\":{\"823\":1}}],[\"我们可以在缓冲池中进行合并处理\",{\"1\":{\"638\":1}}],[\"我们可以在外层加入\",{\"1\":{\"537\":1}}],[\"我们考虑一种特殊情况\",{\"1\":{\"460\":1}}],[\"我们也希望即时去查看一些数据指标\",{\"1\":{\"442\":1}}],[\"我们会通过下面这条语句为类设置一个日志器\",{\"1\":{\"383\":1}}],[\"我们后面就只看新版的实现原理\",{\"1\":{\"383\":1}}],[\"我们后续以jdk8的内存分布进行学习\",{\"1\":{\"201\":1}}],[\"我们只需要对小爱同学吼一嗓子\",{\"1\":{\"373\":1}}],[\"我们使用集群组进行集群内部流量路由\",{\"1\":{\"33\":1}}],[\"易扩展的api网关\",{\"1\":{\"1303\":1}}],[\"易扩展\",{\"1\":{\"1028\":1}}],[\"易理解和易维护\",{\"1\":{\"508\":1}}],[\"易于扩展\",{\"1\":{\"1404\":1}}],[\"易于整合\",{\"1\":{\"434\":1}}],[\"易于实现和移植\",{\"1\":{\"242\":2}}],[\"易于理解和维护\",{\"1\":{\"223\":1}}],[\"易于理解和测试\",{\"1\":{\"64\":1}}],[\"普遍都不太靠谱\",{\"1\":{\"1810\":1}}],[\"普遍对象的状态\",{\"1\":{\"183\":1}}],[\"普通集群\",{\"1\":{\"1629\":1}}],[\"普通模式\",{\"1\":{\"1629\":1}}],[\"普通的select\",{\"1\":{\"1557\":1}}],[\"普通文件\",{\"1\":{\"1350\":1}}],[\"普通表\",{\"1\":{\"1228\":1}}],[\"普通二分\",{\"1\":{\"998\":1}}],[\"普通客户端\",{\"1\":{\"924\":1}}],[\"普通记录\",{\"1\":{\"689\":1}}],[\"普通索引\",{\"1\":{\"557\":1}}],[\"普通执行语句\",{\"1\":{\"530\":1}}],[\"普通老式\",{\"1\":{\"503\":1}}],[\"给除了自己以外的客户端广播消息\",{\"1\":{\"1859\":1}}],[\"给所有用户\",{\"1\":{\"1859\":1}}],[\"给汪师傅拍下了他的人生照片\",{\"1\":{\"1846\":1}}],[\"给予这个\",{\"1\":{\"1791\":1}}],[\"给了我人生的第一桶金\",{\"1\":{\"1786\":1}}],[\"给我传了个null\",{\"1\":{\"1781\":1}}],[\"给系统一定压力\",{\"1\":{\"1639\":1}}],[\"给多个消费者进行处理\",{\"1\":{\"1628\":1}}],[\"给定一个内存地址\",{\"1\":{\"1513\":1}}],[\"给出了针对各种项目和语言的忽略跟踪文件\",{\"1\":{\"1330\":1}}],[\"给的方案\",{\"1\":{\"1240\":1}}],[\"给对象上锁\",{\"1\":{\"1074\":1}}],[\"给\",{\"1\":{\"854\":3,\"856\":2}}],[\"给个例子大家自己看看吧\",{\"1\":{\"515\":1}}],[\"给各个消费者\",{\"1\":{\"496\":1}}],[\"给容器自动配置了很多类\",{\"1\":{\"416\":1}}],[\"余下的由前面几个消费者负责\",{\"1\":{\"495\":1}}],[\"追踪沿途路由\",{\"1\":{\"1427\":1}}],[\"追踪和分析等行为变得十分困难\",{\"1\":{\"441\":1}}],[\"追加\",{\"1\":{\"1685\":1}}],[\"追加数据\",{\"1\":{\"1218\":1}}],[\"追加本地数据到\",{\"1\":{\"1218\":1}}],[\"追加消息到当前分段\",{\"1\":{\"476\":1}}],[\"偏向标记等\",{\"1\":{\"1521\":2}}],[\"偏向锁有延迟机制\",{\"1\":{\"1077\":1}}],[\"偏向锁将会被撤销\",{\"1\":{\"1077\":1}}],[\"偏向锁的对象头里存储了线程\",{\"1\":{\"1077\":1}}],[\"偏向锁开启时\",{\"1\":{\"1077\":1}}],[\"偏向锁解锁后对象头里依然存储着线程\",{\"1\":{\"1077\":1}}],[\"偏向锁\",{\"0\":{\"1077\":1},\"1\":{\"1515\":1}}],[\"偏向信息等\",{\"1\":{\"215\":1}}],[\"偏移量\",{\"1\":{\"1435\":2}}],[\"偏移量上的二进制位设为\",{\"1\":{\"975\":1}}],[\"偏移量上的二进制位的值\",{\"1\":{\"974\":1}}],[\"偏移量指定的二进制位至少需要多少字节\",{\"1\":{\"975\":1}}],[\"偏移量指定的二进制位\",{\"1\":{\"974\":1}}],[\"偏移量指定的二进制位是\",{\"1\":{\"974\":1,\"975\":1}}],[\"偏移量指定的二进制位保存在位数组的哪个字节\",{\"1\":{\"974\":1,\"975\":1}}],[\"偏移量索引\",{\"1\":{\"475\":1}}],[\"故障检测\",{\"1\":{\"948\":1}}],[\"故障转移完成\",{\"1\":{\"948\":1}}],[\"故障转移\",{\"0\":{\"943\":1},\"1\":{\"948\":1}}],[\"故障处理\",{\"1\":{\"471\":1}}],[\"故障恢复\",{\"0\":{\"471\":1}}],[\"故取名高水位线\",{\"1\":{\"471\":1}}],[\"刷牛客和力扣\",{\"1\":{\"1815\":1}}],[\"刷盘时机\",{\"1\":{\"739\":1,\"1555\":1}}],[\"刷盘间隔\",{\"1\":{\"467\":1}}],[\"刷写批量更新\",{\"0\":{\"513\":1}}],[\"刷新次数\",{\"1\":{\"1700\":1}}],[\"刷新时间\",{\"1\":{\"1700\":1}}],[\"刷新时间有以下几种\",{\"1\":{\"731\":1}}],[\"刷新工作内存到主内存\",{\"1\":{\"1506\":1}}],[\"刷新回脏的文件元数据\",{\"1\":{\"1479\":1}}],[\"刷新整个页面过于浪费\",{\"1\":{\"738\":1,\"1555\":1}}],[\"刷新脏页到磁盘的线程\",{\"1\":{\"640\":1}}],[\"刷新\",{\"1\":{\"533\":1}}],[\"刷新硬件的写缓存\",{\"1\":{\"145\":1}}],[\"刷新缓存\",{\"1\":{\"73\":1}}],[\"平台和其它ota是看不到的\",{\"1\":{\"1737\":1}}],[\"平台不掌握实际的库存信息\",{\"1\":{\"1734\":1}}],[\"平台通过提供一个统一的政策价格计算引擎\",{\"1\":{\"1727\":1}}],[\"平台是一种撮合交易的模式\",{\"1\":{\"1726\":1}}],[\"平台默认实现都是开启池化的\",{\"1\":{\"826\":1}}],[\"平方探查法\",{\"1\":{\"1389\":1}}],[\"平均值\",{\"1\":{\"584\":1}}],[\"平衡树\",{\"1\":{\"1386\":1}}],[\"平衡\",{\"1\":{\"467\":1}}],[\"平时大概就50qps\",{\"1\":{\"400\":1}}],[\"及时\",{\"1\":{\"1705\":1}}],[\"及时邮件或短信提醒\",{\"1\":{\"1539\":1}}],[\"及早触发后台回收\",{\"1\":{\"1446\":1}}],[\"及插入表的sql语句\",{\"1\":{\"675\":1}}],[\"及格\",{\"1\":{\"631\":1}}],[\"及其子类使用了池化机制\",{\"1\":{\"829\":1}}],[\"及其部门信息\",{\"1\":{\"611\":1}}],[\"及其默认日志实现\",{\"1\":{\"376\":1}}],[\"及关联的部门的名称\",{\"1\":{\"603\":1}}],[\"及相关的安全方案\",{\"1\":{\"570\":1}}],[\"及\",{\"1\":{\"466\":1,\"470\":1}}],[\"宕机时选举\",{\"0\":{\"1204\":1}}],[\"宕机两种情况下进行选举\",{\"1\":{\"1202\":1}}],[\"宕机\",{\"1\":{\"466\":1,\"658\":1,\"1263\":1,\"1582\":1}}],[\"宕机数据可能丢失\",{\"1\":{\"450\":1}}],[\"辅助工具\",{\"1\":{\"1347\":1}}],[\"辅助角色\",{\"1\":{\"1216\":1}}],[\"辅助实现min\",{\"1\":{\"937\":1}}],[\"辅助解决记录锁效率不及的问题\",{\"1\":{\"560\":1}}],[\"辅助\",{\"1\":{\"466\":1}}],[\"尽可能减小应用程序的停顿时间\",{\"1\":{\"1525\":1}}],[\"尽快把错误暴露给应用程序\",{\"1\":{\"1415\":1}}],[\"尽快完成程序的运算任务\",{\"1\":{\"175\":1}}],[\"尽最大努力交付\",{\"1\":{\"1408\":1}}],[\"尽管德鲁兹信仰最初是从伊斯兰教什叶派支系\",{\"1\":{\"1767\":1}}],[\"尽管正统伊斯兰教规定容忍犹太教和基督教等其他一神信仰\",{\"1\":{\"1767\":1}}],[\"尽管堆外内存有这些优势\",{\"1\":{\"1136\":1}}],[\"尽管可以单独用跳表或字典实现有序集合\",{\"1\":{\"900\":1}}],[\"尽管能保证有序\",{\"1\":{\"462\":1}}],[\"尽量弥补损失\",{\"1\":{\"1737\":1}}],[\"尽量减少超售或座位空置的情况是整个机票分销环节非常难的一部分\",{\"1\":{\"1734\":1}}],[\"尽量用预编译机制\",{\"1\":{\"1539\":1}}],[\"尽量避免发送\",{\"1\":{\"1400\":1}}],[\"尽量不混用\",{\"1\":{\"988\":1}}],[\"尽量不要使用\",{\"1\":{\"615\":1}}],[\"尽量规避\",{\"1\":{\"617\":1}}],[\"尽量使用异步io\",{\"1\":{\"1486\":1}}],[\"尽量使用各种工具类\",{\"1\":{\"1244\":1}}],[\"尽量使用联合索引\",{\"1\":{\"708\":1}}],[\"尽量使用覆盖索引\",{\"1\":{\"616\":1,\"1548\":1}}],[\"尽量使用\",{\"1\":{\"615\":1}}],[\"尽量选择顺序插入\",{\"1\":{\"615\":1}}],[\"尽量降低主键的长度\",{\"1\":{\"615\":1}}],[\"尽量均衡的放置分区到消费者上面\",{\"1\":{\"497\":1}}],[\"幂等性只能保证在单分区单会话内消息不重复\",{\"1\":{\"461\":2}}],[\"幂等性原理\",{\"1\":{\"461\":1}}],[\"幂等性\",{\"1\":{\"461\":2,\"1374\":1}}],[\"幂等性和事务来实现\",{\"1\":{\"461\":1}}],[\"响应比\",{\"1\":{\"1470\":1}}],[\"响应硬件中断时发生\",{\"1\":{\"1454\":1}}],[\"响应过期后\",{\"1\":{\"1400\":1}}],[\"响应报文\",{\"1\":{\"1394\":1}}],[\"响应客户端\",{\"1\":{\"1281\":1,\"1605\":1,\"1620\":1}}],[\"响应时间是衡量调度算法好坏的主要标准\",{\"1\":{\"1470\":1}}],[\"响应时间\",{\"1\":{\"1470\":1}}],[\"响应时间等\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"响应时间增加\",{\"1\":{\"1279\":1}}],[\"响应时间上的损失\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"响应时间取决于最慢的机器\",{\"1\":{\"460\":1}}],[\"响应的首字节是\",{\"1\":{\"846\":5}}],[\"响应\",{\"1\":{\"461\":1,\"1400\":1,\"1425\":1,\"1488\":2}}],[\"响应给客户端\",{\"1\":{\"101\":1}}],[\"批量获取\",{\"1\":{\"1622\":1}}],[\"批量读取数据时\",{\"1\":{\"1448\":1}}],[\"批量插入速度\",{\"1\":{\"681\":1}}],[\"批量插入数据\",{\"1\":{\"614\":1}}],[\"批量添加数据\",{\"1\":{\"578\":1}}],[\"批量输出到数据库\",{\"1\":{\"542\":1}}],[\"批量查询中转联程的av情况\",{\"1\":{\"1363\":1}}],[\"批量查询\",{\"1\":{\"48\":1}}],[\"批处理执行器\",{\"1\":{\"542\":1}}],[\"批次大小\",{\"1\":{\"459\":1}}],[\"批记录的创建时间\",{\"1\":{\"450\":1}}],[\"安逸舒适的三线城市\",{\"1\":{\"1816\":1}}],[\"安定下来\",{\"1\":{\"1786\":1,\"1815\":1}}],[\"安提阿或西叙利亚\",{\"1\":{\"1762\":1}}],[\"安装教程\",{\"1\":{\"1867\":1}}],[\"安装好并将bin目录加入系统环境变量\",{\"1\":{\"1867\":1}}],[\"安装\",{\"1\":{\"1791\":1}}],[\"安装完成后\",{\"1\":{\"1217\":1}}],[\"安装过程略\",{\"1\":{\"1217\":1,\"1225\":1}}],[\"安装配置\",{\"0\":{\"1217\":1,\"1225\":1}}],[\"安装搭建\",{\"0\":{\"1163\":1}}],[\"安装使用\",{\"0\":{\"444\":1}}],[\"安全描述\",{\"1\":{\"1862\":1}}],[\"安全认证\",{\"1\":{\"1540\":1,\"1621\":1}}],[\"安全协议\",{\"1\":{\"1401\":1}}],[\"安全清理工作\",{\"1\":{\"1114\":1}}],[\"安全访问\",{\"1\":{\"1114\":1}}],[\"安全审计\",{\"0\":{\"1097\":1}}],[\"安全校验\",{\"1\":{\"1095\":1}}],[\"安全的企业级消息通信\",{\"1\":{\"432\":1}}],[\"安全便携高效的\",{\"1\":{\"404\":1}}],[\"安全策略处理\",{\"1\":{\"188\":1}}],[\"安全点通常是指一组特定的指令位置\",{\"1\":{\"172\":1}}],[\"安全性得到保证\",{\"1\":{\"1404\":1}}],[\"安全性最高\",{\"1\":{\"916\":1,\"1577\":1}}],[\"安全性\",{\"1\":{\"64\":1}}],[\"安全性高\",{\"1\":{\"22\":1,\"409\":1}}],[\"安全等\",{\"1\":{\"31\":1}}],[\"安全\",{\"1\":{\"26\":1,\"228\":1,\"625\":1,\"1134\":1}}],[\"离职回学校备战秋招\",{\"1\":{\"1815\":1}}],[\"离入职还有两天\",{\"1\":{\"1772\":1}}],[\"离港控制系统\",{\"1\":{\"1723\":1}}],[\"离开羊湖\",{\"1\":{\"1843\":1}}],[\"离开组播组的主机\",{\"1\":{\"1429\":1}}],[\"离开了\",{\"1\":{\"376\":1}}],[\"离线的计算会越来越慢\",{\"1\":{\"442\":1}}],[\"几个流媒体平台的视频画质压缩得有多狠\",{\"1\":{\"1803\":1}}],[\"几十mb\",{\"1\":{\"1434\":1}}],[\"几十kb\",{\"1\":{\"1434\":1}}],[\"几百kb\",{\"1\":{\"1434\":1}}],[\"几千的级别后\",{\"1\":{\"435\":1}}],[\"几乎全程都在车上赶路\",{\"1\":{\"1845\":1}}],[\"几乎是一点点往下滑到底的\",{\"1\":{\"1843\":1}}],[\"几乎都是从atpco这家公司获取国际运价数据\",{\"1\":{\"1732\":1}}],[\"几乎所有的版本控制系统都以某种形式支持分支\",{\"1\":{\"1331\":1}}],[\"几乎所有常用语言\",{\"1\":{\"435\":1}}],[\"几乎无消耗\",{\"1\":{\"802\":1}}],[\"几乎无状态的\",{\"1\":{\"427\":1}}],[\"几乎不能正常工作\",{\"1\":{\"782\":1}}],[\"几乎每种锁在实现上都会分共享锁\",{\"1\":{\"549\":1}}],[\"几乎可以把所有联网物品和外部连接起来\",{\"1\":{\"407\":1}}],[\"几乎可以兼容所有的数据类型\",{\"1\":{\"31\":1}}],[\"几乎涵盖了\",{\"1\":{\"376\":1}}],[\"十月\",{\"1\":{\"1825\":1}}],[\"十大块\",{\"1\":{\"1526\":1}}],[\"十字链表\",{\"1\":{\"1388\":1}}],[\"十万级\",{\"1\":{\"435\":2}}],[\"十分简单\",{\"1\":{\"384\":1}}],[\"｜\",{\"1\":{\"435\":1,\"1174\":3,\"1175\":1}}],[\"服从jms规范\",{\"1\":{\"434\":1}}],[\"服务质量\",{\"1\":{\"1862\":1}}],[\"服务种类也不同\",{\"1\":{\"1735\":1}}],[\"服务管理\",{\"1\":{\"1695\":1}}],[\"服务仍然是可用的\",{\"1\":{\"1638\":1}}],[\"服务限流\",{\"0\":{\"1637\":1}}],[\"服务卡机\",{\"1\":{\"1636\":1}}],[\"服务调用\",{\"1\":{\"1636\":1}}],[\"服务节点\",{\"1\":{\"1628\":1}}],[\"服务提供端\",{\"1\":{\"1623\":1}}],[\"服务提供者和消费者只在启动时与注册中心交互\",{\"1\":{\"1617\":1}}],[\"服务消费端\",{\"1\":{\"1623\":1}}],[\"服务的某个功能\",{\"1\":{\"1636\":1}}],[\"服务的读写性能\",{\"1\":{\"1590\":1}}],[\"服务的id\",{\"1\":{\"1154\":1}}],[\"服务单一职责\",{\"1\":{\"1375\":1}}],[\"服务里缓存了很多前缀树\",{\"1\":{\"1361\":1}}],[\"服务启动时\",{\"1\":{\"1361\":1}}],[\"服务治理平台及七层负载均衡网关服务\",{\"1\":{\"1302\":1}}],[\"服务一直可用\",{\"1\":{\"1206\":1}}],[\"服务之间的关联\",{\"1\":{\"1196\":1}}],[\"服务了\",{\"1\":{\"1152\":1}}],[\"服务\",{\"1\":{\"1147\":1,\"1217\":1}}],[\"服务层直接按行进行累加\",{\"1\":{\"619\":1}}],[\"服务层对于返回的每一层\",{\"1\":{\"619\":1}}],[\"服务层判断是否为null\",{\"1\":{\"619\":1}}],[\"服务层拿到主键后\",{\"1\":{\"619\":1}}],[\"服务层\",{\"1\":{\"570\":1}}],[\"服务名即\",{\"1\":{\"92\":1}}],[\"服务发现\",{\"1\":{\"91\":1,\"1406\":1,\"1623\":1}}],[\"服务注册\",{\"1\":{\"91\":1}}],[\"服务过载时可以通过添加数据节点进行扩容\",{\"1\":{\"33\":1}}],[\"服务端执行完后通过网络把结果再传输回来\",{\"1\":{\"1623\":1}}],[\"服务端监听和传送数据使用的是两个socket\",{\"1\":{\"1461\":1}}],[\"服务端处于\",{\"1\":{\"1409\":1}}],[\"服务端重传\",{\"1\":{\"1409\":1}}],[\"服务端没有中间状态给客户端来阻止旧连接\",{\"1\":{\"1409\":1}}],[\"服务端收到第三次握手的\",{\"1\":{\"1414\":1}}],[\"服务端收到客户端的\",{\"1\":{\"1410\":1,\"1414\":1}}],[\"服务端收到客户端应答报文后\",{\"1\":{\"1409\":1}}],[\"服务端收到了\",{\"1\":{\"1410\":1}}],[\"服务端收到该报文后\",{\"1\":{\"1410\":1}}],[\"服务端收到请求后验证\",{\"1\":{\"26\":1}}],[\"服务端接收到客户端的\",{\"1\":{\"1409\":1}}],[\"服务端的钩子脚本\",{\"1\":{\"1349\":1}}],[\"服务端的启动流程\",{\"1\":{\"867\":1}}],[\"服务端钩子\",{\"1\":{\"1345\":1}}],[\"服务端缓存\",{\"0\":{\"1252\":1}}],[\"服务端将注册的监听事件添加进内部维护的注册监听器列表中\",{\"1\":{\"1190\":1}}],[\"服务端类型\",{\"0\":{\"1131\":1}}],[\"服务端开启\",{\"1\":{\"1125\":1}}],[\"服务端开启非阻塞模式\",{\"1\":{\"783\":1}}],[\"服务端使用\",{\"1\":{\"854\":2}}],[\"服务端模板\",{\"1\":{\"786\":1}}],[\"服务端复用线程池里的线程处理请求\",{\"1\":{\"764\":1}}],[\"服务端都要新开一个线程去处理\",{\"1\":{\"763\":1}}],[\"服务端工具实现的类似于tcp\",{\"1\":{\"570\":1}}],[\"服务端程序\",{\"1\":{\"569\":1}}],[\"服务端一般使用循环\",{\"1\":{\"343\":1}}],[\"服务端编译器\",{\"1\":{\"269\":1}}],[\"服务端编译器c2\",{\"1\":{\"267\":1}}],[\"服务端\",{\"0\":{\"90\":1,\"811\":1},\"1\":{\"343\":1,\"782\":1,\"789\":1,\"792\":1,\"842\":1,\"843\":1,\"1400\":1,\"1402\":2,\"1415\":1,\"1623\":2}}],[\"服务端示例\",{\"1\":{\"89\":1}}],[\"服务端验证客户端身份\",{\"1\":{\"26\":1}}],[\"服务端为每个客户端创建一个\",{\"1\":{\"17\":1}}],[\"服务器查询指定域名的指定记录\",{\"1\":{\"1792\":1}}],[\"服务器即可\",{\"1\":{\"1792\":1}}],[\"服务器是必不可能买的\",{\"1\":{\"1792\":1}}],[\"服务器是基于\",{\"1\":{\"1572\":1}}],[\"服务器压力剧增\",{\"1\":{\"1636\":1}}],[\"服务器用新的\",{\"1\":{\"1577\":1}}],[\"服务器会将重写缓冲区中的所有内容追加到新\",{\"1\":{\"1577\":1}}],[\"服务器会维护一个\",{\"1\":{\"1577\":1}}],[\"服务器会解析查询并创建相应的内部解析树\",{\"1\":{\"570\":1}}],[\"服务器端不断地从\",{\"1\":{\"1487\":1}}],[\"服务器端只会从\",{\"1\":{\"1487\":1}}],[\"服务器端成功接受连接时触发\",{\"1\":{\"785\":1}}],[\"服务器的主进程负责监听客户的连接\",{\"1\":{\"1487\":1}}],[\"服务器的基本步骤\",{\"1\":{\"863\":1}}],[\"服务器以及\",{\"1\":{\"1426\":1}}],[\"服务器响应\",{\"1\":{\"1426\":2}}],[\"服务器回应客户端本次数据的格式\",{\"1\":{\"1398\":1}}],[\"服务器域名\",{\"1\":{\"1398\":1}}],[\"服务器忙\",{\"1\":{\"1398\":1}}],[\"服务器内部错误\",{\"1\":{\"1398\":1}}],[\"服务器处理出错\",{\"1\":{\"1398\":1}}],[\"服务器处理请求时可能发生多次字符集转换\",{\"1\":{\"674\":1}}],[\"服务器也可以在共享状态上达成一致\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"服务器也会为安全接入的每个客户端验证它所具有的操作权限\",{\"1\":{\"570\":1}}],[\"服务器来执行\",{\"1\":{\"1187\":1}}],[\"服务器每次处理命令请求前\",{\"1\":{\"979\":1}}],[\"服务器每执行完一个写命令\",{\"1\":{\"916\":1}}],[\"服务器停机等场景下\",{\"1\":{\"961\":1}}],[\"服务器根据是否订阅频道\",{\"1\":{\"953\":1}}],[\"服务器根据redisobject中的encoding属性检查操作的具体实现\",{\"1\":{\"901\":1}}],[\"服务器根据redisobject中的type属性检查操作是否适用\",{\"1\":{\"901\":1}}],[\"服务器一层层解析数据包\",{\"1\":{\"1394\":1}}],[\"服务器一般状态仍保存在redisserver中\",{\"1\":{\"939\":1}}],[\"服务器一直处于阻塞状态\",{\"1\":{\"911\":1}}],[\"服务器运行id\",{\"1\":{\"935\":1}}],[\"服务器通过命令回复处理器\",{\"1\":{\"926\":1}}],[\"服务器通过api和存储引擎进行通信\",{\"1\":{\"570\":1}}],[\"服务器读取套接字中的请求\",{\"1\":{\"926\":1}}],[\"服务器\",{\"0\":{\"925\":1},\"1\":{\"1300\":1,\"1366\":1,\"1867\":1,\"1873\":1}}],[\"服务器载入aof文件时\",{\"1\":{\"924\":1}}],[\"服务器初始化时创建负责执行lua脚本的伪客户端\",{\"1\":{\"924\":1}}],[\"服务器使用两种模式限制输出缓冲区大小\",{\"1\":{\"923\":1}}],[\"服务器将摘要和本地资源作比较\",{\"1\":{\"1400\":1}}],[\"服务器将拒绝执行事务\",{\"1\":{\"960\":1}}],[\"服务器将遍历客户端的事务队列\",{\"1\":{\"959\":1}}],[\"服务器将所有时间事件放在一个无序链表\",{\"1\":{\"920\":1}}],[\"服务器将先读后写\",{\"1\":{\"919\":1}}],[\"服务器就会调用相应的处理器来处理事件\",{\"1\":{\"920\":1}}],[\"服务器为时间事件创建的全局唯一id\",{\"1\":{\"920\":1}}],[\"服务器与客户端通信\",{\"1\":{\"918\":1}}],[\"服务器在60秒之内\",{\"1\":{\"912\":1}}],[\"服务器在300秒之内\",{\"1\":{\"912\":1}}],[\"服务器在900秒之内\",{\"1\":{\"912\":1}}],[\"服务器启动时自动载入\",{\"1\":{\"911\":1}}],[\"服务器配置的notify\",{\"1\":{\"909\":1}}],[\"服务器中的每个数据库都由一个redis\",{\"1\":{\"907\":1}}],[\"服务器目前正在执行bgsave命令或者bgrewriteaof命令\",{\"1\":{\"883\":2}}],[\"服务器目前没有在执行bgsave命令或者bgrewriteaof命令\",{\"1\":{\"883\":1}}],[\"服务器生成的日志文件以二进制格式保存\",{\"1\":{\"675\":1}}],[\"服务器级别\",{\"1\":{\"674\":1}}],[\"服务器日志文件\",{\"1\":{\"673\":1}}],[\"服务器还会查询内部的缓存\",{\"1\":{\"570\":1}}],[\"服务器聚合在一起\",{\"1\":{\"412\":1}}],[\"服务器重启\",{\"1\":{\"22\":1}}],[\"服务器不需要存储\",{\"1\":{\"20\":1}}],[\"服务器管理\",{\"1\":{\"17\":1}}],[\"稳定性测试\",{\"1\":{\"1639\":1}}],[\"稳定\",{\"1\":{\"432\":1}}],[\"稳定版本号见\",{\"1\":{\"39\":1}}],[\"亿级的消息堆积能力\",{\"1\":{\"431\":1}}],[\"丰富的消息拉取模型\",{\"1\":{\"431\":1}}],[\"零拷贝适合小文件传输\",{\"1\":{\"802\":1}}],[\"零拷贝\",{\"0\":{\"798\":1,\"802\":1,\"830\":1,\"1486\":1},\"1\":{\"802\":2,\"825\":1}}],[\"零拷贝技术不允许对数据内容做进一步的加工\",{\"1\":{\"1486\":1}}],[\"零拷贝技术主要关注数据传输和复制的优化\",{\"1\":{\"802\":1}}],[\"零拷贝技术\",{\"1\":{\"431\":1,\"478\":1}}],[\"零值\",{\"1\":{\"251\":1}}],[\"海量消息堆积\",{\"1\":{\"428\":1}}],[\"低配版3￥\",{\"1\":{\"1809\":1}}],[\"低位补0\",{\"1\":{\"1664\":1}}],[\"低存储空间\",{\"1\":{\"1542\":1}}],[\"低信息密度的数据中挖掘出高质量的结果\",{\"1\":{\"1212\":1}}],[\"低频访问缓存页\",{\"1\":{\"732\":1}}],[\"低\",{\"1\":{\"681\":3,\"1204\":1}}],[\"低四位\",{\"1\":{\"564\":1}}],[\"低3位表示压缩类型\",{\"1\":{\"474\":1}}],[\"低延时和高可靠等特性近年来已经也被越来越多的国内企业使用\",{\"1\":{\"426\":1}}],[\"低停顿\",{\"1\":{\"176\":1,\"1525\":1}}],[\"软链接仍在\",{\"1\":{\"1474\":1}}],[\"软链接\",{\"1\":{\"1474\":2}}],[\"软中断\",{\"1\":{\"1395\":1,\"1481\":1}}],[\"软状态是指允许系统存在中间状态\",{\"1\":{\"1207\":1}}],[\"软状态\",{\"1\":{\"1207\":1,\"1279\":1,\"1618\":1}}],[\"软负载均衡等等\",{\"1\":{\"1162\":1}}],[\"软件厂都能巴巴得往上赶\",{\"1\":{\"1819\":1}}],[\"软件的体验\",{\"1\":{\"1810\":1}}],[\"软件管理\",{\"0\":{\"1694\":1}}],[\"软件项目的构建被切分成多个子项目\",{\"1\":{\"1641\":1}}],[\"软件概念\",{\"1\":{\"1641\":1}}],[\"软件32\",{\"1\":{\"1433\":1}}],[\"软件工程\",{\"0\":{\"1641\":1},\"1\":{\"705\":3}}],[\"软件\",{\"1\":{\"703\":1}}],[\"软件基金会在\",{\"1\":{\"1214\":1}}],[\"软件基金会开发的一个开源分布式流处理平台\",{\"1\":{\"429\":1}}],[\"软件基金会\",{\"1\":{\"426\":1}}],[\"软引用soft\",{\"1\":{\"1522\":1}}],[\"软引用增加了一个时间戳标记\",{\"1\":{\"192\":1}}],[\"软引用用于描述一些还有用但不是必需的对象\",{\"1\":{\"192\":1}}],[\"软引用\",{\"0\":{\"192\":1},\"1\":{\"183\":3,\"533\":1}}],[\"拒签\",{\"1\":{\"422\":2}}],[\"拒绝策略\",{\"0\":{\"1109\":1},\"1\":{\"332\":1,\"1106\":1,\"1113\":1,\"1511\":1}}],[\"拒绝服务\",{\"1\":{\"332\":1}}],[\"签约进度\",{\"1\":{\"1828\":1}}],[\"签转\",{\"1\":{\"1738\":1}}],[\"签收\",{\"1\":{\"422\":1}}],[\"签名并验证\",{\"1\":{\"1329\":1}}],[\"签名\",{\"1\":{\"240\":1}}],[\"倍\",{\"1\":{\"419\":1,\"1434\":2}}],[\"匹配类型\",{\"1\":{\"1712\":1}}],[\"匹配函数列表\",{\"1\":{\"1712\":1}}],[\"匹配模式可以以\",{\"1\":{\"1330\":2}}],[\"匹配范围区间\",{\"1\":{\"1330\":1}}],[\"匹配一个任意字符\",{\"1\":{\"1330\":1}}],[\"匹配一个单词\",{\"1\":{\"414\":1,\"1628\":1}}],[\"匹配方括号中的单个字符\",{\"1\":{\"1330\":1}}],[\"匹配该映射规则关联的策略\",{\"1\":{\"1302\":1}}],[\"匹配映射规则\",{\"1\":{\"1302\":1}}],[\"匹配站点域名\",{\"1\":{\"1302\":1}}],[\"匹配封装在一起\",{\"1\":{\"1019\":1}}],[\"匹配\",{\"1\":{\"991\":1,\"1330\":1}}],[\"匹配任意个字符\",{\"1\":{\"583\":1}}],[\"匹配单个字符\",{\"1\":{\"583\":1}}],[\"匹配零个或多个任意字符\",{\"1\":{\"1330\":1}}],[\"匹配零\",{\"1\":{\"414\":1,\"1628\":1}}],[\"匹配时就会路由到对应的消息队列中\",{\"1\":{\"414\":1,\"1628\":1}}],[\"绑定线程事务\",{\"1\":{\"1045\":1}}],[\"绑定完成后\",{\"1\":{\"867\":1}}],[\"绑定端口\",{\"1\":{\"863\":1}}],[\"绑定的是同一个线程\",{\"1\":{\"818\":1}}],[\"绑定的事件类型有四个\",{\"1\":{\"785\":1}}],[\"绑定监听端口\",{\"1\":{\"782\":1,\"783\":1}}],[\"绑定关联\",{\"1\":{\"414\":1,\"1628\":1}}],[\"绑定\",{\"0\":{\"818\":1},\"1\":{\"413\":1,\"1629\":1}}],[\"绑定原理\",{\"0\":{\"383\":1}}],[\"彼此之间互不影响\",{\"1\":{\"413\":1}}],[\"彼此配合\",{\"1\":{\"33\":1}}],[\"灵活有序\",{\"1\":{\"1622\":1}}],[\"灵活性和扩展性更好\",{\"1\":{\"1543\":1}}],[\"灵活性好\",{\"1\":{\"355\":1}}],[\"灵活\",{\"1\":{\"1404\":1}}],[\"灵活的内存分配\",{\"1\":{\"825\":1}}],[\"灵活的路由\",{\"1\":{\"412\":1}}],[\"灵活可扩展性\",{\"1\":{\"428\":1}}],[\"形式写在\",{\"1\":{\"1405\":1}}],[\"形式3\",{\"1\":{\"1073\":1}}],[\"形式2\",{\"1\":{\"1073\":1}}],[\"形式1\",{\"1\":{\"1073\":1}}],[\"形式如\",{\"1\":{\"408\":1}}],[\"形成candidate\",{\"1\":{\"1860\":1}}],[\"形成了现在的机票分销业务形态\",{\"1\":{\"1721\":1}}],[\"形成缓存体系\",{\"1\":{\"1434\":1}}],[\"形成一个闭环\",{\"1\":{\"1599\":1}}],[\"形成一个新的查询结果\",{\"1\":{\"606\":1}}],[\"形成一个逻辑\",{\"1\":{\"412\":1}}],[\"形成查询语法树\",{\"1\":{\"53\":1}}],[\"至今\",{\"1\":{\"1758\":1}}],[\"至少两个线程\",{\"1\":{\"794\":1}}],[\"至少一次\",{\"1\":{\"407\":1,\"461\":2}}],[\"至于分支\",{\"1\":{\"1332\":1}}],[\"至于具体选择\",{\"1\":{\"1206\":1}}],[\"至于新增\",{\"1\":{\"544\":1}}],[\"至于多分区有序消费可以由具体的消费者去实现\",{\"1\":{\"462\":1}}],[\"至\",{\"1\":{\"456\":1,\"1799\":1}}],[\"至多一次\",{\"1\":{\"407\":1}}],[\"至此客户端也完成连接的关闭\",{\"1\":{\"1410\":1}}],[\"至此服务端已经完成连接的关闭\",{\"1\":{\"1410\":1}}],[\"至此变基完成\",{\"1\":{\"1337\":1}}],[\"至此完成了\",{\"1\":{\"867\":1}}],[\"至此完成了查询\",{\"1\":{\"544\":1}}],[\"至此也完成了配置文件的解析工作\",{\"1\":{\"541\":1}}],[\"至此编译过程宣告结束\",{\"1\":{\"264\":1}}],[\"至此\",{\"1\":{\"101\":1,\"1155\":1,\"1599\":1,\"1726\":1}}],[\"遗嘱机制\",{\"1\":{\"407\":1}}],[\"遗言机制\",{\"1\":{\"407\":1}}],[\"遗留的同步安全集合\",{\"1\":{\"162\":1}}],[\"占座\",{\"1\":{\"1722\":1}}],[\"占空间\",{\"1\":{\"1556\":1}}],[\"占8byte长的无符号整数\",{\"1\":{\"913\":1}}],[\"占8字节\",{\"1\":{\"691\":1}}],[\"占1\",{\"1\":{\"913\":1}}],[\"占1byte\",{\"1\":{\"913\":2}}],[\"占1byteredis\",{\"1\":{\"913\":1}}],[\"占1字节\",{\"1\":{\"892\":1}}],[\"占4byte\",{\"1\":{\"913\":1}}],[\"占5byte\",{\"1\":{\"913\":1}}],[\"占56字节\",{\"1\":{\"691\":1}}],[\"占38字节\",{\"1\":{\"691\":1}}],[\"占用cpu\",{\"1\":{\"1481\":1}}],[\"占用了\",{\"1\":{\"1448\":1}}],[\"占用空间小\",{\"1\":{\"738\":1,\"1555\":1}}],[\"占用空间大小\",{\"1\":{\"688\":1}}],[\"占用空间大\",{\"1\":{\"615\":1}}],[\"占用带宽小\",{\"1\":{\"407\":1}}],[\"占位符形式\",{\"1\":{\"1244\":1}}],[\"占位符\",{\"1\":{\"583\":1}}],[\"占据了很大优势\",{\"1\":{\"376\":1}}],[\"架构等特性使得开发者能够更专注于应用的开发而不必过多关注基础设施的维护\",{\"1\":{\"1792\":1}}],[\"架构设计\",{\"1\":{\"1641\":1}}],[\"架构设计追求的是\",{\"1\":{\"1207\":1}}],[\"架构的\",{\"1\":{\"1446\":1}}],[\"架构上是\",{\"1\":{\"1200\":1}}],[\"架构\",{\"0\":{\"405\":1,\"1540\":1},\"1\":{\"929\":1}}],[\"点了外卖作为明天火车上的中饭\",{\"1\":{\"1847\":1}}],[\"点开即开\",{\"1\":{\"1803\":1}}],[\"点对点\",{\"1\":{\"403\":1,\"1625\":1}}],[\"点击第三方登陆后\",{\"1\":{\"15\":1}}],[\"规模代价平方定律\",{\"1\":{\"1705\":1}}],[\"规整的碰撞指针法\",{\"1\":{\"1521\":1}}],[\"规格参数\",{\"1\":{\"1369\":1}}],[\"规定了单位时间内处理的请求数量\",{\"1\":{\"1637\":1}}],[\"规定\",{\"1\":{\"942\":1}}],[\"规范的\",{\"1\":{\"432\":1}}],[\"规范\",{\"0\":{\"1245\":1},\"1\":{\"403\":1,\"1625\":1}}],[\"规则复杂\",{\"1\":{\"1752\":1}}],[\"规则的优化后会生成一个执行计划\",{\"1\":{\"727\":1}}],[\"规则规定了对共享变量的写操作对其它线程的读操作可见\",{\"1\":{\"143\":1}}],[\"规则\",{\"0\":{\"1330\":1},\"1\":{\"125\":1,\"143\":5,\"998\":1,\"1732\":1,\"1752\":1}}],[\"消除了\",{\"1\":{\"1633\":1}}],[\"消耗性能\",{\"1\":{\"1435\":1}}],[\"消耗缓存空间\",{\"1\":{\"1259\":1}}],[\"消耗\",{\"1\":{\"1249\":3}}],[\"消费端将消费过程和提交\",{\"1\":{\"499\":1}}],[\"消费参数\",{\"0\":{\"485\":1}}],[\"消费流程\",{\"1\":{\"484\":1}}],[\"消费规则\",{\"0\":{\"481\":1}}],[\"消费方式\",{\"0\":{\"480\":1},\"1\":{\"480\":1}}],[\"消费数据都只针对\",{\"1\":{\"443\":1}}],[\"消费进度偏移量\",{\"1\":{\"427\":1}}],[\"消费者负责处理消息\",{\"1\":{\"1625\":1}}],[\"消费者\",{\"1\":{\"1625\":1}}],[\"消费者线程阻塞\",{\"1\":{\"1499\":1}}],[\"消费者模型\",{\"1\":{\"1460\":1,\"1499\":1}}],[\"消费者基于\",{\"1\":{\"1374\":1}}],[\"消费者事务\",{\"0\":{\"499\":1}}],[\"消费者数来决定每个消费者应消费几个分区\",{\"1\":{\"495\":1}}],[\"消费者即\",{\"1\":{\"495\":1}}],[\"消费者离开当前所属的\",{\"1\":{\"494\":1}}],[\"消费者获取服务器端一批消息最大的字节数\",{\"1\":{\"485\":1}}],[\"消费者获取服务器端一批消息最小的字节数\",{\"1\":{\"485\":1}}],[\"消费者处理消息的最大时长\",{\"1\":{\"485\":1}}],[\"消费者和\",{\"1\":{\"485\":2}}],[\"消费者向\",{\"1\":{\"485\":1}}],[\"消费者自动周期性地向服务器提交偏移量\",{\"1\":{\"485\":1}}],[\"消费者仅可消费各分区\",{\"1\":{\"471\":1}}],[\"消费者在消费消息时\",{\"1\":{\"462\":1}}],[\"消费者连接到broker\",{\"1\":{\"446\":1}}],[\"消费者从消息服务器拉取信息并将其输入用户应用程序\",{\"1\":{\"427\":1}}],[\"消费者组第一次消费\",{\"1\":{\"493\":1}}],[\"消费者组选择的方式是\",{\"1\":{\"483\":1}}],[\"消费者组之间互不影响\",{\"1\":{\"443\":1,\"481\":1}}],[\"消费者组内每个消费者负责消费不同分区的数据\",{\"1\":{\"443\":1,\"481\":1}}],[\"消费者组\",{\"1\":{\"427\":1,\"443\":1,\"481\":1}}],[\"消费者拒签消息\",{\"1\":{\"425\":1}}],[\"消费者才拿到这个进行消费\",{\"1\":{\"423\":1}}],[\"消费者没有正确消费消息的情况\",{\"1\":{\"401\":1,\"1625\":1}}],[\"消息补偿机制\",{\"1\":{\"1629\":1}}],[\"消息传输\",{\"1\":{\"1629\":1}}],[\"消息传递顺序性等问题\",{\"1\":{\"401\":1,\"1625\":1}}],[\"消息中间件\",{\"1\":{\"1628\":1}}],[\"消息中间件处理节点\",{\"1\":{\"430\":1}}],[\"消息拷贝开销大\",{\"1\":{\"1458\":1}}],[\"消息具有格式化结构\",{\"1\":{\"1458\":1}}],[\"消息可能会被操作系统分组成多个\",{\"1\":{\"1417\":1}}],[\"消息可靠性\",{\"1\":{\"435\":1}}],[\"消息可靠性较低的概率丢失数据\",{\"1\":{\"410\":1}}],[\"消息积压\",{\"1\":{\"1374\":1}}],[\"消息生产端给每个消息注入一个唯一\",{\"1\":{\"1374\":1}}],[\"消息生产者\",{\"1\":{\"430\":1,\"443\":1}}],[\"消息正文由clustermsgdatapublish结构表示\",{\"1\":{\"949\":1}}],[\"消息正文由clustermsgdatafail结构表示\",{\"1\":{\"949\":1}}],[\"消息正文由clustermsgdata结构表示\",{\"1\":{\"949\":1}}],[\"消息正文由两个clustermsgdatagossip结构组成\",{\"1\":{\"949\":1}}],[\"消息正文组成\",{\"1\":{\"949\":1}}],[\"消息正文\",{\"1\":{\"848\":1}}],[\"消息正文到底采用哪种序列化反序列化方式\",{\"1\":{\"848\":1}}],[\"消息三部分\",{\"1\":{\"729\":1}}],[\"消息键\",{\"1\":{\"474\":1}}],[\"消息的发送方式有两种\",{\"1\":{\"480\":1}}],[\"消息的起始偏移量来自于最新的\",{\"1\":{\"476\":1}}],[\"消息的属性\",{\"1\":{\"474\":1}}],[\"消息的大小\",{\"1\":{\"474\":1}}],[\"消息的唯一id\",{\"1\":{\"420\":1}}],[\"消息结构\",{\"0\":{\"474\":1}}],[\"消息延迟\",{\"1\":{\"435\":1}}],[\"消息推拉模式\",{\"1\":{\"435\":1}}],[\"消息批量操作\",{\"1\":{\"435\":1}}],[\"消息接收\",{\"1\":{\"434\":1}}],[\"消息持久化\",{\"1\":{\"432\":1}}],[\"消息优先级\",{\"1\":{\"432\":1}}],[\"消息组通信\",{\"1\":{\"432\":1}}],[\"消息消费者\",{\"1\":{\"430\":1,\"443\":1}}],[\"消息回溯\",{\"1\":{\"428\":1}}],[\"消息过滤\",{\"1\":{\"428\":1}}],[\"消息存储中心\",{\"1\":{\"427\":1}}],[\"消息服务器\",{\"1\":{\"427\":1}}],[\"消息达到超时时间未被消费\",{\"1\":{\"425\":1}}],[\"消息被拒\",{\"1\":{\"1629\":1}}],[\"消息被发送出去后\",{\"1\":{\"423\":1}}],[\"消息被消费者收到\",{\"1\":{\"422\":1}}],[\"消息不会被\",{\"1\":{\"422\":1}}],[\"消息只要被\",{\"1\":{\"420\":1}}],[\"消息是否成功收到\",{\"1\":{\"420\":1}}],[\"消息从\",{\"1\":{\"420\":1,\"421\":1}}],[\"消息确认机制\",{\"1\":{\"1374\":1}}],[\"消息确认\",{\"0\":{\"419\":1}}],[\"消息处理完成\",{\"1\":{\"418\":1}}],[\"消息内容\",{\"1\":{\"418\":1}}],[\"消息发送成功\",{\"1\":{\"456\":1}}],[\"消息发送异常将自动重试\",{\"1\":{\"450\":1}}],[\"消息发送完成\",{\"1\":{\"418\":1}}],[\"消息发布完全依赖底层tcp\",{\"1\":{\"407\":1}}],[\"消息发布者只管把消息发布到\",{\"1\":{\"396\":1}}],[\"消息投递队列失败的回调\",{\"1\":{\"417\":1}}],[\"消息到达\",{\"1\":{\"417\":1}}],[\"消息体\",{\"1\":{\"413\":1,\"474\":1,\"1628\":1}}],[\"消息头记录消息发送者本身的一些信息\",{\"1\":{\"949\":1}}],[\"消息头+消息体\",{\"1\":{\"418\":1}}],[\"消息头\",{\"1\":{\"413\":1,\"1628\":1}}],[\"消息集群\",{\"1\":{\"412\":1}}],[\"消息在到达队列之前\",{\"1\":{\"412\":1}}],[\"消息\",{\"0\":{\"949\":1},\"1\":{\"406\":1,\"410\":1,\"413\":1,\"461\":1,\"1628\":1,\"1629\":1}}],[\"消息模型\",{\"1\":{\"403\":1,\"1625\":1,\"1626\":1}}],[\"消息格式版本号\",{\"1\":{\"474\":1}}],[\"消息格式\",{\"1\":{\"403\":1,\"404\":1,\"1625\":1}}],[\"消息丢失\",{\"1\":{\"401\":1,\"1374\":1,\"1625\":1}}],[\"消息使用者只管从\",{\"1\":{\"396\":1}}],[\"消息队列解决了管道通信效率低的问题\",{\"1\":{\"1458\":1}}],[\"消息队列监控等等\",{\"1\":{\"432\":1}}],[\"消息队列和相关对象\",{\"1\":{\"413\":1}}],[\"消息队列服务器实体\",{\"1\":{\"413\":1}}],[\"消息队列\",{\"0\":{\"1458\":1,\"1624\":1},\"1\":{\"408\":1,\"1625\":1,\"1626\":1,\"1628\":1}}],[\"消息队列遥测传输\",{\"1\":{\"407\":1}}],[\"消息队列是一种进程间通信或同一进程的不同线程间的通信方式\",{\"1\":{\"396\":1}}],[\"消息队列概述\",{\"0\":{\"395\":1},\"1\":{\"439\":1}}],[\"消息类型\",{\"1\":{\"95\":1,\"849\":1,\"1625\":1}}],[\"消息长度\",{\"1\":{\"95\":1}}],[\"往后的青藏铁路风景一定不会让你失望\",{\"1\":{\"1833\":1}}],[\"往后清理\",{\"1\":{\"154\":1,\"1514\":1}}],[\"往往并发量很高\",{\"1\":{\"1283\":1}}],[\"往上抛出\",{\"1\":{\"391\":1}}],[\"案发现场信息和异常堆栈信息\",{\"1\":{\"391\":1}}],[\"案例\",{\"1\":{\"183\":1}}],[\"浪费资源\",{\"1\":{\"842\":1}}],[\"浪费了\",{\"1\":{\"783\":1}}],[\"浪费大量的磁盘io\",{\"1\":{\"707\":1}}],[\"浪费磁盘空间\",{\"1\":{\"391\":1}}],[\"浪费带宽\",{\"1\":{\"20\":1}}],[\"级联回滚等\",{\"1\":{\"1032\":1}}],[\"级联\",{\"1\":{\"623\":1}}],[\"级联删除\",{\"1\":{\"108\":1}}],[\"级\",{\"1\":{\"410\":1}}],[\"级别\",{\"1\":{\"389\":1}}],[\"忽略null值\",{\"1\":{\"722\":1}}],[\"忽略索引\",{\"1\":{\"705\":1}}],[\"忽略掉日志中的前n行命令\",{\"1\":{\"643\":1,\"675\":1}}],[\"忽略大小写\",{\"1\":{\"529\":1}}],[\"忽略\",{\"1\":{\"388\":1,\"1330\":1}}],[\"忽略结果中的空串\",{\"1\":{\"79\":1}}],[\"$http\",{\"1\":{\"1871\":3}}],[\"$host\",{\"1\":{\"1366\":1}}],[\"$request\",{\"1\":{\"1871\":1}}],[\"$user\",{\"1\":{\"1701\":1}}],[\"$把n的最低位1变成了0\",{\"1\":{\"1665\":1}}],[\"$n\",{\"1\":{\"1665\":2}}],[\"$n$\",{\"1\":{\"828\":1}}],[\"$到$2h\",{\"1\":{\"1387\":1}}],[\"$个\",{\"1\":{\"1387\":1}}],[\"$o\",{\"1\":{\"1385\":6,\"1656\":1}}],[\"$2^i$\",{\"1\":{\"1664\":1}}],[\"$2^n$是为了在确定索引时index\",{\"1\":{\"1494\":1}}],[\"$2^\",{\"1\":{\"1112\":1}}],[\"$proxy0\",{\"1\":{\"1015\":2}}],[\"$<128$\",{\"1\":{\"976\":1}}],[\"$<=32bytes$\",{\"1\":{\"896\":1}}],[\"$len\",{\"1\":{\"975\":1}}],[\"$bit\",{\"1\":{\"974\":1,\"975\":1}}],[\"$byte\",{\"1\":{\"974\":1,\"975\":1}}],[\"$>=128$\",{\"1\":{\"976\":1}}],[\"$>=\",{\"1\":{\"948\":1}}],[\"$>32bytes$\",{\"1\":{\"896\":1}}],[\"$查找指定元素分值\",{\"1\":{\"900\":1}}],[\"$的字节数组\",{\"1\":{\"892\":3}}],[\"$8\",{\"1\":{\"846\":2}}],[\"$4\",{\"1\":{\"846\":2,\"1631\":1}}],[\"$4mb\",{\"1\":{\"828\":1}}],[\"$3\",{\"1\":{\"846\":2}}],[\"$\",{\"1\":{\"388\":2,\"506\":4,\"518\":1,\"524\":4,\"530\":2,\"531\":3,\"846\":1,\"893\":1,\"974\":1,\"1119\":6,\"1349\":1,\"1385\":6,\"1438\":2,\"1608\":1,\"1656\":1,\"1662\":1,\"1663\":2,\"1664\":1,\"1665\":2,\"1701\":1,\"1791\":6}}],[\"$$n\",{\"1\":{\"1119\":1}}],[\"$$\",{\"1\":{\"175\":2,\"388\":1,\"996\":4,\"1119\":1,\"1662\":6}}],[\"详情\",{\"1\":{\"1219\":1,\"1866\":1}}],[\"详细设计\",{\"1\":{\"1641\":1}}],[\"详细参数参考\",{\"1\":{\"1322\":1}}],[\"详细信息\",{\"1\":{\"1174\":2}}],[\"详细的配置解析可以参考\",{\"1\":{\"386\":1}}],[\"详解java线程状态及状态转换\",{\"1\":{\"1100\":1}}],[\"详见\",{\"1\":{\"385\":1}}],[\"兜底的默认日志记录器\",{\"1\":{\"389\":1}}],[\"兜底\",{\"1\":{\"383\":1}}],[\"约旦\",{\"1\":{\"1767\":1}}],[\"约占10\",{\"1\":{\"1765\":1}}],[\"约定俗成的以y为票价的全价\",{\"1\":{\"1739\":1}}],[\"约定大于配置\",{\"1\":{\"383\":1}}],[\"约束是用来作用于表中字段上的规则\",{\"1\":{\"598\":1}}],[\"约束\",{\"0\":{\"597\":1},\"1\":{\"576\":2,\"598\":1}}],[\"约束更严谨\",{\"1\":{\"357\":1}}],[\"约束注解的存活范围\",{\"1\":{\"348\":1}}],[\"约束注解标记的位置\",{\"1\":{\"348\":1}}],[\"到兰州当晚吃了辣子王的牛肉面\",{\"1\":{\"1848\":1}}],[\"到景区换乘环保车\",{\"1\":{\"1846\":1}}],[\"到了纳木措\",{\"1\":{\"1846\":1}}],[\"到了住处\",{\"1\":{\"1844\":1}}],[\"到了扎西宗乡\",{\"1\":{\"1844\":1}}],[\"到了一个观景台\",{\"1\":{\"1844\":1}}],[\"到了酒店实在脏得忍不住\",{\"1\":{\"1834\":1}}],[\"到这里已经无心观景了\",{\"1\":{\"1843\":1}}],[\"到这里说明其它线程\",{\"1\":{\"8\":1}}],[\"到这里说明其它某个线程执行了\",{\"1\":{\"6\":1}}],[\"到10点钟\",{\"1\":{\"1841\":1}}],[\"到布达拉宫的时候\",{\"1\":{\"1839\":1}}],[\"到佛教辩法战胜苯教徒后兴盛\",{\"1\":{\"1837\":1}}],[\"到处浪\",{\"1\":{\"1825\":1}}],[\"到指定仓库\",{\"1\":{\"1791\":1}}],[\"到千里之外读研\",{\"1\":{\"1786\":1}}],[\"到页表中查询物理页号\",{\"1\":{\"1443\":1}}],[\"到段表中根据段号查询页表地址\",{\"1\":{\"1443\":1}}],[\"到达\",{\"1\":{\"1418\":1}}],[\"到达一次后就删除\",{\"1\":{\"920\":1}}],[\"到远程服务器上的\",{\"1\":{\"1351\":1}}],[\"到新集群去加解锁\",{\"1\":{\"1240\":1}}],[\"到期后被zk定时删除\",{\"1\":{\"1169\":1}}],[\"到关闭状态从而拒绝新的任务的加入\",{\"1\":{\"817\":1}}],[\"到底是垂直拆分\",{\"1\":{\"652\":1}}],[\"到底由哪个consumer来消费哪个\",{\"1\":{\"494\":1}}],[\"到死信交换机\",{\"1\":{\"424\":1}}],[\"到\",{\"1\":{\"382\":1,\"421\":1,\"561\":1,\"856\":1,\"976\":1,\"1629\":2}}],[\"官网可以当作使用手册\",{\"1\":{\"546\":1}}],[\"官网的绑定关系图\",{\"1\":{\"382\":1}}],[\"官方文档\",{\"1\":{\"519\":1}}],[\"官方文档也在考虑这个类的作用\",{\"1\":{\"62\":1}}],[\"官方提供的\",{\"1\":{\"383\":1}}],[\"推崇极端主义和暴力\",{\"1\":{\"1767\":1}}],[\"推送所有标签到远程仓库\",{\"1\":{\"1329\":1}}],[\"推送单个标签到远程仓库\",{\"1\":{\"1329\":1}}],[\"推送本地所有分支到\",{\"1\":{\"1328\":1}}],[\"推送到远程的\",{\"1\":{\"1351\":1}}],[\"推送到\",{\"1\":{\"1328\":1}}],[\"推到远程的\",{\"1\":{\"1326\":1}}],[\"推荐up\",{\"1\":{\"1767\":1}}],[\"推荐pause\",{\"1\":{\"1468\":1}}],[\"推荐阅读\",{\"1\":{\"1246\":1}}],[\"推荐使用vidhub\",{\"1\":{\"1808\":1}}],[\"推荐使用新的\",{\"1\":{\"1791\":1}}],[\"推荐使用\",{\"1\":{\"1716\":1}}],[\"推荐使用占位符\",{\"1\":{\"391\":1}}],[\"推荐使用bigdecimal\",{\"1\":{\"351\":1}}],[\"推入列表表尾\",{\"1\":{\"898\":1}}],[\"推出了\",{\"1\":{\"376\":1}}],[\"推出了自己的日志库\",{\"1\":{\"376\":1}}],[\"年初狠下心\",{\"1\":{\"1828\":1}}],[\"年度歌手时隔\",{\"1\":{\"1826\":1}}],[\"年尽量继续一周一部\",{\"1\":{\"1826\":1}}],[\"年一共看了\",{\"1\":{\"1826\":1}}],[\"年底在北京也第一次尝试了滑雪这项运动\",{\"1\":{\"1827\":1}}],[\"年底又给妈妈换了\",{\"1\":{\"1819\":1}}],[\"年底回去给表弟当伴郎\",{\"1\":{\"1815\":1}}],[\"年末又因为b站王骁的中东系列开始看\",{\"1\":{\"1817\":1}}],[\"年终总结\",{\"0\":{\"1814\":1,\"1823\":1},\"2\":{\"1822\":1,\"1831\":1}}],[\"年已经关闭这种不安全的验证方式\",{\"1\":{\"1791\":1}}],[\"年\",{\"1\":{\"1322\":1,\"1826\":1}}],[\"年开源的分布式数据存储\",{\"1\":{\"1214\":1}}],[\"年诞生以来\",{\"1\":{\"807\":1}}],[\"年龄\",{\"1\":{\"598\":1}}],[\"年龄小于45\",{\"1\":{\"585\":2}}],[\"年龄等于25或30或35\",{\"1\":{\"583\":1}}],[\"年龄在20到30之间\",{\"1\":{\"583\":1}}],[\"年宣布不再维护\",{\"1\":{\"376\":1}}],[\"年月日季度等\",{\"1\":{\"129\":1}}],[\"线行探查法\",{\"1\":{\"1389\":1}}],[\"线性预读\",{\"1\":{\"732\":1}}],[\"线缆的转接器\",{\"1\":{\"374\":1}}],[\"线程模型\",{\"0\":{\"1572\":1}}],[\"线程负责接收\",{\"1\":{\"1563\":1}}],[\"线程负责给从库\",{\"1\":{\"1563\":1}}],[\"线程来发送\",{\"1\":{\"1563\":1}}],[\"线程向主库请求更新的\",{\"1\":{\"1563\":1}}],[\"线程读取\",{\"1\":{\"1563\":2}}],[\"线程传输\",{\"1\":{\"1563\":1}}],[\"线程请求主库的\",{\"1\":{\"1563\":1}}],[\"线程间有序性\",{\"1\":{\"1517\":1}}],[\"线程间通信必须经过主内存\",{\"1\":{\"142\":1}}],[\"线程间通信\",{\"0\":{\"137\":1,\"1463\":1}}],[\"线程不会自动苏醒\",{\"1\":{\"1512\":1}}],[\"线程不必等待结果\",{\"1\":{\"795\":1}}],[\"线程刚被创建的初始状态\",{\"1\":{\"1509\":1}}],[\"线程生命周期\",{\"0\":{\"1509\":1}}],[\"线程直接操作的都是缓存\",{\"1\":{\"1506\":1}}],[\"线程会被阻塞\",{\"1\":{\"1515\":1}}],[\"线程会自动苏醒\",{\"1\":{\"1512\":1}}],[\"线程会忙等待\",{\"1\":{\"1468\":1}}],[\"线程会释放\",{\"1\":{\"1468\":1}}],[\"线程已经持有的资源不会被其它线程剥夺\",{\"1\":{\"1466\":1}}],[\"线程持有资源后不会主动释放已经持有的资源\",{\"1\":{\"1466\":1}}],[\"线程崩溃\",{\"1\":{\"1465\":1}}],[\"线程创建数量\",{\"0\":{\"1464\":1}}],[\"线程创建时会继承自父线程\",{\"1\":{\"1087\":1}}],[\"线程互斥\",{\"1\":{\"1463\":1}}],[\"线程同步\",{\"1\":{\"1463\":1}}],[\"线程同步的核心思想\",{\"1\":{\"331\":1}}],[\"线程在运行的生命周期中有\",{\"1\":{\"1509\":1}}],[\"线程在一些关键点上可能需要互相等待与互通消息\",{\"1\":{\"1463\":1}}],[\"线程在临界区执行时\",{\"1\":{\"1463\":1}}],[\"线程应该被阻止进入临界区同步\",{\"1\":{\"1463\":1}}],[\"线程上下文切换\",{\"1\":{\"1454\":1}}],[\"线程上下文切换成本高\",{\"1\":{\"763\":1}}],[\"线程进程都是同步机制\",{\"1\":{\"1453\":1}}],[\"线程进入\",{\"1\":{\"366\":1}}],[\"线程将接收的\",{\"1\":{\"1563\":1}}],[\"线程将消息输出出来\",{\"1\":{\"1190\":1}}],[\"线程将外部数据发送至\",{\"1\":{\"450\":1}}],[\"线程调度\",{\"0\":{\"1138\":1}}],[\"线程调用\",{\"1\":{\"139\":1}}],[\"线程过多\",{\"1\":{\"1115\":1}}],[\"线程数\",{\"1\":{\"1114\":1}}],[\"线程数量设定\",{\"1\":{\"1511\":1}}],[\"线程数量\",{\"0\":{\"1119\":1}}],[\"线程数量是integer\",{\"1\":{\"332\":1}}],[\"线程数量随着任务增加而增加\",{\"1\":{\"332\":1}}],[\"线程栈信息\",{\"1\":{\"1109\":1}}],[\"线程栈大小\",{\"1\":{\"1087\":1,\"1088\":1}}],[\"线程工厂\",{\"0\":{\"1108\":1},\"1\":{\"1106\":1,\"1511\":1}}],[\"线程抛出的异常不能在调用的地方直接用\",{\"1\":{\"1096\":1}}],[\"线程执行逻辑\",{\"1\":{\"1511\":1}}],[\"线程执行完毕的终止状态其中\",{\"1\":{\"1509\":1}}],[\"线程执行完毕后\",{\"1\":{\"329\":1}}],[\"线程执行结束\",{\"1\":{\"1091\":1}}],[\"线程组最大优先级\",{\"1\":{\"1099\":1}}],[\"线程组名称\",{\"1\":{\"1099\":1}}],[\"线程组的\",{\"1\":{\"1099\":1}}],[\"线程组是一种父子层级结构\",{\"1\":{\"1099\":1}}],[\"线程组记录新线程\",{\"1\":{\"1088\":1}}],[\"线程组\",{\"1\":{\"1088\":1,\"1099\":1,\"1100\":1}}],[\"线程优先级\",{\"1\":{\"1087\":1}}],[\"线程取名的计数器\",{\"1\":{\"1087\":1}}],[\"线程名\",{\"1\":{\"1087\":1,\"1088\":1}}],[\"线程id计数器\",{\"1\":{\"1087\":1}}],[\"线程id\",{\"1\":{\"1087\":1}}],[\"线程去关联\",{\"1\":{\"865\":1}}],[\"线程需要等待结果\",{\"1\":{\"795\":1}}],[\"线程自己不去获取结果\",{\"1\":{\"794\":1}}],[\"线程自己去获取结果\",{\"1\":{\"794\":1}}],[\"线程自己调用了\",{\"1\":{\"134\":1}}],[\"线程轮询\",{\"1\":{\"791\":1}}],[\"线程实际还是阻塞的\",{\"1\":{\"783\":1}}],[\"线程实现\",{\"0\":{\"277\":1}}],[\"线程仍然在不断运行\",{\"1\":{\"783\":1}}],[\"线程只需等待数据写入\",{\"1\":{\"783\":1}}],[\"线程只需要保存寄存器和栈信息\",{\"1\":{\"134\":1}}],[\"线程复用等技术\",{\"1\":{\"672\":1}}],[\"线程类型\",{\"1\":{\"640\":1}}],[\"线程从\",{\"1\":{\"450\":1}}],[\"线程无序阻塞\",{\"1\":{\"366\":1}}],[\"线程阻塞在这里\",{\"1\":{\"363\":1}}],[\"线程阻塞等问题\",{\"1\":{\"237\":1,\"238\":1}}],[\"线程就会阻塞住\",{\"1\":{\"363\":1}}],[\"线程通信\",{\"1\":{\"331\":1}}],[\"线程如果有执行结果不可以直接返回\",{\"1\":{\"328\":1}}],[\"线程是轻量级的进程\",{\"1\":{\"1452\":1}}],[\"线程是进程当中的一条执行流程\",{\"1\":{\"1451\":1}}],[\"线程是稀缺资源\",{\"1\":{\"1104\":1}}],[\"线程是操作系统进行调度的最小单位\",{\"1\":{\"1086\":1}}],[\"线程是java进行处理器资源调度的最基本单位\",{\"1\":{\"277\":1}}],[\"线程是比进程更轻量化的调度执行单位\",{\"1\":{\"277\":1}}],[\"线程分析\",{\"1\":{\"237\":2,\"238\":1}}],[\"线程分配缓冲区\",{\"1\":{\"210\":1}}],[\"线程状态\",{\"0\":{\"1089\":1},\"1\":{\"236\":1,\"237\":1,\"238\":1,\"1087\":1}}],[\"线程状态等信息\",{\"1\":{\"234\":1}}],[\"线程死锁\",{\"1\":{\"235\":1}}],[\"线程转储是java进程中所有线程当前的状态的快照\",{\"1\":{\"234\":1}}],[\"线程共享\",{\"1\":{\"210\":1,\"211\":1,\"1520\":1}}],[\"线程私有的局部变量\",{\"1\":{\"1087\":1}}],[\"线程私有的分配缓冲区\",{\"1\":{\"214\":1}}],[\"线程私有\",{\"1\":{\"202\":1,\"203\":1,\"1520\":1}}],[\"线程中执行\",{\"1\":{\"1091\":1}}],[\"线程中已被标记废弃的\",{\"1\":{\"195\":1}}],[\"线程中提供了一种更加灵活地执行对象清理操作的机制\",{\"1\":{\"195\":1}}],[\"线程处理\",{\"1\":{\"186\":1}}],[\"线程串行化\",{\"1\":{\"163\":1}}],[\"线程安全的三大特性\",{\"0\":{\"1506\":1}}],[\"线程安全的集合可以分为三大类\",{\"1\":{\"162\":1}}],[\"线程安全但效率低\",{\"1\":{\"986\":1}}],[\"线程安全\",{\"0\":{\"331\":1}}],[\"线程安全集合\",{\"0\":{\"162\":1}}],[\"线程安全性\",{\"1\":{\"64\":1}}],[\"线程何时执行完成\",{\"1\":{\"154\":1}}],[\"线程池中的空闲线程依次执行任务\",{\"1\":{\"1511\":1}}],[\"线程池配置\",{\"1\":{\"1369\":1}}],[\"线程池的大小应该根据应用程序的负载进行调整\",{\"1\":{\"1511\":1}}],[\"线程池的构造参数有8个\",{\"1\":{\"1120\":1}}],[\"线程池的五种状态转换关系\",{\"1\":{\"1112\":1}}],[\"线程池构造方法\",{\"1\":{\"1106\":1}}],[\"线程池具备可拓展性\",{\"1\":{\"1104\":1}}],[\"线程池里的那个唯一线程\",{\"1\":{\"871\":1}}],[\"线程池技术\",{\"1\":{\"343\":1}}],[\"线程池工具类\",{\"1\":{\"332\":1}}],[\"线程池接口\",{\"1\":{\"332\":1}}],[\"线程池\",{\"0\":{\"152\":1,\"332\":1,\"764\":1,\"1511\":1},\"1\":{\"153\":1}}],[\"线程可以不停地执行\",{\"1\":{\"148\":1}}],[\"线程内存模型将基于写屏障\",{\"1\":{\"145\":1}}],[\"线程对共享变量的所有操作必须在自己的本地内存中进行\",{\"1\":{\"142\":1}}],[\"线程之间的通信由\",{\"1\":{\"142\":1}}],[\"线程一起竞争锁资源\",{\"1\":{\"139\":1}}],[\"线程都处于阻塞状态\",{\"1\":{\"139\":1}}],[\"线程和协程对比\",{\"0\":{\"1453\":1}}],[\"线程和\",{\"1\":{\"139\":1,\"450\":1}}],[\"线程集合全部被唤醒\",{\"1\":{\"139\":1}}],[\"线程集合中挑一个唤醒\",{\"1\":{\"139\":1}}],[\"线程的创建\",{\"1\":{\"1452\":1}}],[\"线程的数量可以设为\",{\"1\":{\"791\":1}}],[\"线程的生命周期\",{\"0\":{\"336\":1}}],[\"线程的引入\",{\"1\":{\"277\":1}}],[\"线程的中断interrupt\",{\"1\":{\"143\":1}}],[\"线程的\",{\"1\":{\"134\":1,\"143\":1}}],[\"线程的优势是通信简单\",{\"1\":{\"134\":1}}],[\"线程\",{\"0\":{\"1451\":1},\"1\":{\"134\":3,\"136\":1,\"139\":1,\"196\":1,\"235\":1,\"450\":1,\"791\":1,\"863\":1,\"871\":1,\"873\":1,\"1087\":1,\"1099\":1,\"1190\":1,\"1435\":1,\"1464\":1,\"1488\":3,\"1563\":2}}],[\"线程没释放一个令牌\",{\"1\":{\"9\":1}}],[\"线程每获取一个令牌\",{\"1\":{\"9\":1}}],[\"线程等待队列\",{\"1\":{\"1516\":1}}],[\"线程等待\",{\"1\":{\"3\":1}}],[\"洗衣机等\",{\"1\":{\"373\":1}}],[\"充满了庄严和神圣\",{\"1\":{\"1838\":1}}],[\"充实点不太灵光的脑子\",{\"1\":{\"1817\":1}}],[\"充分利用程序的局部性原理\",{\"1\":{\"1443\":1}}],[\"充分利用elasticsearch的水平伸缩性\",{\"1\":{\"31\":1}}],[\"充当了客户端与子系统之间的中介者\",{\"1\":{\"373\":1}}],[\"恢复中断进程上下文\",{\"1\":{\"1482\":1}}],[\"恢复一个线程\",{\"1\":{\"1138\":1}}],[\"恢复为无锁状态\",{\"1\":{\"1077\":1}}],[\"恢复步骤\",{\"1\":{\"742\":1}}],[\"恢复终点\",{\"1\":{\"742\":1}}],[\"恢复起点\",{\"1\":{\"742\":1}}],[\"恢复后\",{\"1\":{\"471\":1}}],[\"恢复后清空线程的阻塞对象\",{\"1\":{\"363\":1}}],[\"恢复其运行\",{\"1\":{\"366\":1}}],[\"带来的问题\",{\"1\":{\"1564\":1}}],[\"带宽\",{\"1\":{\"1490\":1}}],[\"带宽不够\",{\"1\":{\"651\":1}}],[\"带虚拟节点的一致性哈希适合硬件配置不同的节点的场景\",{\"1\":{\"1489\":1}}],[\"带序号的临时节点\",{\"1\":{\"1169\":1}}],[\"带\",{\"1\":{\"1140\":1}}],[\"带超时时间\",{\"1\":{\"1113\":2}}],[\"带有执行优先级的无界队列\",{\"1\":{\"1107\":1,\"1511\":1}}],[\"带长度计数器\",{\"1\":{\"880\":1}}],[\"带表头表尾指针\",{\"1\":{\"880\":1}}],[\"带阻塞对象的\",{\"1\":{\"363\":1}}],[\"带local导出linux本地\",{\"1\":{\"121\":1}}],[\"孙元素\",{\"1\":{\"357\":2}}],[\"根dns\",{\"1\":{\"1424\":1}}],[\"根目录下的\",{\"1\":{\"1330\":1}}],[\"根本不经过缓存这一层\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"根本读不通\",{\"1\":{\"1246\":1}}],[\"根元素\",{\"1\":{\"357\":1}}],[\"根标签名\",{\"1\":{\"357\":1}}],[\"根据不同\",{\"1\":{\"1791\":1}}],[\"根据不同的\",{\"1\":{\"1012\":1}}],[\"根据输入返回\",{\"1\":{\"1711\":1}}],[\"根据输入动态调节\",{\"1\":{\"923\":1}}],[\"根据格式串输出日期\",{\"1\":{\"1697\":1}}],[\"根据当前业务情况及流量\",{\"1\":{\"1636\":1}}],[\"根据当前线程获取\",{\"1\":{\"1514\":1}}],[\"根据当前线程拿到\",{\"1\":{\"154\":1}}],[\"根据版本号\",{\"1\":{\"1557\":1}}],[\"根据存储位置的不同\",{\"1\":{\"1474\":1}}],[\"根据如何处理时钟中断\",{\"1\":{\"1470\":1}}],[\"根据实现还分为读优先锁和写优先锁\",{\"1\":{\"1468\":1}}],[\"根据任务的不同\",{\"1\":{\"1454\":1}}],[\"根据进程所处的不同状态\",{\"1\":{\"1450\":1}}],[\"根据每个进程的内存占用情况和\",{\"1\":{\"1446\":1}}],[\"根据网络的拥塞程度动态变化\",{\"1\":{\"1413\":1}}],[\"根据端口交付给对应的进程\",{\"1\":{\"1394\":1}}],[\"根据拼音搜索前缀树\",{\"1\":{\"1362\":1}}],[\"根据拼音构建前缀搜索树\",{\"1\":{\"1361\":1}}],[\"根据参数修改空间内的文件\",{\"1\":{\"1344\":1}}],[\"根据唯一标识判断\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"根据时间判断是否有更新\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"根据响应中的\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"根据分区列分区\",{\"1\":{\"1228\":1}}],[\"根据配置的路由规则\",{\"1\":{\"1297\":1}}],[\"根据配置文件一键启停\",{\"1\":{\"1222\":1}}],[\"根据配置发送相应的通知\",{\"1\":{\"907\":1}}],[\"根据场景定夺\",{\"1\":{\"1206\":1}}],[\"根据是否可能引起数据不一致采用row\",{\"1\":{\"1556\":1}}],[\"根据是否利用操作系统的缓存\",{\"1\":{\"1478\":1}}],[\"根据是否利用标准库缓冲\",{\"1\":{\"1478\":1}}],[\"根据是否设定超时\",{\"1\":{\"1115\":1}}],[\"根据是否是\",{\"1\":{\"153\":1}}],[\"根据内部事务是否有异常决定是否回滚\",{\"1\":{\"1050\":1}}],[\"根据rollbackonly状态决定是否回滚\",{\"1\":{\"1050\":1}}],[\"根据redisclient的argv\",{\"1\":{\"927\":1}}],[\"根据readview的访问规则\",{\"1\":{\"754\":1,\"1557\":1}}],[\"根据事物传播行为分别处理\",{\"1\":{\"1049\":1}}],[\"根据事务传播行为进行对应处理\",{\"1\":{\"1049\":1}}],[\"根据事件类型做处理\",{\"1\":{\"786\":1}}],[\"根据需要\",{\"1\":{\"1008\":1}}],[\"根据需求选择使用\",{\"1\":{\"860\":1}}],[\"根据byte值和bit值\",{\"1\":{\"974\":1}}],[\"根据u\",{\"1\":{\"970\":1}}],[\"根据校验和\",{\"1\":{\"967\":1}}],[\"根据已保存过的脚本sha1执行对应的脚本\",{\"1\":{\"965\":1}}],[\"根据客户端给定的lua脚本\",{\"1\":{\"965\":1}}],[\"根据传入的键\",{\"1\":{\"965\":1}}],[\"根据传入的参数uage\",{\"1\":{\"634\":1}}],[\"根据回复判断是否在线\",{\"1\":{\"941\":1}}],[\"根据运行id是否一致\",{\"1\":{\"935\":1}}],[\"根据运算结果决定该数据属于哪一个分片\",{\"1\":{\"656\":1}}],[\"根据复制偏移量之后的数据是否还在积压缓冲区中\",{\"1\":{\"935\":1}}],[\"根据返回值对事件的when属性更新\",{\"1\":{\"920\":1}}],[\"根据新元素类型\",{\"1\":{\"889\":1}}],[\"根据幂次定律随机生成介于1~32之间的值作为结点层数\",{\"1\":{\"886\":1}}],[\"根据虚引用释放堆外内存\",{\"1\":{\"800\":1}}],[\"根据更新后各列的值创建一条新记录\",{\"1\":{\"748\":1}}],[\"根据日志的space\",{\"1\":{\"742\":1}}],[\"根据主键\",{\"1\":{\"728\":1}}],[\"根据innodb\",{\"1\":{\"720\":1}}],[\"根据搜索条件\",{\"1\":{\"717\":1}}],[\"根据值构造二叉排序树\",{\"1\":{\"698\":1}}],[\"根据指定规则\",{\"1\":{\"970\":1}}],[\"根据指定的字段值与节点数量进行求模运算\",{\"1\":{\"656\":1}}],[\"根据指定的字段及其配置的范围与数据节点的对应情况来决定数据属于哪一个分片\",{\"1\":{\"656\":1}}],[\"根据指定构造器创建新对象\",{\"1\":{\"309\":1}}],[\"根据字段属性将不同字段拆分到不同表中\",{\"1\":{\"652\":1}}],[\"根据业务将不同表拆分到不同库中\",{\"1\":{\"652\":1}}],[\"根据状态将page分为三种类型\",{\"1\":{\"638\":1}}],[\"根据排序字段建立合适的索引\",{\"1\":{\"616\":1}}],[\"根据销售部部门id\",{\"1\":{\"608\":1}}],[\"根据与外层查询关系可分为\",{\"1\":{\"607\":1}}],[\"根据子查询位置可分为\",{\"1\":{\"607\":1}}],[\"根据子查询结果可以分为\",{\"1\":{\"607\":1}}],[\"根据年龄升序排序\",{\"1\":{\"586\":1}}],[\"根据性别分组\",{\"1\":{\"585\":1}}],[\"根据条件动态拼接\",{\"1\":{\"534\":1}}],[\"根据索引的存储形式\",{\"1\":{\"699\":1}}],[\"根据索引项定位到\",{\"1\":{\"476\":1}}],[\"根据索引查找速度很快\",{\"1\":{\"35\":1}}],[\"根据上面的分析\",{\"1\":{\"460\":1}}],[\"根据上下文推断变量的类型\",{\"1\":{\"274\":1}}],[\"根据消息处理逻辑是否抛出异常自动处理\",{\"1\":{\"422\":1}}],[\"根据项目根目录下的\",{\"1\":{\"386\":1}}],[\"根据编译器编译\",{\"1\":{\"267\":1}}],[\"根据标记序列构造抽象语法树的过程\",{\"1\":{\"258\":1}}],[\"根据接口类型去匹配注入接口实现类\",{\"1\":{\"1595\":1}}],[\"根据接口的实现类确定调用的具体方法实现\",{\"1\":{\"245\":1}}],[\"根据接收到的消息提取\",{\"1\":{\"97\":1}}],[\"根据对象的实际类型确定要实例化的具体类\",{\"1\":{\"245\":1}}],[\"根据对象的实际类型确定调用的具体方法实现\",{\"1\":{\"245\":1}}],[\"根据引用直接或间接找到对象所属数据类型在方法区中存储的类型信息\",{\"1\":{\"204\":1}}],[\"根据引用直接或间接找到对象在java堆种数据存放的起始地址或索引\",{\"1\":{\"204\":1}}],[\"根据引用实例是否在队列中以及引用实例所引用的对象是否被回收\",{\"1\":{\"186\":1}}],[\"根据特定查询条件确定回收集\",{\"1\":{\"179\":1}}],[\"根据优先级选择region回收集\",{\"1\":{\"177\":1,\"1525\":1}}],[\"根据词条找文档\",{\"1\":{\"35\":1}}],[\"根据用户输入进行分词\",{\"1\":{\"35\":1}}],[\"根据文档找词条\",{\"1\":{\"35\":1}}],[\"根据请求来源做路由配置\",{\"1\":{\"21\":1}}],[\"根据\",{\"1\":{\"15\":1,\"97\":1,\"535\":1,\"541\":3,\"544\":2,\"975\":1,\"1010\":1,\"1367\":1,\"1529\":1,\"1605\":3,\"1792\":1}}],[\"根据缓存时间防止接口被刷\",{\"1\":{\"14\":1}}],[\"纯裸\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"纯文本\",{\"1\":{\"357\":1}}],[\"纯解释执行\",{\"1\":{\"267\":1}}],[\"传说中的布达拉宫\",{\"1\":{\"1834\":1}}],[\"传闻五月底阿里云盘要推出第三方的权益包\",{\"1\":{\"1808\":1}}],[\"传感器\",{\"1\":{\"1212\":1}}],[\"传播行为等来进行事务管理\",{\"1\":{\"1042\":1}}],[\"传播行为\",{\"0\":{\"1041\":1,\"1276\":1},\"1\":{\"1042\":1,\"1383\":1}}],[\"传播模式\",{\"1\":{\"1040\":1}}],[\"传播给每个\",{\"1\":{\"814\":1}}],[\"传入bean的配置文件\",{\"1\":{\"1379\":1}}],[\"传入一个\",{\"1\":{\"1038\":1}}],[\"传入的\",{\"1\":{\"1016\":1}}],[\"传入的参数一般是最后一条消息的偏移量加上1\",{\"1\":{\"476\":1}}],[\"传统与现代兼并包容\",{\"1\":{\"1816\":1}}],[\"传统io内部流程\",{\"1\":{\"799\":1}}],[\"传统的gds报价已经无法满足航空公司及ota的销售意图\",{\"1\":{\"1751\":1}}],[\"传统的单机存储\",{\"1\":{\"1215\":1}}],[\"传统的数据库和数据处理工具难以有效地处理如此庞大的数据\",{\"1\":{\"1212\":1}}],[\"传统的\",{\"1\":{\"799\":1}}],[\"传统\",{\"0\":{\"799\":1}}],[\"传统测试方法的缺陷\",{\"1\":{\"356\":1}}],[\"传输ip和端口\",{\"1\":{\"1862\":1}}],[\"传输协议\",{\"1\":{\"1862\":1}}],[\"传输相关方法\",{\"1\":{\"1861\":1}}],[\"传输过程存在延迟\",{\"1\":{\"1412\":1}}],[\"传输内容\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"传输指在多个设备之间\",{\"1\":{\"1398\":1}}],[\"传输对象精简返回的数据量\",{\"1\":{\"1367\":1}}],[\"传输形式\",{\"0\":{\"1127\":1}}],[\"传输问题\",{\"1\":{\"809\":1}}],[\"传输数据\",{\"1\":{\"777\":1,\"1432\":1}}],[\"传输数据的通道\",{\"1\":{\"418\":1}}],[\"传输效率高\",{\"1\":{\"450\":1,\"478\":1}}],[\"传输层\",{\"0\":{\"1130\":1},\"1\":{\"405\":1,\"1393\":1}}],[\"传递给\",{\"1\":{\"1511\":1,\"1605\":1}}],[\"传递给其它过滤器\",{\"1\":{\"388\":1}}],[\"传递给java虚拟机的参数\",{\"1\":{\"233\":1}}],[\"传递性\",{\"1\":{\"143\":1}}],[\"改\",{\"1\":{\"1779\":1}}],[\"改善跨多个计算资源的工作负载分布\",{\"1\":{\"1617\":1}}],[\"改善你的开发流程\",{\"1\":{\"1333\":1}}],[\"改进方法\",{\"1\":{\"1448\":2}}],[\"改进\",{\"1\":{\"1402\":1,\"1523\":1}}],[\"改进的地方\",{\"1\":{\"783\":1}}],[\"改投\",{\"1\":{\"1203\":1}}],[\"改写\",{\"1\":{\"653\":1}}],[\"改操作会对数据进行加锁\",{\"1\":{\"620\":1}}],[\"改良版本\",{\"1\":{\"355\":1}}],[\"改用connection\",{\"1\":{\"178\":1}}],[\"模板方法\",{\"1\":{\"1048\":1}}],[\"模版方法\",{\"1\":{\"1039\":1}}],[\"模拟异常\",{\"0\":{\"1713\":1}}],[\"模拟多次调用返回\",{\"1\":{\"1711\":1}}],[\"模拟返回\",{\"0\":{\"1711\":1},\"1\":{\"1711\":1}}],[\"模拟真实场景\",{\"1\":{\"1639\":1}}],[\"模拟真实用户和权限\",{\"1\":{\"1608\":1}}],[\"模拟延迟\",{\"1\":{\"1629\":1}}],[\"模拟出站操作\",{\"1\":{\"823\":1}}],[\"模拟入站操作\",{\"1\":{\"823\":1}}],[\"模拟了\",{\"1\":{\"25\":1}}],[\"模糊\",{\"1\":{\"1855\":1}}],[\"模糊查询中对头部模糊匹配\",{\"1\":{\"703\":1}}],[\"模糊匹配等\",{\"1\":{\"638\":1}}],[\"模糊匹配\",{\"1\":{\"583\":1,\"1712\":1}}],[\"模上分区数取余得到\",{\"1\":{\"452\":1}}],[\"模式的单线程事件驱动程序\",{\"1\":{\"1572\":1}}],[\"模式会将凭证存入提供的钥匙串中\",{\"1\":{\"1347\":1}}],[\"模式会将凭证存放在内存中一段时间\",{\"1\":{\"1347\":1}}],[\"模式下都不能保证持久性\",{\"1\":{\"961\":1}}],[\"模式是否匹配\",{\"1\":{\"953\":1}}],[\"模式架构不再依赖\",{\"1\":{\"448\":1}}],[\"模式\",{\"0\":{\"955\":1},\"1\":{\"420\":1,\"953\":1,\"1171\":1,\"1207\":2,\"1330\":1,\"1488\":1,\"1628\":1}}],[\"模式匹配的队列中\",{\"1\":{\"414\":1}}],[\"模式消费消息\",{\"1\":{\"410\":1}}],[\"模型概念\",{\"0\":{\"814\":1}}],[\"模型需要底层操作系统\",{\"1\":{\"795\":1}}],[\"模型\",{\"0\":{\"406\":1,\"793\":1,\"1504\":1},\"1\":{\"678\":1,\"784\":1,\"794\":1,\"1200\":1,\"1487\":1,\"1642\":1}}],[\"模型层\",{\"1\":{\"405\":1}}],[\"模块还规范了代码边界的划分\",{\"1\":{\"1632\":1}}],[\"模块加载器\",{\"1\":{\"1528\":1}}],[\"模块\",{\"1\":{\"355\":1,\"1532\":1}}],[\"依靠大量注解实现自动化配置\",{\"1\":{\"1609\":1}}],[\"依次抛出\",{\"1\":{\"1713\":1}}],[\"依次应用暂存的修改\",{\"1\":{\"1337\":1}}],[\"依次从\",{\"1\":{\"1088\":1}}],[\"依次执行所有命令\",{\"1\":{\"959\":1}}],[\"依次加工数据\",{\"1\":{\"873\":1}}],[\"依次经过各个\",{\"1\":{\"813\":1,\"873\":1}}],[\"依赖查找顺序\",{\"1\":{\"1632\":1}}],[\"依赖冲突遵循\",{\"1\":{\"1632\":1}}],[\"依赖范围三套不同的classpath\",{\"1\":{\"1632\":1}}],[\"依赖管理\",{\"1\":{\"1632\":1}}],[\"依赖持久化机制\",{\"1\":{\"1571\":1}}],[\"依赖持续重试来保证可靠性\",{\"1\":{\"1285\":1}}],[\"依赖坐标\",{\"1\":{\"1368\":1}}],[\"依赖一个关系型数据库系统存储元数据\",{\"1\":{\"1225\":1}}],[\"依赖于具体实现\",{\"1\":{\"1095\":1}}],[\"依赖于从数据源获得的连接来管理事务作用域\",{\"1\":{\"525\":1}}],[\"依赖此\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"依赖\",{\"0\":{\"505\":1,\"1179\":1},\"1\":{\"1269\":1,\"1609\":1}}],[\"依然是4次切换+3次拷贝\",{\"1\":{\"800\":1}}],[\"依然难分伯仲\",{\"1\":{\"385\":1}}],[\"依然使用的是\",{\"1\":{\"383\":1}}],[\"依然存在精度损失风险\",{\"1\":{\"351\":1}}],[\"依旧是\",{\"1\":{\"118\":1}}],[\"组里也没有人会用\",{\"1\":{\"1782\":1}}],[\"组认证\",{\"1\":{\"1692\":1}}],[\"组名称\",{\"1\":{\"1692\":1}}],[\"组id\",{\"1\":{\"1692\":2}}],[\"组内拼接字符串\",{\"1\":{\"1567\":1}}],[\"组内所有消费者提交\",{\"1\":{\"483\":1}}],[\"组相联等类似\",{\"1\":{\"1435\":1}}],[\"组标记\",{\"1\":{\"1435\":2}}],[\"组合问题我们使用start\",{\"1\":{\"1676\":1}}],[\"组合本质上和可重不可复选子集问题是一样的\",{\"1\":{\"1674\":1}}],[\"组合总和\",{\"1\":{\"1674\":1,\"1676\":1}}],[\"组合指定了结果集的大小\",{\"1\":{\"1671\":1}}],[\"组合了\",{\"1\":{\"1379\":1}}],[\"组合了事务管理器和事务配置的功能\",{\"1\":{\"1055\":1}}],[\"组合这些\",{\"1\":{\"833\":1}}],[\"组合\",{\"0\":{\"833\":1,\"1671\":1,\"1674\":1,\"1676\":1},\"1\":{\"834\":1,\"1669\":2,\"1671\":1,\"1672\":1}}],[\"组\",{\"1\":{\"817\":1}}],[\"组成的\",{\"1\":{\"1435\":1,\"1494\":1}}],[\"组成的双向链表\",{\"1\":{\"823\":1}}],[\"组成\",{\"1\":{\"443\":2,\"739\":1,\"1301\":1,\"1435\":1,\"1555\":1,\"1626\":1}}],[\"组播\",{\"1\":{\"342\":1}}],[\"组件方式\",{\"1\":{\"1563\":1}}],[\"组件注册的方式\",{\"1\":{\"1026\":1}}],[\"组件\",{\"1\":{\"154\":1,\"1514\":1,\"1594\":1}}],[\"组件之间可以松散地耦合\",{\"1\":{\"84\":1}}],[\"广州\",{\"1\":{\"1816\":1}}],[\"广泛用于生产者\",{\"1\":{\"1499\":1}}],[\"广泛应用在计算机\",{\"1\":{\"1104\":1}}],[\"广播给订阅者\",{\"1\":{\"1626\":1}}],[\"广播\",{\"1\":{\"342\":1,\"1425\":1,\"1426\":1}}],[\"广东省\",{\"1\":{\"584\":1}}],[\"广东\",{\"1\":{\"124\":2,\"125\":1}}],[\"预订的比例很容易超出gds的限制\",{\"1\":{\"1737\":1}}],[\"预防死锁\",{\"1\":{\"1466\":1}}],[\"预先申请数据库连接\",{\"1\":{\"1104\":1}}],[\"预先申请内存\",{\"1\":{\"1104\":1}}],[\"预先加载部分可能访问的页面到缓冲池中\",{\"1\":{\"732\":1}}],[\"预先定义的知名应用\",{\"1\":{\"340\":1}}],[\"预读功能\",{\"1\":{\"1486\":1}}],[\"预读页先加入\",{\"1\":{\"1448\":2}}],[\"预读失效\",{\"1\":{\"1448\":1}}],[\"预读\",{\"1\":{\"732\":1}}],[\"预期的下一次提交的快照\",{\"1\":{\"1344\":1}}],[\"预期的插入数量\",{\"1\":{\"83\":1}}],[\"预期值\",{\"1\":{\"148\":1}}],[\"丢包率\",{\"1\":{\"1490\":1}}],[\"丢弃且不抛异常\",{\"1\":{\"332\":1,\"1109\":1,\"1511\":1}}],[\"丢弃并抛出rejectedexecutionexception异常\",{\"1\":{\"332\":1,\"1109\":1,\"1511\":1}}],[\"丢失重传\",{\"1\":{\"1418\":1}}],[\"丢失\",{\"1\":{\"287\":1,\"410\":1,\"1409\":3}}],[\"临走都要出来送送我\",{\"1\":{\"1786\":1}}],[\"临时设置环境变量\",{\"1\":{\"1701\":1}}],[\"临时序号节点\",{\"1\":{\"1169\":1}}],[\"临时节点通过心跳维持连接\",{\"1\":{\"1169\":1}}],[\"临时节点\",{\"1\":{\"1169\":1}}],[\"临时表分别使用不同的链表\",{\"1\":{\"749\":1}}],[\"临时线程都在忙\",{\"1\":{\"332\":1}}],[\"临键锁退化为间隙锁\",{\"1\":{\"557\":1}}],[\"临键锁只与非唯一索引列有关\",{\"1\":{\"557\":1}}],[\"临键锁是记录锁和间隙锁的组合\",{\"1\":{\"557\":1}}],[\"临键锁\",{\"0\":{\"557\":1},\"1\":{\"554\":1,\"557\":1,\"1561\":1}}],[\"临界区\",{\"1\":{\"134\":1,\"1463\":1}}],[\"天蒙蒙亮了\",{\"1\":{\"1833\":1}}],[\"天津\",{\"1\":{\"1816\":1}}],[\"天倒是还挺好看\",{\"1\":{\"1771\":1}}],[\"天主教\",{\"0\":{\"1761\":1}}],[\"天然支持集群\",{\"1\":{\"428\":1}}],[\"天\",{\"1\":{\"332\":1,\"467\":1,\"477\":1}}],[\"弥补了原来同步阻塞i\",{\"1\":{\"324\":1}}],[\"库存数据实时变化\",{\"1\":{\"1752\":1}}],[\"库存数据就不一定能及时地同步到各个gds中\",{\"1\":{\"1734\":1}}],[\"库存真正意义上来说是在ics系统中\",{\"1\":{\"1724\":1}}],[\"库存控制系统\",{\"1\":{\"1723\":1}}],[\"库存预热\",{\"1\":{\"1375\":1}}],[\"库存\",{\"0\":{\"1370\":1}}],[\"库存自动解锁\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"库存保存在\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"库存锁定\",{\"0\":{\"1290\":1,\"1372\":1},\"1\":{\"1290\":1,\"1372\":1}}],[\"库中\",{\"1\":{\"324\":1}}],[\"库\",{\"0\":{\"323\":1},\"1\":{\"1634\":1}}],[\"库也内置了一个使用简便布隆过滤器\",{\"1\":{\"83\":1}}],[\"建筑和设施都很新很好看\",{\"1\":{\"1837\":1}}],[\"建筑风格以白色为主\",{\"1\":{\"1834\":1}}],[\"建立航司旗舰店\",{\"1\":{\"1726\":1}}],[\"建立代码review机制\",{\"1\":{\"1539\":1}}],[\"建立在第二范式的基础之上\",{\"1\":{\"1538\":1}}],[\"建立在第一范式的基础之上\",{\"1\":{\"1538\":1}}],[\"建立在关系模型基础上\",{\"1\":{\"569\":1}}],[\"建立实际的映射关系\",{\"1\":{\"1445\":1}}],[\"建立连接时\",{\"1\":{\"1418\":1}}],[\"建立\",{\"1\":{\"1394\":1,\"1487\":1}}],[\"建立与客户端连接\",{\"1\":{\"782\":1,\"783\":1}}],[\"建立前缀索引\",{\"1\":{\"708\":1}}],[\"建立索引\",{\"1\":{\"677\":1,\"707\":1}}],[\"建立第三张中间表\",{\"1\":{\"601\":1}}],[\"建立到leader节点的网络连接\",{\"1\":{\"450\":1}}],[\"建议先观望\",{\"1\":{\"1808\":1}}],[\"建议通过\",{\"1\":{\"1595\":1}}],[\"建议设为总数据量\",{\"1\":{\"1259\":1}}],[\"建议设为静态\",{\"1\":{\"507\":1}}],[\"建议用一个自定义的变量用于标识线程是否需要退出\",{\"1\":{\"1093\":1}}],[\"建议建立联合索引\",{\"1\":{\"699\":1}}],[\"建议首先查看此日志\",{\"1\":{\"642\":1}}],[\"建议\",{\"1\":{\"459\":1,\"1595\":1}}],[\"建议使用索引\",{\"1\":{\"705\":1}}],[\"建议使用load指令将数据文件加载到数据表中\",{\"1\":{\"614\":1}}],[\"建议使用\",{\"1\":{\"514\":1,\"1564\":1}}],[\"建议使用最新版本\",{\"1\":{\"385\":1}}],[\"建议使用缓冲流+字节数组\",{\"1\":{\"319\":1}}],[\"建议实例方法使用this作为锁对象\",{\"1\":{\"331\":1}}],[\"建议创建转换流后使用缓冲流进行包装\",{\"1\":{\"320\":1}}],[\"建表时指定存储引擎\",{\"1\":{\"677\":1}}],[\"建表\",{\"1\":{\"119\":1}}],[\"缓冲字符字符输入输出流\",{\"1\":{\"1502\":1}}],[\"缓冲输入输出流\",{\"1\":{\"1502\":1}}],[\"缓冲\",{\"1\":{\"1478\":2}}],[\"缓冲可写\",{\"1\":{\"789\":1}}],[\"缓冲池存满时从链表尾淘汰页面\",{\"1\":{\"732\":1}}],[\"缓冲池中的页被修改后就和磁盘上的数据不一致了\",{\"1\":{\"731\":1}}],[\"缓冲池中的地址等等信息\",{\"1\":{\"730\":1}}],[\"缓冲池中所有空闲页对应的控制块组成一个free空闲链表\",{\"1\":{\"731\":1}}],[\"缓冲池\",{\"0\":{\"730\":1}}],[\"缓冲池以page页为单位\",{\"1\":{\"638\":1}}],[\"缓冲池是主内存中的一个区域\",{\"1\":{\"638\":1}}],[\"缓冲区里\",{\"1\":{\"1486\":1}}],[\"缓冲区等来提高\",{\"1\":{\"1484\":1}}],[\"缓冲区的数据写入网卡\",{\"1\":{\"799\":1,\"801\":1}}],[\"缓冲区写不下时再关注可写事件\",{\"1\":{\"789\":1}}],[\"缓冲区大小\",{\"1\":{\"459\":1,\"638\":1}}],[\"缓冲区\",{\"1\":{\"324\":1,\"456\":1,\"799\":1,\"801\":1,\"802\":1,\"1486\":1}}],[\"缓冲流\",{\"0\":{\"319\":1}}],[\"缓存机制\",{\"1\":{\"1638\":1}}],[\"缓存三大问题\",{\"0\":{\"1578\":1}}],[\"缓存淘汰机制\",{\"0\":{\"1574\":1}}],[\"缓存io\",{\"1\":{\"1486\":1}}],[\"缓存最近被访问的数据\",{\"1\":{\"1486\":1}}],[\"缓存命中率\",{\"0\":{\"1448\":1}}],[\"缓存单个\",{\"1\":{\"1338\":1}}],[\"缓存策略\",{\"1\":{\"1300\":1}}],[\"缓存注解\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"缓存的自动配置类\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"缓存的影响\",{\"1\":{\"144\":1}}],[\"缓存数据不应该是实时性\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"缓存数据页\",{\"1\":{\"730\":1}}],[\"缓存一致性问题\",{\"0\":{\"1583\":1},\"1\":{\"1435\":1}}],[\"缓存一致性\",{\"0\":{\"1265\":1}}],[\"缓存一致性协议\",{\"1\":{\"145\":1}}],[\"缓存污染\",{\"0\":{\"1259\":1},\"1\":{\"1448\":1}}],[\"缓存在同一时间大面积的失效\",{\"1\":{\"1258\":1,\"1581\":1}}],[\"缓存雪崩\",{\"0\":{\"1258\":1,\"1581\":1},\"1\":{\"1269\":1,\"1613\":1}}],[\"缓存击穿\",{\"0\":{\"1257\":1,\"1580\":1},\"1\":{\"1269\":1,\"1613\":1}}],[\"缓存穿透\",{\"0\":{\"1256\":1,\"1579\":1},\"1\":{\"1269\":1,\"1613\":1}}],[\"缓存问题\",{\"0\":{\"1255\":1}}],[\"缓存之所以能够加快系统速度\",{\"1\":{\"1249\":1}}],[\"缓存分类\",{\"0\":{\"1249\":1}}],[\"缓存迁移实践\",{\"0\":{\"1232\":1}}],[\"缓存中一些只会被访问一次或者几次的的数据\",{\"1\":{\"1259\":1}}],[\"缓存中设置无效的\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"缓存中\",{\"1\":{\"1059\":1}}],[\"缓存伪共享\",{\"1\":{\"802\":1}}],[\"缓存页作为value\",{\"1\":{\"731\":1}}],[\"缓存场景更多使用redis\",{\"1\":{\"680\":1}}],[\"缓存模块\",{\"1\":{\"545\":1}}],[\"缓存了多个\",{\"1\":{\"542\":1}}],[\"缓存队列中\",{\"1\":{\"484\":1}}],[\"缓存某个对象\",{\"1\":{\"193\":1}}],[\"缓存刷新操作的时机也是类似的\",{\"1\":{\"74\":1}}],[\"缓存不会自动进行清理\",{\"1\":{\"74\":1}}],[\"缓存✨\",{\"0\":{\"72\":1}}],[\"缓存验证码\",{\"1\":{\"14\":1}}],[\"缓存\",{\"0\":{\"1251\":1,\"1368\":1,\"1399\":1},\"1\":{\"14\":1,\"17\":1,\"73\":1,\"91\":1,\"142\":1,\"146\":4,\"542\":1,\"1002\":1,\"1234\":1,\"1250\":1},\"2\":{\"902\":1,\"930\":1,\"950\":1,\"980\":1,\"1242\":1,\"1271\":1}}],[\"英文\",{\"1\":{\"315\":1}}],[\"破风架\",{\"1\":{\"1796\":3}}],[\"破环请求与保持\",{\"1\":{\"1466\":1}}],[\"破环互斥\",{\"1\":{\"1466\":1}}],[\"破坏循环等待条件\",{\"1\":{\"1466\":1}}],[\"破坏不可抢占\",{\"1\":{\"1466\":1}}],[\"破坏\",{\"1\":{\"809\":1}}],[\"破坏了封装性\",{\"1\":{\"309\":1}}],[\"破解方法\",{\"1\":{\"14\":1}}],[\"限流也就越精确\",{\"1\":{\"1637\":1}}],[\"限流就是对请求的速率进行限制\",{\"1\":{\"1637\":1}}],[\"限流\",{\"1\":{\"1375\":1,\"1625\":1,\"1638\":1}}],[\"限时阻塞\",{\"1\":{\"1115\":1}}],[\"限制使用者对jvm系统的影响\",{\"1\":{\"1528\":1}}],[\"限制次数\",{\"1\":{\"1375\":1}}],[\"限制长度\",{\"1\":{\"971\":1}}],[\"限制了\",{\"1\":{\"851\":1}}],[\"限制后\",{\"1\":{\"839\":1}}],[\"限制\",{\"1\":{\"839\":2,\"1148\":3,\"1599\":1}}],[\"限制该字段的数据不能为null\",{\"1\":{\"598\":1}}],[\"限制分割数\",{\"1\":{\"79\":1}}],[\"限定了检查的范围\",{\"1\":{\"623\":1}}],[\"限定xml文件中的标签以及属性规则\",{\"1\":{\"357\":1}}],[\"限定必须是class或其父类\",{\"1\":{\"306\":1}}],[\"限定必须是class或其子类\",{\"1\":{\"306\":1}}],[\"键盘等\",{\"1\":{\"1480\":1}}],[\"键入网址到网页显示\",{\"0\":{\"1394\":1}}],[\"键\",{\"1\":{\"1350\":1}}],[\"键保存的位数组中定位offset偏移量指定的二进制位\",{\"1\":{\"975\":1}}],[\"键保存的位数组\",{\"1\":{\"975\":1}}],[\"键是脚本的sha1值\",{\"1\":{\"967\":1}}],[\"键是被监视的数据库键\",{\"1\":{\"960\":1}}],[\"键是ip\",{\"1\":{\"940\":1}}],[\"键是成员\",{\"1\":{\"900\":1}}],[\"键事件通知\",{\"1\":{\"909\":1}}],[\"键空间通知\",{\"1\":{\"909\":1}}],[\"键空间\",{\"0\":{\"907\":1}}],[\"键值\",{\"1\":{\"698\":1}}],[\"键值对只减不增\",{\"1\":{\"883\":1}}],[\"键值对\",{\"1\":{\"122\":1,\"305\":1}}],[\"键有两个用途\",{\"1\":{\"450\":1}}],[\"键可以设置为默认的null\",{\"1\":{\"450\":1}}],[\"键找值\",{\"1\":{\"305\":1}}],[\"疑难点\",{\"0\":{\"301\":1}}],[\"既有藏餐\",{\"1\":{\"1846\":1}}],[\"既往不恋\",{\"1\":{\"1786\":1}}],[\"既然来走这一遭\",{\"1\":{\"1786\":1}}],[\"既然涉及了分布式\",{\"1\":{\"1215\":1}}],[\"既不存在于缓存\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"既可用于\",{\"1\":{\"859\":1}}],[\"既可以提交\",{\"1\":{\"1113\":1}}],[\"既可以使用直接内存\",{\"1\":{\"826\":1}}],[\"既可以作为输入参数\",{\"1\":{\"631\":1}}],[\"既可以看成是无序的列表\",{\"1\":{\"66\":1}}],[\"既可批量消费也可逐条消费\",{\"1\":{\"480\":1}}],[\"既没有指定\",{\"1\":{\"452\":1}}],[\"既是一个类\",{\"1\":{\"298\":1}}],[\"必须出现在2之后\",{\"1\":{\"1675\":1}}],[\"必须是原子的\",{\"1\":{\"1582\":1}}],[\"必须是数字\",{\"1\":{\"656\":1}}],[\"必须返回相同的值\",{\"1\":{\"1535\":1}}],[\"必须要传播到其他核心的\",{\"1\":{\"1435\":1}}],[\"必须要禁止其他节点的读写操作\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"必须等窗口\",{\"1\":{\"1412\":1}}],[\"必须重新下载整个大资源\",{\"1\":{\"1400\":1}}],[\"必须重写对象的hashcode\",{\"1\":{\"304\":1}}],[\"必须设置过期时间\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"必须主服务器的requirepass和从服务器的masterauth同时设置或同时不设置\",{\"1\":{\"936\":1}}],[\"必须\",{\"1\":{\"829\":2}}],[\"必须工作在非阻塞模式\",{\"1\":{\"785\":1}}],[\"必须通过systempath指定\",{\"1\":{\"1632\":1}}],[\"必须通过\",{\"1\":{\"776\":1}}],[\"必须通过当前同步锁对象进行调用\",{\"1\":{\"331\":1}}],[\"必须使所有数据都保持一致状态\",{\"1\":{\"735\":1}}],[\"必须使用表别名\",{\"1\":{\"605\":1}}],[\"必须最左边的连续索引列都是等值比较才生效\",{\"1\":{\"710\":1}}],[\"必须有且只有一个\",{\"1\":{\"699\":1}}],[\"必须对页进行分裂操作\",{\"1\":{\"615\":1}}],[\"必须的\",{\"1\":{\"488\":1}}],[\"必须先保证\",{\"1\":{\"985\":1}}],[\"必须先声明普通变量\",{\"1\":{\"634\":1}}],[\"必须先自定义一个全局唯一的\",{\"1\":{\"461\":1}}],[\"必须先有外部类对象\",{\"1\":{\"296\":1}}],[\"必须开启幂等性\",{\"1\":{\"461\":1}}],[\"必须在其他核心看起来顺序是一样的\",{\"1\":{\"1435\":1}}],[\"必须在事务提交之前将所有修改的页面刷新到磁盘\",{\"1\":{\"738\":1}}],[\"必须在\",{\"1\":{\"365\":1}}],[\"必须实现serializable序列化接口\",{\"1\":{\"321\":2}}],[\"必须刷新\",{\"1\":{\"317\":1,\"318\":1}}],[\"必须指定键的比较规则\",{\"1\":{\"305\":1}}],[\"必须指定比较规则\",{\"1\":{\"304\":1}}],[\"必须不在\",{\"1\":{\"8\":1}}],[\"缺少灵活性\",{\"1\":{\"1610\":1}}],[\"缺页中断返回到该指令的开始重新执行\",{\"1\":{\"1471\":1}}],[\"缺页中断在指令执行\",{\"1\":{\"1471\":1}}],[\"缺页中断和一般中断的区别\",{\"1\":{\"1471\":1}}],[\"缺陷\",{\"1\":{\"1404\":1,\"1443\":1,\"1613\":1}}],[\"缺省参数则没有字符数\",{\"1\":{\"1685\":1}}],[\"缺省是当前分支\",{\"1\":{\"1333\":1}}],[\"缺省\",{\"1\":{\"291\":2}}],[\"缺点就是准入门槛较高\",{\"1\":{\"1810\":1}}],[\"缺点就是性能开销大\",{\"1\":{\"1629\":1}}],[\"缺点当进程中的一个线程崩溃时\",{\"1\":{\"1451\":1}}],[\"缺点是需要开会员\",{\"1\":{\"1805\":1}}],[\"缺点是需要移动大量对象\",{\"1\":{\"170\":1}}],[\"缺点是配置较为复杂\",{\"1\":{\"1590\":1}}],[\"缺点是在发生故障转移时可能会出现数据丢失的情况\",{\"1\":{\"1589\":1}}],[\"缺点是主节点宕机后\",{\"1\":{\"1588\":1}}],[\"缺点是占用空间大\",{\"1\":{\"1577\":1}}],[\"缺点是存在网络延迟和复杂性的提升\",{\"1\":{\"1254\":1}}],[\"缺点是数据拷贝耗费性能\",{\"1\":{\"788\":1}}],[\"缺点是\",{\"1\":{\"788\":1}}],[\"缺点是效率低\",{\"1\":{\"788\":1}}],[\"缺点是浪费带宽\",{\"1\":{\"788\":1}}],[\"缺点是可能会在没有数据时一直拉取空数据\",{\"1\":{\"480\":1}}],[\"缺点是无法解决循环引用的问题\",{\"1\":{\"223\":1}}],[\"缺点影响不大\",{\"1\":{\"21\":1}}],[\"缺点\",{\"0\":{\"272\":1,\"1610\":1},\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"327\":1,\"328\":1,\"329\":1,\"697\":1,\"833\":1,\"841\":1,\"842\":1,\"843\":1,\"1404\":1,\"1428\":1,\"1443\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1461\":1,\"1462\":1,\"1488\":2,\"1523\":3,\"1525\":1,\"1532\":2,\"1625\":1,\"1811\":1}}],[\"浮动垃圾\",{\"1\":{\"1525\":1}}],[\"浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾\",{\"1\":{\"176\":1}}],[\"浮点数存储\",{\"1\":{\"1438\":1}}],[\"浮点型\",{\"0\":{\"662\":1}}],[\"浮点型强转成整型\",{\"1\":{\"287\":1}}],[\"溢出队列的请求将被拒绝\",{\"1\":{\"856\":1}}],[\"溢出\",{\"1\":{\"287\":1}}],[\"小分队全程没有吸氧也爬上去了\",{\"1\":{\"1846\":1}}],[\"小羊羔\",{\"1\":{\"1843\":1}}],[\"小套\",{\"1\":{\"1828\":1}}],[\"小时候都没怎么出去玩过\",{\"1\":{\"1816\":1}}],[\"小时才会发现该连接已失效\",{\"1\":{\"1409\":1}}],[\"小数乘\",{\"1\":{\"1438\":1}}],[\"小小总结一下\",{\"1\":{\"1120\":1}}],[\"小\",{\"1\":{\"664\":1}}],[\"小写\",{\"1\":{\"593\":1}}],[\"小昭\",{\"1\":{\"579\":1}}],[\"小一万字+14张图读懂锁机制\",{\"1\":{\"565\":1}}],[\"小型传输\",{\"1\":{\"407\":1}}],[\"小爱同学就可以视为是一个门面模式的实例\",{\"1\":{\"373\":1}}],[\"小爱同学再去操控对应的家电\",{\"1\":{\"373\":1}}],[\"小于0阻塞\",{\"1\":{\"1463\":1}}],[\"小于实际发送数据量\",{\"1\":{\"839\":1}}],[\"小于等于0唤醒线程\",{\"1\":{\"1463\":1}}],[\"小于等于\",{\"1\":{\"583\":1}}],[\"小于\",{\"1\":{\"357\":1,\"583\":1,\"1174\":1,\"1683\":1}}],[\"小范围类型的变量会自动转换成较大范围的类型再运算\",{\"1\":{\"287\":1}}],[\"小三类容量\",{\"1\":{\"179\":1}}],[\"混合前两种\",{\"1\":{\"1556\":1}}],[\"混合加密\",{\"1\":{\"1401\":1}}],[\"混合了statement和row两种格式\",{\"1\":{\"643\":1}}],[\"混合线程实现\",{\"1\":{\"280\":1}}],[\"混合线程是指同时具有内核线程和用户线程特性的线程模型\",{\"1\":{\"280\":1}}],[\"混合线程\",{\"0\":{\"280\":1},\"1\":{\"277\":1}}],[\"混合收集\",{\"1\":{\"171\":1,\"1525\":1}}],[\"又开始打鸟\",{\"1\":{\"1846\":1}}],[\"又沿着盘山公路拐啊拐\",{\"1\":{\"1844\":1}}],[\"又被打压反反复复\",{\"1\":{\"1837\":1}}],[\"又一咬牙一跺脚\",{\"1\":{\"1828\":1}}],[\"又错峰去了趟古都西安\",{\"1\":{\"1825\":1}}],[\"又分裂出新教\",{\"1\":{\"1761\":1}}],[\"又分两个模式\",{\"1\":{\"477\":1}}],[\"又做平台模式\",{\"1\":{\"1726\":1}}],[\"又是擦玻璃\",{\"1\":{\"1833\":1}}],[\"又是完全不一样的风土人情\",{\"1\":{\"1825\":1}}],[\"又是平台的角色\",{\"1\":{\"1726\":1}}],[\"又是一大块内容了\",{\"1\":{\"1136\":1}}],[\"又或者同一个值的精确匹配出现了两次\",{\"1\":{\"1712\":1}}],[\"又依赖了\",{\"1\":{\"1599\":1}}],[\"又叫\",{\"1\":{\"1283\":1}}],[\"又继承自\",{\"1\":{\"822\":1}}],[\"又不具备\",{\"1\":{\"799\":1}}],[\"又会有新的问题\",{\"1\":{\"782\":1}}],[\"又可以分为以下两种\",{\"1\":{\"699\":1}}],[\"又可以独立调度\",{\"1\":{\"277\":1}}],[\"又称子查询\",{\"1\":{\"607\":1}}],[\"又称java标注\",{\"1\":{\"348\":1}}],[\"又来一套\",{\"1\":{\"82\":1}}],[\"死信队列\",{\"1\":{\"1629\":2}}],[\"死信队列dead\",{\"1\":{\"1629\":1}}],[\"死信交换机\",{\"1\":{\"425\":1}}],[\"死信将被发送到指定的\",{\"1\":{\"425\":1}}],[\"死信\",{\"0\":{\"425\":1}}],[\"死信路由实现延迟队列\",{\"1\":{\"423\":1}}],[\"死代码删除\",{\"1\":{\"274\":1}}],[\"死锁条件\",{\"1\":{\"1466\":1}}],[\"死锁\",{\"0\":{\"1466\":1},\"1\":{\"134\":1,\"1466\":1}}],[\"专业术语\",{\"0\":{\"1738\":1}}],[\"专业术语叫运价\",{\"1\":{\"1732\":1}}],[\"专业性又非常强\",{\"1\":{\"1721\":1}}],[\"专门处理\",{\"1\":{\"791\":1}}],[\"专门面向服务端的典型应用场景\",{\"1\":{\"269\":1}}],[\"专注于提供更低的垃圾收集停顿时间\",{\"1\":{\"174\":1}}],[\"做事情的时候\",{\"1\":{\"1767\":1}}],[\"做一个过滤并且去重\",{\"1\":{\"1598\":1}}],[\"做一些后置的清理工作\",{\"1\":{\"821\":1}}],[\"做一些处理\",{\"1\":{\"420\":1}}],[\"做好动静分离\",{\"1\":{\"1375\":1}}],[\"做基础校验\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"做出更明智的决策\",{\"1\":{\"1211\":1}}],[\"做出应答\",{\"1\":{\"450\":1}}],[\"做匹配\",{\"1\":{\"1058\":1,\"1380\":1}}],[\"做代理\",{\"1\":{\"1016\":1}}],[\"做处理\",{\"1\":{\"1012\":1,\"1245\":1}}],[\"做了进一步的扩展\",{\"1\":{\"822\":1}}],[\"做了进一步的优化\",{\"1\":{\"802\":1}}],[\"做主键或者是其他的自然主键\",{\"1\":{\"615\":1}}],[\"做映射\",{\"1\":{\"529\":1}}],[\"做具体处理\",{\"1\":{\"484\":1}}],[\"做窥孔优化\",{\"1\":{\"269\":1}}],[\"做字典排序\",{\"1\":{\"61\":1}}],[\"阶段间前后依赖\",{\"1\":{\"1632\":1}}],[\"阶段预留的业务资源\",{\"1\":{\"1284\":1}}],[\"阶段可能会重复执行\",{\"1\":{\"1284\":2}}],[\"阶段准备的资源来完成业务处理\",{\"1\":{\"1284\":1}}],[\"阶段日志\",{\"1\":{\"1283\":1}}],[\"阶段二\",{\"1\":{\"747\":1}}],[\"阶段一\",{\"1\":{\"747\":1}}],[\"阶段3\",{\"1\":{\"269\":1}}],[\"阶段2\",{\"1\":{\"269\":1}}],[\"阶段1\",{\"1\":{\"269\":1}}],[\"采取链表\",{\"1\":{\"1476\":1}}],[\"采取了折衷的页级锁\",{\"1\":{\"563\":1}}],[\"采样估计\",{\"1\":{\"1411\":1}}],[\"采样页面数\",{\"1\":{\"720\":1}}],[\"采样简单高效\",{\"1\":{\"268\":1}}],[\"采用的是\",{\"1\":{\"1573\":1}}],[\"采用的是另一种方式pull\",{\"1\":{\"480\":1}}],[\"采用\",{\"1\":{\"1110\":1,\"1499\":3}}],[\"采用互斥的方式让同一时刻只有一个线程能够持有对象锁\",{\"1\":{\"1072\":1}}],[\"采用了引用计数法来控制回收内存\",{\"1\":{\"829\":1}}],[\"采用了基于\",{\"1\":{\"2\":1}}],[\"采用二级索引进行等值查询或匹配null的访问方式\",{\"1\":{\"710\":1}}],[\"采用二级索引进行等值查询的访问方式\",{\"1\":{\"710\":1}}],[\"采用零拷贝原理实现超大的消息堆积能力\",{\"1\":{\"428\":1}}],[\"采用非阻塞模式后\",{\"1\":{\"391\":1}}],[\"采用分代收集和区域化的思想\",{\"1\":{\"177\":1}}],[\"采用标记\",{\"1\":{\"173\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"179\":1}}],[\"周四把自己的软资产交接\",{\"1\":{\"1786\":1}}],[\"周四的团建\",{\"1\":{\"1781\":1}}],[\"周三\",{\"1\":{\"1781\":1}}],[\"周二\",{\"1\":{\"1781\":1}}],[\"周一中午刚睡醒就收到团子的意向了\",{\"1\":{\"1785\":1}}],[\"周一\",{\"1\":{\"1781\":1}}],[\"周末一有事就顾不上了\",{\"1\":{\"1826\":1}}],[\"周末才能有时间在家好好躺着休息\",{\"1\":{\"1825\":1}}],[\"周末下大暴雨\",{\"1\":{\"1781\":1}}],[\"周末躺着\",{\"1\":{\"1779\":1}}],[\"周末也就逛了个\",{\"1\":{\"1777\":1}}],[\"周五终于上线\",{\"1\":{\"1779\":1}}],[\"周五开始上需求了嘿嘿嘿\",{\"1\":{\"1775\":1}}],[\"周五的时候还有工作量\",{\"1\":{\"1773\":1}}],[\"周报一堆麻烦事\",{\"1\":{\"1773\":1}}],[\"周转时间是进程运行+阻塞时间+等待时间的总和\",{\"1\":{\"1470\":1}}],[\"周转时间\",{\"1\":{\"1470\":1}}],[\"周期性操作\",{\"1\":{\"1572\":1}}],[\"周期性事件\",{\"1\":{\"920\":1}}],[\"周期性检查各个线程的调用栈顶\",{\"1\":{\"268\":1}}],[\"周知端口\",{\"1\":{\"340\":1}}],[\"周杰轮\",{\"1\":{\"126\":2,\"1226\":1}}],[\"第十一周\",{\"0\":{\"1785\":1}}],[\"第十周\",{\"0\":{\"1784\":1}}],[\"第九周\",{\"0\":{\"1783\":1}}],[\"第九航权\",{\"0\":{\"1750\":1}}],[\"第八周\",{\"0\":{\"1782\":1}}],[\"第八航权\",{\"0\":{\"1749\":1}}],[\"第七周\",{\"0\":{\"1781\":1}}],[\"第七航权\",{\"0\":{\"1748\":1}}],[\"第六周\",{\"0\":{\"1780\":1}}],[\"第六航权\",{\"0\":{\"1747\":1}}],[\"第五周\",{\"0\":{\"1779\":1}}],[\"第五航权是针对两个国家的双边协定而言的\",{\"1\":{\"1746\":1}}],[\"第五航权\",{\"0\":{\"1746\":1}}],[\"第四声\",{\"1\":{\"1833\":1}}],[\"第四周\",{\"0\":{\"1778\":1}}],[\"第四航权\",{\"0\":{\"1745\":1}}],[\"第四次\",{\"1\":{\"1402\":1}}],[\"第三极\",{\"0\":{\"1832\":1},\"1\":{\"1825\":1}}],[\"第三周\",{\"0\":{\"1777\":1}}],[\"第三航权和第四航权是同时具备的\",{\"1\":{\"1745\":1}}],[\"第三航权\",{\"0\":{\"1744\":1}}],[\"第三范式\",{\"1\":{\"1538\":1}}],[\"第三次\",{\"1\":{\"1402\":1}}],[\"第三次握手\",{\"1\":{\"856\":1,\"1409\":1}}],[\"第二天去逛了逛甘肃省博物馆\",{\"1\":{\"1848\":1}}],[\"第二周啦\",{\"0\":{\"1775\":1}}],[\"第二航权\",{\"0\":{\"1743\":1}}],[\"第二步\",{\"1\":{\"1599\":1}}],[\"第二范式\",{\"1\":{\"1538\":1}}],[\"第二次\",{\"1\":{\"1402\":1}}],[\"第二次握手\",{\"1\":{\"856\":1,\"1409\":1}}],[\"第二列是工作区状态\",{\"1\":{\"1316\":1}}],[\"第二列端口用于集群选举\",{\"1\":{\"1196\":1}}],[\"第二层是由thrift编译器自动生成的代码\",{\"1\":{\"1126\":1}}],[\"第二层架构主要完成大多数的核心服务功能\",{\"1\":{\"570\":1}}],[\"第二个是元素分值\",{\"1\":{\"900\":1}}],[\"第1~32号属于一类\",{\"1\":{\"751\":1}}],[\"第1层\",{\"1\":{\"267\":1}}],[\"第33~127号属于一类\",{\"1\":{\"751\":1}}],[\"第3层\",{\"1\":{\"267\":1}}],[\"第0号\",{\"1\":{\"751\":1}}],[\"第0层\",{\"1\":{\"267\":1}}],[\"第一件事就是用美团外卖点了3瓶氧气罐\",{\"1\":{\"1834\":1}}],[\"第一台相机\",{\"0\":{\"1799\":1}}],[\"第一周入职的三天\",{\"1\":{\"1773\":1}}],[\"第一航权即为飞越非本国情报区的权利\",{\"1\":{\"1742\":1}}],[\"第一航权\",{\"0\":{\"1742\":1}}],[\"第一范式\",{\"1\":{\"1538\":1}}],[\"第一列是暂存区状态\",{\"1\":{\"1316\":1}}],[\"第一个周末\",{\"0\":{\"1774\":1}}],[\"第一个任务\",{\"1\":{\"1114\":1}}],[\"第一个是元素成员\",{\"1\":{\"900\":1}}],[\"第一阶段仅做delete\",{\"1\":{\"754\":1}}],[\"第一天undo日志起始位置\",{\"1\":{\"749\":1}}],[\"第一条消息的\",{\"1\":{\"475\":1}}],[\"第一行文档声明\",{\"1\":{\"357\":1}}],[\"第一次见到牦牛和藏羚羊\",{\"1\":{\"1833\":1}}],[\"第一次亲眼见到了雪山\",{\"1\":{\"1833\":1}}],[\"第一次坐海上轮渡\",{\"1\":{\"1825\":1}}],[\"第一次在山上露营\",{\"1\":{\"1825\":1}}],[\"第一次尝试槟榔\",{\"1\":{\"1825\":1}}],[\"第一次一年去这么多城市\",{\"1\":{\"1816\":1}}],[\"第一次骑上了公路车\",{\"1\":{\"1796\":1}}],[\"第一次\",{\"1\":{\"1402\":1}}],[\"第一次上锁时使用\",{\"1\":{\"1077\":1}}],[\"第一次握手\",{\"1\":{\"856\":1,\"1409\":1}}],[\"第一次调用时随机生成一个整数\",{\"1\":{\"452\":1}}],[\"第一次授权登录\",{\"1\":{\"15\":1}}],[\"第一次有节点入队才初始化\",{\"1\":{\"6\":1}}],[\"第4层\",{\"1\":{\"267\":1}}],[\"第2层\",{\"1\":{\"267\":1}}],[\"某国或地区的航空公司在协议国或地区领域内的两个或两个以上机场间载运客货的权利\",{\"1\":{\"1749\":1}}],[\"某国或地区的航空公司在境外两国或地区间载运客货\",{\"1\":{\"1747\":1}}],[\"某一时刻某一线程只会处于其中一种状态\",{\"1\":{\"1089\":1}}],[\"某一个或多个线程因为种种原因无法获得所需要的资源\",{\"1\":{\"134\":1}}],[\"某个\",{\"1\":{\"1435\":2}}],[\"某个流发生丢包仅影响该流\",{\"1\":{\"1404\":1}}],[\"某个sentinel被超过半数的sentinel设置为局部领头\",{\"1\":{\"942\":1}}],[\"某个命令被什么键执行\",{\"1\":{\"909\":1}}],[\"某个键执行了什么命令\",{\"1\":{\"909\":1}}],[\"某个列名\",{\"1\":{\"728\":1}}],[\"某个follower由于某种故障一直无法同步\",{\"1\":{\"460\":1}}],[\"某个任何的执行情况不会影响其它定时任务\",{\"1\":{\"334\":1}}],[\"某些语义只能在编译期\",{\"1\":{\"262\":1}}],[\"插入\",{\"1\":{\"988\":1,\"1385\":1}}],[\"插入新纪录时会复用可重用空间\",{\"1\":{\"689\":1}}],[\"插入或删除多行的事务\",{\"1\":{\"638\":1}}],[\"插入数据\",{\"1\":{\"591\":1}}],[\"插入数据时\",{\"1\":{\"578\":1,\"615\":1}}],[\"插入的数据大小应该在字段的规定范围内\",{\"1\":{\"578\":1}}],[\"插入意向锁表示一种插入的意图\",{\"1\":{\"561\":1}}],[\"插入意向锁\",{\"0\":{\"561\":1},\"1\":{\"561\":1}}],[\"插入式注解器可以看作一组编译器的插件\",{\"1\":{\"260\":1}}],[\"插件\",{\"1\":{\"1629\":1}}],[\"插件可以更方便的操作\",{\"1\":{\"1218\":1}}],[\"插件机制\",{\"1\":{\"412\":1}}],[\"插件工作时可以读取\",{\"1\":{\"260\":1}}],[\"插件支持\",{\"1\":{\"237\":1,\"238\":1}}],[\"填0\",{\"1\":{\"1461\":1}}],[\"填充至\",{\"1\":{\"1074\":1}}],[\"填充失败的结果\",{\"1\":{\"822\":1}}],[\"填充成功的结果\",{\"1\":{\"822\":1}}],[\"填充符号表\",{\"0\":{\"259\":1},\"1\":{\"260\":1}}],[\"填入内容在a\",{\"1\":{\"105\":1}}],[\"双堆法\",{\"1\":{\"1658\":1}}],[\"双重校验锁\",{\"1\":{\"1645\":1}}],[\"双重检查\",{\"1\":{\"1261\":1}}],[\"双方就知道对方的信息了\",{\"1\":{\"1861\":1}}],[\"双方就进行\",{\"1\":{\"1394\":1}}],[\"双方都拿到全部列表后\",{\"1\":{\"1860\":1}}],[\"双方各自维护发送窗口和接收窗口\",{\"1\":{\"1412\":1}}],[\"双方维护最近一次收到数据包的时间戳\",{\"1\":{\"1410\":1}}],[\"双散列函数探查法\",{\"1\":{\"1389\":1}}],[\"双点区间\",{\"1\":{\"1342\":1}}],[\"双语版\",{\"1\":{\"1246\":1}}],[\"双写加锁\",{\"0\":{\"1239\":1}}],[\"双写阶段\",{\"0\":{\"1235\":1}}],[\"双写\",{\"1\":{\"1234\":1}}],[\"双写缓冲区\",{\"1\":{\"639\":1}}],[\"双端队列\",{\"0\":{\"988\":1}}],[\"双端\",{\"1\":{\"880\":1}}],[\"双精度浮点数\",{\"1\":{\"662\":1}}],[\"双主双从示意图\",{\"1\":{\"658\":1}}],[\"双向通道不冲突\",{\"1\":{\"760\":1}}],[\"双向连接的网络连接保证\",{\"1\":{\"407\":1}}],[\"双向链表的表头\",{\"1\":{\"196\":1}}],[\"双向链表结构\",{\"1\":{\"195\":1}}],[\"双链表记录存储顺序\",{\"1\":{\"305\":1}}],[\"双引号创建字符串\",{\"1\":{\"300\":1}}],[\"双亲委派模型\",{\"1\":{\"254\":1,\"1528\":1}}],[\"扩充内存\",{\"1\":{\"1136\":1}}],[\"扩充太多的机器利用率又太低\",{\"1\":{\"400\":1}}],[\"扩容完成\",{\"1\":{\"1497\":1}}],[\"扩容的时候\",{\"1\":{\"1497\":1}}],[\"扩容的大小不能超过\",{\"1\":{\"828\":1}}],[\"扩容\",{\"1\":{\"1374\":1,\"1494\":1}}],[\"扩容机制主要由内部的\",{\"1\":{\"1493\":1}}],[\"扩容机制\",{\"1\":{\"828\":1}}],[\"扩容对用户透明\",{\"1\":{\"431\":1}}],[\"扩容都不会丢失\",{\"1\":{\"22\":1}}],[\"扩展目标对象的功能\",{\"1\":{\"1532\":1}}],[\"扩展整数集合底层数组的空间大小\",{\"1\":{\"889\":1}}],[\"扩展\",{\"1\":{\"883\":2}}],[\"扩展2\",{\"1\":{\"839\":1}}],[\"扩展1\",{\"1\":{\"839\":1}}],[\"扩展性\",{\"1\":{\"411\":1}}],[\"扩展性强\",{\"1\":{\"328\":1,\"329\":1}}],[\"扩展类加载器是\",{\"1\":{\"254\":1}}],[\"扩展类加载器负责加载java的扩展类库\",{\"1\":{\"254\":1}}],[\"扩展类加载器\",{\"1\":{\"254\":1,\"1528\":1}}],[\"父提交的父提交\",{\"1\":{\"1341\":1}}],[\"父对象\",{\"1\":{\"1332\":1}}],[\"父线程组\",{\"1\":{\"1099\":1}}],[\"父表有变更时\",{\"1\":{\"599\":1}}],[\"父\",{\"1\":{\"253\":1}}],[\"父类<init>\",{\"1\":{\"1521\":1}}],[\"父类没有报错\",{\"1\":{\"291\":1}}],[\"父类索引表示当前类的直接父类在常量池中的索引\",{\"1\":{\"240\":1}}],[\"父类索引和接口索引\",{\"1\":{\"240\":1}}],[\"父类\",{\"1\":{\"240\":1,\"851\":1,\"1526\":1}}],[\"父类定义变量在子类变量之前\",{\"1\":{\"215\":1}}],[\"停机维护\",{\"1\":{\"1811\":1}}],[\"停机问题\",{\"1\":{\"250\":1}}],[\"停止服务\",{\"1\":{\"1636\":1}}],[\"停止服务器\",{\"1\":{\"966\":1}}],[\"停止全部\",{\"1\":{\"1217\":1}}],[\"停止执行脚本\",{\"1\":{\"966\":2}}],[\"停止线程的运行\",{\"1\":{\"817\":1}}],[\"停止\",{\"1\":{\"446\":1,\"1165\":1,\"1217\":3,\"1631\":1,\"1634\":1}}],[\"停止迭代\",{\"1\":{\"38\":1}}],[\"符合条件\",{\"1\":{\"1669\":1,\"1672\":1,\"1675\":1}}],[\"符合所有的预设约束\",{\"1\":{\"1032\":1}}],[\"符合定义和要求\",{\"1\":{\"961\":1}}],[\"符合索引的排序顺序\",{\"1\":{\"616\":1}}],[\"符合逻辑\",{\"1\":{\"250\":1}}],[\"符号位\",{\"1\":{\"1438\":1}}],[\"符号链接\",{\"1\":{\"1350\":1}}],[\"符号表\",{\"1\":{\"264\":1}}],[\"符号表登记的信息在后续语义分析\",{\"1\":{\"259\":1}}],[\"符号表是由一组符号地址和符号信息构成的数据结构\",{\"1\":{\"259\":1}}],[\"符号可以是任何形式的字面量\",{\"1\":{\"252\":1}}],[\"符号引用的验证\",{\"1\":{\"1527\":1}}],[\"符号引用是以一组符号来描述所引用的目标\",{\"1\":{\"252\":1}}],[\"符号引用验证\",{\"1\":{\"250\":1}}],[\"符号引用\",{\"1\":{\"211\":1}}],[\"激活另一个阶段\",{\"1\":{\"248\":1}}],[\"首部就有40字节\",{\"1\":{\"1412\":1}}],[\"首要原因是防止旧的\",{\"1\":{\"1409\":1}}],[\"首个mtr日志组的偏移量\",{\"1\":{\"739\":1}}],[\"首次调用\",{\"1\":{\"871\":1}}],[\"首次匹配\",{\"1\":{\"726\":1}}],[\"首次使用的情况包括\",{\"1\":{\"247\":1}}],[\"首次使用时加载\",{\"1\":{\"247\":1}}],[\"首字母小写的非限定类目作为它的别名\",{\"1\":{\"520\":1}}],[\"首先一个是要花钱开会员\",{\"1\":{\"1803\":1}}],[\"首先我们需要在\",{\"1\":{\"1791\":1}}],[\"首先\",{\"1\":{\"1767\":1}}],[\"首先是航司会定期发布航班计划\",{\"1\":{\"1722\":1}}],[\"首先从main找到run\",{\"1\":{\"1607\":1}}],[\"首先从一级缓存中获取\",{\"1\":{\"1599\":1}}],[\"首先将数据页加载到\",{\"1\":{\"1554\":1}}],[\"首先将当前的\",{\"1\":{\"25\":1}}],[\"首先根据\",{\"1\":{\"1497\":1}}],[\"首先根据目标\",{\"1\":{\"476\":1}}],[\"首先服务端主动监听某个端口\",{\"1\":{\"1409\":1}}],[\"首先要知道\",{\"1\":{\"1344\":1}}],[\"首先第一阶段\",{\"1\":{\"1239\":1}}],[\"首先第一步是判断是否有必要执行\",{\"1\":{\"196\":1}}],[\"首先需要梳理出所有的缓存类型\",{\"1\":{\"1234\":1}}],[\"首先修改wsl下mysql的配置\",{\"1\":{\"1150\":1}}],[\"首先会执行一次\",{\"1\":{\"1524\":1}}],[\"首先会根据默认容量和存储所需容量的较大者确定一个最小扩容容量mincapacity\",{\"1\":{\"1493\":1}}],[\"首先会找到两个分支的共同祖先\",{\"1\":{\"1337\":1}}],[\"首先会尝试\",{\"1\":{\"1076\":1}}],[\"首先会进行自旋重试上锁\",{\"1\":{\"1074\":1}}],[\"首先传入\",{\"1\":{\"1012\":1}}],[\"首先引入\",{\"1\":{\"810\":1}}],[\"首先派生表和外层表合并\",{\"1\":{\"726\":1}}],[\"首先确定第一个需要查询的表\",{\"1\":{\"713\":1}}],[\"首先检查该记录是否有对应外键\",{\"1\":{\"599\":4}}],[\"首先检查该指令的参数是否能在常量池中定位到一个类的符号引用\",{\"1\":{\"214\":1}}],[\"首先读取在\",{\"1\":{\"518\":1}}],[\"首先对同一个\",{\"1\":{\"495\":1}}],[\"首先得先介绍\",{\"1\":{\"483\":1}}],[\"首先标记出需要回收的对象\",{\"1\":{\"168\":1,\"170\":1}}],[\"连通性检查\",{\"1\":{\"1860\":1}}],[\"连续的国内运输\",{\"0\":{\"1749\":1}}],[\"连续的二进制位\",{\"1\":{\"1570\":1}}],[\"连续的java堆划分为多个大小相等的独立region\",{\"1\":{\"177\":1,\"1525\":1}}],[\"连续存放\",{\"1\":{\"1476\":1}}],[\"连锁更新\",{\"0\":{\"893\":1}}],[\"连接上可以有上千条信道复用\",{\"1\":{\"1629\":1}}],[\"连接上的虚拟连接\",{\"1\":{\"1629\":1}}],[\"连接方式\",{\"1\":{\"1566\":1}}],[\"连接时\",{\"1\":{\"1487\":1}}],[\"连接将会一直保持存在\",{\"1\":{\"1419\":1}}],[\"连接已死亡\",{\"1\":{\"1419\":1}}],[\"连接一直没有数据交互\",{\"1\":{\"1419\":1}}],[\"连接包含多个\",{\"1\":{\"1404\":1}}],[\"连接建立需要三次握手\",{\"1\":{\"1402\":1}}],[\"连接建立后\",{\"1\":{\"1394\":1}}],[\"连接建立成功后\",{\"1\":{\"813\":1}}],[\"连接查看进程信息\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"连接查询中对被驱动表使用主键或唯一二级索引列进行等值查询称为eq\",{\"1\":{\"714\":1}}],[\"连接查询\",{\"1\":{\"651\":1}}],[\"连接主库\",{\"1\":{\"1155\":1}}],[\"连接主库的密码\",{\"1\":{\"649\":1}}],[\"连接主库的用户名\",{\"1\":{\"649\":1}}],[\"连接池\",{\"1\":{\"1104\":1}}],[\"连接应答处理器\",{\"1\":{\"919\":1}}],[\"连接仅建立了一部分\",{\"1\":{\"856\":1}}],[\"连接握手的过程\",{\"1\":{\"856\":1}}],[\"连接是个异步方法\",{\"1\":{\"820\":1}}],[\"连接后向客户端发送内容\",{\"1\":{\"789\":1}}],[\"连接集合\",{\"1\":{\"782\":1,\"783\":1}}],[\"连接原理\",{\"0\":{\"714\":1}}],[\"连接的条件\",{\"1\":{\"703\":1}}],[\"连接选项\",{\"1\":{\"675\":1}}],[\"连接管理\",{\"1\":{\"672\":1}}],[\"连接\",{\"0\":{\"1149\":1,\"1199\":1},\"1\":{\"657\":1,\"764\":1,\"856\":1,\"1147\":1,\"1388\":1,\"1394\":1,\"1420\":2}}],[\"连接条件\",{\"1\":{\"603\":1}}],[\"连接层\",{\"1\":{\"570\":1}}],[\"连接mysql\",{\"1\":{\"569\":1}}],[\"连接配置\",{\"1\":{\"508\":1}}],[\"连接灵活性\",{\"1\":{\"434\":1}}],[\"连接器会到权限表中查出所拥有的权限\",{\"1\":{\"570\":1}}],[\"连接器分两种\",{\"1\":{\"433\":1}}],[\"连接器\",{\"1\":{\"433\":1,\"570\":1}}],[\"连接成功返回socket对象与客户端建立端到端通信\",{\"1\":{\"343\":1}}],[\"连接和初始化过程都是在程序运行期完成的\",{\"1\":{\"246\":1}}],[\"去哪儿\",{\"1\":{\"1751\":1}}],[\"去哪儿就是ota平台\",{\"1\":{\"1726\":1}}],[\"去匹配查找能处理的\",{\"1\":{\"1605\":1}}],[\"去查找\",{\"1\":{\"1546\":1}}],[\"去查找定义\",{\"1\":{\"528\":1}}],[\"去掉本身的\",{\"1\":{\"1599\":1}}],[\"去掉\",{\"1\":{\"1479\":1}}],[\"去掉字符串头部和尾部的空格\",{\"1\":{\"593\":1}}],[\"去重统计\",{\"1\":{\"1631\":1}}],[\"去重等\",{\"1\":{\"1390\":1}}],[\"去重演示\",{\"1\":{\"126\":1}}],[\"去尝试中断空闲线程\",{\"1\":{\"1114\":1}}],[\"去加工数据\",{\"1\":{\"818\":1}}],[\"去调用\",{\"1\":{\"799\":1}}],[\"去除空格\",{\"1\":{\"593\":1}}],[\"去除重复记录\",{\"1\":{\"582\":1}}],[\"去除无效的关键字\",{\"1\":{\"537\":1}}],[\"去除冗余等\",{\"1\":{\"242\":1}}],[\"两位\",{\"1\":{\"1666\":3}}],[\"两大原则\",{\"1\":{\"1632\":1}}],[\"两阶段\",{\"1\":{\"1556\":1}}],[\"两阶段提交\",{\"1\":{\"1283\":1,\"1556\":1}}],[\"两方面\",{\"1\":{\"1479\":1}}],[\"两类报文\",{\"1\":{\"1427\":1}}],[\"两类思想又分别对应回溯算法和动态规划\",{\"1\":{\"999\":1}}],[\"两次握手只能保证服务端确认了客户端的序列号\",{\"1\":{\"1409\":1}}],[\"两行注释掉\",{\"1\":{\"1150\":1}}],[\"两者各有千秋\",{\"1\":{\"1573\":1}}],[\"两者都可以暂停线程的执行区别\",{\"1\":{\"1512\":1}}],[\"两者都使用redisobject和sdshdr结构表示字符串编码\",{\"1\":{\"896\":1}}],[\"两者同时设置以最先到期的时间为准\",{\"1\":{\"424\":1}}],[\"两份日志来保证\",{\"1\":{\"735\":1}}],[\"两条语句效果一样\",{\"1\":{\"604\":1}}],[\"两字段排序\",{\"1\":{\"586\":1}}],[\"两种命令\",{\"1\":{\"1576\":1}}],[\"两种资源共享方式\",{\"1\":{\"1516\":1}}],[\"两种事件触发模式\",{\"1\":{\"1487\":1}}],[\"两种方式\",{\"1\":{\"1445\":1}}],[\"两种头部实现\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"两种格式\",{\"1\":{\"1129\":1}}],[\"两种情况都对应trx\",{\"1\":{\"748\":1}}],[\"两种日志的使用\",{\"1\":{\"376\":1}}],[\"两种创建过程\",{\"0\":{\"300\":1}}],[\"两部分组成\",{\"1\":{\"242\":1}}],[\"两个大四的安徽女生\",{\"1\":{\"1833\":1}}],[\"两个系列占了大头\",{\"1\":{\"1817\":1}}],[\"两个16位合并统计\",{\"1\":{\"1666\":1}}],[\"两个文件分别有\",{\"1\":{\"1658\":1}}],[\"两个过程\",{\"1\":{\"1488\":1}}],[\"两个线程获取资源的顺序构成了环形链\",{\"1\":{\"1466\":1}}],[\"两个双向链表\",{\"1\":{\"1446\":1}}],[\"两个近似数相加\",{\"1\":{\"1438\":1}}],[\"两个用户消息之间插入特殊字符\",{\"1\":{\"1417\":1}}],[\"两个命令的原理\",{\"1\":{\"1344\":1}}],[\"两个月前的提交记录\",{\"1\":{\"1341\":1}}],[\"两个核心接口\",{\"1\":{\"1269\":1}}],[\"两个操作必须是原子的\",{\"1\":{\"1263\":1}}],[\"两个值\",{\"1\":{\"1154\":1}}],[\"两个异常处理器类成员\",{\"1\":{\"1096\":1}}],[\"两个指令实现上锁和解锁的\",{\"1\":{\"1074\":1}}],[\"两个类发生循环引用时\",{\"1\":{\"1599\":1}}],[\"两个类\",{\"1\":{\"1016\":1}}],[\"两个接口\",{\"1\":{\"1006\":1}}],[\"两个字典\",{\"1\":{\"967\":1}}],[\"两个哈希表\",{\"1\":{\"883\":1}}],[\"两个哈希表的数组\",{\"1\":{\"882\":1}}],[\"两个\",{\"1\":{\"869\":1,\"1448\":1}}],[\"两个步骤\",{\"1\":{\"863\":1}}],[\"两个消息\",{\"1\":{\"846\":1}}],[\"两个虚拟行记录\",{\"1\":{\"688\":1}}],[\"两个集合a集合和b集合的所有组合情况\",{\"1\":{\"602\":1}}],[\"两个事务分别尝试插入\",{\"1\":{\"561\":1}}],[\"两个参数\",{\"1\":{\"491\":1}}],[\"两个属性\",{\"1\":{\"425\":1}}],[\"两个项目\",{\"1\":{\"376\":1}}],[\"两个对象内存图\",{\"1\":{\"359\":1}}],[\"两个引用指向同一对象\",{\"1\":{\"359\":2}}],[\"两个不同的栈帧会出现一部分重叠\",{\"1\":{\"207\":1}}],[\"两个同步器\",{\"1\":{\"156\":1,\"157\":1}}],[\"两个概念\",{\"1\":{\"82\":1}}],[\"魔数之后的4个字节表示jvm版本号\",{\"1\":{\"240\":1}}],[\"魔数的值为0xcafebabe\",{\"1\":{\"240\":1}}],[\"魔数\",{\"1\":{\"240\":1,\"848\":1,\"849\":1,\"1526\":1}}],[\"魔法数\",{\"1\":{\"95\":1}}],[\"具有优先级为\",{\"1\":{\"1792\":1}}],[\"具有快速的查找性能\",{\"1\":{\"1496\":1}}],[\"具有更高的性能和更低的资源消耗\",{\"1\":{\"1296\":1}}],[\"具有较高的灵活性和隔离性\",{\"1\":{\"1284\":1}}],[\"具有高可靠性\",{\"1\":{\"1214\":1,\"1215\":1}}],[\"具有加载\",{\"1\":{\"1011\":1,\"1379\":1}}],[\"具有写性质的脚本命令也会被复制到从服务器\",{\"1\":{\"967\":1}}],[\"具有持久性\",{\"1\":{\"961\":1}}],[\"具有很好的随机分布性和计算速度\",{\"1\":{\"883\":1}}],[\"具有直观的用户界面和灵活的扩展机制\",{\"1\":{\"238\":1}}],[\"具备集成和可运行的特征\",{\"1\":{\"1641\":1}}],[\"具备更快的重启恢复能力\",{\"1\":{\"1576\":1}}],[\"具备\",{\"1\":{\"657\":1}}],[\"具体原因见\",{\"1\":{\"1868\":1}}],[\"具体由帧率决定\",{\"1\":{\"1868\":1}}],[\"具体由进程自身处理\",{\"1\":{\"1699\":1}}],[\"具体方法\",{\"1\":{\"1861\":1}}],[\"具体实现方法\",{\"1\":{\"1563\":1}}],[\"具体实现交给实现类\",{\"1\":{\"1049\":1}}],[\"具体操作\",{\"1\":{\"1368\":1}}],[\"具体步骤包括\",{\"1\":{\"963\":1}}],[\"具体步骤\",{\"1\":{\"717\":1}}],[\"具体连接类型可分为\",{\"1\":{\"713\":1}}],[\"具体是分库\",{\"1\":{\"652\":1}}],[\"具体分为两步\",{\"1\":{\"741\":1}}],[\"具体分成三步\",{\"1\":{\"648\":1}}],[\"具体分三种\",{\"1\":{\"143\":1}}],[\"具体文件名需要再加上编号\",{\"1\":{\"643\":1}}],[\"具体语法为\",{\"1\":{\"585\":1,\"634\":1}}],[\"具体取决于\",{\"1\":{\"553\":1}}],[\"具体规则有\",{\"1\":{\"1608\":1}}],[\"具体规则\",{\"1\":{\"453\":1}}],[\"具体路由还依赖于交换器类型\",{\"1\":{\"414\":1,\"1628\":1}}],[\"具体绑定的是哪个依赖于类加载的顺序\",{\"1\":{\"383\":1}}],[\"具体怎么从日志工厂生产出\",{\"1\":{\"383\":1}}],[\"具体依赖见上面的\",{\"1\":{\"382\":1}}],[\"具体包括\",{\"1\":{\"240\":1}}],[\"具体见\",{\"1\":{\"155\":1}}],[\"具体见unsafe\",{\"1\":{\"149\":1}}],[\"具体的目录结构可以自定义\",{\"1\":{\"1870\":1}}],[\"具体的说在航司的ics系统里\",{\"1\":{\"1734\":1}}],[\"具体的实现\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"具体的实现类\",{\"1\":{\"1111\":1}}],[\"具体的监听器负责对事件是否响应\",{\"1\":{\"1379\":1}}],[\"具体的组件从左到右包括\",{\"1\":{\"1224\":1}}],[\"具体的值替换类\",{\"1\":{\"1026\":1}}],[\"具体的分库分表的策略\",{\"1\":{\"654\":1}}],[\"具体的解析逻辑在\",{\"1\":{\"541\":1}}],[\"具体的设置名\",{\"1\":{\"519\":1}}],[\"具体的\",{\"1\":{\"92\":1,\"742\":1,\"791\":1,\"1400\":1,\"1598\":1}}],[\"具体可以参考\",{\"1\":{\"59\":1}}],[\"二月\",{\"1\":{\"1825\":1}}],[\"二段性\",{\"1\":{\"1657\":1}}],[\"二分不仅适用于\",{\"1\":{\"1657\":1}}],[\"二分的本质是\",{\"1\":{\"1657\":1}}],[\"二分细节\",{\"0\":{\"1657\":1}}],[\"二分查找中\",{\"1\":{\"998\":1}}],[\"二分查找\",{\"0\":{\"998\":1},\"1\":{\"1386\":1}}],[\"二叉排序树\",{\"1\":{\"1386\":1}}],[\"二叉树的解题模式分两类\",{\"1\":{\"999\":1}}],[\"二叉树\",{\"0\":{\"999\":1},\"1\":{\"698\":1}}],[\"二阶段提交\",{\"0\":{\"1283\":1}}],[\"二期的代码可以在一期的时候一并上线\",{\"1\":{\"1236\":1}}],[\"二是集群节点中用作内部数据结构\",{\"1\":{\"885\":1}}],[\"二者均为全双工\",{\"1\":{\"760\":1}}],[\"二者的本质区别在于是否单独占用内存地址及其它系统资源\",{\"1\":{\"134\":1}}],[\"二级只能销售国内机票\",{\"1\":{\"1727\":1}}],[\"二级代理资质\",{\"1\":{\"1727\":1}}],[\"二级还没有去三级缓存找\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"二级索引都需要修改\",{\"1\":{\"746\":1}}],[\"二级索引叶子节点包含全部所需的查询条件\",{\"1\":{\"710\":1}}],[\"二级索引查找过程\",{\"1\":{\"699\":1}}],[\"二级索引的叶子节点下挂的是该字段值对应的主键值\",{\"1\":{\"699\":1}}],[\"二级索引的叶子节点保存的就是主键\",{\"1\":{\"615\":1}}],[\"二级索引\",{\"1\":{\"699\":2,\"1476\":1,\"1545\":1}}],[\"二级索引通常是非唯一的\",{\"1\":{\"638\":1}}],[\"二级缓存\",{\"1\":{\"512\":1,\"1028\":1,\"1382\":1,\"1599\":1}}],[\"二线城市\",{\"1\":{\"596\":1}}],[\"二进制最高位为\",{\"1\":{\"1658\":1}}],[\"二进制帧\",{\"1\":{\"1404\":1}}],[\"二进制程序\",{\"1\":{\"1217\":1}}],[\"二进制编码格式进行数据传输\",{\"1\":{\"1129\":1}}],[\"二进制binary\",{\"1\":{\"1129\":1}}],[\"二进制位数组\",{\"0\":{\"972\":1}}],[\"二进制安全\",{\"1\":{\"879\":1}}],[\"二进制类型\",{\"0\":{\"664\":1}}],[\"二进制日志\",{\"0\":{\"643\":1},\"1\":{\"570\":1,\"643\":1,\"1154\":1}}],[\"二进制代码\",{\"1\":{\"255\":1}}],[\"二进制格式\",{\"1\":{\"232\":1}}],[\"毫秒精度的unix时间戳\",{\"1\":{\"920\":1}}],[\"毫秒级\",{\"1\":{\"435\":3}}],[\"毫秒\",{\"1\":{\"230\":1,\"1164\":1}}],[\"毫秒值精度\",{\"1\":{\"112\":1}}],[\"秒级以内的性能要求\",{\"1\":{\"1752\":1}}],[\"秒杀读多写少\",{\"1\":{\"1375\":1}}],[\"秒杀链接加密\",{\"1\":{\"1375\":1}}],[\"秒杀服务即使自己扛不住挂掉\",{\"1\":{\"1375\":1}}],[\"秒杀设计\",{\"0\":{\"1375\":1}}],[\"秒\",{\"1\":{\"230\":1,\"332\":1,\"1799\":1}}],[\"样例\",{\"1\":{\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"234\":1,\"1261\":1}}],[\"选最小权值边\",{\"1\":{\"1388\":1}}],[\"选已连通集合到未连通集合最小权值边的顶点kruscal算法\",{\"1\":{\"1388\":1}}],[\"选中在\",{\"1\":{\"1337\":1}}],[\"选取第n个前的字符\",{\"1\":{\"1567\":1}}],[\"选取0\",{\"1\":{\"1360\":1}}],[\"选取右侧表为驱动表\",{\"1\":{\"713\":1}}],[\"选取左侧表为驱动表\",{\"1\":{\"713\":1}}],[\"选取代价最低的单表访问方法执行查询语句\",{\"1\":{\"713\":1}}],[\"选出\",{\"1\":{\"483\":1}}],[\"选举新的主节点\",{\"1\":{\"1589\":1}}],[\"选举过程中的临时角色\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"选举过程\",{\"0\":{\"1202\":1}}],[\"选举状态\",{\"1\":{\"1201\":1}}],[\"选举时节点间的投票通信端口使用\",{\"1\":{\"1171\":1}}],[\"选举方法和sentinel类似\",{\"1\":{\"948\":1}}],[\"选举产生的领头sentinel负责对已下线的主服务器执行故障转移操作\",{\"1\":{\"943\":1}}],[\"选举领头sentinel\",{\"0\":{\"942\":1}}],[\"选举规则\",{\"1\":{\"470\":1}}],[\"选举\",{\"0\":{\"470\":1},\"1\":{\"466\":1,\"1162\":1,\"1178\":1,\"1194\":2,\"1281\":1,\"1620\":1}}],[\"选项值\",{\"1\":{\"1577\":1}}],[\"选项参数完全一致\",{\"1\":{\"1218\":1}}],[\"选项只能使用长形式\",{\"1\":{\"671\":1}}],[\"选项\",{\"1\":{\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"675\":4,\"1411\":1}}],[\"选择被置换的物理页面\",{\"1\":{\"1471\":1}}],[\"选择的密码套件\",{\"1\":{\"1402\":1}}],[\"选择合适的分支开发流\",{\"1\":{\"1333\":1}}],[\"选择合适的并发队列为任务做缓冲\",{\"1\":{\"1107\":1}}],[\"选择基于\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"选择性放入\",{\"1\":{\"1010\":1}}],[\"选择性指不重复的索引值\",{\"1\":{\"707\":1}}],[\"选择运行id最小的从服务器\",{\"1\":{\"943\":1}}],[\"选择复制偏移量最大的从服务器\",{\"1\":{\"943\":1}}],[\"选择一个从服务器发送slaveof\",{\"1\":{\"943\":1}}],[\"选择策略如下\",{\"1\":{\"943\":1}}],[\"选择策略\",{\"1\":{\"872\":1}}],[\"选择\",{\"1\":{\"813\":2,\"1385\":1,\"1484\":1}}],[\"选择服务端\",{\"1\":{\"811\":1}}],[\"选择成本最低的执行方案\",{\"1\":{\"725\":1,\"726\":1}}],[\"选择该索引完成本次查询\",{\"1\":{\"699\":1}}],[\"选择回收的对象\",{\"1\":{\"192\":1}}],[\"选择数据库后\",{\"1\":{\"110\":1}}],[\"选择数据库\",{\"0\":{\"110\":1}}],[\"与中航信的gds系统通过协议共享数据\",{\"1\":{\"1734\":1}}],[\"与容器交互\",{\"1\":{\"1634\":1}}],[\"与服务端信息做对比\",{\"1\":{\"1403\":1}}],[\"与业务网关相反\",{\"1\":{\"1300\":1}}],[\"与tc交谈以注册分支事务和报告分支事务的状态\",{\"1\":{\"1287\":1}}],[\"与tomcat和jetty等servlet容器集成\",{\"1\":{\"355\":1}}],[\"与本地应用隔离\",{\"1\":{\"1254\":1}}],[\"与应用分离的缓存组件或服务\",{\"1\":{\"1254\":1}}],[\"与读锁\",{\"1\":{\"1183\":1}}],[\"与写锁互斥\",{\"1\":{\"1183\":1}}],[\"与此同时\",{\"1\":{\"1025\":1}}],[\"与此相反\",{\"1\":{\"947\":1}}],[\"与其他普通redis命令一样\",{\"1\":{\"967\":1}}],[\"与单机复制相同\",{\"1\":{\"948\":1}}],[\"与单向\",{\"1\":{\"760\":1}}],[\"与sync基本相同\",{\"1\":{\"935\":1}}],[\"与不同任务的套接字关联的一个个函数\",{\"1\":{\"919\":1}}],[\"与c字符串的区别\",{\"0\":{\"879\":1}}],[\"与compact类似\",{\"1\":{\"687\":1}}],[\"与前面的区别是消息存储不连续解析复杂\",{\"1\":{\"788\":1}}],[\"与buffer\",{\"1\":{\"739\":1}}],[\"与聚集索引不同\",{\"1\":{\"638\":1}}],[\"与any等同\",{\"1\":{\"609\":1}}],[\"与no\",{\"1\":{\"599\":1}}],[\"与restrict一致\",{\"1\":{\"599\":1}}],[\"与传输层tcp\",{\"1\":{\"341\":1}}],[\"与传统的解释器或即时编译器\",{\"1\":{\"270\":1}}],[\"与类一起仅加载一次\",{\"1\":{\"290\":1}}],[\"与每个任务都创建一个独立的线程相比\",{\"1\":{\"282\":1}}],[\"与操作系统线程相比\",{\"1\":{\"282\":1}}],[\"与jdk11的corba一起废弃\",{\"1\":{\"228\":2}}],[\"与\",{\"1\":{\"228\":1,\"414\":2,\"553\":1,\"1576\":1,\"1628\":2}}],[\"与用户线程并发\",{\"1\":{\"176\":2,\"177\":1,\"178\":2,\"1525\":3}}],[\"部\",{\"1\":{\"1826\":1}}],[\"部署\",{\"0\":{\"1792\":1}}],[\"部署到公共仓库\",{\"1\":{\"1791\":1}}],[\"部署在不同的服务器\",{\"1\":{\"1617\":1}}],[\"部署工具\",{\"1\":{\"228\":1}}],[\"部分文档不想公开\",{\"1\":{\"1790\":1}}],[\"部分真实行为的测试对象\",{\"1\":{\"1708\":1}}],[\"部分更新\",{\"1\":{\"1640\":1}}],[\"部分收集\",{\"1\":{\"1525\":1}}],[\"部分固定重复的字段\",{\"1\":{\"1404\":1}}],[\"部分用户被导向一个降级页面\",{\"1\":{\"1279\":1}}],[\"部分字段可能会恢复默认值\",{\"1\":{\"1148\":1}}],[\"部分\",{\"0\":{\"1005\":1,\"1013\":1}}],[\"部分重同步的实现包含三个主要结构\",{\"1\":{\"935\":1}}],[\"部分重同步\",{\"1\":{\"935\":3}}],[\"部分提交的\",{\"1\":{\"733\":1}}],[\"部分内置函数的执行\",{\"1\":{\"570\":1}}],[\"部分的第一条便是强制依赖日志框架slf4j的api\",{\"1\":{\"391\":1}}],[\"部影视\",{\"1\":{\"0\":1}}],[\"远程调用\",{\"1\":{\"1705\":1}}],[\"远程调用不知名错误\",{\"1\":{\"14\":1}}],[\"远程安全拷贝\",{\"1\":{\"1631\":1}}],[\"远程过程调用\",{\"1\":{\"1623\":1}}],[\"远程引用是对远程仓库的引用\",{\"1\":{\"1338\":1}}],[\"远程分支\",{\"0\":{\"1338\":1}}],[\"远程仓库分三类\",{\"1\":{\"1632\":1}}],[\"远程仓库的\",{\"1\":{\"1338\":1}}],[\"远程仓库所有分支的状态\",{\"1\":{\"1326\":1}}],[\"远程仓库\",{\"0\":{\"1325\":1},\"1\":{\"1338\":1,\"1632\":1}}],[\"远程的配置中心在下发\",{\"1\":{\"1240\":1}}],[\"远程\",{\"1\":{\"1119\":1}}],[\"远程监控java应用程序\",{\"1\":{\"236\":1}}],[\"远程监控\",{\"1\":{\"236\":1}}],[\"远程方法调用\",{\"1\":{\"228\":1}}],[\"国庆看海游记\",{\"1\":{\"1825\":1}}],[\"国际机票业务规则航司迭代时间久远\",{\"1\":{\"1752\":1}}],[\"国际机票的运价\",{\"1\":{\"1732\":1}}],[\"国际运价计算引擎\",{\"0\":{\"1751\":1},\"1\":{\"1751\":1}}],[\"国际航班报价搜索是个\",{\"1\":{\"1752\":1}}],[\"国际航线不可避免地要涉及它国控制的情报区\",{\"1\":{\"1742\":1}}],[\"国际航空运输就需要一个在全球行业范围内有一个统一的规定\",{\"1\":{\"1741\":1}}],[\"国际主流的gds\",{\"1\":{\"1732\":1}}],[\"国际3位如ca982\",{\"1\":{\"1730\":1}}],[\"国际的航班时刻来自oag这家公司\",{\"1\":{\"1729\":1}}],[\"国际化\",{\"1\":{\"228\":1}}],[\"国外主要是旅行社\",{\"1\":{\"1726\":1}}],[\"国内的网盘普遍不咋地\",{\"1\":{\"1805\":1}}],[\"国内航班时刻都来自中航信系统\",{\"1\":{\"1729\":1}}],[\"国内航空数据基本都在中航信的系统里\",{\"1\":{\"1728\":1}}],[\"国内航司除春秋航空\",{\"1\":{\"1724\":1}}],[\"国内主要是代理机构\",{\"1\":{\"1726\":1}}],[\"国内景点等等各种过滤\",{\"1\":{\"1360\":1}}],[\"国家必须维护法律的公正\",{\"1\":{\"1767\":1}}],[\"国家必须促进国民生活的繁荣\",{\"1\":{\"1767\":1}}],[\"国家需要一支庞大的军队来行使其权力\",{\"1\":{\"1767\":1}}],[\"国家\",{\"1\":{\"36\":1}}],[\"计网\",{\"0\":{\"1391\":1}}],[\"计划编译器\",{\"1\":{\"1224\":1}}],[\"计数请求\",{\"1\":{\"1637\":1}}],[\"计数时需要先获取所需字段\",{\"1\":{\"1568\":1}}],[\"计数\",{\"1\":{\"1114\":1}}],[\"计数累加\",{\"1\":{\"619\":1}}],[\"计数器加减\",{\"1\":{\"1522\":1}}],[\"计数器为0时才关闭文件\",{\"1\":{\"1475\":1}}],[\"计数器\",{\"1\":{\"366\":1,\"948\":1}}],[\"计数器法精确严谨\",{\"1\":{\"268\":1}}],[\"计数器减半\",{\"1\":{\"268\":1}}],[\"计数器减\",{\"1\":{\"223\":1}}],[\"计算量大\",{\"1\":{\"1752\":1}}],[\"计算来的\",{\"1\":{\"1732\":1}}],[\"计算机订座系统\",{\"1\":{\"1723\":1}}],[\"计算哈希定位\",{\"1\":{\"1497\":1}}],[\"计算哈希判断对应位是否为\",{\"1\":{\"1390\":1}}],[\"计算而得\",{\"1\":{\"1446\":1}}],[\"计算密集型\",{\"1\":{\"1435\":1}}],[\"计算内存块对应的\",{\"1\":{\"1435\":1}}],[\"计算景点的邻近机场\",{\"1\":{\"1360\":1}}],[\"计算需要两大功能\",{\"1\":{\"1224\":1}}],[\"计算时\",{\"1\":{\"977\":1}}],[\"计算每2位\",{\"1\":{\"976\":1}}],[\"计算给定键所在的槽\",{\"1\":{\"947\":1}}],[\"计算结果\",{\"1\":{\"823\":1}}],[\"计算结果对应的\",{\"1\":{\"483\":1}}],[\"计算当前可被覆盖的redo日志对应的最大lsn\",{\"1\":{\"741\":1}}],[\"计算平均记录数再乘以全部叶子节点数\",{\"1\":{\"720\":1}}],[\"计算使用不同索引执行查询的代价\",{\"1\":{\"717\":1}}],[\"计算全表扫描的代价\",{\"1\":{\"717\":1}}],[\"计算分片号\",{\"1\":{\"656\":1}}],[\"计算两个日期间隔\",{\"1\":{\"353\":1}}],[\"计算两个时间间隔\",{\"1\":{\"353\":1}}],[\"计算容量\",{\"1\":{\"162\":1}}],[\"计算\",{\"1\":{\"71\":1,\"154\":2,\"802\":1,\"974\":2,\"975\":3,\"1214\":1,\"1514\":2}}],[\"计算生成\",{\"1\":{\"26\":1}}],[\"句柄\",{\"1\":{\"1521\":1}}],[\"句柄中包含对象实例数据和类型数据的具体地址\",{\"1\":{\"216\":1}}],[\"句柄访问\",{\"1\":{\"216\":1}}],[\"碰撞指针\",{\"1\":{\"214\":1}}],[\"遇到好几个藏族的小学生也搭我们的车\",{\"1\":{\"1846\":1}}],[\"遇到合并冲突\",{\"1\":{\"1336\":1}}],[\"遇到实时性\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"遇到new指令时\",{\"1\":{\"214\":1,\"1521\":1}}],[\"遇到值为\",{\"1\":{\"154\":1,\"1514\":1}}],[\"参观完后我们坐在出口的树荫下休息\",{\"1\":{\"1847\":1}}],[\"参观完扎基寺\",{\"1\":{\"1837\":1}}],[\"参与消息传递的双方称为\",{\"1\":{\"1625\":1}}],[\"参与一起扩容\",{\"1\":{\"1497\":1}}],[\"参与\",{\"1\":{\"1194\":1}}],[\"参与选举的从节点根据投票回复\",{\"1\":{\"948\":1}}],[\"参与拷贝\",{\"1\":{\"801\":1}}],[\"参数传进来是null导致异常\",{\"1\":{\"1781\":1}}],[\"参数捕获\",{\"0\":{\"1715\":1}}],[\"参数匹配\",{\"0\":{\"1712\":1}}],[\"参数实现优先级队列\",{\"1\":{\"1629\":1}}],[\"参数等信息传递到服务端\",{\"1\":{\"1623\":1}}],[\"参数校验\",{\"1\":{\"1608\":1}}],[\"参数执行脚本\",{\"1\":{\"965\":1}}],[\"参数以及个数\",{\"1\":{\"959\":1}}],[\"参数可调\",{\"1\":{\"897\":1,\"898\":1,\"899\":1,\"900\":1}}],[\"参数可见注解\",{\"1\":{\"240\":1}}],[\"参数配置\",{\"0\":{\"854\":1}}],[\"参数调优\",{\"0\":{\"853\":1}}],[\"参数5\",{\"1\":{\"844\":1}}],[\"参数4\",{\"1\":{\"844\":1}}],[\"参数3\",{\"1\":{\"844\":1}}],[\"参数2\",{\"1\":{\"844\":1}}],[\"参数1\",{\"1\":{\"844\":1}}],[\"参数表示是否刷盘元数据\",{\"1\":{\"777\":1}}],[\"参数决定多张表共用一个系统表空间还是每张表独立表空间\",{\"1\":{\"678\":1}}],[\"参数后导出的文本文件\",{\"1\":{\"675\":1}}],[\"参数名\",{\"1\":{\"649\":1}}],[\"参数名称\",{\"1\":{\"485\":1}}],[\"参数选项\",{\"1\":{\"643\":2}}],[\"参数列表\",{\"1\":{\"628\":1,\"635\":1}}],[\"参数\",{\"0\":{\"631\":1},\"1\":{\"211\":1,\"467\":1,\"569\":2,\"628\":1,\"639\":1,\"791\":1,\"855\":1,\"856\":1,\"858\":1,\"859\":1,\"860\":1,\"861\":1,\"1524\":1}}],[\"参考实现\",{\"1\":{\"788\":1}}],[\"参考文档\",{\"0\":{\"565\":1},\"1\":{\"1004\":1}}],[\"参考资料\",{\"0\":{\"546\":1}}],[\"参考json结果\",{\"1\":{\"51\":1}}],[\"参考\",{\"0\":{\"10\":1,\"85\":1,\"197\":1,\"283\":1,\"367\":1,\"392\":1,\"667\":1,\"1069\":1,\"1083\":1,\"1100\":1,\"1121\":1,\"1144\":1,\"1156\":1,\"1304\":1,\"1793\":1,\"1873\":1},\"1\":{\"53\":1,\"62\":1,\"846\":1,\"1860\":3,\"1870\":1,\"1871\":1}}],[\"管理操作权限\",{\"1\":{\"1642\":1}}],[\"管理加入\",{\"1\":{\"1429\":1}}],[\"管理和终止表示层实体之间的通信会话\",{\"1\":{\"1393\":1}}],[\"管理和监控\",{\"1\":{\"657\":1}}],[\"管理员通过系统后台维护商品spu\",{\"1\":{\"1365\":1}}],[\"管理员程序等常规目录结构\",{\"1\":{\"1217\":1}}],[\"管理了三颗不同的树\",{\"1\":{\"1344\":1}}],[\"管理分支事务处理的资源\",{\"1\":{\"1287\":1}}],[\"管理事务有两种方式\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"管理缓存\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"管理各个cache缓存组件\",{\"1\":{\"1269\":1}}],[\"管理者权限\",{\"1\":{\"1168\":1}}],[\"管理等各个领域\",{\"1\":{\"1104\":1}}],[\"管理的原生\",{\"1\":{\"1716\":1}}],[\"管理的\",{\"1\":{\"1594\":1}}],[\"管理的文件\",{\"1\":{\"1310\":1}}],[\"管理的子线程组集合\",{\"1\":{\"1099\":1}}],[\"管理的子线程组数\",{\"1\":{\"1099\":1}}],[\"管理的线程集合\",{\"1\":{\"1099\":1}}],[\"管理数据库资源\",{\"1\":{\"928\":1}}],[\"管理客户端资源\",{\"1\":{\"928\":1}}],[\"管理一个\",{\"1\":{\"833\":1}}],[\"管理与监控\",{\"0\":{\"657\":1}}],[\"管理集群时\",{\"1\":{\"448\":1}}],[\"管理界面\",{\"1\":{\"412\":1,\"435\":1}}],[\"管理\",{\"1\":{\"210\":1,\"212\":1,\"432\":1,\"544\":3,\"1136\":1,\"1302\":1,\"1303\":1}}],[\"管道流水线\",{\"1\":{\"823\":1}}],[\"管道\",{\"0\":{\"1456\":1},\"1\":{\"137\":1,\"1473\":1}}],[\"堆空间不足\",{\"1\":{\"1520\":1}}],[\"堆顶指针上移\",{\"1\":{\"1445\":1}}],[\"堆段\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"堆排\",{\"0\":{\"1652\":1},\"1\":{\"1385\":1}}],[\"堆配置信息和各内存区域内存使用信息jstat\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"堆外内存的分配速度相对较快\",{\"1\":{\"1136\":1}}],[\"堆外内存的分配和释放不受\",{\"1\":{\"1136\":1}}],[\"堆外内存可以在多个\",{\"1\":{\"1136\":1}}],[\"堆外内存是直接在操作系统的本地内存中分配的\",{\"1\":{\"1136\":1}}],[\"堆的占用\",{\"1\":{\"1136\":1}}],[\"堆的压力\",{\"1\":{\"1136\":1}}],[\"堆的垃圾回收机制\",{\"1\":{\"1136\":1}}],[\"堆内存中对象的初始化和垃圾回收处理\",{\"1\":{\"1136\":1}}],[\"堆内存\",{\"1\":{\"770\":1,\"826\":1}}],[\"堆中\",{\"1\":{\"1536\":1}}],[\"堆中划分句柄池\",{\"1\":{\"1521\":1}}],[\"堆中对象实例\",{\"1\":{\"1521\":1}}],[\"堆中实际类对象的成员方法存的是方法区里类的成员方法引用\",{\"1\":{\"359\":1}}],[\"堆中线程私有的一块区域\",{\"1\":{\"210\":1}}],[\"堆转储分析\",{\"1\":{\"237\":2,\"238\":1}}],[\"堆转储\",{\"1\":{\"236\":2}}],[\"堆转储是java堆中对象的详细信息的快照\",{\"1\":{\"232\":1}}],[\"堆是存储的单位\",{\"1\":{\"210\":1}}],[\"堆\",{\"0\":{\"210\":1},\"1\":{\"359\":2,\"1446\":1,\"1447\":1,\"1520\":1}}],[\"栈上分配\",{\"1\":{\"1520\":1}}],[\"栈上替换\",{\"1\":{\"268\":1}}],[\"栈深超过最大深度\",{\"1\":{\"1520\":1}}],[\"栈的大小是固定的\",{\"1\":{\"1444\":1}}],[\"栈段\",{\"1\":{\"1443\":1,\"1444\":1}}],[\"栈内存中两个引用的地址值指向堆中同一块内存区\",{\"1\":{\"359\":1}}],[\"栈帧的局部变量表中的reference引用\",{\"1\":{\"1521\":1}}],[\"栈帧包括局部变量表\",{\"1\":{\"1520\":1}}],[\"栈帧\",{\"1\":{\"359\":1}}],[\"栈帧过多可能导致stackoverflowerror\",{\"1\":{\"203\":1,\"209\":1}}],[\"栈\",{\"0\":{\"986\":1},\"1\":{\"359\":1,\"1446\":1,\"1447\":1,\"1454\":1,\"1487\":1}}],[\"栈操作指令\",{\"1\":{\"241\":1}}],[\"栈是运行时的单位\",{\"1\":{\"210\":1}}],[\"栈空间不足导致可能导致outofmemoryerror\",{\"1\":{\"209\":1}}],[\"栈空间不足可能导致outofmemoryerror\",{\"1\":{\"203\":1}}],[\"独行西藏\",{\"1\":{\"1826\":1}}],[\"独占\",{\"1\":{\"1435\":1,\"1516\":1}}],[\"独占写锁\",{\"1\":{\"1183\":1}}],[\"独占式释放同步状态\",{\"1\":{\"5\":1}}],[\"独占式获取同步状态\",{\"1\":{\"5\":1}}],[\"独立的国内运输\",{\"0\":{\"1750\":1}}],[\"独立gc分代收集\",{\"1\":{\"1525\":1}}],[\"独立部署\",{\"1\":{\"1375\":1,\"1622\":1}}],[\"独立功能\",{\"0\":{\"952\":1}}],[\"独立于jvm\",{\"1\":{\"254\":1}}],[\"独立存储\",{\"1\":{\"202\":1}}],[\"各家航司有差异\",{\"1\":{\"1739\":1}}],[\"各线程私有互不影响\",{\"1\":{\"1520\":1}}],[\"各线程之间的计数器互不影响\",{\"1\":{\"202\":1}}],[\"各负责2次\",{\"1\":{\"1486\":1}}],[\"各应用或集群的各节点都需要维护自己的单独缓存\",{\"1\":{\"1253\":1}}],[\"各字段的含义都一眼便知\",{\"1\":{\"1155\":1}}],[\"各自都先投给自己\",{\"1\":{\"1203\":1}}],[\"各自维护独立的\",{\"1\":{\"831\":1}}],[\"各自构成一个双链表\",{\"1\":{\"693\":1}}],[\"各种状态信息标志位\",{\"1\":{\"923\":1}}],[\"各种不同的存储引擎向上面的mysql\",{\"1\":{\"672\":1}}],[\"各种桥接包\",{\"1\":{\"380\":1}}],[\"各\",{\"1\":{\"470\":1}}],[\"各类参数或者对象\",{\"1\":{\"391\":1}}],[\"各个fir提供区域内飞航情报服务和告警服务\",{\"1\":{\"1742\":1}}],[\"各个子项目的成果都经过测试\",{\"1\":{\"1641\":1}}],[\"各个线程之间可以共享地址空间和文件等资源\",{\"1\":{\"1451\":1}}],[\"各个线程之间可以并发执行\",{\"1\":{\"1451\":1}}],[\"各个线程既可以共享进程资源\",{\"1\":{\"277\":1}}],[\"各个空间的使用量jmap\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"各个节点可以独立处理读写请求\",{\"1\":{\"1207\":1}}],[\"各个事务之间也不会相互影响\",{\"1\":{\"961\":1}}],[\"各个undo页面链表的first\",{\"1\":{\"751\":1}}],[\"各个进程之间互不干扰\",{\"1\":{\"134\":2}}],[\"静态随机存储器\",{\"1\":{\"1434\":1}}],[\"静态代理在编译时就将接口\",{\"1\":{\"1532\":1}}],[\"静态代理\",{\"1\":{\"1532\":1}}],[\"静态代理需要手动对目标方法进行增强\",{\"1\":{\"1014\":1}}],[\"静态代码块通常用于初始化静态成员变量\",{\"1\":{\"1534\":1}}],[\"静态代码块在类加载时被执行\",{\"1\":{\"1534\":1}}],[\"静态代码块\",{\"1\":{\"289\":1}}],[\"静态代码块中初始化的一个线程\",{\"1\":{\"188\":1}}],[\"静态常量内存图\",{\"1\":{\"359\":1}}],[\"静态内部类可以访问外部类的静态成员变量和方法\",{\"1\":{\"1534\":1}}],[\"静态内部类\",{\"0\":{\"295\":1}}],[\"静态方法只能访问类的静态成员变量和方法\",{\"1\":{\"1534\":1}}],[\"静态方法可以直接通过类名调用\",{\"1\":{\"1534\":1}}],[\"静态方法默认对类\",{\"1\":{\"331\":1}}],[\"静态方法使用类\",{\"1\":{\"331\":1}}],[\"静态方法\",{\"1\":{\"292\":1,\"1092\":1}}],[\"静态方法创建\",{\"1\":{\"195\":1}}],[\"静态导入允许在使用静态成员时省略类名\",{\"1\":{\"263\":1}}],[\"静态导入\",{\"1\":{\"263\":1}}],[\"静态提前编译器\",{\"1\":{\"255\":1}}],[\"静态分派\",{\"1\":{\"245\":1}}],[\"静态变量可以通过类名直接访问\",{\"1\":{\"1534\":1}}],[\"静态变量在类加载时被初始化\",{\"1\":{\"1534\":1}}],[\"静态变量替换\",{\"1\":{\"274\":1}}],[\"静态变量\",{\"1\":{\"210\":1,\"211\":1,\"1520\":1}}],[\"头痛欲裂\",{\"1\":{\"1834\":1}}],[\"头等舱\",{\"1\":{\"1735\":1}}],[\"头信息\",{\"1\":{\"1445\":1}}],[\"头\",{\"1\":{\"839\":1}}],[\"头占用\",{\"1\":{\"839\":2}}],[\"头后剩余能够作为数据传输的字节数\",{\"1\":{\"839\":1}}],[\"头和\",{\"1\":{\"839\":2}}],[\"头部的一个\",{\"1\":{\"1418\":1}}],[\"头部的管理信息包括log\",{\"1\":{\"739\":1}}],[\"头部至少20个字节\",{\"1\":{\"1408\":1}}],[\"头部压缩\",{\"1\":{\"1404\":1}}],[\"头部\",{\"1\":{\"1400\":1,\"1411\":1,\"1448\":3}}],[\"头部带上唯一标识响应的摘要\",{\"1\":{\"1400\":1}}],[\"头部出队\",{\"1\":{\"987\":2}}],[\"头部消费者多消费\",{\"1\":{\"495\":1}}],[\"头部仅2byte\",{\"1\":{\"407\":1}}],[\"头节点\",{\"1\":{\"195\":1}}],[\"头插法加入\",{\"1\":{\"196\":1}}],[\"头插法\",{\"1\":{\"184\":1,\"195\":1}}],[\"永远保持积极向上\",{\"1\":{\"1786\":1}}],[\"永远返回\",{\"1\":{\"194\":1}}],[\"永久申请状态\",{\"1\":{\"1736\":1,\"1740\":1}}],[\"永久代\",{\"1\":{\"1520\":1,\"1524\":1}}],[\"永久重定向\",{\"1\":{\"1398\":1}}],[\"永久性数据\",{\"0\":{\"720\":1}}],[\"永久性统计数据\",{\"1\":{\"719\":1}}],[\"永久阻塞\",{\"1\":{\"156\":1}}],[\"qpack\",{\"1\":{\"1404\":1}}],[\"qps\",{\"1\":{\"1367\":4}}],[\"qa\",{\"1\":{\"1351\":2}}],[\"qos\",{\"1\":{\"380\":1,\"382\":1,\"392\":1}}],[\"qw\",{\"1\":{\"301\":1}}],[\"qwe\",{\"1\":{\"301\":3}}],[\"q\",{\"1\":{\"192\":2,\"193\":2,\"194\":2,\"196\":2,\"229\":1,\"1681\":1,\"1735\":10,\"1736\":1,\"1740\":1}}],[\"quickly\",{\"1\":{\"1836\":1}}],[\"quicksort\",{\"1\":{\"989\":4,\"1653\":4}}],[\"quic\",{\"1\":{\"1404\":2}}],[\"qualifier\",{\"1\":{\"1595\":1}}],[\"quantity\",{\"1\":{\"1129\":1}}],[\"quarter\",{\"1\":{\"129\":1}}],[\"quot\",{\"1\":{\"357\":1}}],[\"qux\",{\"1\":{\"79\":2}}],[\"quee\",{\"1\":{\"1629\":1}}],[\"queuing\",{\"1\":{\"404\":1,\"407\":1,\"1625\":1}}],[\"queue链表后\",{\"1\":{\"1422\":1}}],[\"queue<treenode>\",{\"1\":{\"1001\":1}}],[\"queue<runnable>普通任务队列\",{\"1\":{\"869\":1}}],[\"queuefactory\",{\"1\":{\"870\":3}}],[\"queuelength++\",{\"1\":{\"184\":1}}],[\"queuelength\",{\"1\":{\"184\":2}}],[\"queues=\",{\"1\":{\"418\":1}}],[\"queues\",{\"1\":{\"71\":1,\"418\":1}}],[\"queue\",{\"0\":{\"1458\":1,\"1499\":1},\"1\":{\"71\":1,\"183\":4,\"184\":7,\"187\":6,\"189\":3,\"196\":4,\"406\":1,\"413\":1,\"414\":3,\"418\":9,\"420\":1,\"421\":1,\"422\":1,\"424\":1,\"425\":1,\"433\":1,\"856\":6,\"1001\":7,\"1097\":1,\"1499\":2,\"1628\":6,\"1629\":6}}],[\"queryselector\",{\"1\":{\"1870\":1}}],[\"querytransferav\",{\"1\":{\"1363\":1}}],[\"querybuf\",{\"1\":{\"923\":1}}],[\"querybuilders\",{\"1\":{\"51\":7}}],[\"querybuilders来构建查询条件\",{\"1\":{\"51\":1}}],[\"queryfromdatabase\",{\"1\":{\"544\":1}}],[\"queryparser\",{\"1\":{\"53\":2}}],[\"query\",{\"1\":{\"51\":1,\"53\":1,\"523\":2,\"544\":4,\"572\":1,\"612\":6,\"645\":2,\"1363\":1}}],[\"querywrapper<memberentity>\",{\"1\":{\"15\":1}}],[\"宁愿抛出\",{\"1\":{\"191\":1}}],[\"链路的最大传输速率\",{\"1\":{\"1490\":1}}],[\"链路层对一次能够发送的最大数据有限制\",{\"1\":{\"839\":1}}],[\"链地址法\",{\"1\":{\"1389\":1}}],[\"链地址法解决哈希冲突\",{\"1\":{\"882\":1,\"883\":1}}],[\"链式监听\",{\"1\":{\"1186\":1}}],[\"链的\",{\"1\":{\"873\":1}}],[\"链接阶段包括三个子阶段\",{\"1\":{\"1527\":1}}],[\"链接表存储块地址\",{\"1\":{\"1476\":1}}],[\"链接暴露\",{\"1\":{\"1375\":1}}],[\"链接\",{\"1\":{\"526\":1,\"1527\":1,\"1661\":1,\"1663\":1,\"1666\":1}}],[\"链表会转换成红黑树\",{\"1\":{\"1497\":1}}],[\"链表是为了用拉链法解决哈希冲突\",{\"1\":{\"1494\":1}}],[\"链表方式\",{\"1\":{\"1476\":1}}],[\"链表划分前半部分\",{\"1\":{\"1448\":1}}],[\"链表前排的位置\",{\"1\":{\"1448\":1}}],[\"链表并发送\",{\"1\":{\"979\":1}}],[\"链表末尾\",{\"1\":{\"979\":1}}],[\"链表的每个结点是\",{\"1\":{\"978\":1}}],[\"链表的头部就是当前记录的最新值\",{\"1\":{\"753\":1}}],[\"链表使用头插法\",{\"1\":{\"978\":1}}],[\"链表结构\",{\"1\":{\"880\":1,\"923\":1}}],[\"链表中第一个页面称为first\",{\"1\":{\"749\":1}}],[\"链表中获取引用实例\",{\"1\":{\"196\":1}}],[\"链表普通结点\",{\"1\":{\"749\":1}}],[\"链表等待处理\",{\"1\":{\"196\":1}}],[\"链表\",{\"0\":{\"732\":1,\"880\":1,\"985\":1},\"1\":{\"195\":1,\"895\":1,\"1448\":7}}],[\"链\",{\"1\":{\"188\":1,\"873\":1}}],[\"该教会是完全与罗马教廷共融的\",{\"1\":{\"1762\":1}}],[\"该环节的技术服务\",{\"1\":{\"1751\":1}}],[\"该航班的出发地必须为该外国航空公司的所属国家\",{\"1\":{\"1746\":1}}],[\"该等级取消\",{\"1\":{\"1736\":1}}],[\"该等级彻底关闭\",{\"1\":{\"1736\":1,\"1740\":1}}],[\"该选项单独使用\",{\"1\":{\"1688\":1}}],[\"该缓冲区会在子进程创建新\",{\"1\":{\"1577\":1}}],[\"该类没有在其他任何地方被引用\",{\"1\":{\"1527\":1}}],[\"该类的类加载器的实例已被\",{\"1\":{\"1527\":1}}],[\"该类的所有的实例对象都已被\",{\"1\":{\"1527\":1}}],[\"该类的\",{\"1\":{\"1527\":1}}],[\"该类参数作为输出\",{\"1\":{\"631\":1}}],[\"该类参数作为输入\",{\"1\":{\"631\":1}}],[\"该指令\",{\"1\":{\"1471\":1}}],[\"该进程正在等待某一事件发生\",{\"1\":{\"1450\":1}}],[\"该时刻进程占用\",{\"1\":{\"1450\":1}}],[\"该时间阈值由replica\",{\"1\":{\"460\":1}}],[\"该工具可以检查数据库的完整性\",{\"1\":{\"1346\":1}}],[\"该元素才可能存在\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"该服务中使用了大约\",{\"1\":{\"1234\":1}}],[\"该节点的子节点个数\",{\"1\":{\"1174\":1}}],[\"该值是当前节点所有者的\",{\"1\":{\"1174\":1}}],[\"该值为512\",{\"1\":{\"742\":1}}],[\"该容器节点会被zk定期删除\",{\"1\":{\"1169\":1}}],[\"该组至少包含一个\",{\"1\":{\"1099\":1}}],[\"该\",{\"1\":{\"1076\":2,\"1220\":1}}],[\"该数据存在于数据库中\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"该数据已被删除\",{\"1\":{\"493\":1}}],[\"该数组的每个项都是一个\",{\"1\":{\"970\":1}}],[\"该算法是指发送端即使还有应该发送的数据\",{\"1\":{\"839\":1}}],[\"该算法的基本思想是通过从一组称为\",{\"1\":{\"224\":1}}],[\"该undo页面已经使用的空间小于整个页面空间的3\",{\"1\":{\"750\":1}}],[\"该链表仅包含一个undo页面\",{\"1\":{\"750\":1}}],[\"该页小于fil\",{\"1\":{\"742\":1}}],[\"该设置只对当前会话有效\",{\"1\":{\"734\":1}}],[\"该表的访问方法\",{\"1\":{\"728\":1}}],[\"该索引的叶子节点占用页面数\",{\"1\":{\"720\":1}}],[\"该字段的值可能会重复\",{\"1\":{\"701\":1}}],[\"该字段的子字段\",{\"1\":{\"36\":1}}],[\"该记录组所含的记录数\",{\"1\":{\"689\":1}}],[\"该db的子目录下就会新建一个表名\",{\"1\":{\"673\":1}}],[\"该日志文件由两部分组成\",{\"1\":{\"639\":1}}],[\"该命名空间的缓存配置\",{\"1\":{\"529\":1}}],[\"该主题默认有\",{\"1\":{\"490\":1}}],[\"该消费者会被移除\",{\"1\":{\"483\":1}}],[\"该文件夹的命名规则为\",{\"1\":{\"475\":1}}],[\"该分区的\",{\"1\":{\"471\":1}}],[\"该协议支持所有平台\",{\"1\":{\"407\":1}}],[\"该接口使用了系统中多个接口\",{\"1\":{\"373\":1}}],[\"该调用不合逻辑地\",{\"1\":{\"363\":1}}],[\"该对象的\",{\"1\":{\"1074\":1}}],[\"该对象被视为垃圾\",{\"1\":{\"223\":1}}],[\"该对象就会被回收\",{\"1\":{\"193\":1}}],[\"该过程分为两步\",{\"1\":{\"196\":1}}],[\"该线程拥有最高优先级\",{\"1\":{\"188\":1}}],[\"泛型下限\",{\"1\":{\"306\":1}}],[\"泛型上限\",{\"1\":{\"306\":1}}],[\"泛型通配符允许在泛型类型中使用通配符来表示未知类型\",{\"1\":{\"263\":1}}],[\"泛型通配符\",{\"1\":{\"263\":1,\"306\":1}}],[\"泛型类型推断允许省略泛型类型的声明\",{\"1\":{\"263\":1}}],[\"泛型类型推断\",{\"1\":{\"263\":1}}],[\"泛型\",{\"0\":{\"306\":1},\"1\":{\"187\":1}}],[\"成后目录中会自动生成out文件夹\",{\"1\":{\"1869\":1}}],[\"成人\",{\"1\":{\"1738\":1}}],[\"成立\",{\"1\":{\"754\":3,\"1557\":3}}],[\"成本的重点在减少扇出数对被驱动表的访问成本\",{\"1\":{\"718\":1}}],[\"成本常数\",{\"0\":{\"716\":1}}],[\"成功\",{\"1\":{\"822\":1,\"1076\":1,\"1398\":1}}],[\"成功拉取到消息存入\",{\"1\":{\"484\":1}}],[\"成功到达\",{\"1\":{\"420\":1}}],[\"成为一个真正的牛马\",{\"1\":{\"1824\":1}}],[\"成为它的\",{\"1\":{\"1203\":1}}],[\"成为监视器\",{\"1\":{\"979\":1}}],[\"成为\",{\"1\":{\"466\":1}}],[\"成为死信的情况\",{\"1\":{\"425\":1}}],[\"成为新的\",{\"1\":{\"6\":1}}],[\"成员在跳表中唯一\",{\"1\":{\"886\":1}}],[\"成员\",{\"0\":{\"1087\":1},\"1\":{\"886\":1}}],[\"成员对象\",{\"0\":{\"869\":1}}],[\"成员的数量\",{\"1\":{\"663\":1}}],[\"成员方法等\",{\"1\":{\"359\":1}}],[\"成员方法\",{\"1\":{\"348\":1}}],[\"成员内部类\",{\"0\":{\"296\":1}}],[\"成员变量\",{\"1\":{\"289\":1,\"348\":1,\"359\":1,\"1516\":1}}],[\"成员和构造\",{\"0\":{\"187\":1}}],[\"成员和某个引用关联\",{\"1\":{\"184\":1}}],[\"虚引用phantom\",{\"1\":{\"1522\":1}}],[\"虚引用也没什么特殊的\",{\"1\":{\"194\":1}}],[\"虚引用在对象被\",{\"1\":{\"194\":1}}],[\"虚引用是最弱的一种引用类型\",{\"1\":{\"194\":1}}],[\"虚引用等引用类型的引用实例\",{\"1\":{\"188\":1}}],[\"虚引用等引用类型的一个辅助类\",{\"1\":{\"184\":1}}],[\"虚引用\",{\"0\":{\"194\":1},\"1\":{\"183\":2,\"1136\":1}}],[\"虚拟的双向队列即不存在队列实例\",{\"1\":{\"1516\":1}}],[\"虚拟节点\",{\"1\":{\"1489\":1}}],[\"虚拟文件\",{\"1\":{\"1484\":1}}],[\"虚拟文件系统\",{\"1\":{\"1474\":1}}],[\"虚拟内存统计\",{\"1\":{\"1631\":1}}],[\"虚拟内存机制\",{\"1\":{\"1571\":1}}],[\"虚拟内存区域\",{\"1\":{\"1464\":1}}],[\"虚拟内存这些资源就保持不动\",{\"1\":{\"1454\":1}}],[\"虚拟内存可以使得进程对运行内存超过物理内存大小\",{\"1\":{\"1443\":1}}],[\"虚拟内存优点\",{\"1\":{\"1443\":1}}],[\"虚拟内存\",{\"0\":{\"1443\":1},\"1\":{\"1444\":2,\"1464\":1,\"1487\":1}}],[\"虚拟端口\",{\"1\":{\"1301\":1}}],[\"虚拟ip\",{\"1\":{\"1301\":1}}],[\"虚拟接收者\",{\"1\":{\"432\":1}}],[\"虚拟主机\",{\"1\":{\"413\":1}}],[\"虚拟机\",{\"1\":{\"1634\":1}}],[\"虚拟机会保证一个类的初始化过程是线程安全的\",{\"1\":{\"1527\":1}}],[\"虚拟机会逐步加载和初始化其他类\",{\"1\":{\"247\":1}}],[\"虚拟机中和\",{\"1\":{\"1520\":1}}],[\"虚拟机的垃圾回收机制\",{\"1\":{\"1136\":1}}],[\"虚拟机的堆内存中\",{\"1\":{\"1136\":1}}],[\"虚拟机启动时\",{\"1\":{\"247\":1}}],[\"虚拟机启动时加载\",{\"1\":{\"247\":1}}],[\"虚拟机堆转储快照分析工具\",{\"1\":{\"233\":1}}],[\"虚拟机统计信息监视工具\",{\"1\":{\"230\":1}}],[\"虚拟机进程状况工具是java虚拟机自带的一种命令行工具\",{\"1\":{\"229\":1}}],[\"虚拟机笔记\",{\"0\":{\"219\":1}}],[\"虚拟机对象\",{\"0\":{\"213\":1}}],[\"虚拟机栈合二为一\",{\"1\":{\"1520\":1}}],[\"虚拟机栈中引用的对象\",{\"1\":{\"224\":1}}],[\"虚拟机栈中会同步创建一个栈帧\",{\"1\":{\"203\":1}}],[\"虚拟机栈描述的是线程中方法的内存模型\",{\"1\":{\"203\":1}}],[\"虚拟机栈\",{\"0\":{\"203\":1},\"1\":{\"359\":1,\"1520\":1,\"1522\":1}}],[\"虚拟机能够保证对象引用关系的一致性\",{\"1\":{\"172\":1}}],[\"虚拟列是hive内置的可以在查询语句中使用的特殊标记\",{\"1\":{\"128\":1}}],[\"虚拟列\",{\"0\":{\"128\":1,\"1229\":1}}],[\"生命维持餐\",{\"1\":{\"1841\":1}}],[\"生命不止\",{\"1\":{\"1818\":1}}],[\"生命周期\",{\"0\":{\"1381\":1,\"1597\":1},\"1\":{\"1632\":1}}],[\"生存确实不易\",{\"1\":{\"1836\":1}}],[\"生存会压榨生活的空间\",{\"1\":{\"1816\":1}}],[\"生存周期\",{\"1\":{\"183\":1}}],[\"生娃都没兴趣的人没有丝毫的吸引力\",{\"1\":{\"1786\":1}}],[\"生活下来\",{\"1\":{\"1786\":1}}],[\"生活的热情就是这样日复一日的消失的吗\",{\"1\":{\"1785\":1}}],[\"生活总是要继续的\",{\"1\":{\"1774\":1}}],[\"生活总是让我们遍体鳞伤\",{\"1\":{\"1773\":1}}],[\"生活似乎在变好\",{\"1\":{\"1771\":1}}],[\"生活中也是一样\",{\"1\":{\"1767\":1}}],[\"生而有罪\",{\"1\":{\"1761\":1,\"1763\":1}}],[\"生态兼容性\",{\"1\":{\"1626\":1}}],[\"生态体系\",{\"0\":{\"1213\":1}}],[\"生产环境不用\",{\"1\":{\"1629\":1}}],[\"生产和消费必须一一配对\",{\"1\":{\"1499\":1}}],[\"生产中的问题\",{\"1\":{\"499\":1}}],[\"生产的数据会追加到日志文件末尾\",{\"1\":{\"475\":1}}],[\"生产的消息要等\",{\"1\":{\"450\":2}}],[\"生产的消息不需要等\",{\"1\":{\"450\":1}}],[\"生产经验\",{\"0\":{\"458\":1,\"498\":1}}],[\"生产者负责发送消息\",{\"1\":{\"1625\":1}}],[\"生产者\",{\"1\":{\"1625\":1}}],[\"生产者线程阻塞\",{\"1\":{\"1499\":1}}],[\"生产者发送过来的数据\",{\"1\":{\"460\":3}}],[\"生产者发送流程\",{\"1\":{\"450\":1}}],[\"生产者连接到broker\",{\"1\":{\"446\":1}}],[\"生产者和消费者面向的都是一个\",{\"1\":{\"443\":1}}],[\"生产者组\",{\"1\":{\"427\":1}}],[\"生效\",{\"1\":{\"416\":1}}],[\"生成后记得复制一下\",{\"1\":{\"1791\":1}}],[\"生成该\",{\"1\":{\"1557\":1}}],[\"生成该readview的事务id\",{\"1\":{\"754\":1}}],[\"生成崩溃日志并退出\",{\"1\":{\"1465\":1}}],[\"生成堆转储快照\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"生成一个快照\",{\"1\":{\"1219\":1}}],[\"生成的随机数\",{\"1\":{\"1418\":1}}],[\"生成的代理类继承了通过\",{\"1\":{\"1016\":1}}],[\"生成的字节码文件中不存在\",{\"1\":{\"348\":1}}],[\"生成经过压缩的二进制文件\",{\"1\":{\"910\":1}}],[\"生成时机\",{\"1\":{\"754\":1}}],[\"生成readview时系统应分配给下一个事务的id值\",{\"1\":{\"754\":1}}],[\"生成readview时系统中活跃的读写事务最小id\",{\"1\":{\"754\":1}}],[\"生成readview时系统中活跃的读写事务的id列表\",{\"1\":{\"754\":1}}],[\"生成本组日志的事务id\",{\"1\":{\"749\":1}}],[\"生成本地机器码\",{\"1\":{\"242\":1}}],[\"生成表名\",{\"1\":{\"673\":1}}],[\"生成6位随机验证码\",{\"1\":{\"594\":1}}],[\"生成更优化的本地机器码\",{\"1\":{\"271\":1}}],[\"生成最终的class文件\",{\"1\":{\"264\":1}}],[\"生成包含所有线程调用栈信息的线程转储\",{\"1\":{\"234\":1}}],[\"生成java堆转储文件\",{\"1\":{\"232\":1}}],[\"生成java堆中对象的直方图\",{\"1\":{\"232\":1}}],[\"生成\",{\"1\":{\"27\":1,\"1394\":1,\"1557\":3,\"1643\":1}}],[\"生成验证码\",{\"1\":{\"14\":1}}],[\"染色指针\",{\"1\":{\"179\":1}}],[\"回想进藏时的兴奋期待\",{\"1\":{\"1849\":1}}],[\"回去的路上\",{\"1\":{\"1834\":1}}],[\"回春丹的\",{\"1\":{\"1817\":1}}],[\"回看这篇游记\",{\"1\":{\"1785\":1}}],[\"回归先知的教诲\",{\"1\":{\"1767\":1}}],[\"回溯树如下\",{\"1\":{\"1673\":1}}],[\"回溯框架\",{\"1\":{\"1669\":1}}],[\"回送应答\",{\"1\":{\"1427\":1}}],[\"回送请求\",{\"1\":{\"1427\":1}}],[\"回显配置的参数\",{\"1\":{\"1426\":1}}],[\"回调工作\",{\"1\":{\"1050\":1,\"1051\":1}}],[\"回复一个\",{\"1\":{\"1410\":1}}],[\"回复meet和ping\",{\"1\":{\"949\":1}}],[\"回复中的\",{\"1\":{\"942\":2}}],[\"回复\",{\"1\":{\"856\":1,\"1426\":1}}],[\"回复的文本内容\",{\"1\":{\"421\":1}}],[\"回复的状态码\",{\"1\":{\"421\":1}}],[\"回顾一下\",{\"1\":{\"856\":1}}],[\"回表查询结束后\",{\"1\":{\"707\":1}}],[\"回表查询过程\",{\"1\":{\"699\":1}}],[\"回滚等等一整套操作\",{\"1\":{\"1059\":1}}],[\"回滚到保存点\",{\"1\":{\"1051\":1}}],[\"回滚到某个保存点\",{\"1\":{\"734\":1}}],[\"回滚规则\",{\"1\":{\"1040\":1,\"1042\":1,\"1383\":1}}],[\"回滚日志\",{\"1\":{\"1034\":1}}],[\"回滚段\",{\"0\":{\"751\":1}}],[\"回滚段等\",{\"1\":{\"694\":1}}],[\"回滚事务的工作流\",{\"1\":{\"1050\":1}}],[\"回滚事务3个基础方法\",{\"1\":{\"1047\":1}}],[\"回滚事务或者其他操作\",{\"1\":{\"1044\":1}}],[\"回滚事务\",{\"1\":{\"734\":1,\"1037\":1,\"1047\":1,\"1055\":1}}],[\"回滚指针\",{\"1\":{\"684\":1,\"1557\":1}}],[\"回滚\",{\"1\":{\"512\":1,\"1033\":1,\"1061\":1}}],[\"回到家再用自己的\",{\"1\":{\"1828\":1}}],[\"回到学校后\",{\"1\":{\"1825\":1}}],[\"回到北京\",{\"1\":{\"1824\":1}}],[\"回到\",{\"1\":{\"383\":1}}],[\"回边计数器触发即时编译器\",{\"1\":{\"268\":1}}],[\"回收速度也比较快\",{\"1\":{\"1524\":1}}],[\"回收资源\",{\"1\":{\"1487\":1}}],[\"回收流程\",{\"1\":{\"1446\":1}}],[\"回收后可能无法用于大内存的分配\",{\"1\":{\"1445\":1}}],[\"回收后内存仍不足将抛出\",{\"1\":{\"192\":1}}],[\"回收站功能默认是关闭的\",{\"1\":{\"1218\":1}}],[\"回收内存的源码实现\",{\"1\":{\"829\":1}}],[\"回收内存即可\",{\"1\":{\"829\":1}}],[\"回收剩余的回收集中的region\",{\"1\":{\"178\":1}}],[\"回退\",{\"1\":{\"148\":1}}],[\"引擎的一个特殊索引类型\",{\"1\":{\"697\":1}}],[\"引擎的表数据存储在内存中\",{\"1\":{\"680\":1}}],[\"引擎默认生成该隐藏列作为主键\",{\"1\":{\"684\":1,\"1557\":1}}],[\"引擎架构\",{\"0\":{\"637\":1}}],[\"引擎并不会把全部字段取出来\",{\"1\":{\"619\":1}}],[\"引擎遍历整张表\",{\"1\":{\"619\":1}}],[\"引擎把一个表的总行数存在了磁盘上\",{\"1\":{\"619\":1}}],[\"引擎层\",{\"1\":{\"570\":1}}],[\"引擎支持页级锁\",{\"1\":{\"563\":1}}],[\"引擎自动维护的\",{\"1\":{\"560\":1}}],[\"引擎采用\",{\"1\":{\"558\":1}}],[\"引擎\",{\"1\":{\"550\":1}}],[\"引号\",{\"1\":{\"357\":1}}],[\"引导方法\",{\"1\":{\"240\":1}}],[\"引用存储的也是堆中的地址\",{\"1\":{\"1536\":1}}],[\"引用存储的也是常量池中的地址\",{\"1\":{\"1536\":1}}],[\"引用链分析\",{\"1\":{\"1522\":1}}],[\"引用都保存在\",{\"1\":{\"1351\":1}}],[\"引用变更的历史\",{\"1\":{\"1341\":1}}],[\"引用计数\",{\"1\":{\"825\":1,\"827\":1}}],[\"引用计数法实现简单\",{\"1\":{\"223\":1}}],[\"引用计数法为每个对象维护一个引用计数器\",{\"1\":{\"223\":1}}],[\"引用计数法\",{\"0\":{\"223\":1},\"1\":{\"1522\":1}}],[\"引用列名映射\",{\"1\":{\"532\":1}}],[\"引用其它命名空间的缓存配置\",{\"1\":{\"529\":1}}],[\"引用数据类型\",{\"1\":{\"287\":1}}],[\"引用的变更记录\",{\"1\":{\"1346\":1}}],[\"引用的对象\",{\"1\":{\"224\":1}}],[\"引用的关联对象\",{\"1\":{\"196\":1}}],[\"引用实现\",{\"0\":{\"190\":1}}],[\"引用实例\",{\"1\":{\"188\":1}}],[\"引用实例注册的引用队列\",{\"1\":{\"187\":1}}],[\"引用实例不存在关联的引用队列\",{\"1\":{\"186\":1}}],[\"引用实例曾经添加到和它关联的引用队列中\",{\"1\":{\"186\":1}}],[\"引用实例创建的时候关联到一个引用队列实例\",{\"1\":{\"186\":1}}],[\"引用实例处于非active和非pending状态\",{\"1\":{\"186\":1}}],[\"引用\",{\"0\":{\"1351\":1},\"1\":{\"188\":1,\"1341\":1,\"1351\":2}}],[\"引用状态\",{\"0\":{\"186\":1}}],[\"引用在创建时可以指定需要注册的\",{\"1\":{\"184\":1}}],[\"引用队列是java中用于配合软引用\",{\"1\":{\"184\":1}}],[\"引用概述\",{\"0\":{\"183\":1}}],[\"引用类型的值是指向堆内存的某个地址\",{\"1\":{\"359\":1}}],[\"引用类型的指针\",{\"1\":{\"187\":1}}],[\"引用类型参数传递\",{\"1\":{\"359\":1}}],[\"引用类型\",{\"0\":{\"182\":1,\"225\":1},\"1\":{\"183\":1,\"225\":1,\"291\":1,\"1522\":1}}],[\"引用更新\",{\"1\":{\"178\":1}}],[\"引入的管理线程池的框架\",{\"1\":{\"1511\":1}}],[\"引入的一个新的同步工具\",{\"1\":{\"158\":1}}],[\"引入滑动窗口\",{\"1\":{\"1412\":1}}],[\"引入\",{\"1\":{\"778\":1,\"1059\":2,\"1269\":1,\"1368\":1,\"1613\":1}}],[\"引入zookeeper作为配置中心\",{\"1\":{\"657\":1}}],[\"引入了多线程模型\",{\"1\":{\"1572\":1}}],[\"引入了偏向锁\",{\"1\":{\"1515\":1}}],[\"引入了超时机制\",{\"1\":{\"1283\":1}}],[\"引入了很多基础的自动配置类\",{\"1\":{\"1054\":1}}],[\"引入了一项重大特性\",{\"1\":{\"461\":1}}],[\"引入了消息确认机制\",{\"1\":{\"419\":1}}],[\"引入了\",{\"1\":{\"324\":1,\"460\":1}}],[\"引入依赖\",{\"0\":{\"39\":1,\"416\":1,\"455\":1,\"487\":1,\"1707\":1,\"1717\":1},\"1\":{\"24\":1}}],[\"短暂的周末又结束了\",{\"1\":{\"1775\":1}}],[\"短暂停顿\",{\"1\":{\"178\":3}}],[\"短作业的进程会提升系统吞吐量\",{\"1\":{\"1470\":1}}],[\"短路\",{\"1\":{\"1068\":1}}],[\"短路逻辑运算符\",{\"1\":{\"288\":1}}],[\"短连接\",{\"0\":{\"841\":1}}],[\"短文本字符串\",{\"1\":{\"663\":1}}],[\"短信验证码\",{\"0\":{\"14\":1}}],[\"旨在为应用程序提供高效\",{\"1\":{\"432\":1}}],[\"旨在解决在大内存堆上的垃圾收集延迟问题\",{\"1\":{\"178\":1}}],[\"旨在降低java应用程序的停顿时间\",{\"1\":{\"178\":1,\"179\":1}}],[\"筛选回收\",{\"1\":{\"177\":1,\"1525\":1}}],[\"修完bug上线\",{\"1\":{\"1781\":1}}],[\"修复了\",{\"1\":{\"382\":1}}],[\"修饰代码块\",{\"1\":{\"1534\":1}}],[\"修饰的代码块称为静态代码块\",{\"1\":{\"1534\":1}}],[\"修饰的变量称为静态变量\",{\"1\":{\"1534\":1}}],[\"修饰的方法称为静态方法\",{\"1\":{\"1534\":1}}],[\"修饰的类称为静态内部类\",{\"1\":{\"1534\":1}}],[\"修饰的本地变量修改时\",{\"1\":{\"1507\":1}}],[\"修饰的\",{\"1\":{\"1497\":1,\"1536\":1}}],[\"修饰变量\",{\"1\":{\"291\":1,\"1534\":1}}],[\"修饰方法\",{\"1\":{\"291\":1,\"331\":1,\"1534\":1}}],[\"修饰类\",{\"1\":{\"291\":1,\"1534\":1}}],[\"修饰符\",{\"1\":{\"258\":1,\"291\":1}}],[\"修正上次提交\",{\"1\":{\"1323\":1}}],[\"修正整个堆中指向重分配集中旧对象的所有引用\",{\"1\":{\"179\":1}}],[\"修正存在于gc\",{\"1\":{\"178\":1}}],[\"修正并发标记阶段产生的标记变动\",{\"1\":{\"176\":1,\"1525\":1}}],[\"修改nginx的conf下的nginx\",{\"1\":{\"1871\":1}}],[\"修改记录一览无遗\",{\"1\":{\"1790\":1}}],[\"修改所属用户\",{\"1\":{\"1693\":1}}],[\"修改所属用户和组\",{\"1\":{\"1218\":1}}],[\"修改各自的冲突\",{\"1\":{\"1633\":1}}],[\"修改完后再替换原有数据实现的\",{\"1\":{\"1498\":1}}],[\"修改时可以根据字符串长度动态扩展\",{\"1\":{\"1570\":1}}],[\"修改时间\",{\"1\":{\"1474\":1}}],[\"修改时需要向所有其它核心广播请求\",{\"1\":{\"1435\":1}}],[\"修改共享资源用写锁\",{\"1\":{\"1468\":1}}],[\"修改正在跟踪的上游分支\",{\"1\":{\"1338\":1}}],[\"修改远程url\",{\"1\":{\"1326\":1}}],[\"修改了文件\",{\"1\":{\"1310\":1}}],[\"修改了获取\",{\"1\":{\"25\":1}}],[\"修改权限\",{\"1\":{\"1218\":1}}],[\"修改节点\",{\"0\":{\"1175\":1}}],[\"修改节点的事务id\",{\"1\":{\"1174\":1}}],[\"修改策略的话直接使用set命令\",{\"1\":{\"1148\":1}}],[\"修改并重写部署的成本会比较高\",{\"1\":{\"1120\":1}}],[\"修改区间时是\",{\"1\":{\"998\":1}}],[\"修改主节点clusternode\",{\"1\":{\"948\":1}}],[\"修改flags\",{\"1\":{\"948\":1}}],[\"修改自己的clusterstate\",{\"1\":{\"948\":1}}],[\"修改cluserstate\",{\"1\":{\"946\":2}}],[\"修改对应实例结构\",{\"1\":{\"943\":1}}],[\"修改服务器的默认配置\",{\"1\":{\"929\":1}}],[\"修改后标记dirty\",{\"1\":{\"907\":1}}],[\"修改后继节点的\",{\"1\":{\"7\":1}}],[\"修改大量内部数据结构\",{\"1\":{\"739\":1}}],[\"修改少量数据\",{\"1\":{\"739\":1}}],[\"修改的值\",{\"1\":{\"1346\":1}}],[\"修改的undo日志\",{\"1\":{\"749\":1}}],[\"修改的内容会非常多\",{\"1\":{\"739\":1}}],[\"修改的开销相对较重\",{\"1\":{\"162\":1}}],[\"修改系统数据库mysql库中的表\",{\"1\":{\"734\":1}}],[\"修改视图\",{\"1\":{\"622\":1}}],[\"修改数据\",{\"1\":{\"591\":1}}],[\"修改数据类型\",{\"1\":{\"576\":1}}],[\"修改用户密码\",{\"1\":{\"590\":1}}],[\"修改字段名和字段类型\",{\"1\":{\"576\":1}}],[\"修改字段注释字符集\",{\"1\":{\"130\":1}}],[\"修改保存时间\",{\"1\":{\"477\":1}}],[\"修改最新的\",{\"1\":{\"476\":1}}],[\"修改更加高效\",{\"1\":{\"302\":1}}],[\"修改链表指针\",{\"1\":{\"196\":1}}],[\"修改索引注解\",{\"1\":{\"130\":1}}],[\"修改分区表参数\",{\"1\":{\"130\":1}}],[\"修改分区值\",{\"1\":{\"118\":1}}],[\"修改为\",{\"1\":{\"118\":2}}],[\"修改属性\",{\"1\":{\"117\":1}}],[\"修改表名\",{\"1\":{\"575\":1}}],[\"修改表注释字符集\",{\"1\":{\"130\":1}}],[\"修改表注释\",{\"1\":{\"117\":1}}],[\"修改表\",{\"0\":{\"117\":1},\"1\":{\"591\":1}}],[\"修改只能新增字段到mapping中\",{\"1\":{\"45\":1}}],[\"修改\",{\"0\":{\"45\":1,\"50\":1},\"1\":{\"6\":2,\"260\":1,\"512\":1,\"1025\":1,\"1075\":1,\"1155\":1,\"1344\":1}}],[\"良好的响应速度能提升用户体验\",{\"1\":{\"175\":1}}],[\"逃生门设计\",{\"1\":{\"171\":1}}],[\"熬过垃圾收集过程的次数\",{\"1\":{\"171\":1}}],[\"熬过越多次垃圾收集过程的对象就越难以消亡\",{\"1\":{\"171\":1}}],[\"收益管理\",{\"1\":{\"1723\":1}}],[\"收缩字典\",{\"1\":{\"928\":1}}],[\"收缩\",{\"1\":{\"883\":1}}],[\"收费的就比较多了\",{\"1\":{\"1809\":1}}],[\"收费流量费用\",{\"1\":{\"1737\":1}}],[\"收费\",{\"1\":{\"666\":1}}],[\"收到后执行\",{\"1\":{\"1861\":1}}],[\"收到对端响应\",{\"1\":{\"1490\":1}}],[\"收到事件后将新连接分配给\",{\"1\":{\"1488\":1}}],[\"收到的数据的序列号\",{\"1\":{\"1418\":1}}],[\"收到请求后判断库存是否充足\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"收到客户端请求后\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"收到publish\",{\"1\":{\"949\":1}}],[\"收到sync的主服务器执行bgsave\",{\"1\":{\"934\":1}}],[\"收到\",{\"1\":{\"462\":1,\"856\":3,\"1395\":1}}],[\"收到消息后返回\",{\"1\":{\"460\":1}}],[\"收到消息后的确认方式\",{\"1\":{\"422\":1}}],[\"收到数据并确认\",{\"1\":{\"450\":1}}],[\"收集b的candidates\",{\"1\":{\"1861\":1}}],[\"收集a的candidates\",{\"1\":{\"1861\":1}}],[\"收集并存储数据库的统计数据\",{\"1\":{\"719\":1}}],[\"收集更多统计信息\",{\"1\":{\"267\":1}}],[\"收集需要预留出一部分内存\",{\"1\":{\"176\":1}}],[\"收集器应该将java堆划分出不同的区域\",{\"1\":{\"171\":1}}],[\"收件人电话\",{\"1\":{\"124\":1}}],[\"收件人地址\",{\"1\":{\"124\":1}}],[\"收件人姓名\",{\"1\":{\"124\":1}}],[\"绝对时间\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"绝对偏移量\",{\"1\":{\"478\":1}}],[\"绝对路径\",{\"1\":{\"357\":1,\"778\":1}}],[\"绝对值\",{\"1\":{\"129\":1}}],[\"绝大多数对象都是朝生夕灭的\",{\"1\":{\"171\":1}}],[\"弱于软引用\",{\"1\":{\"1522\":1}}],[\"弱引用weak\",{\"1\":{\"1522\":1}}],[\"弱引用已被\",{\"1\":{\"1514\":1}}],[\"弱引用并没有特殊设计\",{\"1\":{\"193\":1}}],[\"弱引用通常用于避免内存泄漏\",{\"1\":{\"193\":1}}],[\"弱引用用于描述非必需对象\",{\"1\":{\"193\":1}}],[\"弱引用\",{\"0\":{\"193\":1},\"1\":{\"183\":3,\"184\":1,\"188\":1,\"533\":1}}],[\"弱分代假说\",{\"1\":{\"171\":1}}],[\"弱抗碰撞\",{\"1\":{\"14\":1}}],[\"垃圾收集算法是内存回收的方法论\",{\"1\":{\"1525\":1}}],[\"垃圾收集情况等\",{\"1\":{\"236\":1}}],[\"垃圾收集器等\",{\"1\":{\"232\":1}}],[\"垃圾对象较多的场景\",{\"1\":{\"169\":1}}],[\"垃圾回收仍然存活时\",{\"1\":{\"1524\":1}}],[\"垃圾回收管理的大型数据结构\",{\"1\":{\"1136\":1}}],[\"垃圾回收机制的管理\",{\"1\":{\"1136\":1}}],[\"垃圾回收的管理\",{\"1\":{\"826\":1}}],[\"垃圾回收的影响\",{\"1\":{\"800\":1}}],[\"垃圾回收的安全点是指程序执行时\",{\"1\":{\"172\":1}}],[\"垃圾回收情况等\",{\"1\":{\"238\":1}}],[\"垃圾回收分析\",{\"1\":{\"237\":1}}],[\"垃圾回收分析等\",{\"1\":{\"237\":1}}],[\"垃圾回收器可能会回收这些对象\",{\"1\":{\"192\":1}}],[\"垃圾回收器就不会回收该对象\",{\"1\":{\"191\":1}}],[\"垃圾回收并且内存不足时\",{\"1\":{\"183\":1}}],[\"垃圾回收时\",{\"1\":{\"173\":1,\"183\":1}}],[\"垃圾回收实现\",{\"0\":{\"172\":1,\"227\":1}}],[\"垃圾回收算法\",{\"0\":{\"167\":1,\"226\":1}}],[\"垃圾回收\",{\"0\":{\"166\":1,\"221\":1},\"1\":{\"134\":1,\"226\":1,\"227\":1,\"829\":1}}],[\"运动\",{\"0\":{\"1818\":1,\"1827\":1}}],[\"运营一个个找过来对问题\",{\"1\":{\"1785\":1}}],[\"运营录入数据发现db压力有点大\",{\"1\":{\"1779\":1}}],[\"运营成本也不相同\",{\"1\":{\"1730\":1}}],[\"运价数据\",{\"1\":{\"1752\":1}}],[\"运价数据达到亿级别\",{\"1\":{\"1732\":1}}],[\"运价+政策\",{\"1\":{\"1733\":1}}],[\"运价分类fd\",{\"1\":{\"1732\":1}}],[\"运价规则有2亿之多\",{\"1\":{\"1732\":1}}],[\"运价是xx\",{\"1\":{\"1732\":1}}],[\"运价是一个统一的叫法\",{\"1\":{\"1732\":1}}],[\"运价的核心要素包括运价\",{\"1\":{\"1732\":1}}],[\"运价\",{\"0\":{\"1732\":1},\"1\":{\"1732\":1,\"1752\":1}}],[\"运力\",{\"1\":{\"1730\":1}}],[\"运算器\",{\"1\":{\"1432\":1}}],[\"运算符\",{\"0\":{\"288\":1},\"1\":{\"258\":1}}],[\"运行环境\",{\"1\":{\"1791\":1}}],[\"运行环境选择合适的底层实现\",{\"1\":{\"784\":1}}],[\"运行结果可信赖\",{\"1\":{\"1705\":1}}],[\"运行都有效\",{\"1\":{\"1632\":1}}],[\"运行\",{\"1\":{\"1632\":1}}],[\"运行测试代码有效\",{\"1\":{\"1632\":1}}],[\"运行新任务\",{\"1\":{\"1454\":1}}],[\"运行状态\",{\"1\":{\"1450\":1}}],[\"运行状态为负\",{\"1\":{\"1112\":1}}],[\"运行队列\",{\"1\":{\"1436\":1}}],[\"运行效率\",{\"1\":{\"1134\":1}}],[\"运行中的程序\",{\"1\":{\"1450\":1}}],[\"运行中\",{\"1\":{\"1089\":1}}],[\"运行日志\",{\"1\":{\"445\":1}}],[\"运行在tcp协议栈之上\",{\"1\":{\"407\":1}}],[\"运行阶段由应用自主决定路由到哪个分片\",{\"1\":{\"656\":1}}],[\"运行阶段\",{\"1\":{\"348\":1}}],[\"运行阶段不存在\",{\"1\":{\"348\":1}}],[\"运行也看左边\",{\"1\":{\"293\":1}}],[\"运行看右边\",{\"1\":{\"293\":1}}],[\"运行期字节码\",{\"1\":{\"255\":1}}],[\"运行时环境\",{\"1\":{\"1634\":1}}],[\"运行时间增加降低优先级\",{\"1\":{\"1470\":1}}],[\"运行时mysql还包括上百个状态变量\",{\"1\":{\"671\":1}}],[\"运行时行为的设置项\",{\"1\":{\"519\":1}}],[\"运行时动态选举\",{\"1\":{\"448\":1}}],[\"运行时动态加载具体的日志实现\",{\"1\":{\"379\":1}}],[\"运行时异常\",{\"1\":{\"345\":1,\"1533\":1}}],[\"运行时常量池还可以动态添加数据\",{\"1\":{\"211\":1}}],[\"运行时数据区\",{\"0\":{\"200\":1},\"1\":{\"212\":1,\"220\":1}}],[\"运行垃圾收集时间\",{\"1\":{\"175\":1}}],[\"运行用户代码时间\",{\"1\":{\"175\":2}}],[\"运行速度快\",{\"1\":{\"169\":1}}],[\"运费\",{\"1\":{\"124\":1}}],[\"遍历等功能\",{\"1\":{\"1099\":1}}],[\"遍历一遍二叉树\",{\"1\":{\"999\":1}}],[\"遍历数组\",{\"1\":{\"970\":3}}],[\"遍历pubsub\",{\"1\":{\"956\":1}}],[\"遍历channel键的订阅者链表\",{\"1\":{\"956\":1}}],[\"遍历整个链表\",{\"1\":{\"920\":1}}],[\"遍历文件提供了两种方式\",{\"1\":{\"779\":1}}],[\"遍历二级索引记录的执行方式\",{\"1\":{\"710\":1}}],[\"遍历到的第一个在\",{\"1\":{\"470\":1}}],[\"遍历时直接用集合删除元素可能出现并发异常\",{\"1\":{\"304\":1}}],[\"遍历方式\",{\"1\":{\"304\":1,\"305\":1}}],[\"遍历队列元素\",{\"1\":{\"184\":1}}],[\"遍历对象图做可达性分析\",{\"1\":{\"179\":1}}],[\"遍历对象图\",{\"1\":{\"176\":1,\"177\":1,\"178\":1,\"1525\":2}}],[\"遍历\",{\"1\":{\"162\":1,\"976\":1,\"979\":1}}],[\"优酷\",{\"1\":{\"1803\":1}}],[\"优雅地退出\",{\"1\":{\"1465\":1}}],[\"优雅关闭\",{\"1\":{\"817\":1}}],[\"优惠券系统在消费成功后\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"优惠券业务\",{\"0\":{\"1291\":1,\"1373\":1}}],[\"优秀\",{\"1\":{\"631\":1}}],[\"优先回收不常访问的内存\",{\"1\":{\"1446\":1}}],[\"优先回调\",{\"1\":{\"417\":1}}],[\"优先选择从当前磁头位置所需寻道时间最短的请求\",{\"1\":{\"1472\":1}}],[\"优先选择运行时间最短的进程\",{\"1\":{\"1470\":1}}],[\"优先选择\",{\"1\":{\"1436\":1}}],[\"优先使用可复用线程\",{\"1\":{\"1110\":1}}],[\"优先使用父类的\",{\"1\":{\"292\":1}}],[\"优先级显得没有意义\",{\"1\":{\"1629\":1}}],[\"优先级队列\",{\"1\":{\"1629\":1}}],[\"优先级调度\",{\"1\":{\"1483\":1}}],[\"优先级越高时间片越短\",{\"1\":{\"1470\":1}}],[\"优先级大于\",{\"1\":{\"1154\":1}}],[\"优先级和偏移量都相同\",{\"1\":{\"943\":1}}],[\"优先级相同\",{\"1\":{\"943\":1,\"1467\":1}}],[\"优先级从高到低依次为\",{\"1\":{\"390\":1}}],[\"优先权\",{\"1\":{\"413\":1,\"1628\":1}}],[\"优势docker\",{\"1\":{\"1634\":1}}],[\"优势\",{\"0\":{\"1609\":1},\"1\":{\"355\":1,\"654\":1}}],[\"优化折中\",{\"1\":{\"1641\":1}}],[\"优化的数据结构\",{\"1\":{\"1571\":1}}],[\"优化的规模与耗时\",{\"1\":{\"267\":1}}],[\"优化硬件和系统\",{\"1\":{\"1548\":1}}],[\"优化失效带来性能问题\",{\"1\":{\"1486\":1}}],[\"优化措施\",{\"1\":{\"1446\":1}}],[\"优化方法例如\",{\"1\":{\"1435\":1}}],[\"优化方案\",{\"0\":{\"704\":1},\"1\":{\"618\":1,\"619\":1,\"732\":1}}],[\"优化点\",{\"1\":{\"1412\":1}}],[\"优化点在于\",{\"1\":{\"800\":1}}],[\"优化mysql的索引使用策略\",{\"1\":{\"705\":1}}],[\"优化数据库的一个重要手段\",{\"1\":{\"705\":1}}],[\"优化生成执行计划\",{\"1\":{\"672\":1}}],[\"优化器找到最优的执行计划后\",{\"1\":{\"1566\":1}}],[\"优化器首先把右外连接查询转换成左外连接查询\",{\"1\":{\"725\":1}}],[\"优化器\",{\"1\":{\"570\":1,\"1224\":1}}],[\"优化处理\",{\"1\":{\"207\":1}}],[\"优化\",{\"0\":{\"613\":1,\"614\":1,\"616\":1,\"617\":1,\"618\":1,\"619\":1,\"620\":1,\"1400\":1,\"1415\":1},\"1\":{\"162\":1,\"726\":1,\"1224\":1,\"1367\":1,\"1404\":1,\"1443\":1,\"1524\":1,\"1566\":1,\"1582\":1,\"1658\":1}}],[\"优点如下\",{\"1\":{\"802\":1}}],[\"优点是简单省事\",{\"1\":{\"1803\":1}}],[\"优点是可以水平扩展\",{\"1\":{\"1590\":1}}],[\"优点是实现了自动故障转移\",{\"1\":{\"1589\":1}}],[\"优点是实现简单\",{\"1\":{\"169\":1}}],[\"优点是部署简单\",{\"1\":{\"1588\":1}}],[\"优点是存储频率更高\",{\"1\":{\"1577\":1}}],[\"优点是以二进制存储的\",{\"1\":{\"1576\":1}}],[\"优点是速度快\",{\"1\":{\"1521\":1}}],[\"优点是稳定\",{\"1\":{\"1521\":1}}],[\"优点是避免了拷贝引起的性能损耗\",{\"1\":{\"788\":1}}],[\"优点是消息连续容易处理\",{\"1\":{\"788\":1}}],[\"优点是不会产生内存碎片\",{\"1\":{\"170\":1}}],[\"优点\",{\"0\":{\"271\":1},\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"26\":1,\"327\":1,\"328\":1,\"329\":1,\"349\":1,\"356\":1,\"448\":1,\"697\":1,\"833\":1,\"889\":1,\"917\":1,\"1404\":1,\"1443\":1,\"1451\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1461\":1,\"1462\":1,\"1511\":1,\"1525\":1,\"1625\":1,\"1626\":1,\"1811\":1}}],[\"阻止线程继续执行\",{\"1\":{\"161\":1}}],[\"阻塞线程\",{\"1\":{\"1517\":1}}],[\"阻塞线程可以由外部唤醒\",{\"1\":{\"365\":1}}],[\"阻塞队列\",{\"1\":{\"1499\":1}}],[\"阻塞队列等\",{\"1\":{\"1450\":1}}],[\"阻塞挂起状态\",{\"1\":{\"1450\":1}}],[\"阻塞状态\",{\"1\":{\"1450\":1,\"1509\":1}}],[\"阻塞在网络中\",{\"1\":{\"1409\":1}}],[\"阻塞在某个\",{\"1\":{\"1089\":1}}],[\"阻塞方法立即返回\",{\"1\":{\"1092\":1}}],[\"阻塞方法之间相互影响\",{\"1\":{\"782\":1}}],[\"阻塞时间由到达时间最接近当前时间的时间事件决定\",{\"1\":{\"921\":1}}],[\"阻塞服务器进程\",{\"1\":{\"911\":1}}],[\"阻塞直到有关注的事件发生\",{\"1\":{\"785\":2}}],[\"阻塞模式下\",{\"1\":{\"782\":1}}],[\"阻塞当前线程\",{\"1\":{\"492\":1}}],[\"阻塞等待并监听最小的节点\",{\"1\":{\"1185\":1}}],[\"阻塞等待并监听最小节点\",{\"1\":{\"1184\":1}}],[\"阻塞等待\",{\"1\":{\"822\":1}}],[\"阻塞等待连接成功\",{\"1\":{\"812\":1}}],[\"阻塞等待更多的follower赶上并重新进入isr\",{\"1\":{\"460\":1}}],[\"阻塞等待直到\",{\"1\":{\"188\":1}}],[\"阻塞式加锁\",{\"1\":{\"1264\":1}}],[\"阻塞式\",{\"1\":{\"1171\":1}}],[\"阻塞式任务队列\",{\"1\":{\"1110\":1}}],[\"阻塞式移除获取\",{\"1\":{\"196\":1}}],[\"阻塞式集合\",{\"1\":{\"162\":1}}],[\"阻塞\",{\"0\":{\"781\":1,\"782\":1},\"1\":{\"134\":1,\"855\":1,\"1478\":2}}],[\"阻塞关联线程\",{\"1\":{\"8\":1}}],[\"门禁等等\",{\"1\":{\"1819\":1}}],[\"门卫和员工\",{\"1\":{\"1461\":1}}],[\"门卫\",{\"1\":{\"787\":1}}],[\"门面店\",{\"1\":{\"1771\":1}}],[\"门面可以统一日志处理方式\",{\"1\":{\"391\":1}}],[\"门面绑定日志实现的过程\",{\"1\":{\"383\":1}}],[\"门面处理\",{\"1\":{\"382\":1}}],[\"门面通常是客户端与子系统之间的入口点\",{\"1\":{\"373\":1}}],[\"门面\",{\"1\":{\"373\":1,\"391\":1}}],[\"门面模式的名字就来源于这个角色\",{\"1\":{\"373\":1}}],[\"门面模式\",{\"0\":{\"373\":1},\"1\":{\"373\":2}}],[\"门闩\",{\"1\":{\"160\":1}}],[\"门店id\",{\"1\":{\"124\":1}}],[\"倒没有对身材有过多的追求了\",{\"1\":{\"1827\":1}}],[\"倒是见不到几个路边摊\",{\"1\":{\"1771\":1}}],[\"倒计数器\",{\"1\":{\"160\":1}}],[\"倒排链doc\",{\"1\":{\"37\":1}}],[\"倒排索引\",{\"0\":{\"35\":1}}],[\"倒排\",{\"1\":{\"34\":1}}],[\"允许不同节点的副本同步过程存在延迟\",{\"1\":{\"1618\":1}}],[\"允许不同进程之间进行异步通信\",{\"1\":{\"1458\":1}}],[\"允许多个进程访问同一块内存区域\",{\"1\":{\"1459\":1}}],[\"允许多个线程同时访问共享资源\",{\"1\":{\"159\":1}}],[\"允许将一个\",{\"1\":{\"1347\":1}}],[\"允许系统中的数据存在中间状态\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"允许系统根据内存情况自动释放缓存对象\",{\"1\":{\"192\":1}}],[\"允许损失部分可用性\",{\"1\":{\"1207\":1,\"1279\":1,\"1618\":1}}],[\"允许对该节点进行\",{\"1\":{\"1168\":1}}],[\"允许删除该节点的子节点\",{\"1\":{\"1168\":1}}],[\"允许读取尚未提交的数据变更\",{\"1\":{\"1612\":1}}],[\"允许读取该节点的内容以及子节点的列表信息\",{\"1\":{\"1168\":1}}],[\"允许读取并发事务已经提交的数据\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1,\"1612\":1}}],[\"允许读取并发事务尚未提交的数据\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1}}],[\"允许更新该节点的数据\",{\"1\":{\"1168\":1}}],[\"允许在该节点下创建子节点\",{\"1\":{\"1168\":1}}],[\"允许开发人员专注于核心应用程序逻辑\",{\"1\":{\"1161\":1}}],[\"允许开发人员向其中增加更多的功能\",{\"1\":{\"1104\":1}}],[\"允许创建的线程数量为\",{\"1\":{\"1110\":1}}],[\"允许的最大线程数量\",{\"1\":{\"1106\":1}}],[\"允许null的列的标志位\",{\"1\":{\"684\":1}}],[\"允许行级锁与表级锁共存\",{\"1\":{\"560\":1}}],[\"允许指定开头\",{\"1\":{\"538\":1}}],[\"允许拦截的方法调用包括\",{\"1\":{\"523\":1}}],[\"允许拦截方法调用\",{\"1\":{\"523\":1}}],[\"允许\",{\"1\":{\"519\":1}}],[\"允许丢个别数据\",{\"1\":{\"460\":1}}],[\"允许客户端与任意\",{\"1\":{\"408\":1}}],[\"允许接口不兼容的类之间进行协作\",{\"1\":{\"374\":1}}],[\"允许测试\",{\"1\":{\"356\":1}}],[\"允许一组线程互相等待\",{\"1\":{\"161\":1}}],[\"允许注册回调\",{\"1\":{\"77\":1}}],[\"释放资源\",{\"1\":{\"1636\":1}}],[\"释放互斥锁\",{\"1\":{\"1506\":1}}],[\"释放\",{\"1\":{\"1284\":1}}],[\"释放消费资源两个子过程\",{\"1\":{\"1284\":1}}],[\"释放读锁\",{\"1\":{\"1188\":1}}],[\"释放内存\",{\"1\":{\"1136\":1}}],[\"释放等等\",{\"1\":{\"1136\":1}}],[\"释放保存点\",{\"1\":{\"1050\":1}}],[\"释放并重建\",{\"1\":{\"966\":1}}],[\"释放超时的客户端连接\",{\"1\":{\"928\":1}}],[\"释放三个\",{\"1\":{\"901\":1}}],[\"释放ht\",{\"1\":{\"883\":1}}],[\"释放规则\",{\"1\":{\"829\":1}}],[\"释放许可证\",{\"1\":{\"159\":1}}],[\"释放写锁\",{\"1\":{\"158\":1,\"1188\":1}}],[\"释放乐观读锁\",{\"1\":{\"158\":1}}],[\"释放锁\",{\"1\":{\"156\":1,\"550\":1,\"552\":1,\"1188\":2,\"1517\":1}}],[\"戳使用加解读锁\",{\"1\":{\"158\":1}}],[\"悲观读和写锁的语义\",{\"1\":{\"158\":1}}],[\"属于看完即删\",{\"1\":{\"1809\":1}}],[\"属于乐观锁类型\",{\"1\":{\"1517\":1}}],[\"属于\",{\"1\":{\"855\":1,\"856\":1,\"857\":1,\"858\":1,\"859\":1,\"860\":1,\"861\":1}}],[\"属于逻辑概念\",{\"1\":{\"694\":1}}],[\"属于外部类的对象\",{\"1\":{\"296\":1}}],[\"属于外部类这个类\",{\"1\":{\"295\":1}}],[\"属于类\",{\"1\":{\"290\":1}}],[\"属于线性探测清理\",{\"1\":{\"154\":1,\"1514\":1}}],[\"属性注入\",{\"1\":{\"1597\":1}}],[\"属性显式指定名称\",{\"1\":{\"1595\":1}}],[\"属性值\",{\"1\":{\"1557\":1}}],[\"属性同\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"属性是一个2048byte\",{\"1\":{\"946\":1}}],[\"属性记录本节点负责处理的槽数量\",{\"1\":{\"946\":1}}],[\"属性加载\",{\"1\":{\"541\":3}}],[\"属性\",{\"1\":{\"527\":1,\"541\":2,\"928\":1,\"1061\":1,\"1224\":1}}],[\"属性指定的路径读取属性文件\",{\"1\":{\"518\":1}}],[\"属性读取类路径下属性文件\",{\"1\":{\"518\":1}}],[\"属性优先级\",{\"1\":{\"518\":1}}],[\"属性配置无效\",{\"1\":{\"1057\":1}}],[\"属性配置\",{\"1\":{\"488\":1,\"518\":1}}],[\"属性控制消息的生存时间\",{\"1\":{\"424\":1}}],[\"属性或\",{\"1\":{\"424\":1}}],[\"属性进行匹配\",{\"1\":{\"414\":1,\"1628\":1}}],[\"属性查找\",{\"1\":{\"357\":1}}],[\"属性表的结构由属性名索引和属性长度组成\",{\"1\":{\"240\":1}}],[\"属性表用于存储与类\",{\"1\":{\"240\":1}}],[\"属性表\",{\"1\":{\"240\":1}}],[\"属性表集合\",{\"1\":{\"240\":1,\"1526\":1}}],[\"属性决定了\",{\"1\":{\"99\":1}}],[\"则中位数位于数量较多的文件中\",{\"1\":{\"1658\":1}}],[\"则直接提交就行\",{\"1\":{\"1556\":1}}],[\"则直接加入到队尾\",{\"1\":{\"1518\":1}}],[\"则它们的\",{\"1\":{\"1535\":1}}],[\"则默认采用\",{\"1\":{\"1532\":1}}],[\"则默认使用\",{\"1\":{\"1369\":1}}],[\"则触发full\",{\"1\":{\"1524\":1}}],[\"则触发\",{\"1\":{\"1524\":1}}],[\"则再次尝试修改state变量的值\",{\"1\":{\"1518\":1}}],[\"则再判断队列中是否有其他等待的节点\",{\"1\":{\"1518\":1}}],[\"则加入到队尾\",{\"1\":{\"1518\":1}}],[\"则加入该事务\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"则获取到了锁\",{\"1\":{\"1518\":1}}],[\"则尝试修改state变量的值\",{\"1\":{\"1518\":1}}],[\"则尝试派生表物化\",{\"1\":{\"726\":1}}],[\"则将当前请求资源的线程设置为有效的工作线程\",{\"1\":{\"1516\":1}}],[\"则将x标记fail已下线\",{\"1\":{\"948\":1}}],[\"则在table中的i位置放入fwd\",{\"1\":{\"1497\":1}}],[\"则能创建约\",{\"1\":{\"1464\":1}}],[\"则表明当前有阻塞中的进程\",{\"1\":{\"1460\":1}}],[\"则表明资源已被占用\",{\"1\":{\"1460\":1}}],[\"则切换的过程就跟进程上下文切换一样\",{\"1\":{\"1454\":1}}],[\"则负责在\",{\"1\":{\"1423\":1}}],[\"则其它线程将受到影响\",{\"1\":{\"1420\":1}}],[\"则改为上一次序列号\",{\"1\":{\"1418\":2}}],[\"则一定不存在\",{\"1\":{\"1390\":1}}],[\"则取消订单\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"则退回\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"则退出\",{\"1\":{\"633\":1}}],[\"则成为\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"则创建一个事务作为当前事务的嵌套事务来运行\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"则创建一个新的事务\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"则创建的是常规索引\",{\"1\":{\"701\":1}}],[\"则到期自动释放锁\",{\"1\":{\"1264\":1}}],[\"则从标准输入读取\",{\"1\":{\"1218\":1}}],[\"则从磁盘加载并缓存\",{\"1\":{\"638\":1}}],[\"则比较\",{\"1\":{\"1204\":1}}],[\"则上写锁成功\",{\"1\":{\"1185\":1}}],[\"则上锁成功\",{\"1\":{\"1184\":1}}],[\"则上锁失败\",{\"1\":{\"1184\":1,\"1185\":1}}],[\"则打开redis\",{\"1\":{\"948\":1}}],[\"则破例执行一次命令\",{\"1\":{\"947\":1}}],[\"则用aof文件还原\",{\"1\":{\"929\":1}}],[\"则保存的是字符串\",{\"1\":{\"913\":1}}],[\"则以\",{\"1\":{\"913\":1}}],[\"则占1\",{\"1\":{\"892\":1}}],[\"则占1字节\",{\"1\":{\"892\":2}}],[\"则占5字节\",{\"1\":{\"892\":1}}],[\"则额外分配1mb的free空间\",{\"1\":{\"879\":1}}],[\"则额外分配len长度的free空间\",{\"1\":{\"879\":1}}],[\"则执行\",{\"1\":{\"872\":1}}],[\"则执行逻辑\",{\"1\":{\"633\":1}}],[\"则安卓平台默认非池化\",{\"1\":{\"860\":1}}],[\"则抛出异常\",{\"1\":{\"843\":1}}],[\"则进行延迟发送\",{\"1\":{\"839\":1}}],[\"则是组合了一个\",{\"1\":{\"1135\":1}}],[\"则是上层的抽象类\",{\"1\":{\"1111\":1}}],[\"则是执行了深拷贝\",{\"1\":{\"832\":1}}],[\"则是进入mapperparse\",{\"1\":{\"541\":1}}],[\"则可能存在\",{\"1\":{\"1390\":1}}],[\"则可能是ref\",{\"1\":{\"728\":1}}],[\"则可以重用池中\",{\"1\":{\"826\":1}}],[\"则每次增加\",{\"1\":{\"828\":1}}],[\"则每次容量翻倍\",{\"1\":{\"828\":1}}],[\"则每次都要创建新的\",{\"1\":{\"826\":1}}],[\"则每个表的文件表空间包含单个innodb表的数据和索引\",{\"1\":{\"639\":1}}],[\"则处于被缓存状态\",{\"1\":{\"751\":1}}],[\"则先删除旧记录\",{\"1\":{\"748\":1}}],[\"则相关信息需要保存至索引列信息中\",{\"1\":{\"747\":1}}],[\"则类型type字段首位置1\",{\"1\":{\"739\":1}}],[\"则仅对当前会话的下一个事务有效\",{\"1\":{\"737\":1}}],[\"则对当前会话的所有后续事务有效\",{\"1\":{\"737\":1}}],[\"则对语句执行完后的新会话有效\",{\"1\":{\"737\":1}}],[\"则对这些记录的锁可以放到一个锁结构中\",{\"1\":{\"564\":1}}],[\"则key\",{\"1\":{\"728\":1}}],[\"则评估以下两种策略\",{\"1\":{\"726\":1}}],[\"则优化器会先转换\",{\"1\":{\"726\":1}}],[\"则还不如走全表扫描来的快\",{\"1\":{\"703\":1}}],[\"则不会加入最后的结果集\",{\"1\":{\"713\":1}}],[\"则不使用索引\",{\"1\":{\"703\":1}}],[\"则不需要互相等待\",{\"1\":{\"561\":1}}],[\"则这棵b树每个节点最多存储\",{\"1\":{\"698\":1}}],[\"则\",{\"1\":{\"682\":1,\"732\":1,\"996\":2,\"1420\":1,\"1657\":2}}],[\"则建立hash索引\",{\"1\":{\"638\":1}}],[\"则会打开客户端的redis\",{\"1\":{\"960\":1}}],[\"则会转换为raw\",{\"1\":{\"896\":1}}],[\"则会自底向上确定默认的字符集和比较规则\",{\"1\":{\"674\":1}}],[\"则会从磁盘中加载到缓冲区\",{\"1\":{\"637\":1}}],[\"则会直接using\",{\"1\":{\"616\":1}}],[\"则继续下一次循环\",{\"1\":{\"633\":1}}],[\"则采用默认值\",{\"1\":{\"598\":1}}],[\"则返回t\",{\"1\":{\"596\":1}}],[\"则事物b必须要确认表的每一行都不存在排他锁\",{\"1\":{\"560\":1}}],[\"则降级为记录锁\",{\"1\":{\"558\":4}}],[\"则为\",{\"1\":{\"538\":1}}],[\"则该视图不可更新\",{\"1\":{\"624\":1}}],[\"则该follower将被踢出isr\",{\"1\":{\"460\":1}}],[\"则该线程将被阻塞\",{\"1\":{\"159\":1}}],[\"则需要先触发其父类的初始化\",{\"1\":{\"1527\":1}}],[\"则需要发送\",{\"1\":{\"839\":4}}],[\"则需要增加更多的机器资源\",{\"1\":{\"435\":1}}],[\"则需要需改代码\",{\"1\":{\"399\":1}}],[\"则除非此时可以直接投递到消费者\",{\"1\":{\"424\":1}}],[\"则消息永不过期\",{\"1\":{\"424\":1}}],[\"则消息变为\",{\"1\":{\"424\":1}}],[\"则入队\",{\"1\":{\"188\":1}}],[\"则赋值特殊的\",{\"1\":{\"187\":1}}],[\"则状态转换如下\",{\"1\":{\"186\":1}}],[\"则使用各种不同的查询语句进行查询\",{\"1\":{\"1543\":1}}],[\"则使用\",{\"1\":{\"163\":1,\"699\":1}}],[\"则结束清理\",{\"1\":{\"154\":1,\"1514\":1}}],[\"则当前线程放弃更新\",{\"1\":{\"148\":1}}],[\"启停\",{\"1\":{\"569\":1}}],[\"启用幂等后\",{\"1\":{\"462\":1}}],[\"启用更多耗时更长的优化\",{\"1\":{\"267\":1}}],[\"启发式清理结束后\",{\"1\":{\"1514\":1}}],[\"启发式清理\",{\"1\":{\"154\":1,\"1514\":2}}],[\"启动spring容器\",{\"1\":{\"1718\":1}}],[\"启动快\",{\"1\":{\"1634\":1}}],[\"启动类\",{\"1\":{\"1608\":1}}],[\"启动类加载器是虚拟机自身的一部分\",{\"1\":{\"254\":1}}],[\"启动类加载器是虚拟机的一部分\",{\"1\":{\"254\":1}}],[\"启动类加载器\",{\"1\":{\"254\":1,\"1528\":1}}],[\"启动客户端\",{\"1\":{\"1225\":1}}],[\"启动元数据管理服务\",{\"1\":{\"1225\":1}}],[\"启动之后都会发起选举\",{\"1\":{\"1203\":1}}],[\"启动时选举\",{\"0\":{\"1203\":1}}],[\"启动所有\",{\"0\":{\"1198\":1}}],[\"启动两个线程\",{\"1\":{\"1563\":1}}],[\"启动两个\",{\"1\":{\"1188\":1}}],[\"启动并查看\",{\"1\":{\"1155\":1}}],[\"启动后的就绪\",{\"1\":{\"1089\":1}}],[\"启动后自动注册到\",{\"1\":{\"466\":1}}],[\"启动和初始化\",{\"0\":{\"939\":1}}],[\"启动和停止时\",{\"1\":{\"642\":1}}],[\"启动流程步骤\",{\"1\":{\"873\":2}}],[\"启动流程主要涉及两个线程\",{\"1\":{\"863\":1}}],[\"启动流程\",{\"0\":{\"863\":1,\"1607\":1}}],[\"启动mysql服务器进程\",{\"1\":{\"569\":1}}],[\"启动mysql\",{\"1\":{\"569\":1}}],[\"启动一个事务\",{\"1\":{\"550\":1}}],[\"启动kafka服务器\",{\"1\":{\"446\":1}}],[\"启动\",{\"1\":{\"446\":1,\"1165\":1,\"1203\":5,\"1217\":3,\"1225\":1,\"1631\":1,\"1634\":1}}],[\"启动迅速\",{\"1\":{\"266\":1}}],[\"启动java\",{\"1\":{\"235\":1}}],[\"启动线程执行\",{\"1\":{\"1114\":1}}],[\"启动线程\",{\"0\":{\"871\":1},\"1\":{\"143\":1,\"327\":1,\"328\":1,\"329\":1}}],[\"启动步骤\",{\"1\":{\"93\":1}}],[\"超喜欢威海\",{\"1\":{\"1825\":1}}],[\"超前点播等一系列恶心操作\",{\"1\":{\"1803\":1}}],[\"超级块\",{\"1\":{\"1474\":1}}],[\"超级工程\",{\"1\":{\"426\":1}}],[\"超文本指文字\",{\"1\":{\"1398\":1}}],[\"超文本传输协议\",{\"1\":{\"1398\":1}}],[\"超出查订比的部分额外收费\",{\"1\":{\"1737\":1}}],[\"超出次数后\",{\"1\":{\"1713\":1}}],[\"超出容量时自动扩张\",{\"1\":{\"984\":1}}],[\"超出物理内存将产生outofmemoryerror\",{\"1\":{\"212\":1}}],[\"超过target剪枝\",{\"1\":{\"1674\":1}}],[\"超过了就剪枝\",{\"1\":{\"1674\":1}}],[\"超过\",{\"1\":{\"1448\":1,\"1514\":1}}],[\"超过后会直接丢弃或返回\",{\"1\":{\"1414\":1}}],[\"超过后继续监测\",{\"1\":{\"923\":1}}],[\"超过半数\",{\"1\":{\"1205\":1}}],[\"超过节点半数\",{\"1\":{\"1203\":1}}],[\"超过即关闭客户端\",{\"1\":{\"923\":1}}],[\"超过时间限度会进行热度衰减\",{\"1\":{\"268\":1}}],[\"超过阈值后拒绝请求\",{\"1\":{\"1637\":1}}],[\"超过阈值就移动到young区域头部\",{\"1\":{\"732\":1}}],[\"超过阈值即热点方法\",{\"1\":{\"268\":1}}],[\"超过阈值\",{\"1\":{\"154\":1,\"1514\":1}}],[\"超时和重试机制\",{\"1\":{\"1638\":1}}],[\"超时后线程会自动苏醒\",{\"1\":{\"1512\":1}}],[\"超时消息\",{\"1\":{\"1427\":1}}],[\"超时那么强烈\",{\"1\":{\"1413\":1}}],[\"超时重传时间\",{\"1\":{\"1411\":1}}],[\"超时重传\",{\"1\":{\"1411\":1}}],[\"超时回收\",{\"1\":{\"1110\":1}}],[\"超时时间\",{\"1\":{\"1040\":1}}],[\"超时处理钩子在脚本运行期间\",{\"1\":{\"966\":1}}],[\"超时将被踢出\",{\"1\":{\"467\":1}}],[\"超时将被删除\",{\"1\":{\"445\":1}}],[\"超时\",{\"1\":{\"6\":1,\"184\":1,\"1042\":1,\"1383\":1}}],[\"超时事件\",{\"1\":{\"6\":1}}],[\"清空终端内容\",{\"1\":{\"1690\":1}}],[\"清空工作内存\",{\"1\":{\"1506\":1}}],[\"清除服务器中所有和lua脚本有关的信息\",{\"1\":{\"966\":1}}],[\"清除缓冲区标记\",{\"1\":{\"768\":1}}],[\"清除策略\",{\"1\":{\"533\":1}}],[\"清除算法\",{\"1\":{\"176\":1,\"1523\":1,\"1525\":1}}],[\"清除\",{\"0\":{\"168\":1},\"1\":{\"171\":1,\"1523\":1}}],[\"清除状态后竞争资源\",{\"1\":{\"8\":1}}],[\"清理临时的\",{\"1\":{\"1634\":1}}],[\"清理代码\",{\"0\":{\"1237\":1},\"1\":{\"1234\":1}}],[\"清理一个空闲\",{\"1\":{\"1116\":1}}],[\"清理和统计工作\",{\"1\":{\"1115\":1}}],[\"清理局部变量\",{\"1\":{\"1093\":1}}],[\"清理数据库中的过期键值对\",{\"1\":{\"920\":1}}],[\"清理日志\",{\"1\":{\"643\":1}}],[\"清理工作目录\",{\"1\":{\"1343\":1}}],[\"清理工作\",{\"1\":{\"195\":1,\"1059\":1}}],[\"清理没有存活对象的region\",{\"1\":{\"178\":1}}],[\"清理标记死亡的对象\",{\"1\":{\"176\":1,\"1525\":1}}],[\"清理\",{\"1\":{\"154\":1}}],[\"直连\",{\"1\":{\"1423\":1}}],[\"直至n=0\",{\"1\":{\"1665\":1}}],[\"直至队列非空\",{\"1\":{\"1499\":1}}],[\"直至最大次数后断开连接\",{\"1\":{\"1409\":1}}],[\"直至资源耗尽\",{\"1\":{\"1107\":1,\"1511\":1}}],[\"直到遇到最低位的1把它变0\",{\"1\":{\"1665\":1}}],[\"直到可以定位到中位数\",{\"1\":{\"1658\":1}}],[\"直到服务器崩溃无法再继续提供服务\",{\"1\":{\"1639\":1}}],[\"直到服务器的某个资源已经达到饱和\",{\"1\":{\"1639\":1}}],[\"直到服务器销毁时才会关闭\",{\"1\":{\"924\":1}}],[\"直到发送给消费者\",{\"1\":{\"1628\":1}}],[\"直到获取到锁\",{\"1\":{\"1515\":1}}],[\"直到遍历过所有的节点以后就完成了复制工作\",{\"1\":{\"1497\":1}}],[\"直到内核把数据拷贝到用户空间\",{\"1\":{\"1504\":1}}],[\"直到内核缓冲区数据被\",{\"1\":{\"1487\":1}}],[\"直到内核将数据准备好并将数据拷贝到应用程序缓冲区\",{\"1\":{\"1478\":1}}],[\"直到内存溢出也不会回收\",{\"1\":{\"183\":1}}],[\"直到磁头到达该方向上的最后的磁道\",{\"1\":{\"1472\":1}}],[\"直到它拿到锁\",{\"1\":{\"1468\":1}}],[\"直到资源可用后才能继续执行后续操作\",{\"1\":{\"1463\":1}}],[\"直到释放足够的内存\",{\"1\":{\"1446\":1}}],[\"直到构成一个连通图\",{\"1\":{\"1388\":1}}],[\"直到前面两个读锁测试结束\",{\"1\":{\"1188\":1}}],[\"直到\",{\"1\":{\"1091\":1}}],[\"直到第一次用到\",{\"1\":{\"1077\":1}}],[\"直到选出新的主节点为止\",{\"1\":{\"948\":1}}],[\"直到选出领头sentinel为止\",{\"1\":{\"942\":1}}],[\"直到源节点保存的所有属于槽slot的键值对都被迁移至目标节点为止\",{\"1\":{\"946\":1}}],[\"直到返回\",{\"1\":{\"829\":1}}],[\"直到找到一条可访问的版本\",{\"1\":{\"754\":1,\"1557\":1}}],[\"直到找到合适的位置\",{\"1\":{\"154\":1}}],[\"直到提交成功\",{\"1\":{\"492\":1}}],[\"直到该组内记录达到8条\",{\"1\":{\"690\":1}}],[\"直到该\",{\"1\":{\"471\":1}}],[\"直到以下三种情况任意一个发生\",{\"1\":{\"363\":1}}],[\"直到另一个线程唤醒\",{\"1\":{\"331\":1}}],[\"直到收集结束\",{\"1\":{\"173\":1}}],[\"直到指定数量的线程执行完成\",{\"1\":{\"161\":1}}],[\"直到所有线程都达到某个状态后再一起继续执行\",{\"1\":{\"161\":1}}],[\"直到其他线程释放一个许可证\",{\"1\":{\"159\":1}}],[\"直到空槽\",{\"1\":{\"154\":2,\"1514\":2}}],[\"直接签了实习的单位\",{\"1\":{\"1815\":1}}],[\"直接构建到仓库中的一个分支上\",{\"1\":{\"1790\":1}}],[\"直接整个项目上传到\",{\"1\":{\"1790\":1}}],[\"直接显示数字\",{\"1\":{\"1740\":1}}],[\"直接对接航空公司的官方接口\",{\"1\":{\"1727\":1}}],[\"直接去掉used数组就可以了\",{\"1\":{\"1677\":1}}],[\"直接过滤掉不满足条件的记录\",{\"1\":{\"1548\":1}}],[\"直接尝试修改\",{\"1\":{\"1518\":1}}],[\"直接更新\",{\"1\":{\"1514\":1}}],[\"直接放入\",{\"1\":{\"1514\":1}}],[\"直接根据哈希值\",{\"1\":{\"1497\":1}}],[\"直接根据字符子串\",{\"1\":{\"656\":1}}],[\"直接io\",{\"1\":{\"1486\":1}}],[\"直接在用户空间开辟缓冲区\",{\"1\":{\"1479\":1}}],[\"直接在select语句之前加上关键字\",{\"1\":{\"727\":1}}],[\"直接\",{\"1\":{\"1478\":2}}],[\"直接通过系统调用访问文件\",{\"1\":{\"1478\":1}}],[\"直接通过主键索引进行排序及查询\",{\"1\":{\"618\":1}}],[\"直接处理硬件请求\",{\"1\":{\"1437\":1}}],[\"直接映射\",{\"1\":{\"1435\":1}}],[\"直接访问一个控制器的吞吐量可达\",{\"1\":{\"1367\":1}}],[\"直接使用\",{\"1\":{\"1284\":1}}],[\"直接使用了\",{\"1\":{\"525\":1}}],[\"直接提交的队列\",{\"1\":{\"1107\":1,\"1511\":1}}],[\"直接打印调用栈\",{\"1\":{\"1095\":1}}],[\"直接设置标记即可\",{\"1\":{\"1092\":1}}],[\"直接膨胀为重量级锁\",{\"1\":{\"1076\":1}}],[\"直接利用回滚日志中的信息将数据回滚到修改之前的状态\",{\"1\":{\"1034\":1}}],[\"直接返回\",{\"1\":{\"998\":2,\"1006\":1}}],[\"直接读取数据库状态\",{\"1\":{\"917\":1}}],[\"直接异步关闭\",{\"1\":{\"821\":1}}],[\"直接进入下一次循环\",{\"1\":{\"633\":1}}],[\"直接进行\",{\"1\":{\"448\":1}}],[\"直接按行进行累加\",{\"1\":{\"619\":3}}],[\"直接简写\",{\"1\":{\"587\":1}}],[\"直接取指定的partition值\",{\"1\":{\"452\":1}}],[\"直接日志实现\",{\"0\":{\"378\":1}}],[\"直接全文搜索所有的name元素并打印\",{\"1\":{\"357\":1}}],[\"直接将\",{\"1\":{\"301\":1}}],[\"直接将本地方法栈和虚拟机栈合二为一\",{\"1\":{\"209\":1}}],[\"直接指向堆中对象实例\",{\"1\":{\"1521\":1}}],[\"直接指向常量池里的\",{\"1\":{\"301\":1}}],[\"直接指针\",{\"1\":{\"216\":1,\"1521\":1}}],[\"直接丢掉小数部分\",{\"1\":{\"287\":1}}],[\"直接转换成int类型参与运算的\",{\"1\":{\"287\":1}}],[\"直接引用是可以直接指向目标的指针\",{\"1\":{\"252\":1}}],[\"直接内存回收会阻塞线程\",{\"1\":{\"1446\":1}}],[\"直接内存回收\",{\"1\":{\"1446\":1}}],[\"直接内存访问\",{\"1\":{\"1136\":1,\"1481\":1,\"1486\":1}}],[\"直接内存对\",{\"1\":{\"826\":1}}],[\"直接内存创建和销毁的代价昂贵\",{\"1\":{\"826\":1}}],[\"直接内存由\",{\"1\":{\"212\":1}}],[\"直接内存\",{\"0\":{\"212\":1},\"1\":{\"770\":1,\"826\":1}}],[\"直接调用\",{\"1\":{\"196\":1,\"818\":1}}],[\"直接新建\",{\"1\":{\"154\":1}}],[\"直接抛出\",{\"1\":{\"62\":1}}],[\"槽指派信息\",{\"1\":{\"949\":1}}],[\"槽的更新\",{\"1\":{\"690\":1}}],[\"槽非空的情况下\",{\"1\":{\"154\":1}}],[\"槽容量相与\",{\"1\":{\"154\":1,\"1514\":1}}],[\"造成\",{\"1\":{\"1786\":1}}],[\"造成服务的不可用\",{\"1\":{\"1588\":1}}],[\"造成写入性能降低\",{\"1\":{\"1548\":1}}],[\"造成系统内存的浪费\",{\"1\":{\"1445\":1}}],[\"造成资源浪费\",{\"1\":{\"1409\":1}}],[\"造成误删其它线程加的锁\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"造成程序死锁\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"造成极大的资源开销\",{\"1\":{\"934\":1}}],[\"造成空间浪费\",{\"1\":{\"750\":1}}],[\"造成内存泄漏\",{\"1\":{\"154\":1}}],[\"造成所有线程都进入等待\",{\"1\":{\"134\":1}}],[\"此为第三及第四自由的结合\",{\"1\":{\"1747\":1}}],[\"此操作\",{\"1\":{\"1283\":1}}],[\"此次报文已经可以携带数据了\",{\"1\":{\"1409\":1}}],[\"此次分布式锁的迁移正好尝试了借助\",{\"1\":{\"1238\":1}}],[\"此次查询中需要读取的数据量\",{\"1\":{\"729\":1}}],[\"此节点的权限版本\",{\"1\":{\"1174\":1}}],[\"此值为2的幂次方\",{\"1\":{\"1143\":1}}],[\"此后\",{\"1\":{\"936\":1}}],[\"此处即执行\",{\"1\":{\"873\":1}}],[\"此处即执行了\",{\"1\":{\"870\":1}}],[\"此处仅以聚簇索引为例\",{\"1\":{\"746\":1}}],[\"此\",{\"1\":{\"787\":2,\"788\":1}}],[\"此sql由于name没有索引\",{\"1\":{\"620\":1}}],[\"此sql由于id有主键索引\",{\"1\":{\"620\":1}}],[\"此语句耗时很长\",{\"1\":{\"618\":1}}],[\"此外get没有规定不能携带请求体\",{\"1\":{\"1405\":1}}],[\"此外还有一些特殊情况\",{\"1\":{\"1524\":1}}],[\"此外还有\",{\"1\":{\"1374\":1}}],[\"此外\",{\"1\":{\"300\":1,\"493\":1,\"542\":1,\"671\":1,\"1120\":1,\"1235\":1}}],[\"此类的属性表中的属性数\",{\"1\":{\"240\":1}}],[\"此时此刻\",{\"1\":{\"1785\":1}}],[\"此时i每8位的值是原数字每8位1的个数\",{\"1\":{\"1666\":1}}],[\"此时i每4位的值是原数字每4位1的个数\",{\"1\":{\"1666\":1}}],[\"此时i每两位的值是原数字每两位1的个数\",{\"1\":{\"1666\":1}}],[\"此时a再完成它的整个生命周期\",{\"1\":{\"1599\":1}}],[\"此时a系统是强依赖b系统和c系统\",{\"1\":{\"399\":1}}],[\"此时的\",{\"1\":{\"1599\":1}}],[\"此时程序就运行不了\",{\"1\":{\"1445\":1}}],[\"此时发送方把\",{\"1\":{\"1413\":1}}],[\"此时发包数呈线性增长\",{\"1\":{\"1413\":1}}],[\"此时服务端处于\",{\"1\":{\"1409\":1,\"1487\":2}}],[\"此时如果执行git\",{\"1\":{\"1336\":1}}],[\"此时扣除数据库中的库存\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"此时应该没有读取旧集群的调用操作了\",{\"1\":{\"1237\":1}}],[\"此时有两种结果\",{\"1\":{\"1076\":1}}],[\"此时仅注册了所有的\",{\"1\":{\"1012\":1}}],[\"此时从服务器成为主服务器的一个客户端\",{\"1\":{\"936\":1}}],[\"此时客户端处于\",{\"1\":{\"1409\":1}}],[\"此时客户端可以在任何时候\",{\"1\":{\"842\":1}}],[\"此时客户端断开\",{\"1\":{\"422\":1}}],[\"此时记录处于中间状态\",{\"1\":{\"747\":1}}],[\"此时可以只对字符串的一部分前缀\",{\"1\":{\"707\":1}}],[\"此时可以通过mq进行解耦\",{\"1\":{\"399\":1}}],[\"此时索引就会失效\",{\"1\":{\"703\":1}}],[\"此时需要\",{\"1\":{\"618\":1}}],[\"此时就引入意向锁\",{\"1\":{\"560\":1}}],[\"此时我们需要将kafka的offset保存到支持事务的自定义介质\",{\"1\":{\"499\":1}}],[\"此时无有效的日志实现\",{\"1\":{\"382\":1}}],[\"此时才会创建临时线程\",{\"1\":{\"332\":1}}],[\"此时\",{\"1\":{\"154\":2,\"460\":1,\"537\":1,\"865\":1,\"998\":2,\"1203\":1}}],[\"此虚拟列需要设置\",{\"1\":{\"128\":1}}],[\"强调了平民有机会使用新闻媒体的重要性\",{\"1\":{\"1767\":1}}],[\"强调回归原始的伊斯兰教教义\",{\"1\":{\"1767\":1}}],[\"强行中断所有线程\",{\"1\":{\"1116\":1}}],[\"强大的技术团队\",{\"1\":{\"654\":1}}],[\"强转前尽量使用instanceof判断对象的真实类型再进行强转\",{\"1\":{\"293\":1}}],[\"强制将读请求路由到主库处理\",{\"1\":{\"1563\":1}}],[\"强制\",{\"1\":{\"1343\":1,\"1699\":1}}],[\"强制删除还未合并的分支\",{\"1\":{\"1333\":1}}],[\"强制删除\",{\"1\":{\"1319\":1}}],[\"强制取消跟踪\",{\"1\":{\"1319\":1}}],[\"强制缓存没有命中时\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"强制缓存\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"强制覆盖\",{\"1\":{\"1218\":3}}],[\"强制中断所有线程\",{\"1\":{\"1116\":1}}],[\"强制自己重新向所有从服务器传播脚本\",{\"1\":{\"967\":1}}],[\"强制需要腾出缓存空间时必须进行的单页刷新\",{\"1\":{\"731\":1}}],[\"强制使用索引\",{\"1\":{\"705\":1,\"1567\":1}}],[\"强制类型转换可能造成数据\",{\"1\":{\"287\":1}}],[\"强制类型转换\",{\"1\":{\"287\":1,\"293\":1}}],[\"强制执行方法并将返回结果放入缓存\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"强制执行线程转储操作\",{\"1\":{\"234\":1}}],[\"强制执行堆转储操作\",{\"1\":{\"232\":1}}],[\"强分代假说\",{\"1\":{\"171\":1}}],[\"强引用strongly\",{\"1\":{\"1522\":1}}],[\"强引用是最常见的引用类型\",{\"1\":{\"191\":1}}],[\"强引用关系永远不会断开\",{\"1\":{\"154\":1}}],[\"强引用\",{\"0\":{\"191\":1},\"1\":{\"154\":2,\"183\":2}}],[\"强抗碰撞\",{\"1\":{\"14\":1}}],[\"合着整个需求从一开始的文档便都是错的\",{\"1\":{\"1781\":1}}],[\"合理使用缓存\",{\"1\":{\"1566\":1}}],[\"合理设计缓存容量\",{\"1\":{\"1259\":1}}],[\"合法的时间戳\",{\"1\":{\"1418\":1}}],[\"合法的序列号\",{\"1\":{\"1418\":1}}],[\"合法即可返回数据\",{\"1\":{\"26\":1}}],[\"合成一个大图片\",{\"1\":{\"1400\":1}}],[\"合成标记\",{\"1\":{\"240\":1}}],[\"合到本地的\",{\"1\":{\"1326\":1}}],[\"合并统计\",{\"1\":{\"1666\":1}}],[\"合并每个子结果\",{\"1\":{\"1658\":1}}],[\"合并分支会新增一个merge\",{\"1\":{\"1633\":1}}],[\"合并请求\",{\"1\":{\"1400\":1}}],[\"合并冲突时标记已解决等\",{\"1\":{\"1315\":1}}],[\"合并所有\",{\"1\":{\"1219\":1}}],[\"合并失败\",{\"1\":{\"726\":1}}],[\"合并插入缓存\",{\"1\":{\"640\":1}}],[\"合并\",{\"1\":{\"608\":1}}],[\"合并查询\",{\"0\":{\"602\":1}}],[\"合并结果\",{\"1\":{\"153\":1}}],[\"适用场景\",{\"1\":{\"1296\":1,\"1297\":1}}],[\"适用于支持事务的引擎的逻辑备份\",{\"1\":{\"1559\":1}}],[\"适用于处理结构化数据\",{\"1\":{\"1543\":1}}],[\"适用于少量空闲区场景\",{\"1\":{\"1477\":1}}],[\"适用于\",{\"1\":{\"1470\":1,\"1483\":1}}],[\"适用于能明确区分\",{\"1\":{\"1468\":1}}],[\"适用于能够进行任务拆分的\",{\"1\":{\"153\":1}}],[\"适用于大量数据共享\",{\"1\":{\"1459\":1}}],[\"适用于多个进程之间的通信\",{\"1\":{\"1457\":1}}],[\"适用于一对一通信\",{\"1\":{\"1456\":1}}],[\"适用于音频\",{\"1\":{\"1400\":1}}],[\"适用于文本\",{\"1\":{\"1400\":1}}],[\"适用于通过脚本语言解析\",{\"1\":{\"1129\":1}}],[\"适用于按照省份\",{\"1\":{\"656\":1}}],[\"适用于可靠性要求很高的场景\",{\"1\":{\"410\":1}}],[\"适用于服务器之间的准即时操作\",{\"1\":{\"409\":1}}],[\"适用于计费\",{\"1\":{\"407\":1}}],[\"适用于各种java应用程序的监控和调试\",{\"1\":{\"238\":1}}],[\"适用于迭代操作远多于修改的场景\",{\"1\":{\"162\":1}}],[\"适当增加可以提高吞吐量\",{\"1\":{\"450\":1}}],[\"适配积极性这方面安卓目前完全没法比\",{\"1\":{\"1819\":1}}],[\"适配执行对应的\",{\"1\":{\"1605\":1}}],[\"适配器专注解决接口不兼容\",{\"1\":{\"1503\":1}}],[\"适配器接受客户端的调用\",{\"1\":{\"374\":1}}],[\"适配器是一个类\",{\"1\":{\"374\":1}}],[\"适配器\",{\"1\":{\"374\":1}}],[\"适配器模式inputstreamreader\",{\"1\":{\"1503\":1}}],[\"适配器模式通过实现这个接口\",{\"1\":{\"374\":1}}],[\"适配器模式通常涉及三个角色\",{\"1\":{\"374\":1}}],[\"适配器模式\",{\"0\":{\"1647\":1},\"1\":{\"374\":1}}],[\"适配模式\",{\"0\":{\"374\":1}}],[\"适合需要部分模拟\",{\"1\":{\"1708\":1}}],[\"适合需要经常进行范围查找的场景\",{\"1\":{\"1564\":1}}],[\"适合随机读写\",{\"1\":{\"1564\":1}}],[\"适合处理非结构化数据\",{\"1\":{\"1543\":1}}],[\"适合处理字符数据\",{\"1\":{\"843\":1}}],[\"适合数据结构固定\",{\"1\":{\"1543\":1}}],[\"适合存储半结构化\",{\"1\":{\"1543\":1}}],[\"适合存储一些简单的配置信息\",{\"1\":{\"1200\":1}}],[\"适合于以读操作为主的应用场景\",{\"1\":{\"1542\":1}}],[\"适合大内存的应用\",{\"1\":{\"1525\":1}}],[\"适合大量进程的系统\",{\"1\":{\"1483\":1}}],[\"适合大量的数据\",{\"1\":{\"410\":1}}],[\"适合要求低延迟的场景\",{\"1\":{\"1525\":1}}],[\"适合要求强一致性的场景例如金融支付\",{\"1\":{\"1370\":1}}],[\"适合保存数据\",{\"1\":{\"1169\":1}}],[\"适合实时游戏\",{\"1\":{\"858\":1}}],[\"适合配合池化功能一起用\",{\"1\":{\"826\":1}}],[\"适合连接多\",{\"1\":{\"765\":1}}],[\"适合可靠性要求高的场景\",{\"1\":{\"460\":1}}],[\"适合中小型公司\",{\"1\":{\"410\":1}}],[\"适合生命周期较短的对象\",{\"1\":{\"223\":1}}],[\"适合标记\",{\"1\":{\"171\":2}}],[\"适合对象快速迭代\",{\"1\":{\"169\":1}}],[\"适合线程数少\",{\"1\":{\"148\":1}}],[\"把那辆车400块出了\",{\"1\":{\"1796\":1}}],[\"把源码提交到私有仓库后\",{\"1\":{\"1790\":1}}],[\"把进行中的需求都上线结束\",{\"1\":{\"1786\":1}}],[\"把一些折扣比较大的运价以文件形式发给跟航司关系比较紧密的某些渠道或某些代理商\",{\"1\":{\"1732\":1}}],[\"把一张行比较多的表拆分为多张表\",{\"1\":{\"1564\":1}}],[\"把一张列比较多的表拆分为多张表\",{\"1\":{\"1564\":1}}],[\"把时间以一定比例分片\",{\"1\":{\"1637\":1}}],[\"把调用的类\",{\"1\":{\"1623\":1}}],[\"把调度算法分抢占式和非抢占式\",{\"1\":{\"1470\":1}}],[\"把整个系统拆分成不同的服务\",{\"1\":{\"1617\":1}}],[\"把需要交给\",{\"1\":{\"1594\":1}}],[\"把应用从复杂的依赖关系中解放出来\",{\"1\":{\"1593\":1}}],[\"把同一张表按一定规则拆分到不同的数据库中\",{\"1\":{\"1564\":1}}],[\"把单一数据库按照业务进行划分\",{\"1\":{\"1564\":1}}],[\"把table指向nexttable\",{\"1\":{\"1497\":1}}],[\"把不常用的内存写入磁盘\",{\"1\":{\"1446\":1}}],[\"把页表项缓存在\",{\"1\":{\"1443\":1}}],[\"把内存分成了两个区域\",{\"1\":{\"1440\":1}}],[\"把内存中的对象存储到磁盘文件中\",{\"1\":{\"321\":1}}],[\"把数据放到新的位置\",{\"1\":{\"1494\":1}}],[\"把数据同时写入内存和cache\",{\"1\":{\"1435\":1}}],[\"把数据看作是对小型文件系统的一系列快照\",{\"1\":{\"1309\":1}}],[\"把连接取出\",{\"1\":{\"1414\":1}}],[\"把当前这层后续的所有叶子结点里data域存储的景点id返回出去\",{\"1\":{\"1361\":1}}],[\"把该时刻的内存数据保存在快照文件中\",{\"1\":{\"1170\":1}}],[\"把执行的命令以日志形式保存在\",{\"1\":{\"1170\":1}}],[\"把三级缓存中代理工厂的真实对象取出来放入二级缓存\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"把代理\",{\"1\":{\"1019\":1}}],[\"把要调用的代码封装为一个任务对象\",{\"1\":{\"818\":1}}],[\"把要发送的\",{\"1\":{\"789\":1}}],[\"把要写入的\",{\"1\":{\"788\":1}}],[\"把多个访问小文件的请求合并成一个大的请求\",{\"1\":{\"1400\":1}}],[\"把多出来的内容写入新的数组\",{\"1\":{\"788\":1}}],[\"把多条驱动表的结果集装入join\",{\"1\":{\"714\":1}}],[\"把多次查询的结果合并\",{\"1\":{\"606\":1}}],[\"把每行的主键id值都取出来\",{\"1\":{\"619\":1}}],[\"把每个任务的分解和合并交给不同的线程来完成\",{\"1\":{\"153\":1}}],[\"把所有的\",{\"1\":{\"496\":1}}],[\"把<pid\",{\"1\":{\"461\":1}}],[\"把发送到该\",{\"1\":{\"414\":1,\"1628\":1}}],[\"把消息路由到那些\",{\"1\":{\"414\":1,\"1628\":1}}],[\"把double值转换为bigdecimal对象\",{\"1\":{\"351\":1}}],[\"把futuretask交给thread类处理调用\",{\"1\":{\"329\":1}}],[\"把runnable交给thread类处理\",{\"1\":{\"328\":1}}],[\"把存储在磁盘文件中的数据恢复成内存中的对象\",{\"1\":{\"321\":1}}],[\"把原始的字节流按照指定编码转换\",{\"1\":{\"320\":1}}],[\"把stream流操作后的结果转回集合或数组\",{\"1\":{\"312\":1}}],[\"把前面各个步骤生成的信息\",{\"1\":{\"264\":1}}],[\"把以下两种情况认为没有必要\",{\"1\":{\"196\":1}}],[\"把引用实例\",{\"1\":{\"184\":1}}],[\"把重分配集中的存活对象复制到新的region上\",{\"1\":{\"179\":1}}],[\"把堆中所有指向旧对象的引用修正到复制后的新地址\",{\"1\":{\"178\":1}}],[\"把处理竞争的问题\",{\"1\":{\"148\":1}}],[\"针对全局的\",{\"1\":{\"1701\":1}}],[\"针对全表扫描问题\",{\"1\":{\"732\":1}}],[\"针对大文件的传输\",{\"1\":{\"1486\":1}}],[\"针对块设备\",{\"1\":{\"1483\":1}}],[\"针对轮询的优化\",{\"1\":{\"1478\":1}}],[\"针对c\",{\"1\":{\"1451\":1}}],[\"针对当前用户\",{\"1\":{\"1311\":1}}],[\"针对系统中每一个用户以及他们仓库的通用配置\",{\"1\":{\"1311\":1}}],[\"针对存在恶意节点的情况\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"针对热点数据提前预热\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"针对上述协议格式的编解码器\",{\"1\":{\"849\":1}}],[\"针对预读产生的问题\",{\"1\":{\"732\":1}}],[\"针对结果集中的每一条记录\",{\"1\":{\"713\":1}}],[\"针对常作为查询条件\",{\"1\":{\"708\":1}}],[\"针对数据量较大\",{\"1\":{\"708\":1}}],[\"针对数据页\",{\"1\":{\"691\":1}}],[\"针对于表中主键创建的索引\",{\"1\":{\"699\":1}}],[\"针对所有页\",{\"1\":{\"691\":2}}],[\"针对非唯一二级索引页\",{\"1\":{\"638\":1}}],[\"针对行锁结构\",{\"1\":{\"564\":1}}],[\"针对的是集群中所有topic\",{\"1\":{\"496\":1}}],[\"针对的是每个\",{\"1\":{\"495\":1}}],[\"针对最小的功能单元\",{\"1\":{\"356\":1}}],[\"针对特定仓库\",{\"1\":{\"1311\":1}}],[\"针对特定时间单位测量时间差\",{\"1\":{\"353\":1}}],[\"针对特定接口提供了更多工具\",{\"1\":{\"71\":1}}],[\"针对性调整服务端的性能配置\",{\"1\":{\"269\":1}}],[\"针对不同的包名或类名配置不同的日志记录器\",{\"1\":{\"389\":1}}],[\"针对不同的分代\",{\"1\":{\"171\":1}}],[\"针对不同分代的特点\",{\"1\":{\"172\":1}}],[\"针对对象的\",{\"1\":{\"150\":1}}],[\"简直就是九牛一毛\",{\"1\":{\"1773\":1}}],[\"简称sk\",{\"1\":{\"1729\":1}}],[\"简称es\",{\"1\":{\"31\":1}}],[\"简介\",{\"0\":{\"439\":1},\"1\":{\"569\":1,\"572\":1}}],[\"简单处理就发了个朋友圈\",{\"1\":{\"1844\":1}}],[\"简单吃了个藏面\",{\"1\":{\"1841\":1}}],[\"简单模式\",{\"1\":{\"1628\":1}}],[\"简单高效\",{\"1\":{\"1525\":1}}],[\"简单粗暴\",{\"1\":{\"1472\":1}}],[\"简单动态字符串的结构\",{\"1\":{\"1570\":1}}],[\"简单动态字符串\",{\"0\":{\"877\":1}}],[\"简单\",{\"1\":{\"625\":1,\"1028\":1,\"1223\":1,\"1404\":1,\"1456\":1,\"1462\":1,\"1477\":1}}],[\"简单的管理\",{\"1\":{\"434\":1}}],[\"简单工作模式\",{\"1\":{\"414\":1}}],[\"简单快速的三段式编译器\",{\"1\":{\"269\":1}}],[\"简化包头\",{\"1\":{\"1422\":1}}],[\"简化帧结构\",{\"1\":{\"1404\":1}}],[\"简化版\",{\"1\":{\"1338\":1}}],[\"简化版类图如下\",{\"1\":{\"1006\":1}}],[\"简化正则\",{\"1\":{\"1330\":1}}],[\"简化了构建配置\",{\"1\":{\"1609\":1}}],[\"简化了\",{\"1\":{\"480\":1}}],[\"简化编程\",{\"1\":{\"349\":1}}],[\"简化集合\",{\"1\":{\"312\":1}}],[\"简化代码编写\",{\"1\":{\"298\":1}}],[\"简化线程同步\",{\"1\":{\"282\":1}}],[\"简化异步编程\",{\"1\":{\"282\":1}}],[\"简化带版本号的\",{\"1\":{\"150\":1}}],[\"竞争不太激烈的场景\",{\"1\":{\"148\":1}}],[\"竞态条件\",{\"1\":{\"134\":1}}],[\"那是真的黄啊\",{\"1\":{\"1848\":1}}],[\"那曲\",{\"1\":{\"1825\":1}}],[\"那就去看看世界\",{\"1\":{\"1786\":1}}],[\"那就和\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"那些受伤的地方一定会变成我们最强壮的地方\",{\"1\":{\"1773\":1}}],[\"那些被经常使用的查询可以被定义为视图\",{\"1\":{\"625\":1}}],[\"那这个存储引擎是非常合适的\",{\"1\":{\"682\":1}}],[\"那这个文件所在的机器i\",{\"1\":{\"451\":1}}],[\"那同步数据\",{\"1\":{\"471\":1}}],[\"那同步过来\",{\"1\":{\"471\":1}}],[\"那它天生就是线程安全的\",{\"1\":{\"146\":1}}],[\"那么去掉+1就可以了\",{\"1\":{\"1676\":1}}],[\"那么通过这个工厂获取到的就是a代理后的对象\",{\"1\":{\"1599\":1}}],[\"那么通过关键字\",{\"1\":{\"391\":1}}],[\"那么基于哈希的集合就会出现很多重复元素\",{\"1\":{\"1535\":1}}],[\"那么无论在\",{\"1\":{\"1533\":1}}],[\"那么多个请求复用一个进程就可以实现高并发\",{\"1\":{\"1487\":1}}],[\"那么进程也会崩溃\",{\"1\":{\"1465\":1}}],[\"那么进入\",{\"1\":{\"1049\":1}}],[\"那么整个活跃\",{\"1\":{\"1448\":1}}],[\"那么客户端和服务端的\",{\"1\":{\"1419\":1}}],[\"那么内核里的\",{\"1\":{\"1419\":1}}],[\"那么当一个tcp报文段的某个ip分片丢失\",{\"1\":{\"1416\":1}}],[\"那么当一个从节点得到\",{\"1\":{\"948\":1}}],[\"那么第二\",{\"1\":{\"1410\":1}}],[\"那么匹配失败返回个null出去\",{\"1\":{\"1361\":1}}],[\"那么本质上只是将某个文件从快照中复制到暂存区\",{\"1\":{\"1344\":1}}],[\"那么所有数据库都会被要求回滚它们在此事务中的那部分信息\",{\"1\":{\"1283\":1}}],[\"那么学习者就需要接受这个提议\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"那么命中率就很高\",{\"1\":{\"1251\":1}}],[\"那么两个请求可能分别依赖新旧集群的加锁结果\",{\"1\":{\"1240\":1}}],[\"那么可以先对订单号进行哈希计算\",{\"1\":{\"1240\":1}}],[\"那么可以用轻量级锁来优化\",{\"1\":{\"1076\":1}}],[\"那么这个工厂获取到的就是\",{\"1\":{\"1599\":1}}],[\"那么这个锁就是不必要的\",{\"1\":{\"1080\":1}}],[\"那么这个sentinel成为领头sentinel\",{\"1\":{\"942\":1}}],[\"那么对象创建后\",{\"1\":{\"1077\":1}}],[\"那么对从服务器进行定期同步\",{\"1\":{\"920\":1}}],[\"那么轻量级锁就没有必要每次都\",{\"1\":{\"1077\":1}}],[\"那么会再进一步的\",{\"1\":{\"1344\":1}}],[\"那么会再创建一条\",{\"1\":{\"1076\":1}}],[\"那么会进一步的\",{\"1\":{\"1344\":1}}],[\"那么会进入锁膨胀\",{\"1\":{\"1076\":1}}],[\"那么会自动将所有\",{\"1\":{\"1219\":1}}],[\"那么会对应两种情况\",{\"1\":{\"1076\":1}}],[\"那么会恢复挂起的事务\",{\"1\":{\"1050\":1,\"1051\":1}}],[\"那么会有一部分消费者处于空闲状态\",{\"1\":{\"481\":1}}],[\"那么继续在\",{\"1\":{\"1049\":1}}],[\"那么程序使用查表算法\",{\"1\":{\"976\":1}}],[\"那么程序使用variable\",{\"1\":{\"976\":1}}],[\"那么事务执行后\",{\"1\":{\"961\":1}}],[\"那么集群进入新的配置纪元\",{\"1\":{\"948\":1}}],[\"那么主节点将向要求投票的从节点返回一条clustermsg\",{\"1\":{\"948\":1}}],[\"那么主从服务器的复制偏移量相同\",{\"1\":{\"935\":1}}],[\"那么节点直接执行\",{\"1\":{\"947\":1}}],[\"那么redis\",{\"1\":{\"946\":1}}],[\"那么sentinel将认定该实例主观下线\",{\"1\":{\"941\":1}}],[\"那么ht\",{\"1\":{\"883\":2}}],[\"那么使用\",{\"1\":{\"860\":2}}],[\"那么后续依赖该\",{\"1\":{\"851\":1}}],[\"那么必须转义增加了复杂性\",{\"1\":{\"845\":1}}],[\"那么必须等\",{\"1\":{\"9\":1}}],[\"那么也必须\",{\"1\":{\"829\":1}}],[\"那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制\",{\"1\":{\"1516\":1}}],[\"那么就会解析错误\",{\"1\":{\"843\":1}}],[\"那么就会产生多份日志输出\",{\"1\":{\"379\":1}}],[\"那么就直接调用\",{\"1\":{\"818\":1}}],[\"那么其后的索引都将失效\",{\"1\":{\"702\":1}}],[\"那么业务系统就只能读不能写了\",{\"1\":{\"658\":1}}],[\"那么该线程就可以拿到锁资源而不用进入阻塞再恢复\",{\"1\":{\"1079\":1}}],[\"那么该列的null值不参与所有的聚合函数运算\",{\"1\":{\"584\":1}}],[\"那么该表自然也不能加表级排他锁\",{\"1\":{\"560\":1}}],[\"那么该对象会被封装成\",{\"1\":{\"196\":1}}],[\"那么查询线程拿到的结果跟表结构就不一致了\",{\"1\":{\"553\":1}}],[\"那么在备份期间从库不能执行主库同步过来的\",{\"1\":{\"550\":1}}],[\"那么在备份期间都不能执行更新\",{\"1\":{\"550\":1}}],[\"那么在下一次垃圾回收时\",{\"1\":{\"193\":1}}],[\"那么和上面的顺序相反\",{\"1\":{\"541\":1}}],[\"那么不需要配置\",{\"1\":{\"525\":1}}],[\"那么以下方法无效\",{\"1\":{\"511\":1}}],[\"那么需要\",{\"1\":{\"499\":1}}],[\"那么头部消费者将多消费\",{\"1\":{\"495\":1}}],[\"那么将转为共享状态\",{\"1\":{\"1435\":1}}],[\"那么将消息刷入到磁盘\",{\"1\":{\"476\":1}}],[\"那么将逃逸成功\",{\"1\":{\"196\":1}}],[\"那么此时消息响应就会一直停滞❓\",{\"1\":{\"460\":1}}],[\"那么新\",{\"1\":{\"460\":1}}],[\"那么数据就直接丢了\",{\"1\":{\"460\":1}}],[\"那么一旦消息过期就会被队列丢弃\",{\"1\":{\"424\":1}}],[\"那么确认消息会在将该消息写入磁盘后发出\",{\"1\":{\"420\":1}}],[\"那么引用将被放入该引用队列\",{\"1\":{\"187\":1}}],[\"那么清理工作完全交给\",{\"1\":{\"184\":1}}],[\"那么直接覆盖更新\",{\"1\":{\"154\":1}}],[\"那么存储的对象永远不会被回收\",{\"1\":{\"154\":1}}],[\"那么线程池会补充一个新线程\",{\"1\":{\"332\":1}}],[\"那么线程池会补充一个新线程替代它\",{\"1\":{\"332\":1}}],[\"那么线程\",{\"1\":{\"143\":1,\"1091\":1}}],[\"那么\",{\"1\":{\"6\":1,\"143\":2,\"461\":1,\"496\":1,\"829\":1,\"1010\":1,\"1076\":1,\"1174\":1,\"1278\":1,\"1336\":2,\"1419\":1,\"1514\":1,\"1533\":1,\"1618\":1}}],[\"另有两个线程安全的实现类\",{\"1\":{\"988\":1}}],[\"另一部分是各旅行社或ota的私有库存\",{\"1\":{\"1737\":1}}],[\"另一部分只能用于特定类型\",{\"1\":{\"901\":1}}],[\"另一种是控制相同元素在排列中的顺序\",{\"1\":{\"1677\":1}}],[\"另一种是软限制\",{\"1\":{\"923\":1}}],[\"另一种返回特殊值\",{\"1\":{\"988\":1}}],[\"另一种思路是用多个数组组成\",{\"1\":{\"788\":1}}],[\"另一个藏族阿姨直接带了床被子睡在硬座中间\",{\"1\":{\"1833\":1}}],[\"另一个\",{\"1\":{\"1598\":1}}],[\"另一个分支为第二父提交\",{\"1\":{\"1341\":1}}],[\"另一个负责监听\",{\"1\":{\"1190\":1}}],[\"另一个用不用索引没有意义\",{\"1\":{\"703\":1}}],[\"另一个是订阅连接\",{\"1\":{\"939\":1}}],[\"另一个是流\",{\"1\":{\"442\":1}}],[\"另一个是实现部分\",{\"1\":{\"375\":1}}],[\"另一次是初始化阶段赋程序定义初始值\",{\"1\":{\"204\":1}}],[\"另一方面同时管理线程和任务\",{\"1\":{\"1111\":1}}],[\"另一方面又可以享受\",{\"1\":{\"391\":1}}],[\"另一方面\",{\"1\":{\"145\":1,\"1803\":1}}],[\"另外很重要的就是西藏的农奴制社会\",{\"1\":{\"1837\":1}}],[\"另外为了提升自己的居住幸福指数\",{\"1\":{\"1828\":1}}],[\"另外最近开始使用网易爆米花\",{\"1\":{\"1811\":1}}],[\"另外可以通过\",{\"1\":{\"1792\":1}}],[\"另外可以发现\",{\"1\":{\"9\":1}}],[\"另外就一直在修组里的高风险\",{\"1\":{\"1779\":1}}],[\"另外优化了两个问题\",{\"1\":{\"1355\":1}}],[\"另外还有挂起状态\",{\"1\":{\"1450\":1}}],[\"另外还有三种可能不回滚的事务\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"另外还有常量折叠等少量代码优化\",{\"1\":{\"262\":1}}],[\"另外需要注意执行多个任务时要注意\",{\"1\":{\"822\":1}}],[\"另外在数据的拷贝过程中\",{\"1\":{\"783\":1}}],[\"另外高版本的\",{\"1\":{\"510\":1}}],[\"另外数组类本身不通过类加载器创建\",{\"1\":{\"249\":1}}],[\"另外实现了\",{\"1\":{\"73\":1}}],[\"另外\",{\"1\":{\"71\":1,\"74\":1,\"83\":1,\"174\":1,\"533\":1,\"552\":1,\"698\":1,\"711\":1,\"729\":1,\"739\":1,\"740\":1,\"754\":1,\"789\":1,\"1012\":1,\"1033\":1,\"1239\":1,\"1333\":1,\"1437\":1,\"1486\":1,\"1512\":1,\"1534\":1,\"1571\":1,\"1724\":1,\"1734\":1,\"1737\":1}}],[\"语义上的区别\",{\"1\":{\"1320\":1}}],[\"语义的\",{\"1\":{\"1140\":1}}],[\"语义分析等等\",{\"1\":{\"672\":1}}],[\"语义分析\",{\"0\":{\"262\":1}}],[\"语义分析与字节码生成\",{\"0\":{\"261\":1}}],[\"语句进行语法解析\",{\"1\":{\"1566\":1}}],[\"语句进行查询优化\",{\"1\":{\"1566\":1}}],[\"语句进行查询\",{\"1\":{\"1543\":1}}],[\"语句进行解析\",{\"1\":{\"541\":1}}],[\"语句中的参数时\",{\"1\":{\"1539\":1}}],[\"语句中每个select对应一个id\",{\"1\":{\"728\":1}}],[\"语句复制到\",{\"1\":{\"1533\":1}}],[\"语句翻译成\",{\"1\":{\"1223\":1}}],[\"语句从数据库查询数据的直观方式来提供一种对\",{\"1\":{\"1065\":1}}],[\"语句都开启了事务\",{\"1\":{\"1033\":1}}],[\"语句show\",{\"1\":{\"730\":1}}],[\"语句查看某个语句的执行计划\",{\"1\":{\"672\":1}}],[\"语句需要先获取该记录的排他锁\",{\"1\":{\"554\":1}}],[\"语句读取记录时需要先获取该记录的共享锁\",{\"1\":{\"554\":1}}],[\"语句操作了主键索引\",{\"1\":{\"554\":1}}],[\"语句会自动申请\",{\"1\":{\"553\":1}}],[\"语句会自动加解写锁\",{\"1\":{\"552\":1}}],[\"语句自动加解读锁\",{\"1\":{\"552\":1}}],[\"语句对应的\",{\"1\":{\"542\":1}}],[\"语句和dml\",{\"1\":{\"643\":1}}],[\"语句和\",{\"1\":{\"541\":1}}],[\"语句映射成\",{\"1\":{\"541\":1}}],[\"语句封装到\",{\"1\":{\"540\":1}}],[\"语句如果第一个条件未命中\",{\"1\":{\"537\":1}}],[\"语句是\",{\"1\":{\"534\":1}}],[\"语句的词法分析\",{\"1\":{\"1224\":1}}],[\"语句的实参绑定\",{\"1\":{\"544\":1}}],[\"语句的分支映射\",{\"1\":{\"532\":1}}],[\"语句的参数支持自动推断\",{\"1\":{\"530\":1}}],[\"语句\",{\"0\":{\"1565\":1},\"1\":{\"509\":1,\"514\":1,\"515\":1,\"536\":1,\"537\":1,\"541\":1,\"544\":1,\"553\":1,\"622\":1,\"628\":1,\"635\":1,\"643\":2,\"675\":2,\"1226\":1,\"1533\":3}}],[\"语句执行可能修改多个页面\",{\"1\":{\"739\":1}}],[\"语句执行流程\",{\"1\":{\"570\":1}}],[\"语句执行期间可能申请排它锁\",{\"1\":{\"553\":1}}],[\"语句执行\",{\"0\":{\"509\":1}}],[\"语言拥有了类似c语言指针一样操作内存空间的能力\",{\"1\":{\"1134\":1}}],[\"语言底层资源操作能力方面起到了很大的作用\",{\"1\":{\"1134\":1}}],[\"语言实现的\",{\"1\":{\"411\":1,\"1628\":1}}],[\"语言规定\",{\"1\":{\"145\":1}}],[\"语法语句\",{\"0\":{\"1567\":1}}],[\"语法不完全相同\",{\"1\":{\"1226\":1}}],[\"语法解析\",{\"1\":{\"672\":1,\"1566\":1}}],[\"语法创建通用表空间\",{\"1\":{\"639\":1}}],[\"语法2\",{\"1\":{\"632\":1}}],[\"语法1\",{\"1\":{\"632\":1}}],[\"语法\",{\"0\":{\"622\":1},\"1\":{\"550\":1,\"552\":1,\"581\":1,\"583\":1,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"599\":1,\"635\":1,\"675\":6,\"707\":1,\"729\":1}}],[\"语法树\",{\"1\":{\"264\":1}}],[\"语法糖经过编译后转换为\",{\"1\":{\"1533\":1}}],[\"语法糖\",{\"0\":{\"263\":1}}],[\"语法分析\",{\"0\":{\"258\":1},\"1\":{\"570\":1,\"672\":1,\"1224\":1}}],[\"语法大全\",{\"0\":{\"104\":1}}],[\"特种兵直接冲\",{\"1\":{\"1774\":1}}],[\"特权标志位\",{\"1\":{\"1443\":1}}],[\"特权等级\",{\"1\":{\"1443\":1}}],[\"特定\",{\"1\":{\"1640\":1}}],[\"特定场景下\",{\"1\":{\"1558\":1}}],[\"特定情况下具有持久性\",{\"1\":{\"961\":1}}],[\"特定分隔符\",{\"1\":{\"768\":1}}],[\"特性\",{\"0\":{\"1212\":1},\"1\":{\"435\":1,\"1657\":1}}],[\"特性处理相关客户端异常中断\",{\"1\":{\"407\":1}}],[\"特别是wj+wy+xx三人组\",{\"1\":{\"1849\":1}}],[\"特别是耳机\",{\"1\":{\"1828\":1}}],[\"特别是在交易下单链路\",{\"1\":{\"1283\":1}}],[\"特别是在实时流计算领域占据了大多数的国内市场\",{\"1\":{\"1213\":1}}],[\"特别是需要处理大量数据的高性能应用\",{\"1\":{\"1136\":1}}],[\"特别是对共享的\",{\"1\":{\"144\":1}}],[\"特别说明\",{\"1\":{\"383\":1}}],[\"特殊数据进行特殊设计\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"特殊的\",{\"1\":{\"383\":1}}],[\"特殊的不可变\",{\"1\":{\"146\":1}}],[\"特殊字符作为边界\",{\"1\":{\"1417\":1}}],[\"特殊字符个数限制\",{\"1\":{\"1148\":1}}],[\"特殊字符处理等等\",{\"1\":{\"673\":1}}],[\"特殊字符\",{\"1\":{\"357\":1}}],[\"特殊含义值\",{\"1\":{\"184\":2}}],[\"特殊点在于标记是在指针上而不是在对象上\",{\"1\":{\"179\":1}}],[\"特点是延迟执行\",{\"1\":{\"1437\":1}}],[\"特点是快速执行\",{\"1\":{\"1437\":1}}],[\"特点是支持并发\",{\"1\":{\"178\":1}}],[\"特点是在使用读锁\",{\"1\":{\"158\":1}}],[\"特点\",{\"0\":{\"825\":1,\"1309\":1},\"1\":{\"14\":1,\"142\":1,\"202\":1,\"203\":1,\"210\":1,\"211\":1,\"223\":1,\"224\":1,\"365\":1,\"407\":1,\"550\":1,\"627\":1,\"652\":4,\"678\":1,\"679\":1,\"680\":1,\"681\":1,\"698\":1,\"699\":2,\"1283\":1,\"1404\":1,\"1456\":1,\"1457\":1,\"1458\":1,\"1459\":1,\"1460\":1,\"1461\":1,\"1462\":1,\"1525\":1}}],[\"要说实习最开心的事\",{\"1\":{\"1786\":1}}],[\"要剥离意识形态\",{\"1\":{\"1767\":1}}],[\"要收取更贵的退票费和改签费\",{\"1\":{\"1735\":1}}],[\"要切记\",{\"1\":{\"1705\":1}}],[\"要对其进行转义处理\",{\"1\":{\"1539\":1}}],[\"要对特殊字符转义\",{\"1\":{\"1539\":1}}],[\"要合并的分支版本在下面\",{\"1\":{\"1336\":1}}],[\"要忽略指定模式以外的文件或目录\",{\"1\":{\"1330\":1}}],[\"要牢记\",{\"1\":{\"1310\":1}}],[\"要调用\",{\"1\":{\"1090\":1}}],[\"要从用户态切换至内核态\",{\"1\":{\"801\":1}}],[\"要从\",{\"1\":{\"799\":1,\"802\":1}}],[\"要支持百万连接就要\",{\"1\":{\"788\":1}}],[\"要么得蹲公开注册的时间点申请\",{\"1\":{\"1810\":1}}],[\"要么得是高校学生\",{\"1\":{\"1810\":1}}],[\"要么就是迅雷私有链接\",{\"1\":{\"1810\":1}}],[\"要么使用本地变量\",{\"1\":{\"1614\":1}}],[\"要么使用\",{\"1\":{\"1614\":1}}],[\"要么自己写代码逻辑过滤掉所有可能的注入关键字\",{\"1\":{\"1539\":1}}],[\"要么开启druid的filter防火墙\",{\"1\":{\"1539\":1}}],[\"要么\",{\"1\":{\"1533\":1}}],[\"要么在方法上通过\",{\"1\":{\"1533\":1}}],[\"要么继续向上抛出\",{\"1\":{\"1244\":1}}],[\"要么处理完后继续向上抛出\",{\"1\":{\"1061\":1}}],[\"要么都不执行\",{\"1\":{\"1031\":1}}],[\"要么都执行\",{\"1\":{\"1031\":1}}],[\"要么一个都不执行\",{\"1\":{\"961\":1}}],[\"要么一个也不执行\",{\"1\":{\"961\":1}}],[\"要么执行所有\",{\"1\":{\"961\":1}}],[\"要么最小置数组尾\",{\"1\":{\"889\":1}}],[\"要么是输出流\",{\"1\":{\"760\":1}}],[\"要么是输入流\",{\"1\":{\"760\":1}}],[\"要么全部失败\",{\"1\":{\"735\":1,\"1031\":1,\"1277\":1}}],[\"要么全部成功\",{\"1\":{\"735\":1,\"1031\":1}}],[\"要么全部不执行\",{\"1\":{\"144\":1,\"1274\":1,\"1506\":1,\"1550\":1}}],[\"要么同时失败\",{\"1\":{\"733\":1}}],[\"要使视图可更新\",{\"1\":{\"624\":1}}],[\"要求所有非主键字段直接依赖主键\",{\"1\":{\"1538\":1}}],[\"要求所有非主键字段完全依赖主键\",{\"1\":{\"1538\":1}}],[\"要求所有主节点给自己投票\",{\"1\":{\"948\":1}}],[\"要求任何一张表必须有主键\",{\"1\":{\"1538\":1}}],[\"要求\",{\"1\":{\"1527\":1}}],[\"要求服务时间\",{\"1\":{\"1470\":2}}],[\"要求把该\",{\"1\":{\"1435\":1}}],[\"要求业务处理过程必须拆分为预留业务资源和确认\",{\"1\":{\"1284\":1}}],[\"要求该外键允许为null\",{\"1\":{\"599\":1}}],[\"要求非空且唯一\",{\"1\":{\"598\":1}}],[\"要求既不能重复也不能丢失\",{\"1\":{\"461\":1}}],[\"要求变量必须是\",{\"1\":{\"146\":1}}],[\"要想监听消息\",{\"1\":{\"418\":1}}],[\"要分清楚\",{\"1\":{\"376\":1}}],[\"要更新的变量\",{\"1\":{\"148\":1}}],[\"要编写线程安全的代码\",{\"1\":{\"144\":1}}],[\"程序员的错误产出比是个常数\",{\"1\":{\"1705\":1}}],[\"程序可以继续往下执行\",{\"1\":{\"1478\":1}}],[\"程序可以使用\",{\"1\":{\"1466\":1}}],[\"程序执行\",{\"1\":{\"1478\":1}}],[\"程序初次访问时会触发缺页中断\",{\"1\":{\"1446\":1}}],[\"程序中已动态分配的堆内存由于某种原因程序未释放或无法释放\",{\"1\":{\"1445\":1}}],[\"程序中使用的地址叫虚拟内存地址\",{\"1\":{\"1443\":1}}],[\"程序仅访问虚拟地址\",{\"1\":{\"1443\":1}}],[\"程序调用\",{\"1\":{\"1395\":1}}],[\"程序使用内核空间即程序在内核态执行\",{\"1\":{\"1440\":1}}],[\"程序使用用户空间即该程序在用户态执行\",{\"1\":{\"1440\":1}}],[\"程序使用\",{\"1\":{\"1349\":1}}],[\"程序运行中可以预料的意外情况\",{\"1\":{\"1533\":1}}],[\"程序运行的分布式计算工具\",{\"1\":{\"1223\":1}}],[\"程序运行时默认启动的几个线程之一\",{\"1\":{\"188\":1}}],[\"程序会根据未处理的二进制位数量来决定使用哪种算法\",{\"1\":{\"976\":1}}],[\"程序除了执行指定操作外\",{\"1\":{\"883\":1}}],[\"程序的用户态切换至内核态\",{\"1\":{\"802\":1}}],[\"程序的执行顺序与代码的顺序相同\",{\"1\":{\"144\":1,\"1506\":1}}],[\"程序所处的用户态切换至内核态\",{\"1\":{\"799\":1}}],[\"程序继续执行\",{\"1\":{\"346\":1}}],[\"程序编写的最小元素是单个字符\",{\"1\":{\"257\":1}}],[\"程序\",{\"1\":{\"255\":1,\"1224\":1}}],[\"程序计数器\",{\"0\":{\"202\":1},\"1\":{\"359\":1,\"1432\":1,\"1520\":1}}],[\"程序能够安全地停止下来进行垃圾回收的位置\",{\"1\":{\"172\":1}}],[\"程序顺序规则\",{\"1\":{\"143\":1}}],[\"若栈内存允许动态扩展\",{\"1\":{\"1520\":1}}],[\"若栈内存不允许动态扩展\",{\"1\":{\"1520\":1}}],[\"若系统出现分区\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"若有空闲线程立即执行\",{\"1\":{\"1110\":1}}],[\"若有则直接指向该地址\",{\"1\":{\"300\":1}}],[\"若线程阻塞在\",{\"1\":{\"1092\":3}}],[\"若干个记录以及两个伪记录按主键大小串成一个单链表\",{\"1\":{\"689\":1}}],[\"若干个操作要么全部执行\",{\"1\":{\"144\":1,\"1506\":1}}],[\"若采用单数据库进行数据存储\",{\"1\":{\"651\":1}}],[\"若缓冲池没有数据\",{\"1\":{\"638\":1}}],[\"若需要支撑大规模的topic\",{\"1\":{\"435\":1}}],[\"若想切换回使用default库\",{\"1\":{\"110\":1}}],[\"三江源\",{\"1\":{\"1833\":1}}],[\"三期免息+学生优惠\",{\"1\":{\"1828\":1}}],[\"三期免息拿下\",{\"1\":{\"1828\":1}}],[\"三里屯\",{\"1\":{\"1775\":1}}],[\"三方组件调用等\",{\"1\":{\"1705\":1}}],[\"三方合并时所在分支为第一父提交\",{\"1\":{\"1341\":1}}],[\"三范式\",{\"0\":{\"1538\":1}}],[\"三者共同定位\",{\"1\":{\"1435\":1}}],[\"三次挥手\",{\"1\":{\"1410\":2}}],[\"三次握手的过程是发生在\",{\"1\":{\"1414\":1}}],[\"三次握手时\",{\"1\":{\"1414\":1}}],[\"三次握手完成\",{\"1\":{\"1409\":1}}],[\"三次握手\",{\"0\":{\"1409\":1},\"1\":{\"945\":1,\"1415\":1}}],[\"三级索引等方式\",{\"1\":{\"1476\":1}}],[\"三级目录原本是根据父目录\",{\"1\":{\"1367\":1}}],[\"三级缓存\",{\"1\":{\"1028\":1,\"1382\":1,\"1599\":1}}],[\"三级缓存解决循环依赖\",{\"0\":{\"1028\":1}}],[\"三点区间\",{\"1\":{\"1342\":1}}],[\"三阶段\",{\"1\":{\"1284\":1}}],[\"三个事务管理的关键类\",{\"1\":{\"1059\":1}}],[\"三个方法\",{\"1\":{\"1015\":1}}],[\"三个类\",{\"1\":{\"1015\":1}}],[\"三个命令\",{\"1\":{\"967\":1}}],[\"三个重要属性\",{\"1\":{\"3\":1}}],[\"三种工作模式\",{\"1\":{\"1689\":1}}],[\"三种格式\",{\"1\":{\"1556\":1}}],[\"三种主要的\",{\"1\":{\"1350\":1}}],[\"三种状态\",{\"0\":{\"1310\":1}}],[\"三种核心类的配合使用\",{\"1\":{\"1060\":1}}],[\"三种资源类实现了该接口\",{\"1\":{\"1008\":1}}],[\"三种资源加载\",{\"1\":{\"1008\":1}}],[\"三种遍历中\",{\"1\":{\"999\":1}}],[\"三种\",{\"1\":{\"888\":1}}],[\"三种方法监听是否有事件发生\",{\"1\":{\"785\":1}}],[\"三种消息发送方式\",{\"1\":{\"427\":1}}],[\"三大教\",{\"0\":{\"1757\":1}}],[\"三大日志\",{\"0\":{\"1553\":1}}],[\"三大组件\",{\"0\":{\"759\":1}}],[\"三大特性\",{\"0\":{\"144\":1}}],[\"三类\",{\"1\":{\"542\":1}}],[\"三要素\",{\"0\":{\"338\":1}}],[\"结婚\",{\"1\":{\"1786\":1}}],[\"结点最多即\",{\"1\":{\"978\":1}}],[\"结点跨度越大\",{\"1\":{\"886\":1}}],[\"结尾指定目录\",{\"1\":{\"1330\":1}}],[\"结尾的最长上升子序列长度\",{\"1\":{\"994\":1}}],[\"结尾\",{\"1\":{\"538\":1}}],[\"结构上是数组+链表\",{\"1\":{\"1497\":1}}],[\"结构上是一个固定长度的fifo队列\",{\"1\":{\"935\":1}}],[\"结构和列表\",{\"1\":{\"1474\":1}}],[\"结构体\",{\"1\":{\"1436\":1}}],[\"结构体类型\",{\"1\":{\"1128\":1}}],[\"结构\",{\"0\":{\"517\":1,\"655\":1,\"827\":1,\"1439\":1},\"1\":{\"949\":1,\"970\":1,\"978\":1,\"1701\":1}}],[\"结构如图\",{\"1\":{\"465\":1}}],[\"结论\",{\"1\":{\"460\":1}}],[\"结束后\",{\"1\":{\"1847\":1}}],[\"结束了这趟跟团游\",{\"1\":{\"1846\":1}}],[\"结束了纳木措的行程\",{\"1\":{\"1846\":1}}],[\"结束状态\",{\"1\":{\"1450\":1}}],[\"结束操作\",{\"1\":{\"1068\":9}}],[\"结束\",{\"1\":{\"873\":1}}],[\"结束需要关闭资源\",{\"1\":{\"317\":1,\"318\":1}}],[\"结束先于finalize\",{\"1\":{\"143\":1}}],[\"结合的方式\",{\"1\":{\"1573\":1}}],[\"结合lambda表达式\",{\"1\":{\"312\":1}}],[\"结合分代回收的理论\",{\"1\":{\"172\":1}}],[\"结果就是反反复复\",{\"1\":{\"1818\":1}}],[\"结果中不能有重复的集合\",{\"1\":{\"1673\":1,\"1674\":1}}],[\"结果仍是原来的数\",{\"1\":{\"1662\":1}}],[\"结果会加入常量池\",{\"1\":{\"1536\":1}}],[\"结果域的偏移\",{\"1\":{\"844\":1}}],[\"结果是\",{\"1\":{\"822\":1}}],[\"结果\",{\"1\":{\"822\":3}}],[\"结果集写入临时表\",{\"1\":{\"726\":1}}],[\"结果集处理\",{\"1\":{\"544\":1}}],[\"结果集转换成\",{\"1\":{\"540\":1}}],[\"结果实例化时注入到构造方法中的参数\",{\"1\":{\"532\":1}}],[\"结果自动\",{\"1\":{\"79\":1}}],[\"结果总是\",{\"1\":{\"14\":1}}],[\"先到\",{\"1\":{\"1792\":1}}],[\"先把两数字异或\",{\"1\":{\"1666\":1}}],[\"先把前一个任务的\",{\"1\":{\"1454\":1}}],[\"先遍历一轮\",{\"1\":{\"1658\":1}}],[\"先哈希切分多个小文件\",{\"1\":{\"1658\":1}}],[\"先通过哈希表定位\",{\"1\":{\"1651\":2}}],[\"先写入\",{\"1\":{\"1556\":1}}],[\"先标记出需要回收的对象\",{\"1\":{\"1523\":1}}],[\"先检查对应的类是否已经加载\",{\"1\":{\"1521\":1}}],[\"先根据运算得到需要遍历的次数i\",{\"1\":{\"1497\":1}}],[\"先用\",{\"1\":{\"1487\":1}}],[\"先入先出\",{\"1\":{\"1483\":1}}],[\"先入站\",{\"1\":{\"823\":1}}],[\"先进先出置换\",{\"1\":{\"1471\":1}}],[\"先来先服\",{\"1\":{\"1472\":1}}],[\"先来先服务\",{\"1\":{\"1470\":1}}],[\"先来的进程一直运行到退出或阻塞\",{\"1\":{\"1470\":1}}],[\"先修改完共享资源\",{\"1\":{\"1468\":1}}],[\"先要上锁\",{\"1\":{\"1468\":1}}],[\"先回一个\",{\"1\":{\"1410\":1}}],[\"先回顾一下开发一个\",{\"1\":{\"863\":1}}],[\"先比较节点之间的\",{\"1\":{\"1204\":1}}],[\"先在\",{\"1\":{\"1155\":1}}],[\"先在堆的字符串常量池里创建\",{\"1\":{\"301\":1}}],[\"先被计算\",{\"1\":{\"993\":1}}],[\"先将程序划分为多个有逻辑意义的段\",{\"1\":{\"1443\":1}}],[\"先将指定二进制位现在值保存至\",{\"1\":{\"975\":1}}],[\"先将数据页写入双写缓冲区文件中\",{\"1\":{\"639\":1}}],[\"先从对应的缓存链表中找\",{\"1\":{\"751\":1}}],[\"先按照二级索引记录的主键值进行排序\",{\"1\":{\"711\":1}}],[\"先操作缓冲池中的数据\",{\"1\":{\"638\":1}}],[\"先执行一次逻辑\",{\"1\":{\"633\":1}}],[\"先判定条件\",{\"1\":{\"633\":1}}],[\"先判断\",{\"1\":{\"148\":1}}],[\"先加载\",{\"1\":{\"541\":1}}],[\"先对\",{\"1\":{\"541\":1}}],[\"先提交\",{\"1\":{\"499\":1}}],[\"先贴上一张\",{\"1\":{\"382\":1}}],[\"先了解几个日志相关的设计模式\",{\"1\":{\"372\":1}}],[\"先找子类\",{\"1\":{\"291\":1}}],[\"先于被中断线程的代码\",{\"1\":{\"143\":1}}],[\"先获取\",{\"1\":{\"14\":1,\"1092\":1}}],[\"于是大家围着篝火\",{\"1\":{\"1841\":1}}],[\"于是选择了日喀则环线\",{\"1\":{\"1840\":1}}],[\"于是选择了长沙飞到西宁\",{\"1\":{\"1833\":1}}],[\"于是一有时间就跑出去玩\",{\"1\":{\"1825\":1}}],[\"于是不得不同时开多个平台的会员\",{\"1\":{\"1803\":1}}],[\"于是很容易出现冲突\",{\"1\":{\"1468\":1}}],[\"于是用分段的形式把这些段分离出来\",{\"1\":{\"1443\":1}}],[\"于是发送方就会一直等待直到超时重传\",{\"1\":{\"1416\":1}}],[\"于是就有了各种协议\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"于是就有两阶段策略\",{\"1\":{\"789\":1}}],[\"于是成为\",{\"1\":{\"1203\":1}}],[\"于是都进入\",{\"1\":{\"1203\":1}}],[\"于是改投\",{\"1\":{\"1203\":1}}],[\"于是先后开发了\",{\"1\":{\"376\":1}}],[\"于是\",{\"1\":{\"376\":1,\"1203\":1,\"1443\":1}}],[\"于\",{\"1\":{\"376\":1}}],[\"于jdk\",{\"1\":{\"179\":1}}],[\"于线程\",{\"1\":{\"143\":2}}],[\"于任意后续对这个\",{\"1\":{\"143\":1}}],[\"于随后对这个锁的加锁\",{\"1\":{\"143\":1}}],[\"于该线程中的任意后续操作\",{\"1\":{\"143\":1}}],[\"认识了一个骑行进藏的骑友\",{\"1\":{\"1832\":1}}],[\"认真快乐的体验生活\",{\"1\":{\"1818\":1}}],[\"认证\",{\"1\":{\"1642\":1}}],[\"认证授权\",{\"0\":{\"1642\":1}}],[\"认证登录\",{\"0\":{\"13\":1}}],[\"认发送\",{\"1\":{\"1286\":1}}],[\"认定客观下线\",{\"1\":{\"941\":1}}],[\"认为其他宗教\",{\"1\":{\"1767\":1}}],[\"认为通过暴力手段维护伊斯兰教的信仰是最为重要的\",{\"1\":{\"1767\":1}}],[\"认为所有null值不相等\",{\"1\":{\"722\":1}}],[\"认为所有null值都相等\",{\"1\":{\"722\":1}}],[\"认为此消息正在被处理\",{\"1\":{\"422\":1}}],[\"认为两个内容一样的对象是重复的\",{\"1\":{\"304\":1}}],[\"认为每次访问共享资源时都会发生冲突\",{\"1\":{\"148\":1}}],[\"认为\",{\"1\":{\"143\":1}}],[\"现场的氛围果然还是不一样\",{\"1\":{\"1826\":1}}],[\"现状\",{\"1\":{\"1235\":1}}],[\"现象\",{\"0\":{\"839\":1},\"1\":{\"839\":2}}],[\"现在也很少打开了\",{\"1\":{\"1828\":1}}],[\"现在对数码的兴趣越来越小了\",{\"1\":{\"1828\":1}}],[\"现在更多的是把运动当成一个放松的活动\",{\"1\":{\"1827\":1}}],[\"现在每天晚上看会儿书\",{\"1\":{\"1817\":1}}],[\"现在想想在学校里可以一整天埋头钻研技术\",{\"1\":{\"1786\":1}}],[\"现在主要分布在东欧和俄罗斯\",{\"1\":{\"1760\":1}}],[\"现在主要使用的版本\",{\"1\":{\"807\":1}}],[\"现在元素可复选就更简单了\",{\"1\":{\"1677\":1}}],[\"现在可以复选了\",{\"1\":{\"1676\":1}}],[\"现在如果执行\",{\"1\":{\"1344\":1}}],[\"现在很少直接使用了\",{\"1\":{\"1221\":1}}],[\"现在再回过去看线程池状态转换就清楚多了\",{\"1\":{\"1116\":1}}],[\"现在假设我们有\",{\"1\":{\"1015\":1}}],[\"现在的\",{\"1\":{\"791\":1}}],[\"现在的问题是\",{\"1\":{\"494\":1}}],[\"现在改用位于本地内存的元空间作为方法区的实现\",{\"1\":{\"211\":1}}],[\"现有架构的元数据存储在\",{\"1\":{\"448\":1}}],[\"现代处理器采用了指令级并行技术来将多条指令重叠执行\",{\"1\":{\"143\":1}}],[\"现金\",{\"1\":{\"124\":1}}],[\"编程复杂性较高\",{\"1\":{\"1460\":1}}],[\"编程式事务的使用主要就是两步\",{\"1\":{\"1056\":1}}],[\"编程式事务使用起来会比较麻烦\",{\"1\":{\"1040\":1}}],[\"编程式\",{\"0\":{\"1037\":1},\"1\":{\"1383\":1,\"1611\":1}}],[\"编号\",{\"1\":{\"1474\":1}}],[\"编号为偶写入checkpoint1\",{\"1\":{\"741\":1}}],[\"编号之前的所有日志\",{\"1\":{\"643\":1}}],[\"编写简易网页播放器\",{\"0\":{\"1870\":1}}],[\"编写用例\",{\"0\":{\"1718\":1}}],[\"编写一般业务代码时\",{\"1\":{\"1716\":1}}],[\"编写公共的\",{\"1\":{\"356\":1}}],[\"编写测试代码\",{\"1\":{\"356\":1}}],[\"编码命令\",{\"1\":{\"1868\":1}}],[\"编码跟随\",{\"1\":{\"1400\":1}}],[\"编码对数据进行压缩\",{\"1\":{\"1129\":1}}],[\"编码转换\",{\"1\":{\"896\":1,\"897\":1,\"898\":1,\"899\":1,\"900\":1}}],[\"编码方式\",{\"1\":{\"888\":1}}],[\"编码时要充分利用多核\",{\"1\":{\"791\":1}}],[\"编码格式占用带宽大\",{\"1\":{\"409\":1}}],[\"编码稍复杂\",{\"1\":{\"329\":1}}],[\"编码简单\",{\"1\":{\"327\":1}}],[\"编码\",{\"1\":{\"315\":1,\"1641\":1}}],[\"编码等信息\",{\"1\":{\"37\":1}}],[\"编解码器\",{\"0\":{\"849\":1},\"1\":{\"1867\":1}}],[\"编解码\",{\"1\":{\"315\":1}}],[\"编译主代码有效\",{\"1\":{\"1632\":1}}],[\"编译执行计划\",{\"1\":{\"1566\":1}}],[\"编译\",{\"1\":{\"1224\":1,\"1632\":2}}],[\"编译后\",{\"1\":{\"391\":1}}],[\"编译后的代码通常会比字节码更大\",{\"1\":{\"272\":1}}],[\"编译后的代码无法动态修改\",{\"1\":{\"272\":1}}],[\"编译期必须处理\",{\"1\":{\"345\":1}}],[\"编译期可分为\",{\"1\":{\"255\":1}}],[\"编译阶段不会报错\",{\"1\":{\"345\":1}}],[\"编译看左边\",{\"1\":{\"293\":2}}],[\"编译优化技术\",{\"0\":{\"274\":1}}],[\"编译为本地机器码的工具\",{\"1\":{\"270\":1}}],[\"编译动作在后台编译线程中进行\",{\"1\":{\"269\":1}}],[\"编译过程\",{\"0\":{\"269\":1}}],[\"编译过程大致分为准备过程和三个处理过程\",{\"1\":{\"255\":1}}],[\"编译时自动选择性能最高的函数库\",{\"1\":{\"919\":1}}],[\"编译时自动进行\",{\"1\":{\"268\":1}}],[\"编译时异常\",{\"1\":{\"345\":1,\"1533\":1}}],[\"编译时的最小元素是标记\",{\"1\":{\"257\":1}}],[\"编译的目标对象都是整个方法体\",{\"1\":{\"268\":1}}],[\"编译的对象\",{\"1\":{\"268\":1}}],[\"编译对象与触发条件\",{\"0\":{\"268\":1}}],[\"编译成本地机器码\",{\"1\":{\"242\":1,\"266\":1}}],[\"编译器生成代码\",{\"1\":{\"1125\":1}}],[\"编译器可能会消除这个锁\",{\"1\":{\"1080\":1}}],[\"编译器可以将编译后的代码直接存储在可执行文件中\",{\"1\":{\"271\":1}}],[\"编译器可以进行更深入的代码优化\",{\"1\":{\"271\":1}}],[\"编译器通过分析代码的语义和数据流来确定哪些锁是不必要的\",{\"1\":{\"1080\":1}}],[\"编译器通常适用于以下场景\",{\"1\":{\"273\":1}}],[\"编译器需要在程序启动之前进行编译\",{\"1\":{\"272\":1}}],[\"编译器在程序启动时带来的性能开销\",{\"1\":{\"271\":1}}],[\"编译器在不改变单线程程序语义的前提下\",{\"1\":{\"143\":1}}],[\"编译器能够在程序启动之前完成编译工作\",{\"1\":{\"270\":1,\"271\":1}}],[\"编译器无论在何时\",{\"1\":{\"265\":1}}],[\"编译器会根据上下文自动推断泛型类型\",{\"1\":{\"263\":1}}],[\"编译器会自动插入装箱和拆箱的代码\",{\"1\":{\"263\":1}}],[\"编译器将重新解析\",{\"1\":{\"260\":1}}],[\"编译器和处理器怎么优化都行\",{\"1\":{\"143\":1}}],[\"编译器优化重排\",{\"1\":{\"143\":1}}],[\"寄存器等内核空间资源\",{\"1\":{\"1487\":1}}],[\"寄存器等内核空间的资源\",{\"1\":{\"1454\":1}}],[\"寄存器和程序计数器\",{\"1\":{\"1454\":1}}],[\"寄存器分\",{\"1\":{\"1432\":1}}],[\"寄存器\",{\"1\":{\"142\":1,\"1432\":1,\"1434\":1,\"1481\":1}}],[\"工人既可以执行\",{\"1\":{\"814\":1}}],[\"工人根据\",{\"1\":{\"814\":1}}],[\"工序可以有多个\",{\"1\":{\"814\":1}}],[\"工\",{\"1\":{\"703\":1}}],[\"工程\",{\"1\":{\"703\":1}}],[\"工厂模式如files\",{\"1\":{\"1503\":1}}],[\"工厂模式\",{\"0\":{\"1646\":1},\"1\":{\"358\":1}}],[\"工作\",{\"2\":{\"1753\":1}}],[\"工作目录\",{\"1\":{\"1633\":1}}],[\"工作模式\",{\"1\":{\"1628\":1}}],[\"工作模式有\",{\"1\":{\"1628\":1}}],[\"工作是否已经完成\",{\"1\":{\"1481\":1}}],[\"工作流名称\",{\"1\":{\"1791\":1}}],[\"工作流\",{\"1\":{\"1333\":1,\"1791\":1}}],[\"工作流程\",{\"0\":{\"464\":1,\"482\":1}}],[\"工作区数据\",{\"1\":{\"1344\":1}}],[\"工作区\",{\"1\":{\"1310\":1}}],[\"工作量证明\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"工作量大\",{\"1\":{\"809\":1}}],[\"工作在非阻塞模式下\",{\"1\":{\"765\":1}}],[\"工作地址\",{\"1\":{\"596\":1}}],[\"工作队列模式\",{\"1\":{\"414\":1}}],[\"工作线程会重复使用\",{\"1\":{\"154\":1}}],[\"工作窃取算法运行流程图\",{\"1\":{\"153\":1}}],[\"工作内存抽象概念\",{\"1\":{\"142\":1}}],[\"工具检查死锁\",{\"1\":{\"1466\":1}}],[\"工具打包\",{\"1\":{\"1400\":1}}],[\"工具方法\",{\"0\":{\"1095\":1}}],[\"工具转换\",{\"1\":{\"391\":1}}],[\"工具\",{\"0\":{\"228\":1},\"1\":{\"89\":1,\"914\":1,\"1213\":1,\"1420\":2,\"1867\":1},\"2\":{\"86\":1,\"1352\":1,\"1702\":1,\"1863\":1,\"1874\":1,\"1879\":1}}],[\"工具类提供了对文件的操作\",{\"1\":{\"82\":1}}],[\"工具类\",{\"1\":{\"80\":1,\"1244\":1}}],[\"工具类貌似没什么实用的意义\",{\"1\":{\"62\":1}}],[\"控制运价\",{\"1\":{\"1723\":1}}],[\"控制对象行为\",{\"1\":{\"1711\":1}}],[\"控制相同元素的前后顺序\",{\"1\":{\"1675\":2}}],[\"控制树枝遍历\",{\"1\":{\"1670\":1}}],[\"控制并发\",{\"1\":{\"1499\":4}}],[\"控制方式\",{\"1\":{\"1481\":1}}],[\"控制总线\",{\"1\":{\"1432\":1}}],[\"控制单元\",{\"1\":{\"1432\":1}}],[\"控制器发起中断\",{\"1\":{\"1482\":1}}],[\"控制器\",{\"1\":{\"1432\":1,\"1486\":2,\"1604\":1}}],[\"控制处理\",{\"1\":{\"872\":1}}],[\"控制事务方式二\",{\"1\":{\"734\":1}}],[\"控制事务方式一\",{\"1\":{\"734\":1}}],[\"控制块按照lru\",{\"1\":{\"732\":1}}],[\"控制块存储页面对应的表空间编号\",{\"1\":{\"730\":1}}],[\"控制语句\",{\"0\":{\"629\":1}}],[\"控制数据库的控制权限\",{\"1\":{\"572\":1}}],[\"控制每隔多少秒重新加载配置\",{\"1\":{\"387\":1}}],[\"控制转移指令\",{\"1\":{\"241\":1}}],[\"控制是否允许较窄变量插入父类变量的间隙\",{\"1\":{\"215\":1}}],[\"控制变量分配策略\",{\"1\":{\"215\":1}}],[\"控制\",{\"1\":{\"142\":1,\"387\":1,\"490\":2,\"731\":1,\"732\":2}}],[\"上车后\",{\"1\":{\"1848\":1}}],[\"上班路上真的幸福感提升明显\",{\"1\":{\"1828\":1}}],[\"上班之后在公司一直用\",{\"1\":{\"1828\":1}}],[\"上班的每一天都有新的挑战\",{\"1\":{\"1825\":1}}],[\"上半年学校的健身房装修跑路\",{\"1\":{\"1827\":1}}],[\"上半年真的挺疯狂的\",{\"1\":{\"1825\":1}}],[\"上半年\",{\"1\":{\"1825\":1}}],[\"上半部\",{\"1\":{\"1437\":1}}],[\"上传量也有2\",{\"1\":{\"1810\":1}}],[\"上传到它们的网盘里\",{\"1\":{\"1805\":1}}],[\"上授权\",{\"1\":{\"1792\":1}}],[\"上创建一个公共仓库\",{\"1\":{\"1791\":1}}],[\"上山\",{\"1\":{\"1786\":1}}],[\"上线\",{\"1\":{\"1784\":1}}],[\"上线完发现线上环境配置文件忘了改\",{\"1\":{\"1779\":1}}],[\"上周末提交完三千字的自评\",{\"1\":{\"1783\":1}}],[\"上周的需求开发完之后\",{\"1\":{\"1779\":1}}],[\"上帝的儿子\",{\"1\":{\"1759\":1}}],[\"上客货后\",{\"1\":{\"1746\":1}}],[\"上添加的\",{\"1\":{\"1598\":1}}],[\"上有可读事件发生时\",{\"1\":{\"1487\":1}}],[\"上层需要定义消息格式用于定义消息边界\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"上层命令实际调用的方法\",{\"1\":{\"1350\":1}}],[\"上并没有特权\",{\"1\":{\"1218\":1}}],[\"上注册的监听事件\",{\"1\":{\"1189\":1}}],[\"上所处的状态\",{\"1\":{\"1089\":1}}],[\"上了锁\",{\"1\":{\"1076\":1}}],[\"上述条件不满足\",{\"1\":{\"839\":1}}],[\"上述的每个链表对应一个list\",{\"1\":{\"693\":1}}],[\"上源源不断的\",{\"1\":{\"816\":1}}],[\"上关联的附件\",{\"1\":{\"788\":1}}],[\"上的不同文件夹\",{\"1\":{\"1228\":1}}],[\"上的触发器\",{\"1\":{\"1189\":1}}],[\"上的各种事件\",{\"1\":{\"823\":1}}],[\"上的可写事件\",{\"1\":{\"789\":1}}],[\"上的\",{\"1\":{\"786\":1,\"817\":1,\"1153\":2}}],[\"上的分区个数\",{\"1\":{\"445\":1}}],[\"上发生的读写就绪事件\",{\"1\":{\"765\":1}}],[\"上一步创建的\",{\"1\":{\"1791\":1}}],[\"上一个任务执行完间隔\",{\"1\":{\"1110\":1}}],[\"上一次收到的报文序列号\",{\"1\":{\"1418\":1}}],[\"上一次发送的序列号\",{\"1\":{\"1418\":1}}],[\"上一次提交的快照\",{\"1\":{\"1344\":1}}],[\"上一次提交的第二个父提交\",{\"1\":{\"1341\":1}}],[\"上一次提交\",{\"1\":{\"1341\":1}}],[\"上一次交互时间\",{\"1\":{\"923\":1}}],[\"上一次垃圾回收结束到下一次垃圾回收开始\",{\"1\":{\"183\":1}}],[\"上一组日志在页面中开始的偏移量\",{\"1\":{\"749\":1}}],[\"上面两种方法的综合\",{\"1\":{\"908\":1}}],[\"上面讲述的都是独立表空间\",{\"1\":{\"695\":1}}],[\"上面的景色太美了\",{\"1\":{\"1846\":1}}],[\"上面的alist\",{\"1\":{\"1809\":1}}],[\"上面的\",{\"1\":{\"537\":1,\"1059\":1}}],[\"上海虹桥\",{\"1\":{\"1722\":1}}],[\"上海\",{\"1\":{\"596\":1}}],[\"上\",{\"1\":{\"443\":1,\"658\":2,\"765\":1,\"789\":1,\"1092\":3,\"1155\":1,\"1337\":3,\"1626\":1,\"1790\":1,\"1792\":1}}],[\"上下文类加载器\",{\"1\":{\"1087\":1}}],[\"上下文\",{\"1\":{\"365\":1,\"916\":1,\"1454\":1,\"1482\":1}}],[\"上下文切换\",{\"0\":{\"1454\":1},\"1\":{\"134\":1,\"1454\":1}}],[\"上下文切换开销低\",{\"1\":{\"134\":1}}],[\"上锁时\",{\"1\":{\"1076\":1}}],[\"上锁\",{\"1\":{\"157\":1,\"1114\":1}}],[\"上锁的线程\",{\"1\":{\"139\":1}}],[\"让我摸索过河\",{\"1\":{\"1782\":1}}],[\"让他们远离家人长大\",{\"1\":{\"1767\":1}}],[\"让元素可复选即可\",{\"1\":{\"1677\":2}}],[\"让使用者不用知道具体的参数就可以创建出所需的产品类\",{\"1\":{\"1646\":1}}],[\"让当前系统立即切换依赖其他备用服务\",{\"1\":{\"1638\":1}}],[\"让当前线程释放锁并进入等待\",{\"1\":{\"331\":1}}],[\"让它们能够一起工作\",{\"1\":{\"1503\":1}}],[\"让它们优雅地释放连接\",{\"1\":{\"1420\":1}}],[\"让预读页停留在内存里的时间要尽可能短\",{\"1\":{\"1448\":1}}],[\"让服务器做验证\",{\"1\":{\"1402\":1}}],[\"让bean实现disposablebean\",{\"1\":{\"1381\":1}}],[\"让一个网关承担所有的工作\",{\"1\":{\"1300\":1}}],[\"让两个方向上现有的数据包都被丢弃\",{\"1\":{\"1410\":1}}],[\"让两者的分工更加明确\",{\"1\":{\"1300\":1}}],[\"让两张表的数据之间建立连接\",{\"1\":{\"599\":1}}],[\"让两张图的数据之间建立连接\",{\"1\":{\"598\":1}}],[\"让客户端通过\",{\"1\":{\"965\":1}}],[\"让客户端身份更清晰\",{\"1\":{\"923\":1}}],[\"让源节点准备好将属于槽slot的键值对迁移至目标节点\",{\"1\":{\"946\":1}}],[\"让目标节点准备好从源节点导入属于槽slot的键值对\",{\"1\":{\"946\":1}}],[\"让旧主服务器属下的所有从服务器改为复制新的主服务器\",{\"1\":{\"943\":1}}],[\"让主从数据库重新回到一致状态\",{\"1\":{\"933\":1}}],[\"让字典同时持有ht\",{\"1\":{\"883\":1}}],[\"让事件组处理完手上的工作后不再接收新任务\",{\"1\":{\"821\":1}}],[\"让线程得到充分利用\",{\"1\":{\"784\":1}}],[\"让线程休眠指定时间\",{\"1\":{\"330\":1}}],[\"让消息再次发送\",{\"1\":{\"420\":1}}],[\"让其它线程竞争\",{\"1\":{\"139\":1}}],[\"让\",{\"1\":{\"139\":1,\"1556\":1}}],[\"让拿到\",{\"1\":{\"139\":2}}],[\"监测主从服务器连接状态\",{\"1\":{\"937\":1}}],[\"监测普通任务\",{\"1\":{\"871\":1}}],[\"监听客户端连接\",{\"1\":{\"1859\":1}}],[\"监听和传输数据的是两个\",{\"1\":{\"1487\":1}}],[\"监听器\",{\"1\":{\"1379\":1}}],[\"监听器等等\",{\"1\":{\"1011\":1,\"1012\":1,\"1379\":1}}],[\"监听死信队列的服务根据订单的状态\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"监听子节点中子节点的变化\",{\"1\":{\"1191\":1}}],[\"监听目录\",{\"1\":{\"1191\":1}}],[\"监听\",{\"0\":{\"1191\":1,\"1192\":1}}],[\"监听是一次性的\",{\"1\":{\"1189\":1}}],[\"监听时也使用\",{\"1\":{\"1171\":1}}],[\"监听绑定端口\",{\"1\":{\"811\":1,\"813\":1}}],[\"监听所有\",{\"1\":{\"789\":1}}],[\"监听事件\",{\"0\":{\"872\":1},\"1\":{\"785\":1,\"1488\":1,\"1859\":1}}],[\"监听方法必须放在\",{\"1\":{\"418\":1}}],[\"监听消息队列\",{\"1\":{\"418\":1}}],[\"监听消息必须添加\",{\"1\":{\"418\":1}}],[\"监视和管理控制台\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"监视该主服务器的所有在线sentinel都可能成为领头\",{\"1\":{\"942\":1}}],[\"监视该服务器的所有sentinel将选举出一个领头sentinel\",{\"1\":{\"942\":1}}],[\"监视同一个服务器的sentinel可以通过频道信息自动发现对方\",{\"1\":{\"940\":1}}],[\"监视器\",{\"0\":{\"979\":1},\"1\":{\"1074\":1}}],[\"监视器等检查工作\",{\"1\":{\"927\":1}}],[\"监视器的线程到\",{\"1\":{\"139\":1}}],[\"监视器的线程进入\",{\"1\":{\"139\":1}}],[\"监视捕获异常\",{\"1\":{\"346\":1}}],[\"监控中心\",{\"1\":{\"1617\":1}}],[\"监控检查和外部化配置\",{\"1\":{\"1609\":1}}],[\"监控工具\",{\"0\":{\"447\":1}}],[\"监控java虚拟机运行信息\",{\"1\":{\"228\":1}}],[\"监控\",{\"1\":{\"31\":1,\"1621\":1}}],[\"见到了黄河\",{\"1\":{\"1848\":1}}],[\"见到的第一面\",{\"1\":{\"1843\":1}}],[\"见到的第一眼\",{\"1\":{\"1776\":1}}],[\"见了多年未见的老友\",{\"1\":{\"1825\":1}}],[\"见页目录部分\",{\"1\":{\"689\":1}}],[\"见\",{\"1\":{\"138\":1,\"140\":1,\"152\":1,\"220\":1,\"225\":1,\"226\":1,\"227\":1,\"275\":1,\"281\":1,\"512\":1,\"1057\":1}}],[\"信仰\",{\"1\":{\"1836\":1}}],[\"信先知穆罕默德\",{\"1\":{\"1764\":1}}],[\"信得救赎\",{\"1\":{\"1763\":1}}],[\"信上帝\",{\"1\":{\"1758\":1}}],[\"信道是建立在\",{\"1\":{\"1629\":1}}],[\"信道复用\",{\"1\":{\"405\":1}}],[\"信号处理函数\",{\"1\":{\"1465\":1}}],[\"信号\",{\"0\":{\"1462\":1},\"1\":{\"1462\":3,\"1465\":1}}],[\"信号驱动\",{\"1\":{\"794\":1,\"1504\":1}}],[\"信号量功能更强大\",{\"1\":{\"1463\":1}}],[\"信号量加\",{\"1\":{\"1460\":1}}],[\"信号量减\",{\"1\":{\"1460\":1}}],[\"信号量机制防止了多进程竞争共享资源而造成数据错乱的问题\",{\"1\":{\"1460\":1}}],[\"信号量是一种基于\",{\"1\":{\"159\":1}}],[\"信号量\",{\"0\":{\"1460\":1},\"1\":{\"137\":1,\"1264\":1,\"1463\":2}}],[\"信息格式的描述标准\",{\"1\":{\"1860\":1}}],[\"信息伪造两个\",{\"1\":{\"1420\":1}}],[\"信息的长度和内容\",{\"1\":{\"949\":1}}],[\"信息拷入\",{\"1\":{\"802\":1}}],[\"信息性消息\",{\"1\":{\"390\":1}}],[\"信息\",{\"1\":{\"22\":1,\"483\":1,\"1323\":1}}],[\"调优\",{\"0\":{\"1367\":1}}],[\"调优和监控\",{\"1\":{\"1104\":1}}],[\"调整yuv格式视频亮度\",{\"1\":{\"1878\":1}}],[\"调整航班可用座位数\",{\"1\":{\"1723\":1}}],[\"调整页阈值\",{\"1\":{\"1446\":1}}],[\"调整\",{\"1\":{\"1415\":1,\"1524\":1}}],[\"调整半\",{\"1\":{\"1415\":1}}],[\"调整握手时间上限\",{\"1\":{\"1415\":1}}],[\"调整输出样式\",{\"1\":{\"1322\":1}}],[\"调整缓存淘汰策略\",{\"1\":{\"1259\":1}}],[\"调整wsl下mysql的密码安全策略\",{\"0\":{\"1148\":1}}],[\"调整步骤\",{\"1\":{\"883\":1}}],[\"调整大小\",{\"1\":{\"883\":1}}],[\"调整条件\",{\"1\":{\"883\":1}}],[\"调整指令的执行顺序\",{\"1\":{\"274\":1}}],[\"调度队列\",{\"1\":{\"1483\":1}}],[\"调度程序应确保\",{\"1\":{\"1470\":1}}],[\"调度原则\",{\"1\":{\"1470\":1}}],[\"调度算法\",{\"0\":{\"1469\":1},\"1\":{\"1470\":1,\"1483\":1}}],[\"调度优先级从上到下\",{\"1\":{\"1436\":1}}],[\"调度器\",{\"1\":{\"1436\":1,\"1484\":1}}],[\"调度\",{\"0\":{\"1436\":1}}],[\"调度的都是\",{\"1\":{\"1436\":1}}],[\"调度的核心\",{\"1\":{\"540\":1}}],[\"调度的基本单位\",{\"1\":{\"134\":1}}],[\"调度和销毁都由用户空间的线程库来管理\",{\"1\":{\"279\":1}}],[\"调用验证\",{\"0\":{\"1714\":1}}],[\"调用处理器然后返回结果给客户端的类\",{\"1\":{\"1623\":1}}],[\"调用远程方法的一端\",{\"1\":{\"1623\":1}}],[\"调用对象工厂的getobject方法来获取到对应的对象\",{\"1\":{\"1599\":1}}],[\"调用对象的\",{\"1\":{\"196\":1}}],[\"调用其子类\",{\"1\":{\"1527\":1}}],[\"调用类对象的<clinit>\",{\"1\":{\"1527\":1}}],[\"调用类静态方法\",{\"1\":{\"1527\":1}}],[\"调用类的静态方法\",{\"1\":{\"247\":1}}],[\"调用后\",{\"1\":{\"1504\":1}}],[\"调用后不返回stream\",{\"1\":{\"312\":1}}],[\"调用相应的\",{\"1\":{\"1488\":1}}],[\"调用时间等\",{\"1\":{\"1617\":1}}],[\"调用时\",{\"1\":{\"1478\":1}}],[\"调用时需要传入值\",{\"1\":{\"631\":1}}],[\"调用才可以获取到结果\",{\"1\":{\"1478\":1}}],[\"调用之前的\",{\"1\":{\"1414\":1}}],[\"调用参数解析和用户逻辑调用\",{\"1\":{\"1126\":1}}],[\"调用的线程执行完毕后会执行\",{\"1\":{\"1091\":1}}],[\"调用顺序\",{\"1\":{\"1015\":1,\"1016\":1}}],[\"调用复制功能\",{\"1\":{\"948\":1}}],[\"调用redisclient\",{\"1\":{\"927\":1}}],[\"调用命令实现函数\",{\"1\":{\"927\":1}}],[\"调用命令执行器\",{\"1\":{\"926\":1}}],[\"调用操作系统的写能力\",{\"1\":{\"799\":1}}],[\"调用存储过程可以简化应用开发人员的很多工作\",{\"1\":{\"627\":1}}],[\"调用重定向到自己的\",{\"1\":{\"380\":1}}],[\"调用start后的运行状态\",{\"1\":{\"1509\":1}}],[\"调用start\",{\"1\":{\"328\":1}}],[\"调用thread\",{\"1\":{\"327\":1}}],[\"调用完成后返回新的stream流\",{\"1\":{\"312\":1}}],[\"调用私有构造器\",{\"1\":{\"309\":1}}],[\"调用接口方法时\",{\"1\":{\"245\":1}}],[\"调用构造方法时\",{\"1\":{\"245\":1}}],[\"调用实例方法时\",{\"1\":{\"244\":1,\"245\":1}}],[\"调用者可以继续后续的操作\",{\"1\":{\"134\":1}}],[\"调用者必须等到方法调用返回后\",{\"1\":{\"134\":1}}],[\"调用就会立即返回\",{\"1\":{\"134\":1}}],[\"调用\",{\"1\":{\"53\":2,\"58\":1,\"139\":1,\"192\":1,\"209\":1,\"533\":1,\"544\":2,\"628\":1,\"767\":2,\"771\":2,\"772\":2,\"785\":2,\"799\":1,\"801\":2,\"802\":1,\"829\":3,\"1025\":2,\"1028\":1,\"1038\":1,\"1059\":1,\"1090\":1,\"1119\":1,\"1382\":1,\"1597\":2}}],[\"调用函数\",{\"1\":{\"53\":1}}],[\"调用第三方短信服务\",{\"1\":{\"14\":1}}],[\"协商缓存\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"协商的\",{\"1\":{\"404\":1}}],[\"协调各个服务的状态\",{\"1\":{\"1162\":1}}],[\"协作组件\",{\"0\":{\"964\":1}}],[\"协助在各个环节中完成海量数据的传输\",{\"1\":{\"1213\":1}}],[\"协助\",{\"1\":{\"640\":1}}],[\"协程能保留上一次调用时的状态\",{\"1\":{\"1453\":1}}],[\"协程切换不需要内核态\",{\"1\":{\"1453\":1}}],[\"协程是一种运行在线程之上的用户态模型\",{\"1\":{\"1453\":1}}],[\"协程是轻量级的执行单元\",{\"1\":{\"282\":1}}],[\"协程之间可以通过消息传递或者共享内存来进行通信\",{\"1\":{\"282\":1}}],[\"协程通常是通过协作式调度\",{\"1\":{\"282\":1}}],[\"协程可以简化异步编程模型\",{\"1\":{\"282\":1}}],[\"协程的创建\",{\"1\":{\"282\":1}}],[\"协程允许在单个线程内实现多个并发执行的任务\",{\"1\":{\"282\":1}}],[\"协程\",{\"0\":{\"282\":1},\"1\":{\"134\":2,\"1510\":1}}],[\"协议国装载客货飞本国\",{\"1\":{\"1745\":1}}],[\"协议族\",{\"1\":{\"1461\":1}}],[\"协议栈就会发送探测报文\",{\"1\":{\"1419\":1}}],[\"协议通过回车符+换行符作为报文的边界\",{\"1\":{\"1417\":1}}],[\"协议在建立连接的时候通常要协商双方的\",{\"1\":{\"1416\":1}}],[\"协议就是在\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"协议就更加复杂了\",{\"1\":{\"846\":1}}],[\"协议指规定了通信的方式\",{\"1\":{\"1398\":1}}],[\"协议等字段\",{\"1\":{\"1396\":1}}],[\"协议等信息\",{\"1\":{\"1394\":1}}],[\"协议获得下一跳\",{\"1\":{\"1394\":1}}],[\"协议进行通信\",{\"1\":{\"1224\":1}}],[\"协议要和服务端一致\",{\"1\":{\"1125\":1}}],[\"协议的一个选项\",{\"1\":{\"858\":1}}],[\"协议的消息中间件\",{\"1\":{\"411\":1}}],[\"协议举例\",{\"0\":{\"846\":1}}],[\"协议设计\",{\"0\":{\"845\":1}}],[\"协议支持\",{\"1\":{\"435\":1}}],[\"协议基础上基于\",{\"1\":{\"410\":1}}],[\"协议特点\",{\"1\":{\"409\":1}}],[\"协议里面的消息目的地\",{\"1\":{\"408\":1}}],[\"协议交换最小化\",{\"1\":{\"407\":1}}],[\"协议\",{\"0\":{\"341\":1,\"402\":1,\"1129\":1,\"1200\":1,\"1398\":1,\"1401\":1},\"1\":{\"846\":2,\"1283\":1,\"1301\":2,\"1314\":3,\"1396\":1,\"1404\":1,\"1461\":1,\"1860\":3}}],[\"协议格式\",{\"0\":{\"848\":1},\"1\":{\"95\":1}}],[\"协议定义的\",{\"1\":{\"95\":1}}],[\"协议本身是无状态的\",{\"1\":{\"17\":1}}],[\"人类真的是太牛了\",{\"1\":{\"1833\":1}}],[\"人类的行为及产生的事件的一种记录称之为数据\",{\"1\":{\"1211\":1}}],[\"人活着不就是为了几个执念\",{\"1\":{\"1832\":1}}],[\"人生第一份工作\",{\"1\":{\"1815\":1}}],[\"人生梦想318\",{\"1\":{\"0\":1}}],[\"人人为我的下载方式配合考核机制非常符合互联网的开放精神\",{\"1\":{\"1810\":1}}],[\"人民有权推翻君主以维护他们的合法权利\",{\"1\":{\"1767\":1}}],[\"人数不及逊尼派\",{\"1\":{\"1765\":1}}],[\"人性化单位\",{\"1\":{\"1700\":1}}],[\"人性化文件size\",{\"1\":{\"1218\":1}}],[\"人为破坏\",{\"1\":{\"1638\":1}}],[\"人员管理等\",{\"1\":{\"1365\":1}}],[\"人工智能等领域的重要工具\",{\"1\":{\"1211\":1}}],[\"人们提出了指令重排\",{\"1\":{\"143\":1}}],[\"人们先后提出了批处理os\",{\"1\":{\"134\":1}}],[\"饥饿\",{\"1\":{\"134\":1,\"1467\":1}}],[\"导出\",{\"1\":{\"1226\":1}}],[\"导出数据到本地\",{\"1\":{\"1226\":1}}],[\"导入所有缓存类型的配置类\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"导入\",{\"1\":{\"1264\":1,\"1269\":1,\"1368\":1}}],[\"导入数据\",{\"1\":{\"1228\":2}}],[\"导入指定类\",{\"1\":{\"1026\":1}}],[\"导入junit\",{\"1\":{\"356\":1}}],[\"导入了\",{\"1\":{\"25\":2,\"1598\":1}}],[\"导致我和fy全程都是分开坐的\",{\"1\":{\"1841\":1}}],[\"导致功能时间超长\",{\"1\":{\"1636\":1}}],[\"导致死信的原因\",{\"1\":{\"1629\":1}}],[\"导致\",{\"1\":{\"1514\":1,\"1524\":1}}],[\"导致这些线程都被阻塞\",{\"1\":{\"1466\":1}}],[\"导致这些请求直接到达数据库服务器\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"导致程序运行速度减慢甚至系统崩溃等严重后果\",{\"1\":{\"1445\":1}}],[\"导致程序编码的混乱\",{\"1\":{\"376\":1}}],[\"导致内存泄漏\",{\"1\":{\"1445\":1}}],[\"导致内存与缓存的数据同步存在时间差\",{\"1\":{\"143\":1}}],[\"导致丢包和窗口变负值的情况\",{\"1\":{\"1412\":1}}],[\"导致连接释放后服务端又建立一个旧连接\",{\"1\":{\"1409\":1}}],[\"导致连续的空间重分配\",{\"1\":{\"893\":1}}],[\"导致页面加载过慢\",{\"1\":{\"1367\":1}}],[\"导致大量的请求都直接落到了数据库上\",{\"1\":{\"1258\":1,\"1581\":1}}],[\"导致锁失效\",{\"1\":{\"1240\":1}}],[\"导致主从不一致时\",{\"1\":{\"933\":1}}],[\"导致第一个事务两次读取的数据不一致\",{\"1\":{\"1551\":1}}],[\"导致第一个事务两次读取的数据不同\",{\"1\":{\"736\":1}}],[\"导致第一个事务再次查询时发现多出一些记录\",{\"1\":{\"736\":1,\"1551\":1}}],[\"导致性能降低\",{\"1\":{\"698\":1}}],[\"导致一页中存储的键值减少\",{\"1\":{\"698\":1}}],[\"导致一直无法执行\",{\"1\":{\"134\":1}}],[\"导致按\",{\"1\":{\"477\":1}}],[\"导致消息重复的问题\",{\"1\":{\"461\":1}}],[\"导致很长的停顿时间\",{\"1\":{\"176\":1}}],[\"导致threadlocal无法回收造成内存泄漏\",{\"1\":{\"154\":1,\"1514\":1}}],[\"导致资源不断在两个线程间跳动\",{\"1\":{\"134\":1}}],[\"导致线程挂起\",{\"1\":{\"134\":1}}],[\"异或运算满足交换律和结合律\",{\"1\":{\"1662\":1}}],[\"异或运算的三个性质\",{\"1\":{\"1662\":1}}],[\"异或运算\",{\"0\":{\"1662\":1}}],[\"异地多活\",{\"1\":{\"1638\":1}}],[\"异地灾备\",{\"1\":{\"1638\":1}}],[\"异步调用\",{\"1\":{\"1638\":1}}],[\"异步计算结果\",{\"1\":{\"1511\":1}}],[\"异步通信\",{\"1\":{\"1458\":1}}],[\"异步通信之外\",{\"1\":{\"440\":1}}],[\"异步通知\",{\"1\":{\"1189\":1}}],[\"异步回调\",{\"1\":{\"822\":2}}],[\"异步接收结果\",{\"1\":{\"822\":1}}],[\"异步意味着\",{\"1\":{\"795\":1}}],[\"异步非阻塞\",{\"1\":{\"794\":1,\"1446\":1}}],[\"异步io\",{\"1\":{\"640\":1,\"794\":1,\"1504\":1}}],[\"异步提交\",{\"1\":{\"492\":1}}],[\"异步和单向\",{\"1\":{\"427\":1}}],[\"异步的\",{\"1\":{\"404\":1,\"795\":1}}],[\"异步处理\",{\"0\":{\"398\":1},\"1\":{\"1625\":1}}],[\"异步消息\",{\"1\":{\"396\":1}}],[\"异步编排实现根据\",{\"1\":{\"1369\":1}}],[\"异步编排\",{\"0\":{\"163\":1}}],[\"异步\",{\"1\":{\"134\":1,\"794\":2,\"795\":1,\"1447\":1,\"1478\":1}}],[\"异常2\",{\"1\":{\"1713\":2}}],[\"异常1\",{\"1\":{\"1713\":2}}],[\"异常分类\",{\"1\":{\"1533\":1}}],[\"异常机制\",{\"0\":{\"1533\":1}}],[\"异常数量也会增加\",{\"1\":{\"1367\":1}}],[\"异常类型\",{\"1\":{\"1128\":1}}],[\"异常之前会记录日志\",{\"1\":{\"1109\":1}}],[\"异常关闭\",{\"1\":{\"785\":1}}],[\"异常信息应包括两类\",{\"1\":{\"391\":1}}],[\"异常体系\",{\"0\":{\"345\":1},\"1\":{\"345\":1}}],[\"异常处理原则\",{\"1\":{\"829\":1}}],[\"异常处理\",{\"0\":{\"346\":1}}],[\"异常处理指令\",{\"1\":{\"241\":1}}],[\"异常处理表等\",{\"1\":{\"240\":1}}],[\"异常表\",{\"1\":{\"240\":1}}],[\"异常表等\",{\"1\":{\"240\":1}}],[\"异常抛出\",{\"1\":{\"238\":1}}],[\"异常调用完成\",{\"1\":{\"206\":1}}],[\"异常\",{\"0\":{\"344\":1,\"1096\":1},\"1\":{\"6\":2,\"855\":1,\"1520\":1,\"1533\":1,\"1713\":1}}],[\"宏观并行\",{\"1\":{\"134\":1}}],[\"微内核\",{\"1\":{\"1441\":1}}],[\"微服务\",{\"2\":{\"1305\":1}}],[\"微秒级\",{\"1\":{\"435\":1}}],[\"微观串行\",{\"1\":{\"134\":1}}],[\"微信\",{\"1\":{\"124\":1}}],[\"转码\",{\"1\":{\"1877\":1}}],[\"转投手机\",{\"1\":{\"1844\":1}}],[\"转正也快开启了\",{\"1\":{\"1778\":1}}],[\"转\",{\"1\":{\"1746\":1}}],[\"转而去运行优先级高的队列\",{\"1\":{\"1470\":1}}],[\"转而执行另一个线程的代码\",{\"1\":{\"134\":1}}],[\"转址旁路缓存\",{\"1\":{\"1443\":1}}],[\"转发\",{\"1\":{\"1393\":1}}],[\"转发到网关\",{\"1\":{\"1366\":1}}],[\"转化而来\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"转化为\",{\"1\":{\"1224\":1}}],[\"转化为字节码指令写入到磁盘中\",{\"1\":{\"264\":1}}],[\"转一下\",{\"1\":{\"1245\":1}}],[\"转向正在导入槽的目标节点\",{\"1\":{\"947\":1}}],[\"转为外部表\",{\"1\":{\"1228\":1}}],[\"转为阻塞状态\",{\"1\":{\"1076\":1}}],[\"转为字符串\",{\"1\":{\"774\":1}}],[\"转为\",{\"1\":{\"139\":1,\"1595\":1}}],[\"转二进制\",{\"1\":{\"129\":1}}],[\"转换成红黑树\",{\"1\":{\"1497\":1}}],[\"转换成不同的物理地址\",{\"1\":{\"1443\":1}}],[\"转换成拼音\",{\"1\":{\"1362\":1}}],[\"转换成一个double类型的浮点数\",{\"1\":{\"970\":1}}],[\"转换成\",{\"1\":{\"726\":1}}],[\"转换流\",{\"0\":{\"320\":1}}],[\"转换为主服务器\",{\"1\":{\"943\":1}}],[\"转换为其它类型的\",{\"1\":{\"829\":1}}],[\"转换为没有派生表的形式\",{\"1\":{\"726\":1}}],[\"转换为\",{\"1\":{\"301\":1}}],[\"转换解析和初始化\",{\"1\":{\"246\":1}}],[\"转换\",{\"1\":{\"129\":1}}],[\"转换数据\",{\"1\":{\"31\":1}}],[\"求财\",{\"1\":{\"1836\":1}}],[\"求所有不重复的全排列\",{\"1\":{\"1675\":1}}],[\"求所有子集\",{\"1\":{\"1670\":1,\"1673\":1}}],[\"求全排列\",{\"1\":{\"1672\":1}}],[\"求指定元素个数的组合\",{\"1\":{\"1671\":1}}],[\"求选择性公式\",{\"1\":{\"707\":1}}],[\"求参数x的四舍五入值\",{\"1\":{\"594\":1}}],[\"求和为target的元素组合\",{\"1\":{\"1676\":1}}],[\"求和为target的组合\",{\"1\":{\"1674\":1}}],[\"求和\",{\"1\":{\"584\":1}}],[\"求元素个数\",{\"1\":{\"129\":1}}],[\"求pi\",{\"1\":{\"129\":1}}],[\"函数名\",{\"1\":{\"1712\":1}}],[\"函数名为f\",{\"1\":{\"965\":1}}],[\"函数读完才结束\",{\"1\":{\"1487\":1}}],[\"函数创建线程\",{\"1\":{\"1487\":1}}],[\"函数描述\",{\"1\":{\"1068\":1}}],[\"函数式异常处理\",{\"1\":{\"1059\":1}}],[\"函数式接口\",{\"1\":{\"298\":1,\"1068\":1}}],[\"函数负责检查是否慢查询\",{\"1\":{\"978\":1}}],[\"函数实现\",{\"1\":{\"909\":1}}],[\"函数是指一段可以直接被另外一段程序调用的程序或代码\",{\"1\":{\"592\":1}}],[\"函数等\",{\"1\":{\"570\":1}}],[\"函数\",{\"0\":{\"129\":1,\"592\":1},\"1\":{\"584\":1,\"593\":1,\"594\":1,\"595\":1,\"596\":1,\"979\":1,\"1256\":1,\"1547\":1,\"1579\":1}}],[\"才了解到正因为兰州在西北少数民族和中原文化的交汇点\",{\"1\":{\"1848\":1}}],[\"才第一天\",{\"1\":{\"1841\":1}}],[\"才调换方向\",{\"1\":{\"1472\":1}}],[\"才发送\",{\"1\":{\"1410\":1}}],[\"才是协议\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"才可以改变其他节点的\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"才可使用\",{\"1\":{\"128\":1}}],[\"才修复\",{\"1\":{\"791\":1}}],[\"才将\",{\"1\":{\"789\":1}}],[\"才会返回\",{\"1\":{\"1478\":1}}],[\"才会开始打印\",{\"1\":{\"1188\":1}}],[\"才会继续发送\",{\"1\":{\"1412\":1}}],[\"才会继续\",{\"1\":{\"1091\":1}}],[\"才会继续传送下一个套接字\",{\"1\":{\"919\":1}}],[\"才会删除过期键\",{\"1\":{\"908\":1}}],[\"才会根据第二个字段进行排序\",{\"1\":{\"586\":1}}],[\"才会进行参数的拼接\",{\"1\":{\"391\":1}}],[\"才允许isr外的副本被选为leader\",{\"1\":{\"470\":1}}],[\"才去创建一个对象\",{\"1\":{\"290\":1}}],[\"才能继续执行后续操作\",{\"1\":{\"1463\":1}}],[\"才能继续后续的行为\",{\"1\":{\"134\":1}}],[\"才能根据进入哪个子网来分配的\",{\"1\":{\"1423\":1}}],[\"才能发现一个死亡连接\",{\"1\":{\"1420\":1}}],[\"才能正确关闭连接\",{\"1\":{\"1420\":1}}],[\"才能避免糊涂窗口综合症\",{\"1\":{\"1412\":1}}],[\"才能检索\",{\"1\":{\"1369\":1}}],[\"才能拥有操作该节点的权限\",{\"1\":{\"1177\":1}}],[\"才能成为领头sentinel\",{\"1\":{\"942\":1}}],[\"才能得到结果\",{\"1\":{\"822\":1}}],[\"才能了解它解决了什么问题\",{\"1\":{\"762\":1}}],[\"才能完成\",{\"1\":{\"471\":1}}],[\"才能有成员内部类对象\",{\"1\":{\"296\":1}}],[\"才能体现出任务并行化带来的性能提升\",{\"1\":{\"163\":1}}],[\"才能保证后续运行结果一致\",{\"1\":{\"146\":1}}],[\"才抛出\",{\"1\":{\"62\":1}}],[\"抽到了m1的mbp嘿嘿嘿\",{\"1\":{\"1773\":1}}],[\"抽取100条\",{\"1\":{\"127\":1}}],[\"抽取结果不变\",{\"1\":{\"127\":1}}],[\"抽象队列同步器\",{\"1\":{\"1516\":1}}],[\"抽象队列节点\",{\"1\":{\"3\":1}}],[\"抽象部分包含高层次的抽象接口\",{\"1\":{\"375\":1}}],[\"抽象出可读的\",{\"1\":{\"82\":1}}],[\"抽象类名\",{\"1\":{\"298\":1}}],[\"抽象类\",{\"1\":{\"61\":1}}],[\"邓\",{\"1\":{\"125\":1}}],[\"王力红\",{\"1\":{\"1226\":1}}],[\"王力鸿\",{\"1\":{\"126\":2}}],[\"王五\",{\"1\":{\"1068\":1}}],[\"王\",{\"1\":{\"125\":1}}],[\"张家界\",{\"1\":{\"1816\":1}}],[\"张支持票时\",{\"1\":{\"948\":1}}],[\"张三\",{\"1\":{\"734\":2,\"1068\":1}}],[\"张王邓\",{\"1\":{\"125\":1}}],[\"张\",{\"1\":{\"125\":1}}],[\"区满了\",{\"1\":{\"1524\":1}}],[\"区中存活的对象复制到另一个\",{\"1\":{\"1524\":1}}],[\"区和原\",{\"1\":{\"1524\":1}}],[\"区和\",{\"1\":{\"1524\":1}}],[\"区空间不足\",{\"1\":{\"1524\":1}}],[\"区空间不足时\",{\"1\":{\"1524\":1}}],[\"区空间不足或\",{\"1\":{\"1524\":1}}],[\"区域的时间\",{\"1\":{\"1448\":1}}],[\"区域淘汰的页面降级到\",{\"1\":{\"1448\":1}}],[\"区域头部\",{\"1\":{\"1448\":3}}],[\"区域和后半部分\",{\"1\":{\"1448\":1}}],[\"区域\",{\"1\":{\"1443\":1,\"1448\":6}}],[\"区分\",{\"1\":{\"1404\":1}}],[\"区分度越高\",{\"1\":{\"1548\":1}}],[\"区分度指的是索引列中不同值的个数与总记录数之比\",{\"1\":{\"1548\":1}}],[\"区分度\",{\"1\":{\"708\":1}}],[\"区间是\",{\"1\":{\"998\":1}}],[\"区别\",{\"0\":{\"1408\":1,\"1541\":1},\"1\":{\"1406\":1,\"1511\":1,\"1623\":1,\"1633\":1}}],[\"区别于拦截器通过cglib动态创建代理对象\",{\"1\":{\"1378\":1}}],[\"区别于\",{\"1\":{\"855\":1}}],[\"区别处理的原因在于修改普通表回滚段中的undo页面需要记录对应的redo日志\",{\"1\":{\"751\":1}}],[\"区别在于组合指定了集合大小\",{\"1\":{\"1677\":1}}],[\"区别在于目标是达到一个可控的吞吐量\",{\"1\":{\"1525\":1}}],[\"区别在于线程的task\",{\"1\":{\"1436\":1}}],[\"区别在于\",{\"1\":{\"1041\":1,\"1488\":1}}],[\"区别在于如果失败了\",{\"1\":{\"987\":3}}],[\"区别在于行溢出时\",{\"1\":{\"687\":1}}],[\"区别在于注入了hellocontroller并解析\",{\"1\":{\"99\":1}}],[\"区的类型有四种\",{\"1\":{\"693\":1}}],[\"区是表空间的单元结构\",{\"1\":{\"693\":1}}],[\"区\",{\"0\":{\"693\":1},\"1\":{\"125\":1,\"1524\":3}}],[\"市场经济调整\",{\"1\":{\"1721\":1}}],[\"市\",{\"1\":{\"125\":1}}],[\"省略\",{\"1\":{\"1059\":3}}],[\"省略掉一些信息\",{\"1\":{\"675\":1}}],[\"省略了\",{\"1\":{\"263\":1}}],[\"省\",{\"1\":{\"125\":1}}],[\"查完日志外部调用超时\",{\"1\":{\"1781\":1}}],[\"查三次数据库\",{\"1\":{\"1367\":1}}],[\"查阅对象\",{\"1\":{\"1350\":1}}],[\"查数据库\",{\"1\":{\"1261\":1}}],[\"查表使用键长为8位的表\",{\"1\":{\"976\":1}}],[\"查表\",{\"1\":{\"976\":1}}],[\"查看电量等等\",{\"1\":{\"1828\":1}}],[\"查看pnr的一个状态\",{\"1\":{\"1738\":1}}],[\"查看硬盘使用\",{\"1\":{\"1700\":1}}],[\"查看进程\",{\"1\":{\"1699\":1}}],[\"查看进程使用的gc算法\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"查看端口占用\",{\"1\":{\"1698\":1}}],[\"查看用户所属组\",{\"1\":{\"1692\":1}}],[\"查看容器\",{\"1\":{\"1634\":1}}],[\"查看mysql相关镜像\",{\"1\":{\"1634\":1}}],[\"查看正在运行的容器\",{\"1\":{\"1634\":1}}],[\"查看docker版本\",{\"1\":{\"1634\":1}}],[\"查看网络接口\",{\"1\":{\"1700\":1}}],[\"查看网络\",{\"1\":{\"1700\":1}}],[\"查看网络状况\",{\"1\":{\"1700\":1}}],[\"查看网络配合和收发数据包的统计信息\",{\"1\":{\"1490\":1,\"1631\":1}}],[\"查看网络信息\",{\"1\":{\"1490\":1}}],[\"查看内存占用情况\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"查看堆栈信息\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"查看结果树和汇总报告\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"查看大小\",{\"1\":{\"1350\":1}}],[\"查看引用日志\",{\"1\":{\"1341\":1}}],[\"查看分支指向的特定提交\",{\"1\":{\"1341\":1}}],[\"查看标签信息\",{\"1\":{\"1329\":1}}],[\"查看远程仓库信息\",{\"1\":{\"1326\":1}}],[\"查看提交历史\",{\"1\":{\"1322\":1}}],[\"查看文件尾部内容\",{\"1\":{\"1686\":1}}],[\"查看文件信息\",{\"1\":{\"1219\":1}}],[\"查看文件内容\",{\"1\":{\"1218\":1}}],[\"查看目录内容\",{\"1\":{\"1218\":1}}],[\"查看节点数据\",{\"1\":{\"1174\":1}}],[\"查看节点结构\",{\"1\":{\"1174\":1}}],[\"查看节点\",{\"0\":{\"1174\":1}}],[\"查看状态\",{\"1\":{\"1165\":1}}],[\"查看状态变量\",{\"1\":{\"671\":1}}],[\"查看是否有\",{\"1\":{\"966\":1}}],[\"查看是否正在迁移\",{\"1\":{\"947\":1}}],[\"查看校验和对应脚本是否存在于服务器\",{\"1\":{\"966\":1}}],[\"查看订阅\",{\"0\":{\"957\":1}}],[\"查看事务隔离级别\",{\"1\":{\"737\":1}}],[\"查看事务提交方式\",{\"1\":{\"734\":1}}],[\"查看当前网络的吞吐率和\",{\"1\":{\"1490\":1,\"1631\":1}}],[\"查看当前的密码设置策略\",{\"1\":{\"1148\":1}}],[\"查看当前缓冲池状态\",{\"1\":{\"730\":1}}],[\"查看当前数据库支持的存储引擎\",{\"1\":{\"677\":1}}],[\"查看当前数据库中的加锁情况\",{\"1\":{\"552\":1}}],[\"查看与该执行计划相关的扩展信息\",{\"1\":{\"729\":1}}],[\"查看索引\",{\"1\":{\"701\":1}}],[\"查看比较规则的命令\",{\"1\":{\"674\":1}}],[\"查看支持的字符集的命令\",{\"1\":{\"674\":1}}],[\"查看系统变量\",{\"1\":{\"671\":1}}],[\"查看主从同步状态\",{\"1\":{\"649\":1}}],[\"查看二进制坐标\",{\"1\":{\"649\":1}}],[\"查看参数\",{\"1\":{\"643\":1,\"644\":1}}],[\"查看错误日志位置\",{\"1\":{\"642\":1}}],[\"查看\",{\"1\":{\"628\":1,\"636\":1,\"643\":1,\"1154\":1,\"1322\":1,\"1346\":1,\"1351\":1,\"1367\":1,\"1490\":1,\"1529\":1,\"1563\":2,\"1631\":1,\"1700\":2}}],[\"查看视图数据\",{\"1\":{\"622\":1}}],[\"查看创建视图语句\",{\"1\":{\"622\":1}}],[\"查看所有环境变量\",{\"1\":{\"1701\":1}}],[\"查看所有用户组\",{\"1\":{\"1692\":1}}],[\"查看所有用户\",{\"1\":{\"1692\":1}}],[\"查看所有容器\",{\"1\":{\"1634\":1}}],[\"查看所有已下载镜像\",{\"1\":{\"1634\":2}}],[\"查看所有视图\",{\"1\":{\"622\":1}}],[\"查看所有可用函数\",{\"1\":{\"129\":1}}],[\"查看指定query\",{\"1\":{\"612\":2}}],[\"查看每一条sql的耗时基本情况\",{\"1\":{\"612\":1}}],[\"查看日志具体信息\",{\"1\":{\"475\":1}}],[\"查看某个\",{\"1\":{\"446\":1}}],[\"查看函数使用方式\",{\"1\":{\"129\":1}}],[\"查找大于\",{\"1\":{\"1683\":1}}],[\"查找相同的\",{\"1\":{\"1658\":1}}],[\"查找算法\",{\"0\":{\"1386\":1}}],[\"查找\",{\"1\":{\"985\":1,\"1792\":1}}],[\"查找已到达的事件并调用相应的处理器\",{\"1\":{\"920\":1}}],[\"查找和更新操作上\",{\"1\":{\"883\":1}}],[\"查找或更新操作时\",{\"1\":{\"883\":1}}],[\"查找使用了索引\",{\"1\":{\"706\":2}}],[\"查找时\",{\"1\":{\"690\":1}}],[\"查找信息\",{\"1\":{\"427\":1}}],[\"查找属性\",{\"1\":{\"357\":1}}],[\"查找手机号符合\",{\"1\":{\"125\":1}}],[\"查找用户姓为\",{\"1\":{\"125\":1}}],[\"查找用户地址是\",{\"1\":{\"125\":1}}],[\"查找广东省数据\",{\"1\":{\"125\":1}}],[\"查询前生成一个\",{\"1\":{\"1557\":1}}],[\"查询前都会生成独立的\",{\"1\":{\"1557\":1}}],[\"查询速度越快\",{\"1\":{\"1548\":1}}],[\"查询条件中使用\",{\"1\":{\"1547\":1}}],[\"查询性能好\",{\"1\":{\"1546\":1}}],[\"查询顺序\",{\"1\":{\"1424\":1}}],[\"查询页面详细内容\",{\"1\":{\"1369\":1}}],[\"查询页码\",{\"1\":{\"587\":1}}],[\"查询db\",{\"1\":{\"1261\":1}}],[\"查询pubsub\",{\"1\":{\"956\":1}}],[\"查询成本\",{\"0\":{\"729\":1},\"1\":{\"718\":1}}],[\"查询是否符合where条件\",{\"1\":{\"707\":1}}],[\"查询时间复杂度\",{\"1\":{\"1500\":1}}],[\"查询时\",{\"1\":{\"707\":1,\"708\":1}}],[\"查询效率高\",{\"1\":{\"698\":1}}],[\"查询建表语句\",{\"1\":{\"677\":1}}],[\"查询test库中book表的详细情况\",{\"1\":{\"675\":1}}],[\"查询优化器假定读取索引的一个范围和读取一个页面相同\",{\"1\":{\"717\":1}}],[\"查询优化\",{\"1\":{\"672\":1,\"1566\":1}}],[\"查询结果\",{\"1\":{\"1174\":1}}],[\"查询结果中\",{\"1\":{\"643\":1}}],[\"查询结果为空\",{\"1\":{\"34\":1}}],[\"查询语句\",{\"1\":{\"634\":1,\"1226\":1}}],[\"查询某个存储过程的定义\",{\"1\":{\"628\":1}}],[\"查询指定数据库的存储过程及状态信息\",{\"1\":{\"628\":1}}],[\"查询指定表的建表语句\",{\"1\":{\"575\":1}}],[\"查询排序的代价非常大\",{\"1\":{\"618\":1}}],[\"查询入职日期是2006\",{\"1\":{\"611\":1}}],[\"查询与xxx1\",{\"1\":{\"611\":1}}],[\"查询与xxx的薪资及直属领导相同的员工信息\",{\"1\":{\"610\":1}}],[\"查询比如\",{\"1\":{\"1547\":1}}],[\"查询比研发部任意一人工资高的员工信息\",{\"1\":{\"609\":1}}],[\"查询比财务部所有人工资都高的员工信息\",{\"1\":{\"609\":1}}],[\"查询销售部所有员工\",{\"1\":{\"608\":1}}],[\"查询员工信息\",{\"1\":{\"608\":1}}],[\"查询员工及其所属领导的名字\",{\"1\":{\"605\":1}}],[\"查询员工姓名\",{\"1\":{\"603\":1}}],[\"查询右表所有数据\",{\"1\":{\"604\":1}}],[\"查询左表所有数据\",{\"1\":{\"604\":1}}],[\"查询权限\",{\"1\":{\"591\":1}}],[\"查询数据等技术的实现方式\",{\"1\":{\"677\":1}}],[\"查询数据\",{\"1\":{\"591\":1}}],[\"查询用户\",{\"1\":{\"590\":1}}],[\"查询第二页\",{\"1\":{\"587\":1}}],[\"查询第一页数据\",{\"1\":{\"587\":1}}],[\"查询记录数\",{\"1\":{\"587\":1}}],[\"查询其他字段无任何意义\",{\"1\":{\"585\":1}}],[\"查询的字段一般为聚合函数和分组字段\",{\"1\":{\"585\":1}}],[\"查询的时候\",{\"1\":{\"35\":1}}],[\"查询多个字段\",{\"1\":{\"582\":1}}],[\"查询当前\",{\"1\":{\"1369\":1}}],[\"查询当前后台线程的状态\",{\"1\":{\"640\":1}}],[\"查询当前数据库所有表\",{\"1\":{\"575\":1}}],[\"查询当前数据库\",{\"1\":{\"574\":1}}],[\"查询当前use的数据库\",{\"1\":{\"110\":1}}],[\"查询所有数据库\",{\"1\":{\"574\":1}}],[\"查询缓存\",{\"1\":{\"570\":1,\"672\":1}}],[\"查询缓存不存在后\",{\"1\":{\"544\":1}}],[\"查询日志默认未开启\",{\"1\":{\"644\":1}}],[\"查询日志中记录了客户端的所有操作语句\",{\"1\":{\"644\":1}}],[\"查询日志\",{\"0\":{\"644\":1},\"1\":{\"570\":1}}],[\"查询线上日志很恐怖\",{\"1\":{\"441\":1}}],[\"查询array内是否包含指定元素\",{\"1\":{\"129\":1}}],[\"查询表结构\",{\"1\":{\"575\":1}}],[\"查询表有多少条数据\",{\"1\":{\"124\":1}}],[\"查询表达式\",{\"1\":{\"105\":1}}],[\"查询单列信息\",{\"1\":{\"124\":1}}],[\"查询全表数据\",{\"1\":{\"124\":1}}],[\"查询等等\",{\"1\":{\"81\":1}}],[\"查询该索引库下的全部文档\",{\"1\":{\"48\":1}}],[\"查询\",{\"0\":{\"43\":1,\"48\":1,\"123\":1},\"1\":{\"717\":1,\"1263\":1,\"1367\":1,\"1394\":1,\"1556\":2,\"1737\":1}}],[\"查询返回的结果数\",{\"1\":{\"34\":1}}],[\"查询过程会顺着版本链遍历\",{\"1\":{\"754\":1,\"1557\":1}}],[\"查询过程\",{\"1\":{\"34\":1}}],[\"统一于吐蕃王朝\",{\"1\":{\"1837\":1}}],[\"统一掌握\",{\"1\":{\"1751\":1}}],[\"统一的项目结构\",{\"1\":{\"1632\":1}}],[\"统一开发结构\",{\"1\":{\"1632\":1}}],[\"统一和正数的加减法操作十进制转二进制\",{\"1\":{\"1438\":1}}],[\"统一收集各个节点的日志保存到\",{\"1\":{\"1222\":1}}],[\"统一集群管理\",{\"1\":{\"1162\":1}}],[\"统一配置管理\",{\"1\":{\"1162\":1}}],[\"统一了数据交互格式\",{\"1\":{\"404\":1}}],[\"统一\",{\"1\":{\"379\":1,\"460\":1}}],[\"统一回收被标记的对象\",{\"1\":{\"168\":1}}],[\"统一存储session\",{\"1\":{\"22\":1}}],[\"统一存储\",{\"0\":{\"22\":1},\"1\":{\"27\":1,\"1643\":1}}],[\"统计相关方法\",{\"1\":{\"1861\":1}}],[\"统计1的个数\",{\"1\":{\"1666\":1}}],[\"统计频度\",{\"1\":{\"1658\":1}}],[\"统计结果逆序\",{\"1\":{\"1631\":1}}],[\"统计行数\",{\"1\":{\"1631\":1}}],[\"统计网络接口流量状态\",{\"1\":{\"1631\":1}}],[\"统计\",{\"1\":{\"1099\":1,\"1631\":1}}],[\"统计给定二进制位数组中\",{\"1\":{\"976\":1}}],[\"统计自己得票数\",{\"1\":{\"948\":1}}],[\"统计数据实际存放在两张表中\",{\"1\":{\"720\":1}}],[\"统计数据\",{\"0\":{\"719\":1}}],[\"统计数量\",{\"1\":{\"584\":1}}],[\"统计男性和女性数量\",{\"1\":{\"585\":1}}],[\"统计符合条件的总记录数\",{\"1\":{\"584\":1}}],[\"统计的是绝对次数\",{\"1\":{\"268\":1}}],[\"统计方法的执行次数\",{\"1\":{\"268\":1}}],[\"统计每个用户的平均订单消费额\",{\"1\":{\"124\":2}}],[\"统计每个用户最高的一笔消费金额\",{\"1\":{\"124\":1}}],[\"统计未支付\",{\"1\":{\"124\":1}}],[\"找实习\",{\"1\":{\"1815\":1}}],[\"找资源等等\",{\"1\":{\"1809\":1}}],[\"找bug也找了老半天\",{\"1\":{\"1778\":1}}],[\"找房子\",{\"1\":{\"1776\":1}}],[\"找对指定位置\",{\"1\":{\"1497\":1}}],[\"找出数组中唯一成单的数字\",{\"1\":{\"1661\":1}}],[\"找出每个小文件不重复的整数\",{\"1\":{\"1658\":1}}],[\"找出其中相同的\",{\"1\":{\"1658\":1}}],[\"找出所需的提交\",{\"1\":{\"1346\":1}}],[\"找出所有可能使用的索引\",{\"1\":{\"717\":1}}],[\"找出成本最低的那一个\",{\"1\":{\"717\":1}}],[\"找出性能问题并进行优化\",{\"1\":{\"236\":1}}],[\"找出用户username\",{\"1\":{\"124\":1}}],[\"找出广东省单笔营业额最大的订单\",{\"1\":{\"124\":1}}],[\"找到两个分支最近的共同祖先\",{\"1\":{\"1633\":1}}],[\"找到两个不同数据的\",{\"1\":{\"14\":1}}],[\"找到的\",{\"1\":{\"1605\":1}}],[\"找到需要的提交记录\",{\"1\":{\"1346\":1}}],[\"找到一条完整消息\",{\"1\":{\"788\":1}}],[\"找到段对应inode\",{\"1\":{\"749\":1}}],[\"找到对应分区的路径记录进行修改\",{\"1\":{\"118\":1}}],[\"找到location列\",{\"1\":{\"118\":1}}],[\"找到sds表\",{\"1\":{\"118\":1}}],[\"总感觉下到自己硬盘的资源才是自己的\",{\"1\":{\"1810\":1}}],[\"总金额\",{\"1\":{\"1655\":1}}],[\"总重量\",{\"1\":{\"1655\":1}}],[\"总线嗅探\",{\"1\":{\"1435\":1}}],[\"总线分\",{\"1\":{\"1432\":1}}],[\"总节点数在$2\",{\"1\":{\"1387\":1}}],[\"总是读取数据的最新版本\",{\"1\":{\"1557\":1}}],[\"总是指向该分支上的最后一次提交\",{\"1\":{\"1344\":1}}],[\"总是创建新事务\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"总体阶段如下\",{\"1\":{\"1234\":1}}],[\"总体规划\",{\"0\":{\"1234\":1}}],[\"总体上分\",{\"1\":{\"1129\":1}}],[\"总结对比\",{\"0\":{\"1811\":1}}],[\"总结下来\",{\"1\":{\"1212\":1}}],[\"总结\",{\"0\":{\"1060\":1},\"1\":{\"1613\":1}}],[\"总结innodb和myisam的区别\",{\"1\":{\"681\":1}}],[\"总结一下\",{\"1\":{\"366\":1}}],[\"总共占1个字节\",{\"1\":{\"474\":1}}],[\"总的来说\",{\"1\":{\"242\":1}}],[\"总而言之\",{\"1\":{\"134\":1,\"625\":1}}],[\"总支付金额\",{\"1\":{\"124\":1}}],[\"总和\",{\"1\":{\"19\":1}}],[\"未执行\",{\"1\":{\"1374\":1}}],[\"未提交\",{\"1\":{\"1333\":1}}],[\"未跟踪\",{\"1\":{\"1326\":1}}],[\"未捕获异常处理器接口\",{\"1\":{\"1096\":1}}],[\"未捕获异常的处理器\",{\"1\":{\"1087\":1}}],[\"未通过时除auth命令外都会被拒绝执行\",{\"1\":{\"923\":1}}],[\"未指明返回值的写方法\",{\"1\":{\"828\":1}}],[\"未被使用\",{\"1\":{\"638\":1}}],[\"未开启幂等性\",{\"1\":{\"462\":1}}],[\"未支付\",{\"1\":{\"124\":1,\"1289\":1,\"1371\":1}}],[\"未知\",{\"1\":{\"124\":1}}],[\"未付款的订单\",{\"1\":{\"124\":1}}],[\"支撑了程序执行效率的不断提升\",{\"1\":{\"255\":1}}],[\"支付成功后订单进入出库状态\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"支付时间\",{\"1\":{\"124\":1}}],[\"支付宝\",{\"1\":{\"124\":1}}],[\"支付方式\",{\"1\":{\"124\":1}}],[\"支持交通联合好评\",{\"1\":{\"1834\":1}}],[\"支持的视频格式更多\",{\"1\":{\"1808\":1}}],[\"支持的密码套件\",{\"1\":{\"1402\":1}}],[\"支持穆罕默德的堂弟\",{\"1\":{\"1765\":1}}],[\"支持通配符\",{\"1\":{\"1683\":1}}],[\"支持复杂的关系查询和聚合操作\",{\"1\":{\"1543\":1}}],[\"支持复杂的数据处理需求\",{\"1\":{\"825\":1}}],[\"支持动态添加字段和修改结构\",{\"1\":{\"1543\":1}}],[\"支持动态变量\",{\"1\":{\"531\":1}}],[\"支持优先级\",{\"1\":{\"1499\":1}}],[\"支持元素自动排序\",{\"1\":{\"1496\":1}}],[\"支持顺序读写和随机读写\",{\"1\":{\"1476\":1}}],[\"支持跨网络通信\",{\"1\":{\"1461\":1}}],[\"支持跨平台\",{\"1\":{\"404\":1,\"1625\":1}}],[\"支持进程同步和互斥\",{\"1\":{\"1460\":1}}],[\"支持双向通信\",{\"1\":{\"1457\":1}}],[\"支持连接迁移\",{\"1\":{\"1404\":1}}],[\"支持乱序确认而不影响数据包的正确组装\",{\"1\":{\"1404\":1}}],[\"支持管道化传输\",{\"1\":{\"1404\":1}}],[\"支持前向保密\",{\"1\":{\"1402\":1}}],[\"支持子模块功能\",{\"1\":{\"1347\":1}}],[\"支持在特定的重要动作发生时触发自定义脚本\",{\"1\":{\"1345\":1}}],[\"支持简写\",{\"1\":{\"1341\":1}}],[\"支持很多种格式化工具\",{\"1\":{\"1322\":1}}],[\"支持服务器主动推送\",{\"1\":{\"1404\":1}}],[\"支持服务器水平扩展\",{\"1\":{\"21\":1}}],[\"支持服务注册与发现\",{\"1\":{\"1302\":1}}],[\"支持正则\",{\"1\":{\"1226\":1}}],[\"支持最好的客户端框架\",{\"1\":{\"1178\":1}}],[\"支持特定\",{\"1\":{\"1018\":1}}],[\"支持零拷贝技术\",{\"1\":{\"825\":1}}],[\"支持范围匹配及排序操作\",{\"1\":{\"698\":1}}],[\"支持外键\",{\"1\":{\"681\":1,\"1541\":1}}],[\"支持外键约束\",{\"1\":{\"678\":1}}],[\"支持表锁\",{\"1\":{\"679\":1}}],[\"支持行级锁和表级锁\",{\"1\":{\"1541\":1}}],[\"支持行级锁\",{\"1\":{\"549\":1}}],[\"支持存储过程\",{\"1\":{\"530\":1}}],[\"支持三种\",{\"1\":{\"530\":1}}],[\"支持三种消息发布方式\",{\"1\":{\"407\":1}}],[\"支持两种事务管理器\",{\"1\":{\"525\":1}}],[\"支持创建多个运行环境\",{\"1\":{\"524\":1}}],[\"支持事务和\",{\"1\":{\"1541\":1}}],[\"支持事务\",{\"1\":{\"508\":1,\"678\":1}}],[\"支持事务消息\",{\"1\":{\"428\":1}}],[\"支持数据堆积\",{\"1\":{\"435\":1}}],[\"支持数据批量发送和拉取\",{\"1\":{\"431\":1}}],[\"支持java\",{\"1\":{\"434\":1}}],[\"支持同步和异步复制两种高可用机制\",{\"1\":{\"431\":1}}],[\"支持重新消费已经被消费成功的消息\",{\"1\":{\"428\":1}}],[\"支持按时间顺序消费\",{\"1\":{\"428\":1}}],[\"支持可以横向扩展\",{\"1\":{\"427\":1}}],[\"支持自动扩容\",{\"1\":{\"825\":1}}],[\"支持自动查找对象的属性做映射\",{\"1\":{\"530\":1}}],[\"支持自动生成主键\",{\"1\":{\"519\":1}}],[\"支持自动装载\",{\"1\":{\"72\":1}}],[\"支持自定义exchange\",{\"1\":{\"412\":1}}],[\"支持多粒度锁\",{\"1\":{\"1558\":1}}],[\"支持多对多通信\",{\"1\":{\"1458\":1}}],[\"支持多态\",{\"1\":{\"880\":1}}],[\"支持多字段分组\",{\"1\":{\"585\":1}}],[\"支持多种缓存的实现方式\",{\"1\":{\"1613\":1}}],[\"支持多种存储引擎\",{\"1\":{\"1540\":1}}],[\"支持多种本地缓存的实现方式\",{\"1\":{\"1269\":1}}],[\"支持多种消息队列协议\",{\"1\":{\"412\":1}}],[\"支持多种语言的客户端和协议\",{\"1\":{\"432\":1}}],[\"支持多种语言\",{\"1\":{\"410\":1,\"653\":1}}],[\"支持多种输出源\",{\"1\":{\"388\":1}}],[\"支持多条件变量\",{\"1\":{\"156\":1}}],[\"支持运行时动态加载日志组件的实现\",{\"1\":{\"376\":1}}],[\"支持任意接口类型做代理\",{\"1\":{\"349\":1}}],[\"支持链式编程\",{\"1\":{\"312\":1}}],[\"支持返回值\",{\"1\":{\"163\":1}}],[\"支持回调处理执行结果\",{\"1\":{\"163\":1}}],[\"支持超时设置\",{\"1\":{\"156\":1}}],[\"支持超时时间\",{\"1\":{\"156\":1}}],[\"支持公平\",{\"1\":{\"156\":1}}],[\"支持懒加载的集合视图操作\",{\"1\":{\"71\":1}}],[\"支持支持双向的映射关系\",{\"1\":{\"68\":1}}],[\"支持将\",{\"1\":{\"67\":1}}],[\"支持es\",{\"1\":{\"38\":1}}],[\"支持向后兼容\",{\"1\":{\"38\":2}}],[\"支持\",{\"1\":{\"24\":1,\"382\":1,\"435\":13,\"681\":8,\"697\":6,\"1087\":1,\"1223\":1,\"1541\":1,\"1799\":1}}],[\"支持水平扩展\",{\"1\":{\"22\":1}}],[\"支持负载均衡\",{\"1\":{\"21\":1}}],[\"固定gop长度为48帧\",{\"1\":{\"1868\":1}}],[\"固定速率流出\",{\"1\":{\"1637\":1}}],[\"固定窗口计数器\",{\"1\":{\"1637\":1}}],[\"固定线程数量的线程池\",{\"1\":{\"1110\":1}}],[\"固定大小的输出缓冲区和已使用大小\",{\"1\":{\"923\":1}}],[\"固定消息长度\",{\"1\":{\"842\":1}}],[\"固定的5个字节组成\",{\"1\":{\"684\":1}}],[\"固定长度的消息\",{\"1\":{\"1417\":1}}],[\"固定长度消息\",{\"1\":{\"788\":1}}],[\"固定长度二进制字符串\",{\"1\":{\"664\":1}}],[\"固定长度字符串\",{\"1\":{\"112\":1,\"663\":1}}],[\"固定分片hash算法\",{\"1\":{\"656\":1}}],[\"固定\",{\"1\":{\"122\":1}}],[\"序号从0开始\",{\"1\":{\"122\":1}}],[\"序列号是对方期望的两个条件\",{\"1\":{\"1420\":1}}],[\"序列号和确认号\",{\"0\":{\"1418\":1}}],[\"序列号+1\",{\"1\":{\"1409\":1}}],[\"序列号\",{\"1\":{\"849\":1,\"1418\":3,\"1420\":1}}],[\"序列化方式\",{\"1\":{\"849\":1}}],[\"序列化算法\",{\"1\":{\"848\":1}}],[\"序列化\",{\"0\":{\"321\":1},\"1\":{\"101\":2,\"1623\":2}}],[\"序列化类型\",{\"1\":{\"95\":1}}],[\"序列化器等省略\",{\"1\":{\"461\":1}}],[\"序列化器\",{\"1\":{\"25\":1,\"91\":1,\"450\":1}}],[\"序列\",{\"1\":{\"25\":1}}],[\"示例\",{\"1\":{\"122\":1,\"233\":1,\"598\":1,\"599\":2,\"631\":1,\"634\":1,\"636\":1,\"675\":6,\"701\":1,\"1862\":1}}],[\"设在局域网内的仓库服务\",{\"1\":{\"1632\":1}}],[\"设备里都有自己的\",{\"1\":{\"1486\":1}}],[\"设备和内存的数据传输的时候\",{\"1\":{\"1486\":1}}],[\"设备层\",{\"1\":{\"1484\":1}}],[\"设备驱动程序\",{\"0\":{\"1482\":1},\"1\":{\"1482\":1}}],[\"设备控制器的中间层接口\",{\"1\":{\"1482\":1}}],[\"设备控制器属于硬件\",{\"1\":{\"1482\":1}}],[\"设备控制器和驱动程序\",{\"1\":{\"1484\":1}}],[\"设备控制器和\",{\"1\":{\"1481\":1}}],[\"设备控制器\",{\"0\":{\"1481\":1}}],[\"设备分两大类\",{\"1\":{\"1480\":1}}],[\"设备管理\",{\"0\":{\"1480\":1}}],[\"设备出厂就固定写死了\",{\"1\":{\"1423\":1}}],[\"设备\",{\"1\":{\"1104\":1}}],[\"设为该线程唯一的\",{\"1\":{\"1582\":1}}],[\"设为该线程唯一的特殊值\",{\"1\":{\"1263\":1}}],[\"设为当前\",{\"1\":{\"1413\":1}}],[\"设为\",{\"1\":{\"424\":1,\"1051\":1,\"1556\":1}}],[\"设定一个定时器\",{\"1\":{\"1411\":1}}],[\"设定了统一的管理单元\",{\"1\":{\"1219\":1}}],[\"设定阻塞的最长绝对时间\",{\"1\":{\"363\":1}}],[\"设定阻塞的最长等待时间\",{\"1\":{\"363\":1}}],[\"设定3个桶\",{\"1\":{\"119\":1}}],[\"设计思路\",{\"0\":{\"1268\":1,\"1586\":1}}],[\"设计用于存储大规模数据集\",{\"1\":{\"1214\":1}}],[\"设计上倾向于先初始化所有普通\",{\"1\":{\"1028\":1}}],[\"设计考量\",{\"1\":{\"946\":1}}],[\"设计原则\",{\"0\":{\"708\":1}}],[\"设计的简单文本协议\",{\"1\":{\"408\":1}}],[\"设计模式\",{\"0\":{\"358\":1,\"372\":1,\"1644\":1}}],[\"设计步骤\",{\"1\":{\"290\":2}}],[\"设计出了不同的垃圾收集器\",{\"1\":{\"172\":1}}],[\"设置从\",{\"1\":{\"1792\":1}}],[\"设置从节点\",{\"1\":{\"948\":1}}],[\"设置容器自启动\",{\"1\":{\"1634\":1}}],[\"设置主库的\",{\"1\":{\"1563\":1}}],[\"设置对象头\",{\"1\":{\"1521\":1}}],[\"设置一个较大的线程数量\",{\"1\":{\"1511\":1}}],[\"设置一个较小的线程数量\",{\"1\":{\"1511\":1}}],[\"设置展示信息详略\",{\"1\":{\"1322\":1}}],[\"设置分布式锁以及过期时间\",{\"1\":{\"1263\":1}}],[\"设置不同的失效时间\",{\"1\":{\"1258\":1,\"1581\":1}}],[\"设置热点数据永不过期\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"设置权限\",{\"0\":{\"1177\":1}}],[\"设置监视器\",{\"1\":{\"1174\":2}}],[\"设置同步的数据库\",{\"1\":{\"1154\":1}}],[\"设置指定偏移的对象\",{\"1\":{\"1140\":1}}],[\"设置当前所在线程的阻塞对象\",{\"1\":{\"1095\":1}}],[\"设置当前对象为阻塞资源\",{\"1\":{\"8\":1}}],[\"设置线程id\",{\"1\":{\"1088\":1}}],[\"设置进程信号处理器\",{\"1\":{\"929\":1}}],[\"设置服务器运行id\",{\"1\":{\"929\":1}}],[\"设置为ht\",{\"1\":{\"883\":1}}],[\"设置太大\",{\"1\":{\"839\":1}}],[\"设置失败结果\",{\"1\":{\"822\":1}}],[\"设置成功结果\",{\"1\":{\"822\":1}}],[\"设置事务隔离级别\",{\"1\":{\"737\":1}}],[\"设置事务提交方式\",{\"1\":{\"734\":1}}],[\"设置事务id\",{\"1\":{\"461\":1}}],[\"设置系统变量\",{\"1\":{\"671\":1}}],[\"设置全局参数local\",{\"1\":{\"614\":1}}],[\"设置超时时间为2秒\",{\"1\":{\"612\":1}}],[\"设置别名\",{\"1\":{\"582\":1}}],[\"设置acks\",{\"1\":{\"460\":1}}],[\"设置阻塞对象\",{\"1\":{\"363\":1}}],[\"设置访问检查\",{\"1\":{\"309\":1}}],[\"设置或获取类的静态变量\",{\"1\":{\"247\":1}}],[\"设置安全测试等\",{\"1\":{\"228\":1}}],[\"设置循环引用\",{\"1\":{\"196\":1}}],[\"设置\",{\"1\":{\"161\":1,\"310\":1,\"366\":1,\"777\":1,\"1116\":1,\"1436\":1,\"1791\":1}}],[\"设置种子后每次运行结果一致的\",{\"1\":{\"129\":1}}],[\"设置随机数种子\",{\"1\":{\"129\":1}}],[\"设置小数精度4位\",{\"1\":{\"129\":1}}],[\"设置小数精度\",{\"1\":{\"129\":1}}],[\"设置自动匹配桶数量的reduces\",{\"1\":{\"119\":1}}],[\"设置元素计数\",{\"1\":{\"66\":1}}],[\"设置动态映射\",{\"1\":{\"42\":1}}],[\"设置index=true\",{\"1\":{\"34\":1}}],[\"设置docvalues=true\",{\"1\":{\"34\":1}}],[\"需求上线\",{\"1\":{\"1781\":1}}],[\"需求分析\",{\"1\":{\"1641\":1}}],[\"需求矩阵\",{\"1\":{\"1466\":1}}],[\"需调入新页面而内存已满时\",{\"1\":{\"1471\":1}}],[\"需设置\",{\"1\":{\"1229\":1}}],[\"需用mysqlbinlog查看这些文本\",{\"1\":{\"675\":1}}],[\"需用接口本身的接口名调用\",{\"1\":{\"292\":1}}],[\"需用接口实现类的对象来调用\",{\"1\":{\"292\":1}}],[\"需满足\",{\"1\":{\"462\":2}}],[\"需短暂停顿\",{\"1\":{\"179\":1}}],[\"需搭配\",{\"1\":{\"113\":1}}],[\"需要申请一级\",{\"1\":{\"1727\":1}}],[\"需要一套在线订票系统来完成机票的销售\",{\"1\":{\"1722\":1}}],[\"需要一些规则来限制\",{\"1\":{\"143\":1}}],[\"需要建立一套库存控制系统\",{\"1\":{\"1722\":1}}],[\"需要session标记并跟踪特定用户\",{\"1\":{\"1642\":1}}],[\"需要满足\",{\"1\":{\"1622\":1}}],[\"需要人工介入手动恢复\",{\"1\":{\"1588\":1}}],[\"需要提供mvvc\",{\"1\":{\"1554\":1}}],[\"需要提前分配\",{\"1\":{\"788\":1}}],[\"需要处理事务\",{\"1\":{\"1543\":1}}],[\"需要放入老年代\",{\"1\":{\"1524\":1}}],[\"需要别的线程调用同一个对象上的notify\",{\"1\":{\"1512\":1}}],[\"需要等待锁释放\",{\"1\":{\"1509\":1}}],[\"需要等到执行终止操作的时候才会进行实际的计算\",{\"1\":{\"1065\":1}}],[\"需要主进程通过\",{\"1\":{\"1487\":1}}],[\"需要链式索引块\",{\"1\":{\"1476\":1}}],[\"需要网络协议支持\",{\"1\":{\"1461\":1}}],[\"需要额外的同步机制来保证数据一致性\",{\"1\":{\"1459\":1}}],[\"需要额外的编程工作来管理消息队列\",{\"1\":{\"1458\":1}}],[\"需要额外的用户态到内核态切换的开销\",{\"1\":{\"1074\":1}}],[\"需要显式创建和命名\",{\"1\":{\"1457\":1}}],[\"需要四级目录\",{\"1\":{\"1443\":1}}],[\"需要时取用\",{\"1\":{\"1622\":1}}],[\"需要时上锁\",{\"1\":{\"1561\":1}}],[\"需要时再从磁盘换入内存\",{\"1\":{\"1447\":1}}],[\"需要时再换入\",{\"1\":{\"1443\":1}}],[\"需要时重新载入\",{\"1\":{\"1446\":1}}],[\"需要时重新从磁盘读取\",{\"1\":{\"1446\":1}}],[\"需要时候通过\",{\"1\":{\"1378\":1}}],[\"需要至少\",{\"1\":{\"1420\":1}}],[\"需要定时发送窗口探测报文\",{\"1\":{\"1412\":1}}],[\"需要定义map<key1\",{\"1\":{\"69\":1}}],[\"需要手动封装数据\",{\"1\":{\"1564\":1}}],[\"需要手动设置\",{\"1\":{\"1405\":1}}],[\"需要手动处理\",{\"1\":{\"365\":1}}],[\"需要将内存数据换出到磁盘\",{\"1\":{\"1447\":1}}],[\"需要将它合并入主分支\",{\"1\":{\"1335\":1}}],[\"需要将该服务所使用的\",{\"1\":{\"1233\":1}}],[\"需要牢记\",{\"1\":{\"1331\":1}}],[\"需要当前暂存区和工作目录一致\",{\"1\":{\"1319\":1}}],[\"需要很多定制化的实现\",{\"1\":{\"1303\":1}}],[\"需要支持https协议的场景\",{\"1\":{\"1297\":1}}],[\"需要支持大规模并发连接和流量转发的场景\",{\"1\":{\"1296\":1}}],[\"需要基于url\",{\"1\":{\"1297\":1}}],[\"需要高性能和低资源消耗的tcp\",{\"1\":{\"1296\":1}}],[\"需要缓存的方法上添加相应的注解\",{\"1\":{\"1269\":1}}],[\"需要把\",{\"1\":{\"1263\":1}}],[\"需要把数据一行一行地从引擎里面读出来\",{\"1\":{\"619\":1}}],[\"需要针对每个节点单独配置\",{\"1\":{\"1218\":1}}],[\"需要实时或近实时地进行处理和分析\",{\"1\":{\"1212\":1}}],[\"需要以一主多从的形式进行集群部署\",{\"1\":{\"1200\":1}}],[\"需要仔细考虑内存管理和释放的责任\",{\"1\":{\"1136\":1}}],[\"需要退出\",{\"1\":{\"1115\":1}}],[\"需要根据\",{\"1\":{\"1363\":1}}],[\"需要根据应用的具体情况\",{\"1\":{\"1107\":1}}],[\"需要根据具体的网络环境和应用需求来进行调优\",{\"1\":{\"859\":1}}],[\"需要知道每个线程的栈帧里都会包含一个\",{\"1\":{\"1076\":1}}],[\"需要开启事务的方法上加上\",{\"1\":{\"1040\":1}}],[\"需要级联得添加若干数据\",{\"1\":{\"1031\":1}}],[\"需要借助\",{\"1\":{\"967\":1}}],[\"需要为lua环境创建一个伪客户端\",{\"1\":{\"964\":1}}],[\"需要为每个方法建立并维护计数器\",{\"1\":{\"268\":1}}],[\"需要对数据库sql的执行情况进行监控\",{\"1\":{\"1539\":1}}],[\"需要对数据库进行分库分表处理\",{\"1\":{\"651\":1}}],[\"需要对请求和响应进行更细粒度的控制\",{\"1\":{\"1297\":1}}],[\"需要对锁进行自动续期\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"需要对所有数据进行同步\",{\"1\":{\"934\":1}}],[\"需要用到\",{\"1\":{\"1594\":1}}],[\"需要用到一些估算值\",{\"1\":{\"717\":1}}],[\"需要用\",{\"1\":{\"1462\":1,\"1577\":1}}],[\"需要用bgrewriteaof命令对aof文件重写\",{\"1\":{\"917\":1}}],[\"需要分多次\",{\"1\":{\"883\":1}}],[\"需要调整哈希表的大小\",{\"1\":{\"883\":1}}],[\"需要更复杂的规则来回收内存\",{\"1\":{\"829\":1}}],[\"需要特殊的方法来回收内存\",{\"1\":{\"829\":1}}],[\"需要重新设置\",{\"1\":{\"1148\":1}}],[\"需要重新分配更大的内存来扩容\",{\"1\":{\"827\":1}}],[\"需要重用数量有限的同一类对象时\",{\"1\":{\"146\":1}}],[\"需要切换至\",{\"1\":{\"794\":1}}],[\"需要扩容\",{\"1\":{\"788\":1}}],[\"需要多线程支持\",{\"1\":{\"782\":1}}],[\"需要多次磁盘io\",{\"1\":{\"714\":1}}],[\"需要自动控制事务的不同阶段\",{\"1\":{\"1040\":1}}],[\"需要自己一个个辨别\",{\"1\":{\"1804\":1}}],[\"需要自己构建协议\",{\"1\":{\"809\":1}}],[\"需要自己解决粘包\",{\"1\":{\"768\":1}}],[\"需要自行编码配置实现\",{\"1\":{\"653\":1}}],[\"需要判断版本链中哪个版本是当前事务可见的\",{\"1\":{\"754\":1}}],[\"需要即时把已经刷写回磁盘的脏页对应的redo日志释放\",{\"1\":{\"741\":1}}],[\"需要回表的记录数通过区间最左记录和区间最右记录进行估算\",{\"1\":{\"717\":1}}],[\"需要回表查询row是否与where条件一致\",{\"1\":{\"707\":1}}],[\"需要回表查询\",{\"1\":{\"699\":1}}],[\"需要通过中断发起系统调用\",{\"1\":{\"1440\":1}}],[\"需要通过\",{\"1\":{\"639\":1}}],[\"需要通过关键字delimiter更换sql语句的结束符\",{\"1\":{\"628\":1}}],[\"需要通知b系统和c系统\",{\"1\":{\"399\":1}}],[\"需要消除无效的笛卡尔积\",{\"1\":{\"602\":1}}],[\"需要先下载再观看\",{\"1\":{\"1811\":1}}],[\"需要先开启分桶的自动优化\",{\"1\":{\"1228\":1}}],[\"需要先把数据复制到从库中\",{\"1\":{\"1154\":1}}],[\"需要先赋权\",{\"1\":{\"1151\":1}}],[\"需要先获取该表的\",{\"1\":{\"560\":2}}],[\"需要先了解\",{\"1\":{\"184\":1}}],[\"需要进行全表扫描\",{\"1\":{\"560\":1}}],[\"需要创建新的segment\",{\"1\":{\"476\":1}}],[\"需要使用\",{\"1\":{\"461\":1}}],[\"需要指定broker\",{\"1\":{\"446\":1}}],[\"需要所有\",{\"1\":{\"420\":1}}],[\"需要保存大量数据时\",{\"1\":{\"698\":1}}],[\"需要保存当前线程的状态\",{\"1\":{\"134\":1}}],[\"需要保证无重复消费\",{\"1\":{\"401\":1,\"1625\":1}}],[\"需要被适配的类\",{\"1\":{\"374\":1}}],[\"需要在400毫秒的时间内进行5亿次的运算\",{\"1\":{\"1752\":1}}],[\"需要在\",{\"1\":{\"365\":1}}],[\"需要在嵌入式系统或移动设备上运行的应用程序\",{\"1\":{\"273\":1}}],[\"需要静态部署的应用程序\",{\"1\":{\"273\":1}}],[\"需要确定静态方法或字段的具体引用\",{\"1\":{\"244\":1}}],[\"需要确定字段的具体引用\",{\"1\":{\"244\":1}}],[\"需要确定调用的具体实现\",{\"1\":{\"244\":1}}],[\"需要考虑线程安全问题\",{\"1\":{\"210\":1}}],[\"需要长时间持有对象的场景\",{\"1\":{\"191\":1}}],[\"需要注意\",{\"1\":{\"1414\":1}}],[\"需要注意的是\",{\"1\":{\"184\":1,\"792\":1,\"1044\":1,\"1077\":1}}],[\"需要注册\",{\"1\":{\"15\":1}}],[\"需要依赖其它内存区域\",{\"1\":{\"171\":1}}],[\"需要配合抢占式的调度器\",{\"1\":{\"1468\":1}}],[\"需要配合\",{\"1\":{\"139\":1,\"1222\":1}}],[\"需要\",{\"1\":{\"118\":1,\"170\":1,\"1420\":1,\"1461\":1,\"1487\":1}}],[\"需要单独部署\",{\"1\":{\"27\":1,\"1643\":1}}],[\"需要修改代码\",{\"1\":{\"22\":1}}],[\"需要清理已经取消的节点\",{\"1\":{\"6\":1}}],[\"复盘\",{\"1\":{\"1815\":1}}],[\"复习一下\",{\"1\":{\"1792\":1}}],[\"复合字段\",{\"0\":{\"1227\":1}}],[\"复杂度更高\",{\"1\":{\"1732\":1}}],[\"复杂度\",{\"1\":{\"1656\":2}}],[\"复杂度会增加\",{\"1\":{\"1028\":1}}],[\"复杂度$o\",{\"1\":{\"974\":1}}],[\"复杂度o\",{\"1\":{\"889\":1,\"975\":1}}],[\"复杂了很多\",{\"1\":{\"833\":1}}],[\"复杂类型映射的集合\",{\"1\":{\"532\":1}}],[\"复杂类型\",{\"0\":{\"122\":1},\"1\":{\"112\":1}}],[\"复用公用的数据\",{\"1\":{\"1249\":1}}],[\"复用程序可以监听套接字的ae\",{\"1\":{\"919\":1}}],[\"复用\",{\"1\":{\"627\":1}}],[\"复制自己的日志来处理日志的不一致\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"复制主库数据\",{\"1\":{\"1154\":1}}],[\"复制与故障转移\",{\"0\":{\"948\":1}}],[\"复制偏移量不一致时\",{\"1\":{\"937\":1}}],[\"复制完整逻辑\",{\"0\":{\"936\":1}}],[\"复制功能分两个操作\",{\"1\":{\"933\":1}}],[\"复制功能\",{\"1\":{\"908\":1}}],[\"复制等操作\",{\"1\":{\"834\":1}}],[\"复制数据阶段\",{\"1\":{\"794\":1}}],[\"复制算法\",{\"1\":{\"171\":1,\"173\":1,\"174\":1,\"175\":1,\"1523\":1,\"1525\":3}}],[\"复制保证了空间的连续性\",{\"1\":{\"169\":1}}],[\"复制session\",{\"1\":{\"19\":1}}],[\"复制\",{\"0\":{\"19\":1,\"169\":1,\"832\":1,\"933\":1},\"1\":{\"824\":1,\"967\":1,\"1523\":1}}],[\"变速器\",{\"1\":{\"1796\":1}}],[\"变基与合并的结果没有任何区别\",{\"1\":{\"1337\":1}}],[\"变基到\",{\"1\":{\"1337\":1}}],[\"变基操作可以将修改的补丁\",{\"1\":{\"1337\":1}}],[\"变基\",{\"0\":{\"1337\":1}}],[\"变成其它类型对象\",{\"1\":{\"814\":1}}],[\"变量控制刷盘时机\",{\"1\":{\"1556\":1}}],[\"变量和代码块\",{\"1\":{\"1534\":1}}],[\"变量是一个\",{\"1\":{\"1112\":1}}],[\"变量\",{\"0\":{\"1112\":1},\"1\":{\"634\":2,\"975\":1}}],[\"变量做标记\",{\"1\":{\"348\":1}}],[\"变量调用\",{\"1\":{\"293\":1}}],[\"变量与赋值之间的数据类型能否匹配等\",{\"1\":{\"262\":1}}],[\"变量的值\",{\"1\":{\"1518\":1}}],[\"变量的可见性\",{\"1\":{\"146\":1}}],[\"变量的读写都是最新的\",{\"1\":{\"1506\":1}}],[\"变量的读\",{\"1\":{\"145\":1}}],[\"变量进行写操作时\",{\"1\":{\"145\":1}}],[\"变量进行读操作时\",{\"1\":{\"145\":1}}],[\"变量以释放资源\",{\"1\":{\"5\":1}}],[\"变长字段长度列表\",{\"1\":{\"684\":1}}],[\"变长字符串\",{\"1\":{\"112\":1,\"663\":1}}],[\"变长\",{\"1\":{\"112\":1}}],[\"旧约\",{\"1\":{\"1758\":1}}],[\"旧的提交就像从未存在过一样\",{\"1\":{\"1323\":1}}],[\"旧的不变\",{\"1\":{\"109\":1}}],[\"旧主服务器重新上线后降级为从服务器\",{\"1\":{\"938\":1}}],[\"旧字段名\",{\"1\":{\"576\":1}}],[\"旧版复制的缺陷\",{\"1\":{\"934\":1}}],[\"旧版复制实现\",{\"0\":{\"934\":1}}],[\"旧版\",{\"1\":{\"85\":1,\"1402\":1}}],[\"继而实现\",{\"1\":{\"1621\":1}}],[\"继而查询优化器可以评估表的不同连接顺序\",{\"1\":{\"725\":1}}],[\"继续坐车1个小时到达了珠峰大本营\",{\"1\":{\"1844\":1}}],[\"继续按\",{\"1\":{\"1658\":1}}],[\"继续监听\",{\"1\":{\"1488\":1}}],[\"继续像处理未过期键一样来处理\",{\"1\":{\"908\":1}}],[\"继续接收数据\",{\"1\":{\"471\":1}}],[\"继续运行\",{\"1\":{\"366\":1,\"783\":2,\"920\":1}}],[\"继续执行当前程序\",{\"1\":{\"634\":1}}],[\"继续执行\",{\"1\":{\"101\":1}}],[\"继承父线程的私有变量\",{\"1\":{\"1088\":1}}],[\"继承的访问控制上下文\",{\"1\":{\"1087\":1}}],[\"继承thread类\",{\"0\":{\"327\":1}}],[\"继承\",{\"0\":{\"291\":1},\"1\":{\"1508\":1}}],[\"继承自\",{\"1\":{\"25\":1,\"97\":1,\"163\":1,\"196\":1,\"817\":1,\"822\":1,\"869\":1,\"1047\":1,\"1114\":1,\"1136\":1,\"1499\":1,\"1511\":1}}],[\"经幡成了连接神与人的纽带\",{\"1\":{\"1842\":1}}],[\"经幡上印有佛经\",{\"1\":{\"1842\":1}}],[\"经典访问令牌\",{\"1\":{\"1791\":1}}],[\"经典同步问题\",{\"0\":{\"1467\":1}}],[\"经停\",{\"1\":{\"1743\":1}}],[\"经济舱三种\",{\"1\":{\"1739\":1}}],[\"经济舱三大类\",{\"1\":{\"1732\":1}}],[\"经济舱\",{\"1\":{\"1735\":1}}],[\"经常下载没速度\",{\"1\":{\"1810\":1}}],[\"经常是广告满天飞\",{\"1\":{\"1804\":1}}],[\"经常被打断占用\",{\"1\":{\"1481\":1}}],[\"经常用到\",{\"1\":{\"822\":1}}],[\"经常用于网络传输\",{\"1\":{\"357\":1}}],[\"经优化后的\",{\"1\":{\"728\":1}}],[\"经过了不知多少的雪山\",{\"1\":{\"1845\":1}}],[\"经过珠峰108拐后\",{\"1\":{\"1844\":1}}],[\"经过不知道多少个山路十八弯\",{\"1\":{\"1844\":1}}],[\"经过卡若拉的生死考验\",{\"1\":{\"1843\":1}}],[\"经过一段拥堵的公路\",{\"1\":{\"1843\":1}}],[\"经过一座座大山边凿出来的盘山公路\",{\"1\":{\"1843\":1}}],[\"经过传输层\",{\"1\":{\"1395\":1}}],[\"经过设定的\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"经过各种校验后允许读取\",{\"1\":{\"1220\":1}}],[\"经过各种校验后允许写入\",{\"1\":{\"1220\":1}}],[\"经过各种分支层层调用\",{\"1\":{\"544\":1}}],[\"经过该处理器时\",{\"1\":{\"850\":1}}],[\"经过\",{\"1\":{\"814\":1,\"823\":1,\"1290\":1,\"1372\":1}}],[\"经过模块化改造后现在在jdk\",{\"1\":{\"228\":1}}],[\"经反序列化\",{\"1\":{\"484\":1}}],[\"经查证\",{\"1\":{\"383\":1}}],[\"经\",{\"1\":{\"101\":3,\"450\":1}}],[\"四月\",{\"1\":{\"1825\":1}}],[\"四次挥手关闭连接\",{\"1\":{\"1420\":1}}],[\"四次挥手\",{\"0\":{\"1410\":1},\"1\":{\"1415\":1}}],[\"四次挥手断开连接\",{\"1\":{\"1394\":1}}],[\"四次握手\",{\"1\":{\"1402\":1}}],[\"四层网关由于只处理传输层协议\",{\"1\":{\"1296\":1}}],[\"四层网关会维护客户端与服务器之间的连接\",{\"1\":{\"1296\":1}}],[\"四层网关通过监听特定的ip地址和端口号\",{\"1\":{\"1296\":1}}],[\"四层网关\",{\"0\":{\"1296\":1}}],[\"四种策略\",{\"1\":{\"414\":1}}],[\"四大特性\",{\"0\":{\"735\":1,\"1032\":1}}],[\"四大检索方案\",{\"1\":{\"357\":1}}],[\"四大金刚构成\",{\"1\":{\"31\":1}}],[\"四个特征\",{\"0\":{\"1550\":1}}],[\"四个用于控制事务作用域的方法\",{\"1\":{\"511\":1}}],[\"四个过程\",{\"1\":{\"179\":1}}],[\"四个步骤\",{\"1\":{\"176\":1,\"177\":1,\"1525\":2}}],[\"四个处理器\",{\"1\":{\"100\":1}}],[\"四舍五入\",{\"1\":{\"129\":2}}],[\"封装起来\",{\"1\":{\"1601\":1}}],[\"封装数据帧发送出去\",{\"1\":{\"1394\":1}}],[\"封装在\",{\"1\":{\"1224\":1}}],[\"封装信息\",{\"1\":{\"979\":1}}],[\"封装\",{\"1\":{\"627\":1,\"1019\":1,\"1020\":1,\"1394\":1}}],[\"封装成\",{\"1\":{\"544\":1}}],[\"封装了大部分\",{\"1\":{\"1178\":1}}],[\"封装了发生的事件类型\",{\"1\":{\"786\":1}}],[\"封装了\",{\"1\":{\"100\":1,\"540\":1,\"1059\":1}}],[\"封装到继承了\",{\"1\":{\"99\":1}}],[\"封装原生的\",{\"1\":{\"25\":1}}],[\"端午第三天\",{\"1\":{\"1776\":1}}],[\"端午小长假的第二天\",{\"1\":{\"1776\":1}}],[\"端午假期\",{\"0\":{\"1776\":1}}],[\"端通过创建实现了指定接口的client调用对应的远程方法\",{\"1\":{\"1125\":1}}],[\"端通过定义具体的远程执行逻辑\",{\"1\":{\"1125\":1}}],[\"端的http接口\",{\"1\":{\"1302\":1}}],[\"端的\",{\"1\":{\"792\":1}}],[\"端的精准一次性消费\",{\"1\":{\"499\":1}}],[\"端口不可达\",{\"1\":{\"1427\":1}}],[\"端口\",{\"0\":{\"340\":1},\"1\":{\"929\":1,\"1418\":1,\"1428\":2,\"1481\":2,\"1563\":1}}],[\"端口号\",{\"1\":{\"230\":1,\"569\":1}}],[\"端口统一是netty服务端口\",{\"1\":{\"92\":1}}],[\"端一样\",{\"1\":{\"99\":1}}],[\"交付数据时的回调\",{\"1\":{\"1858\":1}}],[\"交付网络层\",{\"1\":{\"1394\":1}}],[\"交付仓储物流\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"交互之外\",{\"1\":{\"1218\":1}}],[\"交换信息存储在\",{\"1\":{\"1454\":1}}],[\"交换回\",{\"1\":{\"1076\":1}}],[\"交换\",{\"1\":{\"1076\":1,\"1077\":2}}],[\"交换机\",{\"1\":{\"1628\":1}}],[\"交换机将收到的消息按照路由规则分发到绑定的队列\",{\"1\":{\"406\":1}}],[\"交换机类似邮局\",{\"1\":{\"406\":1}}],[\"交给单独的处理器线程\",{\"1\":{\"765\":1}}],[\"交给后台线程\",{\"1\":{\"739\":1,\"1555\":1}}],[\"交给\",{\"1\":{\"101\":1}}],[\"交由物理机负责\",{\"1\":{\"1483\":1}}],[\"交由\",{\"1\":{\"97\":1,\"1479\":1,\"1593\":1}}],[\"交集\",{\"1\":{\"81\":1}}],[\"入职前的快乐\",{\"0\":{\"1772\":1}}],[\"入职时间降序排序\",{\"1\":{\"586\":1}}],[\"入栈\",{\"1\":{\"1520\":1}}],[\"入站\",{\"1\":{\"829\":1}}],[\"入站2\",{\"1\":{\"823\":1}}],[\"入站1\",{\"1\":{\"823\":1}}],[\"入站和\",{\"1\":{\"814\":1}}],[\"入站处理器中\",{\"1\":{\"823\":1}}],[\"入站处理器通常是\",{\"1\":{\"823\":1}}],[\"入站处理\",{\"1\":{\"96\":1}}],[\"入队操作\",{\"1\":{\"189\":1}}],[\"入队后\",{\"1\":{\"189\":1}}],[\"入队后如果当前线程不是\",{\"1\":{\"6\":1}}],[\"入队\",{\"1\":{\"184\":1}}],[\"入队前\",{\"1\":{\"6\":1}}],[\"入队之后当前线程关联节点的前继\",{\"1\":{\"6\":1}}],[\"入队了\",{\"1\":{\"4\":1}}],[\"出藏时的内蒙古六人团\",{\"1\":{\"1849\":1}}],[\"出藏时的疲惫困倦\",{\"1\":{\"1849\":1}}],[\"出藏我们依然选择了火车+飞机的路线\",{\"1\":{\"1848\":1}}],[\"出藏\",{\"0\":{\"1848\":1}}],[\"出雅鲁藏布大峡谷的路上\",{\"1\":{\"1842\":1}}],[\"出了拉萨城\",{\"1\":{\"1841\":1}}],[\"出于成本考虑\",{\"1\":{\"1737\":1}}],[\"出于性能考虑\",{\"1\":{\"911\":1}}],[\"出票等\",{\"1\":{\"1722\":1}}],[\"出栈对应方法的调用和结束\",{\"1\":{\"1520\":1}}],[\"出现网络分区时仍能对外提供服务\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"出现异常回滚事务\",{\"1\":{\"461\":1}}],[\"出站消息最终都会转为\",{\"1\":{\"829\":1}}],[\"出站\",{\"1\":{\"829\":1}}],[\"出站2\",{\"1\":{\"823\":1}}],[\"出站1\",{\"1\":{\"823\":1}}],[\"出站两类\",{\"1\":{\"814\":1,\"823\":1}}],[\"出站处理器中\",{\"1\":{\"823\":2}}],[\"出站处理器通常是\",{\"1\":{\"823\":1}}],[\"出站处理\",{\"1\":{\"95\":1}}],[\"出品\",{\"1\":{\"432\":1}}],[\"出来以前\",{\"1\":{\"376\":1}}],[\"出队\",{\"1\":{\"6\":3}}],[\"替换掉\",{\"1\":{\"1716\":1}}],[\"替换过期的本地变量\",{\"1\":{\"154\":1}}],[\"替换\",{\"1\":{\"91\":1,\"537\":1}}],[\"负数补1\",{\"1\":{\"1664\":1}}],[\"负数用补码表示\",{\"1\":{\"1438\":1}}],[\"负载测试\",{\"1\":{\"1639\":1}}],[\"负载因子\",{\"1\":{\"1494\":2}}],[\"负载均衡等\",{\"1\":{\"1296\":1}}],[\"负载均衡\",{\"0\":{\"1299\":1},\"1\":{\"435\":1,\"1162\":1,\"1563\":1,\"1617\":1}}],[\"负载均衡器分为四层交换机\",{\"1\":{\"1299\":1}}],[\"负载均衡器\",{\"1\":{\"91\":1}}],[\"负责统计各服务调用次数\",{\"1\":{\"1617\":1}}],[\"负责服务地址的注册与查找\",{\"1\":{\"1617\":1}}],[\"负责最终物理设备的\",{\"1\":{\"1484\":1}}],[\"负责上半部未完成的工作\",{\"1\":{\"1437\":1}}],[\"负责耗时短的工作\",{\"1\":{\"1437\":1}}],[\"负责端到端的数据传输\",{\"1\":{\"1393\":1}}],[\"负责建立连接\",{\"1\":{\"1488\":1}}],[\"负责建立\",{\"1\":{\"1393\":1}}],[\"负责把数据转换成兼容另一个系统能识别的格式\",{\"1\":{\"1393\":1}}],[\"负责把用户传递的参数转换成\",{\"1\":{\"540\":1}}],[\"负责对api网关的负载均衡\",{\"1\":{\"1300\":1}}],[\"负责对提议者的提案进行投票\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"负责发起心跳\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"负责发布事件\",{\"1\":{\"814\":1}}],[\"负责接受客户端的请求并发起提案\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"负责接收请求\",{\"1\":{\"1605\":1}}],[\"负责接收读请求以及和\",{\"1\":{\"1200\":1}}],[\"负责接收写请求\",{\"1\":{\"1200\":1}}],[\"负责接收用户输入创建动态\",{\"1\":{\"540\":1}}],[\"负责接收和转发消息\",{\"1\":{\"413\":1}}],[\"负责接收客户端socket管道连接\",{\"1\":{\"343\":1}}],[\"负责协调调度各个程序所需的资源\",{\"1\":{\"1222\":1}}],[\"负责数据的封帧和差错检测\",{\"1\":{\"1393\":1}}],[\"负责数据的路由\",{\"1\":{\"1393\":1}}],[\"负责数据的存取\",{\"1\":{\"1216\":1}}],[\"负责数据存储\",{\"1\":{\"31\":1,\"33\":1}}],[\"负责管理整个文件系统\",{\"1\":{\"1216\":1}}],[\"负责管理集群\",{\"1\":{\"470\":1}}],[\"负责以字节流方式接收和发送消息体\",{\"1\":{\"1126\":1}}],[\"负责在物理网络中传输数据帧\",{\"1\":{\"1393\":1}}],[\"负责在\",{\"1\":{\"1019\":1}}],[\"负责从套接字中读入客户端发送的命令请求内容\",{\"1\":{\"919\":1}}],[\"负责处理事件\",{\"1\":{\"1488\":1}}],[\"负责处理连接的\",{\"1\":{\"873\":1}}],[\"负责处理其它事件\",{\"1\":{\"791\":1}}],[\"负责初始化通道的参数配置\",{\"1\":{\"864\":1}}],[\"负责所有读请求\",{\"1\":{\"658\":1}}],[\"负责写操作\",{\"1\":{\"640\":1}}],[\"负责读操作\",{\"1\":{\"640\":1}}],[\"负责调度其他线程\",{\"1\":{\"640\":1}}],[\"负责跟客户端建立连接\",{\"1\":{\"570\":1}}],[\"负责完成\",{\"1\":{\"544\":1}}],[\"负责将服务器执行命令后得到的回复通过套接字返回给客户端\",{\"1\":{\"919\":1}}],[\"负责将写缓冲区内容刷新到磁盘\",{\"1\":{\"640\":1}}],[\"负责将日志缓冲区刷新到磁盘\",{\"1\":{\"640\":1}}],[\"负责将\",{\"1\":{\"540\":1}}],[\"负责将命令从客户端应用传递给服务器\",{\"1\":{\"405\":1}}],[\"负责sql语句的生成和查询缓存的维护\",{\"1\":{\"540\":1}}],[\"负责维护\",{\"1\":{\"470\":1}}],[\"负责更新\",{\"1\":{\"470\":1}}],[\"负责同步\",{\"1\":{\"469\":1}}],[\"负责收发消息\",{\"1\":{\"469\":1}}],[\"负责监听和分发事件\",{\"1\":{\"1488\":1}}],[\"负责监听多个套接字\",{\"1\":{\"919\":1}}],[\"负责监听\",{\"1\":{\"466\":1}}],[\"负责监听服务器停机\",{\"1\":{\"25\":1}}],[\"负责消费消息\",{\"1\":{\"427\":1}}],[\"负责产生消息\",{\"1\":{\"427\":1}}],[\"负责存储消息\",{\"1\":{\"413\":1}}],[\"负责扫描主启动类包及其子包的组件并加载到\",{\"1\":{\"1598\":1}}],[\"负责扫描\",{\"1\":{\"383\":1}}],[\"负责实际处理客户端的请求\",{\"1\":{\"373\":1}}],[\"负责加载用户应用classpath下的所有jar包和类\",{\"1\":{\"1528\":1}}],[\"负责加载扩展目录下的jar包和类\",{\"1\":{\"1528\":1}}],[\"负责加载java\",{\"1\":{\"1528\":1}}],[\"负责加载应用程序的类路径\",{\"1\":{\"254\":1}}],[\"负责加载非核心模块类\",{\"1\":{\"254\":1,\"1528\":1}}],[\"负责放入\",{\"1\":{\"196\":1}}],[\"负责解析\",{\"1\":{\"99\":1,\"1059\":1,\"1060\":1}}],[\"负责解析协议定义的\",{\"1\":{\"96\":1}}],[\"负责\",{\"1\":{\"95\":1,\"545\":1,\"1540\":2}}],[\"负责预处理文档\",{\"1\":{\"33\":1}}],[\"负责轻量化整个集群范围内的操作\",{\"1\":{\"33\":1}}],[\"负责构造\",{\"1\":{\"25\":1}}],[\"z30\",{\"1\":{\"1799\":1}}],[\"z50\",{\"1\":{\"1799\":3,\"1828\":1}}],[\"zio\",{\"1\":{\"1688\":1}}],[\"ziplist编码的列表\",{\"1\":{\"913\":1}}],[\"ziplist\",{\"1\":{\"897\":2,\"898\":2,\"900\":2,\"913\":1}}],[\"zip\",{\"1\":{\"391\":1,\"731\":2,\"1688\":4}}],[\"zxvf\",{\"1\":{\"1688\":1}}],[\"zxid2\",{\"1\":{\"1174\":2}}],[\"zxid1\",{\"1\":{\"1174\":2}}],[\"zxid\",{\"1\":{\"1174\":1,\"1204\":5}}],[\"zcvf\",{\"1\":{\"1688\":1}}],[\"zuul\",{\"1\":{\"1621\":1}}],[\"zuul等\",{\"1\":{\"1298\":1}}],[\"zoneinfo\",{\"1\":{\"1697\":1}}],[\"zone\",{\"1\":{\"1446\":1}}],[\"zoo4\",{\"1\":{\"1198\":1}}],[\"zoo3\",{\"1\":{\"1198\":1}}],[\"zoo2\",{\"1\":{\"1198\":1}}],[\"zoo1\",{\"1\":{\"1198\":1}}],[\"zoo\",{\"0\":{\"1196\":1},\"1\":{\"1164\":1,\"1165\":4}}],[\"zookeeper<\",{\"1\":{\"1179\":1}}],[\"zookeeper时间配置中的基本单位\",{\"1\":{\"1164\":1}}],[\"zookeeper\",{\"0\":{\"1159\":1},\"1\":{\"427\":1,\"446\":3,\"448\":4,\"465\":1,\"808\":1,\"1161\":3,\"1162\":4,\"1164\":1,\"1170\":1,\"1174\":2,\"1178\":3,\"1179\":1,\"1187\":1,\"1194\":1,\"1196\":1,\"1197\":4,\"1200\":4,\"1207\":1,\"1262\":1,\"1406\":1},\"2\":{\"1209\":1}}],[\"z匹配任意中间目录\",{\"1\":{\"1330\":1}}],[\"zab协议\",{\"1\":{\"1200\":1}}],[\"zab\",{\"0\":{\"1200\":1},\"1\":{\"1200\":1}}],[\"znode\",{\"1\":{\"1167\":4,\"1168\":4,\"1186\":1,\"1189\":3,\"1194\":1}}],[\"zset\",{\"1\":{\"913\":1,\"1570\":2,\"1658\":1}}],[\"zskiplist\",{\"1\":{\"886\":1}}],[\"zskiplistnode\",{\"1\":{\"886\":1}}],[\"zstd\",{\"1\":{\"459\":1}}],[\"zhangferry\",{\"1\":{\"1793\":1}}],[\"zhangsan\",{\"1\":{\"846\":3,\"850\":1}}],[\"zhserver\",{\"1\":{\"1198\":4}}],[\"zhihu\",{\"1\":{\"546\":1}}],[\"zhuanlan\",{\"1\":{\"546\":1}}],[\"zh\",{\"1\":{\"546\":1}}],[\"zero\",{\"1\":{\"431\":1,\"1486\":1}}],[\"z\",{\"1\":{\"179\":1,\"1330\":3,\"1688\":1,\"1735\":1,\"1736\":1,\"1799\":1,\"1828\":1}}],[\"zgc收集器\",{\"1\":{\"179\":1}}],[\"zgc\",{\"0\":{\"179\":1},\"1\":{\"172\":1,\"179\":2}}],[\"zk数据读写\",{\"1\":{\"1205\":1}}],[\"zk选举案例\",{\"1\":{\"1203\":1}}],[\"zk4\",{\"1\":{\"1197\":1}}],[\"zk3\",{\"1\":{\"1197\":1}}],[\"zk2\",{\"1\":{\"1197\":1}}],[\"zk1\",{\"1\":{\"1196\":1,\"1197\":1}}],[\"zk集群角色\",{\"1\":{\"1194\":1}}],[\"zk加写锁\",{\"1\":{\"1185\":1}}],[\"zk加读锁\",{\"1\":{\"1184\":1}}],[\"zkcli\",{\"0\":{\"1172\":1,\"1191\":1},\"1\":{\"1199\":1}}],[\"zkserver\",{\"1\":{\"446\":1,\"1165\":4}}],[\"zkservicediscovery\",{\"1\":{\"91\":1}}],[\"zkserviceregistry\",{\"1\":{\"91\":1,\"92\":1}}],[\"zk\",{\"0\":{\"465\":1,\"1198\":1,\"1199\":1},\"1\":{\"91\":1,\"92\":2,\"101\":1,\"446\":1,\"465\":1,\"466\":4,\"470\":1,\"490\":1,\"1167\":1,\"1168\":1,\"1169\":1,\"1170\":4,\"1183\":1,\"1184\":1,\"1186\":1,\"1189\":1,\"1200\":1,\"1202\":3}}],[\"zy\",{\"1\":{\"47\":1}}],[\"目的就是尽早在尽量小的范围内暴露错误\",{\"1\":{\"1705\":1}}],[\"目的主要是为了测试系统的性能是否满足要求\",{\"1\":{\"1639\":1}}],[\"目的ip\",{\"1\":{\"1409\":1}}],[\"目的\",{\"1\":{\"1396\":1,\"1418\":1,\"1525\":1,\"1862\":1}}],[\"目的端口\",{\"1\":{\"1396\":1,\"1409\":1}}],[\"目的地上客权\",{\"0\":{\"1745\":1}}],[\"目的地下客权\",{\"0\":{\"1744\":1}}],[\"目的地城市机场组成\",{\"1\":{\"1730\":1}}],[\"目的地址\",{\"1\":{\"1396\":1}}],[\"目的地搜索优化\",{\"0\":{\"1355\":1}}],[\"目的是加载applicationcontext\",{\"1\":{\"1718\":1}}],[\"目的是在无竞争的情况下\",{\"1\":{\"1515\":1}}],[\"目的是希望程序员能像调用本地方法那样去调用远端的服务方法\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"目的是减少通过\",{\"1\":{\"1222\":1}}],[\"目的是提高资源的利用率\",{\"1\":{\"1222\":1}}],[\"目的是避免内存浪费\",{\"1\":{\"828\":1}}],[\"目的是为了保证数据库中的数据的正确性\",{\"1\":{\"598\":1}}],[\"目的是double\",{\"1\":{\"351\":1}}],[\"目录项缓存\",{\"1\":{\"1484\":1}}],[\"目录项既可以表示文件\",{\"1\":{\"1474\":1}}],[\"目录项记录着文件名\",{\"1\":{\"1474\":1}}],[\"目录项记录只存储主键值和对应的页号\",{\"1\":{\"698\":1}}],[\"目录项\",{\"1\":{\"1474\":1}}],[\"目录结构\",{\"0\":{\"1349\":1}}],[\"目录\",{\"1\":{\"1310\":2,\"1473\":1,\"1474\":1,\"1692\":2}}],[\"目录包括\",{\"1\":{\"1217\":1}}],[\"目录相关的api\",{\"1\":{\"779\":1}}],[\"目录下的文件都会被尝试解析为工作流\",{\"1\":{\"1791\":1}}],[\"目录下的\",{\"1\":{\"1598\":1}}],[\"目录下返回\",{\"1\":{\"1366\":1}}],[\"目录下\",{\"1\":{\"254\":1}}],[\"目录下读取配置\",{\"1\":{\"91\":1}}],[\"目标分辨率级别\",{\"1\":{\"1868\":1}}],[\"目标编码格式\",{\"1\":{\"1868\":1}}],[\"目标文件是同一个\",{\"1\":{\"1696\":1}}],[\"目标服务器繁忙程度修改\",{\"1\":{\"1415\":1}}],[\"目标\",{\"1\":{\"1394\":1,\"1396\":1}}],[\"目标是两份文件\",{\"1\":{\"1696\":1}}],[\"目标是将那些复杂且容易出错的分布式一致性服务封装起来\",{\"1\":{\"1161\":1}}],[\"目标是尽可能以最快速度传递消息\",{\"1\":{\"480\":1}}],[\"目标cpu的使用率\",{\"1\":{\"1119\":1}}],[\"目标节点查询importing\",{\"1\":{\"947\":1}}],[\"目标sentinel接收到sentinel\",{\"1\":{\"942\":1}}],[\"目标sentinel收到源sentinel的询问命令后\",{\"1\":{\"941\":1}}],[\"目标接口\",{\"1\":{\"374\":1}}],[\"目标代码生成阶段都要使用\",{\"1\":{\"259\":1}}],[\"目前转战到咖啡pt\",{\"1\":{\"1811\":1}}],[\"目前综合各方面最好用的应该还是阿里云盘\",{\"1\":{\"1806\":1}}],[\"目前主要分布在中东地区的黎巴嫩\",{\"1\":{\"1767\":1}}],[\"目前是只有servercron一个时间函数\",{\"1\":{\"1572\":1}}],[\"目前在商业数据库支持的比较理想\",{\"1\":{\"1283\":1}}],[\"目前全球范围内最火热的分布式内存计算引擎\",{\"1\":{\"1213\":1}}],[\"目前仅使用周期性事件\",{\"1\":{\"920\":1}}],[\"目前仅支持5\",{\"1\":{\"38\":1}}],[\"目前mysql触发器只支持行级触发\",{\"1\":{\"636\":1}}],[\"目前已经捐赠给\",{\"1\":{\"426\":1}}],[\"目前\",{\"1\":{\"277\":1}}],[\"目前es官方推出了\",{\"1\":{\"38\":1}}],[\"下了小山后\",{\"1\":{\"1846\":1}}],[\"下山更是一条陡坡\",{\"1\":{\"1843\":1}}],[\"下午又去了趟亲猴台喂猴子\",{\"1\":{\"1842\":1}}],[\"下午去了藏文化博物馆\",{\"1\":{\"1833\":1}}],[\"下半年\",{\"1\":{\"1828\":1}}],[\"下半年上班劳碌\",{\"1\":{\"1827\":1}}],[\"下半年由于天天要坐半个小时的地铁上班\",{\"1\":{\"1826\":1}}],[\"下半年明显就过得乏味很多\",{\"1\":{\"1825\":1}}],[\"下半部\",{\"1\":{\"1437\":1}}],[\"下载最佳视频+音频并用ffmpeg合并\",{\"1\":{\"1877\":1}}],[\"下载dash\",{\"1\":{\"1870\":1}}],[\"下载\",{\"1\":{\"1867\":1}}],[\"下载站是能够获取最高质量影视作品的最佳方式\",{\"1\":{\"1810\":1}}],[\"下载站才是我现在最常使用的观影方式\",{\"1\":{\"1810\":1}}],[\"下载站\",{\"0\":{\"1810\":1},\"1\":{\"1811\":1}}],[\"下载文件\",{\"1\":{\"1698\":1}}],[\"下载文件到本地\",{\"1\":{\"1218\":1}}],[\"下海\",{\"1\":{\"1786\":1}}],[\"下周二就要第一次发工资了嘻嘻\",{\"1\":{\"1778\":1}}],[\"下我们一般把后端项目分为\",{\"1\":{\"1604\":1}}],[\"下抓取数据包存入\",{\"1\":{\"1396\":1}}],[\"下单\",{\"1\":{\"1722\":1}}],[\"下单等\",{\"1\":{\"1365\":1}}],[\"下单时间\",{\"1\":{\"124\":1}}],[\"下有类似的\",{\"1\":{\"1347\":1}}],[\"下连接\",{\"1\":{\"1152\":1}}],[\"下线主节点的所有从节点中选举一个新的主节点\",{\"1\":{\"948\":1}}],[\"下发生\",{\"1\":{\"785\":1}}],[\"下图就是这位大哥当晚的成果\",{\"1\":{\"1844\":1}}],[\"下图为报价搜索系统的一个流程图例\",{\"1\":{\"1752\":1}}],[\"下图表示写入了\",{\"1\":{\"768\":1}}],[\"下图是jdk8的内存分布图\",{\"1\":{\"201\":1}}],[\"下一站是卡若拉冰川\",{\"1\":{\"1843\":1}}],[\"下一站是八廓街\",{\"1\":{\"1838\":1}}],[\"下一层递归仍从i开始遍历\",{\"1\":{\"1676\":1}}],[\"下一次提交的父结点\",{\"1\":{\"1344\":1}}],[\"下一次返回的元素\",{\"1\":{\"71\":1}}],[\"下一个值如果相同则不遍历\",{\"1\":{\"1675\":1}}],[\"下一个指令\",{\"1\":{\"1471\":1}}],[\"下一个\",{\"1\":{\"818\":1}}],[\"下一个偏移量\",{\"1\":{\"476\":3}}],[\"下一组日志在页面中开始的偏移量\",{\"1\":{\"749\":1}}],[\"下数据的线程数量\",{\"1\":{\"445\":1}}],[\"下面讲\",{\"1\":{\"1791\":1}}],[\"下面三个步骤是\",{\"1\":{\"1791\":1}}],[\"下面三行代码是通常的初始化执行语句\",{\"1\":{\"541\":1}}],[\"下面谈谈\",{\"1\":{\"1344\":1}}],[\"下面看看\",{\"1\":{\"1331\":1}}],[\"下面看几个示例\",{\"1\":{\"822\":1}}],[\"下面这张图是b站up主来碗红豆泥的视频里的截图\",{\"1\":{\"1803\":1}}],[\"下面这张图是\",{\"1\":{\"1224\":1}}],[\"下面这个简单处理器仅处理\",{\"1\":{\"846\":1}}],[\"下面是通过与\",{\"1\":{\"1238\":1}}],[\"下面是一些由于安全问题\",{\"1\":{\"1098\":1}}],[\"下面是kafka在某个典型实时计算系统中的应用\",{\"1\":{\"442\":1}}],[\"下面有一层抽象类\",{\"1\":{\"1048\":1}}],[\"下面的\",{\"1\":{\"863\":1}}],[\"下面的语句会报错\",{\"1\":{\"618\":1}}],[\"下面语句不报错\",{\"1\":{\"583\":1}}],[\"下面分析一下\",{\"1\":{\"383\":1}}],[\"下列代码的运行结果是\",{\"1\":{\"301\":1}}],[\"下的快捷方式\",{\"1\":{\"1696\":1}}],[\"下的\",{\"1\":{\"1488\":1,\"1626\":1}}],[\"下的内核参数限定\",{\"1\":{\"1409\":1}}],[\"下的所有引用\",{\"1\":{\"1351\":1}}],[\"下的所有\",{\"1\":{\"1024\":1}}],[\"下的所有主题\",{\"1\":{\"446\":1}}],[\"下的类库\",{\"1\":{\"254\":1}}],[\"下的并发安全集合\",{\"1\":{\"162\":1}}],[\"下\",{\"1\":{\"91\":1,\"1000\":1}}],[\"容错的持久方式存储记录消息流\",{\"1\":{\"1626\":1}}],[\"容灾等功能\",{\"1\":{\"1563\":1}}],[\"容器内的dir\",{\"1\":{\"1634\":1}}],[\"容器内运行了哪些进程\",{\"1\":{\"1634\":1}}],[\"容器占用空间少\",{\"1\":{\"1634\":1}}],[\"容器是一个应用层抽象\",{\"1\":{\"1634\":1}}],[\"容器赋予了软件独立性\",{\"1\":{\"1634\":1}}],[\"容器化软件适用于不同os的应用\",{\"1\":{\"1634\":1}}],[\"容器镜像是轻量的\",{\"1\":{\"1634\":1}}],[\"容器可以被创建\",{\"1\":{\"1634\":1}}],[\"容器与容器之间互不影响\",{\"1\":{\"1634\":1}}],[\"容器中只有唯一实例\",{\"1\":{\"1596\":1}}],[\"容器中\",{\"1\":{\"1594\":1,\"1598\":1}}],[\"容器节点\",{\"1\":{\"1169\":1}}],[\"容器类型\",{\"1\":{\"1128\":1}}],[\"容器管理\",{\"1\":{\"1061\":1}}],[\"容器初始化\",{\"1\":{\"1060\":1}}],[\"容器注入\",{\"0\":{\"1054\":1}}],[\"容器下\",{\"1\":{\"791\":1}}],[\"容器\",{\"1\":{\"506\":1,\"1593\":1,\"1634\":2}}],[\"容器加载\",{\"0\":{\"91\":1,\"99\":1}}],[\"容量2\",{\"1\":{\"1514\":1}}],[\"容量固定为\",{\"1\":{\"1499\":1}}],[\"容量为上面两个容量的较大者\",{\"1\":{\"1493\":1}}],[\"容量和性能可扩展\",{\"1\":{\"1254\":1}}],[\"容量\",{\"1\":{\"827\":1,\"1658\":1}}],[\"容量以变量槽slot为最小单位\",{\"1\":{\"204\":1}}],[\"容量的2\",{\"1\":{\"154\":1}}],[\"容易跑路\",{\"1\":{\"1811\":1}}],[\"容易被ban掉\",{\"1\":{\"1805\":1}}],[\"容易\",{\"1\":{\"1520\":1}}],[\"容易成为性能的瓶颈的地方\",{\"1\":{\"1488\":1}}],[\"容易引入死锁等问题\",{\"1\":{\"1460\":1}}],[\"容易上手\",{\"1\":{\"1223\":1}}],[\"容易导致网络传输开销大\",{\"1\":{\"490\":1}}],[\"容易受线程阻塞或其它外界因素的影响\",{\"1\":{\"268\":1}}],[\"容易获取对象调用关系\",{\"1\":{\"268\":1}}],[\"容易产生数据倾斜\",{\"1\":{\"495\":1}}],[\"容易产生性能问题\",{\"1\":{\"376\":1}}],[\"容易产生大量内存碎片空间\",{\"1\":{\"176\":1}}],[\"容易产生碰撞\",{\"1\":{\"83\":1}}],[\"容易计算\",{\"1\":{\"14\":1}}],[\"枚举分片\",{\"1\":{\"656\":1}}],[\"枚举类型字段\",{\"1\":{\"1608\":1}}],[\"枚举类型\",{\"1\":{\"663\":1}}],[\"枚举类型反编译\",{\"1\":{\"352\":1}}],[\"枚举类相当于多例模式\",{\"1\":{\"352\":1}}],[\"枚举类都继承了\",{\"1\":{\"352\":1}}],[\"枚举都是最终类\",{\"1\":{\"352\":1}}],[\"枚举\",{\"0\":{\"352\":1},\"1\":{\"89\":1,\"1089\":1}}],[\"项目推送到\",{\"1\":{\"1791\":1}}],[\"项目或组织的静态网页\",{\"1\":{\"1790\":1}}],[\"项目运行时有效\",{\"1\":{\"1632\":1}}],[\"项目的名称\",{\"1\":{\"1632\":1}}],[\"项目隶属的组织或公司\",{\"1\":{\"1632\":1}}],[\"项目构建\",{\"1\":{\"1632\":1}}],[\"项目里有三个文件已经暂存\",{\"1\":{\"1332\":1}}],[\"项目拥有三个阶段\",{\"1\":{\"1310\":1}}],[\"项目提供了三种资源解析器\",{\"1\":{\"1008\":1}}],[\"项目\",{\"0\":{\"1004\":1,\"1364\":1}}],[\"项目结构\",{\"0\":{\"89\":1}}],[\"项目地址\",{\"1\":{\"88\":1,\"1004\":1}}],[\"代表着整体中某一段的数据\",{\"1\":{\"833\":1}}],[\"代表\",{\"1\":{\"828\":1}}],[\"代表所有\",{\"1\":{\"591\":1}}],[\"代表这批消息的概要信息\",{\"1\":{\"476\":1}}],[\"代表了正常写入生产者数据所需要的最少isr个数\",{\"1\":{\"460\":1}}],[\"代表os的文件\",{\"1\":{\"314\":1}}],[\"代表我们要索引的文档\",{\"1\":{\"53\":1}}],[\"代码先锋网\",{\"1\":{\"1873\":1}}],[\"代码段\",{\"1\":{\"1436\":1,\"1444\":1}}],[\"代码简洁\",{\"1\":{\"1040\":1}}],[\"代码片段\",{\"1\":{\"531\":1}}],[\"代码和数据库耦合有点重吧\",{\"1\":{\"515\":1}}],[\"代码确实是一场噩梦\",{\"1\":{\"515\":1}}],[\"代码中的坏味道导致内存泄漏或者其他问题\",{\"1\":{\"1638\":1}}],[\"代码中动态生成\",{\"1\":{\"515\":1}}],[\"代码中提供了高速的\",{\"1\":{\"324\":1}}],[\"代码以及设置参数和获取结果集的工作\",{\"1\":{\"503\":1}}],[\"代码届的抄袭狗\",{\"1\":{\"376\":1}}],[\"代码无法控制\",{\"1\":{\"345\":1}}],[\"代码块之前的值\",{\"1\":{\"1533\":1}}],[\"代码块\",{\"0\":{\"289\":1},\"1\":{\"289\":2,\"297\":1}}],[\"代码块设置计数器\",{\"1\":{\"268\":1}}],[\"代码优化质量的高低是衡量一款商用虚拟机优秀与否的关键指标之一\",{\"1\":{\"265\":1}}],[\"代码\",{\"1\":{\"240\":1,\"729\":1,\"1400\":1,\"1634\":1}}],[\"代码行号\",{\"1\":{\"240\":1}}],[\"代码缓存等数据\",{\"1\":{\"211\":1,\"1520\":1}}],[\"代码非常精妙\",{\"1\":{\"155\":1}}],[\"代码阅读\",{\"0\":{\"88\":1}}],[\"代理商在平台上投放自己的产品\",{\"1\":{\"1727\":1}}],[\"代理\",{\"1\":{\"1599\":2,\"1626\":1}}],[\"代理方式\",{\"1\":{\"1563\":1}}],[\"代理模式是一种使用代理对象来代替对真实对象访问的设计模式\",{\"1\":{\"1532\":1}}],[\"代理模式\",{\"0\":{\"1532\":1,\"1649\":1}}],[\"代理目标\",{\"1\":{\"1380\":1}}],[\"代理目标类\",{\"1\":{\"1016\":1}}],[\"代理吞吐量仅剩\",{\"1\":{\"1367\":1}}],[\"代理的方式\",{\"1\":{\"1057\":1}}],[\"代理类这些都变成了一个个实际的\",{\"1\":{\"1532\":1}}],[\"代理类继承自\",{\"1\":{\"1015\":1}}],[\"代理类还代理了属于\",{\"1\":{\"1015\":1}}],[\"代理类是目标的子类\",{\"1\":{\"1014\":1}}],[\"代理工厂\",{\"1\":{\"541\":1,\"543\":1}}],[\"代理集群\",{\"1\":{\"434\":1}}],[\"代理会将消息投递给订阅了此队列的消费者\",{\"1\":{\"406\":1}}],[\"代理对象\",{\"1\":{\"99\":1}}],[\"代理时注入到每个\",{\"1\":{\"99\":1}}],[\"译文系列\",{\"1\":{\"85\":1}}],[\"发包速率\",{\"1\":{\"1490\":1}}],[\"发给设备层\",{\"1\":{\"1484\":1}}],[\"发回给客户端进程\",{\"1\":{\"1394\":1}}],[\"发起的系统调用\",{\"1\":{\"1465\":1}}],[\"发起\",{\"1\":{\"1426\":1}}],[\"发起硬件中断\",{\"1\":{\"1395\":1}}],[\"发起投票参与竞选\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"发起请求\",{\"1\":{\"1220\":1}}],[\"发起选举\",{\"1\":{\"1203\":4}}],[\"发起连接请求\",{\"1\":{\"812\":1,\"813\":1}}],[\"发一个包建立一次连接\",{\"1\":{\"841\":1}}],[\"发\",{\"1\":{\"470\":1}}],[\"发生缺页时\",{\"1\":{\"1471\":1}}],[\"发生变化\",{\"1\":{\"1189\":1}}],[\"发生了事件\",{\"1\":{\"785\":1}}],[\"发生锁冲突的概率最低\",{\"1\":{\"554\":1}}],[\"发生故障时\",{\"1\":{\"1162\":1,\"1187\":1}}],[\"发生故障时进行选举\",{\"1\":{\"443\":1}}],[\"发生故障\",{\"1\":{\"471\":2}}],[\"发生宕机后\",{\"1\":{\"470\":1}}],[\"发来的最近5个\",{\"1\":{\"462\":1}}],[\"发消息的客户端\",{\"1\":{\"443\":1}}],[\"发展史\",{\"0\":{\"376\":1}}],[\"发布于\",{\"1\":{\"1799\":1}}],[\"发布票价\",{\"1\":{\"1722\":1}}],[\"发布订阅模型\",{\"1\":{\"1626\":1}}],[\"发布和订阅消息流\",{\"1\":{\"1626\":1}}],[\"发布和下线等\",{\"1\":{\"1303\":1}}],[\"发布和部署\",{\"1\":{\"228\":1}}],[\"发布容器刷新完成事件\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"发布与订阅\",{\"0\":{\"953\":1}}],[\"发布确认和高可用性机制\",{\"1\":{\"412\":1}}],[\"发布\",{\"1\":{\"376\":1,\"407\":1}}],[\"发布事件\",{\"1\":{\"84\":1}}],[\"发现这个世界不缺勇敢的人\",{\"1\":{\"1849\":1}}],[\"发现可以通过\",{\"1\":{\"1790\":1}}],[\"发现\",{\"1\":{\"1055\":1,\"1203\":2,\"1367\":1}}],[\"发现某个线程中threadlocalmap存在该threadlocal的强引用\",{\"1\":{\"154\":1,\"1514\":1}}],[\"发现条件不满足\",{\"1\":{\"139\":1}}],[\"发送给signal\",{\"1\":{\"1861\":2}}],[\"发送给房间内所有人\",{\"1\":{\"1859\":1}}],[\"发送给除自己之外的用户\",{\"1\":{\"1859\":1}}],[\"发送给交换机\",{\"1\":{\"406\":1}}],[\"发送一整个\",{\"1\":{\"1412\":1}}],[\"发送一个消息\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"发送窗口\",{\"1\":{\"1412\":1}}],[\"发送方向\",{\"1\":{\"1420\":1}}],[\"发送方向和读取方向\",{\"1\":{\"1420\":1}}],[\"发送方开启\",{\"1\":{\"1412\":1}}],[\"发送方为了填满接收方几个字节的窗口\",{\"1\":{\"1412\":1}}],[\"发送方根据接收方的处理能力调整窗口大小\",{\"1\":{\"1412\":1}}],[\"发送方\",{\"1\":{\"1411\":3,\"1412\":1,\"1413\":1}}],[\"发送方的报文大小是\",{\"1\":{\"839\":1}}],[\"发送报文有误\",{\"1\":{\"1398\":1}}],[\"发送完成后\",{\"1\":{\"1395\":1}}],[\"发送完消息之后如果\",{\"1\":{\"460\":1}}],[\"发送订单创建的消息给\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"发送和接收\",{\"1\":{\"1126\":1}}],[\"发送信息\",{\"1\":{\"979\":1}}],[\"发送asking命令\",{\"1\":{\"947\":1}}],[\"发送slaveof命令\",{\"1\":{\"943\":1}}],[\"发送subscribe\",{\"1\":{\"940\":1}}],[\"发送ping命令\",{\"1\":{\"941\":1}}],[\"发送接收\",{\"1\":{\"940\":1}}],[\"发送命令回复\",{\"1\":{\"926\":1}}],[\"发送命令请求\",{\"1\":{\"926\":1}}],[\"发送数据包\",{\"1\":{\"1220\":1}}],[\"发送数据\",{\"1\":{\"812\":1}}],[\"发送数据不会管\",{\"1\":{\"792\":1}}],[\"发送数据时\",{\"1\":{\"789\":1,\"1395\":1}}],[\"发送消费请求\",{\"1\":{\"484\":1}}],[\"发送消息到特定主题\",{\"1\":{\"1626\":1}}],[\"发送消息\",{\"0\":{\"956\":1},\"1\":{\"418\":1,\"456\":1}}],[\"发送消息可以不添加\",{\"1\":{\"418\":1}}],[\"发送消息时需要指定\",{\"1\":{\"414\":1,\"1628\":1}}],[\"发送不用走应用层\",{\"1\":{\"478\":1}}],[\"发送至\",{\"1\":{\"450\":1}}],[\"发送流程\",{\"0\":{\"450\":1}}],[\"发送套接字的缓冲区大小\",{\"1\":{\"445\":1}}],[\"发送\",{\"1\":{\"443\":1,\"839\":2,\"856\":1,\"1125\":1,\"1395\":1,\"1398\":1,\"1623\":2,\"1698\":1}}],[\"发送端收到接收方发来的\",{\"1\":{\"1418\":1}}],[\"发送端到\",{\"1\":{\"1418\":1}}],[\"发送端接收到三个相同的ack报文\",{\"1\":{\"1413\":1}}],[\"发送端或订阅端的唯一标识\",{\"1\":{\"408\":1}}],[\"发送端指定组播ip和端口\",{\"1\":{\"342\":1}}],[\"发送端指定端口\",{\"1\":{\"342\":1}}],[\"发送者名字\",{\"1\":{\"949\":1}}],[\"发送者\",{\"1\":{\"342\":1}}],[\"发送调用请求并获取结果\",{\"1\":{\"99\":1}}],[\"发送调用请求\",{\"1\":{\"99\":1}}],[\"发送请求的超时时间\",{\"1\":{\"467\":1}}],[\"发送请求\",{\"1\":{\"42\":1,\"43\":1,\"44\":1,\"47\":1,\"48\":1,\"51\":2,\"450\":1}}],[\"发送请求验证\",{\"1\":{\"27\":2,\"1643\":2}}],[\"发送短信验证码\",{\"1\":{\"14\":1}}],[\"事不过三\",{\"1\":{\"1781\":1}}],[\"事实上\",{\"1\":{\"1767\":1}}],[\"事物a尚未提交\",{\"1\":{\"560\":1}}],[\"事务机制\",{\"1\":{\"1629\":1}}],[\"事务传播行为\",{\"0\":{\"1611\":1}}],[\"事务传播类型\",{\"1\":{\"1041\":1}}],[\"事务块中发生错误可能产生不一致\",{\"1\":{\"1571\":1}}],[\"事务问题\",{\"1\":{\"1564\":1}}],[\"事务结束\",{\"1\":{\"1561\":1}}],[\"事务有意向对表中的某些行加排他锁\",{\"1\":{\"1560\":1}}],[\"事务有意向对表中的某些行加共享锁\",{\"1\":{\"1560\":1}}],[\"事务只在第一次\",{\"1\":{\"1557\":1}}],[\"事务每次\",{\"1\":{\"1557\":1}}],[\"事务期间如果发生异常\",{\"1\":{\"1556\":1}}],[\"事务写入\",{\"1\":{\"1556\":2}}],[\"事务执行时\",{\"1\":{\"1556\":1}}],[\"事务执行前后\",{\"1\":{\"1274\":1,\"1550\":1}}],[\"事务串行化\",{\"1\":{\"1435\":1}}],[\"事务协调者\",{\"1\":{\"1287\":1}}],[\"事务协调器要求每个数据库提交数据\",{\"1\":{\"1283\":1}}],[\"事务协调器要求每个涉及到事务的数据库预提交\",{\"1\":{\"1283\":1}}],[\"事务模式\",{\"1\":{\"1287\":1}}],[\"事务方案\",{\"0\":{\"1282\":1}}],[\"事务一旦提交\",{\"1\":{\"1274\":1,\"1550\":1}}],[\"事务一旦提交或回滚\",{\"1\":{\"735\":1}}],[\"事务间互不干扰\",{\"1\":{\"1274\":1,\"1550\":1}}],[\"事务中包含的操作要么全部执行\",{\"1\":{\"1274\":1,\"1550\":1}}],[\"事务特征\",{\"0\":{\"1274\":1}}],[\"事务日志\",{\"1\":{\"1170\":1}}],[\"事务默认不会对\",{\"1\":{\"1061\":1}}],[\"事务所在类要要被加载成\",{\"1\":{\"1061\":1}}],[\"事务由spring管理起来\",{\"1\":{\"1061\":1}}],[\"事务失效\",{\"0\":{\"1061\":1}}],[\"事务拦截器的\",{\"1\":{\"1059\":1}}],[\"事务拦截器\",{\"1\":{\"1059\":2}}],[\"事务注解的解析器\",{\"1\":{\"1059\":1}}],[\"事务同步器集合\",{\"1\":{\"1045\":1,\"1383\":1}}],[\"事务回滚\",{\"0\":{\"1051\":1},\"1\":{\"1060\":1}}],[\"事务回滚机制是通过\",{\"1\":{\"1034\":1}}],[\"事务回调\",{\"1\":{\"1045\":1}}],[\"事务名称\",{\"1\":{\"1045\":1}}],[\"事务超时等等\",{\"1\":{\"1043\":1}}],[\"事务策略的核心管理器\",{\"1\":{\"1042\":1,\"1383\":1}}],[\"事务运行状态\",{\"1\":{\"1042\":1,\"1383\":1}}],[\"事务隔离级别等信息\",{\"1\":{\"1045\":1}}],[\"事务隔离级别\",{\"0\":{\"1612\":1},\"1\":{\"1042\":1,\"1383\":1}}],[\"事务隔离级别越高\",{\"1\":{\"737\":1}}],[\"事务定义信息\",{\"1\":{\"1042\":1,\"1383\":1}}],[\"事务配置\",{\"1\":{\"1038\":2}}],[\"事务依赖集中在\",{\"1\":{\"1036\":1}}],[\"事务使用方法\",{\"0\":{\"1036\":1}}],[\"事务语句\",{\"0\":{\"1033\":1}}],[\"事务语法\",{\"0\":{\"734\":1}}],[\"事务基础\",{\"0\":{\"1031\":1}}],[\"事务的acid\",{\"0\":{\"961\":1}}],[\"事务队列\",{\"1\":{\"959\":1}}],[\"事务开始multi命令打开客户端的redis\",{\"1\":{\"959\":1}}],[\"事务实现\",{\"0\":{\"959\":1}}],[\"事务提交\",{\"0\":{\"1050\":1}}],[\"事务提交后不能立即删除\",{\"1\":{\"750\":1}}],[\"事务提交后不能被重用的update\",{\"1\":{\"749\":1}}],[\"事务提交后不能被重用的insert\",{\"1\":{\"749\":1}}],[\"事务提交后再交由专门线程执行purge\",{\"1\":{\"748\":1}}],[\"事务提交时将redo日志写入os缓冲区\",{\"1\":{\"739\":1,\"1555\":1}}],[\"事务提交时立即同步\",{\"1\":{\"739\":1,\"1555\":1}}],[\"事务提交时不立即向磁盘同步redo日志\",{\"1\":{\"739\":1,\"1555\":1}}],[\"事务提交时\",{\"1\":{\"739\":1}}],[\"事务id\",{\"0\":{\"744\":1},\"1\":{\"1204\":1,\"1207\":1}}],[\"事务完成时\",{\"1\":{\"735\":1}}],[\"事务是逻辑上的一组操作\",{\"1\":{\"1031\":1}}],[\"事务是不可分割的最小操作单元\",{\"1\":{\"735\":1}}],[\"事务是一组操作的集合\",{\"1\":{\"733\":1}}],[\"事务状态\",{\"1\":{\"733\":1}}],[\"事务大致上可以分为五种状态\",{\"1\":{\"733\":1}}],[\"事务会把所有操作作为一个整体一起向系统提交或撤销操作请求\",{\"1\":{\"733\":1}}],[\"事务⭐\",{\"0\":{\"733\":1}}],[\"事务安全\",{\"1\":{\"681\":1}}],[\"事务b想要获取表锁时\",{\"1\":{\"560\":1}}],[\"事务a获取了某一行记录的排它锁\",{\"1\":{\"560\":1}}],[\"事务管理\",{\"0\":{\"1383\":1},\"1\":{\"1540\":1}}],[\"事务管理和\",{\"1\":{\"1056\":1}}],[\"事务管理流程\",{\"0\":{\"1055\":1}}],[\"事务管理接口\",{\"0\":{\"1042\":1}}],[\"事务管理中定义了\",{\"1\":{\"1041\":1}}],[\"事务管理器执行流程\",{\"1\":{\"1059\":1}}],[\"事务管理器的接口是\",{\"1\":{\"1047\":1}}],[\"事务管理器\",{\"1\":{\"1038\":1,\"1042\":1,\"1287\":1,\"1383\":1}}],[\"事务管理模块\",{\"1\":{\"545\":1}}],[\"事务管理详解\",{\"1\":{\"525\":1}}],[\"事务控制或关于锁的语句\",{\"1\":{\"734\":1}}],[\"事务控制\",{\"0\":{\"511\":1}}],[\"事务\",{\"0\":{\"958\":1,\"1030\":1,\"1284\":1,\"1549\":1},\"1\":{\"461\":1},\"2\":{\"1063\":1,\"1293\":1}}],[\"事务消息\",{\"1\":{\"428\":1,\"435\":1}}],[\"事务源码一样\",{\"1\":{\"10\":1}}],[\"事件调度\",{\"1\":{\"921\":1}}],[\"事件调度与执行\",{\"0\":{\"921\":1}}],[\"事件后\",{\"1\":{\"873\":1}}],[\"事件所占用的时间比例\",{\"1\":{\"872\":1}}],[\"事件触发\",{\"1\":{\"871\":1}}],[\"事件的处理\",{\"1\":{\"852\":1,\"873\":1}}],[\"事件处理器\",{\"1\":{\"919\":1}}],[\"事件处理\",{\"1\":{\"873\":1,\"1379\":1}}],[\"事件处理时的线程安全\",{\"1\":{\"817\":1}}],[\"事件处理方法标记\",{\"1\":{\"84\":1}}],[\"事件都由此\",{\"1\":{\"817\":1}}],[\"事件循环对象\",{\"1\":{\"816\":1}}],[\"事件\",{\"0\":{\"918\":1},\"1\":{\"785\":3,\"791\":1,\"816\":1,\"869\":1,\"872\":2,\"873\":3,\"1488\":1}}],[\"事件分析等\",{\"1\":{\"238\":1}}],[\"事件分析\",{\"1\":{\"238\":1}}],[\"事件类型包含连接事件\",{\"1\":{\"1488\":1}}],[\"事件类型\",{\"1\":{\"84\":1}}],[\"取环境变量值\",{\"1\":{\"1701\":1}}],[\"取后面一行的\",{\"1\":{\"1567\":1}}],[\"取余并反转\",{\"1\":{\"1438\":1}}],[\"取哈希\",{\"1\":{\"1390\":1}}],[\"取反\",{\"1\":{\"1330\":1}}],[\"取代\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"取值范围\",{\"1\":{\"661\":1}}],[\"取值有三个\",{\"1\":{\"638\":1,\"722\":1}}],[\"取值错位\",{\"1\":{\"477\":1}}],[\"取模决定分配到哪个桶\",{\"1\":{\"1228\":1}}],[\"取模分片\",{\"1\":{\"656\":1}}],[\"取模\",{\"1\":{\"594\":1}}],[\"取而代之的是platformclassloader平台类加载器\",{\"1\":{\"254\":1}}],[\"取整\",{\"1\":{\"129\":2,\"1438\":1}}],[\"取\",{\"1\":{\"127\":1,\"1395\":1}}],[\"取1\",{\"1\":{\"127\":1}}],[\"取决于gc算法\",{\"1\":{\"1521\":1}}],[\"取决于容量足够即可\",{\"1\":{\"828\":1}}],[\"取决于集合\",{\"1\":{\"663\":1}}],[\"取决于枚举值的数目\",{\"1\":{\"663\":1}}],[\"取决于定义的子列数量\",{\"1\":{\"122\":1}}],[\"取决于处理方法的参数\",{\"1\":{\"84\":1}}],[\"取元素\",{\"1\":{\"122\":1}}],[\"取出低6位\",{\"1\":{\"1666\":1}}],[\"取出进行处理\",{\"1\":{\"1487\":1}}],[\"取出真实对象放入二级缓存提前暴露出来\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"取出多余的\",{\"1\":{\"537\":1}}],[\"取出map的全部value\",{\"1\":{\"129\":1}}],[\"取出map的全部key\",{\"1\":{\"129\":1}}],[\"取出对应key的value\",{\"1\":{\"122\":1}}],[\"取出\",{\"1\":{\"101\":1,\"543\":1}}],[\"取消持久化\",{\"0\":{\"1615\":1}}],[\"取消屏蔽\",{\"1\":{\"1395\":1}}],[\"取消暂存\",{\"1\":{\"1324\":1}}],[\"取消已暂存但尚未提交的文件修改\",{\"1\":{\"1320\":1}}],[\"取消跟踪某个文件\",{\"1\":{\"1319\":1}}],[\"取消执行阶段\",{\"1\":{\"1284\":1}}],[\"取消只能从本机连接的限制\",{\"1\":{\"1150\":1}}],[\"取消地址绑定\",{\"0\":{\"1150\":1}}],[\"取消任务\",{\"1\":{\"822\":1}}],[\"取消注册在\",{\"1\":{\"786\":1}}],[\"取消\",{\"1\":{\"786\":1,\"788\":1,\"1731\":1}}],[\"取消息的客户端\",{\"1\":{\"443\":1}}],[\"取消竞争\",{\"1\":{\"6\":1}}],[\"取消等待\",{\"1\":{\"3\":1}}],[\"之所以出现重复\",{\"1\":{\"1675\":1}}],[\"之上定义的应用层协议\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"之上的伪\",{\"1\":{\"1404\":1}}],[\"之上\",{\"1\":{\"1213\":1}}],[\"之\",{\"1\":{\"1100\":1}}],[\"之间时会触发后台回收\",{\"1\":{\"1446\":1}}],[\"之间独立\",{\"1\":{\"1404\":1}}],[\"之间\",{\"1\":{\"1119\":1}}],[\"之间进行了绑定\",{\"1\":{\"818\":1}}],[\"之间连接超时时间\",{\"1\":{\"485\":1}}],[\"之间的间隙\",{\"1\":{\"561\":1}}],[\"之间的心跳时间\",{\"1\":{\"485\":1}}],[\"之间的网络连接器\",{\"1\":{\"433\":1}}],[\"之间的传输连接器\",{\"1\":{\"433\":1}}],[\"之间不需要直接依赖彼此\",{\"1\":{\"84\":1}}],[\"之手\",{\"1\":{\"382\":1}}],[\"之父\",{\"1\":{\"376\":1}}],[\"之前个人博客都是基于\",{\"1\":{\"1790\":1}}],[\"之前跟星哥吃完饭散步闲聊\",{\"1\":{\"1786\":1}}],[\"之前学的开源组件基本也都用不上\",{\"1\":{\"1773\":1}}],[\"之前是基于监视器\",{\"1\":{\"1515\":1}}],[\"之前是sun\",{\"1\":{\"1015\":1}}],[\"之前发生\",{\"1\":{\"1174\":1}}],[\"之前首先要知道对象在\",{\"1\":{\"1074\":1}}],[\"之前\",{\"1\":{\"762\":1,\"1074\":1,\"1075\":1,\"1494\":1}}],[\"之前使用的行格式\",{\"1\":{\"685\":1}}],[\"之前产生的所有日志\",{\"1\":{\"643\":1}}],[\"之前会创建\",{\"1\":{\"864\":1}}],[\"之前会把消费完的\",{\"1\":{\"490\":1}}],[\"之前会被放入一个引用队列中\",{\"1\":{\"194\":1}}],[\"之前的版本就是\",{\"1\":{\"1488\":1}}],[\"之前的系统\",{\"1\":{\"1298\":1}}],[\"之前的\",{\"1\":{\"383\":1}}],[\"之前几乎是\",{\"1\":{\"376\":1}}],[\"之后可以用exit\",{\"1\":{\"1691\":1}}],[\"之后可以执行\",{\"1\":{\"1335\":1}}],[\"之后进入\",{\"1\":{\"1410\":1}}],[\"之后进入重量级锁解锁流程\",{\"1\":{\"1076\":1}}],[\"之后服务端进入\",{\"1\":{\"1410\":1}}],[\"之后客户端进入\",{\"1\":{\"1410\":1}}],[\"之后客户端处于\",{\"1\":{\"1409\":1}}],[\"之后重新选举\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"之后在另一个会话中必须先使用账号密码\",{\"1\":{\"1177\":1}}],[\"之后已经废弃了\",{\"1\":{\"1135\":1}}],[\"之后已经默认关闭了偏向锁\",{\"1\":{\"1077\":1}}],[\"之后a将b的信息通过gossip协议传播给集群中其它节点\",{\"1\":{\"945\":1}}],[\"之后按照union合并执行\",{\"1\":{\"711\":1}}],[\"之后\",{\"1\":{\"542\":1,\"607\":3,\"638\":1,\"1344\":1,\"1369\":1,\"1494\":1,\"1629\":1}}],[\"之后的版本\",{\"1\":{\"383\":1}}],[\"之后又出现了\",{\"1\":{\"380\":1}}],[\"之后执行\",{\"1\":{\"365\":1}}],[\"之后请求时携带该\",{\"1\":{\"26\":1}}],[\"之后便拥有竞争锁的权利\",{\"1\":{\"8\":1}}],[\"之后一直到\",{\"1\":{\"1\":1}}],[\"订座记录等\",{\"1\":{\"1723\":1}}],[\"订阅特定主题的消息\",{\"1\":{\"1626\":1}}],[\"订阅频道时\",{\"1\":{\"954\":1}}],[\"订阅连接\",{\"1\":{\"940\":1}}],[\"订阅的主题新增partition\",{\"1\":{\"494\":1}}],[\"订阅\",{\"1\":{\"434\":1,\"927\":1,\"1162\":1}}],[\"订阅消息模式\",{\"1\":{\"407\":1}}],[\"订阅模型\",{\"1\":{\"403\":1,\"1625\":1}}],[\"订阅模式时\",{\"1\":{\"955\":1}}],[\"订阅模式的消息队列\",{\"1\":{\"439\":1}}],[\"订阅模式的消息传输协议\",{\"1\":{\"407\":1}}],[\"订阅模式\",{\"1\":{\"84\":1}}],[\"订单\",{\"0\":{\"1370\":1}}],[\"订单管理\",{\"1\":{\"1365\":1}}],[\"订单信息\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"订单系统下单时\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"订单系统需要\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"订单系统生成订单\",{\"1\":{\"1288\":1,\"1370\":1}}],[\"订单业务\",{\"0\":{\"1289\":1,\"1371\":1},\"1\":{\"1288\":1}}],[\"订单表和用户表join\",{\"1\":{\"124\":1}}],[\"订单金额\",{\"1\":{\"124\":1}}],[\"订单金额等\",{\"1\":{\"34\":1}}],[\"订单状态\",{\"1\":{\"124\":1}}],[\"订单编号\",{\"1\":{\"124\":1}}],[\"订单id\",{\"1\":{\"124\":1}}],[\"输入文件名\",{\"1\":{\"1868\":1}}],[\"输入内容去匹配历史命令\",{\"1\":{\"1690\":1}}],[\"输入模式\",{\"1\":{\"1689\":1}}],[\"输入设备\",{\"1\":{\"1432\":1}}],[\"输入全部匹配完或者到达叶子结点即匹配成功\",{\"1\":{\"1361\":1}}],[\"输入\",{\"1\":{\"945\":1}}],[\"输入缓冲区\",{\"1\":{\"923\":1}}],[\"输入自定义类\",{\"1\":{\"83\":1}}],[\"输出的分辨率\",{\"1\":{\"1868\":1}}],[\"输出的位置\",{\"1\":{\"990\":1}}],[\"输出操作的完成\",{\"1\":{\"1450\":1}}],[\"输出设备\",{\"1\":{\"1432\":1}}],[\"输出被\",{\"1\":{\"1342\":1}}],[\"输出在\",{\"1\":{\"1342\":1}}],[\"输出在文件名前有两列\",{\"1\":{\"1316\":1}}],[\"输出每个\",{\"1\":{\"1219\":1}}],[\"输出文件块报告\",{\"1\":{\"1219\":1}}],[\"输出序列\",{\"1\":{\"996\":1}}],[\"输出缓冲区\",{\"1\":{\"945\":1}}],[\"输出缓冲区第一次到达软性限制的时间\",{\"1\":{\"923\":1}}],[\"输出结果中query为查询语句\",{\"1\":{\"729\":1}}],[\"输出json的cost\",{\"1\":{\"729\":1}}],[\"输出选项\",{\"1\":{\"675\":1}}],[\"输出到文件\",{\"1\":{\"388\":2}}],[\"输出到控制台\",{\"1\":{\"388\":1}}],[\"输出日志的格式\",{\"1\":{\"388\":1}}],[\"输出字符流\",{\"1\":{\"318\":1}}],[\"输出字节流\",{\"1\":{\"317\":1}}],[\"输出传递给java虚拟机的参数\",{\"1\":{\"229\":1}}],[\"输出完全限定的主类名\",{\"1\":{\"229\":1}}],[\"输出主类名和传递给主类的参数\",{\"1\":{\"229\":1}}],[\"输出\",{\"1\":{\"43\":1,\"66\":1,\"778\":1,\"829\":1,\"1316\":1,\"1687\":1,\"1692\":2}}],[\"汇\",{\"1\":{\"82\":1}}],[\"源ip地址和目标ip地址在整个传输过程中是不会变化的\",{\"1\":{\"1423\":1}}],[\"源ip\",{\"1\":{\"1409\":1}}],[\"源端口\",{\"1\":{\"1396\":1,\"1409\":1}}],[\"源地址\",{\"1\":{\"1396\":1}}],[\"源sentinel解析目标sentinel返回的命令回复\",{\"1\":{\"942\":1}}],[\"源sentinel向另一个目标sentinel发送sentinel\",{\"1\":{\"942\":1}}],[\"源文件\",{\"1\":{\"240\":1}}],[\"源码公开可见\",{\"1\":{\"1790\":1}}],[\"源码\",{\"1\":{\"1666\":1}}],[\"源码之前\",{\"1\":{\"184\":1}}],[\"源码分析\",{\"0\":{\"539\":1,\"862\":1,\"1103\":1},\"1\":{\"152\":1}}],[\"源码阅读\",{\"0\":{\"361\":1,\"1086\":1,\"1134\":1},\"1\":{\"136\":1,\"149\":1,\"277\":1}}],[\"源码解析\",{\"0\":{\"1\":1},\"1\":{\"155\":1}}],[\"源\",{\"1\":{\"82\":1,\"1396\":2,\"1418\":1}}],[\"流描述\",{\"1\":{\"1862\":1}}],[\"流浪地球\",{\"1\":{\"1817\":1}}],[\"流式处理平台\",{\"1\":{\"1626\":1}}],[\"流在中间处理过程中\",{\"1\":{\"1065\":1}}],[\"流程\",{\"0\":{\"1012\":1},\"1\":{\"873\":1}}],[\"流程梳理\",{\"0\":{\"813\":1}}],[\"流程函数\",{\"0\":{\"596\":1}}],[\"流程函数四类\",{\"1\":{\"592\":1}}],[\"流量控制是为了避免\",{\"1\":{\"1412\":1}}],[\"流量控制\",{\"0\":{\"1412\":1},\"1\":{\"1621\":1}}],[\"流量错峰\",{\"1\":{\"1375\":1}}],[\"流量路由等基础功能\",{\"1\":{\"1303\":1}}],[\"流量管控\",{\"1\":{\"1303\":1}}],[\"流量分发策略\",{\"1\":{\"1302\":1}}],[\"流量网关通常只专注于全局的api管理策略\",{\"1\":{\"1300\":1}}],[\"流量网关\",{\"1\":{\"1300\":1}}],[\"流量低的场景\",{\"1\":{\"765\":1}}],[\"流量削峰\",{\"0\":{\"400\":1},\"1\":{\"440\":1}}],[\"流量削锋等问题\",{\"1\":{\"396\":1}}],[\"流分析\",{\"1\":{\"439\":1}}],[\"流传输\",{\"1\":{\"409\":1}}],[\"流文本定向消息协议\",{\"1\":{\"408\":1}}],[\"流只能使用一次\",{\"1\":{\"312\":1}}],[\"流的特点有\",{\"1\":{\"1065\":1}}],[\"流的收集\",{\"1\":{\"312\":1}}],[\"流的三类方法\",{\"1\":{\"312\":1}}],[\"流水线的最后一个操作\",{\"1\":{\"312\":1}}],[\"流水线上的操作\",{\"1\":{\"312\":1}}],[\"流已经够麻烦的了\",{\"1\":{\"82\":1}}],[\"流\",{\"0\":{\"312\":1,\"316\":1,\"1064\":1},\"1\":{\"82\":1},\"2\":{\"1071\":1}}],[\"∞\",{\"1\":{\"81\":3}}],[\"确实如网上所说存在一些会蹭的小毛病\",{\"1\":{\"1796\":1}}],[\"确实\",{\"1\":{\"1786\":1}}],[\"确实周末也很少出去逛了\",{\"1\":{\"1785\":1}}],[\"确实挺脏的\",{\"1\":{\"1783\":1}}],[\"确认配置信息\",{\"1\":{\"1426\":1}}],[\"确认报文以后\",{\"1\":{\"1418\":1}}],[\"确认报文丢了\",{\"1\":{\"1411\":1}}],[\"确认号\",{\"1\":{\"1418\":2,\"1420\":1}}],[\"确认当前窗口大小\",{\"1\":{\"1412\":1}}],[\"确认应答丢失\",{\"1\":{\"1411\":1}}],[\"确认应答报文\",{\"1\":{\"1411\":1}}],[\"确认\",{\"1\":{\"1402\":1}}],[\"确认执行阶段\",{\"1\":{\"1284\":1}}],[\"确认datanode所在机器\",{\"1\":{\"1217\":1}}],[\"确认namenode所在机器\",{\"1\":{\"1217\":1}}],[\"确保只有单个对象被创建\",{\"1\":{\"1645\":1}}],[\"确保被加载的类的正确性\",{\"1\":{\"1527\":1}}],[\"确保加密通信安全可用\",{\"1\":{\"1402\":1}}],[\"确保数据的完整性和可靠性\",{\"1\":{\"1296\":1}}],[\"确保不会引入不稳定性或安全性问题\",{\"1\":{\"1136\":1}}],[\"确保dp\",{\"1\":{\"993\":1}}],[\"确保索引记录间隙不变\",{\"1\":{\"556\":1,\"1561\":1}}],[\"确保拿到一致性视图\",{\"1\":{\"550\":1}}],[\"确保关闭\",{\"0\":{\"514\":1}}],[\"确保消息到达一次\",{\"1\":{\"407\":1}}],[\"确保消息到达\",{\"1\":{\"407\":1}}],[\"确保给定的引用实例是强可达的\",{\"1\":{\"189\":1}}],[\"确保类已加载\",{\"1\":{\"188\":1}}],[\"确保\",{\"1\":{\"188\":1}}],[\"确保垃圾回收线程完成回收操作\",{\"1\":{\"183\":1}}],[\"确保所有线程看到这个变量的值都是一致的\",{\"1\":{\"145\":1}}],[\"确保了真正的不可变性\",{\"1\":{\"64\":1}}],[\"确定查询的语义和执行的操作\",{\"1\":{\"1566\":1}}],[\"确定一个新容量\",{\"1\":{\"1493\":1}}],[\"确定程序语义合法\",{\"1\":{\"250\":1}}],[\"确定方法或字段的具体引用\",{\"1\":{\"243\":1}}],[\"确定\",{\"1\":{\"83\":1,\"1301\":1}}],[\"确定匹配的字符和模式\",{\"1\":{\"79\":2}}],[\"^=\",{\"1\":{\"1662\":1}}],[\"^9a466c5\",{\"1\":{\"1347\":1}}],[\"^refb\",{\"1\":{\"1342\":1}}],[\"^\",{\"1\":{\"79\":2,\"789\":1,\"1438\":1,\"1666\":1}}],[\"框架启动时\",{\"1\":{\"1594\":1}}],[\"框架来管理\",{\"1\":{\"1593\":1}}],[\"框架来使用\",{\"1\":{\"1124\":1}}],[\"框架完成后台商品\",{\"1\":{\"1365\":1}}],[\"框架层次\",{\"0\":{\"1126\":1}}],[\"框架内置了executors工具类\",{\"1\":{\"1110\":1}}],[\"框架作为线程池的实现\",{\"1\":{\"1104\":1}}],[\"框架都会直接引用\",{\"1\":{\"1036\":1}}],[\"框架设计解决循环依赖需要用到三个map\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"框架中\",{\"1\":{\"1010\":1}}],[\"框架在\",{\"1\":{\"808\":1}}],[\"框架本身的日志级别\",{\"1\":{\"387\":1}}],[\"框架\",{\"1\":{\"153\":1,\"525\":1,\"808\":2,\"1221\":1,\"1511\":1}}],[\"框架是一个用于管理服务生命周期的轻量级框架\",{\"1\":{\"78\":1}}],[\"框架正好提供了解决方案\",{\"1\":{\"22\":1}}],[\"添加至双向链表的头部\",{\"1\":{\"1651\":1}}],[\"添加进哈希表\",{\"1\":{\"1651\":1}}],[\"添加远程地址\",{\"1\":{\"1633\":1}}],[\"添加线程组\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"添加新的远程引用\",{\"1\":{\"1338\":1}}],[\"添加和删除子节点的事务id\",{\"1\":{\"1174\":1}}],[\"添加到\",{\"1\":{\"1487\":1}}],[\"添加到自己的日志末尾\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"添加到线程组的\",{\"1\":{\"1090\":1}}],[\"添加到列表尾\",{\"1\":{\"955\":1}}],[\"添加慢查询日志等\",{\"1\":{\"928\":1}}],[\"添加处理器\",{\"1\":{\"819\":1}}],[\"添加外键\",{\"1\":{\"599\":1}}],[\"添加数据\",{\"0\":{\"578\":1}}],[\"添加字段\",{\"1\":{\"576\":1}}],[\"添加\",{\"1\":{\"506\":1,\"788\":1,\"864\":2,\"1023\":1,\"1056\":1}}],[\"添加抽象语法树中的任意元素\",{\"1\":{\"260\":1}}],[\"添加分区\",{\"1\":{\"118\":1}}],[\"添加回调\",{\"1\":{\"77\":2,\"822\":1}}],[\"添加移除时的监听器\",{\"1\":{\"73\":1}}],[\"整整三个月\",{\"1\":{\"1815\":1}}],[\"整堆收集\",{\"1\":{\"1525\":1}}],[\"整堆收集器\",{\"1\":{\"172\":1}}],[\"整数除\",{\"1\":{\"1438\":1}}],[\"整数倍\",{\"1\":{\"1074\":1}}],[\"整数值\",{\"1\":{\"892\":1}}],[\"整数集合不支持降级\",{\"1\":{\"889\":1}}],[\"整数集合需要先升级\",{\"1\":{\"889\":1}}],[\"整数集合结构\",{\"1\":{\"888\":1}}],[\"整数集合intset是集合键的底层实现之一\",{\"1\":{\"887\":1}}],[\"整数集合\",{\"0\":{\"887\":1},\"1\":{\"895\":1}}],[\"整体模型\",{\"0\":{\"1167\":1}}],[\"整体逻辑框图\",{\"0\":{\"1117\":1}}],[\"整体结构\",{\"1\":{\"913\":1}}],[\"整体上是一个生产者与消费者模型\",{\"1\":{\"1628\":1}}],[\"整体上\",{\"1\":{\"739\":1,\"749\":1,\"1716\":1}}],[\"整体看下来\",{\"1\":{\"75\":1,\"1238\":1}}],[\"整型\",{\"0\":{\"661\":1},\"1\":{\"846\":1}}],[\"整合所有分支上的提交\",{\"1\":{\"1633\":1}}],[\"整合了大量第三方功能\",{\"1\":{\"1609\":1}}],[\"整合了切面\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"整合进行统一调度\",{\"1\":{\"1222\":1}}],[\"整合\",{\"0\":{\"415\":1,\"1023\":1},\"1\":{\"455\":1,\"487\":1,\"505\":1}}],[\"整个人就开始坐立难安\",{\"1\":{\"1833\":1}}],[\"整个网站处于流量高峰期\",{\"1\":{\"1636\":1}}],[\"整个springboot项目的启动类都是添加\",{\"1\":{\"1598\":1}}],[\"整个事务期间共享该\",{\"1\":{\"1557\":1}}],[\"整个过程中还有自旋\",{\"1\":{\"1515\":1}}],[\"整个过程需要产生4次内核态和用户态的上下文切换\",{\"1\":{\"1486\":1}}],[\"整个过程仅只发生了一次用户态与内核态的切换\",{\"1\":{\"802\":1}}],[\"整个内存空间分为了内核空间和用户空间\",{\"1\":{\"1444\":1}}],[\"整个内核像一个完整的程序\",{\"1\":{\"1441\":1}}],[\"整个流程是这样的\",{\"1\":{\"1337\":1}}],[\"整个集群的资源调度者\",{\"1\":{\"1222\":1}}],[\"整个查询的成本\",{\"1\":{\"729\":1}}],[\"整个mysql进程还有一个系统表空间\",{\"1\":{\"695\":1}}],[\"整个消息集里就保存了所有用户最新的资料\",{\"1\":{\"477\":1}}],[\"整个活动大部分时间流量都不太高\",{\"1\":{\"400\":1}}],[\"整个文件解析\",{\"1\":{\"357\":1}}],[\"整个方法唯一的正常结束点\",{\"1\":{\"6\":1}}],[\"整理流程\",{\"0\":{\"466\":1}}],[\"整理算法\",{\"1\":{\"171\":1,\"173\":1,\"175\":1,\"177\":1,\"179\":1,\"1523\":1,\"1525\":2}}],[\"整理\",{\"0\":{\"170\":1},\"1\":{\"104\":1,\"1523\":1}}],[\"标量替换等技术除外\",{\"1\":{\"1520\":1}}],[\"标量子查询\",{\"0\":{\"608\":1},\"1\":{\"607\":1}}],[\"标注\",{\"1\":{\"1368\":1}}],[\"标注检查\",{\"1\":{\"262\":1}}],[\"标识了\",{\"1\":{\"1418\":1}}],[\"标识线程是否是死胎\",{\"1\":{\"1087\":1}}],[\"标识\",{\"1\":{\"979\":1,\"1170\":1,\"1197\":1,\"1204\":1}}],[\"标识在\",{\"1\":{\"474\":1}}],[\"标识主机上的进程\",{\"1\":{\"340\":1}}],[\"标记了一本以前看的\",{\"1\":{\"1817\":1}}],[\"标记出需要回收的对象\",{\"1\":{\"1523\":1}}],[\"标记位解决\",{\"1\":{\"1513\":1}}],[\"标记可读\",{\"1\":{\"1487\":1}}],[\"标记该页是否存在等\",{\"1\":{\"1443\":1}}],[\"标记为无效\",{\"1\":{\"1435\":1}}],[\"标记数据是否还有效\",{\"1\":{\"1435\":1}}],[\"标记已到达目的主机\",{\"1\":{\"1427\":1}}],[\"标记已被终结\",{\"1\":{\"196\":1}}],[\"标记这个\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"标记当前线程被中断\",{\"1\":{\"1092\":1}}],[\"标记当前已经传播\",{\"1\":{\"935\":1}}],[\"标记当前记录是否被删除\",{\"1\":{\"689\":1}}],[\"标记下一个将读入以ms为单位的过期时间\",{\"1\":{\"913\":1}}],[\"标记下一个将读入数据库编号\",{\"1\":{\"913\":1}}],[\"标记的位置\",{\"1\":{\"773\":1}}],[\"标记本组日志是否由ddl语句产生\",{\"1\":{\"749\":1}}],[\"标记本组是否含delete\",{\"1\":{\"749\":1}}],[\"标记事务的提交顺序\",{\"1\":{\"749\":1}}],[\"标记作为\",{\"1\":{\"532\":1}}],[\"标记消费者所属的消费者组\",{\"1\":{\"485\":1}}],[\"标记所有被这些根对象直接或间接引用的对象为可达对象\",{\"1\":{\"224\":1}}],[\"标记gc\",{\"1\":{\"176\":1,\"177\":1,\"178\":1,\"1525\":2}}],[\"标记整理算法\",{\"1\":{\"170\":1}}],[\"标记复制算法\",{\"1\":{\"169\":1}}],[\"标记清除算法\",{\"1\":{\"168\":1}}],[\"标记完成后\",{\"1\":{\"168\":1}}],[\"标记\",{\"0\":{\"168\":1,\"169\":1,\"170\":1},\"1\":{\"773\":1,\"1347\":1,\"1435\":1,\"1523\":6}}],[\"标准版的背板实在是太tm舒服了\",{\"1\":{\"1819\":1}}],[\"标准化程度很高\",{\"1\":{\"1728\":1}}],[\"标准化路径\",{\"1\":{\"778\":1}}],[\"标准的子集\",{\"1\":{\"1676\":1}}],[\"标准库里的好一点\",{\"1\":{\"82\":1}}],[\"标准自带的\",{\"1\":{\"58\":1}}],[\"标签引用是一个永远指向某个提交对象的对象\",{\"1\":{\"1351\":1}}],[\"标签等以\",{\"1\":{\"1338\":1}}],[\"标签实际上就是创建一个指向\",{\"1\":{\"1332\":1}}],[\"标签分两种类型\",{\"1\":{\"1329\":1}}],[\"标签的逻辑\",{\"1\":{\"1024\":1}}],[\"标签里的\",{\"1\":{\"535\":1}}],[\"标签可以实现多个命名空间共享相同的缓存配置和实例\",{\"1\":{\"533\":1}}],[\"标签将启用全局的二级缓存\",{\"1\":{\"533\":1}}],[\"标签\",{\"0\":{\"1329\":1},\"1\":{\"75\":1}}],[\"边缘触发\",{\"1\":{\"1487\":1}}],[\"边界\",{\"1\":{\"1417\":1}}],[\"边对象唯一\",{\"1\":{\"75\":1}}],[\"边拥有自己的值\",{\"1\":{\"75\":1}}],[\"边是匿名的\",{\"1\":{\"75\":1}}],[\"图形等数据结构\",{\"1\":{\"1543\":1}}],[\"图形化界面工具\",{\"0\":{\"666\":1}}],[\"图形化监控\",{\"1\":{\"236\":1,\"237\":1}}],[\"图片等\",{\"1\":{\"1400\":1}}],[\"图片二进制数据用\",{\"1\":{\"1400\":1}}],[\"图片信息是可以和基本信息并发检索的\",{\"1\":{\"1369\":1}}],[\"图片信息\",{\"1\":{\"1369\":1}}],[\"图片\",{\"1\":{\"1251\":1,\"1398\":1}}],[\"图像\",{\"1\":{\"1212\":1}}],[\"图\",{\"0\":{\"75\":1,\"1388\":1}}],[\"写论文\",{\"1\":{\"1824\":1}}],[\"写了前端\",{\"1\":{\"1782\":1}}],[\"写代码不要假想传进来的任何参数都是正常的\",{\"1\":{\"1781\":1}}],[\"写模式\",{\"1\":{\"1613\":1}}],[\"写模式下\",{\"1\":{\"768\":1}}],[\"写字节到缓冲区\",{\"1\":{\"1502\":1}}],[\"写io队列\",{\"1\":{\"1483\":1}}],[\"写操作时\",{\"1\":{\"1478\":1}}],[\"写数量\",{\"1\":{\"1467\":1}}],[\"写数据成功后\",{\"1\":{\"1205\":1}}],[\"写数据也会改变原来的\",{\"1\":{\"831\":1}}],[\"写数据时\",{\"1\":{\"783\":1}}],[\"写者优先\",{\"1\":{\"1467\":1}}],[\"写者问题\",{\"1\":{\"1467\":1}}],[\"写互斥\",{\"1\":{\"1467\":2}}],[\"写传播\",{\"1\":{\"1435\":1}}],[\"写回磁盘\",{\"1\":{\"1555\":1}}],[\"写回\",{\"1\":{\"1435\":1}}],[\"写直达\",{\"1\":{\"1435\":1}}],[\"写\",{\"1\":{\"1432\":1,\"1553\":3,\"1656\":1}}],[\"写缓存\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"写完\",{\"1\":{\"1205\":1}}],[\"写请求时leader所需的事务协调工作也越多\",{\"1\":{\"1194\":1}}],[\"写指针会随写入字节数移动\",{\"1\":{\"828\":1}}],[\"写方法\",{\"1\":{\"828\":1}}],[\"写索引\",{\"1\":{\"827\":1}}],[\"写出\",{\"1\":{\"799\":1}}],[\"写出来就会产生一个匿名内部类的对象\",{\"1\":{\"298\":1}}],[\"写锁都互斥\",{\"1\":{\"1183\":1}}],[\"写锁\",{\"1\":{\"549\":1,\"552\":1,\"1183\":1}}],[\"写锁时都必须配合stamp\",{\"1\":{\"158\":1}}],[\"写到\",{\"1\":{\"324\":1}}],[\"写的很棒👍\",{\"1\":{\"197\":1}}],[\"写时复制容器\",{\"1\":{\"162\":1}}],[\"写具有原子性\",{\"1\":{\"145\":1}}],[\"写后超出指定时间即失效\",{\"1\":{\"74\":1}}],[\"写入到\",{\"1\":{\"1563\":1}}],[\"写入到从库的中继日志\",{\"1\":{\"648\":1}}],[\"写入自己的\",{\"1\":{\"1563\":1}}],[\"写入磁盘\",{\"1\":{\"1556\":1}}],[\"写入磁盘是随机io\",{\"1\":{\"1555\":1}}],[\"写入系统缓存\",{\"1\":{\"1556\":1}}],[\"写入时机\",{\"1\":{\"1556\":1}}],[\"写入是顺序io\",{\"1\":{\"1555\":1}}],[\"写入源\",{\"1\":{\"1394\":1}}],[\"写入本地的\",{\"1\":{\"1351\":1}}],[\"写入完成后客户端通知\",{\"1\":{\"1220\":1}}],[\"写入或者修改数据时都会产生一个事务\",{\"1\":{\"1174\":1}}],[\"写入与同步\",{\"1\":{\"916\":1}}],[\"写入分隔符\",{\"1\":{\"843\":1}}],[\"写入字符串\",{\"1\":{\"828\":1}}],[\"写入后\",{\"1\":{\"828\":2}}],[\"写入文件末尾即追加\",{\"1\":{\"777\":1}}],[\"写入数据库\",{\"1\":{\"1350\":1}}],[\"写入数据\",{\"0\":{\"771\":1},\"1\":{\"767\":1,\"1435\":1,\"1497\":1}}],[\"写入\",{\"1\":{\"31\":1,\"777\":1,\"824\":1,\"828\":12,\"919\":1,\"1395\":1,\"1497\":1,\"1555\":1,\"1572\":1}}],[\"失败就进入下次循环重试\",{\"1\":{\"1497\":1}}],[\"失败\",{\"1\":{\"822\":1,\"1076\":1,\"1113\":1}}],[\"失败的\",{\"1\":{\"733\":1}}],[\"失败的原因\",{\"1\":{\"420\":1}}],[\"失败会立刻返回\",{\"1\":{\"156\":1}}],[\"失败返回登录页\",{\"1\":{\"15\":1}}],[\"失效的现象\",{\"1\":{\"1435\":1}}],[\"失效\",{\"0\":{\"74\":1},\"1\":{\"1258\":1,\"1581\":1}}],[\"定制化路由\",{\"1\":{\"1302\":1}}],[\"定理逐步演化而来的\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"定理\",{\"0\":{\"1278\":1}}],[\"定长的\",{\"1\":{\"844\":1}}],[\"定长消息\",{\"0\":{\"842\":1}}],[\"定点数\",{\"1\":{\"662\":1}}],[\"定位并修复一个bug所需的代价正比于目标代码规模的平方\",{\"1\":{\"1705\":1}}],[\"定位代码中创建的位置\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"定位大对象\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"定位\",{\"1\":{\"476\":1,\"1435\":1}}],[\"定期从队列中取出请求执行\",{\"1\":{\"1637\":1}}],[\"定期删除+惰性删除\",{\"1\":{\"1573\":1}}],[\"定期删除对内存更加友好\",{\"1\":{\"1573\":1}}],[\"定期删除由redis\",{\"1\":{\"908\":1}}],[\"定期删除\",{\"1\":{\"908\":2,\"1573\":1}}],[\"定期删除机制\",{\"1\":{\"431\":1}}],[\"定期的巡检或者自动纠错都需要这些数据\",{\"1\":{\"421\":1}}],[\"定时\",{\"1\":{\"1572\":1}}],[\"定时事件\",{\"1\":{\"920\":1}}],[\"定时操作的抽象\",{\"1\":{\"918\":1}}],[\"定时删除\",{\"1\":{\"908\":1}}],[\"定时任务这种统一放到\",{\"1\":{\"1245\":1}}],[\"定时任务功能更加强大且安全高效\",{\"1\":{\"1110\":1}}],[\"定时任务的线程池\",{\"1\":{\"1110\":1}}],[\"定时任务\",{\"1\":{\"814\":1,\"871\":1}}],[\"定时器\",{\"0\":{\"334\":1}}],[\"定时刷新\",{\"1\":{\"73\":1}}],[\"定义成单例\",{\"1\":{\"1614\":1}}],[\"定义全局异常处理类\",{\"1\":{\"1608\":1}}],[\"定义全局性的\",{\"1\":{\"1300\":1}}],[\"定义全局事务的范围\",{\"1\":{\"1287\":1}}],[\"定义缓存的各种操作\",{\"1\":{\"1269\":1}}],[\"定义一个类\",{\"1\":{\"1139\":1}}],[\"定义对象的接口\",{\"1\":{\"1128\":1}}],[\"定义对象分解的方式\",{\"1\":{\"83\":2}}],[\"定义需要远程方法调用的接口\",{\"1\":{\"1125\":1}}],[\"定义在object类中\",{\"1\":{\"1512\":1}}],[\"定义在\",{\"1\":{\"1113\":2,\"1114\":1}}],[\"定义获取两个类的方法\",{\"1\":{\"1018\":1}}],[\"定义的逻辑\",{\"1\":{\"1022\":1}}],[\"定义的\",{\"1\":{\"1015\":1,\"1598\":1}}],[\"定义depth层数\",{\"1\":{\"1001\":1}}],[\"定义递归分解问题\",{\"1\":{\"999\":1}}],[\"定义保存点\",{\"1\":{\"734\":1}}],[\"定义可重用的\",{\"1\":{\"531\":1}}],[\"定义日志输出的目的地\",{\"1\":{\"388\":1}}],[\"定义异常继承\",{\"1\":{\"347\":1}}],[\"定义任务类实现callable接口\",{\"1\":{\"329\":1}}],[\"定义任务类继承java\",{\"1\":{\"327\":1}}],[\"定义静态变量存储对象\",{\"1\":{\"290\":1}}],[\"定义静态变量存储单例对象\",{\"1\":{\"290\":1}}],[\"定义类\",{\"1\":{\"290\":2}}],[\"定义了更多提交任务\",{\"1\":{\"1111\":1}}],[\"定义了spring事务管理的工作流\",{\"1\":{\"1048\":1}}],[\"定义了若干不同事物阶段的回调\",{\"1\":{\"1045\":1,\"1383\":1}}],[\"定义了事务的配置\",{\"1\":{\"1043\":1}}],[\"定义了具体的\",{\"1\":{\"1009\":1}}],[\"定义了某个事件发生时服务器应该执行的动作\",{\"1\":{\"919\":1}}],[\"定义了一套操作关系型数据库的统一标准\",{\"1\":{\"569\":1}}],[\"定义了一套命令\",{\"1\":{\"405\":1}}],[\"定义了一套日志接口\",{\"1\":{\"376\":1}}],[\"定义了一系列读写的方法\",{\"1\":{\"82\":1}}],[\"定义了引用实例的通用操作\",{\"1\":{\"185\":1}}],[\"定义了主存\",{\"1\":{\"142\":1}}],[\"定义\",{\"0\":{\"878\":1},\"1\":{\"122\":1,\"420\":1,\"421\":1,\"1018\":2,\"1025\":1}}],[\"定义索引的字段\",{\"1\":{\"42\":1}}],[\"移位\",{\"0\":{\"1664\":1}}],[\"移动端体验不佳\",{\"1\":{\"1804\":1}}],[\"移动端通信\",{\"1\":{\"407\":1}}],[\"移动时必须\",{\"1\":{\"1523\":1}}],[\"移动到指定提交上\",{\"1\":{\"1324\":1}}],[\"移动\",{\"1\":{\"1218\":1,\"1344\":1}}],[\"移动文件\",{\"1\":{\"779\":1}}],[\"移动对象时不需要改变reference\",{\"1\":{\"216\":1}}],[\"移动存活对象并清理旧region的全部空间\",{\"1\":{\"177\":1,\"1525\":1}}],[\"移出\",{\"1\":{\"184\":1}}],[\"移除最不经常使用的\",{\"1\":{\"1574\":1}}],[\"移除最近最少使用的\",{\"1\":{\"1574\":1}}],[\"移除未被跟踪文件\",{\"1\":{\"1343\":1}}],[\"移除某个远程仓库\",{\"1\":{\"1326\":1}}],[\"移除出线程组\",{\"1\":{\"1093\":1}}],[\"移除之前装载的超时钩子\",{\"1\":{\"965\":1}}],[\"移除没用的条件\",{\"1\":{\"724\":1}}],[\"移除不必要的括号\",{\"1\":{\"724\":1}}],[\"移除还没有准备好的节点\",{\"1\":{\"450\":1}}],[\"移除等操作\",{\"1\":{\"184\":1}}],[\"移除队列中的一个元素\",{\"1\":{\"184\":1}}],[\"移除一个元素\",{\"1\":{\"184\":1}}],[\"移除\",{\"1\":{\"67\":1,\"422\":1,\"988\":1,\"1528\":1}}],[\"移入某个条件对象的条件队列\",{\"1\":{\"8\":1}}],[\"任期\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"任期的编号\",{\"1\":{\"1204\":1}}],[\"任何元素顺序不一致都是不同的解\",{\"1\":{\"1672\":1}}],[\"任何数和自身做异或结果是0\",{\"1\":{\"1662\":1}}],[\"任何数和0做异或\",{\"1\":{\"1662\":1}}],[\"任何情况下都不回收此对象\",{\"1\":{\"1522\":1}}],[\"任何时候都可能被回收\",{\"1\":{\"1522\":1}}],[\"任何时刻仅有一个进程访问\",{\"1\":{\"1460\":1}}],[\"任何时间点\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"任何写操作都将导致主从不一致\",{\"1\":{\"934\":1}}],[\"任何隔离级别都不允许\",{\"1\":{\"737\":1}}],[\"任何消费者都属于某个消费者组\",{\"1\":{\"443\":1,\"481\":1}}],[\"任何其它语言的实现者都可以将java虚拟机作为它们语言的运行基础\",{\"1\":{\"239\":1}}],[\"任何不可变集合可以转变为\",{\"1\":{\"64\":1}}],[\"任意位置都可以是任意未使用的元素\",{\"1\":{\"1672\":1}}],[\"任意速率流入\",{\"1\":{\"1637\":1}}],[\"任意一个\",{\"1\":{\"1528\":1}}],[\"任意一台服务器需要保存所有服务器集群的\",{\"1\":{\"19\":1}}],[\"任意服务器一定会处于以下三个状态中的一个\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"任意sentinel发送的信息\",{\"1\":{\"940\":1}}],[\"任意上下文执行\",{\"1\":{\"365\":1}}],[\"任意精度的带符号小数\",{\"1\":{\"112\":1}}],[\"任务\",{\"1\":{\"1225\":1,\"1511\":1}}],[\"任务后置\",{\"1\":{\"1115\":1}}],[\"任务繁忙时会一直创建线程执行\",{\"1\":{\"1107\":1,\"1511\":1}}],[\"任务过多时的拒绝策略\",{\"1\":{\"1106\":1,\"1511\":1}}],[\"任务到达时\",{\"1\":{\"1104\":1}}],[\"任务是否完成\",{\"1\":{\"822\":1}}],[\"任务是否取消\",{\"1\":{\"822\":1}}],[\"任务队列已满\",{\"1\":{\"1113\":1}}],[\"任务队列最大长度为integer\",{\"1\":{\"1110\":1}}],[\"任务队列最大长度为\",{\"1\":{\"1110\":1}}],[\"任务队列也已经填满的情况\",{\"1\":{\"1109\":1}}],[\"任务队列也满了\",{\"1\":{\"332\":2}}],[\"任务队列\",{\"0\":{\"1107\":1},\"1\":{\"332\":1,\"1106\":2,\"1107\":1,\"1511\":2}}],[\"任务满的时候\",{\"1\":{\"332\":1}}],[\"任务类需要继承\",{\"1\":{\"153\":1}}],[\"任务失败时的回调\",{\"1\":{\"77\":1}}],[\"任务成功时的回调\",{\"1\":{\"77\":1}}],[\"克隆\",{\"1\":{\"1527\":1}}],[\"克隆远程仓库并指定一个引用名\",{\"1\":{\"1338\":1}}],[\"克隆即是自己\",{\"1\":{\"64\":1}}],[\"克隆和拷贝\",{\"1\":{\"64\":1}}],[\"逻辑复杂\",{\"1\":{\"1752\":1}}],[\"逻辑如下\",{\"1\":{\"1021\":1}}],[\"逻辑非~等操作\",{\"1\":{\"977\":1}}],[\"逻辑异或^\",{\"1\":{\"977\":1}}],[\"逻辑上相距越远\",{\"1\":{\"886\":1}}],[\"逻辑上被分成两个\",{\"1\":{\"9\":1}}],[\"逻辑表\",{\"1\":{\"655\":1}}],[\"逻辑判断\",{\"1\":{\"632\":1}}],[\"逻辑运算单元\",{\"1\":{\"1432\":1}}],[\"逻辑运算符\",{\"1\":{\"583\":1}}],[\"逻辑运算等\",{\"1\":{\"241\":1}}],[\"逻辑和查询很类似\",{\"1\":{\"544\":1}}],[\"逻辑值\",{\"1\":{\"474\":1}}],[\"逻辑或|\",{\"1\":{\"288\":1,\"977\":1}}],[\"逻辑与\",{\"1\":{\"288\":1}}],[\"逻辑\",{\"1\":{\"64\":1}}],[\"否则功能上各种限制\",{\"1\":{\"1805\":1}}],[\"否则显示a\",{\"1\":{\"1740\":1}}],[\"否则仅发送关闭信号\",{\"1\":{\"1699\":1}}],[\"否则创建同名组自动加入\",{\"1\":{\"1692\":1}}],[\"否则创建新线程处理任务\",{\"1\":{\"1110\":1}}],[\"否则写入\",{\"1\":{\"1658\":1}}],[\"否则写入checkpoint2\",{\"1\":{\"741\":1}}],[\"否则是容量较大的堆的堆顶元素\",{\"1\":{\"1658\":1}}],[\"否则是能够保证持久性的\",{\"1\":{\"739\":1,\"1555\":1}}],[\"否则还要取出字段判断是否为空再修改计数器\",{\"1\":{\"1568\":1}}],[\"否则回滚事务\",{\"1\":{\"1556\":1}}],[\"否则采用\",{\"1\":{\"1532\":1}}],[\"否则采用头插法的方式把当前旧table数组的指定任务范围的数据给迁移到新的数组中\",{\"1\":{\"1497\":1}}],[\"否则向后迭代查找\",{\"1\":{\"1514\":1}}],[\"否则不做任何操作\",{\"1\":{\"1513\":1}}],[\"否则不一致\",{\"1\":{\"935\":1}}],[\"否则按链表\",{\"1\":{\"1497\":1}}],[\"否则放弃本次操作\",{\"1\":{\"1468\":1}}],[\"否则自旋的线程永远不会放弃\",{\"1\":{\"1468\":1}}],[\"否则表项太多查询效率低\",{\"1\":{\"1477\":1}}],[\"否则表明当前没有阻塞中的进程\",{\"1\":{\"1460\":1}}],[\"否则表明还有资源可使用\",{\"1\":{\"1460\":1}}],[\"否则表示局部领头sentinel的运行id\",{\"1\":{\"941\":1}}],[\"否则停留在\",{\"1\":{\"1448\":1}}],[\"否则一直囤积数据\",{\"1\":{\"1412\":1}}],[\"否则一直重试\",{\"1\":{\"936\":1}}],[\"否则拒绝该请求并让该节点更新\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"否则以非事务的方式继续运行\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"否则抛出异常\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"否则新建事务\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"否则该值为零\",{\"1\":{\"1174\":1}}],[\"否则该消息将被直接丢弃\",{\"1\":{\"424\":1}}],[\"否则尝试增加新的\",{\"1\":{\"1120\":1}}],[\"否则就是空闲状态没有在处理任务\",{\"1\":{\"1114\":1}}],[\"否则暂存在一个无界的任务队列中\",{\"1\":{\"1110\":1}}],[\"否则会抛出非法线程状态的异常\",{\"1\":{\"1090\":1}}],[\"否则会从行锁升级为表锁\",{\"1\":{\"620\":1}}],[\"否则的话\",{\"1\":{\"1050\":1,\"1051\":1,\"1497\":1}}],[\"否则检查migrating\",{\"1\":{\"947\":1}}],[\"否则节点返回moved\",{\"1\":{\"947\":1}}],[\"否则为0\",{\"1\":{\"941\":1}}],[\"否则断开重连\",{\"1\":{\"936\":1}}],[\"否则浏览器会持续读取\",{\"1\":{\"846\":1}}],[\"否则后续仍然会触发\",{\"1\":{\"786\":1}}],[\"否则可以访问\",{\"1\":{\"754\":1,\"1557\":1}}],[\"否则即为最后一个需要恢复的block\",{\"1\":{\"742\":1}}],[\"否则b+树结构将不完整\",{\"1\":{\"739\":1}}],[\"否则称连续范围区间\",{\"1\":{\"710\":1}}],[\"否则\",{\"1\":{\"633\":1,\"818\":1,\"897\":1,\"898\":1,\"899\":1,\"900\":1,\"1369\":1,\"1595\":1}}],[\"否则using\",{\"1\":{\"616\":1}}],[\"否则返回\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"否则返回default默认值\",{\"1\":{\"596\":2}}],[\"否则返回value2\",{\"1\":{\"596\":1}}],[\"否则返回f\",{\"1\":{\"596\":1}}],[\"否则分区分配就不是完全的轮询分配\",{\"1\":{\"496\":1}}],[\"否则使用基于继承的cglib代理\",{\"1\":{\"1601\":1}}],[\"否则使用rdb文件\",{\"1\":{\"929\":1}}],[\"否则使用\",{\"1\":{\"417\":1,\"1115\":1}}],[\"否则使用线性探测法\",{\"1\":{\"154\":1}}],[\"否则线程可能一直阻塞\",{\"1\":{\"365\":1}}],[\"否则必须执行finally块\",{\"1\":{\"346\":1}}],[\"否则在当前线程执行\",{\"1\":{\"163\":1}}],[\"否则执行创建数据库操作\",{\"1\":{\"107\":1}}],[\"否则包装成\",{\"1\":{\"62\":1}}],[\"否则需要重新创建索引\",{\"1\":{\"45\":1}}],[\"看淡人生\",{\"1\":{\"1849\":1}}],[\"看着男男女女\",{\"1\":{\"1847\":1}}],[\"看着沿途灯光灿烂的高楼大厦\",{\"1\":{\"1786\":1}}],[\"看不到沿途的风景\",{\"1\":{\"1833\":1}}],[\"看的老子哇啦哇啦的\",{\"1\":{\"1826\":1}}],[\"看完白鹿原上两代人的波折命运\",{\"1\":{\"1826\":1}}],[\"看完又回去接着上班\",{\"1\":{\"1781\":1}}],[\"看6本\",{\"1\":{\"1817\":1}}],[\"看书\",{\"1\":{\"1815\":1}}],[\"看到wj她们的消息\",{\"1\":{\"1844\":1}}],[\"看到很多海鸥\",{\"1\":{\"1843\":1}}],[\"看到了南迦巴瓦和彩虹同框\",{\"1\":{\"1841\":1}}],[\"看到的人们\",{\"1\":{\"1825\":1}}],[\"看到那一坨坨shit依赖管理我真的强迫症要犯了\",{\"1\":{\"1779\":1}}],[\"看到数据的趋势\",{\"1\":{\"31\":1}}],[\"看了马踏飞燕\",{\"1\":{\"1848\":1}}],[\"看了况露兄的\",{\"1\":{\"1832\":1}}],[\"看了下源码\",{\"1\":{\"1791\":1}}],[\"看了三个房\",{\"1\":{\"1771\":1}}],[\"看了一下文档和\",{\"1\":{\"62\":1}}],[\"看立场\",{\"1\":{\"1767\":1}}],[\"看待国际关系\",{\"1\":{\"1767\":1}}],[\"看成\",{\"1\":{\"1675\":1}}],[\"看门狗不续命\",{\"1\":{\"1264\":1}}],[\"看自己定义的\",{\"1\":{\"998\":1}}],[\"看是否可以将多个页合并以优化空间使用\",{\"1\":{\"615\":1}}],[\"看看业务是否能稳定运行\",{\"1\":{\"1639\":1}}],[\"看看\",{\"1\":{\"863\":1}}],[\"看看具体的加载逻辑\",{\"1\":{\"541\":1}}],[\"看看这些桥接包吧\",{\"1\":{\"380\":1}}],[\"个座位\",{\"1\":{\"1736\":1}}],[\"个以上座位\",{\"1\":{\"1736\":1}}],[\"个事务后\",{\"1\":{\"1556\":1}}],[\"个线程\",{\"1\":{\"1464\":1,\"1631\":1}}],[\"个重复的\",{\"1\":{\"1413\":1}}],[\"个换行符\",{\"1\":{\"1332\":1}}],[\"个辅助角色\",{\"1\":{\"1222\":1}}],[\"个节点的\",{\"1\":{\"1202\":1}}],[\"个数受限\",{\"1\":{\"1487\":1}}],[\"个数和任务队列的状态来判断是否移除或添加\",{\"1\":{\"1115\":1}}],[\"个数超过一个时\",{\"1\":{\"834\":1}}],[\"个数\",{\"1\":{\"791\":2,\"1567\":1}}],[\"个指针\",{\"1\":{\"698\":1}}],[\"个key\",{\"1\":{\"698\":1}}],[\"个字节的\",{\"1\":{\"1332\":1}}],[\"个字节的内容长度\",{\"1\":{\"844\":1}}],[\"个字节后\",{\"1\":{\"768\":1}}],[\"个字节后的状态\",{\"1\":{\"768\":1}}],[\"个字节\",{\"1\":{\"662\":3,\"665\":5}}],[\"个字符\",{\"1\":{\"318\":1}}],[\"个引用的\",{\"1\":{\"533\":1}}],[\"个顶级元素\",{\"1\":{\"529\":1}}],[\"个分区\",{\"1\":{\"495\":1}}],[\"个分区影响不大\",{\"1\":{\"495\":1}}],[\"个\",{\"1\":{\"469\":1,\"495\":2,\"978\":1,\"1110\":1,\"1333\":1}}],[\"个人方案\",{\"1\":{\"1811\":1}}],[\"个人还是非常支持的\",{\"1\":{\"1810\":1}}],[\"个人非常不推荐\",{\"1\":{\"1804\":1}}],[\"个人观影指北\",{\"0\":{\"1802\":1}}],[\"个人觉得\",{\"1\":{\"82\":1}}],[\"个人主页\",{\"0\":{\"0\":1}}],[\"个元素\",{\"1\":{\"61\":1}}],[\"按序消费\",{\"1\":{\"1625\":1}}],[\"按表中的非主键建立的索引\",{\"1\":{\"1545\":1}}],[\"按表中的主键建立的索引\",{\"1\":{\"1545\":1}}],[\"按时间片均匀分布每个进程的\",{\"1\":{\"1483\":1}}],[\"按从小到大的序号申请\",{\"1\":{\"1466\":1}}],[\"按编号顺序申请\",{\"1\":{\"1466\":1}}],[\"按内存布局顺序访问\",{\"1\":{\"1435\":1}}],[\"按需下载\",{\"1\":{\"1400\":1}}],[\"按需获取\",{\"1\":{\"406\":1}}],[\"按顺序复制分发\",{\"1\":{\"1220\":1}}],[\"按顺序抽取\",{\"1\":{\"127\":1}}],[\"按执行先后在节点后带上一个单调递增的数值\",{\"1\":{\"1169\":1}}],[\"按块的大小\",{\"1\":{\"1130\":1}}],[\"按每字节处理存入结果result\",{\"1\":{\"977\":1}}],[\"按指定键\",{\"1\":{\"969\":1}}],[\"按id\",{\"1\":{\"920\":1}}],[\"按字符串对象保存\",{\"1\":{\"913\":1}}],[\"按严重程度排序\",{\"1\":{\"736\":1}}],[\"按存储方式分两种\",{\"1\":{\"719\":1}}],[\"按使用位置存储在engine\",{\"1\":{\"716\":1}}],[\"按列逆序放置正是为了提高缓冲命中率\",{\"1\":{\"689\":1}}],[\"按列逆序\",{\"1\":{\"684\":1}}],[\"按列逆序存放\",{\"1\":{\"684\":1}}],[\"按天分片算法\",{\"1\":{\"656\":1}}],[\"按粒度分为分库和分表\",{\"1\":{\"652\":1}}],[\"按形式分为垂直拆分\",{\"1\":{\"652\":1}}],[\"按\",{\"1\":{\"470\":1,\"496\":1,\"1567\":2}}],[\"按上述规则选举新\",{\"1\":{\"466\":1}}],[\"按功能分类\",{\"1\":{\"405\":1}}],[\"按键有序\",{\"1\":{\"305\":1}}],[\"按照数据查询量收取流量费用\",{\"1\":{\"1737\":1}}],[\"按照固定的优先顺序进行行政性分配\",{\"1\":{\"1730\":1}}],[\"按照执行计划从存储引擎中获取数据\",{\"1\":{\"1566\":1}}],[\"按照特性的范围区间分配数据\",{\"1\":{\"1564\":1}}],[\"按照一定的次序\",{\"1\":{\"1389\":1}}],[\"按照一定策略\",{\"1\":{\"652\":2}}],[\"按照月份来分片\",{\"1\":{\"656\":1}}],[\"按照日期及对应的时间周期分片\",{\"1\":{\"656\":1}}],[\"按照节点分组\",{\"1\":{\"450\":1}}],[\"按照完全随机分桶\",{\"1\":{\"127\":1}}],[\"按照\",{\"1\":{\"72\":1,\"211\":1}}],[\"按排序器逻辑最小的元素\",{\"1\":{\"61\":1}}],[\"按排序器的逻辑最大的\",{\"1\":{\"61\":1}}],[\"按对象的\",{\"1\":{\"61\":1}}],[\"逆序\",{\"1\":{\"61\":1}}],[\"元注解\",{\"1\":{\"348\":1}}],[\"元数据的验证\",{\"1\":{\"1527\":1}}],[\"元数据一致\",{\"1\":{\"1479\":1}}],[\"元数据包括表名\",{\"1\":{\"1224\":1}}],[\"元数据存储\",{\"1\":{\"1224\":1}}],[\"元数据管理\",{\"1\":{\"1224\":1}}],[\"元数据等\",{\"1\":{\"1074\":1}}],[\"元数据锁\",{\"0\":{\"553\":1},\"1\":{\"551\":1}}],[\"元数据保存在\",{\"1\":{\"448\":1}}],[\"元数据验证\",{\"1\":{\"250\":1}}],[\"元数据域\",{\"1\":{\"42\":1}}],[\"元空间不足\",{\"1\":{\"1524\":1}}],[\"元空间取代\",{\"1\":{\"1520\":1}}],[\"元空间\",{\"1\":{\"211\":1}}],[\"元素可重问题通常都要先对数组排序\",{\"1\":{\"1677\":1}}],[\"元素可重排列解法2\",{\"1\":{\"1675\":1}}],[\"元素可重排列解法1\",{\"1\":{\"1675\":1}}],[\"元素从小到大\",{\"1\":{\"888\":1}}],[\"元素数量\",{\"1\":{\"888\":1}}],[\"元素中的\",{\"1\":{\"518\":1}}],[\"元素体内指定的属性\",{\"1\":{\"518\":1}}],[\"元素间通过\",{\"1\":{\"188\":1}}],[\"元素通过reference\",{\"1\":{\"186\":1}}],[\"元素个数\",{\"1\":{\"122\":1}}],[\"元素总数\",{\"1\":{\"66\":1}}],[\"元素前置\",{\"1\":{\"61\":1}}],[\"随风而舞的经幡飘动一下\",{\"1\":{\"1842\":1}}],[\"随笔\",{\"2\":{\"1768\":1}}],[\"随后\",{\"1\":{\"1332\":1}}],[\"随后将执行完整的sync操作\",{\"1\":{\"935\":1}}],[\"随后将发送缺失的数据\",{\"1\":{\"935\":1}}],[\"随时可以看数据\",{\"1\":{\"442\":1}}],[\"随线程生灭\",{\"1\":{\"203\":1}}],[\"随机一个新的超时时间\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"随机桶抽样\",{\"1\":{\"1226\":1}}],[\"随机桶抽取\",{\"1\":{\"127\":1}}],[\"随机io速度慢\",{\"1\":{\"738\":1}}],[\"随机预读\",{\"1\":{\"732\":1}}],[\"随机唤醒该条件变量上等待的线程\",{\"1\":{\"156\":1}}],[\"随机数等信息生成唯一\",{\"1\":{\"1622\":1}}],[\"随机数\",{\"1\":{\"129\":1}}],[\"随机排序\",{\"1\":{\"61\":1}}],[\"随着接收到的数据\",{\"1\":{\"1412\":1}}],[\"随着\",{\"1\":{\"1332\":1}}],[\"随着业务发展的需要\",{\"1\":{\"1262\":1}}],[\"随着科技的发展\",{\"1\":{\"1211\":1}}],[\"随着字典操作的不断执行\",{\"1\":{\"883\":1}}],[\"随着互联网及移动互联网的发展\",{\"1\":{\"651\":1}}],[\"随着据量的增加\",{\"1\":{\"442\":1}}],[\"随着类的加载而加载\",{\"1\":{\"289\":1}}],[\"随着数据不断的更新\",{\"1\":{\"34\":1}}],[\"随着被\",{\"1\":{\"6\":1}}],[\"比手上的\",{\"1\":{\"1819\":1}}],[\"比互联网的应用可能早了20~30年\",{\"1\":{\"1721\":1}}],[\"比进程和线程上下文切换更快\",{\"1\":{\"1454\":1}}],[\"比流量网关更靠近业务系统\",{\"1\":{\"1300\":1}}],[\"比自己大\",{\"1\":{\"1203\":2}}],[\"比所有数都大\",{\"1\":{\"998\":1}}],[\"比较暂存区和数据库里最新版本的差异\",{\"1\":{\"1317\":1}}],[\"比较当前工作区和暂存区文件差异\",{\"1\":{\"1317\":1}}],[\"比较简单\",{\"1\":{\"819\":1,\"1283\":1}}],[\"比较运算符\",{\"1\":{\"583\":1}}],[\"比较接口\",{\"1\":{\"304\":1,\"305\":1}}],[\"比较器\",{\"1\":{\"304\":1,\"305\":1}}],[\"比较器链\",{\"1\":{\"60\":1}}],[\"比较并交换\",{\"1\":{\"148\":1}}],[\"比传统的concurrenthashmap功能更加强大\",{\"1\":{\"72\":1}}],[\"比如大名鼎鼎的misakaf\",{\"1\":{\"1809\":1}}],[\"比如一直提示你备份自己的相册\",{\"1\":{\"1805\":1}}],[\"比如一个\",{\"1\":{\"788\":1}}],[\"比如低端影视的视频质量蛮高的\",{\"1\":{\"1804\":1}}],[\"比如通过\",{\"1\":{\"1791\":1}}],[\"比如代码推送\",{\"1\":{\"1790\":1}}],[\"比如跑步\",{\"1\":{\"1786\":1}}],[\"比如e舱和m舱都是经济舱\",{\"1\":{\"1735\":1}}],[\"比如网站抓取\",{\"1\":{\"1727\":1}}],[\"比如2020\",{\"1\":{\"1722\":1}}],[\"比如库名\",{\"1\":{\"1539\":1}}],[\"比如无视泛型参数的安全检查\",{\"1\":{\"1531\":1}}],[\"比如块个数\",{\"1\":{\"1474\":1}}],[\"比如控制一个页的读写权限\",{\"1\":{\"1443\":1}}],[\"比如硬盘上的\",{\"1\":{\"1443\":1}}],[\"比如默认的\",{\"1\":{\"1332\":1}}],[\"比如作者\",{\"1\":{\"1332\":1}}],[\"比如跟踪新文件\",{\"1\":{\"1315\":1}}],[\"比如全局流量监控\",{\"1\":{\"1300\":1}}],[\"比如手动查询\",{\"1\":{\"1236\":1}}],[\"比如内存泄漏\",{\"1\":{\"1136\":1}}],[\"比如延时定时线程池scheduledthreadpoolexecutor\",{\"1\":{\"1104\":1}}],[\"比如是否新事务\",{\"1\":{\"1042\":1}}],[\"比如事务超时时间\",{\"1\":{\"1042\":1}}],[\"比如在事务方法\",{\"1\":{\"1041\":1}}],[\"比如在往数据库里添加数据时\",{\"1\":{\"1031\":1}}],[\"比如时间\",{\"1\":{\"920\":1}}],[\"比如下面的例子\",{\"1\":{\"623\":1}}],[\"比如消息的key是用户id\",{\"1\":{\"477\":1}}],[\"比如将上面的客户端请求发送出去\",{\"1\":{\"450\":1}}],[\"比如从第三方平台中接收数据\",{\"1\":{\"398\":1}}],[\"比如从网络中加载类\",{\"1\":{\"254\":1}}],[\"比如public\",{\"1\":{\"240\":1}}],[\"比如用户信息\",{\"1\":{\"154\":1,\"1514\":1}}],[\"比如\",{\"1\":{\"82\":1,\"378\":1,\"432\":1,\"480\":1,\"499\":1,\"511\":1,\"1178\":1,\"1251\":1,\"1511\":2,\"1539\":1,\"1597\":2,\"1729\":1}}],[\"比如包含\",{\"1\":{\"81\":1}}],[\"比如模糊查询\",{\"1\":{\"35\":1}}],[\"比如数据分片\",{\"1\":{\"34\":1}}],[\"避免产生相同的子树\",{\"1\":{\"1675\":1}}],[\"避免产生重复子集\",{\"1\":{\"1670\":1}}],[\"避免产生重复的子集\",{\"1\":{\"1670\":1}}],[\"避免越界\",{\"1\":{\"1657\":1}}],[\"避免瞬时流量高峰冲垮系统\",{\"1\":{\"1638\":1}}],[\"避免瞬时的大量请求击垮软件系统\",{\"1\":{\"1637\":1}}],[\"避免资源间的版本冲突问题\",{\"1\":{\"1632\":1}}],[\"避免资源浪费和连接延迟\",{\"1\":{\"1410\":1}}],[\"避免全表扫描\",{\"1\":{\"1566\":1}}],[\"避免索引失效\",{\"1\":{\"1548\":1}}],[\"避免安全问题\",{\"1\":{\"1536\":1}}],[\"避免类的重复加载\",{\"1\":{\"1528\":1}}],[\"避免多线程写的时候拷贝多份副本\",{\"1\":{\"1498\":1}}],[\"避免多线程阻塞问题\",{\"1\":{\"791\":1}}],[\"避免死锁银行家算法\",{\"1\":{\"1466\":1}}],[\"避免热点数据不会被轻易替换掉\",{\"1\":{\"1448\":1}}],[\"避免进入直接内存回收阻塞进程\",{\"1\":{\"1446\":1}}],[\"避免线程在不同核心来回切换\",{\"1\":{\"1435\":1}}],[\"避免增长过快导致网络拥塞\",{\"1\":{\"1413\":1}}],[\"避免双方持久等待\",{\"1\":{\"1412\":1}}],[\"避免网络切换后的握手\",{\"1\":{\"1404\":1}}],[\"避免发送请求\",{\"1\":{\"1400\":1}}],[\"避免单点故障\",{\"1\":{\"1258\":1,\"1581\":1,\"1638\":1}}],[\"避免后期对象变更需要重新加日志处理代码\",{\"1\":{\"1245\":1}}],[\"避免代码重排序\",{\"1\":{\"1142\":1}}],[\"避免垃圾回收影响\",{\"1\":{\"1136\":1}}],[\"避免同一个类中没有事务注解的方法调用有事务注解的方法\",{\"1\":{\"1061\":1}}],[\"避免同一个表中某数据列中的值重复\",{\"1\":{\"699\":1}}],[\"避免副作用\",{\"1\":{\"963\":1}}],[\"避免对时间事件频繁轮询也避免阻塞时间过长\",{\"1\":{\"921\":1}}],[\"避免对主键的修改\",{\"1\":{\"615\":1}}],[\"避免用锁保证数据安全\",{\"1\":{\"917\":1}}],[\"避免数据丢失\",{\"1\":{\"910\":1}}],[\"避免因为缓冲区溢出或者缓冲区太小导致的性能问题\",{\"1\":{\"859\":1}}],[\"避免频繁创建的开销\",{\"1\":{\"851\":1}}],[\"避免频繁地创建和销毁缓冲区\",{\"1\":{\"825\":1}}],[\"避免非阻塞模式下做无用功\",{\"1\":{\"784\":1}}],[\"避免冗余和重复索引\",{\"1\":{\"708\":1}}],[\"避免回表\",{\"1\":{\"708\":1,\"1548\":1}}],[\"避免回表查询\",{\"1\":{\"706\":1}}],[\"避免\",{\"1\":{\"553\":1}}],[\"避免书写冗余的全限定名\",{\"1\":{\"520\":1}}],[\"避免重复打印日志\",{\"1\":{\"391\":1}}],[\"避免重复加载和类冲突\",{\"1\":{\"254\":1}}],[\"避免了多个线程之间切换和锁资源的开销\",{\"1\":{\"1571\":1}}],[\"避免了内存泄漏\",{\"1\":{\"825\":1}}],[\"避免了数据在应用程序和内核空间之间的复制\",{\"1\":{\"825\":1}}],[\"避免了引用计数算法可能存在的循环引用问题\",{\"1\":{\"224\":1}}],[\"避免了竞态条件\",{\"1\":{\"64\":1}}],[\"避免稍后被回收\",{\"1\":{\"196\":1}}],[\"避免内存泄漏\",{\"1\":{\"154\":1}}],[\"避免空指针异常\",{\"1\":{\"60\":1}}],[\"避免混淆null\",{\"1\":{\"58\":1}}],[\"抛开这些历史问题\",{\"1\":{\"1847\":1}}],[\"抛弃\",{\"1\":{\"1344\":1}}],[\"抛弃某个贮藏\",{\"1\":{\"1343\":1}}],[\"抛弃队列中等待最久的任务\",{\"1\":{\"332\":1,\"1109\":1,\"1511\":1}}],[\"抛出的异常必须是unchecked\",{\"1\":{\"1061\":1}}],[\"抛出concurrentmodifificationexception\",{\"1\":{\"162\":1}}],[\"抛出\",{\"1\":{\"62\":1,\"1533\":1}}],[\"抛出异常\",{\"1\":{\"59\":1,\"822\":1,\"988\":1,\"1041\":2,\"1049\":1,\"1511\":1}}],[\"抛异常\",{\"1\":{\"58\":1,\"1049\":1}}],[\"仅下载音频\",{\"1\":{\"1877\":1}}],[\"仅作为文件备份盘\",{\"1\":{\"1811\":1}}],[\"仅作为中间路由\",{\"1\":{\"544\":1}}],[\"仅限于\",{\"1\":{\"1693\":1}}],[\"仅封装不压缩\",{\"1\":{\"1688\":1}}],[\"仅追加文件\",{\"0\":{\"1577\":1}}],[\"仅重置自增计数器\",{\"1\":{\"1567\":1}}],[\"仅重新标记阶段需要stw\",{\"1\":{\"1525\":1}}],[\"仅写写互斥需要同步\",{\"1\":{\"1498\":1}}],[\"仅写操作排他\",{\"1\":{\"1498\":1}}],[\"仅影响该节点在哈希环上顺时针相邻的后继节点\",{\"1\":{\"1489\":1}}],[\"仅有水平触发\",{\"1\":{\"1487\":1}}],[\"仅有一票\",{\"1\":{\"1203\":1}}],[\"仅有一个节点能当选成功\",{\"1\":{\"948\":1}}],[\"仅在叶子节点存放数据\",{\"1\":{\"1546\":1}}],[\"仅在传输开始和结束时干预\",{\"1\":{\"1481\":1}}],[\"仅在ip层分片\",{\"1\":{\"1416\":1}}],[\"仅存在结点之间的关联关系\",{\"1\":{\"1516\":1}}],[\"仅存在于内存\",{\"1\":{\"1456\":1}}],[\"仅存储trx\",{\"1\":{\"750\":1}}],[\"仅一个核心存储该\",{\"1\":{\"1435\":1}}],[\"仅仅表示客户端不再发送数据了但是还能接收数据\",{\"1\":{\"1410\":1}}],[\"仅仅保证对单个\",{\"1\":{\"145\":1}}],[\"仅当有类主动去使用该class\",{\"1\":{\"1527\":1}}],[\"仅当\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"仅strong策略下才生效\",{\"1\":{\"1148\":1}}],[\"仅能提交\",{\"1\":{\"1113\":1}}],[\"仅能增删改临时表\",{\"1\":{\"744\":1}}],[\"仅需常量空间复杂度\",{\"1\":{\"976\":1}}],[\"仅aof持久化模式下\",{\"1\":{\"961\":1}}],[\"仅含下线节点名字一个属性\",{\"1\":{\"949\":1}}],[\"仅用于运行\",{\"1\":{\"1632\":1}}],[\"仅用于测试\",{\"1\":{\"1632\":1}}],[\"仅用于存放runnable对象\",{\"1\":{\"1511\":1}}],[\"仅用于交换分区\",{\"1\":{\"1447\":1}}],[\"仅用于对时间精度要求不高的功能\",{\"1\":{\"928\":1}}],[\"仅用于等值比较\",{\"1\":{\"710\":1}}],[\"仅对包含整数值的字符串对象进行共享\",{\"1\":{\"901\":1}}],[\"仅对尾部模糊匹配不会失效\",{\"1\":{\"703\":1}}],[\"仅新增维护指针\",{\"1\":{\"832\":1}}],[\"仅针对网络\",{\"1\":{\"784\":1}}],[\"仅实际增删改时才分配\",{\"1\":{\"754\":1,\"1557\":1}}],[\"仅适用于活跃的\",{\"1\":{\"1420\":1}}],[\"仅适用于不常修改的数据\",{\"1\":{\"570\":1}}],[\"仅适用于当前域名下的用户跟踪\",{\"1\":{\"17\":1}}],[\"仅依赖slf4j\",{\"1\":{\"382\":2}}],[\"仅包括一级\",{\"1\":{\"314\":1}}],[\"仅开启方法及回边次数统计等有限的性能监控\",{\"1\":{\"267\":1}}],[\"仅输出java进程的pid\",{\"1\":{\"229\":1}}],[\"仅引用是\",{\"1\":{\"196\":2}}],[\"仅是为了执行\",{\"1\":{\"195\":1}}],[\"仅相加\",{\"1\":{\"150\":2}}],[\"仅让出cpu\",{\"1\":{\"139\":1}}],[\"仅注册\",{\"1\":{\"91\":1}}],[\"仅支持阻塞\",{\"1\":{\"760\":1}}],[\"仅支持mac\",{\"1\":{\"666\":1}}],[\"仅支持\",{\"1\":{\"67\":1,\"404\":1,\"1625\":1}}],[\"仅\",{\"1\":{\"59\":1,\"469\":1,\"563\":1}}],[\"9fceb02\",{\"1\":{\"1329\":1}}],[\"96\",{\"1\":{\"1155\":1}}],[\"912\",{\"1\":{\"989\":1}}],[\"9999的整数值进行共享\",{\"1\":{\"901\":1}}],[\"9999\",{\"1\":{\"665\":2}}],[\"9223372036854775807\",{\"1\":{\"661\":1}}],[\"9223372036854775808\",{\"1\":{\"661\":1}}],[\"9200\",{\"1\":{\"40\":1}}],[\"90\",{\"1\":{\"1673\":1}}],[\"900\",{\"1\":{\"912\":1}}],[\"9002\",{\"1\":{\"792\":3}}],[\"9000000\",{\"1\":{\"618\":4}}],[\"9092\",{\"1\":{\"446\":4,\"456\":1,\"457\":1,\"488\":1,\"489\":1}}],[\"97879019\",{\"1\":{\"546\":1}}],[\"9<\",{\"1\":{\"382\":5}}],[\"9中已移除\",{\"1\":{\"254\":1}}],[\"9\",{\"0\":{\"1844\":1,\"1861\":1},\"1\":{\"58\":1,\"95\":1,\"125\":1,\"292\":1,\"474\":1,\"490\":2,\"594\":1,\"1135\":1,\"1330\":1,\"1528\":1,\"1631\":2,\"1699\":2,\"1736\":3,\"1815\":1,\"1862\":1}}],[\"空气也是可以感知的干燥😭一边吸着氧\",{\"1\":{\"1834\":1}}],[\"空格翻页\",{\"1\":{\"1681\":1}}],[\"空格补齐\",{\"1\":{\"686\":1}}],[\"空轮询导致\",{\"1\":{\"809\":1}}],[\"空目录\",{\"1\":{\"779\":1}}],[\"空间复杂度$o\",{\"1\":{\"1663\":1}}],[\"空间复杂度非常高\",{\"1\":{\"976\":1}}],[\"空间整合\",{\"1\":{\"1525\":1}}],[\"空间不足\",{\"1\":{\"1524\":1}}],[\"空间一半\",{\"1\":{\"1524\":1}}],[\"空间换时间\",{\"1\":{\"1435\":1}}],[\"空间预分配\",{\"1\":{\"879\":1}}],[\"空间索引是\",{\"1\":{\"697\":1}}],[\"空间索引\",{\"1\":{\"697\":1}}],[\"空间使用\",{\"1\":{\"681\":1}}],[\"空调伴侣和热水器的智能插座\",{\"1\":{\"1828\":1}}],[\"空调\",{\"1\":{\"373\":1}}],[\"空文件夹且不走回收站\",{\"1\":{\"314\":1}}],[\"空闲块也是位图法管理\",{\"1\":{\"1477\":1}}],[\"空闲块构成链表\",{\"1\":{\"1477\":1}}],[\"空闲块等等\",{\"1\":{\"1474\":1}}],[\"空闲链表\",{\"1\":{\"1477\":1}}],[\"空闲表\",{\"1\":{\"1477\":1}}],[\"空闲线程有存活时间\",{\"1\":{\"1110\":1}}],[\"空闲区域\",{\"1\":{\"749\":1}}],[\"空闲的区\",{\"1\":{\"693\":1}}],[\"空闲的放另一边\",{\"1\":{\"214\":1}}],[\"空闲空间管理\",{\"0\":{\"1477\":1}}],[\"空闲空间\",{\"1\":{\"688\":1}}],[\"空闲page\",{\"1\":{\"638\":1}}],[\"空闲列表\",{\"1\":{\"214\":1}}],[\"空的语义\",{\"1\":{\"58\":1}}],[\"空\",{\"1\":{\"58\":3,\"1351\":1}}],[\"功能基本一致\",{\"1\":{\"1811\":1}}],[\"功能上和crs类似\",{\"1\":{\"1724\":1}}],[\"功能测试过程中的几个关键要素及支撑方式如下\",{\"1\":{\"1716\":1}}],[\"功能测试\",{\"1\":{\"1716\":1}}],[\"功能一样\",{\"1\":{\"1708\":1}}],[\"功能接口即可完成自定义需求的开发\",{\"1\":{\"1221\":1}}],[\"功能也不完善\",{\"1\":{\"510\":1}}],[\"功能更加强大\",{\"1\":{\"365\":1,\"1113\":1}}],[\"功能\",{\"0\":{\"53\":1},\"1\":{\"238\":1,\"583\":2,\"584\":1,\"593\":1,\"594\":1,\"595\":1,\"596\":1,\"822\":1}}],[\"或配合消息队列\",{\"1\":{\"1638\":1}}],[\"或部分构件不存在于中央仓库\",{\"1\":{\"1632\":1}}],[\"或用static\",{\"1\":{\"1608\":1}}],[\"或运行过程中逐步释放掉已使用完毕的资源\",{\"1\":{\"1466\":1}}],[\"或直接设置一个很长的过期时间\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"或直接丢弃\",{\"1\":{\"414\":1,\"1628\":1}}],[\"或缓存服务器宕机\",{\"1\":{\"1258\":1,\"1581\":1}}],[\"或其它原因导致暂停时\",{\"1\":{\"1119\":1}}],[\"或符合pattern的所有频道\",{\"1\":{\"957\":1}}],[\"或广播告知集群刷新自己的状态\",{\"1\":{\"949\":1}}],[\"或服务器延迟大于等于min\",{\"1\":{\"937\":1}}],[\"或无法用long\",{\"1\":{\"896\":1}}],[\"或无法用long保存的整数\",{\"1\":{\"896\":1}}],[\"或是超时\",{\"1\":{\"785\":1}}],[\"或是应用层http等都无关\",{\"1\":{\"341\":1}}],[\"或不含该记录\",{\"1\":{\"754\":1,\"1557\":1}}],[\"或不需要关联\",{\"1\":{\"184\":1}}],[\"或回滚事务\",{\"1\":{\"734\":1}}],[\"或intersection索引合并的搜索条件\",{\"1\":{\"711\":1}}],[\"或多个\",{\"1\":{\"698\":1}}],[\"或多表关联时决定表的连接顺序\",{\"1\":{\"570\":1}}],[\"或继承\",{\"1\":{\"521\":1}}],[\"或根据\",{\"1\":{\"518\":1}}],[\"或注解来配置和映射原始类型\",{\"1\":{\"503\":1}}],[\"或等待linger\",{\"1\":{\"450\":1}}],[\"或bigdecimal\",{\"1\":{\"351\":1}}],[\"或ms\",{\"1\":{\"230\":1}}],[\"或标识符\",{\"1\":{\"230\":1}}],[\"或已被移除\",{\"1\":{\"184\":1}}],[\"或已经从某个引用队列中移除\",{\"1\":{\"184\":1}}],[\"或\",{\"1\":{\"67\":1,\"148\":1,\"494\":1,\"583\":4,\"632\":1,\"634\":1,\"672\":1,\"734\":1,\"767\":1,\"794\":1,\"843\":1,\"860\":1,\"1143\":1,\"1224\":1,\"1278\":1,\"1311\":1,\"1351\":1,\"1521\":2,\"1618\":1,\"1629\":1}}],[\"或从网络中抓取文件的过程\",{\"1\":{\"52\":1}}],[\"或者上海\",{\"1\":{\"1833\":1}}],[\"或者很难拿到账号\",{\"1\":{\"1809\":1}}],[\"或者被封禁\",{\"1\":{\"1804\":1}}],[\"或者模拟对象的使用\",{\"1\":{\"1706\":1}}],[\"或者让n和1相与并右移n\",{\"1\":{\"1664\":1}}],[\"或者配置文件中指定的destroy\",{\"1\":{\"1597\":1}}],[\"或者配置文件中指定的init\",{\"1\":{\"1597\":1}}],[\"或者实现了disposablebean接口的destroy方法\",{\"1\":{\"1597\":1}}],[\"或者实现了initializingbean接口的afterpropertiesset方法\",{\"1\":{\"1597\":1}}],[\"或者notifyall\",{\"1\":{\"1512\":1}}],[\"或者收到之前发送数据的\",{\"1\":{\"1412\":1}}],[\"或者非服务自身原因导致的不一致\",{\"1\":{\"1236\":1}}],[\"或者数据不一致的问题\",{\"1\":{\"1234\":1}}],[\"或者叫管程\",{\"1\":{\"1074\":1}}],[\"或者全部不完成\",{\"1\":{\"1032\":1}}],[\"或者全部完成\",{\"1\":{\"1032\":1}}],[\"或者删除的时候级联得删除若干数据\",{\"1\":{\"1031\":1}}],[\"或者是线程安全的\",{\"1\":{\"851\":1}}],[\"或者调用线程对象的\",{\"1\":{\"1093\":1}}],[\"或者调用\",{\"1\":{\"772\":1}}],[\"或者用redis\",{\"1\":{\"619\":1}}],[\"或者\",{\"1\":{\"583\":1,\"624\":1,\"702\":1,\"1202\":1,\"1448\":3,\"1636\":1,\"1709\":1,\"1746\":1}}],[\"或者使用外部事务管理器\",{\"1\":{\"511\":1}}],[\"或者处理消息超过\",{\"1\":{\"483\":1}}],[\"或者消费者\",{\"1\":{\"406\":1}}],[\"或者需要重新加入d系统\",{\"1\":{\"399\":1}}],[\"或者保证该线程下次\",{\"1\":{\"364\":1}}],[\"或者周期调用的技术\",{\"1\":{\"334\":1}}],[\"或者定期执行任务\",{\"1\":{\"332\":1}}],[\"或者第三方库\",{\"1\":{\"254\":1}}],[\"或者由系统属性\",{\"1\":{\"254\":1}}],[\"或者通过\",{\"1\":{\"137\":1,\"965\":1}}],[\"或者直接问\",{\"1\":{\"1330\":1}}],[\"或者直接实现\",{\"1\":{\"78\":1}}],[\"或者直接报错\",{\"1\":{\"34\":1}}],[\"或者偶尔在读操作时进行过期失效的维护工作\",{\"1\":{\"74\":1}}],[\"或者入队后是\",{\"1\":{\"6\":1}}],[\"范围0\",{\"1\":{\"1446\":1}}],[\"范围分片\",{\"1\":{\"656\":1,\"1564\":1}}],[\"范围从0开始至局部变量表最大的变量槽数量\",{\"1\":{\"204\":1}}],[\"范围集合\",{\"1\":{\"70\":1}}],[\"范围\",{\"1\":{\"51\":1,\"1436\":1}}],[\"杭州\",{\"1\":{\"51\":2}}],[\"精神上又经历了三个月焦虑的找实习\",{\"1\":{\"1771\":1}}],[\"精度可以到微秒\",{\"1\":{\"645\":1}}],[\"精确匹配\",{\"1\":{\"1712\":2}}],[\"精确地将内容添加到下一次提交中\",{\"1\":{\"1315\":1}}],[\"精确一次\",{\"1\":{\"461\":2}}],[\"精确性\",{\"1\":{\"224\":1}}],[\"精确值\",{\"1\":{\"36\":1}}],[\"精准查询\",{\"1\":{\"51\":1}}],[\"条记录的cpu成本\",{\"1\":{\"729\":1}}],[\"条数据\",{\"1\":{\"51\":1}}],[\"条件注解再做一次过滤\",{\"1\":{\"1598\":1}}],[\"条件语句\",{\"1\":{\"1567\":2}}],[\"条件缓存\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"条件化简\",{\"0\":{\"724\":1}}],[\"条件处理程序\",{\"1\":{\"634\":2}}],[\"条件2\",{\"1\":{\"630\":1}}],[\"条件1\",{\"1\":{\"630\":1}}],[\"条件查询\",{\"0\":{\"583\":1}}],[\"条件列表\",{\"1\":{\"581\":1,\"583\":1}}],[\"条件\",{\"1\":{\"579\":1,\"580\":1,\"583\":1,\"585\":1,\"603\":1,\"604\":2,\"605\":1,\"633\":2,\"727\":1,\"754\":1,\"1557\":1}}],[\"条件附加语句\",{\"1\":{\"535\":1}}],[\"条件变量中的线程\",{\"1\":{\"366\":1}}],[\"条件变量的队列阻塞\",{\"1\":{\"366\":1}}],[\"条件变量\",{\"1\":{\"366\":1,\"1463\":1}}],[\"条件分支\",{\"1\":{\"241\":1}}],[\"条件对象\",{\"1\":{\"8\":1}}],[\"条件队列入对的对外接口是各种await方法\",{\"1\":{\"8\":1}}],[\"条件队列\",{\"0\":{\"8\":1}}],[\"条件等待\",{\"1\":{\"3\":1}}],[\"条件节点\",{\"1\":{\"3\":1}}],[\"构成的版本链\",{\"1\":{\"1557\":1}}],[\"构成的数组\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"构成的数据库\",{\"1\":{\"569\":1}}],[\"构成\",{\"1\":{\"1479\":1}}],[\"构成一个环形日志文件组\",{\"1\":{\"1555\":1}}],[\"构成一个高效可靠的原语集\",{\"1\":{\"1161\":1}}],[\"构成一个双向链表\",{\"1\":{\"195\":1}}],[\"构成obj指针和列表项之间的一对一关系\",{\"1\":{\"970\":1}}],[\"构成该记录的版本链\",{\"1\":{\"747\":1}}],[\"构成分布式搜索\",{\"1\":{\"34\":1}}],[\"构造时指定容量\",{\"1\":{\"1511\":1}}],[\"构造时需指定容量\",{\"1\":{\"1107\":1}}],[\"构造方法是私有的\",{\"1\":{\"1135\":1}}],[\"构造方法里\",{\"1\":{\"1115\":1}}],[\"构造方法\",{\"0\":{\"870\":1},\"1\":{\"1521\":1}}],[\"构造方法中传递数据\",{\"1\":{\"154\":1,\"1514\":1}}],[\"构造代码块\",{\"1\":{\"289\":1}}],[\"构造器循环依赖\",{\"1\":{\"1599\":1}}],[\"构造器注入\",{\"1\":{\"1015\":1}}],[\"构造器都是私有\",{\"1\":{\"352\":1}}],[\"构造器append\",{\"1\":{\"317\":1,\"318\":1}}],[\"构造器等执行体中\",{\"1\":{\"297\":1}}],[\"构造器私有\",{\"1\":{\"290\":2}}],[\"构造器\",{\"0\":{\"1088\":1},\"1\":{\"184\":1,\"289\":1,\"348\":1,\"1115\":1}}],[\"构造新对象时\",{\"1\":{\"146\":1}}],[\"构造并发送\",{\"1\":{\"101\":1}}],[\"构造查询条件\",{\"1\":{\"51\":1}}],[\"构建文档\",{\"1\":{\"1791\":1}}],[\"构建分布式\",{\"1\":{\"1224\":1}}],[\"构建实现类\",{\"1\":{\"1018\":1}}],[\"构建next数组\",{\"1\":{\"991\":1}}],[\"构建有序的redo日志哈希表\",{\"1\":{\"742\":1}}],[\"构建哈希表来判断缓存是否命中\",{\"1\":{\"731\":1}}],[\"构建成\",{\"1\":{\"541\":1}}],[\"构建\",{\"1\":{\"92\":1,\"507\":1,\"1361\":1,\"1380\":1}}],[\"构建一个pipline\",{\"1\":{\"1220\":1}}],[\"构建一个\",{\"1\":{\"73\":1}}],[\"增大\",{\"1\":{\"1446\":1,\"1476\":1}}],[\"增强了mock能力\",{\"1\":{\"1716\":1}}],[\"增强\",{\"1\":{\"1134\":1}}],[\"增强逻辑\",{\"1\":{\"1015\":1,\"1016\":1}}],[\"增强的模式\",{\"1\":{\"1057\":1}}],[\"增强的\",{\"1\":{\"263\":2}}],[\"增删改对聚簇索引\",{\"1\":{\"746\":1}}],[\"增删改查都是在缓冲区的\",{\"1\":{\"637\":1}}],[\"增量包括日志量\",{\"1\":{\"740\":1}}],[\"增量修改\",{\"1\":{\"50\":1}}],[\"增加spring\",{\"1\":{\"1717\":1}}],[\"增加了切片测试\",{\"1\":{\"1716\":1}}],[\"增加了一个分数\",{\"1\":{\"1570\":1}}],[\"增加了网络调用\",{\"1\":{\"22\":1}}],[\"增加消费者的数量\",{\"1\":{\"1374\":1}}],[\"增加near\",{\"1\":{\"1355\":1}}],[\"增加数据库压力\",{\"1\":{\"1288\":1}}],[\"增加系统的复杂性\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"增加cronloops计数器\",{\"1\":{\"928\":1}}],[\"增加日志缓冲区的大小可以节省磁盘\",{\"1\":{\"638\":1}}],[\"增加缓存功能\",{\"1\":{\"542\":1}}],[\"增加\",{\"1\":{\"500\":1,\"1524\":1}}],[\"增加副本因子\",{\"1\":{\"472\":1}}],[\"增加副本可以提高可靠性\",{\"1\":{\"469\":1}}],[\"增加代码大小\",{\"1\":{\"272\":1}}],[\"增加编译时间\",{\"1\":{\"272\":1}}],[\"新裤子\",{\"1\":{\"1841\":1}}],[\"新出的资源也会很快上线\",{\"1\":{\"1810\":1}}],[\"新闻媒体具有让人们为自己的行为负责的力量\",{\"1\":{\"1767\":1}}],[\"新教\",{\"0\":{\"1763\":1}}],[\"新任宗主教当选时必须要报告教宗\",{\"1\":{\"1762\":1}}],[\"新任务提交时\",{\"1\":{\"1110\":2}}],[\"新任务提交时的服务顺序\",{\"1\":{\"332\":1}}],[\"新任务来了怎么办\",{\"1\":{\"332\":1}}],[\"新约\",{\"1\":{\"1759\":1}}],[\"新写入操作会报错\",{\"1\":{\"1574\":1}}],[\"新进程放入第一级队列\",{\"1\":{\"1470\":1}}],[\"新功能直接从入口\",{\"1\":{\"1245\":1}}],[\"新建\",{\"1\":{\"1151\":1}}],[\"新建事务\",{\"1\":{\"1049\":1}}],[\"新主节点开始接收相应的槽有关的命令请求\",{\"1\":{\"948\":1}}],[\"新主节点广播pong消息\",{\"1\":{\"948\":1}}],[\"新主节点将所有对旧主节点的槽指派转移给自己\",{\"1\":{\"948\":1}}],[\"新主节点执行slaveof\",{\"1\":{\"948\":1}}],[\"新加入的键和值分别保存在一个压缩列表结点中\",{\"1\":{\"898\":1}}],[\"新加入的线程池实现\",{\"1\":{\"153\":1}}],[\"新元素要么最大置数组头\",{\"1\":{\"889\":1}}],[\"新元素挂在老元素后面\",{\"1\":{\"304\":1}}],[\"新缓存\",{\"1\":{\"732\":1}}],[\"新密码\",{\"1\":{\"590\":1}}],[\"新数据类型\",{\"1\":{\"576\":1}}],[\"新表名\",{\"1\":{\"575\":1}}],[\"新引入了\",{\"1\":{\"471\":1}}],[\"新选举出的\",{\"1\":{\"461\":1}}],[\"新的开始\",{\"0\":{\"1771\":1}}],[\"新的需求是用户在搜索某个景点信息时\",{\"1\":{\"1355\":1}}],[\"新的客户端命令不仅要追加到aof\",{\"1\":{\"917\":1}}],[\"新的bgsave命令会被拒绝\",{\"1\":{\"911\":1}}],[\"新的bgrewriteaof命令延迟到保存任务结束执行\",{\"1\":{\"911\":1}}],[\"新的save\",{\"1\":{\"911\":1}}],[\"新的undo日志存储\",{\"1\":{\"749\":1}}],[\"新的问题\",{\"0\":{\"401\":1}}],[\"新的任务到达时才会开始拒绝服务\",{\"1\":{\"332\":1}}],[\"新的值\",{\"1\":{\"50\":1}}],[\"新一代收集器\",{\"1\":{\"172\":1}}],[\"新生代收集\",{\"1\":{\"1525\":1}}],[\"新生代收集器\",{\"1\":{\"172\":1}}],[\"新生代是用于存储新创建的对象的区域\",{\"1\":{\"1524\":1}}],[\"新生代的复制算法能够快速回收掉生命周期短暂的对象\",{\"1\":{\"1524\":1}}],[\"新生代划分为一块较大的eden空间和两块较小的survivor空间\",{\"1\":{\"171\":1}}],[\"新生代中每次回收后存活的少量对象\",{\"1\":{\"171\":1}}],[\"新生代\",{\"1\":{\"171\":1,\"1523\":1,\"1524\":1}}],[\"新增一个远程仓库\",{\"1\":{\"1326\":1}}],[\"新增一个新文档\",{\"1\":{\"50\":1}}],[\"新增非核心线程\",{\"1\":{\"1113\":2}}],[\"新增核心线程\",{\"1\":{\"1113\":1}}],[\"新增了只读状态的判断\",{\"1\":{\"1044\":1}}],[\"新增特性\",{\"1\":{\"292\":1}}],[\"新增\",{\"1\":{\"163\":1}}],[\"新值\",{\"1\":{\"148\":1}}],[\"新创建的表在新的路径\",{\"1\":{\"109\":1}}],[\"新版复制实现\",{\"0\":{\"935\":1}}],[\"新版mysql很少使用\",{\"1\":{\"721\":1}}],[\"新版\",{\"1\":{\"85\":1,\"1218\":1}}],[\"新版已经废弃了一部分\",{\"1\":{\"62\":1}}],[\"新集合类型\",{\"0\":{\"65\":1}}],[\"新字段名\",{\"1\":{\"45\":1,\"576\":1}}],[\"全款拿下了\",{\"1\":{\"1828\":1}}],[\"全世界任何人都可以信\",{\"1\":{\"1759\":1}}],[\"全球\",{\"1\":{\"1792\":1}}],[\"全球海量的路径\",{\"1\":{\"1752\":1}}],[\"全球分销系统\",{\"0\":{\"1724\":1}}],[\"全排列\",{\"1\":{\"1672\":1,\"1675\":1}}],[\"全程不需要\",{\"1\":{\"1486\":1}}],[\"全程\",{\"1\":{\"1426\":1}}],[\"全连接队列长度\",{\"1\":{\"1415\":1}}],[\"全连接队列\",{\"0\":{\"1414\":1},\"1\":{\"1414\":1,\"1487\":1}}],[\"全限定类名+属性集合\",{\"1\":{\"1378\":1}}],[\"全表扫描时会大量更新lru的节点\",{\"1\":{\"732\":1}}],[\"全表扫描\",{\"1\":{\"728\":1,\"732\":1,\"1448\":1}}],[\"全长度索引选择性\",{\"1\":{\"707\":1}}],[\"全文索引查找的是文本中的关键词\",{\"1\":{\"699\":1}}],[\"全文索引\",{\"1\":{\"681\":1,\"697\":1,\"699\":1}}],[\"全文检索库\",{\"1\":{\"52\":1}}],[\"全文检索\",{\"1\":{\"51\":1,\"357\":1}}],[\"全称\",{\"1\":{\"572\":1,\"752\":1}}],[\"全部换成基于\",{\"1\":{\"1791\":1}}],[\"全部信息\",{\"1\":{\"1699\":1}}],[\"全部进程\",{\"1\":{\"1699\":1}}],[\"全部字段\",{\"1\":{\"578\":1}}],[\"全部收到数据后即返回响应\",{\"1\":{\"460\":1}}],[\"全部用java实现\",{\"1\":{\"52\":1}}],[\"全局唯一\",{\"1\":{\"1622\":1}}],[\"全局异常\",{\"1\":{\"1608\":1}}],[\"全局性排除文件\",{\"1\":{\"1349\":1}}],[\"全局限流\",{\"1\":{\"1300\":1}}],[\"全局变量等用户空间资源\",{\"1\":{\"1487\":1}}],[\"全局变量等用户空间的资源\",{\"1\":{\"1454\":1}}],[\"全局变量checkpoint\",{\"1\":{\"741\":2}}],[\"全局变量buf\",{\"1\":{\"739\":2}}],[\"全局变量或局部变量\",{\"1\":{\"154\":1}}],[\"全局锁就是对整个数据库实例加锁\",{\"1\":{\"550\":1}}],[\"全局锁\",{\"0\":{\"550\":1,\"1559\":1},\"1\":{\"549\":1}}],[\"全局的索引文件元数据描述\",{\"1\":{\"37\":1}}],[\"全等排序\",{\"1\":{\"61\":1}}],[\"全量修改\",{\"1\":{\"50\":1}}],[\"解压缩\",{\"1\":{\"1688\":1}}],[\"解压目的地\",{\"1\":{\"1688\":2}}],[\"解压\",{\"1\":{\"1688\":1}}],[\"解压的文件\",{\"1\":{\"1688\":1}}],[\"解压后\",{\"1\":{\"101\":1}}],[\"解压后交给\",{\"1\":{\"101\":1}}],[\"解法2关键\",{\"1\":{\"1675\":1}}],[\"解法2\",{\"0\":{\"1663\":1},\"1\":{\"1675\":1}}],[\"解法1关键\",{\"1\":{\"1675\":1}}],[\"解法1\",{\"0\":{\"1662\":1},\"1\":{\"1675\":1}}],[\"解包匹配\",{\"1\":{\"1425\":1}}],[\"解除应用程序耦合\",{\"1\":{\"407\":1}}],[\"解码请求时使用character\",{\"1\":{\"674\":1}}],[\"解码\",{\"1\":{\"315\":1}}],[\"解释器忽略文本\",{\"1\":{\"357\":1}}],[\"解释器与编译器的交互\",{\"1\":{\"266\":1}}],[\"解释器监控程序的运行情况\",{\"1\":{\"242\":1}}],[\"解释器逐条解释和执行java字节码指令\",{\"1\":{\"242\":1}}],[\"解释器的优点是简单\",{\"1\":{\"242\":1}}],[\"解释器通过分析字节码指令\",{\"1\":{\"242\":1}}],[\"解释器是字节码执行引擎的核心组成部分\",{\"1\":{\"242\":1}}],[\"解释器\",{\"1\":{\"242\":1,\"267\":1}}],[\"解决两个软件实体间的接口不兼容的问题\",{\"1\":{\"1647\":1}}],[\"解决循环依赖\",{\"0\":{\"1599\":1}}],[\"解决数据被水平分片之后\",{\"1\":{\"1564\":1}}],[\"解决数据怎么放\",{\"1\":{\"210\":1}}],[\"解决幻读问题\",{\"1\":{\"1557\":1}}],[\"解决办法\",{\"1\":{\"1443\":1}}],[\"解决方法\",{\"1\":{\"1256\":1,\"1257\":1,\"1258\":1,\"1259\":1,\"1266\":1,\"1267\":1,\"1417\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1584\":1,\"1585\":1}}],[\"解决方案\",{\"0\":{\"840\":1},\"1\":{\"917\":1,\"1435\":1,\"1563\":1}}],[\"解决\",{\"1\":{\"471\":1,\"809\":1}}],[\"解决浮点型运算精度失真问题\",{\"1\":{\"351\":1}}],[\"解决并发\",{\"1\":{\"214\":1}}],[\"解决程序的运行问题\",{\"1\":{\"210\":1}}],[\"解决了兼容性问题\",{\"1\":{\"1859\":1}}],[\"解决了单表的存储和性能瓶颈的问题\",{\"1\":{\"1564\":1}}],[\"解决了这个问题\",{\"1\":{\"1161\":1}}],[\"解决了\",{\"1\":{\"150\":1,\"380\":1}}],[\"解锁库存等\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"解锁完成\",{\"1\":{\"1076\":1}}],[\"解锁\",{\"1\":{\"156\":1,\"157\":1,\"1239\":1}}],[\"解锁时先获取锁的值\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"解锁时\",{\"1\":{\"5\":1}}],[\"解析并渲染真正的视图\",{\"1\":{\"1605\":1}}],[\"解析并检查\",{\"1\":{\"941\":1}}],[\"解析器\",{\"1\":{\"1224\":1}}],[\"解析的结果\",{\"1\":{\"1059\":1}}],[\"解析的过程包括根据方法或字段的名字和描述符在类的常量池中查找符号引用\",{\"1\":{\"244\":1}}],[\"解析类属性域上标注的注解\",{\"1\":{\"1025\":1}}],[\"解析与执行\",{\"1\":{\"1540\":1}}],[\"解析与优化\",{\"1\":{\"672\":1}}],[\"解析与填充符号表\",{\"0\":{\"256\":1}}],[\"解析本质上一样\",{\"1\":{\"541\":1}}],[\"解析映射器的逻辑\",{\"1\":{\"541\":1}}],[\"解析逻辑里\",{\"1\":{\"541\":1}}],[\"解析技巧\",{\"1\":{\"348\":1}}],[\"解析三个部分统称连接\",{\"1\":{\"248\":1}}],[\"解析是java虚拟机执行方法调用和字段访问的基础\",{\"1\":{\"244\":1}}],[\"解析是指在运行时确定方法或字段的具体引用的过程\",{\"1\":{\"244\":1}}],[\"解析可以发生在类加载过程中\",{\"1\":{\"244\":1}}],[\"解析通常发生在以下情况下\",{\"1\":{\"244\":1}}],[\"解析将符号引用解析为直接引用\",{\"1\":{\"243\":1}}],[\"解析和分派是java虚拟机执行方法调用和字段访问的关键步骤\",{\"1\":{\"243\":1}}],[\"解析和初始化\",{\"1\":{\"214\":1,\"1521\":1}}],[\"解析阶段\",{\"1\":{\"211\":1,\"244\":1}}],[\"解析结果\",{\"1\":{\"51\":1}}],[\"解析\",{\"0\":{\"244\":1,\"252\":1},\"1\":{\"51\":1,\"541\":3,\"653\":1,\"1527\":2}}],[\"解析响应结果\",{\"1\":{\"48\":1}}],[\"南昌\",{\"1\":{\"1825\":1}}],[\"南\",{\"1\":{\"47\":1}}],[\"柯\",{\"1\":{\"47\":1}}],[\"真的好冷啊\",{\"1\":{\"1844\":1}}],[\"真的太美了\",{\"1\":{\"1849\":1}}],[\"真的太危险了\",{\"1\":{\"1843\":1}}],[\"真的太难吃了\",{\"1\":{\"1841\":1}}],[\"真的太震撼了\",{\"1\":{\"1776\":1}}],[\"真的就像有人在挠你的脑浆\",{\"1\":{\"1834\":1}}],[\"真的佩服\",{\"1\":{\"1833\":1}}],[\"真的是每走一步都是煎熬\",{\"1\":{\"1843\":1}}],[\"真的是经验丰富\",{\"1\":{\"1833\":1}}],[\"真的是做梦都能梦到\",{\"1\":{\"1832\":1}}],[\"真的巨累\",{\"1\":{\"1827\":1}}],[\"真的很爽～不过也要注意安全\",{\"1\":{\"1796\":1}}],[\"真的\",{\"1\":{\"1781\":1,\"1841\":1}}],[\"真尴尬\",{\"1\":{\"1778\":1}}],[\"真要出现了自认倒霉\",{\"1\":{\"1240\":1}}],[\"真实提供服务的端口\",{\"1\":{\"1301\":1}}],[\"真实服务器ip地址\",{\"1\":{\"1301\":1}}],[\"真实数据处仅有一个指针\",{\"1\":{\"687\":1}}],[\"真实列数据\",{\"1\":{\"684\":1}}],[\"真正的库存信息都在航司\",{\"1\":{\"1734\":1}}],[\"真正执行语句\",{\"1\":{\"570\":1}}],[\"真正开始引用更新\",{\"1\":{\"178\":1}}],[\"真正发生冲突时再处理\",{\"1\":{\"148\":1}}],[\"真正入队之前会再自旋一次\",{\"1\":{\"6\":1}}],[\"真相只有一个\",{\"1\":{\"47\":1}}],[\"注入恶意代码\",{\"1\":{\"1642\":1}}],[\"注入\",{\"0\":{\"1539\":1,\"1595\":1},\"1\":{\"1264\":1}}],[\"注入curatorframework\",{\"1\":{\"1180\":1}}],[\"注入配置\",{\"1\":{\"1180\":1}}],[\"注入成员\",{\"1\":{\"1088\":1}}],[\"注入一个\",{\"1\":{\"1038\":1}}],[\"注入客户端\",{\"0\":{\"40\":1}}],[\"注释bind\",{\"1\":{\"1150\":1}}],[\"注释\",{\"1\":{\"576\":2}}],[\"注\",{\"1\":{\"558\":1,\"560\":1,\"574\":1,\"578\":1,\"579\":1,\"580\":1,\"582\":1,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"590\":1,\"591\":1,\"628\":1,\"632\":1,\"634\":1,\"697\":1,\"717\":1,\"999\":1,\"1015\":1,\"1033\":1,\"1041\":1,\"1202\":1,\"1374\":1,\"1378\":1,\"1379\":2,\"1409\":1,\"1546\":1,\"1664\":1}}],[\"注解中的\",{\"1\":{\"1598\":1}}],[\"注解导入了一个\",{\"1\":{\"1598\":1}}],[\"注解对结果缓存\",{\"1\":{\"1368\":1}}],[\"注解对象\",{\"1\":{\"348\":1}}],[\"注解和其中的事务属性\",{\"1\":{\"1060\":1}}],[\"注解和需要的配置\",{\"1\":{\"1040\":1}}],[\"注解的方法必须是public的\",{\"1\":{\"1061\":1}}],[\"注解的\",{\"1\":{\"1059\":1}}],[\"注解的所有\",{\"1\":{\"91\":1,\"99\":1}}],[\"注解只是标记某个方法需要被事务管理以及管理的方式\",{\"1\":{\"1056\":1}}],[\"注解只作用在源码阶段\",{\"1\":{\"348\":1}}],[\"注解注入\",{\"0\":{\"1025\":1}}],[\"注解扫描\",{\"0\":{\"1024\":1}}],[\"注解用于标记一个\",{\"1\":{\"851\":1}}],[\"注解指定了别名\",{\"1\":{\"520\":1}}],[\"注解自动注入\",{\"1\":{\"506\":1}}],[\"注解在哪个成分上\",{\"1\":{\"348\":1}}],[\"注解解析相关方法的接口\",{\"1\":{\"348\":1}}],[\"注解解析\",{\"1\":{\"348\":1}}],[\"注解作用在源码阶段\",{\"1\":{\"348\":2}}],[\"注解\",{\"0\":{\"348\":1},\"1\":{\"391\":1,\"508\":1,\"1024\":1,\"1040\":1,\"1056\":1}}],[\"注解处理器的典型应用如lombok工具\",{\"1\":{\"260\":1}}],[\"注解处理器\",{\"0\":{\"260\":1}}],[\"注重吞吐量和cpu资源\",{\"1\":{\"1525\":1}}],[\"注重吞吐量\",{\"1\":{\"175\":1}}],[\"注意第二行\",{\"1\":{\"1666\":1}}],[\"注意转义\",{\"1\":{\"1417\":1}}],[\"注意细节\",{\"1\":{\"1220\":1}}],[\"注意仅仅是做标记\",{\"1\":{\"1092\":1}}],[\"注意仅仅用作标记\",{\"1\":{\"1087\":1}}],[\"注意先创建的\",{\"1\":{\"1012\":1}}],[\"注意先加\",{\"1\":{\"842\":1}}],[\"注意各种异常\",{\"1\":{\"829\":1}}],[\"注意事项\",{\"0\":{\"711\":1}}],[\"注意占位符的转义\",{\"1\":{\"391\":1}}],[\"注意集合中存储的是对象的地址\",{\"1\":{\"304\":1}}],[\"注意\",{\"1\":{\"109\":1,\"118\":1,\"119\":1,\"139\":1,\"154\":1,\"383\":1,\"851\":1,\"865\":1,\"1090\":1,\"1320\":1}}],[\"注意和队列的状态区别开\",{\"1\":{\"3\":1}}],[\"注册当前会话的账号和密码\",{\"1\":{\"1177\":1}}],[\"注册中心\",{\"1\":{\"1162\":1,\"1617\":1}}],[\"注册advisor\",{\"1\":{\"1059\":1}}],[\"注册流程\",{\"1\":{\"873\":1}}],[\"注册感兴趣事件\",{\"1\":{\"863\":1}}],[\"注册\",{\"1\":{\"848\":1,\"873\":1}}],[\"注册事件\",{\"1\":{\"785\":1}}],[\"注册要消费的主题\",{\"1\":{\"488\":1}}],[\"注册端口\",{\"1\":{\"340\":1}}],[\"注册服务\",{\"0\":{\"92\":1}}],[\"注册到\",{\"1\":{\"91\":1,\"787\":1,\"789\":1,\"1024\":1}}],[\"注册订阅者\",{\"1\":{\"84\":1}}],[\"720p\",{\"1\":{\"1868\":1,\"1869\":2}}],[\"7120\",{\"1\":{\"1796\":1}}],[\"798艺术区\",{\"1\":{\"1777\":1}}],[\"7折分别有不同的字母代表\",{\"1\":{\"1739\":1}}],[\"77\",{\"1\":{\"1671\":1}}],[\"777\",{\"1\":{\"1218\":1,\"1631\":1}}],[\"7611c59dc3a29aa6fa0609f841bb6a1019008a9c\",{\"1\":{\"940\":1}}],[\"70717123728795\",{\"1\":{\"1862\":1}}],[\"700c\",{\"1\":{\"1796\":4}}],[\"7008847699919241229\",{\"1\":{\"1793\":1}}],[\"700万+\",{\"1\":{\"1752\":1}}],[\"7000\",{\"1\":{\"1367\":1}}],[\"70\",{\"1\":{\"595\":1,\"822\":1,\"1347\":2}}],[\"702\",{\"1\":{\"0\":1}}],[\"7334\",{\"1\":{\"1792\":1}}],[\"73\",{\"1\":{\"417\":1}}],[\"751\",{\"1\":{\"1693\":1}}],[\"75倍\",{\"1\":{\"1497\":1}}],[\"75\",{\"1\":{\"304\":1,\"1494\":2,\"1826\":1}}],[\"78\",{\"1\":{\"296\":2,\"1670\":1}}],[\"7\",{\"0\":{\"1842\":1,\"1859\":1,\"1872\":1},\"1\":{\"38\":1,\"58\":1,\"59\":1,\"79\":1,\"95\":1,\"153\":1,\"382\":1,\"467\":1,\"477\":1,\"561\":2,\"594\":1,\"788\":1,\"866\":1,\"1041\":1,\"1179\":1,\"1409\":1,\"1497\":1,\"1634\":1,\"1824\":1}}],[\"6点钟就醒了\",{\"1\":{\"1842\":1}}],[\"6tb了\",{\"1\":{\"1810\":1}}],[\"6月\",{\"1\":{\"1824\":1}}],[\"6月10号\",{\"1\":{\"1774\":1}}],[\"6月7号入职了\",{\"1\":{\"1773\":1}}],[\"6月6号又是大太阳\",{\"1\":{\"1772\":1}}],[\"6月5号顶着大太阳逛天坛\",{\"1\":{\"1772\":1}}],[\"6月4号早上\",{\"1\":{\"1771\":1}}],[\"65530\",{\"1\":{\"1464\":1}}],[\"65535\",{\"1\":{\"340\":2,\"839\":1}}],[\"67\",{\"1\":{\"1426\":1}}],[\"68\",{\"1\":{\"1426\":1}}],[\"6h\",{\"1\":{\"1360\":1}}],[\"6版本后支持\",{\"1\":{\"697\":1}}],[\"6版本之后\",{\"1\":{\"681\":1}}],[\"640x480\",{\"1\":{\"1878\":1}}],[\"640x360\",{\"1\":{\"1868\":2,\"1869\":1}}],[\"640px\",{\"1\":{\"1870\":1}}],[\"640×360\",{\"1\":{\"1868\":1}}],[\"640\",{\"1\":{\"1854\":1}}],[\"64byte\",{\"1\":{\"1435\":1}}],[\"64bit\",{\"1\":{\"1204\":1}}],[\"64位cpu可以寻址更大的物理内存空间\",{\"1\":{\"1433\":1}}],[\"64位cpu可以一次计算超过32位的数字\",{\"1\":{\"1433\":1}}],[\"64位相比32位的优势\",{\"1\":{\"1433\":1}}],[\"64位指指令的位宽\",{\"1\":{\"1433\":1}}],[\"64位指cpu位宽\",{\"1\":{\"1433\":1}}],[\"64位系统\",{\"1\":{\"1143\":1,\"1444\":1}}],[\"64位栈容量为2\",{\"1\":{\"207\":1}}],[\"64\",{\"1\":{\"782\":1,\"1443\":1}}],[\"64tb\",{\"1\":{\"681\":1}}],[\"6933078830336704520\",{\"1\":{\"1144\":1}}],[\"6931752749545553933\",{\"1\":{\"565\":1}}],[\"6926471351452565512\",{\"1\":{\"1117\":1,\"1121\":1}}],[\"6983853041686577189\",{\"1\":{\"546\":1}}],[\"6379\",{\"1\":{\"940\":1,\"1264\":1}}],[\"63\",{\"1\":{\"112\":1}}],[\"61082\",{\"1\":{\"48\":1}}],[\"6\",{\"0\":{\"1841\":2,\"1842\":1,\"1843\":1,\"1844\":1,\"1845\":1,\"1846\":1,\"1858\":1,\"1871\":1},\"1\":{\"38\":1,\"58\":1,\"70\":5,\"95\":1,\"382\":1,\"495\":1,\"561\":1,\"594\":1,\"795\":1,\"812\":1,\"834\":1,\"844\":1,\"1074\":1,\"1075\":1,\"1089\":1,\"1106\":1,\"1369\":1,\"1488\":1,\"1509\":1,\"1572\":1,\"1631\":2,\"1735\":1,\"1799\":2,\"1815\":1,\"1826\":1}}],[\"600万+\",{\"1\":{\"1752\":1}}],[\"60000\",{\"1\":{\"533\":1}}],[\"60个时钟周期\",{\"1\":{\"1434\":1}}],[\"60s\",{\"1\":{\"533\":1,\"1169\":1,\"1631\":2}}],[\"60\",{\"1\":{\"14\":1,\"631\":1,\"912\":1,\"1854\":1}}],[\"作差\",{\"1\":{\"1658\":1}}],[\"作者\",{\"1\":{\"1322\":1}}],[\"作者是韩国的\",{\"1\":{\"807\":1}}],[\"作匹配\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"作用于方法上\",{\"1\":{\"1594\":1}}],[\"作用有二\",{\"1\":{\"1554\":1}}],[\"作用有三\",{\"1\":{\"937\":1}}],[\"作用是调用下一个出站处理器\",{\"1\":{\"823\":1}}],[\"作用是调用下一个入站处理器\",{\"1\":{\"823\":1}}],[\"作用和问题\",{\"0\":{\"397\":1}}],[\"作用\",{\"0\":{\"625\":1},\"1\":{\"298\":1,\"643\":1,\"647\":1,\"938\":1,\"1632\":1}}],[\"作用域\",{\"0\":{\"1596\":1},\"1\":{\"1614\":1}}],[\"作用域和数据类型\",{\"1\":{\"240\":1}}],[\"作用域到顶域\",{\"1\":{\"27\":1,\"1643\":1}}],[\"作为游客拍照打卡收费的工具\",{\"1\":{\"1843\":1}}],[\"作为中点\",{\"1\":{\"1746\":1}}],[\"作为商业产品\",{\"1\":{\"1737\":1}}],[\"作为ota或ota平台\",{\"1\":{\"1728\":1}}],[\"作为消息通信载体\",{\"1\":{\"1626\":1}}],[\"作为消息的参数\",{\"1\":{\"59\":1}}],[\"作为页表的索引\",{\"1\":{\"1443\":1}}],[\"作为值的\",{\"1\":{\"1368\":1}}],[\"作为最新版本\",{\"1\":{\"1336\":1}}],[\"作为最小存储单位\",{\"1\":{\"1219\":1}}],[\"作为缓存备份\",{\"1\":{\"1234\":1}}],[\"作为根目录\",{\"1\":{\"1218\":1}}],[\"作为非常重要的分布式协调组件\",{\"1\":{\"1200\":1}}],[\"作为\",{\"1\":{\"1153\":2,\"1368\":1,\"1539\":1}}],[\"作为参数传入\",{\"1\":{\"1115\":1}}],[\"作为重入的计数器\",{\"1\":{\"1076\":1}}],[\"作为服务器端\",{\"1\":{\"808\":1}}],[\"作为附件加入\",{\"1\":{\"788\":1,\"789\":1}}],[\"作为调用的返回值\",{\"1\":{\"631\":1}}],[\"作为第一条消息的绝对偏移量\",{\"1\":{\"476\":1}}],[\"作为经历过多次阿里巴巴双十一这种\",{\"1\":{\"426\":1}}],[\"作为路由规则\",{\"1\":{\"414\":1,\"1628\":1}}],[\"作为系统配置信息\",{\"1\":{\"305\":1}}],[\"作为方法区这个类的各种数据的访问入口\",{\"1\":{\"249\":1}}],[\"作为数据项构成的复合数据结构\",{\"1\":{\"240\":1}}],[\"作为默认线程池\",{\"1\":{\"163\":1}}],[\"作为一个汇\",{\"1\":{\"83\":1}}],[\"作为底层的检索库\",{\"1\":{\"52\":1}}],[\"作为替代方案\",{\"1\":{\"38\":1}}],[\"再分裂\",{\"1\":{\"1837\":1}}],[\"再分配\",{\"1\":{\"788\":1}}],[\"再换乘晚上的火车硬座到拉萨\",{\"1\":{\"1833\":1}}],[\"再回望开篇年少的白嘉轩先后娶七房太太\",{\"1\":{\"1826\":1}}],[\"再回到上海\",{\"1\":{\"1825\":1}}],[\"再把这个分支部署到\",{\"1\":{\"1790\":1}}],[\"再从学校步入职场\",{\"1\":{\"1786\":1}}],[\"再到自己住的老破小\",{\"1\":{\"1786\":1}}],[\"再到达目的地国\",{\"1\":{\"1746\":1}}],[\"再修改\",{\"1\":{\"1651\":1}}],[\"再移到头部\",{\"1\":{\"1651\":1}}],[\"再根据路由规则分配到对应的\",{\"1\":{\"1628\":1}}],[\"再写\",{\"1\":{\"1556\":1}}],[\"再自顶向下交由子类去完成\",{\"1\":{\"1528\":1}}],[\"再有线程来获取锁时\",{\"1\":{\"1517\":1}}],[\"再由内核决定什么时候写入数据到磁盘\",{\"1\":{\"1478\":1}}],[\"再由slf4j选择具体的日志实现\",{\"1\":{\"380\":1}}],[\"再验证这段时间内有没有发生冲突\",{\"1\":{\"1468\":1}}],[\"再划分固定大小的页\",{\"1\":{\"1443\":1}}],[\"再减少缓存\",{\"1\":{\"1412\":1}}],[\"再交给目标\",{\"1\":{\"1394\":1}}],[\"再哈希法\",{\"1\":{\"1389\":1}}],[\"再看\",{\"1\":{\"1344\":1}}],[\"再也不会被访问到\",{\"1\":{\"1259\":1}}],[\"再计算偏移和总数\",{\"1\":{\"1245\":1}}],[\"再比较\",{\"1\":{\"1204\":1}}],[\"再比如针对多个表的查询统计\",{\"1\":{\"1031\":1}}],[\"再用日志文件中的数据做增量恢复\",{\"1\":{\"1170\":1}}],[\"再在公开仓库中触发\",{\"1\":{\"1790\":1}}],[\"再在\",{\"1\":{\"1155\":1}}],[\"再判断是否支持保存点方式的嵌套事务\",{\"1\":{\"1049\":1}}],[\"再遍历左边界\",{\"1\":{\"993\":1}}],[\"再删除频道键\",{\"1\":{\"954\":1}}],[\"再加\",{\"1\":{\"842\":1}}],[\"再关闭\",{\"1\":{\"839\":1}}],[\"再次回到\",{\"1\":{\"1826\":1}}],[\"再次来到北京城\",{\"1\":{\"1771\":1}}],[\"再次发生事件时由\",{\"1\":{\"1488\":1}}],[\"再次发送请求会在\",{\"1\":{\"1400\":1}}],[\"再次向服务端回应一个\",{\"1\":{\"1409\":1}}],[\"再次提交时\",{\"1\":{\"1332\":1}}],[\"再次\",{\"1\":{\"797\":1}}],[\"再次插入新记录时\",{\"1\":{\"690\":1}}],[\"再插入新记录\",{\"1\":{\"748\":1}}],[\"再评估以下五种半连接策略\",{\"1\":{\"726\":1}}],[\"再将\",{\"1\":{\"1556\":1}}],[\"再将合并后的数据刷新到磁盘中\",{\"1\":{\"638\":1}}],[\"再将数据合并恢复到buffer\",{\"1\":{\"638\":1}}],[\"再将服务器的应答传递给客户端应用\",{\"1\":{\"405\":1}}],[\"再声明游标\",{\"1\":{\"634\":1}}],[\"再创建\",{\"1\":{\"623\":2}}],[\"再锁定关联的主键索引\",{\"1\":{\"554\":1}}],[\"再解析对应的\",{\"1\":{\"541\":1}}],[\"再替换原来的引用\",{\"1\":{\"162\":1}}],[\"再发送http请求\",{\"1\":{\"38\":1}}],[\"再去查找具体文档\",{\"1\":{\"35\":1}}],[\"再去看这些工具类的源码\",{\"1\":{\"9\":1}}],[\"来到西藏\",{\"1\":{\"1849\":1}}],[\"来到目标\",{\"1\":{\"1394\":1}}],[\"来之前想了很多关于西藏的文案\",{\"1\":{\"1844\":1}}],[\"来值了\",{\"1\":{\"1841\":1}}],[\"来见她在林芝援藏的儿子\",{\"1\":{\"1839\":1}}],[\"来满足各自的业务需要\",{\"1\":{\"1751\":1}}],[\"来达到提升接口性能\",{\"1\":{\"1737\":1}}],[\"来进行机票的分销\",{\"1\":{\"1726\":1}}],[\"来避免相同元素产生重复集合\",{\"1\":{\"1677\":1}}],[\"来避免共享的手段称为defensive\",{\"1\":{\"146\":1}}],[\"来传输数据\",{\"1\":{\"1629\":1}}],[\"来优化资源使用\",{\"1\":{\"1617\":1}}],[\"来加载这些\",{\"1\":{\"1598\":1}}],[\"来提高网络io的读写性能\",{\"1\":{\"1572\":1}}],[\"来提高没有多线程竞争或基本没有竞争的场景下的并发性能\",{\"1\":{\"1075\":1}}],[\"来监听多个socket\",{\"1\":{\"1572\":1}}],[\"来了一个事件\",{\"1\":{\"1488\":1}}],[\"来了解对象的回收状态\",{\"1\":{\"194\":1}}],[\"来屏蔽设备之间的差异\",{\"1\":{\"1481\":1}}],[\"来告诉\",{\"1\":{\"1411\":1}}],[\"来保存服务名和ip信息\",{\"1\":{\"1406\":1}}],[\"来保证多个线程能够同时切换依赖\",{\"1\":{\"1240\":1}}],[\"来缓解缓存污染\",{\"1\":{\"1259\":1}}],[\"来和旧集群的锁键区分开\",{\"1\":{\"1239\":1}}],[\"来和数组\",{\"1\":{\"154\":1,\"1514\":1}}],[\"来设计方案\",{\"1\":{\"1238\":1}}],[\"来替换旧的\",{\"1\":{\"1219\":1}}],[\"来替代原始的\",{\"1\":{\"1351\":1}}],[\"来替代\",{\"1\":{\"176\":1}}],[\"来自日喀则的藏族人\",{\"1\":{\"1833\":1}}],[\"来自软件\",{\"1\":{\"1462\":1}}],[\"来自\",{\"1\":{\"1117\":1}}],[\"来自定义类型处理器\",{\"1\":{\"521\":1}}],[\"来一个任务执行一个\",{\"1\":{\"1107\":1,\"1511\":1}}],[\"来做一些清理工作\",{\"1\":{\"1093\":1}}],[\"来为不同的事务线程提供独立的资源副本\",{\"1\":{\"1045\":1}}],[\"来执行lua脚本\",{\"1\":{\"963\":1}}],[\"来执行故障转移操作\",{\"1\":{\"942\":1}}],[\"来处理\",{\"1\":{\"817\":1}}],[\"来处理io请求\",{\"1\":{\"640\":1}}],[\"来实现锁的分配\",{\"1\":{\"1516\":1}}],[\"来实现锁\",{\"1\":{\"1515\":1}}],[\"来实现\",{\"1\":{\"1468\":1}}],[\"来实现文件读\",{\"1\":{\"799\":1}}],[\"来实现的\",{\"1\":{\"282\":1}}],[\"来跟踪\",{\"1\":{\"789\":1}}],[\"来获取需要的依赖\",{\"1\":{\"1599\":1}}],[\"来获取从服务器当前信息并更新\",{\"1\":{\"940\":1}}],[\"来获取主服务器当前信息并更新\",{\"1\":{\"940\":1}}],[\"来获取\",{\"1\":{\"776\":1,\"778\":1}}],[\"来规避索引失效问题\",{\"1\":{\"702\":1}}],[\"来查询用户表tb\",{\"1\":{\"634\":1}}],[\"来唯一标识一个用户\",{\"1\":{\"590\":1}}],[\"来选取合适的存储引擎\",{\"1\":{\"570\":1}}],[\"来完成获取资源线程的排队工作\",{\"1\":{\"1516\":1}}],[\"来完成实例化工作\",{\"1\":{\"522\":1}}],[\"来完成的\",{\"1\":{\"279\":1}}],[\"来消费\",{\"1\":{\"493\":1}}],[\"来重新消费一些消息\",{\"1\":{\"490\":1}}],[\"来记录副本的备份进度\",{\"1\":{\"471\":1}}],[\"来导入\",{\"1\":{\"263\":1}}],[\"来定位下一条将要执行的字节码指令\",{\"1\":{\"202\":1}}],[\"来构造线程安全的集合\",{\"1\":{\"162\":1}}],[\"来最小化内存使用的一种设计模式\",{\"1\":{\"146\":1}}],[\"来表示可关闭的\",{\"1\":{\"82\":1}}],[\"来管理这些服务的生命周期\",{\"1\":{\"78\":1}}],[\"来懒加载相关联的\",{\"1\":{\"73\":1}}],[\"来操作es\",{\"1\":{\"38\":1}}],[\"来标识该用户\",{\"1\":{\"17\":1}}],[\"同车的wj\",{\"1\":{\"1841\":1}}],[\"同城\",{\"1\":{\"1638\":2}}],[\"同音不同字的城市机场搜索\",{\"1\":{\"1355\":1}}],[\"同vs的协议\",{\"1\":{\"1301\":1}}],[\"同理\",{\"1\":{\"1203\":1}}],[\"同等长度下应尽可能小\",{\"1\":{\"995\":1}}],[\"同上\",{\"1\":{\"462\":1}}],[\"同一份服务部署两份或者多份\",{\"1\":{\"1638\":1}}],[\"同一时间仅执行一个任务\",{\"1\":{\"1115\":1}}],[\"同一时刻同时执行\",{\"1\":{\"335\":1}}],[\"同一个进程内多个线程之间可以共享代码段\",{\"1\":{\"1451\":1}}],[\"同一个事务向一个undo页面链表写入的undo日志记为一个组\",{\"1\":{\"749\":1}}],[\"同一个\",{\"1\":{\"494\":1}}],[\"同一个类加载器下\",{\"1\":{\"253\":1}}],[\"同一partition的replica不应存储在同一个broker上\",{\"1\":{\"469\":1}}],[\"同一主题可以分多个partition\",{\"1\":{\"430\":1}}],[\"同样最后\",{\"1\":{\"1051\":1}}],[\"同样也是同步等待\",{\"1\":{\"822\":1}}],[\"同样也分别有字节和字符对应的源和汇\",{\"1\":{\"82\":1}}],[\"同样\",{\"1\":{\"638\":1}}],[\"同样在该层上可以实现基于ssl的安全链接\",{\"1\":{\"570\":1}}],[\"同样的\",{\"1\":{\"209\":1,\"821\":1,\"873\":1}}],[\"同样是一款使用广泛的分布式消息系统\",{\"1\":{\"1213\":1}}],[\"同样是多线程并行\",{\"1\":{\"175\":1}}],[\"同样是单线程串行并且会\",{\"1\":{\"173\":1}}],[\"同样是基于\",{\"1\":{\"160\":1}}],[\"同样影响效率\",{\"1\":{\"148\":1}}],[\"同时锁住行记录和记录前面的间隙\",{\"1\":{\"1561\":1}}],[\"同时锁住数据和数据前面的间隙\",{\"1\":{\"557\":1}}],[\"同时只刷新必要的元数据\",{\"1\":{\"1479\":1}}],[\"同时基于预读\",{\"1\":{\"1479\":1}}],[\"同时有较好的响应时间\",{\"1\":{\"1470\":1}}],[\"同时关闭\",{\"1\":{\"1420\":1}}],[\"同时收缩窗口\",{\"1\":{\"1412\":1}}],[\"同时开启了\",{\"1\":{\"1410\":1}}],[\"同时确认服务端报文的序列号\",{\"1\":{\"1409\":1}}],[\"同时移除二级和三级缓存中的引用\",{\"1\":{\"1382\":1}}],[\"同时移除二级和三级缓存中的对象\",{\"1\":{\"1028\":1}}],[\"同时保持提交的独立\",{\"1\":{\"1347\":1}}],[\"同时保证线程的安全\",{\"1\":{\"154\":1,\"1514\":1}}],[\"同时能够为业务多台机器提供负载均衡的功能\",{\"1\":{\"1301\":1}}],[\"同时订单系统需要将对应的优惠券消息写入数据库\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"同时需要记住自己的投票历史\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"同时需要一个\",{\"1\":{\"83\":1}}],[\"同时还支持排序和范围查找\",{\"1\":{\"1546\":1}}],[\"同时还提供了异步\",{\"1\":{\"1264\":1}}],[\"同时还可以拥有多个子线程组\",{\"1\":{\"1099\":1}}],[\"同时定义codeof方法\",{\"1\":{\"1245\":1}}],[\"同时完成数据副本的复制工作\",{\"1\":{\"1220\":1}}],[\"同时线程收到\",{\"1\":{\"1092\":2}}],[\"同时对外暴露了一些事务的状态信息\",{\"1\":{\"1044\":1}}],[\"同时半成品对象可能会有\",{\"1\":{\"1028\":1}}],[\"同时缩小窗口\",{\"1\":{\"990\":1}}],[\"同时增大窗口\",{\"1\":{\"990\":1}}],[\"同时也可以使用切面测试中的mock能力\",{\"1\":{\"1716\":1}}],[\"同时也保持了客户和大部分客户的得到正确的相应\",{\"1\":{\"1636\":1}}],[\"同时也会进行一些维护\",{\"1\":{\"907\":1}}],[\"同时也是另一个著名网络应用框架\",{\"1\":{\"807\":1}}],[\"同时也是一个开源的分布式事件流平台\",{\"1\":{\"439\":1}}],[\"同时从线程名也可以看出\",{\"1\":{\"820\":1}}],[\"同时维护了一个\",{\"1\":{\"816\":1}}],[\"同时支持阻塞\",{\"1\":{\"760\":1}}],[\"同时为了抢夺\",{\"1\":{\"380\":1}}],[\"同时\",{\"1\":{\"376\":1,\"1074\":1,\"1110\":1,\"1225\":1,\"1253\":1,\"1599\":1}}],[\"同时根据解释器\",{\"1\":{\"269\":1}}],[\"同时应用于新生代和老年代\",{\"1\":{\"177\":1}}],[\"同时清理无效本地变量\",{\"1\":{\"154\":1}}],[\"同时es官方也提供了各种不同语言的客户端sdk\",{\"1\":{\"38\":1}}],[\"同步双方的初始序列号\",{\"1\":{\"1409\":1}}],[\"同步日志\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"同步对新旧集群加锁\",{\"1\":{\"1239\":1}}],[\"同步写到新集群\",{\"1\":{\"1235\":1}}],[\"同步相关等等\",{\"1\":{\"1087\":1}}],[\"同步相关信息\",{\"1\":{\"466\":1}}],[\"同步完成后\",{\"1\":{\"934\":1}}],[\"同步aof文件\",{\"1\":{\"928\":1}}],[\"同步行为由appendfsync选项值决定\",{\"1\":{\"916\":1}}],[\"同步等待\",{\"1\":{\"819\":1,\"822\":2}}],[\"同步意味着\",{\"1\":{\"795\":1}}],[\"同步非阻塞io\",{\"1\":{\"1504\":1}}],[\"同步非阻塞\",{\"1\":{\"794\":3,\"1504\":1}}],[\"同步阻塞io\",{\"1\":{\"1504\":1}}],[\"同步阻塞\",{\"1\":{\"794\":3,\"1446\":1,\"1504\":1}}],[\"同步提交\",{\"1\":{\"492\":1}}],[\"同步方案给所有\",{\"1\":{\"483\":1}}],[\"同步方法\",{\"1\":{\"331\":1}}],[\"同步数据本地\",{\"1\":{\"1563\":1}}],[\"同步数据\",{\"1\":{\"470\":1}}],[\"同步机制和错误处理\",{\"1\":{\"405\":1}}],[\"同步代码块\",{\"1\":{\"331\":1}}],[\"同步基础\",{\"0\":{\"135\":1}}],[\"同步\",{\"1\":{\"134\":1,\"214\":1,\"427\":1,\"794\":1,\"919\":1,\"933\":1,\"934\":1,\"1447\":1,\"1478\":1}}],[\"同步修改文件夹名\",{\"1\":{\"118\":1}}],[\"同步修改hdfs的路径\",{\"1\":{\"118\":1}}],[\"同步占用带宽\",{\"1\":{\"19\":1}}],[\"同步器继承自\",{\"1\":{\"9\":1}}],[\"同步器实现\",{\"0\":{\"9\":1}}],[\"同步器需要重写的模板调用方法有五个\",{\"1\":{\"5\":1}}],[\"基督教就分裂成西罗马的天主教和东罗马的东正教\",{\"1\":{\"1759\":1}}],[\"基督教\",{\"0\":{\"1759\":1}}],[\"基底\",{\"1\":{\"1337\":1}}],[\"基数统计\",{\"1\":{\"1570\":1}}],[\"基数通过show\",{\"1\":{\"717\":1}}],[\"基数\",{\"1\":{\"707\":1}}],[\"基准偏移量\",{\"1\":{\"478\":1}}],[\"基金会\",{\"1\":{\"376\":1}}],[\"基础上搭建其它模块\",{\"1\":{\"1441\":1}}],[\"基础查询\",{\"0\":{\"582\":1}}],[\"基础架构\",{\"0\":{\"443\":1,\"1216\":1,\"1224\":1}}],[\"基础\",{\"0\":{\"286\":1,\"568\":1,\"1312\":1,\"1392\":1}}],[\"基础工具\",{\"1\":{\"228\":1}}],[\"基础union\",{\"1\":{\"126\":1}}],[\"基础建表\",{\"0\":{\"113\":1}}],[\"基本就是一条道可以逛完整个市区\",{\"1\":{\"1842\":1}}],[\"基本等于废了\",{\"1\":{\"1811\":1}}],[\"基本想要的资源都有\",{\"1\":{\"1810\":1}}],[\"基本不用\",{\"1\":{\"1595\":1}}],[\"基本思想是\",{\"1\":{\"1513\":1}}],[\"基本\",{\"1\":{\"1487\":1}}],[\"基本废弃\",{\"1\":{\"1461\":1}}],[\"基本操作\",{\"0\":{\"1226\":1}}],[\"基本都变成了即是ota\",{\"1\":{\"1726\":1}}],[\"基本都用更高级的计算框架了\",{\"1\":{\"1221\":1}}],[\"基本都是多核设计\",{\"1\":{\"791\":1}}],[\"基本可用是指分布式系统在出现故障的时候\",{\"1\":{\"1207\":1}}],[\"基本可用\",{\"1\":{\"1207\":1,\"1279\":1,\"1618\":1}}],[\"基本介绍\",{\"0\":{\"1160\":1}}],[\"基本决定了线程池的任务分配和线程分配策略\",{\"1\":{\"1120\":1}}],[\"基本规则是\",{\"1\":{\"829\":1}}],[\"基本语法\",{\"0\":{\"628\":1}}],[\"基本信息\",{\"0\":{\"469\":1},\"1\":{\"1369\":1}}],[\"基本架构\",{\"1\":{\"443\":1}}],[\"基本组成\",{\"0\":{\"433\":1,\"1474\":1}}],[\"基本组件\",{\"0\":{\"427\":1,\"430\":1}}],[\"基本是模仿了\",{\"1\":{\"376\":1}}],[\"基本内存分配\",{\"1\":{\"359\":1}}],[\"基本管理操作\",{\"1\":{\"236\":1}}],[\"基本数据类型\",{\"1\":{\"211\":1,\"240\":1,\"287\":1}}],[\"基本的加锁使用\",{\"1\":{\"137\":1}}],[\"基本概念\",{\"0\":{\"134\":1,\"1625\":1}}],[\"基本查询\",{\"0\":{\"124\":1}}],[\"基本类型传递的是本身的数据值\",{\"1\":{\"359\":1}}],[\"基本类型\",{\"1\":{\"80\":1,\"291\":1,\"1128\":1,\"1712\":8}}],[\"基本类型工具\",{\"0\":{\"80\":1}}],[\"基本工具\",{\"0\":{\"57\":1}}],[\"基本步骤\",{\"1\":{\"51\":1}}],[\"基本使用\",{\"0\":{\"38\":1,\"418\":1,\"1066\":1}}],[\"基于class\",{\"1\":{\"1708\":1}}],[\"基于class创建一个模拟对象\",{\"1\":{\"1708\":1}}],[\"基于角色的权限访问控制\",{\"1\":{\"1642\":1}}],[\"基于主从做高可用\",{\"1\":{\"1629\":1}}],[\"基于主从架构实现高可用\",{\"1\":{\"435\":2}}],[\"基于主从架构实现高可用性\",{\"1\":{\"410\":1}}],[\"基于压缩列表或跳表\",{\"1\":{\"1570\":1}}],[\"基于压缩列表或整数集合实现的无序集合\",{\"1\":{\"1570\":1}}],[\"基于压缩列表或哈希字典\",{\"1\":{\"1570\":1}}],[\"基于双向链表的实现\",{\"1\":{\"1570\":1}}],[\"基于继承\",{\"1\":{\"1532\":1}}],[\"基于标记\",{\"1\":{\"1525\":6}}],[\"基于事件和回调机制\",{\"1\":{\"1504\":1}}],[\"基于事件驱动的网络应用框架\",{\"1\":{\"807\":1}}],[\"基于堆的优先级阻塞队列\",{\"1\":{\"1499\":1}}],[\"基于堆的无界队列\",{\"1\":{\"1499\":1}}],[\"基于堆外内存的\",{\"1\":{\"829\":1}}],[\"基于单向链表的无界\",{\"1\":{\"1499\":1}}],[\"基于锁机制实现了线程安全\",{\"1\":{\"1495\":1}}],[\"基于网络协议的ipc方式\",{\"1\":{\"1461\":1}}],[\"基于转换表将\",{\"1\":{\"1428\":1}}],[\"基于https\",{\"1\":{\"1404\":1}}],[\"基于hashcode\",{\"1\":{\"305\":1}}],[\"基于离散对数\",{\"1\":{\"1402\":1}}],[\"基于threadlocal绑定线程事务\",{\"1\":{\"1383\":1}}],[\"基于transactioninterceptor\",{\"1\":{\"1383\":1}}],[\"基于tcp协议\",{\"1\":{\"343\":1}}],[\"基于aqs的同步工具类\",{\"1\":{\"1516\":1}}],[\"基于aspectj实现的\",{\"1\":{\"1380\":1}}],[\"基于aop原理\",{\"1\":{\"653\":1}}],[\"基于上面的三种状态和三个阶段\",{\"1\":{\"1310\":1}}],[\"基于上述两点\",{\"1\":{\"942\":1}}],[\"基于上述的垃圾回收算法\",{\"1\":{\"172\":1}}],[\"基于中间件的能力\",{\"1\":{\"1235\":1}}],[\"基于分治的思想\",{\"1\":{\"1228\":1}}],[\"基于分治思想\",{\"1\":{\"150\":1,\"153\":1}}],[\"基于edits和fsimage统一管理整个文件系统的\",{\"1\":{\"1219\":1}}],[\"基于某个数据源定义具体的数据库事务操作\",{\"1\":{\"1052\":1}}],[\"基于容器调度资源\",{\"1\":{\"1222\":1}}],[\"基于容器中的\",{\"1\":{\"1023\":1}}],[\"基于容器中所有的\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"基于容量失效\",{\"1\":{\"74\":1}}],[\"基于反射实现\",{\"1\":{\"1014\":1}}],[\"基于refcount\",{\"1\":{\"901\":1}}],[\"基于region内存布局\",{\"1\":{\"179\":1}}],[\"基于底层\",{\"1\":{\"873\":1}}],[\"基于数组存储\",{\"1\":{\"869\":1}}],[\"基于轮询lb策略\",{\"1\":{\"791\":1}}],[\"基于规则的优化\",{\"0\":{\"723\":1}}],[\"基于成本的优化\",{\"0\":{\"715\":1}}],[\"基于块的嵌套循环连接\",{\"1\":{\"714\":1}}],[\"基于java语言编写的mysql数据库中间件\",{\"1\":{\"654\":1}}],[\"基于行的日志记录\",{\"1\":{\"643\":1}}],[\"基于sql语句的日志记录\",{\"1\":{\"643\":1}}],[\"基于各种方法\",{\"1\":{\"508\":1}}],[\"基于大小\",{\"1\":{\"477\":1}}],[\"基于起始偏移量\",{\"1\":{\"476\":1}}],[\"基于路由键将消息队列和交换机关联\",{\"1\":{\"413\":1}}],[\"基于文件大小的滚动策略\",{\"1\":{\"388\":1}}],[\"基于时间的滚动策略\",{\"1\":{\"388\":1}}],[\"基于时间失效\",{\"1\":{\"74\":1}}],[\"基于dom4j和jaxen\",{\"1\":{\"357\":1}}],[\"基于线程池的服务器设计中\",{\"1\":{\"764\":1}}],[\"基于线程池\",{\"1\":{\"334\":1}}],[\"基于字符printwriter\",{\"1\":{\"322\":1}}],[\"基于字节printstream\",{\"1\":{\"322\":1}}],[\"基于哈希表\",{\"1\":{\"304\":1,\"305\":2}}],[\"基于计数器\",{\"1\":{\"268\":1}}],[\"基于采样\",{\"1\":{\"268\":1}}],[\"基于寄存器的指令集架构的优点是执行效率高\",{\"1\":{\"242\":1}}],[\"基于寄存器的指令集是一种将操作数存放在寄存器中的指令集架构\",{\"1\":{\"242\":1}}],[\"基于栈的指令集架构更适合于虚拟机\",{\"1\":{\"242\":1}}],[\"基于栈的指令集架构的优点是简单\",{\"1\":{\"242\":1}}],[\"基于栈的指令集是一种将操作数存放在栈中的指令集架构\",{\"1\":{\"242\":1}}],[\"基于栈的指令集和基于寄存器的指令集\",{\"1\":{\"242\":1}}],[\"基于状态表示不同链表中的下一个待处理的对象\",{\"1\":{\"187\":1}}],[\"基于写屏障\",{\"1\":{\"145\":1}}],[\"基于读屏障\",{\"1\":{\"145\":1}}],[\"基于管道流的通信方式\",{\"1\":{\"137\":1}}],[\"基于查询结果建表\",{\"0\":{\"115\":1}}],[\"基于其它表的结构建表\",{\"0\":{\"114\":1}}],[\"基于列分桶\",{\"1\":{\"113\":1}}],[\"基于列分区\",{\"1\":{\"113\":1}}],[\"基于列的索引效率通常比行低\",{\"1\":{\"69\":1}}],[\"基于语法描述说明\",{\"0\":{\"105\":1}}],[\"基于引用失效\",{\"1\":{\"74\":1}}],[\"基于\",{\"1\":{\"26\":1,\"52\":1,\"91\":1,\"137\":1,\"148\":1,\"157\":1,\"365\":1,\"382\":5,\"404\":1,\"409\":1,\"410\":1,\"411\":1,\"465\":1,\"508\":1,\"796\":1,\"797\":1,\"827\":1,\"869\":1,\"1009\":1,\"1014\":1,\"1018\":1,\"1021\":1,\"1045\":1,\"1110\":1,\"1114\":1,\"1207\":1,\"1213\":2,\"1263\":1,\"1276\":1,\"1406\":1,\"1557\":1,\"1570\":1,\"1582\":1,\"1611\":1,\"1622\":1,\"1625\":1}}],[\"域存储了自定义的\",{\"1\":{\"1015\":1}}],[\"域排序\",{\"1\":{\"969\":1}}],[\"域名解析协议\",{\"1\":{\"1424\":1}}],[\"域名下的请求根据\",{\"1\":{\"1366\":1}}],[\"域名\",{\"1\":{\"339\":1,\"1394\":1,\"1424\":1}}],[\"域应该是特殊的\",{\"1\":{\"189\":1}}],[\"域\",{\"1\":{\"150\":1}}],[\"域的读\",{\"1\":{\"143\":1}}],[\"域的写\",{\"1\":{\"143\":1}}],[\"域元数据信息fnm等等\",{\"1\":{\"37\":1}}],[\"域下的\",{\"1\":{\"27\":3,\"1643\":3}}],[\"多了珠峰大本营和纳木措\",{\"1\":{\"1840\":1}}],[\"多出去走走吧\",{\"1\":{\"1816\":1}}],[\"多出来的数据会被直接抛弃\",{\"1\":{\"792\":1}}],[\"多模块管理\",{\"1\":{\"1632\":1}}],[\"多台机器启动多个\",{\"1\":{\"1629\":1}}],[\"多进程\",{\"1\":{\"1488\":3}}],[\"多进程模型\",{\"1\":{\"1487\":1}}],[\"多媒体应用等\",{\"1\":{\"1483\":1}}],[\"多效率低\",{\"1\":{\"1477\":1}}],[\"多级索引块\",{\"1\":{\"1476\":1}}],[\"多级\",{\"1\":{\"1470\":1}}],[\"多级反馈队列\",{\"1\":{\"1470\":1}}],[\"多级页表\",{\"1\":{\"1443\":1}}],[\"多级存储器\",{\"0\":{\"1434\":1}}],[\"多核共享\",{\"1\":{\"1434\":1}}],[\"多条数据\",{\"1\":{\"1357\":1}}],[\"多条件联合查询时\",{\"1\":{\"699\":1}}],[\"多提交\",{\"0\":{\"1342\":1}}],[\"多节点间如何就某个值\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"多类别\",{\"1\":{\"1212\":1}}],[\"多大\",{\"1\":{\"1203\":1}}],[\"多余的将会被清除\",{\"1\":{\"1164\":1}}],[\"多余的空闲线程的存活时间\",{\"1\":{\"1106\":1,\"1511\":1}}],[\"多余任务都放到无界任务队列中排队\",{\"1\":{\"1110\":1}}],[\"多源bfs求最短路问题\",{\"1\":{\"1001\":1}}],[\"多源\",{\"1\":{\"1001\":1}}],[\"多机\",{\"0\":{\"932\":1}}],[\"多行字符串\",{\"1\":{\"846\":1}}],[\"多次操作会带来性能的损耗\",{\"1\":{\"833\":1}}],[\"多道工序的组合就是\",{\"1\":{\"814\":1}}],[\"多路复用程序\",{\"1\":{\"1572\":1}}],[\"多路复用技术\",{\"1\":{\"1571\":1}}],[\"多路复用接口\",{\"1\":{\"1488\":1}}],[\"多路复用\",{\"0\":{\"765\":1,\"1487\":1},\"1\":{\"794\":3,\"1404\":1,\"1478\":1,\"1487\":1,\"1504\":1}}],[\"多版本并发控制\",{\"1\":{\"752\":1}}],[\"多字段排序需要注意联合索引在创建时的规则\",{\"1\":{\"616\":1}}],[\"多字段排序时\",{\"1\":{\"616\":1}}],[\"多表连接\",{\"0\":{\"713\":1}}],[\"多表查询的成本\",{\"0\":{\"718\":1}}],[\"多表查询过程\",{\"1\":{\"713\":1}}],[\"多表查询\",{\"0\":{\"712\":1}}],[\"多表关系\",{\"0\":{\"601\":1}}],[\"多表\",{\"0\":{\"600\":1}}],[\"多选一\",{\"1\":{\"583\":1,\"609\":1}}],[\"多\",{\"1\":{\"541\":2,\"809\":1,\"1488\":1}}],[\"多分区内的消息不重复\",{\"1\":{\"461\":1}}],[\"多播\",{\"1\":{\"434\":1}}],[\"多对多\",{\"1\":{\"413\":1,\"601\":1}}],[\"多语言\",{\"1\":{\"412\":1,\"434\":1}}],[\"多协议\",{\"1\":{\"412\":1,\"434\":1}}],[\"多用于\",{\"1\":{\"409\":1}}],[\"多通道的\",{\"1\":{\"404\":1}}],[\"多一层包装\",{\"1\":{\"328\":1}}],[\"多态思想\",{\"1\":{\"379\":1}}],[\"多态\",{\"0\":{\"293\":1}}],[\"多线程并发情况下\",{\"1\":{\"1517\":1}}],[\"多线程环境下推荐使用\",{\"1\":{\"1495\":1}}],[\"多线程模型\",{\"1\":{\"1487\":1}}],[\"多线程使用\",{\"0\":{\"1363\":1,\"1369\":1}}],[\"多线程服务器端使用非堵塞式i\",{\"1\":{\"1131\":1}}],[\"多线程服务器端使用标准的堵塞式i\",{\"1\":{\"1131\":1}}],[\"多线程优化\",{\"0\":{\"790\":1}}],[\"多线程下\",{\"1\":{\"782\":1}}],[\"多线程的锁都是对象锁\",{\"1\":{\"1072\":1}}],[\"多线程的创建\",{\"0\":{\"326\":1}}],[\"多线程的活跃性问题\",{\"1\":{\"134\":1}}],[\"多线程\",{\"0\":{\"276\":1,\"325\":1,\"763\":1},\"1\":{\"1488\":1,\"1525\":4}}],[\"多种方法\",{\"1\":{\"163\":1}}],[\"多个媒体信息等\",{\"1\":{\"1862\":1}}],[\"多个容器可以在同一台机器上运行\",{\"1\":{\"1634\":1}}],[\"多个队列绑定到同一个\",{\"1\":{\"1628\":1}}],[\"多个目录项中的索引节点指向一个文件\",{\"1\":{\"1474\":1}}],[\"多个目录项关联起来形成目录结构\",{\"1\":{\"1474\":1}}],[\"多个优先级队列\",{\"1\":{\"1470\":1}}],[\"多个读者同时访问临界区\",{\"1\":{\"1467\":1}}],[\"多个事件发生的顺序等\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"多个节点上的多个事务同时执行\",{\"1\":{\"1277\":1}}],[\"多个业务操作使用同一条连接操作相同数据库中不同的数据表\",{\"1\":{\"1273\":1}}],[\"多个应用程序无法直接的共享缓存\",{\"1\":{\"1253\":1}}],[\"多个sentinel监视同一个服务器\",{\"1\":{\"940\":1}}],[\"多个sentinel\",{\"1\":{\"940\":1}}],[\"多个set成员\",{\"1\":{\"663\":1}}],[\"多个回滚段\",{\"1\":{\"751\":1}}],[\"多个组重复选项则后出现的优先级高\",{\"1\":{\"671\":1}}],[\"多个权限用逗号分隔\",{\"1\":{\"591\":1}}],[\"多个条件之间可以使用\",{\"1\":{\"632\":1}}],[\"多个条件任意一个成立\",{\"1\":{\"583\":1}}],[\"多个条件同时成立\",{\"1\":{\"583\":1}}],[\"多个\",{\"1\":{\"434\":1,\"512\":1,\"791\":1,\"1256\":1,\"1404\":1,\"1579\":1,\"1588\":1,\"1626\":1}}],[\"多个单词\",{\"1\":{\"414\":1,\"1628\":1}}],[\"多个消费者可以订阅同一个队列\",{\"1\":{\"1628\":1}}],[\"多个消费者\",{\"1\":{\"414\":1}}],[\"多个无符号数或其它表\",{\"1\":{\"240\":1}}],[\"多个线程不能同时使用同一个资源\",{\"1\":{\"1466\":1}}],[\"多个线程互相持有对方所需要的资源\",{\"1\":{\"1466\":1}}],[\"多个线程可同时\",{\"1\":{\"553\":1}}],[\"多个线程同时访问同一个共享资源且修改该资源\",{\"1\":{\"331\":1}}],[\"多个线程之间互不干扰\",{\"1\":{\"154\":1}}],[\"多个线程在竞争资源时\",{\"1\":{\"134\":1}}],[\"多个线程在临界区内执行\",{\"1\":{\"134\":1}}],[\"多个线程都占有其它线程需要的资源\",{\"1\":{\"134\":1}}],[\"多个任务同时执行\",{\"1\":{\"134\":1}}],[\"多个任务交替执行\",{\"1\":{\"134\":1}}],[\"多维点模型的kvd\",{\"1\":{\"37\":1}}],[\"多平台跨域\",{\"1\":{\"26\":1}}],[\"行疆\",{\"1\":{\"1832\":1}}],[\"行得救赎\",{\"1\":{\"1761\":1}}],[\"行业里叫od\",{\"1\":{\"1730\":1}}],[\"行业发展早期的时候\",{\"1\":{\"1726\":1}}],[\"行李牌打印等\",{\"1\":{\"1723\":1}}],[\"行李处理\",{\"1\":{\"1723\":1}}],[\"行数\",{\"1\":{\"1685\":1}}],[\"行数据存储在聚集索引的叶子节点上\",{\"1\":{\"615\":1}}],[\"行\",{\"1\":{\"693\":1,\"1347\":1}}],[\"行溢出\",{\"0\":{\"686\":1}}],[\"行格式\",{\"0\":{\"684\":1,\"685\":1,\"687\":1},\"1\":{\"683\":1}}],[\"行末添加换行\",{\"1\":{\"614\":1}}],[\"行子查询\",{\"0\":{\"610\":1},\"1\":{\"607\":1}}],[\"行为包括以下5种\",{\"1\":{\"599\":1}}],[\"行为\",{\"1\":{\"599\":3}}],[\"行级触发器\",{\"1\":{\"636\":1}}],[\"行级冲突少\",{\"1\":{\"563\":1}}],[\"行级锁分三种\",{\"1\":{\"1561\":1}}],[\"行级锁对一个行记录上锁\",{\"1\":{\"1561\":1}}],[\"行级锁可以与表级锁共存\",{\"1\":{\"1558\":1}}],[\"行级锁的实现是依靠其对应的索引\",{\"1\":{\"558\":1}}],[\"行级锁实现上分为记录锁\",{\"1\":{\"554\":1}}],[\"行级锁\",{\"0\":{\"554\":1,\"1561\":1},\"1\":{\"549\":1,\"678\":1}}],[\"行锁具体类型\",{\"1\":{\"564\":1}}],[\"行锁信息\",{\"1\":{\"564\":1}}],[\"行锁\",{\"1\":{\"555\":1,\"564\":1,\"681\":1}}],[\"行号表\",{\"1\":{\"240\":1}}],[\"行存相关的fdt\",{\"1\":{\"37\":1}}],[\"行记录的隐藏字段\",{\"1\":{\"1557\":1}}],[\"行记录的锁由行级锁来控制\",{\"1\":{\"560\":1}}],[\"行记录\",{\"1\":{\"34\":1}}],[\"正当精力慢慢消耗殆尽时\",{\"1\":{\"1833\":1}}],[\"正式从安卓换\",{\"1\":{\"1819\":1}}],[\"正式进入\",{\"1\":{\"372\":1}}],[\"正版流媒体\",{\"1\":{\"1811\":1}}],[\"正数补0\",{\"1\":{\"1664\":1}}],[\"正在执行的任务\",{\"1\":{\"1437\":1}}],[\"正在负责处理槽\",{\"1\":{\"948\":1}}],[\"正向代理代理客户端\",{\"1\":{\"1366\":1}}],[\"正好是周三\",{\"1\":{\"1836\":1}}],[\"正好上班挣了点小钱\",{\"1\":{\"1828\":1}}],[\"正好在网上偶然看到这么个可以执行自动推送的\",{\"1\":{\"1791\":1}}],[\"正好就授予了\",{\"1\":{\"1791\":1}}],[\"正好也是自己的第24个破壳日\",{\"1\":{\"1776\":1}}],[\"正好刚过半数\",{\"1\":{\"1205\":1}}],[\"正好提供了一系列核心配置的\",{\"1\":{\"1120\":1}}],[\"正确后启动nginx\",{\"1\":{\"1871\":1}}],[\"正确的设置\",{\"1\":{\"1061\":1}}],[\"正确性校验值\",{\"1\":{\"739\":1}}],[\"正文长度\",{\"1\":{\"848\":1}}],[\"正是因为\",{\"1\":{\"1202\":1}}],[\"正是\",{\"1\":{\"783\":1}}],[\"正宗utf8字符集\",{\"1\":{\"674\":1}}],[\"正常\",{\"1\":{\"1520\":1}}],[\"正常打印信息\",{\"1\":{\"1188\":1}}],[\"正常关闭\",{\"1\":{\"785\":1}}],[\"正常关闭服务器时\",{\"1\":{\"739\":1}}],[\"正常同步的\",{\"1\":{\"469\":1}}],[\"正常向主调函数提供返回值\",{\"1\":{\"206\":1}}],[\"正常调用完成\",{\"1\":{\"206\":1}}],[\"正则表达式\",{\"0\":{\"354\":1}}],[\"正则规则表\",{\"1\":{\"125\":1}}],[\"正则化相关的nvd\",{\"1\":{\"37\":1}}],[\"正排数据\",{\"1\":{\"37\":1}}],[\"正排\",{\"1\":{\"34\":1}}],[\"诊断信息如os\",{\"1\":{\"37\":1}}],[\"xds\",{\"1\":{\"1796\":1}}],[\"xheldon\",{\"1\":{\"1793\":1}}],[\"xa\",{\"1\":{\"1283\":9,\"1287\":1}}],[\"xbootclasspath\",{\"1\":{\"1135\":1}}],[\"xueguchen\",{\"1\":{\"1069\":1}}],[\"xie\",{\"1\":{\"1083\":1}}],[\"xian\",{\"1\":{\"1083\":1}}],[\"xiaowang\",{\"1\":{\"1177\":1}}],[\"xiaofuge\",{\"1\":{\"1083\":1}}],[\"xiaoy\",{\"1\":{\"707\":1}}],[\"xid\",{\"1\":{\"749\":1,\"1556\":2}}],[\"xnode\",{\"1\":{\"541\":3}}],[\"xchanper\",{\"1\":{\"525\":1,\"852\":1,\"1004\":1}}],[\"xcontenttype\",{\"1\":{\"42\":1,\"47\":1}}],[\"x及以后版本保证数据单分区有序\",{\"1\":{\"462\":1}}],[\"xex\",{\"1\":{\"388\":1}}],[\"x+\",{\"1\":{\"382\":1}}],[\"xpath\",{\"1\":{\"357\":1}}],[\"xsd\",{\"1\":{\"357\":1}}],[\"xsi\",{\"1\":{\"357\":1}}],[\"xsi=\",{\"1\":{\"357\":1}}],[\"xss\",{\"1\":{\"203\":1,\"1642\":1}}],[\"xmpp\",{\"0\":{\"409\":1},\"1\":{\"434\":1,\"435\":2}}],[\"xml内容\",{\"1\":{\"1217\":1}}],[\"xmlbeandefinitionreader\",{\"1\":{\"1008\":1}}],[\"xmlmapperbuilder\",{\"1\":{\"541\":4}}],[\"xmlconfigbuilder\",{\"1\":{\"541\":5}}],[\"xml检索\",{\"1\":{\"357\":1}}],[\"xml解析\",{\"1\":{\"357\":1}}],[\"xmlschema\",{\"1\":{\"357\":1}}],[\"xmlns=\",{\"1\":{\"357\":1}}],[\"xmlns\",{\"1\":{\"357\":1}}],[\"xml约束\",{\"1\":{\"357\":1}}],[\"xml格式\",{\"1\":{\"357\":1}}],[\"xml\",{\"0\":{\"357\":1},\"1\":{\"355\":1,\"357\":1,\"382\":2,\"386\":1,\"409\":3,\"503\":1,\"506\":5,\"507\":1,\"508\":1,\"509\":1,\"528\":2,\"540\":1,\"541\":5,\"1008\":1,\"1012\":1,\"1024\":1,\"1217\":2,\"1640\":1}}],[\"xmx\",{\"1\":{\"210\":1}}],[\"xms\",{\"1\":{\"210\":1}}],[\"xx三人又约了一起去汪师傅推荐的娜玛瑟德餐厅吃了顿饭\",{\"1\":{\"1846\":1}}],[\"xxx设置\",{\"1\":{\"923\":1}}],[\"xxxx\",{\"1\":{\"707\":1}}],[\"xxxxx\",{\"1\":{\"675\":1}}],[\"xxx2\",{\"1\":{\"611\":1}}],[\"xxx2的职位和薪资相同的员工\",{\"1\":{\"611\":1}}],[\"xxx1\",{\"1\":{\"611\":1}}],[\"xxx\",{\"1\":{\"357\":2,\"391\":1,\"521\":1,\"610\":1,\"628\":1,\"639\":1,\"671\":1,\"678\":1,\"679\":3,\"680\":1,\"737\":1,\"785\":1,\"1067\":1,\"1191\":1,\"1226\":2,\"1244\":2,\"1319\":3,\"1320\":2,\"1350\":1,\"1567\":4,\"1608\":1,\"1631\":1,\"1634\":12,\"1687\":1,\"1791\":1}}],[\"xx\",{\"1\":{\"211\":2,\"215\":2,\"1077\":2}}],[\"xx区\",{\"1\":{\"125\":1}}],[\"xx市\",{\"1\":{\"125\":1}}],[\"xx省\",{\"1\":{\"125\":1}}],[\"x版本的magic值为0\",{\"1\":{\"474\":1}}],[\"x版本之前保证数据单分区有序\",{\"1\":{\"462\":1}}],[\"x版本\",{\"1\":{\"38\":2}}],[\"x版本已经废除\",{\"1\":{\"38\":1}}],[\"x和2\",{\"1\":{\"38\":1}}],[\"x\",{\"1\":{\"37\":2,\"38\":2,\"66\":1,\"196\":3,\"367\":1,\"382\":2,\"383\":1,\"385\":1,\"424\":2,\"425\":2,\"564\":1,\"583\":1,\"594\":4,\"807\":4,\"808\":1,\"809\":1,\"831\":1,\"1057\":1,\"1136\":2,\"1137\":6,\"1140\":2,\"1226\":1,\"1560\":1,\"1629\":1,\"1666\":2,\"1688\":1,\"1692\":1,\"1700\":2,\"1736\":1,\"1791\":1,\"1877\":1}}],[\"最重要的是西藏的宗教历史\",{\"1\":{\"1837\":1}}],[\"最重要的就是对航班库存的管理\",{\"1\":{\"1722\":1}}],[\"最接近神的人\",{\"1\":{\"1761\":1}}],[\"最早产生的一神教\",{\"1\":{\"1758\":1}}],[\"最早一代的大数据分布式计算引擎\",{\"1\":{\"1213\":1}}],[\"最高级别\",{\"1\":{\"1612\":1}}],[\"最高优先级\",{\"1\":{\"1470\":1}}],[\"最低级别\",{\"1\":{\"1612\":1}}],[\"最友好\",{\"1\":{\"1573\":1}}],[\"最外层是个无限循环\",{\"1\":{\"1497\":1}}],[\"最短寻道时间优先\",{\"1\":{\"1472\":1}}],[\"最短作业优先\",{\"1\":{\"1470\":1}}],[\"最不常用置换\",{\"1\":{\"1471\":1}}],[\"最不具体\",{\"1\":{\"390\":1}}],[\"最佳页面置换\",{\"1\":{\"1471\":1}}],[\"最佳实践\",{\"0\":{\"391\":1}}],[\"最常用\",{\"1\":{\"1466\":1}}],[\"最常见的索引类型\",{\"1\":{\"697\":1}}],[\"最基本的可初始化的容器\",{\"1\":{\"1378\":1}}],[\"最长公共子序列\",{\"0\":{\"996\":1},\"1\":{\"996\":1}}],[\"最长上升子序列\",{\"0\":{\"994\":1,\"995\":1}}],[\"最长回文子串\",{\"0\":{\"993\":1},\"1\":{\"993\":1}}],[\"最长2^32\",{\"1\":{\"849\":1}}],[\"最先收到的请求将设置成功\",{\"1\":{\"942\":1}}],[\"最坏复杂度$o\",{\"1\":{\"893\":1}}],[\"最开始读写指针都在\",{\"1\":{\"827\":1}}],[\"最底层继承自\",{\"1\":{\"816\":1}}],[\"最近开始了解公路车\",{\"1\":{\"1818\":1}}],[\"最近最久未使用\",{\"1\":{\"1471\":1}}],[\"最近最少使用原则构建链表\",{\"1\":{\"732\":1}}],[\"最近的量\",{\"1\":{\"476\":1}}],[\"最近的偏移量\",{\"1\":{\"476\":1}}],[\"最左边的select小查询\",{\"1\":{\"728\":1}}],[\"最左前缀法则在select的时候\",{\"1\":{\"702\":1}}],[\"最左前缀法则\",{\"0\":{\"702\":1}}],[\"最好的方案是iphone配合nfc手环+能联网的家电\",{\"1\":{\"1819\":1}}],[\"最好定义auto\",{\"1\":{\"708\":1}}],[\"最好为基数大的列建立索引\",{\"1\":{\"708\":1}}],[\"最上层是一些客户端和链接服务\",{\"1\":{\"570\":1}}],[\"最小化响应时间\",{\"1\":{\"1617\":1}}],[\"最小记录\",{\"1\":{\"689\":1}}],[\"最小记录和最大记录\",{\"1\":{\"688\":1}}],[\"最小为0\",{\"1\":{\"645\":1}}],[\"最小值\",{\"1\":{\"584\":1}}],[\"最小值决定\",{\"1\":{\"471\":1}}],[\"最小兼容版本\",{\"1\":{\"37\":1}}],[\"最多\",{\"1\":{\"1110\":1}}],[\"最多64个成员\",{\"1\":{\"663\":1}}],[\"最多一次\",{\"1\":{\"461\":1}}],[\"最多只有一个许可证\",{\"1\":{\"366\":1}}],[\"最快\",{\"1\":{\"435\":1}}],[\"最初起源于金融系统\",{\"1\":{\"411\":1}}],[\"最具体\",{\"1\":{\"390\":1}}],[\"最大起飞全重\",{\"1\":{\"1730\":1}}],[\"最大化吞吐量\",{\"1\":{\"1617\":1}}],[\"最大需求矩阵\",{\"1\":{\"1466\":1}}],[\"最大报文生存时间\",{\"1\":{\"1410\":1}}],[\"最大努力通知\",{\"0\":{\"1285\":1}}],[\"最大的一块内存\",{\"1\":{\"1520\":1}}],[\"最大的\",{\"1\":{\"1203\":1}}],[\"最大的区别在于它们生成readview的时机不同\",{\"1\":{\"754\":1}}],[\"最大1gb\",{\"1\":{\"923\":1}}],[\"最大支持255种\",{\"1\":{\"849\":1}}],[\"最大长度\",{\"1\":{\"844\":1}}],[\"最大活跃事务id+1\",{\"1\":{\"754\":1,\"1557\":1}}],[\"最大记录\",{\"1\":{\"689\":1,\"690\":1}}],[\"最大值为65535\",{\"1\":{\"663\":1}}],[\"最大值\",{\"1\":{\"583\":1,\"584\":1}}],[\"最大任务队列长度\",{\"1\":{\"332\":1}}],[\"最大容量\",{\"1\":{\"73\":1,\"827\":1}}],[\"最能体现技术水平与价值\",{\"1\":{\"265\":1}}],[\"最终生成结果集\",{\"1\":{\"1566\":1}}],[\"最终数据保持一致\",{\"1\":{\"1563\":1}}],[\"最终达到欺骗服务器执行恶意的sql命令\",{\"1\":{\"1539\":1}}],[\"最终达到一致\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"最终期限调度\",{\"1\":{\"1483\":1}}],[\"最终使得程序运行要用到的内存大于能提供的最大内存\",{\"1\":{\"1445\":1}}],[\"最终优惠券系统会执行对应的业务\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"最终得到结果\",{\"1\":{\"1221\":1}}],[\"最终能够达到一致的状态\",{\"1\":{\"1207\":1}}],[\"最终一致性是指系统中的所有数据副本经过一定时间后\",{\"1\":{\"1207\":1}}],[\"最终一致性\",{\"1\":{\"1207\":1,\"1268\":1,\"1279\":1,\"1586\":1,\"1618\":1}}],[\"最终加入到容器中\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"最终\",{\"1\":{\"945\":1,\"1799\":1}}],[\"最终这些sentinel将形成互相连接的网络\",{\"1\":{\"940\":1}}],[\"最终ht\",{\"1\":{\"883\":1}}],[\"最终目的都是提高buffer\",{\"1\":{\"732\":1}}],[\"最终目的是生成一个\",{\"1\":{\"541\":1}}],[\"最终调用\",{\"1\":{\"544\":1}}],[\"最终来到\",{\"1\":{\"544\":1}}],[\"最终路由到对应的死信队列中\",{\"1\":{\"425\":1}}],[\"最终的目的是得到string\",{\"1\":{\"302\":1}}],[\"最终结果类型由表达式中的最高类型决定\",{\"1\":{\"287\":1}}],[\"最终形成可以被虚拟机直接使用的java类型\",{\"1\":{\"246\":1}}],[\"最终都是执行本方法\",{\"1\":{\"184\":1}}],[\"最终引用更新\",{\"1\":{\"178\":1}}],[\"最终标记\",{\"1\":{\"177\":1,\"178\":1,\"1525\":1}}],[\"最后打开\",{\"1\":{\"1872\":1}}],[\"最后是输出文件名\",{\"1\":{\"1868\":1}}],[\"最后是远程分支名\",{\"1\":{\"1333\":1}}],[\"最后生成url\",{\"1\":{\"1858\":1}}],[\"最后生成相应的执行操作\",{\"1\":{\"570\":1}}],[\"最后汪师傅带我们到了一个特产店免费吃\",{\"1\":{\"1846\":1}}],[\"最后用的只是当晚的简单记录\",{\"1\":{\"1844\":1}}],[\"最后到达拉萨火车站\",{\"1\":{\"1833\":1}}],[\"最后带着美团的老话走啦\",{\"1\":{\"1786\":1}}],[\"最后还是趴在充气枕上半睡半醒坐了一宿\",{\"1\":{\"1833\":1}}],[\"最后还是花了💰3888买了个自认为颜值最高的ad350\",{\"1\":{\"1796\":1}}],[\"最后还是去吃了麦当当穷鬼套餐\",{\"1\":{\"1771\":1}}],[\"最后还有一种情况图中也没有\",{\"1\":{\"382\":1}}],[\"最后懒着继续找\",{\"1\":{\"1771\":1}}],[\"最后次数为1的就是单个数字\",{\"1\":{\"1663\":1}}],[\"最后创建spring容器\",{\"1\":{\"1607\":1}}],[\"最后创建一个指明顶层树对象和父提交的提交对象\",{\"1\":{\"1350\":1}}],[\"最后去三级缓存获取\",{\"1\":{\"1599\":1}}],[\"最后就可以把这些剩下的\",{\"1\":{\"1598\":1}}],[\"最后提交事务\",{\"1\":{\"1556\":1}}],[\"最后再从兰州飞回长沙\",{\"1\":{\"1848\":1}}],[\"最后再写\",{\"1\":{\"1556\":1}}],[\"最后再跳转到程序计数器所指的新位置\",{\"1\":{\"1454\":1}}],[\"最后进行检查\",{\"1\":{\"1497\":1}}],[\"最后把新添加元素放到扩容后的数组末尾\",{\"1\":{\"1493\":1}}],[\"最后调用\",{\"1\":{\"1487\":1}}],[\"最后发送\",{\"1\":{\"1402\":1}}],[\"最后由网卡负责接收和发送网络包\",{\"1\":{\"1395\":1}}],[\"最后由这个\",{\"1\":{\"1205\":1}}],[\"最后通过\",{\"1\":{\"1369\":1}}],[\"最后将搜索结果返回\",{\"1\":{\"1362\":1}}],[\"最后有一些后置的处理\",{\"1\":{\"1362\":1}}],[\"最后如果执行的是git\",{\"1\":{\"1344\":1}}],[\"最后订单入库\",{\"1\":{\"1288\":1,\"1370\":1}}],[\"最后都会执行\",{\"1\":{\"1116\":1}}],[\"最后都归结于\",{\"1\":{\"1060\":1}}],[\"最后得到每32位二进制的汉明重量\",{\"1\":{\"976\":1}}],[\"最后a向b再返回一条ping消息\",{\"1\":{\"945\":1}}],[\"最后以原子操作\",{\"1\":{\"917\":1}}],[\"最后输出又变回\",{\"1\":{\"814\":1}}],[\"最后使用\",{\"1\":{\"801\":1}}],[\"最后返回累计值\",{\"1\":{\"619\":1}}],[\"最后返回\",{\"1\":{\"570\":1}}],[\"最后一天回到拉萨城时\",{\"1\":{\"1849\":1}}],[\"最后一天了\",{\"1\":{\"1846\":1}}],[\"最后一周\",{\"1\":{\"1786\":1}}],[\"最后一次插入或更新该行的事务\",{\"1\":{\"684\":1,\"1557\":1}}],[\"最后一个值不满足查询需求时\",{\"1\":{\"557\":1}}],[\"最后一条消息的绝对偏移量\",{\"1\":{\"476\":1}}],[\"最后执行结果由\",{\"1\":{\"544\":1}}],[\"最后封装成\",{\"1\":{\"542\":1}}],[\"最后读取作为方法参数传递的属性\",{\"1\":{\"518\":1}}],[\"最后更新\",{\"1\":{\"466\":1}}],[\"最后\",{\"1\":{\"383\":1,\"406\":1,\"729\":1,\"1050\":1,\"1337\":1,\"1394\":1,\"1577\":1,\"1791\":1}}],[\"最后才会使用简单日志实现\",{\"1\":{\"376\":1}}],[\"最后交换两个survivor区的角色\",{\"1\":{\"171\":1}}],[\"最后交换两个内存块的角色\",{\"1\":{\"169\":1}}],[\"最后直接清理掉边界以外的内存\",{\"1\":{\"170\":1,\"1523\":1}}],[\"最后从\",{\"1\":{\"154\":1,\"1514\":1}}],[\"最后回到\",{\"1\":{\"101\":1}}],[\"最后计算得到\",{\"1\":{\"83\":1}}],[\"最后存入\",{\"1\":{\"14\":1}}],[\"最复杂\",{\"1\":{\"37\":1}}],[\"日出\",{\"1\":{\"1825\":1}}],[\"日喀则\",{\"1\":{\"1825\":1}}],[\"日志写入当前工作目录的\",{\"1\":{\"1698\":1}}],[\"日志处理\",{\"1\":{\"1631\":1}}],[\"日志处理器是无状态的\",{\"1\":{\"851\":1}}],[\"日志管理\",{\"1\":{\"1601\":1}}],[\"日志组维护两个属性\",{\"1\":{\"1555\":1}}],[\"日志组件的唯一选择\",{\"1\":{\"376\":1}}],[\"日志等手段分析业务逻辑是否影响了性能\",{\"1\":{\"1374\":1}}],[\"日志复制\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"日志头\",{\"1\":{\"749\":1}}],[\"日志段头部\",{\"1\":{\"749\":1}}],[\"日志存储\",{\"0\":{\"749\":1}}],[\"日志存储等等\",{\"1\":{\"31\":1}}],[\"日志具体内容\",{\"1\":{\"739\":1}}],[\"日志过期会自动删除\",{\"1\":{\"643\":1}}],[\"日志过期后有两种处理策略\",{\"1\":{\"477\":1}}],[\"日志编号将从000001重新开始\",{\"1\":{\"643\":1}}],[\"日志查看\",{\"1\":{\"643\":1}}],[\"日志格式\",{\"1\":{\"643\":1}}],[\"日志在每次事务提交后写入\",{\"1\":{\"638\":1}}],[\"日志在每次事务提交时写入并刷新到磁盘\",{\"1\":{\"638\":1}}],[\"日志刷新到磁盘时机\",{\"1\":{\"638\":1}}],[\"日志缓冲区的日志会定期刷新到磁盘中\",{\"1\":{\"638\":1}}],[\"日志缓冲区\",{\"1\":{\"638\":1}}],[\"日志记录等\",{\"1\":{\"1540\":1}}],[\"日志记录\",{\"1\":{\"636\":1,\"739\":1,\"1300\":1}}],[\"日志记录器\",{\"1\":{\"389\":1}}],[\"日志适配接口\",{\"1\":{\"545\":1}}],[\"日志清理\",{\"0\":{\"477\":1}}],[\"日志索引\",{\"1\":{\"476\":1}}],[\"日志里存储的是序列化后的数据\",{\"1\":{\"475\":1}}],[\"日志文件等数据源都能够以很高的速度产生数据\",{\"1\":{\"1212\":1}}],[\"日志文件组中每个文件大小一样\",{\"1\":{\"739\":1}}],[\"日志文件组\",{\"1\":{\"739\":1,\"1555\":1}}],[\"日志文件位置等\",{\"1\":{\"1563\":1}}],[\"日志文件位置\",{\"1\":{\"649\":1}}],[\"日志文件名\",{\"1\":{\"649\":1}}],[\"日志文件\",{\"1\":{\"475\":1}}],[\"日志结构\",{\"0\":{\"475\":1}}],[\"日志末端偏移\",{\"1\":{\"471\":1}}],[\"日志分块存储的大小\",{\"1\":{\"467\":1}}],[\"日志数据都是海量数据\",{\"1\":{\"441\":1}}],[\"日志同步\",{\"0\":{\"441\":1}}],[\"日志采集业务\",{\"1\":{\"410\":1}}],[\"日志打印的\",{\"1\":{\"820\":1}}],[\"日志打印采用占位符\",{\"1\":{\"391\":1}}],[\"日志打印设置为非阻塞模式\",{\"1\":{\"391\":1}}],[\"日志接入最佳实践\",{\"1\":{\"391\":1}}],[\"日志规约\",{\"1\":{\"391\":1}}],[\"日志实现\",{\"0\":{\"385\":1}}],[\"日志实现在\",{\"1\":{\"382\":1}}],[\"日志发展史\",{\"1\":{\"376\":1}}],[\"日志门面最后以\",{\"1\":{\"382\":1}}],[\"日志门面\",{\"0\":{\"381\":1},\"1\":{\"376\":1}}],[\"日志之前\",{\"1\":{\"372\":1}}],[\"日志框架会输出大于或等于指定等级的所有日志\",{\"1\":{\"390\":1}}],[\"日志框架的发展历史\",{\"1\":{\"376\":1}}],[\"日志框架\",{\"0\":{\"370\":1,\"371\":1}}],[\"日志级别\",{\"0\":{\"390\":1},\"1\":{\"355\":1,\"390\":1}}],[\"日志\",{\"0\":{\"355\":1,\"641\":1},\"1\":{\"643\":1,\"1346\":1,\"1621\":1},\"2\":{\"394\":1}}],[\"日期差\",{\"1\":{\"1567\":1}}],[\"日期增加函数\",{\"1\":{\"1567\":1}}],[\"日期转换统一使用\",{\"1\":{\"1244\":1}}],[\"日期范围\",{\"1\":{\"665\":1}}],[\"日期格式化\",{\"1\":{\"1567\":1}}],[\"日期格式\",{\"1\":{\"665\":1}}],[\"日期和时间\",{\"0\":{\"665\":1}}],[\"日期等等之外\",{\"1\":{\"1332\":1}}],[\"日期等\",{\"1\":{\"608\":1}}],[\"日期对象\",{\"1\":{\"353\":1}}],[\"日期与时间\",{\"0\":{\"353\":1}}],[\"日期相加\",{\"1\":{\"129\":1}}],[\"日期之间的天数\",{\"1\":{\"129\":1}}],[\"日期函数\",{\"0\":{\"595\":1},\"1\":{\"129\":2,\"592\":1}}],[\"日期\",{\"1\":{\"36\":1,\"112\":1}}],[\"品牌\",{\"1\":{\"36\":1}}],[\"字母后面有一个数字代表数量\",{\"1\":{\"1739\":1}}],[\"字\",{\"1\":{\"1435\":1}}],[\"字典序\",{\"1\":{\"969\":1}}],[\"字典时\",{\"1\":{\"967\":1}}],[\"字典和\",{\"1\":{\"966\":1}}],[\"字典有两个作用\",{\"1\":{\"964\":1}}],[\"字典中查找对应的脚本\",{\"1\":{\"967\":1}}],[\"字典中\",{\"1\":{\"964\":1,\"966\":1}}],[\"字典的键是为某个lua脚本的sha1校验和\",{\"1\":{\"964\":1}}],[\"字典的键是频道\",{\"1\":{\"954\":1}}],[\"字典的键是主服务器的名字\",{\"1\":{\"939\":1}}],[\"字典的每个键值对保存一个集合元素\",{\"1\":{\"900\":1}}],[\"字典的每个键都是一个字符串对象\",{\"1\":{\"898\":1,\"899\":1}}],[\"字典的每个值都是null\",{\"1\":{\"899\":1}}],[\"字典的每个值都是一个字符串对象\",{\"1\":{\"898\":1}}],[\"字典可以实现$o\",{\"1\":{\"900\":1}}],[\"字典创建了从成员到分值的映射\",{\"1\":{\"900\":1}}],[\"字典结构\",{\"1\":{\"882\":1}}],[\"字典实现\",{\"0\":{\"882\":1}}],[\"字典\",{\"0\":{\"881\":1},\"1\":{\"882\":1,\"895\":1,\"964\":1,\"966\":1}}],[\"字面值常量等\",{\"1\":{\"240\":1}}],[\"字面量示例\",{\"1\":{\"112\":1}}],[\"字节打印流\",{\"1\":{\"1502\":1}}],[\"字节输入输出流\",{\"1\":{\"1502\":1}}],[\"字节填充\",{\"1\":{\"1435\":1}}],[\"字节数\",{\"1\":{\"1685\":1}}],[\"字节数据常见情况\",{\"1\":{\"843\":1}}],[\"字节数组用于保存字符串\",{\"1\":{\"878\":1}}],[\"字节数组\",{\"1\":{\"112\":1}}],[\"字节数组转换\",{\"1\":{\"80\":1}}],[\"字节就会缓冲在接收方的滑动窗口中\",{\"1\":{\"839\":1}}],[\"字节\",{\"1\":{\"663\":1,\"664\":7,\"975\":1,\"1502\":1}}],[\"字节流不适合读取中文内容输出\",{\"1\":{\"318\":1}}],[\"字节流适合一切文件数据的拷贝\",{\"1\":{\"318\":1}}],[\"字节流\",{\"0\":{\"317\":1}}],[\"字节流对应的工具类为\",{\"1\":{\"82\":1}}],[\"字节码层面上\",{\"1\":{\"1533\":1}}],[\"字节码的验证\",{\"1\":{\"1527\":1}}],[\"字节码框架的\",{\"1\":{\"1009\":1}}],[\"字节码文件阶段\",{\"1\":{\"348\":2}}],[\"字节码中的泛型类型都会被擦除\",{\"1\":{\"306\":1}}],[\"字节码\",{\"1\":{\"270\":1}}],[\"字节码生成库\",{\"1\":{\"1014\":1}}],[\"字节码生成\",{\"0\":{\"264\":1}}],[\"字节码验证\",{\"1\":{\"250\":1}}],[\"字节码执行引擎通常由解释器和即时编译器\",{\"1\":{\"242\":1}}],[\"字节码执行引擎是java程序在虚拟机上执行的核心组件之一\",{\"1\":{\"242\":1}}],[\"字节码执行引擎\",{\"0\":{\"242\":1}}],[\"字节码指令可以分为多种类型\",{\"1\":{\"241\":1}}],[\"字节码指令是由一个字节表示的操作码\",{\"1\":{\"241\":1}}],[\"字节码指令\",{\"0\":{\"241\":1}}],[\"字节码byte\",{\"1\":{\"239\":1}}],[\"字节码解释器通过改变该寄存器的值\",{\"1\":{\"202\":1}}],[\"字符数\",{\"1\":{\"1685\":1}}],[\"字符打印流\",{\"1\":{\"1502\":1}}],[\"字符的转换流\",{\"1\":{\"1502\":1}}],[\"字符设备\",{\"1\":{\"1480\":1}}],[\"字符输入输出流\",{\"1\":{\"1502\":1}}],[\"字符输入转换流\",{\"1\":{\"320\":1}}],[\"字符输出转换流\",{\"1\":{\"320\":1}}],[\"字符流读写数据的性能\",{\"1\":{\"319\":1}}],[\"字符流适合文本文件的读写\",{\"1\":{\"318\":1}}],[\"字符流\",{\"0\":{\"318\":1}}],[\"字符流对应的工具类为\",{\"1\":{\"82\":1}}],[\"字符集和比较规则\",{\"0\":{\"674\":1}}],[\"字符集\",{\"0\":{\"315\":1},\"1\":{\"574\":1}}],[\"字符序列匹配和处理的工具\",{\"1\":{\"79\":1}}],[\"字符串处理\",{\"1\":{\"1067\":1}}],[\"字符串对象表示的键\",{\"1\":{\"913\":1}}],[\"字符串对象的编码有三种\",{\"1\":{\"896\":1}}],[\"字符串对象是唯一一种会被其它四种类型嵌套的对象\",{\"1\":{\"896\":1}}],[\"字符串对象\",{\"0\":{\"896\":1},\"1\":{\"896\":1,\"913\":1}}],[\"字符串对象可以有零个或\",{\"1\":{\"663\":1}}],[\"字符串互转\",{\"0\":{\"774\":1}}],[\"字符串hash解析算法\",{\"1\":{\"656\":1}}],[\"字符串函数\",{\"0\":{\"593\":1}}],[\"字符串和日期类型数据应该包含在引号中\",{\"1\":{\"578\":1}}],[\"字符串字面量在编译时有优化机制\",{\"1\":{\"301\":1}}],[\"字符串变量拼接的本质是\",{\"1\":{\"301\":1}}],[\"字符串变量拼接的原理是\",{\"1\":{\"211\":1}}],[\"字符串常量拼接的原理是编译期优化\",{\"1\":{\"211\":1}}],[\"字符串常量池\",{\"1\":{\"210\":1}}],[\"字符串拼接\",{\"1\":{\"593\":1}}],[\"字符串拼接见\",{\"1\":{\"211\":1}}],[\"字符串拼接工具\",{\"1\":{\"79\":1}}],[\"字符串类型不加引号\",{\"1\":{\"703\":1}}],[\"字符串类型常量\",{\"1\":{\"211\":1}}],[\"字符串类型\",{\"1\":{\"146\":1}}],[\"字符串分割工具\",{\"1\":{\"79\":1}}],[\"字符串\",{\"0\":{\"299\":1,\"663\":1},\"1\":{\"36\":1,\"112\":1,\"211\":1,\"584\":1,\"608\":1,\"774\":1,\"1570\":1}}],[\"字段里加一个\",{\"1\":{\"1411\":1}}],[\"字段间\",{\"1\":{\"1227\":1}}],[\"字段间用逗号分割\",{\"1\":{\"614\":1}}],[\"字段也会设置为该线程\",{\"1\":{\"1074\":1}}],[\"字段长度较长\",{\"1\":{\"708\":1}}],[\"字段含义\",{\"0\":{\"728\":1},\"1\":{\"706\":1}}],[\"字段类型及访问权限等\",{\"1\":{\"673\":1}}],[\"字段类型必须保持一致\",{\"1\":{\"606\":1}}],[\"字段类型\",{\"1\":{\"599\":1}}],[\"字段列表\",{\"1\":{\"581\":1,\"582\":1,\"583\":1,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"603\":2,\"604\":2,\"605\":1,\"606\":2,\"727\":1}}],[\"字段操作\",{\"0\":{\"576\":1}}],[\"字段n注释\",{\"1\":{\"575\":1}}],[\"字段n类型\",{\"1\":{\"575\":1}}],[\"字段n\",{\"1\":{\"575\":1}}],[\"字段3注释\",{\"1\":{\"575\":1}}],[\"字段3类型\",{\"1\":{\"575\":1}}],[\"字段3\",{\"1\":{\"575\":1,\"582\":1}}],[\"字段注入到属性的映射\",{\"1\":{\"532\":1}}],[\"字段和方法\",{\"1\":{\"252\":1}}],[\"字段和方法的名称和描述符\",{\"1\":{\"240\":1}}],[\"字段的常量值等\",{\"1\":{\"240\":1}}],[\"字段的名称和描述符\",{\"1\":{\"240\":1}}],[\"字段表集合\",{\"1\":{\"1526\":1}}],[\"字段表用于描述类中声明的字段\",{\"1\":{\"240\":1}}],[\"字段表\",{\"1\":{\"240\":1}}],[\"字段集合\",{\"1\":{\"112\":1}}],[\"字段名等\",{\"1\":{\"1539\":1}}],[\"字段名2\",{\"1\":{\"578\":2,\"579\":1}}],[\"字段名1\",{\"1\":{\"578\":2,\"579\":1}}],[\"字段名\",{\"1\":{\"50\":1,\"576\":3,\"599\":1}}],[\"字段2注释\",{\"1\":{\"575\":1}}],[\"字段2类型\",{\"1\":{\"575\":1}}],[\"字段2\",{\"1\":{\"50\":1,\"575\":1,\"582\":3,\"586\":1}}],[\"字段1注释\",{\"1\":{\"575\":1}}],[\"字段1类型\",{\"1\":{\"575\":1}}],[\"字段1\",{\"1\":{\"50\":1,\"575\":1,\"582\":3,\"586\":1}}],[\"字段配置\",{\"1\":{\"42\":1}}],[\"字段数据类型\",{\"1\":{\"36\":1}}],[\"字段属性和字段内容\",{\"1\":{\"34\":1}}],[\"字段是文档的组成单元\",{\"1\":{\"34\":1}}],[\"字段\",{\"1\":{\"34\":1,\"211\":1,\"240\":5,\"572\":1,\"619\":2,\"754\":1,\"1224\":1,\"1398\":1,\"1404\":1,\"1527\":1,\"1557\":1,\"1568\":1}}],[\"常驻线程数量\",{\"1\":{\"1106\":1}}],[\"常见问题\",{\"0\":{\"1629\":1}}],[\"常见解决方案\",{\"1\":{\"1622\":1}}],[\"常见网关\",{\"1\":{\"1621\":1}}],[\"常见消息分为五种类型\",{\"1\":{\"949\":1}}],[\"常见聚合函数有\",{\"1\":{\"584\":1}}],[\"常见\",{\"0\":{\"410\":1},\"1\":{\"1625\":1}}],[\"常见字符集\",{\"1\":{\"315\":1}}],[\"常见的\",{\"1\":{\"760\":1,\"761\":1}}],[\"常见的段有数据段\",{\"1\":{\"694\":1}}],[\"常见的有两种节点\",{\"1\":{\"389\":1}}],[\"常见的字节码指令包括\",{\"1\":{\"241\":1}}],[\"常见的安全点选择策略包括轮询\",{\"1\":{\"172\":1}}],[\"常见的简单类型有\",{\"1\":{\"36\":1}}],[\"常见的包括\",{\"1\":{\"36\":1}}],[\"常量表检测\",{\"1\":{\"724\":1}}],[\"常量传递\",{\"1\":{\"724\":1}}],[\"常量折叠\",{\"1\":{\"274\":1}}],[\"常量值\",{\"1\":{\"240\":1}}],[\"常量池在编译期间就会生成\",{\"1\":{\"1536\":1}}],[\"常量池的索引从1开始\",{\"1\":{\"240\":1}}],[\"常量池的数量\",{\"1\":{\"240\":1}}],[\"常量池\",{\"1\":{\"240\":2,\"1526\":1}}],[\"常量\",{\"1\":{\"211\":1,\"1520\":1}}],[\"常规数据\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"常规索引\",{\"1\":{\"699\":1}}],[\"常规调试事件\",{\"1\":{\"390\":1}}],[\"常规\",{\"1\":{\"93\":1}}],[\"常用命令\",{\"0\":{\"1876\":1},\"1\":{\"1633\":1,\"1634\":1}}],[\"常用注解\",{\"0\":{\"1608\":1,\"1708\":1}}],[\"常用操作和\",{\"1\":{\"1218\":1}}],[\"常用操作符\",{\"1\":{\"608\":1,\"609\":1,\"610\":1,\"611\":1}}],[\"常用线程池包括\",{\"1\":{\"1110\":1}}],[\"常用\",{\"1\":{\"819\":1}}],[\"常用的压缩格式包括\",{\"1\":{\"1688\":1}}],[\"常用的队列实现有\",{\"1\":{\"1107\":1,\"1511\":1}}],[\"常用的有三类\",{\"1\":{\"919\":1}}],[\"常用的有\",{\"1\":{\"861\":1}}],[\"常用的方案有\",{\"1\":{\"788\":1}}],[\"常用的锁工具如reentrantlock基本用法\",{\"1\":{\"1\":1}}],[\"常用函数\",{\"1\":{\"593\":1,\"594\":1,\"595\":1,\"596\":1}}],[\"常用权限\",{\"1\":{\"591\":1}}],[\"常用api\",{\"0\":{\"350\":1}}],[\"常用方法\",{\"1\":{\"332\":1}}],[\"常用于第三方库的类装配\",{\"1\":{\"1594\":1}}],[\"常用于第三方账号登录\",{\"1\":{\"15\":1}}],[\"常用于全库的逻辑备份\",{\"1\":{\"1559\":1}}],[\"常用于取消跟踪已经\",{\"1\":{\"1319\":1}}],[\"常用于更新\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"常用于执行后台任务\",{\"1\":{\"1087\":1}}],[\"常用于单表拆分\",{\"1\":{\"601\":1}}],[\"常用于处理有优先级的任务\",{\"1\":{\"414\":1,\"1628\":1}}],[\"常用于静态字段的初始化\",{\"1\":{\"240\":1}}],[\"常用格式有b\",{\"1\":{\"232\":1}}],[\"常用属性\",{\"1\":{\"117\":1}}],[\"常用实现如\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"常用实现有hashmap\",{\"1\":{\"68\":1}}],[\"常用实现包括\",{\"1\":{\"66\":1}}],[\"所幸安全登顶\",{\"1\":{\"1843\":1}}],[\"所幸也拍下了很多很满意的照片\",{\"1\":{\"1828\":1}}],[\"所幸最后终于还是拿到了几个厂的offer\",{\"1\":{\"1815\":1}}],[\"所敲的按键编辑器都理解为命令\",{\"1\":{\"1689\":1}}],[\"所关联的\",{\"1\":{\"1514\":1}}],[\"所需要的时间延迟\",{\"1\":{\"1490\":1}}],[\"所需要的参数\",{\"1\":{\"540\":1}}],[\"所做的实质上就是\",{\"1\":{\"1350\":1}}],[\"所依赖的\",{\"1\":{\"1224\":1}}],[\"所谓sql注入\",{\"1\":{\"1539\":1}}],[\"所谓分布式计算\",{\"1\":{\"1221\":1}}],[\"所谓的1080p\",{\"1\":{\"1803\":1}}],[\"所谓的\",{\"1\":{\"802\":1}}],[\"所谓的partition机制也就是poducer消息partitioning策略\",{\"1\":{\"451\":1}}],[\"所属线程组\",{\"1\":{\"1087\":1}}],[\"所得结果不会丢失\",{\"1\":{\"961\":1}}],[\"所在的实例\",{\"1\":{\"1629\":1}}],[\"所在的子网\",{\"1\":{\"1394\":1}}],[\"所在提交记录的指针\",{\"1\":{\"1332\":1}}],[\"所在文件位置\",{\"1\":{\"1311\":1}}],[\"所在业务的一个核心服务和另一业务线的多个服务是共用了一个\",{\"1\":{\"1233\":1}}],[\"所在线程被中断\",{\"1\":{\"785\":1}}],[\"所在页号\",{\"1\":{\"564\":1}}],[\"所在节点\",{\"1\":{\"483\":1}}],[\"所采用的\",{\"1\":{\"391\":1}}],[\"所以牛肉面会诞生在兰州这座城市\",{\"1\":{\"1848\":1}}],[\"所以23年也就看了5本书\",{\"1\":{\"1817\":1}}],[\"所以趁着自己毕业前还有半年的自由时光\",{\"1\":{\"1816\":1}}],[\"所以免费的很少\",{\"1\":{\"1809\":1}}],[\"所以设为1就好\",{\"1\":{\"1791\":1}}],[\"所以人总是要找点兴趣来慰藉\",{\"1\":{\"1786\":1}}],[\"所以北京的景点虽然多\",{\"1\":{\"1775\":1}}],[\"所以如何保证库存及时准确\",{\"1\":{\"1734\":1}}],[\"所以如果调用\",{\"1\":{\"1077\":1}}],[\"所以淘宝上也可以开苏宁的店\",{\"1\":{\"1726\":1}}],[\"所以国内航司的数据全部在中航信的主机里面\",{\"1\":{\"1724\":1}}],[\"所以mock对象在一个测试方法中的打桩\",{\"1\":{\"1711\":1}}],[\"所以本质上组合问题和子集问题是一样的\",{\"1\":{\"1671\":1}}],[\"所以本文就讲讲\",{\"1\":{\"382\":1}}],[\"所以创建\",{\"1\":{\"1599\":1}}],[\"所以它的存储信息更易懂\",{\"1\":{\"1577\":1}}],[\"所以它并不需要专门的管理员\",{\"1\":{\"434\":1}}],[\"所以一个数据页中存储的键值对比较少\",{\"1\":{\"1546\":1}}],[\"所以一般\",{\"1\":{\"1202\":1}}],[\"所以jdk自带类加载器加载的类不会被回收\",{\"1\":{\"1527\":1}}],[\"所以访问共享资源前\",{\"1\":{\"1468\":1}}],[\"所以每个进程的虚拟内存空间就是相互独立的\",{\"1\":{\"1443\":2}}],[\"所以说分支的本质就是指向某个提交的指针\",{\"1\":{\"1351\":1}}],[\"所以是一个危险的操作\",{\"1\":{\"1344\":1}}],[\"所以变基与合并各有不同\",{\"1\":{\"1337\":1}}],[\"所以这里有一个很重要的区别就是crs是真正拥有航司库存的系统\",{\"1\":{\"1724\":1}}],[\"所以这些页表是私有的\",{\"1\":{\"1443\":2}}],[\"所以这两者之间并没有严格的界线\",{\"1\":{\"1300\":1}}],[\"所以这时会将数据库连接对象的\",{\"1\":{\"1051\":1}}],[\"所以为了能够得到库存锁定的信息\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"所以缓存\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"所以风险得自己担\",{\"1\":{\"1238\":1}}],[\"所以要尽量使用同步队列\",{\"1\":{\"1120\":1}}],[\"所以要想真的利用多线程执行任务\",{\"1\":{\"1090\":1}}],[\"所以动态线程池参数是一个更好的选择\",{\"1\":{\"1119\":1}}],[\"所以最终还是回到了\",{\"1\":{\"1059\":1}}],[\"所以最后要执行\",{\"1\":{\"796\":1}}],[\"所以不用其他特殊处理\",{\"1\":{\"1049\":1}}],[\"所以事务状态虽然名字叫\",{\"1\":{\"1044\":1}}],[\"所以其实可以直接向\",{\"1\":{\"817\":1}}],[\"所以只能以近似值保存\",{\"1\":{\"1438\":1}}],[\"所以只能通过\",{\"1\":{\"1228\":1}}],[\"所以只有delete\",{\"1\":{\"747\":1}}],[\"所以只会锁这一行\",{\"1\":{\"620\":1}}],[\"所以无需用索引\",{\"1\":{\"703\":1}}],[\"所以在切换时\",{\"1\":{\"1454\":1}}],[\"所以在创建视图时\",{\"1\":{\"621\":1}}],[\"所以在功能上\",{\"1\":{\"145\":1}}],[\"所以会把整张表都锁住进行数据更新\",{\"1\":{\"620\":1}}],[\"所以尽量使用\",{\"1\":{\"619\":1}}],[\"所以主键小占用的空间也就会少\",{\"1\":{\"615\":1}}],[\"所以推荐用utf8mb4字符集\",{\"1\":{\"574\":1}}],[\"所以另一个事务也可以在该表上加意向排他锁\",{\"1\":{\"560\":1}}],[\"所以\",{\"1\":{\"490\":1,\"552\":1,\"1115\":1,\"1416\":1,\"1573\":1,\"1737\":2}}],[\"所以可达性分析算法通常能够较快地确定出不可达对象\",{\"1\":{\"224\":1}}],[\"所以可以作为一个轻量级的锁来使用\",{\"1\":{\"145\":1}}],[\"所以必须对每次数据操作加上锁\",{\"1\":{\"148\":1}}],[\"所以进程间存在内存隔离\",{\"1\":{\"134\":1}}],[\"所以查询速度非常快\",{\"1\":{\"35\":1}}],[\"所有到过西藏的人都相信他们会回到西藏\",{\"1\":{\"1849\":1}}],[\"所有优秀的穆斯林都有责任让多神崇拜者认识到他们信仰的错误\",{\"1\":{\"1767\":1}}],[\"所有代理商都可以看到的运价\",{\"1\":{\"1732\":1}}],[\"所有渠道\",{\"1\":{\"1732\":1}}],[\"所有问题都是这两棵树的变种\",{\"1\":{\"1669\":1}}],[\"所有页面保存在一个环形链表中\",{\"1\":{\"1471\":1}}],[\"所有重传次数都有\",{\"1\":{\"1409\":1}}],[\"所有秒杀成功的请求进入队列\",{\"1\":{\"1375\":1}}],[\"所有远程仓库的最新数据到本地\",{\"1\":{\"1338\":1}}],[\"所有空行或者以\",{\"1\":{\"1330\":1}}],[\"所有对象类型\",{\"1\":{\"1712\":1}}],[\"所有对老集群的写操作\",{\"1\":{\"1235\":1}}],[\"所有对数据库进行修改的命令\",{\"1\":{\"960\":1}}],[\"所有权和权限\",{\"1\":{\"1218\":2}}],[\"所有权限\",{\"1\":{\"591\":1}}],[\"所有操作都委派给\",{\"1\":{\"1135\":1}}],[\"所有任务已终止\",{\"1\":{\"1112\":1}}],[\"所有普通线程执行完毕后自动终止\",{\"1\":{\"1087\":1}}],[\"所有慢查询日志保存至先进先出的redisserver\",{\"1\":{\"978\":1}}],[\"所有被服务器\",{\"1\":{\"964\":1}}],[\"所有被同步锁synchronized持有的对象\",{\"1\":{\"224\":1}}],[\"所有模式订阅关系保存在redisserver\",{\"1\":{\"955\":1}}],[\"所有订阅关系保存在redisserver\",{\"1\":{\"954\":1}}],[\"所有接收到的节点都会执行相同的publish命令\",{\"1\":{\"949\":1}}],[\"所有消息都由消息头\",{\"1\":{\"949\":1}}],[\"所有消息可以均匀分布到不同的partition里\",{\"1\":{\"451\":1}}],[\"所有sentinel都有一次将某个sentinel设置为局部领头的机会\",{\"1\":{\"942\":1}}],[\"所有sentinel的配置纪元\",{\"1\":{\"942\":1}}],[\"所有产生事件的套接字都会放到一个队列里\",{\"1\":{\"919\":1}}],[\"所有数据需要进行迁移\",{\"1\":{\"1489\":1}}],[\"所有数据库的键值对数据\",{\"1\":{\"913\":1}}],[\"所有数据库修改的总次数\",{\"1\":{\"912\":1}}],[\"所有数据都是用缓冲区进行处理的\",{\"1\":{\"324\":1}}],[\"所有客户端命令都会被拒绝\",{\"1\":{\"911\":1}}],[\"所有客户端的增删改查操作都会记录在该日志文件中\",{\"1\":{\"644\":1}}],[\"所有针对数据库中数据的操作本质上都是对键空间字典的操作\",{\"1\":{\"907\":1}}],[\"所有元素都已经加入排列\",{\"1\":{\"1672\":1,\"1675\":1}}],[\"所有元素保存在整数集合中\",{\"1\":{\"899\":1}}],[\"所有元素类型保持一致\",{\"1\":{\"888\":1}}],[\"所有\",{\"1\":{\"823\":1}}],[\"所有脏页对应的控制块构成flush待刷新链表\",{\"1\":{\"731\":1}}],[\"所有条件都可以使用某个索引时\",{\"1\":{\"711\":1}}],[\"所有结点本质上都是一个数据页\",{\"1\":{\"698\":1}}],[\"所有正常记录\",{\"1\":{\"690\":1}}],[\"所有表的并集是全量数据\",{\"1\":{\"652\":1}}],[\"所有库的并集是全量数据\",{\"1\":{\"652\":3}}],[\"所有没被\",{\"1\":{\"634\":1}}],[\"所有以02开头的sqlstate代码的简写\",{\"1\":{\"634\":1}}],[\"所有以01开头的sqlstate代码的简写\",{\"1\":{\"634\":1}}],[\"所有不是通过索引直接返回排序结果的排序都叫\",{\"1\":{\"616\":1}}],[\"所有跨存储引擎的功能也在这一层实现\",{\"1\":{\"570\":1}}],[\"所有事务依次执行\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1,\"1612\":1}}],[\"所有事务进行的修改都会先记录到这个回滚日志中\",{\"1\":{\"1034\":1}}],[\"所有事务\",{\"1\":{\"552\":1}}],[\"所有节点访问同一份最新的数据副本\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"所有节点在同一时间的数据完全一致\",{\"1\":{\"1206\":1}}],[\"所有节点的确认\",{\"1\":{\"450\":1}}],[\"所有节点进程全部停止后再停止\",{\"1\":{\"446\":1}}],[\"所有实例均分总空间innodb\",{\"1\":{\"731\":1}}],[\"所有实例共享的时间戳\",{\"1\":{\"192\":1}}],[\"所有实现了\",{\"1\":{\"383\":1}}],[\"所有引用指向该内存区域的数据都会反映出来\",{\"1\":{\"359\":1}}],[\"所有类成分class\",{\"1\":{\"348\":1}}],[\"所有线程统一放在\",{\"1\":{\"1511\":1}}],[\"所有线程完成后返回线程池\",{\"1\":{\"1110\":1}}],[\"所有线程\",{\"1\":{\"331\":1}}],[\"所有线程都会尝试不断前进\",{\"1\":{\"134\":1}}],[\"所有线程都需要阻塞\",{\"1\":{\"9\":2}}],[\"所有线程都可以访问资源\",{\"1\":{\"9\":1}}],[\"所有字节\",{\"1\":{\"317\":1}}],[\"所有的pss系统都是托管给中航信来建设和维护的\",{\"1\":{\"1724\":1}}],[\"所有的调用直接返回降级数据\",{\"1\":{\"1636\":1}}],[\"所有的策略需要实现rejectedexecutionhandler接口\",{\"1\":{\"1109\":1}}],[\"所有的用户年龄小于等于uage的用户姓名\",{\"1\":{\"634\":1}}],[\"所有的消费者订阅的消息都是相同的\",{\"1\":{\"496\":1}}],[\"所有的\",{\"1\":{\"195\":1}}],[\"所有的查询\",{\"1\":{\"34\":1}}],[\"词法解析\",{\"1\":{\"672\":1}}],[\"词法分析\",{\"0\":{\"257\":1},\"1\":{\"570\":1}}],[\"词向量相关的tvd\",{\"1\":{\"37\":1}}],[\"词典tim\",{\"1\":{\"37\":1}}],[\"词条和文档id都建立了索引\",{\"1\":{\"35\":1}}],[\"词组到文档的对应关系组成的链表\",{\"1\":{\"34\":1}}],[\"每10ms返回一段数据\",{\"1\":{\"1858\":1}}],[\"每爬几十米就得坐下歇歇\",{\"1\":{\"1843\":1}}],[\"每跳出一个舒适圈都让人有一番成长\",{\"1\":{\"1786\":1}}],[\"每天敷衍导师\",{\"1\":{\"1815\":1}}],[\"每天都是复习背八股\",{\"1\":{\"1815\":1}}],[\"每天都有大量的机票搜索请求\",{\"1\":{\"1737\":1}}],[\"每天晚上骑车或者坐班车\",{\"1\":{\"1786\":1}}],[\"每天干点没人干的脏活\",{\"1\":{\"1783\":1}}],[\"每天凌晨执行\",{\"1\":{\"1361\":1}}],[\"每周班次的确定会根据航空公司的运量\",{\"1\":{\"1730\":1}}],[\"每名工程师都能随时很方便地执行自动化测试用例\",{\"1\":{\"1705\":1}}],[\"每两个8位合并统计\",{\"1\":{\"1666\":1}}],[\"每分配一个线程需要分配一定的虚拟内存\",{\"1\":{\"1464\":1}}],[\"每收到一个ack\",{\"1\":{\"1413\":1}}],[\"每\",{\"1\":{\"1360\":1}}],[\"每行最后一次修改对应的提交记录\",{\"1\":{\"1347\":1}}],[\"每台机器各自负责一部分数据分片的处理\",{\"1\":{\"1221\":1}}],[\"每台机器必须都不一样\",{\"1\":{\"1154\":1}}],[\"每投完一次票\",{\"1\":{\"1204\":1}}],[\"每轮选举中\",{\"1\":{\"1202\":1}}],[\"每更新一次数据\",{\"1\":{\"1174\":1}}],[\"每秒钟同步一次\",{\"1\":{\"916\":1,\"1577\":1}}],[\"每秒将日志写入并刷新到磁盘一次\",{\"1\":{\"638\":1}}],[\"每结束一个事件循环\",{\"1\":{\"916\":1}}],[\"每位工人有相应的任务队列\",{\"1\":{\"814\":1}}],[\"每写入一组undo日志都会在这组日志前先记录关于这个组的属性\",{\"1\":{\"749\":1}}],[\"每写入一个mtr生成的redo日志就增加lsn\",{\"1\":{\"740\":1}}],[\"每组\",{\"1\":{\"1446\":1}}],[\"每组mtr生成的redo日志都有一个唯一的lsn值与其对应\",{\"1\":{\"740\":1}}],[\"每组最后一条记录的地址偏移量抽取成索引\",{\"1\":{\"690\":1}}],[\"每组最后一条记录\",{\"1\":{\"690\":1}}],[\"每层节点按照索引值从小到大的顺序排序而组成了双向链表\",{\"1\":{\"698\":1}}],[\"每256个页划为一组\",{\"1\":{\"693\":1}}],[\"每插入一条记录\",{\"1\":{\"689\":1,\"690\":1}}],[\"每列占1~2个字节\",{\"1\":{\"684\":1}}],[\"每创建一个表\",{\"1\":{\"673\":2}}],[\"每创建一个数据库\",{\"1\":{\"673\":1}}],[\"每页显示记录数\",{\"1\":{\"587\":1}}],[\"每条信道都有唯一id\",{\"1\":{\"1629\":1}}],[\"每条\",{\"1\":{\"1555\":1}}],[\"每条消息分为\",{\"1\":{\"844\":1}}],[\"每条消息采用固定的分隔符\",{\"1\":{\"843\":1}}],[\"每条消息采用固定长度\",{\"1\":{\"842\":1}}],[\"每条日志对应一个唯一的编号undo\",{\"1\":{\"745\":1}}],[\"每条语句由若干mini\",{\"1\":{\"739\":1}}],[\"每条记录对应一个索引的某一个统计项\",{\"1\":{\"720\":1}}],[\"每条记录对应一个比特位\",{\"1\":{\"564\":1}}],[\"每条记录对应一张表\",{\"1\":{\"720\":1}}],[\"每条发布到kafka集群的消息都有一个类别\",{\"1\":{\"430\":1}}],[\"每种对象都至少使用了两种不同实现结构\",{\"1\":{\"895\":1}}],[\"每种对象都使用了前述的至少一种数据结构\",{\"1\":{\"895\":1}}],[\"每种\",{\"1\":{\"829\":1}}],[\"每种实现也分共享锁和排他锁\",{\"1\":{\"554\":1}}],[\"每种引用类型都有其特定的使用场景和行为\",{\"1\":{\"183\":1}}],[\"每隔\",{\"1\":{\"533\":1}}],[\"每隔一段时间抽取一批\",{\"1\":{\"1573\":1}}],[\"每隔一段时间执行一次过期删除\",{\"1\":{\"908\":1}}],[\"每隔一段时间\",{\"1\":{\"490\":1}}],[\"每接收到一个socket管道后分配一个独立的线程负责处理它\",{\"1\":{\"343\":1}}],[\"每当一个socket准备好执行连接应答\",{\"1\":{\"1572\":1}}],[\"每当一个套接字准备好执行连接应答\",{\"1\":{\"919\":1}}],[\"每当收到一个ack\",{\"1\":{\"1413\":1}}],[\"每当调用一个方法时\",{\"1\":{\"1247\":1}}],[\"每当主服务器添加一个新的从服务器时\",{\"1\":{\"967\":1}}],[\"每当时间事件执行器运行时\",{\"1\":{\"920\":1}}],[\"每当写入了固定大小的日志\",{\"1\":{\"467\":1}}],[\"每当指向该对象的引用失效时\",{\"1\":{\"223\":1}}],[\"每当创建一个新的引用指向该对象时\",{\"1\":{\"223\":1}}],[\"每执行一个方法\",{\"1\":{\"203\":1}}],[\"每次回家都得两三天的路程\",{\"1\":{\"1833\":1}}],[\"每次写消息到\",{\"1\":{\"1629\":1}}],[\"每次写操作都会写回内存\",{\"1\":{\"1435\":1}}],[\"每次获取都会创建一个新实例\",{\"1\":{\"1596\":1}}],[\"每次提交任务仅\",{\"1\":{\"1556\":1}}],[\"每次提交任务都\",{\"1\":{\"1556\":1}}],[\"每次提交事务仅\",{\"1\":{\"1556\":1}}],[\"每次提交就会对当前的全部文件创建一个快照并保存这个快照的索引\",{\"1\":{\"1309\":1}}],[\"每次使用其中一块\",{\"1\":{\"1523\":1}}],[\"每次批量读\",{\"1\":{\"1502\":1}}],[\"每次过程重入时\",{\"1\":{\"1453\":1}}],[\"每次分配只用eden和其中一块survivor\",{\"1\":{\"1523\":1}}],[\"每次分配只是用eden和其中一块survivor\",{\"1\":{\"171\":1}}],[\"每次分配的内存块前有\",{\"1\":{\"1445\":1}}],[\"每次交换仅几个页面\",{\"1\":{\"1443\":1}}],[\"每次运行\",{\"1\":{\"1350\":1}}],[\"每次向\",{\"1\":{\"1174\":1}}],[\"每次返回一个新的流\",{\"1\":{\"1068\":1}}],[\"每次都创建新实例对象\",{\"1\":{\"1006\":1}}],[\"每次都会更新保存结果\",{\"1\":{\"969\":1}}],[\"每次循环中载入128个二进制位\",{\"1\":{\"976\":1}}],[\"每次循环称为一个轮次round\",{\"1\":{\"260\":1}}],[\"每次选举不论是否成功\",{\"1\":{\"942\":1}}],[\"每次一个套接字的方式传送套接字\",{\"1\":{\"919\":1}}],[\"每次有数据修改发生时都会写入aof文件\",{\"1\":{\"916\":1,\"1577\":1}}],[\"每次只有队首的线程能够获取锁\",{\"1\":{\"1518\":1}}],[\"每次只能后退一步\",{\"1\":{\"886\":1}}],[\"每次只使用其中的一块\",{\"1\":{\"169\":1}}],[\"每次对\",{\"1\":{\"1507\":1}}],[\"每次对字典执行添加\",{\"1\":{\"883\":1}}],[\"每次对载入内存中的被驱动表记录和join\",{\"1\":{\"714\":1}}],[\"每次加载新页面时\",{\"1\":{\"732\":1}}],[\"每次操作锁住对应的行数据\",{\"1\":{\"554\":1}}],[\"每次操作锁住一条行数据\",{\"1\":{\"549\":1}}],[\"每次操作锁住整张表\",{\"1\":{\"549\":1}}],[\"每次执行完\",{\"1\":{\"1068\":1}}],[\"每次执行\",{\"1\":{\"542\":1}}],[\"每次创建结果对象的新实例时\",{\"1\":{\"522\":1}}],[\"每次创建对象调用构造器前\",{\"1\":{\"289\":1}}],[\"每次重启都会重新分配\",{\"1\":{\"461\":1}}],[\"每次扩容2倍\",{\"1\":{\"304\":1}}],[\"每次拼接都会产生新的对象\",{\"1\":{\"302\":1}}],[\"每次垃圾收集都会有大批对象死去\",{\"1\":{\"171\":1}}],[\"每次添加时自增一个斐波那契数\",{\"1\":{\"154\":1,\"1514\":1}}],[\"每次条件不变\",{\"1\":{\"127\":1}}],[\"每次请求都打开\",{\"1\":{\"526\":1}}],[\"每次请求都得携带用户\",{\"1\":{\"20\":1}}],[\"每次请求都是独立的\",{\"1\":{\"17\":1}}],[\"每次请求携带\",{\"1\":{\"17\":1}}],[\"每一首都仿佛击打在我的心上\",{\"1\":{\"1841\":1}}],[\"每一部都狠狠触动我的感情\",{\"1\":{\"1826\":1}}],[\"每一项代表一个文件描述符\",{\"1\":{\"1475\":1}}],[\"每一层的节点数都达到最大值\",{\"1\":{\"1387\":1}}],[\"每一次航线日期的查询都要展示大量的航班库存信息\",{\"1\":{\"1737\":1}}],[\"每一次来自新\",{\"1\":{\"1596\":1}}],[\"每一次\",{\"1\":{\"1596\":2}}],[\"每一次连接都会询问你的用户名和密码\",{\"1\":{\"1347\":1}}],[\"每一次运行结果不同\",{\"1\":{\"127\":1}}],[\"每一次运行结果一致\",{\"1\":{\"127\":1}}],[\"每一级会覆盖上一级的配置\",{\"1\":{\"1311\":1}}],[\"每一个事件成为\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"每一个shard的内容就是这个完整索内容的1\",{\"1\":{\"34\":1}}],[\"每一位表示对应的槽是否被指派给本节点\",{\"1\":{\"946\":1}}],[\"每一台数据库服务器里面存储了什么数据\",{\"1\":{\"654\":1}}],[\"每个佛像\",{\"1\":{\"1836\":1}}],[\"每个月房贷利息就要5k多ciao\",{\"1\":{\"1786\":1}}],[\"每个乘机人对应一个唯一的票号\",{\"1\":{\"1738\":1}}],[\"每个存在的整数对应的\",{\"1\":{\"1658\":1}}],[\"每个存储引擎都有其独特的数据存储和索引结构\",{\"1\":{\"1540\":1}}],[\"每个存储器只和相邻的一层存储器设备进行交互\",{\"1\":{\"1434\":1}}],[\"每个容器相互隔离\",{\"1\":{\"1634\":1}}],[\"每个模块都可以是自解释的\",{\"1\":{\"1632\":1}}],[\"每个生命周期里包含多个阶段\",{\"1\":{\"1632\":1}}],[\"每个bit表示某个元素的对应值或状态\",{\"1\":{\"1570\":1}}],[\"每个库可以位于不同服务器上\",{\"1\":{\"1564\":1}}],[\"每个库的数据都不一样\",{\"1\":{\"652\":2}}],[\"每个库的数据也不一样\",{\"1\":{\"652\":1}}],[\"每个库的表结构都一样\",{\"1\":{\"652\":2}}],[\"每个库的表结构都不一样\",{\"1\":{\"652\":1}}],[\"每个数据页的大小默认是\",{\"1\":{\"1546\":1}}],[\"每个字段都不可再分\",{\"1\":{\"1538\":1}}],[\"每个字符串对象保存一个列表元素\",{\"1\":{\"897\":1}}],[\"每个字符集有若干种比较规则\",{\"1\":{\"674\":1}}],[\"每个类加载器都有对应的父类加载器\",{\"1\":{\"1528\":1}}],[\"每个类的日志实例声明为static\",{\"1\":{\"391\":1}}],[\"每个控制寄存器分配一个\",{\"1\":{\"1481\":1}}],[\"每个设备都有一个设备控制器\",{\"1\":{\"1481\":1}}],[\"每个块有自己的地址\",{\"1\":{\"1480\":1}}],[\"每个文件系统有各自的\",{\"1\":{\"1474\":1}}],[\"每个进程维护一个\",{\"1\":{\"1483\":1}}],[\"每个进程的用户地址空间都是独立的\",{\"1\":{\"1455\":1}}],[\"每个进程的虚拟地址的内核部分都关联相同的物理内存\",{\"1\":{\"1444\":1}}],[\"每个进程都有自己的页表\",{\"1\":{\"1443\":1}}],[\"每个程序都有自己的虚拟地址空间\",{\"1\":{\"1443\":1}}],[\"每个udp报文就是一个完整的用户消息\",{\"1\":{\"1417\":1}}],[\"每个undo页面链表对应一个段\",{\"1\":{\"749\":1}}],[\"每个table元素都可以并发\",{\"1\":{\"1497\":1}}],[\"每个treenode节点里面是一个treenode列表\",{\"1\":{\"1361\":1}}],[\"每个topic创建时的副本数\",{\"1\":{\"445\":1}}],[\"每个任期都以一次选举开始\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"每个占\",{\"1\":{\"1219\":1}}],[\"每个实例用于客户端连接的端口\",{\"1\":{\"1196\":1}}],[\"每个实例对应的数据目录\",{\"1\":{\"1196\":1}}],[\"每个multicmd封装一个具体的命令\",{\"1\":{\"959\":1}}],[\"每个mtr又包含若干条redo日志\",{\"1\":{\"739\":1}}],[\"每个主节点都有一次投票机会\",{\"1\":{\"948\":1}}],[\"每个指针指向负责处理对应槽的节点\",{\"1\":{\"946\":1}}],[\"每个节点的值都是一个子集\",{\"1\":{\"1670\":1}}],[\"每个节点拥有集群的全量数据\",{\"1\":{\"1194\":1}}],[\"每个节点保存一个集群状态结构\",{\"1\":{\"945\":1}}],[\"每个节点使用一个clusternode记录自己的状态\",{\"1\":{\"945\":1}}],[\"每个成员\",{\"1\":{\"913\":1}}],[\"每个键都属于其中一个槽\",{\"1\":{\"946\":1}}],[\"每个键\",{\"1\":{\"913\":1}}],[\"每个键算一次\",{\"1\":{\"912\":1}}],[\"每个elem按字符串对象保存\",{\"1\":{\"913\":1}}],[\"每个entry保存一个字节数组或一个整数值\",{\"1\":{\"892\":1}}],[\"每个item按字符串对象保存\",{\"1\":{\"913\":1}}],[\"每个元素使用两个紧挨在一起的压缩列表节点保存\",{\"1\":{\"900\":1}}],[\"每个链表节点保存一个字符串对象\",{\"1\":{\"897\":1}}],[\"每个链表都是按需分配\",{\"1\":{\"749\":1}}],[\"每个压缩列表结点保存一个列表元素\",{\"1\":{\"897\":1}}],[\"每个对象都由一个redisobject结构表示\",{\"1\":{\"895\":1}}],[\"每个redisdb结构保存了一个watched\",{\"1\":{\"960\":1}}],[\"每个redisdb结构代表一个数据库\",{\"1\":{\"906\":1}}],[\"每个region根据需要扮演eden\",{\"1\":{\"177\":1,\"1525\":1}}],[\"每个rollback\",{\"1\":{\"751\":1}}],[\"每个事务对普通表\",{\"1\":{\"749\":1}}],[\"每个chunk都是一块连续的空间\",{\"1\":{\"731\":1}}],[\"每个consumer属于一个特定的\",{\"1\":{\"430\":1}}],[\"每个select对应的类型\",{\"1\":{\"728\":1}}],[\"每个segment有不同质量的副本\",{\"1\":{\"1866\":1}}],[\"每个segment上同时只有一个线程操作\",{\"1\":{\"1497\":1}}],[\"每个segment保存的第一个消息的绝对偏移量\",{\"1\":{\"476\":1}}],[\"每个segment都有一个基准偏移量\",{\"1\":{\"476\":1}}],[\"每个表都会有一条记录\",{\"1\":{\"728\":1}}],[\"每个表的访问方式等\",{\"1\":{\"727\":1}}],[\"每个表的数据也不一样\",{\"1\":{\"652\":1}}],[\"每个表的结构都不一样\",{\"1\":{\"652\":1}}],[\"每个页内的记录按索引列排序形成单链表\",{\"1\":{\"698\":1}}],[\"每个页的大小是有限的\",{\"1\":{\"615\":1}}],[\"每个段对应一个inode\",{\"1\":{\"694\":1}}],[\"每个段都有自己对应的元数据文件\",{\"1\":{\"37\":1}}],[\"每个区对应了一个xdes\",{\"1\":{\"693\":1}}],[\"每个区的大小固定1m\",{\"1\":{\"693\":1}}],[\"每个连接分配一个单独的线程处理\",{\"1\":{\"672\":1}}],[\"每个自然月为一个分片\",{\"1\":{\"656\":1}}],[\"每个比特位对应一条记录\",{\"1\":{\"564\":1}}],[\"每个消费者都会和\",{\"1\":{\"483\":1}}],[\"每个消费者组对应的实现消费者组初始化和分区分配的协调器\",{\"1\":{\"483\":1}}],[\"每个日志分段由数据文件和索引文件组\",{\"1\":{\"476\":1}}],[\"每个kafka副本对象都有两个重要属性\",{\"1\":{\"471\":1}}],[\"每个批记录对应一个分区\",{\"1\":{\"450\":1}}],[\"每个队列默认\",{\"1\":{\"450\":1}}],[\"每个partition消息队列中的消息会写入到不同的leader节点\",{\"1\":{\"450\":1}}],[\"每个分区都会对应一个物理文件\",{\"1\":{\"435\":1}}],[\"每个用户线程可以与一个或多个内核线程关联\",{\"1\":{\"280\":1}}],[\"每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用\",{\"1\":{\"205\":1}}],[\"每个\",{\"1\":{\"154\":1,\"443\":2,\"445\":1,\"475\":2,\"483\":1,\"512\":2,\"788\":1,\"789\":1,\"829\":1,\"833\":1,\"1167\":2,\"1186\":1,\"1200\":1,\"1203\":1,\"1435\":1,\"1437\":1,\"1446\":1,\"1590\":1,\"1596\":1,\"1629\":1}}],[\"每个线程内部都有一个\",{\"1\":{\"1514\":1}}],[\"每个线程占\",{\"1\":{\"1464\":1}}],[\"每个线程都有机会抢占锁\",{\"1\":{\"1518\":1}}],[\"每个线程都由一个自己的\",{\"1\":{\"366\":1}}],[\"每个线程都要用到\",{\"1\":{\"154\":1,\"1514\":1}}],[\"每个线程分配一个\",{\"1\":{\"154\":1,\"1514\":1}}],[\"每个线程拥有一份自己的数据\",{\"1\":{\"154\":1}}],[\"每个线程负责一个单独的子任务\",{\"1\":{\"134\":1}}],[\"每个方法都有三种参数重载\",{\"1\":{\"59\":1}}],[\"提前一周就预约好了\",{\"1\":{\"1776\":1}}],[\"提前扣减库存放到\",{\"1\":{\"1375\":1}}],[\"提前编译器\",{\"0\":{\"270\":1},\"1\":{\"270\":1}}],[\"提取相应的修改暂存\",{\"1\":{\"1337\":1}}],[\"提取命令参数及个数\",{\"1\":{\"926\":1}}],[\"提议值\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"提案编号\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"提案\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"提出了最好使用带版本号的锁键\",{\"1\":{\"1239\":1}}],[\"提示信息\",{\"1\":{\"1398\":1}}],[\"提示调度器当前线程愿意让出\",{\"1\":{\"1095\":1}}],[\"提示\",{\"1\":{\"802\":1,\"828\":1}}],[\"提交时再写入磁盘上的\",{\"1\":{\"1556\":1}}],[\"提交执行\",{\"1\":{\"1511\":1}}],[\"提交执行并收集结果\",{\"1\":{\"1224\":1}}],[\"提交对象\",{\"1\":{\"1350\":1,\"1351\":1}}],[\"提交或改变分支时\",{\"1\":{\"1346\":1}}],[\"提交或回滚全局事务\",{\"1\":{\"1287\":1}}],[\"提交或回滚事务以及获取映射器实例的方法\",{\"1\":{\"508\":1}}],[\"提交工作流\",{\"1\":{\"1345\":1}}],[\"提交引用\",{\"0\":{\"1340\":1}}],[\"提交记录就是开发的历史\",{\"1\":{\"1337\":1}}],[\"提交是\",{\"1\":{\"1335\":1}}],[\"提交暂存区中的文件\",{\"1\":{\"1323\":1}}],[\"提交所有已跟踪文件的修改\",{\"1\":{\"1318\":1}}],[\"提交更新\",{\"1\":{\"1310\":1}}],[\"提交阶段\",{\"1\":{\"1283\":1}}],[\"提交到任务队列\",{\"1\":{\"1113\":1}}],[\"提交等等操作\",{\"1\":{\"1038\":1}}],[\"提交任务返回一个\",{\"1\":{\"1113\":1}}],[\"提交任务包括两个方法\",{\"1\":{\"1113\":1}}],[\"提交任务\",{\"0\":{\"1113\":1},\"1\":{\"817\":1,\"1106\":1,\"1113\":1}}],[\"提交后就可以被删除\",{\"1\":{\"750\":1}}],[\"提交后就不用回滚了\",{\"1\":{\"747\":1}}],[\"提交的直接后继\",{\"1\":{\"1335\":1}}],[\"提交的逻辑\",{\"1\":{\"1060\":1}}],[\"提交的\",{\"1\":{\"733\":1}}],[\"提交\",{\"1\":{\"485\":1,\"492\":1,\"512\":1,\"1033\":1,\"1037\":1,\"1113\":4,\"1553\":1}}],[\"提交事务和回滚事务\",{\"1\":{\"1055\":1}}],[\"提交事务\",{\"1\":{\"461\":1,\"734\":2,\"1038\":1,\"1047\":2,\"1050\":1,\"1055\":1,\"1059\":1}}],[\"提交可分解的任务\",{\"1\":{\"153\":1}}],[\"提升抓取效率的\",{\"1\":{\"1728\":1}}],[\"提升复用性\",{\"1\":{\"1632\":1}}],[\"提升代码质量\",{\"1\":{\"1539\":1}}],[\"提升缓存命中率\",{\"1\":{\"1435\":2}}],[\"提升集群读的性能\",{\"1\":{\"1194\":1}}],[\"提升吞吐量\",{\"1\":{\"1120\":1}}],[\"提升状态至\",{\"1\":{\"1116\":2}}],[\"提升申请连接的速度\",{\"1\":{\"1104\":1}}],[\"提升申请内存速度\",{\"1\":{\"1104\":1}}],[\"提升了安全性\",{\"1\":{\"1422\":1}}],[\"提升了性能\",{\"1\":{\"1014\":1}}],[\"提升了灵活性和效率\",{\"1\":{\"895\":1}}],[\"提升了整数集合的灵活性\",{\"1\":{\"889\":1}}],[\"提升效率\",{\"1\":{\"391\":1,\"627\":1}}],[\"提升系统性能\",{\"1\":{\"157\":1}}],[\"提高方法\",{\"1\":{\"1638\":1}}],[\"提高开发效率\",{\"1\":{\"1617\":1}}],[\"提高重复单字节读写场景的效率\",{\"1\":{\"1502\":1}}],[\"提高磁盘吞吐量\",{\"1\":{\"1479\":1}}],[\"提高进入活跃\",{\"1\":{\"1448\":1}}],[\"提高传输性能\",{\"1\":{\"1422\":1}}],[\"提高到了\",{\"1\":{\"1367\":1}}],[\"提高内存分配速度\",{\"1\":{\"1136\":1}}],[\"提高线程的可管理性\",{\"1\":{\"1104\":1,\"1511\":1}}],[\"提高响应速度\",{\"1\":{\"1104\":1,\"1120\":1,\"1511\":1}}],[\"提高效率并确保代码的质量\",{\"1\":{\"1790\":1}}],[\"提高效率\",{\"1\":{\"886\":1}}],[\"提高网络的效率\",{\"1\":{\"858\":1}}],[\"提高查询效率\",{\"1\":{\"708\":1}}],[\"提高数据访问效率\",{\"1\":{\"1540\":1}}],[\"提高数据进入活跃区的门槛\",{\"1\":{\"1259\":1}}],[\"提高数据检索效率\",{\"1\":{\"697\":1}}],[\"提高数据处理的效率\",{\"1\":{\"627\":1}}],[\"提高并发量和性能\",{\"1\":{\"1617\":1}}],[\"提高并发性能\",{\"1\":{\"1081\":1}}],[\"提高并发访问性能\",{\"1\":{\"678\":1}}],[\"提高并发\",{\"1\":{\"526\":1}}],[\"提高实际生产中的安全性\",{\"1\":{\"518\":1}}],[\"提高吞吐量\",{\"0\":{\"459\":1},\"1\":{\"1448\":1}}],[\"提高可扩展性\",{\"1\":{\"349\":1}}],[\"提高可伸缩性\",{\"1\":{\"282\":1}}],[\"提高系统吞吐量\",{\"1\":{\"431\":1}}],[\"提高系统的可维护性和可扩展性\",{\"1\":{\"375\":1}}],[\"提高系统的容错性\",{\"1\":{\"34\":1}}],[\"提高系统性能\",{\"1\":{\"332\":1,\"1625\":1}}],[\"提高性能\",{\"1\":{\"320\":1}}],[\"提高了并发读写的能力\",{\"1\":{\"1590\":1}}],[\"提高了网络\",{\"1\":{\"1571\":1}}],[\"提高了检索速度\",{\"1\":{\"1476\":1}}],[\"提高了效率并减少了竞态条件的可能性\",{\"1\":{\"1112\":1}}],[\"提高了内存利用率\",{\"1\":{\"825\":1}}],[\"提高了系统的灵活性和可扩展性\",{\"1\":{\"374\":1}}],[\"提高了系统的可伸缩性和弹性\",{\"1\":{\"282\":1}}],[\"提高了开发效率\",{\"1\":{\"349\":1}}],[\"提高了程序的安全性\",{\"1\":{\"64\":1}}],[\"提高资源利用率\",{\"1\":{\"282\":1}}],[\"提高运行效率\",{\"1\":{\"271\":1}}],[\"提高启动速度\",{\"1\":{\"271\":1}}],[\"提高热点代码执行效率\",{\"1\":{\"266\":1}}],[\"提高程序的性能\",{\"1\":{\"1515\":1}}],[\"提高程序的\",{\"1\":{\"791\":1}}],[\"提高程序的执行速度\",{\"1\":{\"242\":1}}],[\"提高程序的健壮性\",{\"1\":{\"58\":1}}],[\"提供标准的\",{\"1\":{\"1632\":2}}],[\"提供远程方法的一端\",{\"1\":{\"1623\":1}}],[\"提供额外的功能操作\",{\"1\":{\"1532\":1}}],[\"提供文件系统和驱动程序之间的抽象接口\",{\"1\":{\"1483\":1}}],[\"提供可查询操作接口进行核对\",{\"1\":{\"1285\":1}}],[\"提供给应用程序使用\",{\"1\":{\"1222\":1}}],[\"提供更多更强大的功能\",{\"1\":{\"1104\":1}}],[\"提供更加灵活的处理访问\",{\"1\":{\"779\":1}}],[\"提供异步能力\",{\"1\":{\"848\":1}}],[\"提供遍历\",{\"1\":{\"817\":1}}],[\"提供支持\",{\"1\":{\"795\":1}}],[\"提供真实存取数据的功能\",{\"1\":{\"672\":1}}],[\"提供依据\",{\"1\":{\"657\":1}}],[\"提供帧处理\",{\"1\":{\"405\":1}}],[\"提供多种消息模型\",{\"1\":{\"404\":1,\"1625\":1}}],[\"提供http访问日志功能\",{\"1\":{\"355\":1}}],[\"提供定位\",{\"1\":{\"314\":1}}],[\"提供一种机制\",{\"1\":{\"1443\":1}}],[\"提供一种机制来通知程序\",{\"1\":{\"184\":1}}],[\"提供一种将多个命令请求打包\",{\"1\":{\"958\":1}}],[\"提供一对多的消息发布\",{\"1\":{\"407\":1}}],[\"提供一个返回单例对象的方法\",{\"1\":{\"290\":1}}],[\"提供一个图形化界面用于检查和调试java虚拟机\",{\"1\":{\"235\":1}}],[\"提供行列转置\",{\"1\":{\"71\":1}}],[\"提供\",{\"1\":{\"71\":2,\"137\":1,\"427\":1,\"1298\":1,\"1303\":1,\"1482\":1,\"1792\":1}}],[\"提供集合论运算\",{\"1\":{\"71\":1}}],[\"提供很多静态工厂方法\",{\"1\":{\"71\":1}}],[\"提供了便捷高效的测试手段\",{\"1\":{\"1716\":1}}],[\"提供了更好的性能和响应时间\",{\"1\":{\"1524\":1}}],[\"提供了更多方便易用的无锁并发工具类\",{\"1\":{\"150\":1}}],[\"提供了页缓存\",{\"1\":{\"1484\":1}}],[\"提供了汇总功能\",{\"1\":{\"1221\":1}}],[\"提供了分散功能\",{\"1\":{\"1221\":1}}],[\"提供了两套命令系统\",{\"1\":{\"1218\":1}}],[\"提供了两种\",{\"1\":{\"1791\":1}}],[\"提供了两种数据持久化机制\",{\"1\":{\"1170\":1}}],[\"提供了两种实例化方式\",{\"1\":{\"1009\":1}}],[\"提供了可以动态修改的可能性\",{\"1\":{\"1120\":1}}],[\"提供了未捕获异常的处理器接口\",{\"1\":{\"1096\":1}}],[\"提供了非池化的\",{\"1\":{\"834\":1}}],[\"提供了丰富的\",{\"1\":{\"824\":1}}],[\"提供了许多文件\",{\"1\":{\"779\":1}}],[\"提供了许多的插件来进行扩展\",{\"1\":{\"412\":1}}],[\"提供了访问数据库元数据的各种表和视图\",{\"1\":{\"673\":1}}],[\"提供了管理查看\",{\"1\":{\"447\":1}}],[\"提供了简单又实用的管理特性\",{\"1\":{\"434\":1}}],[\"提供了多种构造器的重载\",{\"1\":{\"1088\":1}}],[\"提供了多种连接模式\",{\"1\":{\"434\":1}}],[\"提供了多种技术可以在性能和可靠性之间进行权衡\",{\"1\":{\"412\":1}}],[\"提供了多种故障排查工具\",{\"1\":{\"228\":1}}],[\"提供了新的桥接包以支持\",{\"1\":{\"383\":1}}],[\"提供了一些用于生产环境运行时的特性\",{\"1\":{\"1609\":1}}],[\"提供了一些辅助调试的命令\",{\"1\":{\"1347\":1}}],[\"提供了一个完整的流式处理类库\",{\"1\":{\"1626\":1}}],[\"提供了一个工具类\",{\"1\":{\"1134\":1}}],[\"提供了一个高层次的接口\",{\"1\":{\"373\":1}}],[\"提供了一系列分布式的java常用对象和许多分布式服务\",{\"1\":{\"1264\":1}}],[\"提供了一系列映射器的注解\",{\"1\":{\"510\":1}}],[\"提供了一系列用于字符串处理的工具\",{\"1\":{\"79\":1}}],[\"提供了一种简单而强大的方式来部署和托管前端应用程序\",{\"1\":{\"1792\":1}}],[\"提供了一种处理大规模数据集\",{\"1\":{\"1214\":1}}],[\"提供了一种连接机制\",{\"1\":{\"433\":1}}],[\"提供了一种基于许可\",{\"1\":{\"362\":1}}],[\"提供了对链表的入队\",{\"1\":{\"184\":1}}],[\"提供了对对象生命周期的不同管理方式\",{\"1\":{\"183\":1}}],[\"提供了自己的\",{\"1\":{\"83\":1}}],[\"提供了若干工具以支持基本类型和集合\",{\"1\":{\"80\":1}}],[\"提供了6种标准的字符集常量引用\",{\"1\":{\"79\":1}}],[\"提供了三种基础的失效策略\",{\"1\":{\"74\":1}}],[\"提供了\",{\"1\":{\"64\":1,\"68\":1,\"69\":1,\"81\":1,\"149\":1,\"515\":1,\"1039\":1,\"1104\":1}}],[\"提供了通用的框架\",{\"1\":{\"2\":1}}],[\"提供默认\",{\"1\":{\"58\":1}}],[\"提供默认值\",{\"1\":{\"58\":1}}],[\"提供相同的功能\",{\"1\":{\"58\":1}}],[\"提供的注解\",{\"1\":{\"1595\":1}}],[\"提供的线程安全的\",{\"1\":{\"1499\":1}}],[\"提供的用于处理字节数据的缓冲区类\",{\"1\":{\"824\":1}}],[\"提供的路由算法\",{\"1\":{\"404\":1,\"1625\":1}}],[\"提供的桥接包都会间接依赖\",{\"1\":{\"382\":1}}],[\"提供的readwritelock读写锁接口的默认实现\",{\"1\":{\"157\":1}}],[\"提供的可见性保证基于内存栅栏\",{\"1\":{\"145\":1}}],[\"提供的一项免费静态网站托管服务\",{\"1\":{\"1790\":1}}],[\"提供的一种自动化工作流服务\",{\"1\":{\"1790\":1}}],[\"提供的一种模板方法\",{\"1\":{\"5\":1}}],[\"提供的一个事件总线库\",{\"1\":{\"84\":1}}],[\"提供的不可变集合更加简单高效\",{\"1\":{\"64\":1}}],[\"提供的加密方法\",{\"1\":{\"14\":1}}],[\"提供的\",{\"1\":{\"14\":1,\"72\":1,\"77\":1,\"137\":1,\"148\":2,\"508\":1}}],[\"段页结合\",{\"1\":{\"1443\":1}}],[\"段页式内存管理\",{\"1\":{\"1443\":1}}],[\"段内偏移量\",{\"1\":{\"1443\":2}}],[\"段界限\",{\"1\":{\"1443\":1}}],[\"段基地址\",{\"1\":{\"1443\":2}}],[\"段表\",{\"1\":{\"1443\":1}}],[\"段表的索引\",{\"1\":{\"1443\":1}}],[\"段选择因子\",{\"1\":{\"1443\":1}}],[\"段的数量由innodb\",{\"1\":{\"751\":1}}],[\"段头地址存放在系统表空间第5号页面中\",{\"1\":{\"751\":1}}],[\"段头部信息\",{\"1\":{\"751\":1}}],[\"段以区为单位申请空间\",{\"1\":{\"694\":1}}],[\"段相关文件\",{\"1\":{\"37\":1}}],[\"段元数据相关信息\",{\"1\":{\"37\":1}}],[\"段名\",{\"1\":{\"37\":1}}],[\"段号\",{\"1\":{\"37\":1,\"1443\":1}}],[\"段太多会导致查询性能变慢\",{\"1\":{\"34\":1}}],[\"段合并\",{\"1\":{\"34\":1}}],[\"段是检索的基本单元\",{\"1\":{\"34\":1}}],[\"段\",{\"0\":{\"694\":1},\"1\":{\"34\":1,\"1444\":1}}],[\"召回得到的文档数为召回量\",{\"1\":{\"34\":1}}],[\"召回量\",{\"1\":{\"34\":1}}],[\"召回\",{\"1\":{\"34\":1}}],[\"如emby\",{\"1\":{\"1809\":1}}],[\"如eureka\",{\"1\":{\"1278\":1}}],[\"如添加燃料\",{\"1\":{\"1743\":1}}],[\"如小时耗油量\",{\"1\":{\"1730\":1}}],[\"如mu7889\",{\"1\":{\"1730\":1}}],[\"如mlog\",{\"1\":{\"739\":2}}],[\"如排序\",{\"1\":{\"1669\":1}}],[\"如身份证这样的长字符串不适合做主键\",{\"1\":{\"1548\":1}}],[\"如身份证号\",{\"1\":{\"615\":1}}],[\"如系统崩溃\",{\"1\":{\"1533\":1}}],[\"如notify\",{\"1\":{\"1509\":1}}],[\"如native2ascii\",{\"1\":{\"228\":1}}],[\"如今每个\",{\"1\":{\"1486\":1}}],[\"如桌面环境\",{\"1\":{\"1483\":1}}],[\"如硬盘\",{\"1\":{\"1480\":1}}],[\"如文件大小\",{\"1\":{\"1479\":1}}],[\"如磁盘\",{\"1\":{\"1479\":1}}],[\"如等待输入\",{\"1\":{\"1450\":1}}],[\"如内存地址空间\",{\"1\":{\"1436\":1}}],[\"如城市拼音\",{\"1\":{\"1361\":1}}],[\"如集中式\",{\"1\":{\"1333\":1}}],[\"如add\",{\"1\":{\"1498\":1}}],[\"如a\",{\"1\":{\"1330\":1}}],[\"如analyze\",{\"1\":{\"734\":1}}],[\"如已跟踪\",{\"1\":{\"1326\":1}}],[\"如web应用\",{\"1\":{\"1297\":1}}],[\"如缓存\",{\"1\":{\"1297\":2}}],[\"如zookeeper\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"如用户鉴权\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"如图1给2\",{\"1\":{\"1220\":1}}],[\"如阿里云oss\",{\"1\":{\"1213\":1}}],[\"如关系数据库中的表格数据\",{\"1\":{\"1212\":1}}],[\"如直接访问系统内存资源\",{\"1\":{\"1134\":1}}],[\"如哈希码\",{\"1\":{\"1074\":1}}],[\"如有需要用\",{\"1\":{\"1061\":1}}],[\"如设置过期时间\",{\"1\":{\"928\":1}}],[\"如打印日志\",{\"1\":{\"928\":1}}],[\"如del\",{\"1\":{\"901\":1}}],[\"如下\",{\"1\":{\"819\":1}}],[\"如粘包\",{\"1\":{\"809\":1}}],[\"如servlet\",{\"1\":{\"1632\":1}}],[\"如set\",{\"1\":{\"960\":1}}],[\"如select\",{\"1\":{\"919\":1}}],[\"如start\",{\"1\":{\"734\":1}}],[\"如sql接口\",{\"1\":{\"570\":1}}],[\"如前后页指针构成双链表\",{\"1\":{\"691\":1}}],[\"如需开启修改配置文件\",{\"1\":{\"644\":1,\"645\":1}}],[\"如02000\",{\"1\":{\"634\":1}}],[\"如以下两条语句\",{\"1\":{\"620\":1}}],[\"如创建key\",{\"1\":{\"619\":1}}],[\"如load\",{\"1\":{\"734\":1}}],[\"如lock\",{\"1\":{\"564\":1,\"734\":1}}],[\"如limit\",{\"1\":{\"618\":1}}],[\"如几百万条记录\",{\"1\":{\"614\":1}}],[\"如数字\",{\"1\":{\"608\":1}}],[\"如数据库代理\",{\"1\":{\"1296\":1}}],[\"如数据库\",{\"1\":{\"572\":1}}],[\"如数组\",{\"1\":{\"359\":1}}],[\"如何让数据刷新实现效率最大化\",{\"1\":{\"1737\":1}}],[\"如何响应\",{\"1\":{\"1379\":1}}],[\"如何借助远程配置\",{\"1\":{\"1240\":1}}],[\"如何拿到\",{\"1\":{\"791\":1}}],[\"如何保证数据并发访问的一致性\",{\"1\":{\"549\":1}}],[\"如何处理数据\",{\"1\":{\"210\":1}}],[\"如仅一台\",{\"1\":{\"450\":1}}],[\"如持久性机制\",{\"1\":{\"412\":1}}],[\"如此这样反复的添加和删除依赖的系统\",{\"1\":{\"399\":1}}],[\"如控制台\",{\"1\":{\"355\":1}}],[\"如日期格式化异常\",{\"1\":{\"345\":1}}],[\"如空指针\",{\"1\":{\"345\":1}}],[\"如tomcat\",{\"1\":{\"340\":1}}],[\"如haproxy\",{\"1\":{\"1299\":1}}],[\"如hadoop\",{\"1\":{\"1211\":1}}],[\"如hashcode\",{\"1\":{\"215\":1}}],[\"如hset\",{\"1\":{\"901\":1}}],[\"如http\",{\"1\":{\"340\":1}}],[\"如foreach\",{\"1\":{\"312\":1}}],[\"如filter\",{\"1\":{\"312\":1}}],[\"如线程库或用户态调度器\",{\"1\":{\"279\":1}}],[\"如线程转储\",{\"1\":{\"236\":2}}],[\"如包\",{\"1\":{\"258\":1}}],[\"如方法内联\",{\"1\":{\"242\":1}}],[\"如方法调用\",{\"1\":{\"238\":1}}],[\"如源文件名\",{\"1\":{\"240\":1}}],[\"如对象分配状况\",{\"1\":{\"238\":1}}],[\"如性能分析\",{\"1\":{\"238\":1}}],[\"如垃圾回收情况\",{\"1\":{\"230\":2}}],[\"如rmic\",{\"1\":{\"228\":1}}],[\"如keytool\",{\"1\":{\"228\":1}}],[\"如json\",{\"1\":{\"1640\":1}}],[\"如jdbc\",{\"1\":{\"1632\":1}}],[\"如junit\",{\"1\":{\"1632\":1}}],[\"如jaxp\",{\"1\":{\"357\":1}}],[\"如java\",{\"1\":{\"254\":1}}],[\"如java虚拟机\",{\"1\":{\"242\":1}}],[\"如javapackager\",{\"1\":{\"228\":1}}],[\"如jar\",{\"1\":{\"228\":1}}],[\"如jps\",{\"1\":{\"228\":1}}],[\"如cdn\",{\"1\":{\"1296\":1}}],[\"如const表示常量\",{\"1\":{\"728\":1}}],[\"如collection\",{\"1\":{\"312\":1}}],[\"如cpu性能分析器\",{\"1\":{\"237\":1}}],[\"如cpu使用率\",{\"1\":{\"236\":1}}],[\"如c\",{\"1\":{\"209\":1}}],[\"如调试\",{\"1\":{\"208\":1}}],[\"如老年代\",{\"1\":{\"171\":1}}],[\"如定义为\",{\"1\":{\"122\":2}}],[\"如定义为array<int>数据为\",{\"1\":{\"122\":1}}],[\"如将文件夹\",{\"1\":{\"118\":1}}],[\"如将记录的\",{\"1\":{\"118\":1}}],[\"如不使用use\",{\"1\":{\"110\":1}}],[\"如不填写\",{\"1\":{\"107\":1}}],[\"如存在同名数据库不执行任何操作\",{\"1\":{\"107\":1}}],[\"如上下客\",{\"1\":{\"1743\":1}}],[\"如上select\",{\"1\":{\"105\":1}}],[\"如上asc\",{\"1\":{\"105\":1}}],[\"如上\",{\"1\":{\"105\":2}}],[\"如上语法\",{\"1\":{\"105\":1}}],[\"如\",{\"1\":{\"91\":1,\"118\":1,\"148\":1,\"162\":1,\"255\":1,\"412\":1,\"465\":2,\"570\":2,\"622\":2,\"703\":3,\"809\":1,\"1045\":1,\"1224\":1,\"1244\":1,\"1259\":1,\"1263\":1,\"1309\":1,\"1345\":1,\"1350\":1,\"1398\":4,\"1406\":1,\"1427\":3,\"1461\":2,\"1483\":1,\"1488\":1,\"1540\":1,\"1567\":1,\"1695\":1}}],[\"如权重\",{\"1\":{\"75\":1}}],[\"如家\",{\"1\":{\"51\":2}}],[\"如ik\",{\"1\":{\"34\":1}}],[\"如果做不到这一点\",{\"1\":{\"1767\":1}}],[\"如果pnr状态不对的话\",{\"1\":{\"1738\":1}}],[\"如果partition机制设置合理\",{\"1\":{\"451\":1}}],[\"如果取消注释\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"如果方法返回值为空\",{\"1\":{\"1713\":1}}],[\"如果参数匹配既申明了精确匹配\",{\"1\":{\"1712\":1}}],[\"如果更新时\",{\"1\":{\"1657\":2}}],[\"如果更新记录时\",{\"1\":{\"748\":1}}],[\"如果多个线程同时通过了第一次检查\",{\"1\":{\"1645\":1}}],[\"如果多线程共享该\",{\"1\":{\"1420\":1}}],[\"如果这样子的次数太多\",{\"1\":{\"1636\":1}}],[\"如果这些大量的数据在很长一段时间都不会被访问的话\",{\"1\":{\"1448\":1}}],[\"如果这些数据page没有在buffer\",{\"1\":{\"638\":1}}],[\"如果实现了接口使用基于实现的jdk\",{\"1\":{\"1601\":1}}],[\"如果实际对象将被\",{\"1\":{\"187\":1}}],[\"如果语法不正确\",{\"1\":{\"1566\":1}}],[\"如果含有变量则不会进入常量池\",{\"1\":{\"1536\":1}}],[\"如果都是静态字符串相加\",{\"1\":{\"1536\":1}}],[\"如果重写了\",{\"1\":{\"1535\":1}}],[\"如果重新分片涉及多个槽\",{\"1\":{\"946\":1}}],[\"如果索引位置上已经有元素了\",{\"1\":{\"1535\":1}}],[\"如果索引列不能存储null值\",{\"1\":{\"708\":1}}],[\"如果目标对象实现了接口\",{\"1\":{\"1532\":1}}],[\"如果目标节点没有在规定时间内回复pong\",{\"1\":{\"948\":1}}],[\"如果父类不能加载该类\",{\"1\":{\"1528\":1}}],[\"如果父类加载器为\",{\"1\":{\"1528\":1}}],[\"如果失败\",{\"1\":{\"1518\":1}}],[\"如果失败设置\",{\"1\":{\"6\":1}}],[\"如果cas操作失败\",{\"1\":{\"1515\":1}}],[\"如果count函数的参数对应的字段不是null\",{\"1\":{\"619\":1}}],[\"如果槽的\",{\"1\":{\"1514\":1}}],[\"如果槽非空\",{\"1\":{\"1514\":1}}],[\"如果槽正好由当前节点负责\",{\"1\":{\"947\":1}}],[\"如果f\",{\"1\":{\"1497\":1}}],[\"如果from后跟有多个表\",{\"1\":{\"728\":1}}],[\"如果头节点就是要找的直接返回\",{\"1\":{\"1497\":1}}],[\"如果要自己建私人库\",{\"1\":{\"1809\":1}}],[\"如果要使用二级缓存解决循环依赖\",{\"1\":{\"1599\":1}}],[\"如果要放的位置为\",{\"1\":{\"1497\":1}}],[\"如果要对索引末尾加间隙锁\",{\"1\":{\"556\":1}}],[\"如果对应位置的\",{\"1\":{\"1497\":1}}],[\"如果对端连续几次没有响应\",{\"1\":{\"1419\":1}}],[\"如果对端正常响应\",{\"1\":{\"1419\":1}}],[\"如果链表长度大于8\",{\"1\":{\"1494\":1}}],[\"如果链表为空\",{\"1\":{\"954\":1}}],[\"如果增加或者移除一个节点\",{\"1\":{\"1489\":1}}],[\"如果网卡支持\",{\"1\":{\"1486\":1}}],[\"如果信号量初始值为0\",{\"1\":{\"1460\":1}}],[\"如果信号量初始值为1\",{\"1\":{\"1460\":1}}],[\"如果直接回收仍然无法满足程序的申请\",{\"1\":{\"1446\":1}}],[\"如果后台异步回收跟不上进程内存申请的速度\",{\"1\":{\"1446\":1}}],[\"如果后续有其它线程试图对同一个对象进行上锁\",{\"1\":{\"1074\":1}}],[\"如果交换一个很大的空间\",{\"1\":{\"1443\":1}}],[\"如果其它核心从内存读取了该\",{\"1\":{\"1435\":1}}],[\"如果服务器\",{\"1\":{\"1422\":1}}],[\"如果服务器是主服务器\",{\"1\":{\"920\":1}}],[\"如果进程崩溃\",{\"1\":{\"1420\":1}}],[\"如果进行limit分页查询\",{\"1\":{\"618\":1}}],[\"如果两端的\",{\"1\":{\"1419\":1}}],[\"如果两个对象的\",{\"1\":{\"1535\":1}}],[\"如果两个\",{\"1\":{\"698\":1,\"818\":1}}],[\"如果上一次是\",{\"1\":{\"1418\":1}}],[\"如果tcp层不进行分片\",{\"1\":{\"1416\":1}}],[\"如果trx\",{\"1\":{\"754\":1,\"1557\":1}}],[\"如果还能收到\",{\"1\":{\"1413\":1}}],[\"如果还是抢不到\",{\"1\":{\"6\":1}}],[\"如果还是拿不到就真的要把当前线程封装成\",{\"1\":{\"4\":1}}],[\"如果第一次挥手后\",{\"1\":{\"1410\":1}}],[\"如果资源转移了\",{\"1\":{\"1400\":1}}],[\"如果获取的时候不存在对应的bean对象\",{\"1\":{\"1378\":1}}],[\"如果结果非空则\",{\"1\":{\"1369\":1}}],[\"如果过滤完的结果为空\",{\"1\":{\"1362\":1}}],[\"如果中途遇到某个字符不匹配\",{\"1\":{\"1361\":1}}],[\"如果中途失败\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"如果因为意外丢失了一些有用的提交\",{\"1\":{\"1346\":1}}],[\"如果以非0值退出将放弃提交\",{\"1\":{\"1345\":1}}],[\"如果文件没有修改就创建一个指向先前存储的链接\",{\"1\":{\"1309\":1}}],[\"如果收到的是\",{\"1\":{\"1418\":1}}],[\"如果收到超过半数的成功响应\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"如果收到其它节点声明\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"如果选举失败\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"如果传递了加锁时间和单位\",{\"1\":{\"1264\":1}}],[\"如果确实存在数据不一致的场景\",{\"1\":{\"1236\":1}}],[\"如果主库先前已经有数据了\",{\"1\":{\"1154\":1}}],[\"如果主从一致\",{\"1\":{\"935\":1}}],[\"如果查询得到validate\",{\"1\":{\"1148\":1}}],[\"如果查询的是第一页数据\",{\"1\":{\"587\":1}}],[\"如果现有的worker大于corepoolsize\",{\"1\":{\"1120\":1}}],[\"如果开启的话继续\",{\"1\":{\"1598\":1}}],[\"如果开启定时\",{\"1\":{\"1115\":1}}],[\"如果开启了innodb\",{\"1\":{\"639\":1}}],[\"如果成功\",{\"1\":{\"1114\":1,\"1518\":1}}],[\"如果正在停止就移除任务然后执行拒绝\",{\"1\":{\"1113\":1}}],[\"如果正在导入\",{\"1\":{\"947\":1}}],[\"如果无限制创建\",{\"1\":{\"1104\":1}}],[\"如果已经存在\",{\"1\":{\"1219\":1}}],[\"如果已经被中断会清除中断标记\",{\"1\":{\"1092\":1}}],[\"如果已经缓存了某个区的一些连续页面\",{\"1\":{\"732\":1}}],[\"如果自旋期间持锁线程正好退出同步块释放了锁\",{\"1\":{\"1079\":1}}],[\"如果业务存在大量线程竞争\",{\"1\":{\"1077\":1}}],[\"如果调用\",{\"1\":{\"1077\":1}}],[\"如果校验时发现线程不一致\",{\"1\":{\"1077\":1}}],[\"如果用上述的加锁方式\",{\"1\":{\"1186\":1}}],[\"如果用\",{\"1\":{\"1077\":1}}],[\"如果锁记录不为\",{\"1\":{\"1076\":1}}],[\"如果锁记录取值为\",{\"1\":{\"1076\":1}}],[\"如果锁已经被占用则等待\",{\"1\":{\"156\":1}}],[\"如果替换成功\",{\"1\":{\"1076\":1}}],[\"如果解析成功\",{\"1\":{\"1060\":1}}],[\"如果支持\",{\"1\":{\"1049\":2}}],[\"如果内层方法不是只读\",{\"1\":{\"1049\":1}}],[\"如果内层方法的事务隔离级别是isolation\",{\"1\":{\"1049\":1}}],[\"如果内层\",{\"1\":{\"1049\":2}}],[\"如果内容过大\",{\"1\":{\"788\":1}}],[\"如果未处理的二进制位的数量\",{\"1\":{\"976\":2}}],[\"如果未指定该字段的值\",{\"1\":{\"598\":1}}],[\"如果执行git\",{\"1\":{\"1335\":1}}],[\"如果执行过程中遇到异常的话\",{\"1\":{\"1034\":1}}],[\"如果执行过写操作\",{\"1\":{\"966\":1}}],[\"如果执行了一些操作\",{\"1\":{\"896\":1}}],[\"如果数据总数为偶数\",{\"1\":{\"1658\":1}}],[\"如果数据库在执行事务前是一致的\",{\"1\":{\"961\":1}}],[\"如果数据量很大\",{\"1\":{\"619\":1}}],[\"如果发现该客户端的redis\",{\"1\":{\"960\":1}}],[\"如果发现数据不够\",{\"1\":{\"788\":1}}],[\"如果集群里有n个具有投票权的主节点\",{\"1\":{\"948\":1}}],[\"如果集群内超过半数的主节点报告某个节点x疑似下线\",{\"1\":{\"948\":1}}],[\"如果客户端发送了关于某个键的命令\",{\"1\":{\"947\":1}}],[\"如果相同\",{\"1\":{\"942\":1}}],[\"如果相同则继续\",{\"1\":{\"942\":1}}],[\"如果相等\",{\"1\":{\"148\":1}}],[\"如果返回无效回复的时间超过down\",{\"1\":{\"941\":1}}],[\"如果启用aof\",{\"1\":{\"929\":1}}],[\"如果持续一段时间\",{\"1\":{\"923\":1}}],[\"如果处理完一次文件事件\",{\"1\":{\"921\":1}}],[\"如果处于集群模式\",{\"1\":{\"920\":1}}],[\"如果同时产生事件\",{\"1\":{\"919\":1}}],[\"如果压缩列表里恰好有多个连续的\",{\"1\":{\"893\":1}}],[\"如果最高位为11\",{\"1\":{\"892\":1}}],[\"如果最高位为00\",{\"1\":{\"892\":1}}],[\"如果前一节点长度大于等于254\",{\"1\":{\"892\":1}}],[\"如果前一节点长度小于254\",{\"1\":{\"892\":1}}],[\"如果新元素类型比现有的所有元素类型都长\",{\"1\":{\"889\":1}}],[\"如果新记录空间不超过旧空间\",{\"1\":{\"748\":1}}],[\"如果修改后len\",{\"1\":{\"879\":2}}],[\"如果能确保编解码器不会保存状态\",{\"1\":{\"851\":1}}],[\"如果超出容量\",{\"1\":{\"1651\":1}}],[\"如果超出指定长度仍未出现分隔符\",{\"1\":{\"843\":1}}],[\"如果超过半数节点投票给自己\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"如果超过lua\",{\"1\":{\"966\":1}}],[\"如果超时\",{\"1\":{\"424\":1}}],[\"如果太小\",{\"1\":{\"842\":1}}],[\"如果太大\",{\"1\":{\"842\":1}}],[\"如果写死在代码里\",{\"1\":{\"1120\":1}}],[\"如果写入后数据大小超过\",{\"1\":{\"828\":1}}],[\"如果写入后数据大小未超过\",{\"1\":{\"828\":1}}],[\"如果写完了\",{\"1\":{\"789\":1}}],[\"如果出现异常都会抛出\",{\"1\":{\"822\":1}}],[\"如果出现范围查询\",{\"1\":{\"702\":1}}],[\"如果任务失败\",{\"1\":{\"822\":2}}],[\"如果任何一列更新前后大小不一致\",{\"1\":{\"748\":1}}],[\"如果所有的数据写完了\",{\"1\":{\"789\":1}}],[\"如果有\",{\"1\":{\"1518\":2}}],[\"如果有新进程加入优先级高的队列\",{\"1\":{\"1470\":1}}],[\"如果有事件就更新\",{\"1\":{\"1435\":1}}],[\"如果有超过半数接受者就某个提议达成了共识\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"如果有竞争\",{\"1\":{\"1076\":1}}],[\"如果有客户端正在监视刚刚修改过的数据库键\",{\"1\":{\"960\":1}}],[\"如果有很多连接建立\",{\"1\":{\"782\":1}}],[\"如果有则设置子表中该外键值为null\",{\"1\":{\"599\":1}}],[\"如果有则也删除\",{\"1\":{\"599\":1}}],[\"如果有则不允许删除\",{\"1\":{\"599\":2}}],[\"如果连接数过多可能导致\",{\"1\":{\"782\":1}}],[\"如果dict\",{\"1\":{\"749\":1}}],[\"如果时间间隔在某个阈值内\",{\"1\":{\"732\":1}}],[\"如果顺序访问了某个区的一些页面\",{\"1\":{\"732\":1}}],[\"如果该对象没有被其它线程竞争\",{\"1\":{\"1515\":1}}],[\"如果该地址的当前值和期望值相等\",{\"1\":{\"1513\":1}}],[\"如果该值大于checkpoint\",{\"1\":{\"742\":1}}],[\"如果该索引列可以为null\",{\"1\":{\"728\":1}}],[\"如果该线程出现异常而结束\",{\"1\":{\"332\":1}}],[\"如果通过索引查询返回大批量的数据\",{\"1\":{\"703\":1}}],[\"如果跳跃某一列\",{\"1\":{\"702\":1}}],[\"如果存在多个查询条件\",{\"1\":{\"699\":1}}],[\"如果存在主键\",{\"1\":{\"699\":1}}],[\"如果存在此数据库执行删除\",{\"1\":{\"108\":1}}],[\"如果应用程序已经实现了磁盘缓存\",{\"1\":{\"1486\":1}}],[\"如果应用是以读操作和插入操作为主\",{\"1\":{\"682\":1}}],[\"如果应用对事物的完整性有比较高的要求\",{\"1\":{\"682\":1}}],[\"如果应用使用\",{\"1\":{\"525\":1}}],[\"如果表的数据过大\",{\"1\":{\"714\":1}}],[\"如果表没有主键或没有合适的唯一索引\",{\"1\":{\"699\":1}}],[\"如果表是在系统表空间而不是每个表文件或通用表空间中创建的\",{\"1\":{\"639\":1}}],[\"如果表上有意向排他锁\",{\"1\":{\"560\":1}}],[\"如果观察到在特定的条件下hash索引可以提升速度\",{\"1\":{\"638\":1}}],[\"如果缓冲区当中没有数据\",{\"1\":{\"637\":1}}],[\"如果缓存空间足够大\",{\"1\":{\"570\":1}}],[\"如果满足\",{\"1\":{\"633\":1}}],[\"如果条件为true\",{\"1\":{\"633\":1}}],[\"如果判定条件有多个\",{\"1\":{\"632\":1}}],[\"如果视图包含以下任何一项\",{\"1\":{\"624\":1}}],[\"如果使用with\",{\"1\":{\"623\":1}}],[\"如果order\",{\"1\":{\"616\":1}}],[\"如果需要其他列信息需要进行回表查询\",{\"1\":{\"1545\":1}}],[\"如果需要处理大量的长期连接\",{\"1\":{\"860\":1}}],[\"如果需要导入sql文件\",{\"1\":{\"675\":1}}],[\"如果需要更新\",{\"1\":{\"638\":1}}],[\"如果需要在中间插入一个新的数据行\",{\"1\":{\"615\":1}}],[\"如果需要同步发送\",{\"1\":{\"456\":1}}],[\"如果expr的值等于val1\",{\"1\":{\"596\":1}}],[\"如果val1为true\",{\"1\":{\"596\":1}}],[\"如果value1不为空\",{\"1\":{\"596\":1}}],[\"如果value为true\",{\"1\":{\"596\":1}}],[\"如果年龄相同那么就按这个\",{\"1\":{\"586\":1}}],[\"如果符合以下条件\",{\"1\":{\"564\":1}}],[\"如果插入到相同间隙中的多个事务没有插入相同位置\",{\"1\":{\"561\":1}}],[\"如果没用到索引的查询\",{\"1\":{\"558\":1}}],[\"如果没有先执行类加载过程\",{\"1\":{\"1521\":1}}],[\"如果没有\",{\"1\":{\"1518\":2}}],[\"如果没有那么操作完成\",{\"1\":{\"1468\":1}}],[\"如果没有开启\",{\"1\":{\"1419\":1}}],[\"如果没有别的数据请求了\",{\"1\":{\"1394\":1}}],[\"如果没有的话可以自己新建一个\",{\"1\":{\"1154\":1}}],[\"如果没有执行写操作\",{\"1\":{\"966\":1}}],[\"如果没有创建套接字连接\",{\"1\":{\"947\":1}}],[\"如果没有通过\",{\"1\":{\"860\":1}}],[\"如果没有收到完整的一帧将等待\",{\"1\":{\"850\":1}}],[\"如果没有失败\",{\"1\":{\"822\":1}}],[\"如果没有特别指明\",{\"1\":{\"697\":1}}],[\"如果没有索引\",{\"1\":{\"697\":1}}],[\"如果没有指定线程池\",{\"1\":{\"1369\":1}}],[\"如果没有指定线程组\",{\"1\":{\"1088\":1}}],[\"如果没有指定时间\",{\"1\":{\"1264\":1}}],[\"如果没有指定\",{\"1\":{\"674\":1}}],[\"如果没有刷新的消息数大于配置的\",{\"1\":{\"476\":1}}],[\"如果没有过滤器可以传递则执行\",{\"1\":{\"388\":1}}],[\"如果没有必须先执行相应类的加载过程\",{\"1\":{\"214\":1}}],[\"如果没有注册\",{\"1\":{\"187\":1}}],[\"如果没有需要清理的\",{\"1\":{\"154\":1}}],[\"如果另一个线程对这个表结构做变更\",{\"1\":{\"553\":1}}],[\"如果指定session\",{\"1\":{\"737\":1}}],[\"如果指定global\",{\"1\":{\"737\":1}}],[\"如果指定主机为localhost或者使用\",{\"1\":{\"672\":1}}],[\"如果指定列\",{\"1\":{\"584\":1}}],[\"如果指定的是\",{\"1\":{\"541\":1}}],[\"如果指定了\",{\"1\":{\"541\":1}}],[\"如果整合\",{\"1\":{\"506\":1}}],[\"如果想重复读取数据\",{\"1\":{\"772\":1}}],[\"如果想完成\",{\"1\":{\"499\":1}}],[\"如果想要\",{\"1\":{\"68\":1}}],[\"如果只用\",{\"1\":{\"1423\":1}}],[\"如果只有两次握手\",{\"1\":{\"1409\":1}}],[\"如果只有一个等待的线程\",{\"1\":{\"6\":1}}],[\"如果只在自己机器上实验可以先修改一下密码校验策略\",{\"1\":{\"1148\":1}}],[\"如果只是针对\",{\"1\":{\"495\":1}}],[\"如果组内消费者超过主题分区数量\",{\"1\":{\"481\":1}}],[\"如果达到segment大小的阈值\",{\"1\":{\"476\":1}}],[\"如果每次都关联\",{\"1\":{\"1075\":1}}],[\"如果每一次都操作磁盘\",{\"1\":{\"638\":1}}],[\"如果每条消息的偏移量都是递增的\",{\"1\":{\"476\":1}}],[\"如果每个线程都\",{\"1\":{\"154\":1,\"1514\":1}}],[\"如果一致\",{\"1\":{\"1400\":1}}],[\"如果一直失败就会被封装成\",{\"1\":{\"1074\":1}}],[\"如果一棵b树的最大度数为n\",{\"1\":{\"698\":1}}],[\"如果一条语句操作了非主键索引\",{\"1\":{\"554\":1}}],[\"如果一条\",{\"1\":{\"554\":1}}],[\"如果一次网络传输只发送一条消息\",{\"1\":{\"450\":1}}],[\"如果一个分支的任务完成\",{\"1\":{\"1335\":1}}],[\"如果一个线程试图进入同步块\",{\"1\":{\"1515\":1}}],[\"如果一个线程在循环中多次访问同一个对象并获取该对象的锁\",{\"1\":{\"1081\":1}}],[\"如果一个线程在获取一个锁后执行了一个不可能产生并发异常的代码段\",{\"1\":{\"1080\":1}}],[\"如果一个线程尝试获取一个被其他线程持有的锁时\",{\"1\":{\"1079\":1}}],[\"如果一个共享资源竞争很少\",{\"1\":{\"1077\":1}}],[\"如果一个sha1值对应脚本没有载入所有从服务器\",{\"1\":{\"967\":1}}],[\"如果一个配置纪元里没有从节点能得到足够多的支持票\",{\"1\":{\"948\":1}}],[\"如果一个主节点具有投票权\",{\"1\":{\"948\":1}}],[\"如果一个未被标记\",{\"1\":{\"851\":1}}],[\"如果一个帧的数据包没到齐\",{\"1\":{\"850\":1}}],[\"如果一个topic对应一个文件\",{\"1\":{\"451\":1}}],[\"如果一个程序的多个模块使用了不同的日志工具\",{\"1\":{\"379\":1}}],[\"如果一个对象到\",{\"1\":{\"1522\":1}}],[\"如果一个对象只被弱引用指向\",{\"1\":{\"193\":1}}],[\"如果一个对象具有强引用\",{\"1\":{\"191\":1}}],[\"如果一个对象是不可变的\",{\"1\":{\"146\":1}}],[\"如果一个字段被声明成\",{\"1\":{\"145\":1}}],[\"如果给定时限内没有一个sentinel被选举为领头sentinel\",{\"1\":{\"942\":1}}],[\"如果给消息设置\",{\"1\":{\"424\":1}}],[\"如果给队列设置\",{\"1\":{\"424\":1}}],[\"如果消息一直没有被\",{\"1\":{\"422\":1}}],[\"如果消息和队列是可持久化的\",{\"1\":{\"420\":1}}],[\"如果是带条件的批量检索数据就得一次次\",{\"1\":{\"1546\":1}}],[\"如果是公平锁\",{\"1\":{\"1518\":1}}],[\"如果是就帮助扩容\",{\"1\":{\"1497\":1}}],[\"如果是链表\",{\"1\":{\"1497\":1}}],[\"如果是读锁的话\",{\"1\":{\"1184\":1}}],[\"如果是自己调用的\",{\"1\":{\"1092\":1}}],[\"如果是自己已经持有\",{\"1\":{\"1076\":1}}],[\"如果是独立的新事务\",{\"1\":{\"1050\":1,\"1051\":1}}],[\"如果是nested嵌套事务\",{\"1\":{\"1050\":1,\"1051\":1}}],[\"如果是发送ask\",{\"1\":{\"947\":1}}],[\"如果是redis\",{\"1\":{\"913\":2}}],[\"如果是从服务器模式\",{\"1\":{\"908\":1}}],[\"如果是主服务器模式\",{\"1\":{\"908\":1}}],[\"如果是整数值\",{\"1\":{\"892\":1}}],[\"如果是字节数组\",{\"1\":{\"892\":1}}],[\"如果是字符串类型的字段\",{\"1\":{\"708\":1}}],[\"如果是收缩\",{\"1\":{\"883\":1}}],[\"如果是扩展\",{\"1\":{\"883\":1}}],[\"如果是多字段排序\",{\"1\":{\"586\":1}}],[\"如果是select语句\",{\"1\":{\"570\":1}}],[\"如果是下游的数据处理不及时\",{\"1\":{\"500\":1}}],[\"如果是\",{\"1\":{\"420\":1,\"507\":1,\"538\":1,\"550\":1,\"960\":1,\"975\":1,\"1185\":1,\"1366\":1,\"1517\":1}}],[\"如果路由不到\",{\"1\":{\"414\":1,\"1628\":1}}],[\"如果我们通过消息队列异步处理后\",{\"1\":{\"398\":1}}],[\"如果找到了多个日志实现\",{\"1\":{\"383\":1}}],[\"如果为了保证\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"如果为\",{\"1\":{\"366\":3}}],[\"如果为false\",{\"1\":{\"34\":1}}],[\"如果被请求的共享资源被占用\",{\"1\":{\"1516\":1}}],[\"如果被请求的共享资源空闲\",{\"1\":{\"1516\":1}}],[\"如果被动关闭方接收到\",{\"1\":{\"1410\":1}}],[\"如果被中断会抛出异常\",{\"1\":{\"365\":1}}],[\"如果被判定为有必要执行\",{\"1\":{\"196\":1}}],[\"如果某列包含在某个索引中\",{\"1\":{\"747\":1}}],[\"如果某一列数据过大\",{\"1\":{\"686\":1}}],[\"如果某个sentinel被超过半数的sentinel设置成局部领头\",{\"1\":{\"942\":1}}],[\"如果某个undo\",{\"1\":{\"751\":1}}],[\"如果某个follower长时间未向leader发送通信请求或同步数据\",{\"1\":{\"460\":1}}],[\"如果某个线程因为执行异常而结束\",{\"1\":{\"332\":1}}],[\"如果某些方法经常出现在栈顶\",{\"1\":{\"268\":1}}],[\"如果核心线程都在忙\",{\"1\":{\"332\":1}}],[\"如果希望\",{\"1\":{\"304\":1}}],[\"如果希望修改分区名后\",{\"1\":{\"118\":1}}],[\"如果注解器对语法树进行过修改\",{\"1\":{\"260\":1}}],[\"如果注册的\",{\"1\":{\"188\":1}}],[\"如果在三方合并的过程中\",{\"1\":{\"1336\":1}}],[\"如果在切换的这短暂时间里\",{\"1\":{\"1240\":1}}],[\"如果在指定毫秒内无法连接\",{\"1\":{\"855\":1}}],[\"如果在从库上备份\",{\"1\":{\"550\":1}}],[\"如果在主库上备份\",{\"1\":{\"550\":1}}],[\"如果在\",{\"1\":{\"196\":1}}],[\"如果预留的内存不够存放浮动垃圾\",{\"1\":{\"176\":1}}],[\"如果计数器为零\",{\"1\":{\"159\":1}}],[\"如果哈希对应的槽为空\",{\"1\":{\"154\":1,\"1514\":1}}],[\"如果不可能为空计数器直接+1\",{\"1\":{\"1568\":1}}],[\"如果不可避免出现filesort\",{\"1\":{\"616\":1}}],[\"如果不使用两阶段提交\",{\"1\":{\"1556\":1}}],[\"如果不需要保证\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"如果不一致\",{\"1\":{\"1236\":1}}],[\"如果不是\",{\"1\":{\"1185\":1,\"1517\":1}}],[\"如果不是读锁的话\",{\"1\":{\"1184\":1}}],[\"如果不支持\",{\"1\":{\"1049\":2}}],[\"如果不希望永远阻塞\",{\"1\":{\"855\":1}}],[\"如果不调用\",{\"1\":{\"829\":1}}],[\"如果不存在主键\",{\"1\":{\"699\":1}}],[\"如果不存在数据依赖性\",{\"1\":{\"143\":1}}],[\"如果不满足\",{\"1\":{\"633\":1}}],[\"如果不处理\",{\"1\":{\"391\":1}}],[\"如果不为\",{\"1\":{\"366\":1}}],[\"如果不指定\",{\"1\":{\"184\":1,\"737\":1}}],[\"如果不匹配则线性探测\",{\"1\":{\"154\":1}}],[\"如果不等\",{\"1\":{\"148\":1}}],[\"如果线程池太大\",{\"1\":{\"1511\":1}}],[\"如果线程池太小\",{\"1\":{\"1511\":1}}],[\"如果线程因为非法访问内存引起崩溃\",{\"1\":{\"1465\":1}}],[\"如果线程还没有启动则无法保证能正确放行\",{\"1\":{\"364\":1}}],[\"如果线程任务执行完毕且空闲了一段时间则会被回收掉\",{\"1\":{\"332\":1}}],[\"如果线程\",{\"1\":{\"143\":2}}],[\"如果\",{\"1\":{\"62\":1,\"73\":1,\"143\":1,\"154\":2,\"383\":1,\"450\":1,\"471\":2,\"701\":1,\"703\":1,\"829\":1,\"839\":3,\"856\":1,\"1155\":1,\"1174\":1,\"1218\":1,\"1281\":1,\"1494\":1,\"1514\":2,\"1533\":2,\"1599\":2,\"1620\":1,\"1651\":3}}],[\"如果当前老年代最大可用连续空间小于平均历次晋升到老年代大小\",{\"1\":{\"1524\":1}}],[\"如果当前没有事务\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"如果当前存在事务则抛出异常\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"如果当前存在事务则把当前事务挂起\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"如果当前存在事务则挂起\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"如果当前存在事务就加入\",{\"1\":{\"1276\":2,\"1611\":2}}],[\"如果当前存在事务\",{\"1\":{\"1276\":2,\"1611\":2}}],[\"如果当前节点是临时节点\",{\"1\":{\"1174\":1}}],[\"如果当前线程已经存在事务了\",{\"1\":{\"1049\":1}}],[\"如果当前线程不存在事务\",{\"1\":{\"1049\":1}}],[\"如果当前线程没有持有锁\",{\"1\":{\"9\":1}}],[\"如果当前是头节点的直接后继\",{\"1\":{\"6\":1}}],[\"类比电商系统\",{\"1\":{\"1728\":1}}],[\"类数据前后填充\",{\"1\":{\"1435\":1}}],[\"类使\",{\"1\":{\"1134\":1}}],[\"类层级结构\",{\"0\":{\"1111\":1}}],[\"类还是比较简单的\",{\"1\":{\"1086\":1}}],[\"类组合了\",{\"1\":{\"1059\":1}}],[\"类匹配\",{\"1\":{\"1018\":1}}],[\"类里面的\",{\"1\":{\"1015\":1}}],[\"类图\",{\"0\":{\"1006\":1}}],[\"类也有该方法\",{\"1\":{\"770\":1}}],[\"类也提供了一些类似的功能\",{\"1\":{\"59\":1}}],[\"类中查找相同名字的属性\",{\"1\":{\"529\":1}}],[\"类名\",{\"1\":{\"528\":2}}],[\"类用于动态获取被代理类\",{\"1\":{\"1532\":1}}],[\"类用于生成动态\",{\"1\":{\"515\":1}}],[\"类用于实现多样的\",{\"1\":{\"149\":1}}],[\"类目\",{\"1\":{\"308\":1}}],[\"类在进行初始化时会被加载\",{\"1\":{\"247\":1}}],[\"类在首次被使用时\",{\"1\":{\"247\":1}}],[\"类初始化时加载\",{\"1\":{\"247\":1}}],[\"类索引表示当前类在常量池中的索引\",{\"1\":{\"240\":1}}],[\"类索引\",{\"1\":{\"240\":1}}],[\"类和接口的全限定名\",{\"1\":{\"240\":1}}],[\"类文件名\",{\"1\":{\"297\":1}}],[\"类文件结构\",{\"0\":{\"240\":1,\"1526\":1}}],[\"类文件和字节码\",{\"0\":{\"239\":1}}],[\"类加载检查\",{\"1\":{\"1521\":1}}],[\"类加载时初始为null\",{\"1\":{\"290\":1}}],[\"类加载时机\",{\"0\":{\"247\":1}}],[\"类加载器负责完成加载阶段的工作\",{\"1\":{\"1527\":1}}],[\"类加载器加载的类才可以获取\",{\"1\":{\"1135\":1}}],[\"类加载器双亲委派模型\",{\"1\":{\"254\":1}}],[\"类加载器\",{\"0\":{\"254\":1,\"1528\":1},\"1\":{\"254\":1,\"1015\":1,\"1135\":1}}],[\"类加载到卸载的七个阶段\",{\"1\":{\"248\":1}}],[\"类加载过程\",{\"0\":{\"248\":1,\"1527\":1}}],[\"类加载过多或常量过多可能产生outofmemoryerror\",{\"1\":{\"211\":1}}],[\"类加载的时机可以分为以下几种情况\",{\"1\":{\"247\":1}}],[\"类加载机制指jvm把描述类的数据从class文件加载到内存\",{\"1\":{\"246\":1}}],[\"类加载机制\",{\"0\":{\"246\":1}}],[\"类加载情况等\",{\"1\":{\"230\":1,\"237\":1}}],[\"类加载情况\",{\"1\":{\"230\":1,\"236\":1}}],[\"类常量池和运行时常量池都在方法区中\",{\"1\":{\"211\":1}}],[\"类的加载阶段是指将类的字节码数据从文件或其他途径读取到内存中\",{\"1\":{\"1527\":1}}],[\"类的方法调用\",{\"1\":{\"1513\":1}}],[\"类的所有可变操作\",{\"1\":{\"1498\":1}}],[\"类的所有静态方法\",{\"1\":{\"263\":1}}],[\"类的实例\",{\"1\":{\"254\":2}}],[\"类的生命周期\",{\"1\":{\"248\":1}}],[\"类的\",{\"1\":{\"211\":1}}],[\"类字段有两次赋初始值的过程\",{\"1\":{\"204\":1}}],[\"类似漏桶漏水\",{\"1\":{\"1637\":1}}],[\"类似parnew\",{\"1\":{\"1525\":1}}],[\"类似cas\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"类似命名空间一样对不同信息进行了清晰的隔离\",{\"1\":{\"1167\":1}}],[\"类似还有\",{\"1\":{\"1140\":2}}],[\"类似的也是要双写集群\",{\"1\":{\"1239\":1}}],[\"类似的\",{\"1\":{\"873\":1}}],[\"类似的有对应的读方法\",{\"1\":{\"828\":1}}],[\"类似的内存分配算法提升分配效率\",{\"1\":{\"826\":1}}],[\"类似boss和worker\",{\"1\":{\"811\":1}}],[\"类似b+树索引\",{\"1\":{\"34\":1}}],[\"类似于分布式\",{\"1\":{\"1162\":1}}],[\"类似于\",{\"1\":{\"532\":1,\"697\":1}}],[\"类似于java中的nio\",{\"1\":{\"1130\":1}}],[\"类似于jstat工具\",{\"1\":{\"235\":1}}],[\"类似于jstack工具\",{\"1\":{\"235\":2}}],[\"类似于jinfo工具\",{\"1\":{\"235\":1}}],[\"类似于jmap工具\",{\"1\":{\"235\":1}}],[\"类似os虚拟内存\",{\"1\":{\"476\":1}}],[\"类似aop编程\",{\"1\":{\"349\":1}}],[\"类似键值对的存储形式\",{\"1\":{\"259\":1}}],[\"类似虚拟机栈\",{\"1\":{\"209\":1}}],[\"类似人满发车的概念\",{\"1\":{\"161\":1}}],[\"类似\",{\"1\":{\"150\":1,\"427\":1,\"497\":1,\"536\":1,\"760\":1,\"828\":1,\"1044\":1,\"1168\":1,\"1472\":2,\"1696\":1}}],[\"类\",{\"1\":{\"137\":1,\"197\":1,\"211\":1,\"254\":1,\"298\":1,\"348\":1,\"983\":1,\"1534\":1,\"1598\":3,\"1861\":1}}],[\"类内置了一系列的散列函数对象\",{\"1\":{\"83\":1}}],[\"类型键值对的映射表\",{\"1\":{\"1570\":1}}],[\"类型等\",{\"1\":{\"1396\":1}}],[\"类型取决于处理器的返回值\",{\"1\":{\"920\":1}}],[\"类型取决于定义\",{\"1\":{\"122\":2}}],[\"类型检查\",{\"1\":{\"901\":1}}],[\"类型为trx\",{\"1\":{\"746\":1}}],[\"类型为varchar\",{\"1\":{\"576\":1}}],[\"类型名称\",{\"1\":{\"661\":1,\"662\":1,\"663\":1,\"664\":1,\"665\":1}}],[\"类型执行\",{\"1\":{\"544\":1}}],[\"类型之间的转换\",{\"1\":{\"540\":1}}],[\"类型和长度由其余位记录\",{\"1\":{\"892\":1}}],[\"类型和\",{\"1\":{\"540\":1}}],[\"类型和关联的\",{\"1\":{\"521\":1}}],[\"类型设置别名\",{\"1\":{\"520\":1}}],[\"类型别名\",{\"1\":{\"520\":1}}],[\"类型范围小的变量\",{\"1\":{\"287\":1}}],[\"类型推断\",{\"1\":{\"274\":1}}],[\"类型的\",{\"1\":{\"1012\":3}}],[\"类型的值赋给\",{\"1\":{\"263\":1}}],[\"类型的加载\",{\"1\":{\"246\":1}}],[\"类型指针\",{\"1\":{\"215\":1}}],[\"类型要执行\",{\"1\":{\"188\":1}}],[\"类型转换等操作\",{\"1\":{\"1547\":1}}],[\"类型转换模块\",{\"1\":{\"545\":1}}],[\"类型转换指令\",{\"1\":{\"241\":1}}],[\"类型转换失败报错或返回null\",{\"1\":{\"129\":1}}],[\"类型转换函数\",{\"1\":{\"129\":1}}],[\"类型可以不同\",{\"1\":{\"112\":1}}],[\"类型\",{\"0\":{\"1536\":1},\"1\":{\"83\":1,\"112\":1,\"122\":3,\"258\":1,\"521\":2,\"576\":2,\"631\":1,\"635\":1,\"695\":1,\"949\":1,\"1068\":1,\"1227\":3,\"1234\":1,\"1461\":1,\"1712\":13}}],[\"类型才抛出\",{\"1\":{\"62\":1}}],[\"类以支持范围类型\",{\"1\":{\"81\":1}}],[\"类结构看\",{\"1\":{\"187\":1}}],[\"类结构\",{\"0\":{\"3\":1}}],[\"勾选可搜索后会构建倒排链表\",{\"1\":{\"34\":1}}],[\"勾选可过滤后会构建正排链表\",{\"1\":{\"34\":1}}],[\"子集和组合本质上一样\",{\"1\":{\"1677\":1}}],[\"子集ii\",{\"1\":{\"1673\":1}}],[\"子集不要求元素的个数\",{\"1\":{\"1671\":1}}],[\"子集树\",{\"1\":{\"1669\":1}}],[\"子集\",{\"0\":{\"1670\":1,\"1673\":1},\"1\":{\"1669\":1,\"1670\":1}}],[\"子线程执行\",{\"1\":{\"1576\":1}}],[\"子线程负责完成后续的业务处理\",{\"1\":{\"1488\":1}}],[\"子网掩码\",{\"1\":{\"1422\":1,\"1426\":1}}],[\"子目录下的\",{\"1\":{\"1330\":1}}],[\"子列间\",{\"1\":{\"1227\":1}}],[\"子列名\",{\"1\":{\"122\":2}}],[\"子节点\",{\"1\":{\"1168\":1}}],[\"子节点版本\",{\"1\":{\"1168\":1}}],[\"子接口\",{\"1\":{\"1111\":1}}],[\"子方法加入到嵌套事务中执行\",{\"1\":{\"1041\":1}}],[\"子进程退出后可能保留一些信息成为僵尸进程消耗资源\",{\"1\":{\"1487\":1}}],[\"子进程完成重写后\",{\"1\":{\"917\":1}}],[\"子进程执行重写的过程中\",{\"1\":{\"917\":1}}],[\"子句里面使用\",{\"1\":{\"618\":1}}],[\"子查询的简单查询\",{\"1\":{\"728\":1}}],[\"子查询的执行依赖于外层查询的值\",{\"1\":{\"607\":1}}],[\"子查询物化\",{\"1\":{\"726\":1}}],[\"子查询优化\",{\"0\":{\"726\":1}}],[\"子查询返回列表的所有值都必须满足\",{\"1\":{\"609\":1}}],[\"子查询返回列表中\",{\"1\":{\"609\":1}}],[\"子查询返回的结果是单个值\",{\"1\":{\"608\":1}}],[\"子查询可以单独运行出结果\",{\"1\":{\"607\":1}}],[\"子查询结果为多行多列\",{\"1\":{\"607\":1}}],[\"子查询结果为一行\",{\"1\":{\"607\":1}}],[\"子查询结果为一列\",{\"1\":{\"607\":1}}],[\"子查询结果为单个值\",{\"1\":{\"607\":1}}],[\"子查询外部的语句可以是\",{\"1\":{\"607\":1}}],[\"子查询\",{\"0\":{\"607\":1},\"1\":{\"608\":1}}],[\"子表将外键设为一个默认值\",{\"1\":{\"599\":1}}],[\"子系统是门面模式的内部组成部分\",{\"1\":{\"373\":1}}],[\"子系统是一组类或者模块\",{\"1\":{\"373\":1}}],[\"子系统\",{\"1\":{\"373\":1}}],[\"子元素\",{\"1\":{\"357\":2}}],[\"子字段等\",{\"1\":{\"34\":1}}],[\"子类不能覆写父类的静态方法\",{\"1\":{\"1534\":1}}],[\"子类不能重写父类的静态方法\",{\"1\":{\"291\":1}}],[\"子类继承内存图\",{\"1\":{\"359\":1}}],[\"子类重写父类方法时\",{\"1\":{\"291\":1}}],[\"子类可以直接使用父类的静态成员\",{\"1\":{\"291\":1}}],[\"子类没有找父类\",{\"1\":{\"291\":1}}],[\"子类中访问成员满足就近原则\",{\"1\":{\"291\":1}}],[\"子类abstractqueuedsynchronizer内部定义了队列的节点\",{\"1\":{\"3\":1}}],[\"子类实现的具体的同步器可能会用到\",{\"1\":{\"3\":1}}],[\"映射地址连通\",{\"1\":{\"1860\":1}}],[\"映射到\",{\"1\":{\"1634\":1}}],[\"映射到一个相同的槽位上\",{\"1\":{\"698\":1}}],[\"映射到对应的槽位上\",{\"1\":{\"698\":1}}],[\"映射到多个\",{\"1\":{\"67\":1}}],[\"映射一个heap\",{\"1\":{\"564\":1}}],[\"映射查询语句\",{\"1\":{\"529\":1}}],[\"映射删除语句\",{\"1\":{\"529\":1}}],[\"映射更新语句\",{\"1\":{\"529\":1}}],[\"映射插入语句\",{\"1\":{\"529\":1}}],[\"映射语句的\",{\"1\":{\"528\":1}}],[\"映射器十分强大并且简洁\",{\"1\":{\"529\":1}}],[\"映射器\",{\"0\":{\"510\":1}}],[\"映射属性\",{\"1\":{\"36\":1}}],[\"映射\",{\"1\":{\"34\":1,\"58\":1,\"509\":1,\"1514\":1}}],[\"列车以80km\",{\"1\":{\"1833\":1}}],[\"列出可下载的视频\",{\"1\":{\"1877\":1}}],[\"列出所有分支\",{\"1\":{\"1333\":1}}],[\"列出路径内的文件状态\",{\"1\":{\"1219\":1}}],[\"列类型\",{\"1\":{\"1228\":1}}],[\"列的类型\",{\"1\":{\"728\":1}}],[\"列的限制等\",{\"1\":{\"686\":1}}],[\"列必须单独出现\",{\"1\":{\"724\":1}}],[\"列级别\",{\"1\":{\"674\":1}}],[\"列名列表\",{\"1\":{\"622\":3}}],[\"列名等\",{\"1\":{\"570\":1}}],[\"列子查询\",{\"0\":{\"609\":1},\"1\":{\"607\":1}}],[\"列表后自行寻找\",{\"1\":{\"1220\":1}}],[\"列表\",{\"1\":{\"1220\":1,\"1570\":1}}],[\"列表中\",{\"1\":{\"1074\":1}}],[\"列表中和\",{\"1\":{\"139\":1}}],[\"列表的每个元素是一个pubsubpattern结构\",{\"1\":{\"955\":1}}],[\"列表的顺序\",{\"1\":{\"470\":1}}],[\"列表对象保存的元素数量小于512\",{\"1\":{\"897\":1}}],[\"列表对象保存的所有字符串元素的长度都小于64byte\",{\"1\":{\"897\":1}}],[\"列表对象的编码有两种\",{\"1\":{\"897\":1}}],[\"列表对象\",{\"0\":{\"897\":1},\"1\":{\"895\":1,\"913\":1}}],[\"列表节点\",{\"0\":{\"892\":1}}],[\"列表键和哈希键的底层实现之一\",{\"1\":{\"890\":1}}],[\"列表并将\",{\"1\":{\"470\":1}}],[\"列表实现\",{\"1\":{\"67\":1}}],[\"列存相关的dvd\",{\"1\":{\"37\":1}}],[\"列\",{\"1\":{\"34\":1,\"1567\":1}}],[\"记不清是从什么时候开始的\",{\"1\":{\"1832\":1}}],[\"记得在\",{\"1\":{\"1791\":1}}],[\"记录类型\",{\"1\":{\"1792\":1}}],[\"记录扩散到全球的\",{\"1\":{\"1792\":1}}],[\"记录上一个排列的值\",{\"1\":{\"1675\":1}}],[\"记录前一条树枝的值\",{\"1\":{\"1675\":1}}],[\"记录用户的状态\",{\"1\":{\"1642\":1}}],[\"记录用于辅助选举\",{\"1\":{\"465\":1}}],[\"记录服务器执行的所有写命令\",{\"1\":{\"1577\":1}}],[\"记录服务名和\",{\"1\":{\"92\":1}}],[\"记录sql原文以及操作的具体数据\",{\"1\":{\"1556\":1}}],[\"记录sql原文\",{\"1\":{\"1556\":1}}],[\"记录servercron执行次数\",{\"1\":{\"928\":1}}],[\"记录数据库中所有的修改操作\",{\"1\":{\"1556\":1}}],[\"记录数据位置\",{\"1\":{\"1224\":1}}],[\"记录由\",{\"1\":{\"1555\":1}}],[\"记录事务对数据库所做的修改\",{\"1\":{\"1555\":1}}],[\"记录事务状态\",{\"1\":{\"461\":1}}],[\"记录子目录和文件\",{\"1\":{\"1474\":1}}],[\"记录文件的名字\",{\"1\":{\"1474\":1}}],[\"记录文件元信息\",{\"1\":{\"1474\":1}}],[\"记录是否是对应的内存块\",{\"1\":{\"1435\":1}}],[\"记录是否加锁\",{\"1\":{\"564\":1}}],[\"记录消息的\",{\"1\":{\"1374\":1}}],[\"记录消息数据\",{\"1\":{\"1286\":1}}],[\"记录树对象\",{\"1\":{\"1350\":1}}],[\"记录本地仓库最近几个月\",{\"1\":{\"1341\":1}}],[\"记录着目录结构和\",{\"1\":{\"1332\":1}}],[\"记录一些以前没有注意过的问题和底层实现的原理\",{\"1\":{\"1307\":1}}],[\"记录\",{\"1\":{\"1219\":1,\"1792\":8}}],[\"记录所属从节点和数量\",{\"1\":{\"948\":1}}],[\"记录所有更改数据的日志\",{\"1\":{\"1563\":1}}],[\"记录所有操作会导致文件检索变慢\",{\"1\":{\"1219\":1}}],[\"记录所有服务器\",{\"1\":{\"465\":1}}],[\"记录所有主题信息\",{\"1\":{\"465\":1}}],[\"记录正在复制的主节点\",{\"1\":{\"948\":1}}],[\"记录槽指派信息\",{\"1\":{\"946\":1}}],[\"记录当前节点视角下的集群所处状态\",{\"1\":{\"945\":1}}],[\"记录该sentinel设定的局部领头配置纪元\",{\"1\":{\"942\":1}}],[\"记录该sentinel设定的局部领头运行id\",{\"1\":{\"942\":1}}],[\"记录该对象当前被引用的次数\",{\"1\":{\"223\":1}}],[\"记录至cmd属性\",{\"1\":{\"927\":1}}],[\"记录对象实例指针和对象类型指针\",{\"1\":{\"1521\":1}}],[\"记录对象所使用的数据结构\",{\"1\":{\"895\":1}}],[\"记录对哪个表加锁\",{\"1\":{\"564\":1}}],[\"记录content属性的类型及长度\",{\"1\":{\"892\":1}}],[\"记录两个结点的距离\",{\"1\":{\"886\":1}}],[\"记录表的大小\",{\"1\":{\"882\":1}}],[\"记录表空间id\",{\"1\":{\"564\":1}}],[\"记录buf数组中未使用字节数\",{\"1\":{\"878\":1}}],[\"记录buf数组中已使用字节数\",{\"1\":{\"878\":1}}],[\"记录段相关信息\",{\"1\":{\"749\":1}}],[\"记录修改的具体信息\",{\"1\":{\"738\":1,\"1555\":1}}],[\"记录在redisserver\",{\"1\":{\"936\":1}}],[\"记录在后的是被驱动表\",{\"1\":{\"728\":1}}],[\"记录在前的是驱动表\",{\"1\":{\"728\":1}}],[\"记录在逻辑结构page页中\",{\"1\":{\"615\":1}}],[\"记录属性的结构\",{\"1\":{\"693\":1}}],[\"记录空间成为可重用空间\",{\"1\":{\"689\":1}}],[\"记录头信息\",{\"1\":{\"684\":1}}],[\"记录的每列更新前后所占空间一样\",{\"1\":{\"748\":1}}],[\"记录的真实数据\",{\"1\":{\"684\":1}}],[\"记录的额外信息\",{\"1\":{\"684\":1}}],[\"记录的是每一行的数据变更\",{\"1\":{\"643\":1}}],[\"记录的是sql语句\",{\"1\":{\"643\":1}}],[\"记录格式\",{\"0\":{\"683\":1}}],[\"记录了当前长度\",{\"1\":{\"1570\":1}}],[\"记录了当前服务器关联的binlog文件有哪些\",{\"1\":{\"643\":1}}],[\"记录了时间事件的到达时间\",{\"1\":{\"920\":1}}],[\"记录了这个\",{\"1\":{\"833\":1}}],[\"记录了所有的ddl\",{\"1\":{\"643\":1}}],[\"记录锁类型\",{\"1\":{\"558\":1}}],[\"记录锁\",{\"0\":{\"555\":1},\"1\":{\"1561\":1}}],[\"记录收集器\",{\"1\":{\"450\":1}}],[\"记录从旧对象到新对象的转向关系\",{\"1\":{\"179\":1}}],[\"记录处理中的请求\",{\"1\":{\"100\":1}}],[\"记录版本\",{\"1\":{\"37\":1}}],[\"记录行\",{\"1\":{\"34\":1}}],[\"记住密码\",{\"1\":{\"17\":1}}],[\"文末参考的几篇文章里都是使用手动执行\",{\"1\":{\"1791\":1}}],[\"文化素养不够也就打个卡\",{\"1\":{\"1777\":1}}],[\"文本替换\",{\"1\":{\"1687\":1}}],[\"文本text\",{\"1\":{\"1129\":1}}],[\"文本等\",{\"1\":{\"318\":1}}],[\"文档更优秀\",{\"1\":{\"809\":1}}],[\"文档id\",{\"1\":{\"47\":1,\"50\":2}}],[\"文档操作\",{\"0\":{\"46\":1}}],[\"文档到字段对应关系组成的链表\",{\"1\":{\"34\":1}}],[\"文档会被序列化为json存储在es中\",{\"1\":{\"34\":1}}],[\"文档是可搜索的结构化数据单元\",{\"1\":{\"34\":1}}],[\"文档\",{\"1\":{\"34\":1,\"1543\":1}}],[\"文件三种状态\",{\"1\":{\"1633\":1}}],[\"文件里\",{\"1\":{\"1598\":1}}],[\"文件里面记录一个索引\",{\"1\":{\"467\":1}}],[\"文件重写操作\",{\"1\":{\"1577\":1}}],[\"文件替换旧的\",{\"1\":{\"1577\":1}}],[\"文件保存的数据库状态与现有的数据库状态一致\",{\"1\":{\"1577\":1}}],[\"文件保留的最长时间\",{\"1\":{\"445\":1}}],[\"文件期间\",{\"1\":{\"1577\":1}}],[\"文件字符输入输出流\",{\"1\":{\"1502\":1}}],[\"文件输入输出流\",{\"1\":{\"1502\":1}}],[\"文件描述符\",{\"1\":{\"1487\":1}}],[\"文件描述符等\",{\"1\":{\"1436\":1}}],[\"文件头中保存索引数据块的指针\",{\"1\":{\"1476\":1}}],[\"文件头部\",{\"1\":{\"688\":1}}],[\"文件长度也可以动态扩展\",{\"1\":{\"1476\":1}}],[\"文件长度不易扩展的问题\",{\"1\":{\"1476\":1}}],[\"文件数据紧密相连\",{\"1\":{\"1476\":1}}],[\"文件数由innodb\",{\"1\":{\"739\":1}}],[\"文件存放在磁盘连续的物理空间中\",{\"1\":{\"1476\":1}}],[\"文件存储\",{\"0\":{\"1476\":1}}],[\"文件磁盘位置\",{\"1\":{\"1475\":1}}],[\"文件指针\",{\"1\":{\"1475\":1}}],[\"文件使用\",{\"0\":{\"1475\":1}}],[\"文件系统加载\",{\"1\":{\"1648\":1}}],[\"文件系统磁盘空间占用\",{\"1\":{\"1631\":1}}],[\"文件系统采用了位图法\",{\"1\":{\"1477\":1}}],[\"文件系统\",{\"0\":{\"1473\":1},\"1\":{\"1484\":1}}],[\"文件系统中的特殊文件\",{\"1\":{\"1447\":1}}],[\"文件页\",{\"1\":{\"1446\":3}}],[\"文件映射段\",{\"1\":{\"1444\":1}}],[\"文件是一个特殊的引用\",{\"1\":{\"1351\":1}}],[\"文件是java编译器编译java源代码生成的文件\",{\"1\":{\"240\":1}}],[\"文件索引\",{\"1\":{\"1332\":1}}],[\"文件了\",{\"1\":{\"1219\":1}}],[\"文件一样\",{\"1\":{\"1219\":1}}],[\"文件会逐渐变大\",{\"1\":{\"1219\":1}}],[\"文件记录了\",{\"1\":{\"1219\":1}}],[\"文件被划分成一个个\",{\"1\":{\"1219\":1}}],[\"文件操作\",{\"0\":{\"1218\":1}}],[\"文件就是事务日志\",{\"1\":{\"1170\":1}}],[\"文件和压缩数据流等\",{\"1\":{\"1126\":1}}],[\"文件时\",{\"1\":{\"1024\":1}}],[\"文件事件是随机出现的\",{\"1\":{\"921\":1}}],[\"文件事件分派器\",{\"1\":{\"919\":1}}],[\"文件事件的抽象\",{\"1\":{\"919\":1}}],[\"文件事件\",{\"0\":{\"919\":1},\"1\":{\"918\":1,\"919\":1,\"1572\":1}}],[\"文件编程\",{\"0\":{\"775\":1}}],[\"文件由两部分组成\",{\"1\":{\"739\":1}}],[\"文件尾部\",{\"1\":{\"688\":1}}],[\"文件大小\",{\"1\":{\"673\":1,\"1474\":1}}],[\"文件解析完成后\",{\"1\":{\"541\":1}}],[\"文件或注释读取的映射语句\",{\"1\":{\"540\":1}}],[\"文件中存在的密码不得使用\",{\"1\":{\"1148\":1}}],[\"文件中保存\",{\"1\":{\"1015\":1}}],[\"文件中读取\",{\"1\":{\"1008\":1}}],[\"文件中的的每条\",{\"1\":{\"541\":1}}],[\"文件中的\",{\"1\":{\"509\":1}}],[\"文件中高于\",{\"1\":{\"471\":1}}],[\"文件名以index结尾\",{\"1\":{\"476\":1}}],[\"文件名以log结尾\",{\"1\":{\"476\":1}}],[\"文件高于hw的部分截断\",{\"1\":{\"471\":1}}],[\"文件进行日志配置\",{\"1\":{\"386\":1}}],[\"文件夹对象\",{\"1\":{\"314\":1}}],[\"文件格式验证\",{\"1\":{\"250\":1}}],[\"文件的末尾\",{\"1\":{\"1577\":1}}],[\"文件的工作之后\",{\"1\":{\"1577\":1}}],[\"文件的创建\",{\"1\":{\"1476\":1}}],[\"文件的唯一标识\",{\"1\":{\"1474\":1}}],[\"文件的忽略模式\",{\"1\":{\"1349\":1}}],[\"文件的权限\",{\"1\":{\"1218\":1}}],[\"文件的大小\",{\"1\":{\"445\":1}}],[\"文件的方法数量\",{\"1\":{\"240\":1}}],[\"文件的字段属性\",{\"1\":{\"240\":1}}],[\"文件的标志\",{\"1\":{\"240\":1}}],[\"文件组成方式\",{\"1\":{\"37\":1}}],[\"文件\",{\"0\":{\"313\":1,\"796\":1,\"1478\":1},\"1\":{\"17\":1,\"233\":1,\"355\":1,\"435\":2,\"476\":1,\"528\":1,\"541\":2,\"678\":1,\"679\":1,\"680\":1,\"796\":1,\"1014\":1,\"1015\":1,\"1154\":1,\"1219\":1,\"1396\":1,\"1447\":1,\"1532\":1,\"1556\":1,\"1577\":1,\"1698\":1}}],[\"表现形式\",{\"1\":{\"1640\":2}}],[\"表清空\",{\"1\":{\"1567\":1}}],[\"表明可以传一个mss大小的数据\",{\"1\":{\"1413\":1}}],[\"表明该变量不能被重新赋值\",{\"1\":{\"291\":1}}],[\"表明该方法不能被重写\",{\"1\":{\"291\":1}}],[\"表明该类不能被继承\",{\"1\":{\"291\":1}}],[\"表类型\",{\"0\":{\"1228\":1}}],[\"表中记录了从\",{\"1\":{\"976\":1}}],[\"表中的列或者索引\",{\"1\":{\"675\":1}}],[\"表上拉\",{\"1\":{\"726\":1}}],[\"表记录为0\",{\"1\":{\"724\":1}}],[\"表空间号+数据页号+偏移量+修改数据长度+具体修改的数据\",{\"1\":{\"1555\":1}}],[\"表空间id\",{\"1\":{\"739\":1}}],[\"表空间全局图\",{\"1\":{\"695\":1}}],[\"表空间是由各个段组成的\",{\"1\":{\"694\":1}}],[\"表空间\",{\"0\":{\"692\":1,\"695\":1}}],[\"表的其它索引占用的页面数量\",{\"1\":{\"720\":1}}],[\"表的聚簇索引占用的页面数量\",{\"1\":{\"720\":1}}],[\"表的数据量变小来缓解单一数据库的性能瓶颈问题\",{\"1\":{\"651\":1}}],[\"表的结构约束\",{\"1\":{\"34\":1}}],[\"表数据都是根据主键按序组织存放的\",{\"1\":{\"615\":1}}],[\"表数据路径\",{\"1\":{\"113\":1}}],[\"表子查询\",{\"0\":{\"611\":1},\"1\":{\"607\":1}}],[\"表b\",{\"1\":{\"606\":1}}],[\"表a\",{\"1\":{\"605\":2,\"606\":1}}],[\"表2\",{\"1\":{\"603\":2,\"604\":2}}],[\"表1\",{\"1\":{\"603\":2,\"604\":2}}],[\"表名语句手动同步更新\",{\"1\":{\"720\":1}}],[\"表名查询\",{\"1\":{\"717\":1}}],[\"表名的长度\",{\"1\":{\"673\":1}}],[\"表名字段\",{\"1\":{\"581\":1}}],[\"表名\",{\"1\":{\"575\":6,\"576\":4,\"578\":4,\"579\":1,\"580\":1,\"582\":5,\"583\":1,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"591\":2,\"599\":4,\"673\":2,\"677\":1,\"678\":1,\"717\":1,\"727\":1,\"1539\":1,\"1608\":1}}],[\"表级别\",{\"1\":{\"674\":1}}],[\"表级排他锁互斥\",{\"1\":{\"560\":1}}],[\"表级锁对整张表上锁\",{\"1\":{\"1560\":1}}],[\"表级锁速度快\",{\"1\":{\"563\":1}}],[\"表级锁分为两类\",{\"1\":{\"551\":1}}],[\"表级锁每次操作锁住整张表\",{\"1\":{\"551\":1}}],[\"表级锁\",{\"0\":{\"551\":1,\"1560\":1},\"1\":{\"549\":2}}],[\"表x锁\",{\"1\":{\"552\":1}}],[\"表独占锁\",{\"1\":{\"552\":1}}],[\"表s锁\",{\"1\":{\"552\":1}}],[\"表共享锁\",{\"1\":{\"552\":1}}],[\"表锁分为两种\",{\"1\":{\"552\":1}}],[\"表锁\",{\"0\":{\"552\":1},\"1\":{\"551\":1,\"564\":2,\"681\":2}}],[\"表达式计算\",{\"1\":{\"724\":1}}],[\"表达式的参数\",{\"1\":{\"263\":1}}],[\"表达式简化了匿名函数的定义和使用\",{\"1\":{\"263\":1}}],[\"表达式\",{\"1\":{\"263\":2,\"1023\":1,\"1380\":1}}],[\"表注释等乱码解决方案\",{\"0\":{\"130\":1}}],[\"表注释\",{\"1\":{\"113\":1,\"575\":1}}],[\"表操作\",{\"0\":{\"111\":1,\"575\":1}}],[\"表\",{\"1\":{\"34\":1,\"240\":1,\"572\":1,\"591\":2,\"673\":1,\"675\":1}}],[\"表示软链接\",{\"1\":{\"1696\":1}}],[\"表示数字状态\",{\"1\":{\"1658\":1}}],[\"表示对一个已修改文件的当前版本做了标记\",{\"1\":{\"1633\":1}}],[\"表示方法返回的实例装配到spring容器中\",{\"1\":{\"1594\":1}}],[\"表示同步状态\",{\"1\":{\"1516\":1}}],[\"表示描述符集合\",{\"1\":{\"1487\":1}}],[\"表示限制一个进程可以拥有的vma\",{\"1\":{\"1464\":1}}],[\"表示系统全局的进程\",{\"1\":{\"1464\":1}}],[\"表示系统支持的最大线程数\",{\"1\":{\"1464\":1}}],[\"表示监听本机的所有\",{\"1\":{\"1422\":1}}],[\"表示任意\",{\"1\":{\"1398\":1}}],[\"表示层\",{\"1\":{\"1393\":1}}],[\"表示远程分支\",{\"1\":{\"1333\":1}}],[\"表示尚未跟踪\",{\"1\":{\"1316\":1}}],[\"表示删除域名下所有缓存\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"表示是否加载环境变量\",{\"1\":{\"1691\":1}}],[\"表示是写锁\",{\"1\":{\"1185\":1}}],[\"表示是读锁\",{\"1\":{\"1184\":1}}],[\"表示不自动清除\",{\"1\":{\"1164\":1}}],[\"表示不指定\",{\"1\":{\"1088\":1}}],[\"表示线程池的运行状态\",{\"1\":{\"1112\":1}}],[\"表示有重入\",{\"1\":{\"1076\":1}}],[\"表示有竞争\",{\"1\":{\"1076\":1,\"1515\":1}}],[\"表示重入\",{\"1\":{\"1076\":1}}],[\"表示重入次数\",{\"1\":{\"9\":1}}],[\"表示由该线程给\",{\"1\":{\"1076\":1}}],[\"表示由令牌可用\",{\"1\":{\"9\":1}}],[\"表示该节点是观察者角色\",{\"1\":{\"1196\":1}}],[\"表示该客户端的事务安全性已被破坏\",{\"1\":{\"960\":1}}],[\"表示该引用实例关联的实际对象\",{\"1\":{\"187\":1}}],[\"表示给该从节点投票\",{\"1\":{\"948\":1}}],[\"表示目标将源设置成了局部领头\",{\"1\":{\"942\":1}}],[\"表示源sentinel要求目标sentinel将源设置为目标的局部领头\",{\"1\":{\"942\":1}}],[\"表示局部领头sentinel的配置纪元\",{\"1\":{\"941\":1}}],[\"表示询问下线的回复\",{\"1\":{\"941\":1}}],[\"表示伪客户端\",{\"1\":{\"923\":1}}],[\"表示ms精度的unix时间戳\",{\"1\":{\"908\":1}}],[\"表示content存储整数值\",{\"1\":{\"892\":1}}],[\"表示content存储字节数组\",{\"1\":{\"892\":1}}],[\"表示rehash操作完成\",{\"1\":{\"883\":1}}],[\"表示rehash开始\",{\"1\":{\"883\":1}}],[\"表示需要连接关闭\",{\"1\":{\"839\":1}}],[\"表示一个完整报文\",{\"1\":{\"839\":1}}],[\"表示一个异步计算的结果\",{\"1\":{\"77\":1}}],[\"表示下一个可以被写入数据的位置\",{\"1\":{\"827\":1}}],[\"表示下一个被读取的字节的位置\",{\"1\":{\"827\":1}}],[\"表示\",{\"1\":{\"778\":1,\"827\":1,\"1087\":1}}],[\"表示ddl操作的表id\",{\"1\":{\"749\":1}}],[\"表示常数级别\",{\"1\":{\"710\":1}}],[\"表示针对通用语言且不区分大小写的规则\",{\"1\":{\"674\":1}}],[\"表示将要或者已经新增的数据\",{\"1\":{\"636\":1}}],[\"表示查询所有字段\",{\"1\":{\"582\":1}}],[\"表示和数据库交互时的会话\",{\"1\":{\"540\":1}}],[\"表示从\",{\"1\":{\"540\":1}}],[\"表示分区中每条消息的位置信息\",{\"1\":{\"490\":1}}],[\"表示分区号\",{\"1\":{\"461\":1}}],[\"表示消息的key的长度\",{\"1\":{\"474\":1}}],[\"表示程序本身可以处理的问题\",{\"1\":{\"345\":1}}],[\"表示引用实例所引用的对象已经被回收\",{\"1\":{\"186\":1}}],[\"表示引用实例已经被加入引用队列中\",{\"1\":{\"186\":1}}],[\"表示引用实例已经被创建\",{\"1\":{\"186\":1}}],[\"表示引用实例已经添加到某个引用队列\",{\"1\":{\"184\":1}}],[\"表示引用实例不用注册\",{\"1\":{\"184\":1}}],[\"表示特殊含义的引用队列类型\",{\"1\":{\"184\":1}}],[\"表示当前是个配置类\",{\"1\":{\"1598\":1}}],[\"表示当前线程正在执行任务\",{\"1\":{\"1114\":1}}],[\"表示当前\",{\"1\":{\"161\":1}}],[\"表示当前拥有锁的线程实例\",{\"1\":{\"3\":1}}],[\"表示此处必填\",{\"1\":{\"105\":1}}],[\"表示必填\",{\"1\":{\"105\":1}}],[\"表示在select后可以跟多个expr\",{\"1\":{\"105\":1}}],[\"表示序列\",{\"1\":{\"105\":1}}],[\"表示二选一\",{\"1\":{\"105\":1}}],[\"表示或\",{\"1\":{\"105\":1}}],[\"表示可写\",{\"1\":{\"105\":1}}],[\"表示可选\",{\"1\":{\"105\":1}}],[\"表示段名\",{\"1\":{\"37\":1}}],[\"表示集群所有数据完好\",{\"1\":{\"33\":1}}],[\"表示没有令牌可用\",{\"1\":{\"9\":1}}],[\"表示计数器未归零\",{\"1\":{\"9\":1}}],[\"表示计数器归零\",{\"1\":{\"9\":1}}],[\"表示被占用\",{\"1\":{\"9\":1}}],[\"表示锁可用\",{\"1\":{\"9\":1}}],[\"表示获取成功\",{\"1\":{\"5\":1}}],[\"表示获取资源\",{\"1\":{\"5\":1}}],[\"相机基本都是废片\",{\"1\":{\"1846\":1}}],[\"相机拍的全是废片\",{\"1\":{\"1844\":1}}],[\"相较于静态的书更喜欢电影\",{\"1\":{\"1817\":1}}],[\"相较于国内机票\",{\"1\":{\"1732\":1}}],[\"相邻的等值树枝会产生重复\",{\"1\":{\"1674\":1}}],[\"相邻的等值元素产生重复\",{\"1\":{\"1673\":1}}],[\"相邻页的空间都写满后\",{\"1\":{\"615\":1}}],[\"相与时\",{\"1\":{\"1665\":1}}],[\"相匹配的队列中\",{\"1\":{\"1628\":1}}],[\"相等才删除\",{\"1\":{\"1582\":1}}],[\"相反\",{\"1\":{\"1470\":1}}],[\"相互隔离\",{\"1\":{\"1443\":1}}],[\"相应的停止同步就是\",{\"1\":{\"1155\":1}}],[\"相应的\",{\"1\":{\"1012\":1}}],[\"相应的还可以自定义从\",{\"1\":{\"1008\":1}}],[\"相应的释放内存次数也不同\",{\"1\":{\"896\":1}}],[\"相当于目录服务\",{\"1\":{\"1617\":1}}],[\"相当于线程拿到了锁\",{\"1\":{\"1239\":1}}],[\"相当于计数器\",{\"1\":{\"942\":1}}],[\"相当于查询表2的所有数据\",{\"1\":{\"604\":1}}],[\"相当于查询表1的所有数据\",{\"1\":{\"604\":1}}],[\"相当于删除表中所有数据\",{\"1\":{\"575\":1}}],[\"相对复杂\",{\"1\":{\"1461\":1}}],[\"相对时间\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"相对的\",{\"1\":{\"1207\":1}}],[\"相对于该祖先的历次提交\",{\"1\":{\"1337\":1}}],[\"相对于整体偏移量的信息\",{\"1\":{\"833\":1}}],[\"相对于外连接\",{\"1\":{\"725\":1}}],[\"相对于\",{\"1\":{\"698\":2}}],[\"相对于二叉树\",{\"1\":{\"698\":2}}],[\"相对偏移量\",{\"1\":{\"478\":1}}],[\"相对偏移量或者是一个能间接定位到目标的句柄\",{\"1\":{\"252\":1}}],[\"相对路径\",{\"1\":{\"357\":1,\"778\":1}}],[\"相关的问题\",{\"1\":{\"1533\":1}}],[\"相关的二进制机器码\",{\"1\":{\"265\":1}}],[\"相关\",{\"0\":{\"1137\":1,\"1139\":1},\"1\":{\"1608\":1}}],[\"相关信息\",{\"1\":{\"1026\":1}}],[\"相关方法不会让线程暂停\",{\"1\":{\"783\":1}}],[\"相关方法会暂停线程\",{\"1\":{\"782\":1}}],[\"相关语法\",{\"1\":{\"677\":1}}],[\"相关子查询\",{\"1\":{\"607\":1}}],[\"相关元信息并给\",{\"1\":{\"427\":1}}],[\"相关记录\",{\"1\":{\"118\":1}}],[\"相同点\",{\"1\":{\"1636\":1}}],[\"相同就添加失败\",{\"1\":{\"1535\":1}}],[\"相同整数值的字符串对象可以进行共享\",{\"1\":{\"901\":1}}],[\"相同存储引擎也有不同的记录格式\",{\"1\":{\"683\":1}}],[\"相同主键的消息提交时\",{\"1\":{\"461\":1}}],[\"相同哈希值的元素构成链表\",{\"1\":{\"304\":1}}],[\"相同宽度的字段会被分配在一起\",{\"1\":{\"215\":1}}],[\"相同的目标\",{\"1\":{\"1648\":1}}],[\"相同的哈希因子计算值总是被划分到相同的分区表中\",{\"1\":{\"656\":1}}],[\"相同的输入参数总是产生相同的结果\",{\"1\":{\"635\":1}}],[\"相同的\",{\"1\":{\"154\":1,\"1514\":1}}],[\"相同\",{\"1\":{\"154\":1,\"1204\":1}}],[\"相同类型的文档的集合\",{\"1\":{\"34\":1}}],[\"相减\",{\"1\":{\"129\":1}}],[\"相比之下\",{\"1\":{\"1803\":1,\"1810\":1}}],[\"相比使用单线程的\",{\"1\":{\"1110\":1}}],[\"相比上面的传递语句\",{\"1\":{\"510\":1}}],[\"相比最简单的\",{\"1\":{\"365\":1}}],[\"相比于1\",{\"1\":{\"1404\":1}}],[\"相比于本地缓存\",{\"1\":{\"1254\":1}}],[\"相比于\",{\"1\":{\"195\":1,\"809\":1,\"1162\":1,\"1369\":1,\"1570\":1}}],[\"相比于非安全的容器\",{\"1\":{\"162\":1}}],[\"相比于原始的\",{\"1\":{\"156\":1}}],[\"相比于简单的\",{\"1\":{\"139\":1}}],[\"相比\",{\"1\":{\"1\":1,\"270\":1,\"508\":1,\"1576\":1,\"1791\":1}}],[\"还在距家4000多公里的地方吃上了粽子\",{\"1\":{\"1845\":1}}],[\"还好师傅人不错\",{\"1\":{\"1844\":1}}],[\"还好我们全车人都成功到达终点\",{\"1\":{\"1843\":1}}],[\"还好后来把我甩给了组里的另一位前辈\",{\"1\":{\"1773\":1}}],[\"还给我们戴哈达\",{\"1\":{\"1834\":1}}],[\"还买了米家的两个小玩意\",{\"1\":{\"1828\":1}}],[\"还支持多种网盘\",{\"1\":{\"1807\":1}}],[\"还支持指定时间设置\",{\"1\":{\"493\":1}}],[\"还麻烦前辈花了好多时间一起找问题真不好意思😅\",{\"1\":{\"1778\":1}}],[\"还适用于\",{\"1\":{\"1657\":1}}],[\"还应保证安全\",{\"1\":{\"1622\":1}}],[\"还分静态优先级和动态优先级\",{\"1\":{\"1470\":1}}],[\"还没有就由本地dns发出查询\",{\"1\":{\"1424\":1}}],[\"还没有实例化\",{\"1\":{\"1012\":1}}],[\"还原工作目录某文件到最近一次提交的状态\",{\"1\":{\"1320\":1}}],[\"还原到最近依次提交时的状态\",{\"1\":{\"1320\":1}}],[\"还原数据库状态\",{\"1\":{\"929\":1}}],[\"还能实现同步\",{\"1\":{\"1463\":1}}],[\"还能分析应用层的信息\",{\"1\":{\"1299\":1}}],[\"还能选择不同的提交方式从而实现不同的传输语义\",{\"1\":{\"480\":1}}],[\"还提供executors\",{\"1\":{\"1110\":1}}],[\"还提供了一些用于执行任务集合的方法\",{\"1\":{\"1113\":1}}],[\"还提供了一个更高级的封装\",{\"1\":{\"1039\":1}}],[\"还提供了很多额外的扩展点\",{\"1\":{\"1379\":1}}],[\"还提供了很多额外的扩展\",{\"1\":{\"1011\":1}}],[\"还提供了各种桥接组件\",{\"1\":{\"380\":1}}],[\"还导入了一个配置类\",{\"1\":{\"1059\":1}}],[\"还继承了\",{\"1\":{\"1055\":1}}],[\"还封装了一个实际的事务对象\",{\"1\":{\"1042\":1}}],[\"还会覆盖整个旅游领域\",{\"1\":{\"1724\":1}}],[\"还会因为线程的不合理分布导致资源调度失衡\",{\"1\":{\"1104\":1}}],[\"还会向集群广播publish消息\",{\"1\":{\"949\":1}}],[\"还会通过消息发送给集群中其它节点\",{\"1\":{\"946\":1}}],[\"还会顺带将ht\",{\"1\":{\"883\":1}}],[\"还会显示关于锁的附加信息\",{\"1\":{\"234\":1}}],[\"还未产生结果时返回\",{\"1\":{\"822\":1}}],[\"还未初始化\",{\"1\":{\"791\":1}}],[\"还要进行\",{\"1\":{\"1402\":1}}],[\"还要追加到aof\",{\"1\":{\"917\":1}}],[\"还要对该叶子节点的后续节点\",{\"1\":{\"707\":1}}],[\"还要排除掉其中的elasticsearch\",{\"1\":{\"39\":1}}],[\"还维护着满足特定查找算法的数据结构\",{\"1\":{\"697\":1}}],[\"还包含了一些为运行时准备的一些配置参数\",{\"1\":{\"1634\":1}}],[\"还包含一个指向这个树对象的指针\",{\"1\":{\"1332\":1}}],[\"还包含很多的更新\",{\"1\":{\"682\":1}}],[\"还包括内核堆栈\",{\"1\":{\"1454\":1}}],[\"还包括非结构化数据\",{\"1\":{\"1212\":1}}],[\"还包括系统内置的各种处理器\",{\"1\":{\"1012\":1}}],[\"还包括脏页的刷新\",{\"1\":{\"640\":1}}],[\"还负责将缓冲池中的数据异步刷新到磁盘中\",{\"1\":{\"640\":1}}],[\"还需要考虑表连接顺序\",{\"1\":{\"718\":1}}],[\"还需要借助\",{\"1\":{\"362\":1}}],[\"还需要资源的分配回收以及页调度\",{\"1\":{\"134\":1}}],[\"还进行了少量代码添加和转换工作\",{\"1\":{\"264\":1}}],[\"还可以调用这些方法和属性\",{\"1\":{\"1531\":1}}],[\"还可以使用线程池来创建线程\",{\"1\":{\"1508\":1}}],[\"还可以使用回调的方式\",{\"1\":{\"820\":1}}],[\"还可以获取到子树通过函数返回值传递回来的数据\",{\"1\":{\"999\":1}}],[\"还可以指定成功的返回值\",{\"1\":{\"1113\":1}}],[\"还可以指定执行的线程池\",{\"1\":{\"818\":1}}],[\"还可以指定用于特定版本\",{\"1\":{\"671\":1}}],[\"还可以根据实际情况选择多种存储引擎进行组合\",{\"1\":{\"682\":1}}],[\"还可以统计\",{\"1\":{\"657\":1}}],[\"还可以通过\",{\"1\":{\"584\":1,\"1218\":1}}],[\"还可以用于日志同步和实时计算等场景\",{\"1\":{\"440\":1}}],[\"还可以是压缩包如jar\",{\"1\":{\"249\":1}}],[\"还可以继承\",{\"1\":{\"71\":1}}],[\"还有同车的一个大哥请我们喝了拉萨啤酒\",{\"1\":{\"1841\":1}}],[\"还有一路的朋友们\",{\"1\":{\"1849\":1}}],[\"还有一个在武汉读书的研二小伙\",{\"1\":{\"1833\":1}}],[\"还有一些开源的解决方案\",{\"1\":{\"1809\":1}}],[\"还有一些标记属性的比特\",{\"1\":{\"1443\":1}}],[\"还有路上遇到的\",{\"1\":{\"1825\":1}}],[\"还有很多僧侣就坐在大堂里面点钱换给信众\",{\"1\":{\"1836\":1}}],[\"还有很多公网的pt站\",{\"1\":{\"1810\":1}}],[\"还有很多其它优化手段\",{\"1\":{\"732\":1}}],[\"还有上上周自己自己开发的第一个需求被发现bug了\",{\"1\":{\"1778\":1}}],[\"还有右膝盖的旧伤怕是难好了\",{\"1\":{\"1774\":1}}],[\"还有晚上的跟mentor的今日总结\",{\"1\":{\"1773\":1}}],[\"还有早会这种东西\",{\"1\":{\"1773\":1}}],[\"还有\",{\"1\":{\"1222\":1,\"1826\":1}}],[\"还有两个新增的成员\",{\"1\":{\"1044\":1}}],[\"还有几个隐藏列\",{\"1\":{\"744\":1}}],[\"还有它的从机\",{\"1\":{\"658\":1}}],[\"还有连接断开时也会自动释放锁\",{\"1\":{\"552\":1}}],[\"还有个\",{\"1\":{\"542\":1}}],[\"还有等待其它线程完成的\",{\"1\":{\"137\":1}}],[\"还有类似计算机组成的概念如分段\",{\"1\":{\"34\":1}}],[\"还是切手机了\",{\"1\":{\"1846\":1}}],[\"还是比较头疼的\",{\"1\":{\"1810\":1}}],[\"还是挺麻烦的\",{\"1\":{\"1809\":1}}],[\"还是个bg内刚推出6个月的低代码平台\",{\"1\":{\"1782\":1}}],[\"还是北京水土不服\",{\"1\":{\"1773\":1}}],[\"还是反过来\",{\"1\":{\"1556\":1}}],[\"还是基于非阻塞\",{\"1\":{\"1478\":1}}],[\"还是全连接队列\",{\"1\":{\"1414\":1}}],[\"还是一个很有用\",{\"1\":{\"1343\":1}}],[\"还是并发的时候产生的暂时性不一致\",{\"1\":{\"1236\":1}}],[\"还是半数机制\",{\"1\":{\"1205\":1}}],[\"还是声明式事务\",{\"1\":{\"1060\":1}}],[\"还是上面的\",{\"1\":{\"1016\":1}}],[\"还是\",{\"1\":{\"998\":3,\"1116\":1,\"1155\":1,\"1811\":1}}],[\"还是使用原来的那块内存区域\",{\"1\":{\"830\":1}}],[\"还是相当于闲置\",{\"1\":{\"795\":1}}],[\"还是分表\",{\"1\":{\"652\":1}}],[\"还是水平拆分\",{\"1\":{\"652\":1}}],[\"还是栈上替换编译请求\",{\"1\":{\"269\":1}}],[\"还是会发生频繁的重试\",{\"1\":{\"148\":1}}],[\"还是先统一用\",{\"1\":{\"82\":1}}],[\"还是存储在服务器中\",{\"1\":{\"21\":1}}],[\"副本以支持重传\",{\"1\":{\"1395\":1}}],[\"副本个数可以通过dfs\",{\"1\":{\"1219\":1}}],[\"副本leo\",{\"1\":{\"471\":1}}],[\"副本分配\",{\"0\":{\"472\":1}}],[\"副本分\",{\"1\":{\"469\":1}}],[\"副本数\",{\"1\":{\"446\":1,\"1219\":1}}],[\"副本\",{\"0\":{\"468\":1},\"1\":{\"34\":2,\"443\":1}}],[\"术语\",{\"0\":{\"34\":1},\"1\":{\"34\":1}}],[\"yyy\",{\"1\":{\"1687\":1}}],[\"yyyy\",{\"1\":{\"388\":2,\"643\":2,\"665\":4}}],[\"yarn\",{\"0\":{\"1222\":1},\"1\":{\"1214\":1,\"1222\":8}}],[\"yum\",{\"1\":{\"1694\":1}}],[\"yu\",{\"1\":{\"1083\":1}}],[\"yunlongn\",{\"1\":{\"565\":1}}],[\"youtube\",{\"0\":{\"1876\":1,\"1877\":1},\"1\":{\"1877\":9}}],[\"you\",{\"1\":{\"1664\":1}}],[\"young\",{\"1\":{\"1367\":1,\"1448\":7,\"1524\":9,\"1529\":1}}],[\"young区域\",{\"1\":{\"732\":1}}],[\"yougewe\",{\"1\":{\"1121\":1}}],[\"youzan\",{\"1\":{\"1083\":1}}],[\"your\",{\"1\":{\"1002\":1,\"1707\":1,\"1873\":1}}],[\"y的模\",{\"1\":{\"594\":1}}],[\"y\",{\"1\":{\"594\":2,\"1226\":1,\"1567\":1,\"1666\":2,\"1694\":4,\"1697\":1,\"1735\":1}}],[\"yml文件\",{\"1\":{\"1791\":1}}],[\"yml\",{\"1\":{\"506\":1}}],[\"yield\",{\"1\":{\"134\":1,\"330\":1,\"1095\":1,\"1512\":1}}],[\"yet\",{\"1\":{\"1214\":1}}],[\"yes\",{\"1\":{\"1155\":1}}],[\"year\",{\"1\":{\"113\":1,\"118\":1,\"129\":1,\"595\":2,\"665\":1,\"1567\":1}}],[\"yellow\",{\"1\":{\"33\":1}}],[\"yxl626571494\",{\"1\":{\"10\":1}}],[\"跟团的6天每天早晨都是这三样\",{\"1\":{\"1842\":1}}],[\"跟团六日游\",{\"0\":{\"1840\":1}}],[\"跟千里飞来的妈去天安门广场升旗\",{\"1\":{\"1781\":1}}],[\"跟打游戏过关一样\",{\"1\":{\"1779\":1}}],[\"跟公司的研发流程一比\",{\"1\":{\"1773\":1}}],[\"跟\",{\"1\":{\"1395\":1}}],[\"跟具体的后端业务应用和服务完全无关的策略网关\",{\"1\":{\"1300\":1}}],[\"跟在\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"跟上面\",{\"1\":{\"1044\":1}}],[\"跟新慢查询日志\",{\"1\":{\"927\":1}}],[\"跟业务相关\",{\"1\":{\"848\":1}}],[\"跟踪读写位置\",{\"1\":{\"1475\":1}}],[\"跟踪的远程分支叫做上游分支\",{\"1\":{\"1338\":1}}],[\"跟踪\",{\"1\":{\"1136\":1}}],[\"跟踪机制\",{\"1\":{\"412\":1}}],[\"跟踪各个region里面的垃圾堆积的价值大小\",{\"1\":{\"177\":1}}],[\"跟踪哪些节点是集群的一部分以及决定将哪些分片分配给哪些节点\",{\"1\":{\"33\":1}}],[\"跟之前看\",{\"1\":{\"10\":1}}],[\"主唱听着像北京口音\",{\"1\":{\"1841\":1}}],[\"主唱一边骂着狗比人生\",{\"1\":{\"1841\":1}}],[\"主打一个自拍杆海的氛围\",{\"1\":{\"1781\":1}}],[\"主张清除异己分子\",{\"1\":{\"1767\":1}}],[\"主张继承人应按照阿拉伯人的传统\",{\"1\":{\"1766\":1}}],[\"主张世袭\",{\"1\":{\"1765\":1}}],[\"主管与副主管等等\",{\"1\":{\"1333\":1}}],[\"主备切换回导致主库与备库数据不一致\",{\"1\":{\"1283\":1}}],[\"主角色\",{\"1\":{\"1216\":1}}],[\"主\",{\"1\":{\"941\":1}}],[\"主观下线\",{\"1\":{\"941\":1}}],[\"主服务器可以将\",{\"1\":{\"967\":1}}],[\"主服务器都会清空自己的repl\",{\"1\":{\"967\":1}}],[\"主服务器记录自己已经将哪些脚本传播给了所有从服务器\",{\"1\":{\"967\":1}}],[\"主服务器信息\",{\"1\":{\"940\":2}}],[\"主服务器角色及下属从服务器信息\",{\"1\":{\"940\":1}}],[\"主服务器进入命令传播阶段\",{\"1\":{\"936\":1}}],[\"主服务器进行命令传播时\",{\"1\":{\"935\":1}}],[\"主服务器恢复pong\",{\"1\":{\"936\":1}}],[\"主服务器返回\",{\"1\":{\"935\":1}}],[\"主服务器返回+continue表示将执行部分重同步\",{\"1\":{\"935\":1}}],[\"主服务器返回+fullresync\",{\"1\":{\"935\":1}}],[\"主服务器判断执行哪种同步操作\",{\"1\":{\"935\":1}}],[\"主服务器的复制积压缓冲区\",{\"1\":{\"935\":1}}],[\"主服务器将更改记录到二进制日志\",{\"1\":{\"1563\":1}}],[\"主服务器将直接传播给所有从服务器\",{\"1\":{\"967\":1}}],[\"主服务器将补发缺失数据\",{\"1\":{\"937\":1}}],[\"主服务器将自己的id发送给从服务器\",{\"1\":{\"935\":1}}],[\"主服务器将自己执行的写命令\",{\"1\":{\"934\":1}}],[\"主服务器将缓冲区里的所有写命令发送给从服务器\",{\"1\":{\"934\":1}}],[\"主服务器将生成的rdb文件发送给从服务器\",{\"1\":{\"934\":1}}],[\"主服务器在删除一个过期键之后\",{\"1\":{\"908\":1}}],[\"主线程执行\",{\"1\":{\"1576\":1}}],[\"主线程只负责接收新连接\",{\"1\":{\"1488\":1}}],[\"主线程\",{\"1\":{\"863\":1}}],[\"主线程同步阻塞\",{\"1\":{\"822\":1}}],[\"主线程并没有阻塞在\",{\"1\":{\"796\":1}}],[\"主线程逻辑\",{\"1\":{\"78\":1}}],[\"主数据库提供写操作\",{\"1\":{\"658\":1}}],[\"主库创建一个\",{\"1\":{\"1563\":1}}],[\"主库将数据库中数据的变化写入到\",{\"1\":{\"1563\":1}}],[\"主库\",{\"0\":{\"1154\":1}}],[\"主库ip地址\",{\"1\":{\"649\":1}}],[\"主库在事务提交时\",{\"1\":{\"648\":1}}],[\"主库出现问题\",{\"1\":{\"647\":1}}],[\"主从模式\",{\"1\":{\"1215\":1}}],[\"主从切换时是异步复制的\",{\"1\":{\"1162\":1,\"1187\":1}}],[\"主从服务器互为对方的客户端\",{\"1\":{\"936\":1}}],[\"主从服务器分别维护一个复制偏移量\",{\"1\":{\"935\":1}}],[\"主从服务器将再次回到一致状态\",{\"1\":{\"934\":1}}],[\"主从同步指多个从服务器实时将主服务器上的数据同步到从服务器上\",{\"1\":{\"1563\":1}}],[\"主从同步\",{\"0\":{\"1563\":1},\"1\":{\"927\":1}}],[\"主从\",{\"1\":{\"673\":1,\"1258\":1,\"1581\":1}}],[\"主从分离示意图\",{\"1\":{\"658\":1}}],[\"主从复制原理\",{\"1\":{\"1563\":1}}],[\"主从复制以及数据恢复\",{\"1\":{\"1556\":1}}],[\"主从复制偏移量\",{\"1\":{\"935\":1}}],[\"主从复制可分为初次复制\",{\"1\":{\"934\":1}}],[\"主从复制是指将主数据库\",{\"1\":{\"647\":1}}],[\"主从复制\",{\"0\":{\"646\":1,\"1588\":1},\"1\":{\"648\":1}}],[\"主从管理\",{\"1\":{\"432\":1}}],[\"主表字段名\",{\"1\":{\"599\":1}}],[\"主表名\",{\"1\":{\"599\":1}}],[\"主表列名\",{\"1\":{\"599\":2}}],[\"主表\",{\"1\":{\"599\":2}}],[\"主键生成策略\",{\"1\":{\"1608\":1}}],[\"主键id\",{\"1\":{\"1568\":1}}],[\"主键可能包含多个列\",{\"1\":{\"746\":1}}],[\"主键按序插入能够提高性能\",{\"1\":{\"708\":1}}],[\"主键值\",{\"1\":{\"699\":1}}],[\"主键索引就是聚集索引\",{\"1\":{\"699\":1}}],[\"主键索引\",{\"1\":{\"699\":1,\"1545\":1}}],[\"主键自然不可能为null\",{\"1\":{\"619\":1}}],[\"主键\",{\"1\":{\"619\":3,\"724\":1}}],[\"主键设计原则\",{\"1\":{\"615\":1}}],[\"主键优化\",{\"0\":{\"615\":1}}],[\"主键顺序插入\",{\"1\":{\"614\":1}}],[\"主键是一行数据的唯一标识\",{\"1\":{\"598\":1}}],[\"主键约束\",{\"1\":{\"598\":1}}],[\"主机和本地dns服务器之间递归查询\",{\"1\":{\"1424\":1}}],[\"主机负责写请求\",{\"1\":{\"658\":1}}],[\"主机宕机后\",{\"1\":{\"658\":1}}],[\"主机名可以使用\",{\"1\":{\"590\":1}}],[\"主机名的方式\",{\"1\":{\"590\":1}}],[\"主机名\",{\"1\":{\"590\":3,\"591\":3}}],[\"主机ip\",{\"1\":{\"569\":1}}],[\"主动向处于\",{\"1\":{\"1420\":1}}],[\"主动方\",{\"1\":{\"1415\":1}}],[\"主动唤醒\",{\"1\":{\"1074\":1}}],[\"主动从\",{\"1\":{\"480\":1}}],[\"主动发送消息\",{\"1\":{\"480\":1}}],[\"主题模式\",{\"1\":{\"1628\":1}}],[\"主题\",{\"1\":{\"443\":1,\"1626\":1}}],[\"主流程只需要100ms\",{\"1\":{\"398\":1}}],[\"主流jvm的线程实现都是基于os原生线程\",{\"1\":{\"277\":1}}],[\"主流商用jvm都同时包含解释器和编译器\",{\"1\":{\"266\":1}}],[\"主要\",{\"1\":{\"1817\":1}}],[\"主要原因是在基础的物理舱位上\",{\"1\":{\"1735\":1}}],[\"主要记住下面两棵回溯树\",{\"1\":{\"1669\":1}}],[\"主要学习异或运算的性质和哈希表的使用\",{\"1\":{\"1661\":1}}],[\"主要功能\",{\"1\":{\"1621\":1}}],[\"主要涉及一些复杂的逻辑\",{\"1\":{\"1594\":1}}],[\"主要还是页式内存管理\",{\"1\":{\"1444\":1}}],[\"主要使用\",{\"1\":{\"1365\":1}}],[\"主要工作在osi模型的应用层\",{\"1\":{\"1297\":1}}],[\"主要工作在osi模型的传输层\",{\"1\":{\"1296\":1}}],[\"主要工作落在创建sql查询语句上\",{\"1\":{\"621\":1}}],[\"主要的考虑点是要保证单个请求的失败不影响其它请求\",{\"1\":{\"1363\":1}}],[\"主要的就是在实现这两大功能\",{\"1\":{\"1224\":1}}],[\"主要的区别在于机票中的产品指\",{\"1\":{\"1728\":1}}],[\"主要的区别在于\",{\"1\":{\"822\":1}}],[\"主要配置文件包括\",{\"1\":{\"1217\":1}}],[\"主要有以下一些好处\",{\"1\":{\"1136\":1}}],[\"主要有以下几种\",{\"1\":{\"737\":1}}],[\"主要提供一些用于执行低级别\",{\"1\":{\"1134\":1}}],[\"主要提供了对所管理线程\",{\"1\":{\"1099\":1}}],[\"主要调用的是下面这个\",{\"1\":{\"1088\":1}}],[\"主要分布在沙特阿拉伯\",{\"1\":{\"1767\":1}}],[\"主要分布在西亚\",{\"1\":{\"1766\":1}}],[\"主要分布在伊朗\",{\"1\":{\"1765\":1}}],[\"主要分为两层\",{\"1\":{\"1540\":1}}],[\"主要分为线程标识\",{\"1\":{\"1087\":1}}],[\"主要分析ip层及tcp\",{\"1\":{\"1299\":1}}],[\"主要分字符串函数\",{\"1\":{\"592\":1}}],[\"主要包含两个部分\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"主要包含以下几种\",{\"1\":{\"697\":1}}],[\"主要包括三个核心模块\",{\"1\":{\"1214\":1}}],[\"主要包括\",{\"1\":{\"1074\":1}}],[\"主要负责接收\",{\"1\":{\"1628\":1}}],[\"主要负责存储单例\",{\"1\":{\"1006\":1}}],[\"主要负责注册\",{\"1\":{\"1006\":1}}],[\"主要负责业务逻辑处理\",{\"1\":{\"97\":1}}],[\"主要间接继承\",{\"1\":{\"1006\":1}}],[\"主要属性有\",{\"1\":{\"927\":1}}],[\"主要处理两类事件\",{\"1\":{\"918\":1}}],[\"主要完成一些类似于连接处理\",{\"1\":{\"570\":1}}],[\"主要目的是要提高消费者的吞吐量\",{\"1\":{\"500\":1}}],[\"主要应用于大数据实时处理领域\",{\"1\":{\"439\":1}}],[\"主要特性\",{\"0\":{\"412\":1,\"428\":1,\"431\":1,\"434\":1}}],[\"主要解决应用耦合\",{\"1\":{\"396\":1}}],[\"主要发生在方法重写时\",{\"1\":{\"245\":1}}],[\"主要发生在方法重载和重写时\",{\"1\":{\"245\":1}}],[\"主要存放\",{\"1\":{\"210\":1}}],[\"主要是加入location\",{\"1\":{\"1871\":1}}],[\"主要是利用\",{\"1\":{\"1792\":1}}],[\"主要是外部内存碎片\",{\"1\":{\"1443\":1}}],[\"主要是用于缓存静态的数据\",{\"1\":{\"1251\":1}}],[\"主要是网上的中文版翻译太烂了\",{\"1\":{\"1246\":1}}],[\"主要是将代码中的读写旧集群逻辑全部下线\",{\"1\":{\"1237\":1}}],[\"主要是将数据\",{\"1\":{\"570\":1}}],[\"主要是保证上线前存在的老缓存都自然失效\",{\"1\":{\"1235\":1}}],[\"主要是清理服务中的老旧无效代码\",{\"1\":{\"1235\":1}}],[\"主要是配置四类角色\",{\"1\":{\"1222\":1}}],[\"主要是在解析\",{\"1\":{\"1024\":1}}],[\"主要是执行\",{\"1\":{\"1022\":1}}],[\"主要是监测和调试目的\",{\"1\":{\"362\":1}}],[\"主要是局部优化\",{\"1\":{\"269\":1}}],[\"主要是javac\",{\"1\":{\"255\":1}}],[\"主要是pending\",{\"1\":{\"187\":1}}],[\"主要是确保\",{\"1\":{\"184\":1}}],[\"主要用户接受用户请求并调用\",{\"1\":{\"1594\":1}}],[\"主要用途\",{\"1\":{\"183\":1}}],[\"主要用于反向\",{\"1\":{\"1792\":1}}],[\"主要用于数据库相关操作\",{\"1\":{\"1594\":1}}],[\"主要用于跟踪对象被垃圾回收的活动\",{\"1\":{\"1522\":1}}],[\"主要用于结构化数据的解析\",{\"1\":{\"1126\":1}}],[\"主要用于地理空间数据类型\",{\"1\":{\"697\":1}}],[\"主要用于收集数据库服务器性能参数\",{\"1\":{\"673\":1}}],[\"主要用于回收事务已经提交了的undo\",{\"1\":{\"640\":1}}],[\"主要用于老年代\",{\"1\":{\"176\":1}}],[\"主要用于新生代\",{\"1\":{\"173\":1,\"174\":1,\"175\":1}}],[\"主要由两个强引用关系造成\",{\"1\":{\"154\":1}}],[\"主节点将自己的数据同步到从节点\",{\"1\":{\"1588\":1}}],[\"主节点所处状态\",{\"1\":{\"1201\":1}}],[\"主节点\",{\"1\":{\"33\":1}}],[\"主启动类添加\",{\"1\":{\"1269\":1}}],[\"主启动类上\",{\"1\":{\"1040\":1}}],[\"主启动类必须添加\",{\"1\":{\"418\":1}}],[\"主启动类开启\",{\"1\":{\"418\":1}}],[\"主启动类\",{\"1\":{\"24\":1}}],[\"密钥算法\",{\"1\":{\"1402\":1}}],[\"密钥协商算法\",{\"1\":{\"1402\":2}}],[\"密集型\",{\"1\":{\"1511\":2}}],[\"密集型运算\",{\"1\":{\"153\":1,\"1119\":2}}],[\"密集型操作\",{\"1\":{\"33\":1}}],[\"密码长度限制\",{\"1\":{\"1148\":1}}],[\"密码策略文件\",{\"1\":{\"1148\":1}}],[\"密码\",{\"1\":{\"27\":1,\"569\":1,\"590\":1,\"1563\":1,\"1643\":1,\"1692\":1}}],[\"密码加盐加密\",{\"1\":{\"14\":1}}],[\"搜索商品\",{\"1\":{\"1365\":1}}],[\"搜索逻辑\",{\"0\":{\"1362\":1}}],[\"搜索的时候按照用户输入的内容转换成拼音\",{\"1\":{\"1361\":1}}],[\"搜索树\",{\"0\":{\"1361\":1}}],[\"搜索右边界\",{\"1\":{\"998\":1}}],[\"搜索左边界\",{\"1\":{\"998\":1}}],[\"搜索引擎\",{\"1\":{\"808\":1}}],[\"搜索效率高\",{\"1\":{\"698\":1}}],[\"搜索\",{\"0\":{\"51\":1,\"997\":1},\"1\":{\"33\":1,\"53\":1}}],[\"搜集各种数据的\",{\"1\":{\"14\":1}}],[\"数码\",{\"0\":{\"1819\":1,\"1828\":1}}],[\"数\",{\"1\":{\"791\":1}}],[\"数量统计\",{\"1\":{\"1685\":1}}],[\"数量等\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"数量\",{\"1\":{\"1113\":2,\"1219\":1}}],[\"数量由innodb\",{\"1\":{\"731\":1}}],[\"数量值\",{\"1\":{\"240\":1}}],[\"数字国内4位\",{\"1\":{\"1730\":1}}],[\"数字证书\",{\"0\":{\"1403\":1},\"1\":{\"1401\":1,\"1403\":1}}],[\"数字个数限制\",{\"1\":{\"1148\":1}}],[\"数字\",{\"1\":{\"584\":1}}],[\"数字在任何字符集都占1字节\",{\"1\":{\"315\":1}}],[\"数字序号\",{\"1\":{\"122\":1}}],[\"数组判断当前元素是否已经加入排列\",{\"1\":{\"1677\":1}}],[\"数组判断元素是否已经加入当前的排列结果\",{\"1\":{\"1672\":1}}],[\"数组实现的有界队列\",{\"1\":{\"1499\":1}}],[\"数组超过64\",{\"1\":{\"1497\":1}}],[\"数组是\",{\"1\":{\"1494\":1}}],[\"数组+链表\",{\"1\":{\"1494\":1}}],[\"数组记录每位哲学家的\",{\"1\":{\"1467\":1}}],[\"数组相关\",{\"0\":{\"1141\":1}}],[\"数组中\",{\"1\":{\"1090\":1}}],[\"数组长度\",{\"1\":{\"906\":1}}],[\"数组的长度由其余位记录\",{\"1\":{\"892\":1}}],[\"数组升级\",{\"0\":{\"889\":1}}],[\"数组索引越界等\",{\"1\":{\"345\":1}}],[\"数组才是目的\",{\"1\":{\"312\":1}}],[\"数组操作的api\",{\"1\":{\"312\":1}}],[\"数组\",{\"0\":{\"984\":1},\"1\":{\"305\":1,\"359\":1,\"833\":1,\"846\":1,\"882\":1,\"1067\":1,\"1493\":1,\"1536\":1}}],[\"数值存储\",{\"0\":{\"1438\":1}}],[\"数值函数\",{\"0\":{\"594\":1},\"1\":{\"129\":1,\"592\":1}}],[\"数值\",{\"1\":{\"36\":1,\"129\":1}}],[\"数值然后直接去加锁\",{\"1\":{\"9\":1}}],[\"数据放入buffer\",{\"1\":{\"1858\":1}}],[\"数据更新频率快\",{\"1\":{\"1752\":1}}],[\"数据更新时\",{\"1\":{\"1435\":1}}],[\"数据量大\",{\"1\":{\"1752\":1}}],[\"数据量是非常大的\",{\"1\":{\"1215\":1}}],[\"数据卷细节\",{\"1\":{\"1634\":1}}],[\"数据已经安全的保存在本地数据库中\",{\"1\":{\"1633\":1}}],[\"数据已经安全地保存在本地数据库中\",{\"1\":{\"1310\":1}}],[\"数据该存放在哪个表的问题\",{\"1\":{\"1564\":1}}],[\"数据处理量\",{\"1\":{\"1543\":1}}],[\"数据处理的工作\",{\"1\":{\"33\":1}}],[\"数据拷贝\",{\"1\":{\"1488\":1}}],[\"数据拷贝了\",{\"1\":{\"802\":1}}],[\"数据准备\",{\"1\":{\"1488\":1}}],[\"数据搬运的工作全部交给\",{\"1\":{\"1486\":1}}],[\"数据寄存器\",{\"1\":{\"1481\":1}}],[\"数据一致\",{\"1\":{\"1479\":1}}],[\"数据一致性问题\",{\"1\":{\"1479\":1}}],[\"数据一致性\",{\"1\":{\"1215\":1}}],[\"数据从磁盘\",{\"1\":{\"1486\":1}}],[\"数据从内核态拷贝到用户态\",{\"1\":{\"1478\":1}}],[\"数据从内核缓存中拷贝给用户程序\",{\"1\":{\"1478\":1}}],[\"数据从内核缓冲区传输到socket\",{\"1\":{\"801\":1}}],[\"数据从用户程序拷贝给内核缓存\",{\"1\":{\"1478\":1}}],[\"数据离散不连续\",{\"1\":{\"1476\":1}}],[\"数据段\",{\"1\":{\"1444\":1,\"1451\":1}}],[\"数据分区\",{\"1\":{\"1566\":1}}],[\"数据分析的场景\",{\"1\":{\"1543\":1}}],[\"数据分段\",{\"1\":{\"1443\":1}}],[\"数据分布的影响\",{\"1\":{\"703\":1}}],[\"数据不一致\",{\"1\":{\"1435\":1}}],[\"数据和内存中数据不一致\",{\"1\":{\"1435\":1}}],[\"数据和索引是分离的\",{\"1\":{\"1541\":1}}],[\"数据和索引\",{\"1\":{\"678\":1}}],[\"数据总线\",{\"1\":{\"1432\":1}}],[\"数据长度\",{\"1\":{\"1418\":2}}],[\"数据格式\",{\"1\":{\"1396\":1}}],[\"数据链路层可以得到\",{\"1\":{\"1396\":1}}],[\"数据链路层\",{\"1\":{\"1393\":1}}],[\"数据作为值的\",{\"1\":{\"1368\":1}}],[\"数据对象\",{\"1\":{\"1350\":1}}],[\"数据恢复\",{\"0\":{\"1346\":1}}],[\"数据缓存\",{\"1\":{\"1303\":1}}],[\"数据表需要严谨的设计\",{\"1\":{\"1543\":1}}],[\"数据表\",{\"1\":{\"1226\":1}}],[\"数据默认存储在\",{\"1\":{\"1225\":1}}],[\"数据描述等信息\",{\"1\":{\"1224\":1}}],[\"数据读取\",{\"1\":{\"1220\":1}}],[\"数据读写\",{\"0\":{\"1205\":1}}],[\"数据块区\",{\"1\":{\"1474\":1}}],[\"数据块\",{\"1\":{\"1435\":1}}],[\"数据块副本的复制工作\",{\"1\":{\"1220\":1}}],[\"数据块抽取\",{\"1\":{\"127\":1}}],[\"数据传输\",{\"1\":{\"1213\":1}}],[\"数据传递语义\",{\"1\":{\"461\":1}}],[\"数据计算\",{\"1\":{\"1213\":1}}],[\"数据存储更紧凑\",{\"1\":{\"1576\":1}}],[\"数据存储在固定大小的块中\",{\"1\":{\"1480\":1}}],[\"数据存储\",{\"1\":{\"1213\":1}}],[\"数据存储层\",{\"1\":{\"570\":1}}],[\"数据挖掘工具等\",{\"1\":{\"1211\":1}}],[\"数据同步是异步进行的\",{\"1\":{\"1207\":1}}],[\"数据在恢复时先恢复快照文件中的数据到内存中\",{\"1\":{\"1170\":1}}],[\"数据快照\",{\"1\":{\"1170\":1}}],[\"数据也是保存在\",{\"1\":{\"1167\":1}}],[\"数据也是一种供许多用户共享的资源\",{\"1\":{\"549\":1}}],[\"数据包丢失\",{\"1\":{\"1411\":1}}],[\"数据包对应的原始\",{\"1\":{\"1395\":1}}],[\"数据包对象\",{\"1\":{\"342\":1}}],[\"数据包经过若干个交换机\",{\"1\":{\"1394\":1}}],[\"数据包的大小不太好确定\",{\"1\":{\"842\":1}}],[\"数据共拷贝了\",{\"1\":{\"799\":1}}],[\"数据共享简单\",{\"1\":{\"134\":1}}],[\"数据共享复杂但是同步简单\",{\"1\":{\"134\":1}}],[\"数据写完之后取消关注或取消注册\",{\"1\":{\"789\":1}}],[\"数据写入\",{\"1\":{\"760\":1,\"1220\":1}}],[\"数据结构的应用\",{\"1\":{\"1658\":1}}],[\"数据结构\",{\"0\":{\"768\":1,\"876\":1,\"983\":1,\"1384\":1,\"1570\":1},\"1\":{\"945\":1,\"1224\":1,\"1368\":1}}],[\"数据越安全\",{\"1\":{\"737\":1}}],[\"数据会存储在内存中\",{\"1\":{\"721\":1}}],[\"数据即索引\",{\"1\":{\"699\":1,\"1541\":1}}],[\"数据字典\",{\"1\":{\"695\":1}}],[\"数据页页目录\",{\"1\":{\"690\":1}}],[\"数据页单链表\",{\"1\":{\"689\":1}}],[\"数据页专有的一些信息\",{\"1\":{\"688\":1}}],[\"数据页结构\",{\"1\":{\"688\":1}}],[\"数据页\",{\"0\":{\"688\":1},\"1\":{\"1259\":1}}],[\"数据目录下就会新建一个同名的子目录\",{\"1\":{\"673\":1}}],[\"数据目录\",{\"0\":{\"673\":1}}],[\"数据变更\",{\"1\":{\"643\":2}}],[\"数据操作除了插入和查询之外\",{\"1\":{\"682\":1}}],[\"数据操作语言\",{\"0\":{\"577\":1},\"1\":{\"572\":1}}],[\"数据操纵语言\",{\"1\":{\"643\":1}}],[\"数据没有被修改过\",{\"1\":{\"638\":1}}],[\"数据校验等操作\",{\"1\":{\"636\":1}}],[\"数据独立\",{\"1\":{\"625\":1}}],[\"数据来自定义视图的查询中使用的表\",{\"1\":{\"621\":1}}],[\"数据控制语言\",{\"0\":{\"589\":1},\"1\":{\"572\":1}}],[\"数据查询语言\",{\"0\":{\"581\":1},\"1\":{\"572\":1}}],[\"数据定义语言ddl\",{\"1\":{\"734\":1}}],[\"数据定义语言\",{\"0\":{\"573\":1},\"1\":{\"572\":1,\"643\":1}}],[\"数据模型\",{\"0\":{\"1166\":1},\"1\":{\"569\":1,\"1167\":1}}],[\"数据基于索引组织\",{\"1\":{\"554\":1}}],[\"数据备份\",{\"1\":{\"550\":1}}],[\"数据源+数据库连接+状态信息\",{\"1\":{\"1038\":1}}],[\"数据源\",{\"1\":{\"545\":1,\"1049\":1}}],[\"数据源接口来配置连接对象的资源\",{\"1\":{\"526\":1}}],[\"数据积压\",{\"0\":{\"500\":1}}],[\"数据文件大小通常比\",{\"1\":{\"1542\":1}}],[\"数据文件及持久化目录\",{\"1\":{\"1164\":1}}],[\"数据文件\",{\"1\":{\"476\":1,\"675\":1}}],[\"数据有序\",{\"0\":{\"462\":1},\"1\":{\"462\":1}}],[\"数据重复\",{\"0\":{\"461\":1},\"1\":{\"461\":1}}],[\"数据完全可靠条件\",{\"1\":{\"460\":1}}],[\"数据可靠\",{\"0\":{\"460\":1}}],[\"数据的完整副本\",{\"1\":{\"1588\":1}}],[\"数据的存储和读取\",{\"1\":{\"1540\":1}}],[\"数据的\",{\"1\":{\"447\":1}}],[\"数据集成和关键任务应用\",{\"1\":{\"439\":1}}],[\"数据迁移\",{\"1\":{\"431\":1}}],[\"数据中包含了很多的图片\",{\"1\":{\"398\":1}}],[\"数据很少\",{\"1\":{\"390\":1}}],[\"数据值不能改变\",{\"1\":{\"291\":1}}],[\"数据赋值给类型范围小的变量\",{\"1\":{\"287\":1}}],[\"数据及控制流\",{\"1\":{\"262\":1}}],[\"数据是分开的\",{\"1\":{\"134\":1}}],[\"数据\",{\"1\":{\"127\":1,\"443\":1,\"445\":1,\"570\":1,\"697\":1,\"1167\":1,\"1489\":1,\"1604\":1}}],[\"数据导出\",{\"0\":{\"121\":1}}],[\"数据加载\",{\"0\":{\"120\":1},\"1\":{\"119\":1}}],[\"数据类型和数据访问模式等考虑\",{\"1\":{\"1543\":1}}],[\"数据类型的零值\",{\"1\":{\"251\":1}}],[\"数据类型\",{\"0\":{\"112\":1,\"287\":1,\"660\":1,\"1128\":1}}],[\"数据库号段模式\",{\"1\":{\"1622\":1}}],[\"数据库主键自增\",{\"1\":{\"1622\":1}}],[\"数据库将结果集返回给客户端应用程序\",{\"1\":{\"1566\":1}}],[\"数据库将食物中的多个操作当作一个整体来执行\",{\"1\":{\"961\":1}}],[\"数据库引擎开始执行编译后的机器码\",{\"1\":{\"1566\":1}}],[\"数据库会对\",{\"1\":{\"1566\":1}}],[\"数据库会首先对\",{\"1\":{\"1566\":1}}],[\"数据库按页面从磁盘读取数据加载到\",{\"1\":{\"1555\":1}}],[\"数据库不需要事先设计好\",{\"1\":{\"1543\":1}}],[\"数据库设计\",{\"0\":{\"1356\":1}}],[\"数据库中保存的信息都是以文件内容的哈希值作为索引\",{\"1\":{\"1309\":1}}],[\"数据库中支持的不太理想\",{\"1\":{\"1283\":1}}],[\"数据库中的表\",{\"1\":{\"675\":1}}],[\"数据库中的索引是在存储引擎层实现的\",{\"1\":{\"570\":1}}],[\"数据库支持的\",{\"1\":{\"1283\":1}}],[\"数据库事务的抽象对象\",{\"1\":{\"1044\":1}}],[\"数据库还能够通过查询回滚日志来恢复之前未完成的事务\",{\"1\":{\"1034\":1}}],[\"数据库允许多个并发事务同时对数据进行读写\",{\"1\":{\"1032\":1}}],[\"数据库的完整性没有被破坏\",{\"1\":{\"1032\":1,\"1274\":1,\"1550\":1}}],[\"数据库仍应保持一致\",{\"1\":{\"961\":1}}],[\"数据库结构数组\",{\"1\":{\"929\":1}}],[\"数据库占用情况等\",{\"1\":{\"920\":1}}],[\"数据库编号\",{\"1\":{\"913\":1}}],[\"数据库通知\",{\"0\":{\"909\":1}}],[\"数据库实现\",{\"1\":{\"906\":1}}],[\"数据库数量\",{\"1\":{\"906\":1}}],[\"数据库系统引入了事务隔离级别\",{\"1\":{\"737\":1}}],[\"数据库系统提供的隔离机制\",{\"1\":{\"735\":1}}],[\"数据库级别\",{\"1\":{\"674\":1}}],[\"数据库分库分表中间件\",{\"1\":{\"653\":1}}],[\"数据库缓存不足\",{\"1\":{\"651\":1}}],[\"数据库都会记录\",{\"1\":{\"643\":1}}],[\"数据库可以授权\",{\"1\":{\"625\":1}}],[\"数据库名和表名可以用\",{\"1\":{\"591\":1}}],[\"数据库名\",{\"1\":{\"574\":3,\"591\":2}}],[\"数据库连接实现\",{\"1\":{\"545\":1}}],[\"数据库\",{\"0\":{\"905\":1},\"1\":{\"435\":1,\"673\":1,\"675\":1,\"808\":1,\"1226\":1,\"1262\":1,\"1319\":1},\"2\":{\"547\":1,\"566\":1,\"668\":1,\"756\":1,\"1157\":1}}],[\"数据库等\",{\"1\":{\"355\":1}}],[\"数据库等等\",{\"1\":{\"249\":1}}],[\"数据库修改location\",{\"0\":{\"109\":1}}],[\"数据库注释\",{\"1\":{\"107\":1}}],[\"数据库操作时\",{\"1\":{\"1119\":1}}],[\"数据库操作\",{\"0\":{\"106\":1,\"574\":1}}],[\"数据库对比概念\",{\"1\":{\"34\":1}}],[\"数据返回出去\",{\"1\":{\"101\":1}}],[\"数据流\",{\"1\":{\"82\":1}}],[\"数据实时变更的存活docid集合\",{\"1\":{\"37\":1}}],[\"数据平台服务绑定等\",{\"1\":{\"33\":1}}],[\"数据节点\",{\"1\":{\"33\":1}}],[\"共35类规则限制\",{\"1\":{\"1752\":1}}],[\"共四个链表\",{\"1\":{\"1446\":1}}],[\"共有ip\",{\"1\":{\"1428\":1}}],[\"共有2\",{\"1\":{\"693\":1}}],[\"共识算法的作用是让分布式系统中的多个节点之间对某个提案\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"共识算法\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"共定义了\",{\"1\":{\"1089\":1}}],[\"共同点\",{\"1\":{\"1512\":1}}],[\"共同使用\",{\"1\":{\"788\":1}}],[\"共同对外提供搜索和索引服务\",{\"1\":{\"33\":1}}],[\"共1024个\",{\"1\":{\"751\":1}}],[\"共128个\",{\"1\":{\"315\":1}}],[\"共搜索到\",{\"1\":{\"51\":1}}],[\"共享操作系统内核\",{\"1\":{\"1634\":1}}],[\"共享资源访问前需要加锁\",{\"1\":{\"1468\":1}}],[\"共享物理资源\",{\"1\":{\"1446\":1}}],[\"共享缓存\",{\"1\":{\"1368\":1}}],[\"共享可读\",{\"1\":{\"1183\":1}}],[\"共享内存解决了\",{\"1\":{\"1459\":1}}],[\"共享内存等\",{\"1\":{\"1444\":1}}],[\"共享内存\",{\"0\":{\"1459\":1},\"1\":{\"1136\":1}}],[\"共享意向锁和表级共享锁兼容\",{\"1\":{\"560\":1}}],[\"共享临键锁\",{\"1\":{\"558\":1}}],[\"共享锁\",{\"1\":{\"553\":1}}],[\"共享锁允许多个线程持有\",{\"1\":{\"549\":1}}],[\"共享\",{\"1\":{\"6\":1,\"291\":1,\"512\":1,\"851\":1,\"1435\":1,\"1516\":1}}],[\"共享式释放同步状态\",{\"1\":{\"5\":1}}],[\"共享式获取同步状态\",{\"1\":{\"5\":1}}],[\"共享节点\",{\"1\":{\"3\":1}}],[\"集中存放镜像文件的地方\",{\"1\":{\"1634\":1}}],[\"集中写\",{\"1\":{\"771\":1}}],[\"集成度较高\",{\"1\":{\"1610\":1}}],[\"集成管理者\",{\"1\":{\"1333\":1}}],[\"集成了多种监控和调试工具\",{\"1\":{\"237\":1}}],[\"集成了官方的es客户端\",{\"1\":{\"38\":1}}],[\"集合传递给应用程序\",{\"1\":{\"1487\":1}}],[\"集合的地方都需要锁上\",{\"1\":{\"1116\":1}}],[\"集合并运行任务\",{\"1\":{\"1114\":1}}],[\"集合运算和表达的高阶抽象\",{\"1\":{\"1065\":1}}],[\"集合等待删除\",{\"1\":{\"786\":1}}],[\"集合返回\",{\"1\":{\"544\":1}}],[\"集合里新增待处理的元素\",{\"1\":{\"786\":1}}],[\"集合里\",{\"1\":{\"541\":1}}],[\"集合里面的所有节点收齐数据后应答\",{\"1\":{\"460\":1}}],[\"集合对象保存的元素数量不超过512个\",{\"1\":{\"899\":1}}],[\"集合对象保存的所有元素都是整数值\",{\"1\":{\"899\":1}}],[\"集合对象的编码有两种\",{\"1\":{\"899\":1}}],[\"集合对象\",{\"0\":{\"899\":1},\"1\":{\"538\":1,\"895\":1,\"913\":1}}],[\"集合存储内存图\",{\"1\":{\"359\":1}}],[\"集合体系\",{\"1\":{\"304\":1}}],[\"集合中移除当前\",{\"1\":{\"1115\":1}}],[\"集合中真正删除\",{\"1\":{\"788\":1}}],[\"集合中存储的元素并不是对象本身\",{\"1\":{\"359\":1}}],[\"集合中\",{\"1\":{\"139\":1,\"541\":1}}],[\"集合函数\",{\"1\":{\"129\":1}}],[\"集合工具类\",{\"1\":{\"304\":1}}],[\"集合工具\",{\"0\":{\"71\":1}}],[\"集合实现\",{\"1\":{\"67\":1}}],[\"集合\",{\"0\":{\"63\":1,\"303\":1,\"1492\":1},\"1\":{\"129\":1,\"224\":1,\"312\":1,\"460\":1,\"540\":1,\"1012\":1,\"1067\":1,\"1114\":2,\"1570\":1}}],[\"集合了多种轻量级的\",{\"1\":{\"31\":1}}],[\"集群上减轻单体服务的压力\",{\"1\":{\"1617\":1}}],[\"集群模式下不同的\",{\"1\":{\"1590\":1}}],[\"集群模式\",{\"0\":{\"1590\":1}}],[\"集群包括若干服务器\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"集群本身接口存在失败的情况\",{\"1\":{\"1236\":1}}],[\"集群迁移到我们业务自己的集群\",{\"1\":{\"1233\":1}}],[\"集群进而影响我们自己业务\",{\"1\":{\"1233\":1}}],[\"集群进入上线状态\",{\"1\":{\"947\":1}}],[\"集群节点主要分为三个角色\",{\"1\":{\"1216\":1}}],[\"集群节点的特殊之处\",{\"1\":{\"945\":1}}],[\"集群是追求的\",{\"1\":{\"1207\":1}}],[\"集群都能容忍\",{\"1\":{\"1202\":1}}],[\"集群的节点个数为奇数个\",{\"1\":{\"1202\":1}}],[\"集群的数据是全局一致的\",{\"1\":{\"1200\":1}}],[\"集群的整个数据库被分为16384个槽\",{\"1\":{\"946\":1}}],[\"集群搭建\",{\"0\":{\"1195\":1}}],[\"集群角色\",{\"0\":{\"1194\":1}}],[\"集群性能非常高\",{\"1\":{\"1187\":1}}],[\"集群性能上升\",{\"1\":{\"448\":1}}],[\"集群在\",{\"1\":{\"1162\":1}}],[\"集群广播告知某个主节点进入下线状态\",{\"1\":{\"949\":1}}],[\"集群配置纪元\",{\"1\":{\"948\":1}}],[\"集群中只有一个\",{\"1\":{\"1194\":1}}],[\"集群中各个节点通过发送和接受消息进行通信\",{\"1\":{\"949\":1}}],[\"集群中每个节点定期向其它节点发送ping\",{\"1\":{\"948\":1}}],[\"集群中执行命令\",{\"0\":{\"947\":1}}],[\"集群中的每个节点可以处理0~16384个槽\",{\"1\":{\"946\":1}}],[\"集群中的第一个注册的\",{\"1\":{\"470\":1}}],[\"集群中的某个\",{\"1\":{\"466\":1}}],[\"集群处于上线状态\",{\"1\":{\"946\":1}}],[\"集群扩展时不再受到zookeeper读写能力限制\",{\"1\":{\"448\":1}}],[\"集群管理\",{\"1\":{\"448\":2,\"1162\":1}}],[\"集群就没有办法再获取停止进程的信息\",{\"1\":{\"446\":1}}],[\"集群一旦先停止\",{\"1\":{\"446\":1}}],[\"集群一般是由多个节点共同组成的分布式集群\",{\"1\":{\"33\":1}}],[\"集群相关信息\",{\"1\":{\"446\":1}}],[\"集群当中记录着\",{\"1\":{\"446\":1}}],[\"集群时\",{\"1\":{\"446\":1}}],[\"集群由多个\",{\"1\":{\"443\":1}}],[\"集群至少有一个索引的primary数据有丢失\",{\"1\":{\"33\":1}}],[\"集群至少有一个索引的数据副本丢失\",{\"1\":{\"33\":1}}],[\"集群组\",{\"1\":{\"33\":1}}],[\"集群\",{\"0\":{\"33\":1,\"944\":1,\"1193\":1,\"1199\":1},\"1\":{\"435\":1,\"446\":1,\"448\":1,\"1233\":1,\"1235\":1,\"1236\":1,\"1258\":2,\"1581\":2,\"1629\":1,\"1638\":1}}],[\"概念模型\",{\"1\":{\"1626\":1}}],[\"概念\",{\"0\":{\"32\":1,\"627\":1,\"647\":1,\"885\":1,\"1161\":1,\"1617\":1,\"1628\":1}}],[\"概述\",{\"0\":{\"2\":1,\"31\":1,\"362\":1,\"569\":1,\"598\":1,\"654\":1,\"806\":1,\"1104\":1,\"1210\":1}}],[\"检出项目\",{\"1\":{\"1791\":1}}],[\"检出远程\",{\"1\":{\"1338\":1}}],[\"检出而移动\",{\"1\":{\"1332\":1}}],[\"检出\",{\"1\":{\"1329\":1}}],[\"检测是否在线\",{\"1\":{\"949\":1}}],[\"检测下线状态\",{\"0\":{\"941\":1}}],[\"检测命令丢失\",{\"1\":{\"937\":1}}],[\"检测rows\",{\"1\":{\"729\":2}}],[\"检测到关联对象的可达性发生特定变化后\",{\"1\":{\"186\":1}}],[\"检查异常会在方法调用链上显式传递\",{\"1\":{\"1533\":1}}],[\"检查异常在编译前需要手动处理\",{\"1\":{\"1533\":1}}],[\"检查是否有相同的数据在自己的\",{\"1\":{\"1435\":1}}],[\"检查是否有其他线程修改了数据\",{\"1\":{\"158\":1}}],[\"检查被监视的键是否至少有一个已经被修改过\",{\"1\":{\"960\":1}}],[\"检查clusterstate\",{\"1\":{\"947\":1}}],[\"检查cmd非null\",{\"1\":{\"927\":1}}],[\"检查某个槽是否被指派\",{\"1\":{\"946\":1}}],[\"检查回复中\",{\"1\":{\"942\":2}}],[\"检查结果\",{\"1\":{\"941\":1}}],[\"检查持久化操作的运行状态\",{\"1\":{\"928\":1}}],[\"检查命令参数\",{\"1\":{\"927\":1}}],[\"检查\",{\"1\":{\"789\":1,\"966\":1,\"975\":1,\"1116\":1}}],[\"检查选项\",{\"0\":{\"623\":1}}],[\"检查约束\",{\"1\":{\"598\":1}}],[\"检查诸如程序局部变量使用前是否赋值\",{\"1\":{\"262\":1}}],[\"检查包括变量使用前是否已被声明\",{\"1\":{\"262\":1}}],[\"检查虚引用是否已经进入引用队列\",{\"1\":{\"183\":1}}],[\"检查手机号\",{\"1\":{\"14\":1}}],[\"检索商品详细信息\",{\"1\":{\"1369\":1}}],[\"检索标签\",{\"1\":{\"1329\":1}}],[\"检索速度慢的问题\",{\"1\":{\"698\":1}}],[\"检索速度慢\",{\"1\":{\"698\":1}}],[\"检索\",{\"1\":{\"31\":2}}],[\"包机是指把整个飞机的所有座位包下来\",{\"1\":{\"1737\":1}}],[\"包级别的耦合\",{\"1\":{\"1632\":1}}],[\"包扫描\",{\"1\":{\"1598\":1}}],[\"包被废弃的原因和改善网络设置等\",{\"1\":{\"1427\":1}}],[\"包是否成功送达目标地址\",{\"1\":{\"1427\":1}}],[\"包长度\",{\"1\":{\"1396\":1}}],[\"包下\",{\"1\":{\"1245\":1}}],[\"包下只提供了这三个方法\",{\"1\":{\"1137\":1}}],[\"包的\",{\"1\":{\"1135\":1}}],[\"包里的\",{\"1\":{\"1135\":1,\"1137\":1}}],[\"包里的很多同步器都是基于\",{\"1\":{\"9\":1}}],[\"包仅用于\",{\"1\":{\"1135\":1}}],[\"包名等\",{\"1\":{\"528\":1}}],[\"包名\",{\"1\":{\"389\":1,\"528\":1}}],[\"包含软件运行所需的所有内容\",{\"1\":{\"1634\":1}}],[\"包含多个模块\",{\"1\":{\"1441\":1}}],[\"包含所有用于重建\",{\"1\":{\"1347\":1}}],[\"包含所有数据库数据\",{\"1\":{\"913\":1}}],[\"包含标签信息等冗余信息\",{\"1\":{\"1329\":1}}],[\"包含接口定义\",{\"1\":{\"1125\":1}}],[\"包含对redis进行操作的函数\",{\"1\":{\"963\":1}}],[\"包含对应段的信息\",{\"1\":{\"749\":1}}],[\"包含字符串对象\",{\"1\":{\"895\":1}}],[\"包含字段名称\",{\"1\":{\"34\":1}}],[\"包含处于prepare阶段的事务产生的undo日志\",{\"1\":{\"749\":1}}],[\"包含被驱动表中的列不为null的条件称为空值拒绝\",{\"1\":{\"725\":1}}],[\"包含了哪些配置文件\",{\"1\":{\"1366\":1}}],[\"包含了四个部分\",{\"1\":{\"1168\":1}}],[\"包含了一系列方便\",{\"1\":{\"673\":1}}],[\"包含了所有执行语句\",{\"1\":{\"508\":1}}],[\"包含数据库\",{\"1\":{\"673\":1}}],[\"包含十几个底层函数\",{\"1\":{\"672\":1}}],[\"包含读取数据的语句\",{\"1\":{\"635\":1}}],[\"包含本地\",{\"1\":{\"570\":1}}],[\"包含一批交换机\",{\"1\":{\"413\":1}}],[\"包含一些要写入或者要读出的数据\",{\"1\":{\"324\":1}}],[\"包含日期和时间\",{\"1\":{\"353\":1}}],[\"包含汉字等字符\",{\"1\":{\"315\":1}}],[\"包含\",{\"1\":{\"247\":1}}],[\"包\",{\"1\":{\"83\":1,\"1414\":1,\"1632\":1}}],[\"包装了\",{\"1\":{\"823\":1}}],[\"包装原始类\",{\"1\":{\"358\":1}}],[\"包装器\",{\"1\":{\"71\":1}}],[\"包装映射结果\",{\"1\":{\"58\":1}}],[\"包括但不限于vip\",{\"1\":{\"1803\":1}}],[\"包括近几年崛起的芒果tv\",{\"1\":{\"1803\":1}}],[\"包括舱位等级\",{\"1\":{\"1739\":1}}],[\"包括旅客的行程日期\",{\"1\":{\"1738\":1}}],[\"包括平台上的商家也不掌握\",{\"1\":{\"1734\":1}}],[\"包括其它竞争的航司也可以看到这部分运价\",{\"1\":{\"1732\":1}}],[\"包括国内的中航信\",{\"1\":{\"1732\":1}}],[\"包括基础票价\",{\"1\":{\"1732\":1}}],[\"包括航班实际起飞\",{\"1\":{\"1731\":1}}],[\"包括酒店\",{\"1\":{\"1724\":1}}],[\"包括值机手续\",{\"1\":{\"1723\":1}}],[\"包括junit\",{\"1\":{\"1717\":1}}],[\"包括进程id\",{\"1\":{\"1631\":1}}],[\"包括初始化\",{\"1\":{\"1599\":1}}],[\"包括表选择\",{\"1\":{\"1566\":1}}],[\"包括连接管理\",{\"1\":{\"1540\":1}}],[\"包括文件格式的验证\",{\"1\":{\"1527\":1}}],[\"包括new\",{\"1\":{\"1527\":1}}],[\"包括新生代和老年代\",{\"1\":{\"1524\":1}}],[\"包括新建对象\",{\"1\":{\"1077\":1}}],[\"包括硬件设备\",{\"1\":{\"1484\":1}}],[\"包括块设备的\",{\"1\":{\"1484\":1}}],[\"包括空闲区的第一个块号和空闲块个数\",{\"1\":{\"1477\":1}}],[\"包括普通文件\",{\"1\":{\"1473\":1}}],[\"包括局部变量和函数调用的上下文等\",{\"1\":{\"1444\":1}}],[\"包括动态库\",{\"1\":{\"1444\":1}}],[\"包括动态分配的内存\",{\"1\":{\"1444\":1}}],[\"包括未初始化的静态变量和全局变量\",{\"1\":{\"1444\":1}}],[\"包括未跟踪的\",{\"1\":{\"1343\":1}}],[\"包括已初始化的静态常量和全局变量\",{\"1\":{\"1444\":1}}],[\"包括二进制可执行代码\",{\"1\":{\"1444\":1}}],[\"包括各种处理器\",{\"1\":{\"1379\":1}}],[\"包括各自的使用场景\",{\"1\":{\"1234\":1}}],[\"包括heads保存分支引用\",{\"1\":{\"1351\":1}}],[\"包括分支\",{\"1\":{\"1338\":1}}],[\"包括分布式存储系统\",{\"1\":{\"1211\":1}}],[\"包括轻量\",{\"1\":{\"1329\":1}}],[\"包括工作区和暂存区\",{\"1\":{\"1318\":1}}],[\"包括api的创建\",{\"1\":{\"1303\":1}}],[\"包括aof载入和lua脚本两种场景\",{\"1\":{\"923\":1}}],[\"包括语法解析器\",{\"1\":{\"1224\":1}}],[\"包括三大部分\",{\"1\":{\"1511\":1}}],[\"包括三个数据版本\",{\"1\":{\"1168\":1}}],[\"包括三部分\",{\"1\":{\"42\":1}}],[\"包括统一命名服务\",{\"1\":{\"1162\":1}}],[\"包括给定地址值操作\",{\"1\":{\"1136\":1}}],[\"包括socket\",{\"1\":{\"1126\":1}}],[\"包括rpc请求转发\",{\"1\":{\"1126\":1}}],[\"包括服务器\",{\"1\":{\"1104\":1}}],[\"包括子线程组\",{\"1\":{\"1095\":2}}],[\"包括传播行为\",{\"1\":{\"1043\":1}}],[\"包括频道\",{\"1\":{\"949\":1}}],[\"包括消息长度\",{\"1\":{\"949\":1}}],[\"包括套接字描述符\",{\"1\":{\"945\":1}}],[\"包括currentepoch\",{\"1\":{\"945\":1}}],[\"包括ctime\",{\"1\":{\"945\":1}}],[\"包括cpu使用率\",{\"1\":{\"237\":1,\"238\":1}}],[\"包括本sentinel信息\",{\"1\":{\"940\":1}}],[\"包括很多重要的逻辑操作\",{\"1\":{\"868\":1}}],[\"包括打开的文件\",{\"1\":{\"857\":1}}],[\"包括读取\",{\"1\":{\"824\":1}}],[\"包括位置\",{\"1\":{\"747\":1}}],[\"包括level\",{\"1\":{\"729\":1}}],[\"包括lock\",{\"1\":{\"564\":1}}],[\"包括两部分\",{\"1\":{\"729\":1,\"1443\":1}}],[\"包括两种数据类型\",{\"1\":{\"240\":1}}],[\"包括最小\",{\"1\":{\"690\":1}}],[\"包括时区\",{\"1\":{\"673\":1}}],[\"包括当前加锁的客户端\",{\"1\":{\"552\":1}}],[\"包括同步或异步的消息分发\",{\"1\":{\"434\":1}}],[\"包括用户组\",{\"1\":{\"427\":1}}],[\"包括日志接口\",{\"1\":{\"376\":1}}],[\"包括音视频\",{\"1\":{\"318\":1}}],[\"包括类名\",{\"1\":{\"359\":1}}],[\"包括类\",{\"1\":{\"252\":1}}],[\"包括类的方法\",{\"1\":{\"211\":1}}],[\"包括以下情况\",{\"1\":{\"247\":1}}],[\"包括抛出异常\",{\"1\":{\"241\":1}}],[\"包括静态方法调用\",{\"1\":{\"241\":1}}],[\"包括跳转\",{\"1\":{\"241\":1}}],[\"包括将整数转换为浮点数\",{\"1\":{\"241\":1}}],[\"包括将常量\",{\"1\":{\"241\":1}}],[\"包括加减乘除\",{\"1\":{\"241\":1}}],[\"包括注解的类型和属性\",{\"1\":{\"240\":1}}],[\"包括泛型类型参数和泛型方法签名\",{\"1\":{\"240\":1}}],[\"包括方法声明的受检异常和未受检异常\",{\"1\":{\"240\":1}}],[\"包括方法的指令\",{\"1\":{\"240\":1}}],[\"包括方法的访问标志\",{\"1\":{\"240\":1}}],[\"包括字段的访问标志\",{\"1\":{\"240\":1}}],[\"包括字符串\",{\"1\":{\"240\":1}}],[\"包括对象分配状况\",{\"1\":{\"237\":1}}],[\"包括对象的类名\",{\"1\":{\"232\":1}}],[\"包括图形化性能分析\",{\"1\":{\"237\":1}}],[\"包括内存和资源\",{\"1\":{\"1452\":1}}],[\"包括内存使用情况\",{\"1\":{\"236\":1}}],[\"包括内存泄漏\",{\"1\":{\"235\":1}}],[\"包括堆空间\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"包括堆\",{\"1\":{\"235\":1}}],[\"包括堆的配置信息\",{\"1\":{\"232\":1}}],[\"包括线程的调用栈\",{\"1\":{\"234\":1}}],[\"包括包名\",{\"1\":{\"229\":1}}],[\"包括如下几条\",{\"1\":{\"143\":1}}],[\"包括运费\",{\"1\":{\"124\":1}}],[\"包括\",{\"1\":{\"61\":1,\"83\":1,\"91\":1,\"366\":1,\"443\":1,\"475\":1,\"494\":1,\"729\":1,\"888\":1,\"1264\":1,\"1367\":1,\"1402\":2,\"1475\":1,\"1529\":1,\"1564\":2,\"1567\":1,\"1860\":1}}],[\"包括副本数\",{\"1\":{\"42\":1,\"1219\":1}}],[\"包括index所属索引\",{\"1\":{\"42\":1}}],[\"包括倒排索引\",{\"1\":{\"37\":1}}],[\"包括哪些段\",{\"1\":{\"37\":1}}],[\"包括es\",{\"1\":{\"31\":1}}],[\"包括数据收集\",{\"1\":{\"31\":1}}],[\"囊括了大数据处理领域的方方面面\",{\"1\":{\"31\":1}}],[\"k80头盔\",{\"1\":{\"1796\":1}}],[\"k位\",{\"1\":{\"1738\":1}}],[\"kb\",{\"1\":{\"1683\":1}}],[\"kbytes\",{\"1\":{\"1446\":1}}],[\"kong\",{\"1\":{\"1621\":1}}],[\"kswapd\",{\"1\":{\"1446\":4,\"1447\":1}}],[\"k|m|g\",{\"1\":{\"1226\":1}}],[\"kudu\",{\"1\":{\"1213\":1}}],[\"klass\",{\"1\":{\"1074\":1}}],[\"kqueue等\",{\"1\":{\"919\":1}}],[\"knownmappers\",{\"1\":{\"541\":1,\"543\":2}}],[\"killer\",{\"1\":{\"1446\":2}}],[\"killcx\",{\"1\":{\"1420\":1}}],[\"kill\",{\"1\":{\"924\":1,\"965\":1,\"966\":3,\"1465\":1,\"1631\":1,\"1634\":1,\"1699\":1}}],[\"kip\",{\"1\":{\"471\":1}}],[\"kibana\",{\"1\":{\"31\":2}}],[\"kraft\",{\"0\":{\"448\":1},\"1\":{\"448\":2}}],[\"kryo\",{\"1\":{\"91\":1}}],[\"kafka有四种主流的分区分配策略\",{\"1\":{\"494\":1}}],[\"kafkalistener\",{\"1\":{\"489\":2}}],[\"kafkaconsumer<>\",{\"1\":{\"488\":1}}],[\"kafkaconsumer<string\",{\"1\":{\"488\":1}}],[\"kafka采取了分片和索引机制\",{\"1\":{\"475\":1}}],[\"kafka采用批量发送的方式\",{\"1\":{\"450\":1}}],[\"kafka崩溃恢复\",{\"1\":{\"471\":1}}],[\"kafka会尽量将所有的partition以及各partition的副本均匀地分配到整个集群上\",{\"1\":{\"469\":1}}],[\"kafka主从同步\",{\"1\":{\"469\":1}}],[\"kafka在1\",{\"1\":{\"462\":2}}],[\"kafka保证单分区内的有序性类似\",{\"1\":{\"462\":1}}],[\"kafka事务\",{\"1\":{\"461\":2}}],[\"kafka同步时\",{\"1\":{\"460\":1}}],[\"kafkatemplate<string\",{\"1\":{\"457\":1}}],[\"kafkatemplate\",{\"1\":{\"457\":3}}],[\"kafkaproducer<>\",{\"1\":{\"456\":1,\"461\":1}}],[\"kafkaproducer<string\",{\"1\":{\"456\":1,\"461\":1}}],[\"kafka<\",{\"1\":{\"455\":3,\"487\":3}}],[\"kafka消息发送\",{\"1\":{\"450\":1}}],[\"kafka通过将topic划分成多个partition\",{\"1\":{\"450\":1}}],[\"kafka的消息是一个一个的键值对\",{\"1\":{\"450\":1}}],[\"kafka不再依赖外部框架\",{\"1\":{\"448\":1}}],[\"kafka实时计算\",{\"1\":{\"442\":1}}],[\"kafka日志同步\",{\"1\":{\"441\":1}}],[\"kafka是一个分布式的基于发布\",{\"1\":{\"439\":1}}],[\"kafka是由\",{\"1\":{\"429\":1}}],[\"kafka模型\",{\"1\":{\"429\":1}}],[\"kafka\",{\"0\":{\"429\":1,\"438\":1,\"1626\":1},\"1\":{\"410\":2,\"435\":1,\"440\":1,\"443\":4,\"445\":3,\"446\":10,\"447\":1,\"448\":3,\"453\":1,\"456\":2,\"457\":5,\"460\":2,\"461\":4,\"462\":1,\"465\":5,\"467\":3,\"469\":1,\"470\":1,\"471\":2,\"472\":2,\"474\":1,\"475\":3,\"477\":1,\"478\":1,\"480\":1,\"483\":1,\"485\":3,\"488\":1,\"489\":5,\"490\":4,\"492\":1,\"493\":2,\"499\":1,\"1213\":1,\"1625\":1,\"1626\":5}}],[\"kafka等\",{\"1\":{\"31\":1}}],[\"kclass\",{\"1\":{\"215\":1,\"1521\":2}}],[\"k和v类型取决于定义\",{\"1\":{\"122\":1}}],[\"kv\",{\"1\":{\"68\":2,\"73\":1,\"490\":1,\"1213\":1,\"1227\":1,\"1405\":1,\"1701\":1}}],[\"kvm\",{\"1\":{\"37\":1}}],[\"k\",{\"1\":{\"61\":2,\"79\":1,\"122\":1,\"154\":2,\"452\":2,\"873\":4,\"1120\":2,\"1654\":4,\"1658\":2,\"1664\":1,\"1671\":3,\"1735\":1}}],[\"kmg\",{\"1\":{\"1683\":1}}],[\"kmp\",{\"0\":{\"991\":1}}],[\"km\",{\"1\":{\"39\":1}}],[\"kdi\",{\"1\":{\"37\":1}}],[\"kernighan\",{\"0\":{\"1665\":1}}],[\"kernel\",{\"1\":{\"278\":1,\"795\":1,\"1464\":2}}],[\"keyint\",{\"1\":{\"1868\":6}}],[\"keygenerator\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"key不能相同\",{\"1\":{\"1068\":1}}],[\"key是datasource数据源对象\",{\"1\":{\"1045\":1,\"1383\":1}}],[\"key>\",{\"1\":{\"969\":1,\"971\":1}}],[\"keyvaluepairs\",{\"1\":{\"913\":1}}],[\"keyevent\",{\"1\":{\"909\":1}}],[\"key命令输出对象编码\",{\"1\":{\"895\":1}}],[\"key命令输出对象类型\",{\"1\":{\"895\":1}}],[\"keyproperty\",{\"1\":{\"530\":1}}],[\"keyproperty=\",{\"1\":{\"530\":1}}],[\"keycolumn=\",{\"1\":{\"530\":1}}],[\"keybytes\",{\"1\":{\"453\":2}}],[\"keys字典检查\",{\"1\":{\"960\":1}}],[\"keys字典\",{\"1\":{\"960\":1}}],[\"keyslot\",{\"1\":{\"947\":1}}],[\"keys跳跃表保存槽和键的对应关系\",{\"1\":{\"945\":1}}],[\"keyspace\",{\"1\":{\"909\":2}}],[\"keyset\",{\"1\":{\"305\":1}}],[\"keys\",{\"1\":{\"129\":1,\"130\":1,\"728\":1,\"788\":1,\"960\":1,\"1227\":1,\"1263\":2}}],[\"keys取出全部key\",{\"1\":{\"122\":1}}],[\"key=景点拼音\",{\"1\":{\"1361\":1}}],[\"key=3ad29aad765a2b98b2b2a745d71bef715507ee9db8adbec98257bac0ad84cbe4\",{\"1\":{\"667\":1}}],[\"key=\",{\"1\":{\"118\":6,\"119\":2,\"120\":2}}],[\"key=value\",{\"1\":{\"117\":1,\"1701\":1}}],[\"key必须为原始类型\",{\"1\":{\"112\":1}}],[\"key\",{\"1\":{\"60\":1,\"67\":2,\"68\":2,\"69\":1,\"73\":10,\"74\":1,\"92\":1,\"112\":1,\"122\":1,\"154\":9,\"305\":1,\"413\":1,\"425\":1,\"452\":5,\"453\":6,\"456\":1,\"457\":1,\"474\":2,\"477\":2,\"488\":1,\"489\":1,\"490\":1,\"538\":1,\"541\":2,\"557\":1,\"598\":3,\"599\":6,\"634\":1,\"728\":2,\"785\":1,\"786\":5,\"787\":2,\"788\":9,\"789\":10,\"791\":5,\"882\":1,\"907\":1,\"909\":1,\"913\":3,\"947\":1,\"965\":2,\"967\":1,\"970\":2,\"1002\":13,\"1059\":1,\"1234\":1,\"1240\":1,\"1256\":3,\"1257\":1,\"1258\":1,\"1263\":3,\"1269\":3,\"1357\":4,\"1358\":3,\"1368\":2,\"1400\":1,\"1402\":1,\"1497\":1,\"1514\":13,\"1573\":4,\"1574\":2,\"1579\":3,\"1580\":1,\"1581\":1,\"1582\":3,\"1590\":1,\"1598\":1,\"1613\":3,\"1628\":1,\"1651\":14,\"1701\":1}}],[\"keyword只能整体搜索\",{\"1\":{\"36\":1}}],[\"keyword\",{\"1\":{\"36\":1,\"42\":1}}],[\"keepalivetime单位\",{\"1\":{\"1511\":1}}],[\"keepalivetime\",{\"1\":{\"332\":1,\"1106\":2,\"1115\":1,\"1120\":1,\"1511\":1}}],[\"keepalive\",{\"1\":{\"93\":1,\"854\":1,\"1419\":2}}],[\"keep\",{\"1\":{\"0\":1,\"1398\":1}}],[\"能在高位上的人\",{\"1\":{\"1767\":1}}],[\"能在任意主机访问\",{\"1\":{\"590\":1}}],[\"能找出部分隐藏的问题\",{\"1\":{\"1539\":1}}],[\"能加载更多类\",{\"1\":{\"1520\":1}}],[\"能保证共享数据安全性\",{\"1\":{\"1517\":1}}],[\"能简单且高效地构造出应用广泛的大量的同步器\",{\"1\":{\"1516\":1}}],[\"能让服务端接收\",{\"1\":{\"1410\":1}}],[\"能唯一确定一个四层服务\",{\"1\":{\"1301\":1}}],[\"能给出我现在没能想到的设计\",{\"1\":{\"1238\":1}}],[\"能分摊\",{\"1\":{\"1194\":1}}],[\"能检测出某个由于未捕获的异常而终结的情况\",{\"1\":{\"1096\":1}}],[\"能力\",{\"1\":{\"791\":1}}],[\"能否读写由\",{\"1\":{\"776\":1}}],[\"能帮助解决很多服务之间的问题\",{\"1\":{\"401\":1}}],[\"能够在播放时根据用户当前的网络状况选择最佳的码率\",{\"1\":{\"1866\":1}}],[\"能够完成座位预订和航段销售\",{\"1\":{\"1723\":1}}],[\"能够把二进制中的最低位1变为0的特性\",{\"1\":{\"1665\":1}}],[\"能够更轻松地迁移\",{\"1\":{\"1634\":1}}],[\"能够将那些与业务无关\",{\"1\":{\"1601\":1}}],[\"能够满足一些特殊的查询需求\",{\"1\":{\"1542\":1}}],[\"能够获得更高的吞吐量\",{\"1\":{\"1525\":1}}],[\"能够实现\",{\"1\":{\"1435\":1}}],[\"能够实现最优的\",{\"1\":{\"1119\":1}}],[\"能够快速检索一个元素是否在给定的大集合中\",{\"1\":{\"1390\":1}}],[\"能够基于\",{\"1\":{\"1380\":1}}],[\"能够提供更好的性能和稳定性\",{\"1\":{\"870\":1}}],[\"能够根据网络连接的特性和当前的网络条件动态调整接收缓冲区的大小\",{\"1\":{\"861\":1}}],[\"能够减少网络中小分组的数量\",{\"1\":{\"858\":1}}],[\"能够很好的支持集合遍历\",{\"1\":{\"538\":1}}],[\"能够容忍高优化复杂度\",{\"1\":{\"269\":1}}],[\"能够同时从多个来源采集数据\",{\"1\":{\"31\":1}}],[\"能够防止\",{\"1\":{\"26\":1}}],[\"能使数据在生产环境变得更有价值\",{\"1\":{\"31\":1}}],[\"它将一个视频划分为许多个segment\",{\"1\":{\"1866\":1}}],[\"它将抽象部分与实现部分分离\",{\"1\":{\"375\":1}}],[\"它告诉发送电子邮件的邮件服务器应该将邮件发送到哪个邮件服务器\",{\"1\":{\"1792\":1}}],[\"它允许你使用\",{\"1\":{\"1790\":1}}],[\"它允许你在代码仓库中配置和运行自动化的工作流程\",{\"1\":{\"1790\":1}}],[\"它允许我们在运行时对字节码进行修改和动态生成\",{\"1\":{\"1532\":1}}],[\"它覆盖了全球900多家航空公司的航班时刻数据\",{\"1\":{\"1729\":1}}],[\"它保存着线程的引用\",{\"1\":{\"1516\":1}}],[\"它包括\",{\"1\":{\"1481\":1}}],[\"它必须释放已经保持的所有资源\",{\"1\":{\"1466\":1}}],[\"它也无法运行\",{\"1\":{\"1450\":1}}],[\"它也可能包含表和索引数据\",{\"1\":{\"639\":1}}],[\"它能重新被发送到另一个交换器中\",{\"1\":{\"1629\":1}}],[\"它能检测sql注入漏洞\",{\"1\":{\"1539\":1}}],[\"它能够提供业务外网ip到内网ip的转换\",{\"1\":{\"1301\":1}}],[\"它能很方便的使大量数据具有搜索\",{\"1\":{\"31\":1}}],[\"它基于url\",{\"1\":{\"1297\":1}}],[\"它基于ip地址和端口号进行请求的转发\",{\"1\":{\"1296\":1}}],[\"它大大降低了我们对系统的要求\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"它被用来定义和创建跨语言的服务\",{\"1\":{\"1124\":1}}],[\"它不会立即进入阻塞状态\",{\"1\":{\"1079\":1}}],[\"它有两个功能\",{\"1\":{\"1045\":1}}],[\"它就会成为新主服务器的从服务器\",{\"1\":{\"943\":1}}],[\"它对数据库中的数据的改变就是永久的\",{\"1\":{\"735\":1}}],[\"它记录了当\",{\"1\":{\"642\":1}}],[\"它支持自定义\",{\"1\":{\"503\":1}}],[\"它拥有客户端所需的功能\",{\"1\":{\"374\":1}}],[\"它实现了目标接口并包装了一个需要被适配的类的对象\",{\"1\":{\"374\":1}}],[\"它简化了客户端与子系统之间的交互\",{\"1\":{\"373\":1}}],[\"它在标准\",{\"1\":{\"324\":1}}],[\"它通常用于验证域名的所有权\",{\"1\":{\"1792\":1}}],[\"它通常用于开发和调试阶段\",{\"1\":{\"235\":1}}],[\"它通过原子操作和阻塞实现锁机制\",{\"1\":{\"1517\":1}}],[\"它通过门面提供的简化接口与子系统进行交互\",{\"1\":{\"373\":1}}],[\"它通过符号引用到直接引用的转换\",{\"1\":{\"244\":1}}],[\"它负责管理旅客与航司之间的所有交互\",{\"1\":{\"1723\":1}}],[\"它负责加载java的核心类库\",{\"1\":{\"254\":1}}],[\"它负责执行类构造器\",{\"1\":{\"253\":1}}],[\"它负责将频繁执行的热点代码\",{\"1\":{\"242\":1}}],[\"它负责逐条解释和执行java字节码指令\",{\"1\":{\"242\":1}}],[\"它负责解释和执行java字节码指令\",{\"1\":{\"242\":1}}],[\"它指示了jvm执行何种操作\",{\"1\":{\"241\":1}}],[\"它采用一种伪结构来存储数据\",{\"1\":{\"240\":1}}],[\"它可以更好地确定哪个索引最有效地用于查询\",{\"1\":{\"708\":1}}],[\"它可以减轻\",{\"1\":{\"640\":1}}],[\"它可以直接访问操作系统的资源和内核数据结构\",{\"1\":{\"278\":1}}],[\"它可以加载堆转储文件\",{\"1\":{\"233\":1}}],[\"它可以查看java进程的启动参数\",{\"1\":{\"231\":1}}],[\"它可以刷新缓存\",{\"1\":{\"145\":1}}],[\"它主要用于查看java进程的进程id\",{\"1\":{\"229\":1}}],[\"它主要用于在对象被垃圾回收前\",{\"1\":{\"184\":1}}],[\"它的教义受到基督教和诺斯底主义等的较大影响\",{\"1\":{\"1767\":1}}],[\"它的分配策略目前世界上存在两种模式\",{\"1\":{\"1730\":1}}],[\"它的所有节点既放键\",{\"1\":{\"1546\":1}}],[\"它的缺点也是应为缓存跟应用程序耦合\",{\"1\":{\"1253\":1}}],[\"它的作用就是创建匹配\",{\"1\":{\"1059\":1}}],[\"它的子类\",{\"1\":{\"1052\":1}}],[\"它的从机\",{\"1\":{\"658\":1}}],[\"它的无参构造器是私有的\",{\"1\":{\"362\":1}}],[\"它的\",{\"1\":{\"196\":1}}],[\"它的强度比软引用更弱\",{\"1\":{\"193\":1}}],[\"它的设计目标是在尽量短的停顿时间内达到尽可能高的吞吐量\",{\"1\":{\"177\":1}}],[\"它们失去自由\",{\"1\":{\"1843\":1}}],[\"它们是少有的生物\",{\"1\":{\"1833\":1}}],[\"它们最大的问题是经常跑路\",{\"1\":{\"1804\":1}}],[\"它们的座位大小不同\",{\"1\":{\"1735\":1}}],[\"它们的区别在于是否保证等待锁的线程按照先来后到的顺序获取锁\",{\"1\":{\"1518\":1}}],[\"它们会被晋升到老年代\",{\"1\":{\"1524\":1}}],[\"它们很快就会变得不可达并被回收\",{\"1\":{\"1524\":1}}],[\"它们将改变线程池至不同的运行状态\",{\"1\":{\"1116\":1}}],[\"它们都有\",{\"1\":{\"776\":1}}],[\"它们在获取行排他锁之前\",{\"1\":{\"561\":1}}],[\"它们在用户空间中运行\",{\"1\":{\"279\":1}}],[\"它们共同协作完成java程序的执行\",{\"1\":{\"242\":1}}],[\"它们对垃圾回收器的行为有不同的影响\",{\"1\":{\"183\":1}}],[\"它们分别是强引用\",{\"1\":{\"183\":1}}],[\"它充分利用多核处理器的优势\",{\"1\":{\"174\":1}}],[\"它首先尝试获取一个许可证\",{\"1\":{\"159\":1}}],[\"它使用一个计数器来跟踪可用的资源数量\",{\"1\":{\"159\":1}}],[\"它提供了丰富的功能\",{\"1\":{\"237\":1,\"238\":1}}],[\"它提供了一个统一的接口\",{\"1\":{\"373\":1}}],[\"它提供了一个图形化的用户界面\",{\"1\":{\"236\":1}}],[\"它提供了一个抽象类\",{\"1\":{\"78\":1}}],[\"它提供了一组命令行工具\",{\"1\":{\"235\":1}}],[\"它提供了乐观读\",{\"1\":{\"158\":1}}],[\"它是sql注入问题的根源\",{\"1\":{\"1539\":1}}],[\"它是\",{\"1\":{\"839\":1,\"1174\":1}}],[\"它是由jvm直接在内存中动态构造出来的\",{\"1\":{\"249\":1}}],[\"它是构成平台无关性的基石\",{\"1\":{\"239\":1}}],[\"它是一个完全支持\",{\"1\":{\"432\":1}}],[\"它是一个原子操作\",{\"1\":{\"148\":1}}],[\"它是一种全新的垃圾收集器\",{\"1\":{\"178\":1,\"179\":1}}],[\"它是锁机制的扩展\",{\"1\":{\"159\":1}}],[\"它是可见性与有序性的一套规则总结\",{\"1\":{\"143\":1}}],[\"它同时实现了\",{\"1\":{\"77\":1}}],[\"它会不断地检测共享资源是否可用\",{\"1\":{\"1463\":1}}],[\"它会递归地应用在整个工作区中\",{\"1\":{\"1330\":1}}],[\"它会通过\",{\"1\":{\"1219\":1}}],[\"它会将操作后的数据保存到另外一个对象中\",{\"1\":{\"1065\":1}}],[\"它会在加载时创建一个\",{\"1\":{\"196\":1}}],[\"它会唤醒等待队列中的第一个节点\",{\"1\":{\"2\":1}}],[\"它会被包装成一个节点并加入等待队列\",{\"1\":{\"2\":1}}],[\"高耸大山\",{\"1\":{\"1849\":1}}],[\"高反最严重的地方\",{\"1\":{\"1843\":1}}],[\"高反好了很多\",{\"1\":{\"1836\":1}}],[\"高反越来越严重\",{\"1\":{\"1834\":1}}],[\"高山\",{\"1\":{\"1825\":1}}],[\"高山草甸真的好美啊\",{\"1\":{\"1825\":1}}],[\"高位用0填补\",{\"1\":{\"1664\":1}}],[\"高位用0补齐至整字节\",{\"1\":{\"684\":1}}],[\"高位用符号位填补\",{\"1\":{\"1664\":1}}],[\"高位舍弃\",{\"1\":{\"1664\":1}}],[\"高度关联的应用\",{\"1\":{\"1543\":1}}],[\"高大天\",{\"1\":{\"1536\":2}}],[\"高响应比优先\",{\"1\":{\"1470\":1}}],[\"高容错性的特点\",{\"1\":{\"1214\":1}}],[\"高三位表示\",{\"1\":{\"1112\":1}}],[\"高并发时\",{\"1\":{\"826\":1}}],[\"高性能要求\",{\"1\":{\"1752\":1}}],[\"高性能\",{\"1\":{\"1622\":1}}],[\"高性能的优点\",{\"1\":{\"1215\":1}}],[\"高性能的网络服务器和客户端\",{\"1\":{\"807\":1}}],[\"高性能框架\",{\"1\":{\"391\":1}}],[\"高频访问缓存页\",{\"1\":{\"732\":1}}],[\"高水位线以下的消息\",{\"1\":{\"471\":1}}],[\"高水位线以下消息都是备份过的\",{\"1\":{\"471\":1}}],[\"高\",{\"1\":{\"435\":2,\"681\":4,\"1204\":1}}],[\"高吞吐\",{\"1\":{\"431\":1}}],[\"高级工具\",{\"0\":{\"1339\":1},\"1\":{\"1339\":1}}],[\"高级消息队列协议\",{\"1\":{\"404\":1,\"1625\":1}}],[\"高级流\",{\"1\":{\"319\":1}}],[\"高可用集群\",{\"1\":{\"1638\":1}}],[\"高可用模式\",{\"0\":{\"1587\":1}}],[\"高可用性\",{\"1\":{\"1214\":1,\"1254\":1}}],[\"高可用性等方面表现不俗\",{\"1\":{\"411\":1}}],[\"高可用\",{\"0\":{\"1638\":1},\"1\":{\"396\":1,\"412\":1,\"1303\":1,\"1622\":1}}],[\"高版本jdk仅向下兼容\",{\"1\":{\"240\":1}}],[\"高效\",{\"1\":{\"1459\":1}}],[\"高效读写\",{\"0\":{\"478\":1}}],[\"高效订阅者水平扩展\",{\"1\":{\"431\":1}}],[\"高效地打印数据到文件中\",{\"1\":{\"322\":1}}],[\"高效性\",{\"1\":{\"224\":1}}],[\"高效自旋\",{\"1\":{\"6\":1}}],[\"高亮\",{\"1\":{\"51\":1}}],[\"高扩展性和高并发\",{\"1\":{\"1543\":1}}],[\"高扩展性\",{\"1\":{\"1215\":1}}],[\"高扩展\",{\"1\":{\"31\":1}}],[\"鉴权认证策略\",{\"1\":{\"1300\":1}}],[\"鉴权\",{\"2\":{\"29\":1}}],[\"验证是否成功即可\",{\"1\":{\"1872\":1}}],[\"验证nginx配置是否正确\",{\"1\":{\"1871\":1}}],[\"验证调用顺序\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"验证调用次数\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"验证身份凭据\",{\"1\":{\"1642\":1}}],[\"验证加密通信安全可用\",{\"1\":{\"1402\":1}}],[\"验证打包\",{\"1\":{\"1347\":1}}],[\"验证版本号\",{\"1\":{\"1175\":1,\"1176\":1}}],[\"验证套接字连接正常\",{\"1\":{\"936\":1}}],[\"验证阶段目的是确保class文件的字节流包含的信息符合全部约束要求\",{\"1\":{\"250\":1}}],[\"验证\",{\"0\":{\"250\":1,\"1872\":1},\"1\":{\"1527\":2}}],[\"验证成功后\",{\"1\":{\"27\":1,\"1643\":1}}],[\"验证通过后\",{\"1\":{\"27\":1,\"1643\":1}}],[\"验证通过后注册\",{\"1\":{\"14\":1}}],[\"由穆罕默德\",{\"1\":{\"1767\":1}}],[\"由全球分销商\",{\"1\":{\"1751\":1}}],[\"由航空公司二字码和数字组成\",{\"1\":{\"1730\":1}}],[\"由出发地城市机场\",{\"1\":{\"1730\":1}}],[\"由crs逐渐演变而来的\",{\"1\":{\"1724\":1}}],[\"由clustermsg结构表示\",{\"1\":{\"949\":1}}],[\"由此引出三个工作区\",{\"1\":{\"1633\":1}}],[\"由此我们可以发现代理的本质\",{\"1\":{\"1015\":1}}],[\"由此我们可知\",{\"1\":{\"823\":1}}],[\"由引擎维护\",{\"1\":{\"1560\":1}}],[\"由os负责\",{\"1\":{\"1556\":1}}],[\"由oracle开发的一种低延迟的垃圾收集器\",{\"1\":{\"179\":1}}],[\"由调用该方法的方法处理异常\",{\"1\":{\"1533\":1}}],[\"由gc管理\",{\"1\":{\"1520\":1}}],[\"由git\",{\"1\":{\"1345\":1}}],[\"由一个个栈帧组成\",{\"1\":{\"1520\":1}}],[\"由一个节点作为中心调度者\",{\"1\":{\"1221\":1}}],[\"由内核遍历判断是否有事件\",{\"1\":{\"1487\":1}}],[\"由内核触发\",{\"1\":{\"1437\":1}}],[\"由硬件完成数据读写内存\",{\"1\":{\"1481\":1}}],[\"由各种标志\",{\"1\":{\"1435\":1}}],[\"由发送方维护\",{\"1\":{\"1413\":1}}],[\"由用户自己处理完冲突后手动暂存和提交\",{\"1\":{\"1336\":1}}],[\"由用户线程同步执行\",{\"1\":{\"748\":1}}],[\"由shepherd进行协议转换并调用内部服务\",{\"1\":{\"1303\":1}}],[\"由scala和java编写\",{\"1\":{\"429\":1}}],[\"由vip\",{\"1\":{\"1301\":1}}],[\"由mgw发布的虚拟端口\",{\"1\":{\"1301\":1}}],[\"由mgw发布的虚拟ip地址\",{\"1\":{\"1301\":1}}],[\"由系统自动分配\",{\"1\":{\"1301\":1}}],[\"由系统根据情况自动完成\",{\"1\":{\"638\":1}}],[\"由看门狗定期在1\",{\"1\":{\"1264\":1}}],[\"由location指定\",{\"1\":{\"1228\":1}}],[\"由单独的服务进程维护\",{\"1\":{\"1224\":1}}],[\"由服务器分布式对数据进行处理\",{\"1\":{\"1221\":1}}],[\"由客户端直连\",{\"1\":{\"1220\":1}}],[\"由datanode之间自行完成\",{\"1\":{\"1220\":1}}],[\"由dbnum控制\",{\"1\":{\"906\":1}}],[\"由若干\",{\"1\":{\"1167\":1}}],[\"由若干sentinel实例组成的sentinel系统可以监视多个主服务器\",{\"1\":{\"938\":1}}],[\"由主进程将aof\",{\"1\":{\"917\":1}}],[\"由主线程执行保存\",{\"1\":{\"911\":1}}],[\"由主线程直接调用任务的run\",{\"1\":{\"332\":1,\"1109\":1,\"1511\":1}}],[\"由主服务器控制从服务器同意删除过期键\",{\"1\":{\"908\":1}}],[\"由主从同步保证数据一致性\",{\"1\":{\"908\":1}}],[\"由redisobject中的refcount记录引用数\",{\"1\":{\"901\":1}}],[\"由previous\",{\"1\":{\"892\":1}}],[\"由下一个\",{\"1\":{\"818\":1}}],[\"由三部分相加而得\",{\"1\":{\"728\":1}}],[\"由多张相互连接的二维表\",{\"1\":{\"569\":1}}],[\"由多个具有相同\",{\"1\":{\"481\":1}}],[\"由多个\",{\"1\":{\"443\":1,\"1479\":1}}],[\"由多个字段组成\",{\"1\":{\"34\":1}}],[\"由多个集群组成的一个集合\",{\"1\":{\"33\":1}}],[\"由配置auto\",{\"1\":{\"493\":1}}],[\"由参数log\",{\"1\":{\"477\":1}}],[\"由事务协调器负责接收\",{\"1\":{\"461\":1}}],[\"由垃圾收集器\",{\"1\":{\"210\":1}}],[\"由子类实现\",{\"1\":{\"189\":2}}],[\"由线程对象决定\",{\"1\":{\"154\":1}}],[\"由声明位置决定\",{\"1\":{\"154\":1}}],[\"由\",{\"1\":{\"101\":1,\"192\":1,\"196\":1,\"411\":1,\"448\":1,\"480\":2,\"490\":2,\"561\":1,\"809\":1,\"829\":1,\"873\":1,\"916\":1,\"1061\":1,\"1088\":1,\"1281\":1,\"1443\":1,\"1446\":1,\"1494\":1,\"1577\":1,\"1593\":1,\"1620\":1}}],[\"由封装的\",{\"1\":{\"101\":1}}],[\"由于焦段不够\",{\"1\":{\"1846\":1}}],[\"由于技术太烂\",{\"1\":{\"1844\":1}}],[\"由于我们到的最晚\",{\"1\":{\"1841\":1}}],[\"由于限速\",{\"1\":{\"1833\":1}}],[\"由于教会一直在贪污腐败\",{\"1\":{\"1761\":1}}],[\"由于相同的元素后续遍历的结果会产生重复\",{\"1\":{\"1673\":1}}],[\"由于进程上下文切换开销\",{\"1\":{\"1487\":1}}],[\"由于涉及资源少\",{\"1\":{\"1452\":1}}],[\"由于其他进程处于运行状态而暂时停止运行\",{\"1\":{\"1450\":1}}],[\"由于数据仅被访问一次\",{\"1\":{\"1448\":1}}],[\"由于每个进程都有自己的页表\",{\"1\":{\"1443\":1}}],[\"由于每个页的大小固定\",{\"1\":{\"1443\":1}}],[\"由于每次查询都是一个耗时的rpc调用\",{\"1\":{\"1363\":1}}],[\"由于计算机存储浮点数有位数限制\",{\"1\":{\"1438\":1}}],[\"由于多个线程同时读写同一个\",{\"1\":{\"1435\":1}}],[\"由于基于tcp\",{\"1\":{\"1404\":1}}],[\"由于订单可能回滚\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"由于网络不稳定问题\",{\"1\":{\"1636\":1}}],[\"由于网络\",{\"1\":{\"1277\":1}}],[\"由于分布式系统多线程的特点\",{\"1\":{\"1262\":1}}],[\"由于组织架构等历史原因\",{\"1\":{\"1233\":1}}],[\"由于需要调用\",{\"1\":{\"1228\":1}}],[\"由于是技术需求\",{\"1\":{\"1234\":1}}],[\"由于是读锁\",{\"1\":{\"1188\":1}}],[\"由于是双引号\",{\"1\":{\"301\":1}}],[\"由于偏向锁撤销存在一定开销\",{\"1\":{\"1077\":1}}],[\"由于当前已存在事务\",{\"1\":{\"1049\":1}}],[\"由于主服务器和从服务器载入的脚本情况可能不同\",{\"1\":{\"967\":1}}],[\"由于主键必然非空\",{\"1\":{\"619\":1}}],[\"由于容器不是物理隔离的\",{\"1\":{\"791\":1}}],[\"由于缓冲区阻塞\",{\"1\":{\"789\":1}}],[\"由于不依赖zookeeper\",{\"1\":{\"448\":1}}],[\"由于消息是否过期是在投递到消费者之前判定的\",{\"1\":{\"424\":1}}],[\"由于协程可以在单个线程内并发执行大量任务\",{\"1\":{\"282\":1}}],[\"由于协程可以在单个线程内并发执行多个任务\",{\"1\":{\"282\":1}}],[\"由于浮动垃圾的存在\",{\"1\":{\"176\":1}}],[\"由于上述的\",{\"1\":{\"144\":1}}],[\"由于处理器使用缓存和读写缓存冲区\",{\"1\":{\"143\":1}}],[\"由于流水线技术的产生和中断对流水线的影响\",{\"1\":{\"143\":1}}],[\"由于某些原因导致\",{\"1\":{\"134\":1}}],[\"由于代码的执行序列不同而导致结果无法预测\",{\"1\":{\"134\":1}}],[\"由于\",{\"1\":{\"27\":1,\"786\":1,\"1045\":1,\"1335\":1,\"1409\":1,\"1435\":1,\"1444\":1,\"1643\":1}}],[\"由实现类定义\",{\"1\":{\"7\":1}}],[\"访问权限\",{\"1\":{\"1474\":1,\"1475\":1}}],[\"访问权限必须大于或等于父类\",{\"1\":{\"291\":1}}],[\"访问所有未完成的请求\",{\"1\":{\"1472\":1}}],[\"访问共享资源的代码片段\",{\"1\":{\"1463\":1}}],[\"访问内存会有很明显的重复访问的倾向性\",{\"1\":{\"1443\":1}}],[\"访问内存地址时\",{\"1\":{\"1443\":1}}],[\"访问校验\",{\"1\":{\"1088\":1}}],[\"访问控制和流量限制等\",{\"1\":{\"1298\":1}}],[\"访问控制\",{\"1\":{\"1088\":1}}],[\"访问上\",{\"1\":{\"1000\":1}}],[\"访问两个相邻节点\",{\"1\":{\"1000\":1}}],[\"访问键时才执行判断删除\",{\"1\":{\"908\":1}}],[\"访问规则有了\",{\"1\":{\"1557\":1}}],[\"访问规则\",{\"1\":{\"754\":1}}],[\"访问次数决定于驱动表执行单表查询后的结果集中的记录条数\",{\"1\":{\"714\":1}}],[\"访问类型\",{\"1\":{\"710\":1}}],[\"访问类的静态变量或静态方法\",{\"1\":{\"247\":1}}],[\"访问方法\",{\"0\":{\"710\":1}}],[\"访问速度快\",{\"1\":{\"679\":1,\"682\":1}}],[\"访问特点\",{\"1\":{\"293\":1}}],[\"访问静态方法或字段时\",{\"1\":{\"244\":1}}],[\"访问实例字段时\",{\"1\":{\"244\":1}}],[\"访问对象的字段和数组元素\",{\"1\":{\"241\":1}}],[\"访问标志是一个\",{\"1\":{\"240\":1}}],[\"访问标志\",{\"1\":{\"240\":2,\"1526\":1}}],[\"访问\",{\"1\":{\"27\":1,\"1368\":1,\"1643\":1}}],[\"访问令牌\",{\"1\":{\"15\":1}}],[\"向我们展示他拍的日照金山和珠峰银河\",{\"1\":{\"1844\":1}}],[\"向航司申请低折扣的票\",{\"1\":{\"1738\":1}}],[\"向商家收取佣金\",{\"1\":{\"1726\":1}}],[\"向右跳一个单词\",{\"1\":{\"1690\":1}}],[\"向右遍历\",{\"1\":{\"557\":1}}],[\"向左跳一个单词\",{\"1\":{\"1690\":1}}],[\"向上提供统一的文件访问接口\",{\"1\":{\"1484\":1}}],[\"向上为文件系统\",{\"1\":{\"1483\":1}}],[\"向上取整\",{\"1\":{\"594\":2}}],[\"向进程发送信号\",{\"1\":{\"1465\":1,\"1631\":1}}],[\"向实时消息服务确\",{\"1\":{\"1286\":1}}],[\"向实时消息服务请求发送消息\",{\"1\":{\"1286\":1}}],[\"向其他节点请求投票\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"向容器中导入了\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"向用户提供的操作接口\",{\"1\":{\"1224\":1}}],[\"向客户端返回oldvalue变量的值\",{\"1\":{\"975\":1}}],[\"向b发送一条meet消息\",{\"1\":{\"945\":1}}],[\"向broker发送消息的客户端\",{\"1\":{\"430\":1}}],[\"向服务器发送信息\",{\"1\":{\"940\":1}}],[\"向服务器进程发送信号\",{\"1\":{\"917\":1}}],[\"向下通过通用块层访问设备\",{\"1\":{\"1484\":1}}],[\"向下把各种磁盘设备抽象为统一的块设备\",{\"1\":{\"1483\":1}}],[\"向下逐层处理\",{\"1\":{\"1395\":1}}],[\"向下兼容性\",{\"1\":{\"809\":1}}],[\"向下生长树枝\",{\"1\":{\"698\":1}}],[\"向下所依赖视图的规则都将进行检查\",{\"1\":{\"623\":1}}],[\"向下取整\",{\"1\":{\"594\":2}}],[\"向消费者抛出异常\",{\"1\":{\"493\":1}}],[\"向后传递\",{\"1\":{\"829\":2}}],[\"向后遍历找到目标记录\",{\"1\":{\"476\":1}}],[\"向后迭代找\",{\"1\":{\"154\":1,\"1514\":1}}],[\"向前迭代找过期槽\",{\"1\":{\"154\":1,\"1514\":1}}],[\"向\",{\"1\":{\"27\":2,\"443\":2,\"467\":1,\"767\":1,\"827\":1,\"1643\":2}}],[\"进了寺庙要被僧人流水线般按住磕头\",{\"1\":{\"1836\":1}}],[\"进藏时的两个大四女生\",{\"1\":{\"1849\":1}}],[\"进藏\",{\"0\":{\"1833\":1}}],[\"进击的巨人\",{\"1\":{\"1817\":1}}],[\"进餐\",{\"1\":{\"1467\":1}}],[\"进度\",{\"1\":{\"1004\":1}}],[\"进去\",{\"1\":{\"619\":1}}],[\"进而通过权限系统的校验\",{\"1\":{\"1791\":1}}],[\"进而引发程序崩溃\",{\"1\":{\"1638\":1}}],[\"进而创建\",{\"1\":{\"1594\":1}}],[\"进而将一个数据库的压力分担到多个数据库\",{\"1\":{\"1564\":1}}],[\"进而陷入了一种僵局的状态\",{\"1\":{\"1466\":1}}],[\"进而中断处理程序会判断物理内存是否足够\",{\"1\":{\"1446\":1}}],[\"进而产生内存碎片\",{\"1\":{\"1445\":1}}],[\"进而导致\",{\"1\":{\"1546\":1}}],[\"进而导致瞬时大量的请求直接打到了数据库上\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"进而导致一些资源问题\",{\"1\":{\"1096\":1}}],[\"进而可以从不同的位置获得资源配置的输入流\",{\"1\":{\"1008\":1}}],[\"进而才能判断清楚结束条件到底是\",{\"1\":{\"998\":1}}],[\"进而\",{\"1\":{\"461\":1,\"1438\":1}}],[\"进一步的\",{\"1\":{\"460\":1}}],[\"进化史\",{\"0\":{\"377\":1}}],[\"进程可以通过这些系统调用函数从内核中获取多个事件\",{\"1\":{\"1487\":1}}],[\"进程调度\",{\"0\":{\"1470\":1}}],[\"进程崩溃\",{\"1\":{\"1465\":1}}],[\"进程继续正常执行\",{\"1\":{\"1460\":1}}],[\"进程需阻塞等待\",{\"1\":{\"1460\":1}}],[\"进程间通信\",{\"0\":{\"1455\":1}}],[\"进程上下文切换\",{\"1\":{\"1454\":1}}],[\"进程拥有自己的地址空间\",{\"1\":{\"1452\":1}}],[\"进程是资源分配的基本单位\",{\"1\":{\"1452\":1}}],[\"进程和线程对比\",{\"0\":{\"1452\":1}}],[\"进程在外存\",{\"1\":{\"1450\":2}}],[\"进程正在从系统中消失时的状态\",{\"1\":{\"1450\":1}}],[\"进程正在被创建时的状态\",{\"1\":{\"1450\":1}}],[\"进程管理\",{\"0\":{\"1449\":1,\"1699\":1}}],[\"进程也没有办法访问其他进程的页表\",{\"1\":{\"1443\":2}}],[\"进程优先级可以通过\",{\"1\":{\"1436\":1}}],[\"进程将响应数据封装成\",{\"1\":{\"1394\":1}}],[\"进程启停\",{\"1\":{\"1217\":1}}],[\"进程之间共享\",{\"1\":{\"1136\":1}}],[\"进程结束是由于\",{\"1\":{\"1465\":1}}],[\"进程结束\",{\"1\":{\"924\":1}}],[\"进程了\",{\"1\":{\"446\":1}}],[\"进程的\",{\"1\":{\"153\":1}}],[\"进程的创建和销毁不仅需要保存寄存器和栈信息\",{\"1\":{\"134\":1}}],[\"进程单独占有一定的内存地址空间\",{\"1\":{\"134\":3}}],[\"进程让操作系统的并发性成为了可能\",{\"1\":{\"134\":1}}],[\"进程\",{\"0\":{\"1450\":1},\"1\":{\"134\":3,\"1450\":1}}],[\"进行与运算\",{\"1\":{\"1664\":1}}],[\"进行属性注入时\",{\"1\":{\"1599\":1}}],[\"进行查询\",{\"1\":{\"1547\":1}}],[\"进行探测式清理\",{\"1\":{\"1514\":1}}],[\"进行业务处理\",{\"1\":{\"1488\":1}}],[\"进行重发时也是以\",{\"1\":{\"1416\":1}}],[\"进行校验\",{\"1\":{\"1374\":1}}],[\"进行后续业务处理\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"进行对比和\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"进行整合等等\",{\"1\":{\"1253\":1}}],[\"进行网络攻击的可能性\",{\"1\":{\"1222\":1}}],[\"进行使用\",{\"1\":{\"1222\":1}}],[\"进行合并\",{\"1\":{\"1219\":1}}],[\"进行合并形成新的\",{\"1\":{\"1219\":1}}],[\"进行数据统计\",{\"1\":{\"1223\":1}}],[\"进行数据同步\",{\"1\":{\"1200\":1}}],[\"进行数据恢复\",{\"1\":{\"639\":1}}],[\"进行投票的发起和决议\",{\"1\":{\"1194\":1}}],[\"进行通信\",{\"1\":{\"1171\":1,\"1540\":1}}],[\"进行通配\",{\"1\":{\"591\":1}}],[\"进行传输\",{\"1\":{\"1130\":1}}],[\"进行shutdown并且队列为空\",{\"1\":{\"1115\":1}}],[\"进行异常捕获\",{\"1\":{\"1096\":1}}],[\"进行上下文切换了\",{\"1\":{\"1079\":1}}],[\"进行计算的操作\",{\"1\":{\"1068\":1}}],[\"进行获取事务\",{\"1\":{\"1055\":1}}],[\"进行自动事务管理的核心在于\",{\"1\":{\"1055\":1}}],[\"进行代理\",{\"1\":{\"1023\":1}}],[\"进行窗口内数据的一系列更新\",{\"1\":{\"990\":2}}],[\"进行的\",{\"1\":{\"870\":1}}],[\"进行底层的选择操作\",{\"1\":{\"870\":1}}],[\"进行切片\",{\"1\":{\"831\":1}}],[\"进行增强\",{\"1\":{\"809\":1}}],[\"进行条件的范围合并\",{\"1\":{\"711\":1}}],[\"进行hash算法\",{\"1\":{\"656\":1}}],[\"进行连接\",{\"1\":{\"632\":1}}],[\"进行纵向计算\",{\"1\":{\"584\":1}}],[\"进行交互\",{\"1\":{\"408\":1}}],[\"进行一些不稳定的激进优化\",{\"1\":{\"269\":1}}],[\"进行简单可靠的稳定优化\",{\"1\":{\"267\":1}}],[\"进行分配担保\",{\"1\":{\"171\":1}}],[\"进行\",{\"1\":{\"154\":1,\"448\":1,\"490\":1,\"856\":1,\"1394\":1,\"1555\":1,\"1640\":1}}],[\"进行回收\",{\"1\":{\"154\":1}}],[\"进行索引时\",{\"1\":{\"69\":1}}],[\"进行搜索\",{\"1\":{\"53\":1}}],[\"进行语法分析\",{\"1\":{\"53\":1}}],[\"进行认证后\",{\"1\":{\"27\":1,\"1643\":1}}],[\"进入长三角\",{\"1\":{\"1825\":1}}],[\"进入run\",{\"1\":{\"1607\":1}}],[\"进入快恢复\",{\"1\":{\"1413\":1}}],[\"进入拥塞发生阶段\",{\"1\":{\"1413\":1}}],[\"进入交互模式\",{\"1\":{\"1343\":1}}],[\"进入支付流程\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"进入临界区\",{\"1\":{\"1076\":1}}],[\"进入死循环\",{\"1\":{\"871\":1}}],[\"进入代理对象的\",{\"1\":{\"101\":1}}],[\"进入\",{\"1\":{\"8\":1,\"156\":1,\"383\":1,\"863\":1,\"1095\":1,\"1116\":1,\"1203\":4,\"1410\":2}}],[\"进入条件队列\",{\"1\":{\"8\":1}}],[\"弹出用户登录页\",{\"1\":{\"27\":1,\"1643\":1}}],[\"跨源资源共享\",{\"1\":{\"1871\":1}}],[\"跨站脚本攻击\",{\"1\":{\"1642\":1}}],[\"跨站请求伪造\",{\"1\":{\"26\":1,\"1642\":1}}],[\"跨平台的自动化项目构建方式\",{\"1\":{\"1632\":1}}],[\"跨平台\",{\"1\":{\"1404\":1}}],[\"跨度\",{\"1\":{\"886\":1}}],[\"跨语言\",{\"1\":{\"404\":1,\"1625\":1}}],[\"跨域\",{\"1\":{\"27\":1,\"1643\":1}}],[\"单从建筑设计上来说\",{\"1\":{\"1847\":1}}],[\"单程计算量最大为900w次\",{\"1\":{\"1752\":1}}],[\"单词数\",{\"1\":{\"1685\":1}}],[\"单调性\",{\"1\":{\"1657\":1}}],[\"单进程\",{\"1\":{\"1488\":2}}],[\"单播\",{\"1\":{\"1425\":1}}],[\"单向通信\",{\"1\":{\"1456\":1}}],[\"单向递增的\",{\"1\":{\"1404\":1}}],[\"单向队列\",{\"1\":{\"987\":1}}],[\"单提交\",{\"0\":{\"1341\":1}}],[\"单体系统演化成分布式集群系统后\",{\"1\":{\"1262\":1}}],[\"单独讨论\",{\"1\":{\"1234\":1}}],[\"单次执行时间\",{\"1\":{\"999\":1}}],[\"单次查询被驱动表的成本\",{\"1\":{\"718\":1}}],[\"单次查询驱动表的成本\",{\"1\":{\"718\":1}}],[\"单机模式\",{\"1\":{\"1629\":1}}],[\"单机计算无法满足性能需求\",{\"1\":{\"1215\":1}}],[\"单机\",{\"0\":{\"904\":1}}],[\"单机吞吐量\",{\"1\":{\"435\":1}}],[\"单机吞吐量万级\",{\"1\":{\"410\":1}}],[\"单聊\",{\"1\":{\"848\":1}}],[\"单行字符串\",{\"1\":{\"846\":1}}],[\"单表查询的成本\",{\"0\":{\"717\":1}}],[\"单表查询\",{\"0\":{\"709\":1}}],[\"单列索引\",{\"1\":{\"699\":1}}],[\"单列索引与联合索引\",{\"1\":{\"699\":1}}],[\"单精度浮点数\",{\"1\":{\"662\":1}}],[\"单\",{\"1\":{\"541\":1,\"1488\":3}}],[\"单例并发问题\",{\"0\":{\"1614\":1}}],[\"单例池\",{\"1\":{\"1599\":1}}],[\"单例\",{\"0\":{\"1645\":1},\"1\":{\"507\":1,\"1028\":1,\"1382\":1,\"1614\":1}}],[\"单例模式\",{\"0\":{\"290\":1}}],[\"单个服务器的资源调度者\",{\"1\":{\"1222\":1}}],[\"单个zk节点的最大连接数\",{\"1\":{\"1164\":1}}],[\"单个\",{\"1\":{\"443\":1,\"791\":1}}],[\"单引号\",{\"1\":{\"357\":1}}],[\"单元测试是最小粒度的测试\",{\"1\":{\"1705\":1}}],[\"单元测试除了是一种测试手段外\",{\"1\":{\"1705\":1}}],[\"单元测试作为一个行之有效的工程实践\",{\"1\":{\"1705\":1}}],[\"单元测试\",{\"0\":{\"356\":1},\"1\":{\"1716\":1}}],[\"单位秒\",{\"1\":{\"1878\":1}}],[\"单位时间内成功传输的数据量\",{\"1\":{\"1490\":1}}],[\"单位是小时\",{\"1\":{\"1164\":1}}],[\"单位是ticktime\",{\"1\":{\"1164\":2}}],[\"单位\",{\"1\":{\"1106\":1}}],[\"单位s\",{\"1\":{\"908\":1}}],[\"单位ms\",{\"1\":{\"533\":1,\"785\":1}}],[\"单位毫秒\",{\"1\":{\"330\":1}}],[\"单位纳秒\",{\"1\":{\"6\":1}}],[\"单线程模型\",{\"1\":{\"1571\":1}}],[\"单线程\",{\"1\":{\"1263\":1,\"1525\":2,\"1582\":1}}],[\"单线程服务器端使用标准的堵塞式i\",{\"1\":{\"1131\":1}}],[\"单线程的程序发生一个未捕获的异常时我们可以采用\",{\"1\":{\"1096\":1}}],[\"单线程下可以使用\",{\"1\":{\"784\":1}}],[\"单线程下\",{\"1\":{\"782\":1}}],[\"单线程下stringbuilder效率更高\",{\"1\":{\"302\":1}}],[\"单线程程序和正确同步了的多线程程序\",{\"1\":{\"143\":1}}],[\"单继承多实现的特性使得\",{\"1\":{\"136\":1}}],[\"单值\",{\"1\":{\"122\":2}}],[\"单一的数据采集器\",{\"1\":{\"31\":1}}],[\"单点登录\",{\"1\":{\"27\":1,\"1643\":1}}],[\"会去转山\",{\"1\":{\"1833\":1}}],[\"会去创建\",{\"1\":{\"1599\":1}}],[\"会发现内容逐渐贫乏\",{\"1\":{\"1785\":1}}],[\"会发送一个\",{\"1\":{\"1410\":1}}],[\"会产生一个电子票号\",{\"1\":{\"1738\":1}}],[\"会产生trx\",{\"1\":{\"748\":1}}],[\"会报错verification\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"会报错\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"会报告该\",{\"1\":{\"1419\":1}}],[\"会返回返回类型的默认值\",{\"1\":{\"1708\":1}}],[\"会同时删除用户\",{\"1\":{\"1692\":1}}],[\"会同步删除跟踪分支和配置信息\",{\"1\":{\"1326\":1}}],[\"会同步修改跟踪的分支名\",{\"1\":{\"1326\":1}}],[\"会同步阻塞\",{\"1\":{\"813\":1}}],[\"会同步设置方法调用计数器为溢出状态\",{\"1\":{\"268\":1}}],[\"会从缓存中获取\",{\"1\":{\"1599\":1}}],[\"会阻塞主线程\",{\"1\":{\"1576\":1}}],[\"会阻塞线程池中所有线程\",{\"1\":{\"782\":1}}],[\"会统计所有非\",{\"1\":{\"1567\":1}}],[\"会直接返回错误信息\",{\"1\":{\"1566\":1}}],[\"会直接分配\",{\"1\":{\"1445\":1}}],[\"会检查老年代是否有足够的连续空间\",{\"1\":{\"1524\":1}}],[\"会暂停整个应用程序\",{\"1\":{\"1524\":1}}],[\"会暂停外层事务\",{\"1\":{\"1049\":2}}],[\"会立刻刷新回主内存\",{\"1\":{\"1507\":1}}],[\"会立即把该线程对应的本地内存中共享变量的值刷新到主内存\",{\"1\":{\"145\":1}}],[\"会唤醒\",{\"1\":{\"1446\":1}}],[\"会预分配一定的空间作为内存池\",{\"1\":{\"1445\":1}}],[\"会打断正在执行的进程\",{\"1\":{\"1437\":1}}],[\"会加重总线负载\",{\"1\":{\"1435\":1}}],[\"会加载主类\",{\"1\":{\"247\":1}}],[\"会让引用计数\",{\"1\":{\"1420\":1}}],[\"会维护两个队列\",{\"1\":{\"1414\":1}}],[\"会造成极大资源浪费\",{\"1\":{\"1412\":1}}],[\"会造成大量的磁盘io\",{\"1\":{\"638\":1}}],[\"会占用系统资源\",{\"1\":{\"1410\":1}}],[\"会一直重传数据包直至最大次数\",{\"1\":{\"1409\":1}}],[\"会一直阻塞\",{\"1\":{\"1188\":1,\"1504\":1}}],[\"会拷贝一份\",{\"1\":{\"1395\":1}}],[\"会自动应用解决方案\",{\"1\":{\"1347\":1}}],[\"会自动记录合并冲突的解决方案\",{\"1\":{\"1347\":1}}],[\"会自动获取结果中返回的列名\",{\"1\":{\"529\":1}}],[\"会指向最后一次修改的补丁\",{\"1\":{\"1337\":1}}],[\"会有两个父提交\",{\"1\":{\"1336\":1}}],[\"会生成一个\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"会基于\",{\"1\":{\"1220\":1}}],[\"会查询列表找到所有\",{\"1\":{\"1190\":1}}],[\"会定期删除没有续约的\",{\"1\":{\"1169\":1}}],[\"会定期检查脚本运行时长\",{\"1\":{\"966\":1}}],[\"会话元\",{\"1\":{\"1862\":1}}],[\"会话名称\",{\"1\":{\"1862\":1}}],[\"会话描述协议\",{\"1\":{\"1860\":1}}],[\"会话产生一个新实例\",{\"1\":{\"1596\":1}}],[\"会话结束后会被自动删除\",{\"1\":{\"1169\":1}}],[\"会话层包括\",{\"1\":{\"1862\":1}}],[\"会话层为这个传递过程提供可靠性\",{\"1\":{\"405\":1}}],[\"会话层\",{\"1\":{\"405\":1,\"1393\":1}}],[\"会跳过所有安全检查\",{\"1\":{\"1139\":1}}],[\"会通过\",{\"1\":{\"1114\":1}}],[\"会通知引用实例改变状态\",{\"1\":{\"186\":1}}],[\"会设定超时等待\",{\"1\":{\"1109\":1}}],[\"会按如下的逻辑进行处理\",{\"1\":{\"1106\":1}}],[\"会按照\",{\"1\":{\"839\":1}}],[\"会重传\",{\"1\":{\"1409\":1}}],[\"会重偏向至加锁的\",{\"1\":{\"1077\":1}}],[\"会重置\",{\"1\":{\"768\":1}}],[\"会撤销偏向锁升级为重量级锁\",{\"1\":{\"1077\":1}}],[\"会撤销偏向锁\",{\"1\":{\"1077\":1}}],[\"会导致所有对象的\",{\"1\":{\"1535\":1}}],[\"会导致其所属进程的所有线程崩溃\",{\"1\":{\"1451\":1}}],[\"会导致主从延迟\",{\"1\":{\"550\":1}}],[\"会导入负责自动代理的\",{\"1\":{\"1058\":1}}],[\"会为a创建clusternode\",{\"1\":{\"945\":1}}],[\"会为每个已加载的类维护一个常量池\",{\"1\":{\"211\":1}}],[\"会要求其他sentinel将自己设置为局部领头\",{\"1\":{\"942\":1}}],[\"会被大文件占满\",{\"1\":{\"1486\":1}}],[\"会被其它sentinel接收到\",{\"1\":{\"940\":1}}],[\"会被临时踢出\",{\"1\":{\"471\":1}}],[\"会创建一个提交对象\",{\"1\":{\"1332\":1}}],[\"会创建一个新线程来执行任务\",{\"1\":{\"1109\":1}}],[\"会创建一个新事务\",{\"1\":{\"1049\":1}}],[\"会创建对应的从服务器结构和对应的命令连接\",{\"1\":{\"940\":1}}],[\"会创建用于执行aof文件的伪客户端\",{\"1\":{\"924\":1}}],[\"会调用\",{\"1\":{\"1012\":1,\"1535\":1}}],[\"会调用flushappendonlyfile函数\",{\"1\":{\"916\":1}}],[\"会调用装饰类内部获取\",{\"1\":{\"25\":1}}],[\"会显式地向所有从服务器发送一个del命令\",{\"1\":{\"908\":1}}],[\"会记录键空间命中\",{\"1\":{\"907\":1}}],[\"会触发\",{\"1\":{\"1189\":1}}],[\"会触发所有\",{\"1\":{\"867\":1}}],[\"会触发其加载过程\",{\"1\":{\"247\":1}}],[\"会启动\",{\"1\":{\"865\":1}}],[\"会负责释放未处理消息\",{\"1\":{\"829\":1}}],[\"会随之移动\",{\"1\":{\"827\":2}}],[\"会参与拷贝\",{\"1\":{\"799\":2}}],[\"会拿到实际的物理\",{\"1\":{\"791\":1}}],[\"会影响\",{\"1\":{\"788\":1}}],[\"会影响增删改的效率\",{\"1\":{\"708\":1}}],[\"会向aof文件追加del命令\",{\"1\":{\"908\":1}}],[\"会向\",{\"1\":{\"786\":1}}],[\"会根据用户输入去查邻近城市的机场做一个兜底\",{\"1\":{\"1362\":1}}],[\"会根据命令类型自动识别路径所指的文件系统\",{\"1\":{\"1218\":1}}],[\"会根据\",{\"1\":{\"1042\":1}}],[\"会根据配置文件\",{\"1\":{\"1025\":1}}],[\"会根据操作系统\",{\"1\":{\"784\":1}}],[\"会根据paritition机制选择将消息存储到哪一个partition\",{\"1\":{\"451\":1}}],[\"会利用系统提供的发送缓冲区和接收缓冲区\",{\"1\":{\"760\":1}}],[\"会异步预读下一个区的全部页面\",{\"1\":{\"732\":1}}],[\"会在对象头和栈帧的锁记录里存储锁偏向的线程\",{\"1\":{\"1515\":1}}],[\"会在定时器过期之前\",{\"1\":{\"1411\":1}}],[\"会在该日志中记录\",{\"1\":{\"1346\":1}}],[\"会在集群启动\",{\"1\":{\"1202\":1}}],[\"会在线程退出前被调用\",{\"1\":{\"1093\":1}}],[\"会在外面再多包一层\",{\"1\":{\"822\":1}}],[\"会在连接建立时被调用\",{\"1\":{\"820\":1}}],[\"会在连接建立后执行初始化\",{\"1\":{\"813\":2}}],[\"会在\",{\"1\":{\"530\":1,\"1058\":1}}],[\"会在写操作期间\",{\"1\":{\"74\":1}}],[\"会使用自带的事务管理器覆盖此配置\",{\"1\":{\"525\":1}}],[\"会尽量保持原有分配的分区不变化\",{\"1\":{\"497\":1}}],[\"会新创建一个segment保存新的消息\",{\"1\":{\"476\":1}}],[\"会先执行它前面的阶段\",{\"1\":{\"1632\":1}}],[\"会先获取该数据行所在表的意向锁\",{\"1\":{\"1560\":1}}],[\"会先判断队列中是否有其他等待的节点\",{\"1\":{\"1518\":1}}],[\"会先判断常量池里面是否有相同的字符串\",{\"1\":{\"300\":1}}],[\"会先计算每一个子目录的校验和\",{\"1\":{\"1332\":1}}],[\"会先连接节点再进行转向\",{\"1\":{\"947\":1}}],[\"会先找出所有可能的方案\",{\"1\":{\"717\":1}}],[\"会先锁定该非主键索引\",{\"1\":{\"554\":1}}],[\"会先将各自的\",{\"1\":{\"471\":1}}],[\"会读取本地磁盘记录的\",{\"1\":{\"471\":1}}],[\"会继续向\",{\"1\":{\"470\":1}}],[\"会监测到节点变化\",{\"1\":{\"470\":1}}],[\"会监听到节点变化\",{\"1\":{\"466\":1}}],[\"会成为\",{\"1\":{\"470\":1}}],[\"会缓存\",{\"1\":{\"462\":1}}],[\"会再次发送这条消息\",{\"1\":{\"461\":1}}],[\"会带来严重的网络消耗\",{\"1\":{\"450\":1}}],[\"会投递给别人\",{\"1\":{\"422\":1}}],[\"会释放对应的对象锁\",{\"1\":{\"1512\":1}}],[\"会释放\",{\"1\":{\"365\":1}}],[\"会将b再注入到a中\",{\"1\":{\"1599\":1}}],[\"会将该执行计划编译成可执行的机器码\",{\"1\":{\"1566\":1}}],[\"会将该字符串对应的常量加入常量池\",{\"1\":{\"1536\":1}}],[\"会将该进程唤醒运行\",{\"1\":{\"1460\":1}}],[\"会将该类的所有对象设为不可偏向\",{\"1\":{\"1077\":1}}],[\"会将冲突的内容用下面的格式展示在文件中\",{\"1\":{\"1336\":1}}],[\"会将自己选票交给\",{\"1\":{\"1203\":1}}],[\"会将数据切分发送\",{\"1\":{\"839\":1}}],[\"会将池中的符号引用替换为直接引用\",{\"1\":{\"211\":1}}],[\"会将每一个文档的数据利用分词算法计算得到一个个词条\",{\"1\":{\"35\":1}}],[\"会把消息持久化到磁盘\",{\"1\":{\"1626\":1}}],[\"会把\",{\"1\":{\"1533\":1}}],[\"会把未读完的部分向前压缩\",{\"1\":{\"768\":1}}],[\"会把数据变更记录在二进制日志文件\",{\"1\":{\"648\":1}}],[\"会把类的常量池数据放入运行时常量池\",{\"1\":{\"211\":1}}],[\"会把类元信息放入方法区\",{\"1\":{\"211\":1}}],[\"会把立即该线程对应的本地内存置为无效\",{\"1\":{\"145\":1}}],[\"会尝试在安全的时候避免做拷贝\",{\"1\":{\"64\":1}}],[\"会抛出异常\",{\"1\":{\"1049\":4}}],[\"会抛出\",{\"1\":{\"58\":1,\"855\":1}}],[\"会初始化同步器\",{\"1\":{\"4\":1}}],[\"时系统应分配给下一个事务的id值\",{\"1\":{\"1557\":1}}],[\"时系统中活跃的读写事务最小id\",{\"1\":{\"1557\":1}}],[\"时系统中活跃的读写事务的id列表\",{\"1\":{\"1557\":1}}],[\"时线程会被阻塞\",{\"1\":{\"1478\":1}}],[\"时钟页面置换\",{\"1\":{\"1471\":1}}],[\"时钟周期不被浪费\",{\"1\":{\"1119\":1}}],[\"时会先放进\",{\"1\":{\"1445\":1}}],[\"时会在\",{\"1\":{\"471\":1}}],[\"时拷贝成多份小\",{\"1\":{\"1395\":1}}],[\"时推送本地的\",{\"1\":{\"1351\":1}}],[\"时获取远程服务器的\",{\"1\":{\"1351\":1}}],[\"时不随同复制\",{\"1\":{\"1345\":1}}],[\"时不会阻塞直接放行\",{\"1\":{\"364\":1}}],[\"时将本地\",{\"1\":{\"1326\":1}}],[\"时将远程\",{\"1\":{\"1326\":1}}],[\"时的源地址默认名称为\",{\"1\":{\"1326\":1}}],[\"时的底层细节开发工作\",{\"1\":{\"1178\":1}}],[\"时开启同步锁\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"时自动续期\",{\"1\":{\"1264\":1}}],[\"时自动更新\",{\"1\":{\"192\":1}}],[\"时分配到不同\",{\"1\":{\"1226\":1}}],[\"时才释放\",{\"1\":{\"1561\":1}}],[\"时才需要写到内存中\",{\"1\":{\"1435\":1}}],[\"时才会赋值\",{\"1\":{\"1077\":1}}],[\"时才能进行回收\",{\"1\":{\"176\":1}}],[\"时从三级缓存中移除\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"时刷新\",{\"1\":{\"533\":1}}],[\"时就往这个分区去提交offset\",{\"1\":{\"483\":1}}],[\"时效性\",{\"1\":{\"410\":1}}],[\"时被唤醒\",{\"1\":{\"139\":1}}],[\"时间线\",{\"0\":{\"1815\":1,\"1824\":1}}],[\"时间复杂度$o\",{\"1\":{\"1662\":1,\"1663\":1,\"1664\":1,\"1665\":1}}],[\"时间复杂度非常高\",{\"1\":{\"976\":1}}],[\"时间的影响\",{\"1\":{\"1573\":1}}],[\"时间后\",{\"1\":{\"1410\":1}}],[\"时间误差大等问题\",{\"1\":{\"1288\":1}}],[\"时间\",{\"1\":{\"1079\":1,\"1367\":1,\"1529\":1}}],[\"时间事件在文件事件之后\",{\"1\":{\"921\":1}}],[\"时间事件处理器\",{\"1\":{\"920\":1}}],[\"时间事件\",{\"0\":{\"920\":1},\"1\":{\"918\":1,\"1572\":1}}],[\"时间事件负责执行servercron这样定时运行的函数\",{\"1\":{\"916\":1}}],[\"时间值加上一个时间间隔expr后的时间值\",{\"1\":{\"595\":1}}],[\"时间格式化和解析\",{\"1\":{\"353\":1}}],[\"时间毫秒值\",{\"1\":{\"353\":1}}],[\"时间取决于涉及的引用数量\",{\"1\":{\"178\":1}}],[\"时间取决于堆中存活对象的数量和对象图的复杂程度\",{\"1\":{\"178\":1}}],[\"时间片轮转\",{\"1\":{\"1470\":1}}],[\"时间片\",{\"1\":{\"139\":1}}],[\"时间片用完放入下一级队列\",{\"1\":{\"1470\":1}}],[\"时间片用完\",{\"1\":{\"134\":1}}],[\"时间频率间隔\",{\"1\":{\"112\":1}}],[\"时间戳判断可见性\",{\"1\":{\"1557\":1}}],[\"时间戳机制\",{\"1\":{\"1418\":1}}],[\"时间戳索引文件\",{\"1\":{\"475\":1}}],[\"时间戳转日期\",{\"1\":{\"129\":1}}],[\"时间戳\",{\"1\":{\"112\":1,\"353\":1,\"1396\":1,\"1622\":1}}],[\"时再传递一个\",{\"1\":{\"73\":1}}],[\"时\",{\"1\":{\"25\":1,\"91\":2,\"223\":1,\"332\":1,\"366\":2,\"476\":2,\"513\":1,\"619\":1,\"707\":1,\"732\":1,\"785\":1,\"818\":1,\"827\":1,\"829\":1,\"839\":1,\"871\":1,\"941\":1,\"1012\":1,\"1023\":1,\"1379\":1,\"1410\":1,\"1412\":1,\"1493\":1,\"1791\":1}}],[\"放下行李\",{\"1\":{\"1834\":1}}],[\"放寒假后就开始从学校一路玩回去\",{\"1\":{\"1825\":1}}],[\"放十年前\",{\"1\":{\"1810\":1}}],[\"放于选项末尾\",{\"1\":{\"1688\":1}}],[\"放置不希望记录到\",{\"1\":{\"1349\":1}}],[\"放一个数字\",{\"1\":{\"619\":1}}],[\"放在类上\",{\"1\":{\"418\":1}}],[\"放在方法\",{\"1\":{\"297\":1}}],[\"放在\",{\"1\":{\"224\":1}}],[\"放在哪的问题\",{\"1\":{\"210\":1}}],[\"放入暂存区\",{\"1\":{\"1315\":1}}],[\"放入缓存\",{\"1\":{\"1261\":1}}],[\"放入缓存都要在临界区里保证原子性\",{\"1\":{\"1261\":1}}],[\"放入一级缓存\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"放入一个\",{\"1\":{\"196\":1}}],[\"放入单例池并返回\",{\"1\":{\"1006\":1}}],[\"放入ht\",{\"1\":{\"883\":1}}],[\"放入\",{\"1\":{\"154\":1,\"829\":1,\"856\":1,\"1012\":1,\"1395\":1,\"1514\":1}}],[\"放入当前请求的共享数据中\",{\"1\":{\"25\":1}}],[\"放弃回去接着睡了\",{\"1\":{\"1842\":1}}],[\"放弃阿里云盘观影\",{\"1\":{\"1811\":1}}],[\"放弃\",{\"1\":{\"148\":1}}],[\"放到不同的\",{\"1\":{\"1590\":1}}],[\"放到一个文件描述符集合\",{\"1\":{\"1487\":1}}],[\"放到\",{\"1\":{\"53\":1}}],[\"放行前后执行增强逻辑\",{\"1\":{\"1019\":1}}],[\"放行\",{\"1\":{\"25\":1,\"1021\":1,\"1022\":1}}],[\"过夜\",{\"1\":{\"1825\":1}}],[\"过完春节\",{\"1\":{\"1825\":1}}],[\"过圣诞节\",{\"1\":{\"1759\":1}}],[\"过长会引起短作业进程的响应时间变长\",{\"1\":{\"1470\":1}}],[\"过短导致怕频繁的上下文切换\",{\"1\":{\"1470\":1}}],[\"过去所有被截获的\",{\"1\":{\"1402\":1}}],[\"过期删除策略\",{\"0\":{\"1573\":1}}],[\"过期键依然会加载\",{\"1\":{\"908\":1}}],[\"过期键不会加载\",{\"1\":{\"908\":1}}],[\"过期键不会写入新创建的rdb文件\",{\"1\":{\"908\":1}}],[\"过期字典\",{\"1\":{\"908\":1}}],[\"过期回收\",{\"0\":{\"908\":1}}],[\"过期\",{\"1\":{\"154\":1,\"1514\":1,\"1629\":1}}],[\"过期时间等都保持一致\",{\"1\":{\"1235\":1}}],[\"过期时间\",{\"1\":{\"15\":1,\"1234\":1,\"1268\":1,\"1586\":1}}],[\"过滤特定字段不返回\",{\"1\":{\"1608\":1}}],[\"过滤有机场的城市\",{\"1\":{\"1360\":1}}],[\"过滤已提交\",{\"1\":{\"1333\":1}}],[\"过滤\",{\"1\":{\"1026\":1}}],[\"过滤器的结果有三种\",{\"1\":{\"388\":1}}],[\"过滤广东省的订单\",{\"1\":{\"124\":1}}],[\"过滤所有请求\",{\"1\":{\"25\":1}}],[\"过程方便易读最好\",{\"1\":{\"1337\":1}}],[\"过程如图\",{\"1\":{\"648\":1}}],[\"过程如下\",{\"1\":{\"450\":1}}],[\"过程做原子绑定\",{\"1\":{\"499\":1}}],[\"过程\",{\"0\":{\"101\":1},\"1\":{\"570\":1,\"1409\":1,\"1410\":1,\"1523\":1}}],[\"自由\",{\"1\":{\"1816\":1}}],[\"自由转换\",{\"1\":{\"129\":1}}],[\"自行车\",{\"2\":{\"1798\":1}}],[\"自营业务\",{\"1\":{\"1726\":1,\"1727\":1}}],[\"自定了\",{\"1\":{\"1465\":1}}],[\"自定义加载器继承classloader\",{\"1\":{\"1528\":1}}],[\"自定义消息结构\",{\"1\":{\"1417\":1}}],[\"自定义线程池\",{\"1\":{\"1369\":1}}],[\"自定义线程无法继承其它类\",{\"1\":{\"327\":1}}],[\"自定义\",{\"1\":{\"1015\":1,\"1532\":1,\"1791\":1}}],[\"自定义缓存实现\",{\"1\":{\"533\":1}}],[\"自定义缓存实现外\",{\"1\":{\"73\":1}}],[\"自定义生成主键策略\",{\"1\":{\"530\":1}}],[\"自定义实例化方式\",{\"1\":{\"522\":1}}],[\"自定义分区器\",{\"0\":{\"453\":1}}],[\"自定义协议\",{\"0\":{\"847\":1},\"1\":{\"435\":2}}],[\"自定义注解\",{\"1\":{\"348\":1}}],[\"自定义异常对象\",{\"1\":{\"347\":1}}],[\"自定义异常\",{\"0\":{\"347\":1}}],[\"自定义泛型接口\",{\"1\":{\"306\":1}}],[\"自定义泛型方法\",{\"1\":{\"306\":1}}],[\"自定义泛型类\",{\"1\":{\"306\":1}}],[\"自定义类加载器可以用于实现一些特殊的类加载需求\",{\"1\":{\"254\":1}}],[\"自定义类加载器需要继承\",{\"1\":{\"254\":1}}],[\"自定义类加载器是用户自己实现的类加载器\",{\"1\":{\"254\":1}}],[\"自定义类加载器\",{\"1\":{\"254\":1}}],[\"自定义累加规则\",{\"1\":{\"150\":2}}],[\"自定义列分隔符\",{\"1\":{\"121\":1}}],[\"自定义数据库存储位置\",{\"1\":{\"107\":1}}],[\"自定义的方法拦截器\",{\"1\":{\"1019\":1}}],[\"自定义的\",{\"1\":{\"91\":1,\"1021\":1,\"1022\":1}}],[\"自定义迭代方式等等\",{\"1\":{\"71\":1}}],[\"自定义排序逻辑\",{\"1\":{\"61\":1}}],[\"自定义序列化机制\",{\"1\":{\"24\":1}}],[\"自增的主键对写入性能影响小\",{\"1\":{\"1548\":1}}],[\"自增自己的\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"自增主键\",{\"1\":{\"615\":1,\"1374\":1}}],[\"自主管理内存资源等\",{\"1\":{\"1134\":1}}],[\"自\",{\"1\":{\"807\":1}}],[\"自己身上也攒了点小钱\",{\"1\":{\"1825\":1}}],[\"自己一个人干了两个系统的开发\",{\"1\":{\"1784\":1}}],[\"自己学的那些皮毛\",{\"1\":{\"1773\":1}}],[\"自己构建了\",{\"1\":{\"1571\":1}}],[\"自己\",{\"1\":{\"1115\":1}}],[\"自己做方法匹配\",{\"1\":{\"1021\":1}}],[\"自己的程序里面无法导入\",{\"1\":{\"1135\":1}}],[\"自己的\",{\"1\":{\"771\":1,\"772\":1}}],[\"自己计数\",{\"1\":{\"619\":1}}],[\"自适应自旋等等的优化措施\",{\"1\":{\"1515\":1}}],[\"自适应调节策略可以在不同网络环境下都能保持较好的性能\",{\"1\":{\"861\":1}}],[\"自适应哈希索引等信息的内存空间\",{\"1\":{\"730\":1}}],[\"自适应hash索引\",{\"1\":{\"638\":1}}],[\"自平衡二叉树\",{\"1\":{\"698\":1}}],[\"自然灾害\",{\"1\":{\"1638\":1}}],[\"自然就有去中心化\",{\"1\":{\"1215\":1}}],[\"自然月分片\",{\"1\":{\"656\":1}}],[\"自然排序\",{\"1\":{\"61\":2}}],[\"自该视图起\",{\"1\":{\"623\":1}}],[\"自连接查询\",{\"0\":{\"605\":1},\"1\":{\"605\":1}}],[\"自带的\",{\"1\":{\"1218\":1}}],[\"自带的java\",{\"1\":{\"71\":1}}],[\"自带8kb缓冲区\",{\"1\":{\"319\":1}}],[\"自循环说明已被移除\",{\"1\":{\"195\":1}}],[\"自动部署博客\",{\"0\":{\"1789\":1}}],[\"自动抛出最后一个异常\",{\"1\":{\"1713\":1}}],[\"自动初始化\",{\"1\":{\"1709\":1}}],[\"自动化测试用例的执行速度要快\",{\"1\":{\"1705\":1}}],[\"自动确认\",{\"1\":{\"1694\":2}}],[\"自动创建不存在的父目录\",{\"1\":{\"1682\":1}}],[\"自动创建父目录\",{\"1\":{\"1218\":1}}],[\"自动装配的关键注解\",{\"1\":{\"1598\":1}}],[\"自动装配\",{\"0\":{\"1598\":1},\"1\":{\"1608\":1}}],[\"自动装箱和拆箱允许基本类型与对应的包装类型之间进行隐式转换\",{\"1\":{\"263\":1}}],[\"自动装箱和拆箱\",{\"1\":{\"263\":1}}],[\"自动检测\",{\"1\":{\"1589\":1}}],[\"自动回收\",{\"1\":{\"1514\":1}}],[\"自动进行故障转移\",{\"1\":{\"1589\":1}}],[\"自动进行事务管理\",{\"1\":{\"1040\":1}}],[\"自动进入\",{\"1\":{\"1410\":1}}],[\"自动追踪复制源\",{\"1\":{\"1347\":1}}],[\"自动关单和自动解锁库存两个业务通过重新查询当前的状态来保证幂等性\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"自动关闭资源\",{\"1\":{\"346\":1}}],[\"自动执行的退出\",{\"1\":{\"1093\":1}}],[\"自动保存\",{\"0\":{\"912\":1}}],[\"自动拼接\",{\"1\":{\"778\":1}}],[\"自动生成的rowid作为隐藏的聚集索引\",{\"1\":{\"699\":1}}],[\"自动生成两个文件\",{\"1\":{\"675\":1}}],[\"自动生成测试报告\",{\"1\":{\"356\":1}}],[\"自动加锁\",{\"1\":{\"558\":2}}],[\"自动将下线主服务器属下的某个从服务器升级为新的主服务器\",{\"1\":{\"938\":1}}],[\"自动将一个\",{\"1\":{\"846\":1}}],[\"自动将\",{\"1\":{\"520\":1}}],[\"自动将偏移量重置为最新偏移量\",{\"1\":{\"493\":1}}],[\"自动将偏移量重置为最早的偏移量\",{\"1\":{\"493\":1}}],[\"自动提交虽然简单方便\",{\"1\":{\"492\":1}}],[\"自动提交\",{\"0\":{\"491\":1},\"1\":{\"491\":1,\"508\":1}}],[\"自动\",{\"1\":{\"467\":1}}],[\"自动实现负载均衡\",{\"1\":{\"431\":1}}],[\"自动对精度进行截断处理\",{\"1\":{\"351\":1}}],[\"自动按键排序\",{\"1\":{\"305\":1}}],[\"自动排序\",{\"1\":{\"304\":1}}],[\"自动public\",{\"1\":{\"292\":2}}],[\"自动触发清除任务时间间隔\",{\"1\":{\"1164\":1}}],[\"自动触发\",{\"1\":{\"289\":1}}],[\"自动类型转换\",{\"1\":{\"287\":1}}],[\"自动调用\",{\"1\":{\"212\":1}}],[\"自动移除等扩展功能\",{\"1\":{\"72\":1}}],[\"自动合并\",{\"1\":{\"70\":1}}],[\"自动推断用户定义的字段\",{\"1\":{\"42\":1}}],[\"自动续期\",{\"1\":{\"25\":1}}],[\"自旋\",{\"1\":{\"1263\":1}}],[\"自旋的机会也会越多\",{\"1\":{\"1079\":1}}],[\"自旋成功次数多\",{\"1\":{\"1079\":1}}],[\"自旋会占用\",{\"1\":{\"1079\":1}}],[\"自旋循环时间过长\",{\"1\":{\"148\":1}}],[\"自旋锁则忙等\",{\"1\":{\"1468\":1}}],[\"自旋锁是自适应的\",{\"1\":{\"1079\":1}}],[\"自旋锁\",{\"0\":{\"1079\":1},\"1\":{\"10\":1,\"1463\":1,\"1468\":2}}],[\"自旋次数\",{\"1\":{\"6\":1}}],[\"自旋完了还是没抢到\",{\"1\":{\"6\":1}}],[\"开个会员还是挺爽的\",{\"1\":{\"1811\":1}}],[\"开放定址法\",{\"1\":{\"1389\":1}}],[\"开头防止递归\",{\"1\":{\"1330\":1}}],[\"开头的\",{\"1\":{\"1547\":1}}],[\"开头的行都会被\",{\"1\":{\"1330\":1}}],[\"开头的是\",{\"1\":{\"940\":1}}],[\"开头的是sentinel本身信息\",{\"1\":{\"940\":1}}],[\"开头的读方法可以读取指定位置的数据\",{\"1\":{\"828\":1}}],[\"开头的写方法可以修改指定位置的数据\",{\"1\":{\"828\":1}}],[\"开源方案例如\",{\"1\":{\"1622\":1}}],[\"开源免费\",{\"1\":{\"666\":1}}],[\"开源的服务器端数据处理管道\",{\"1\":{\"31\":1}}],[\"开发策略软件复用\",{\"1\":{\"1641\":1}}],[\"开发者很容易通过模块确定自己所负责的内容\",{\"1\":{\"1632\":1}}],[\"开发者难以把握offset提交的时机\",{\"1\":{\"492\":1}}],[\"开发工具\",{\"0\":{\"1630\":1}}],[\"开发人员只需要关注具体的业务逻辑和需要回滚的情况即可\",{\"1\":{\"1039\":1}}],[\"开发人员只需要连接mycat即可\",{\"1\":{\"654\":1}}],[\"开发一个简单的服务端和客户端为案例\",{\"1\":{\"810\":1}}],[\"开发中的地位\",{\"1\":{\"808\":1}}],[\"开发语言\",{\"1\":{\"435\":1}}],[\"开发并且提供商业支持\",{\"1\":{\"411\":1}}],[\"开发手册\",{\"1\":{\"391\":1}}],[\"开发常用\",{\"1\":{\"348\":1}}],[\"开发的高并发主流\",{\"1\":{\"410\":1}}],[\"开发的一个即时通讯协议\",{\"1\":{\"407\":1}}],[\"开发的\",{\"1\":{\"238\":1}}],[\"开销\",{\"1\":{\"1571\":1}}],[\"开销过大\",{\"1\":{\"1489\":1}}],[\"开销比进程低得多\",{\"1\":{\"1454\":1}}],[\"开销很小\",{\"1\":{\"407\":1}}],[\"开销较小\",{\"1\":{\"134\":1,\"1468\":1}}],[\"开销较大\",{\"1\":{\"134\":1,\"1187\":1}}],[\"开销大\",{\"1\":{\"17\":1}}],[\"开始截取的时间\",{\"1\":{\"1878\":1}}],[\"开始不插电清唱\",{\"1\":{\"1841\":1}}],[\"开始狂吸\",{\"1\":{\"1834\":1}}],[\"开始一顿狂拍\",{\"1\":{\"1833\":1}}],[\"开始用行者记录自己的骑行记录\",{\"1\":{\"1796\":1}}],[\"开始痛苦\",{\"0\":{\"1773\":1}}],[\"开始到处快乐\",{\"1\":{\"1772\":1}}],[\"开始\",{\"1\":{\"1567\":1,\"1689\":1}}],[\"开始写\",{\"1\":{\"1556\":1}}],[\"开始写单测接口\",{\"1\":{\"1245\":1}}],[\"开始先初始化cwnd\",{\"1\":{\"1413\":1}}],[\"开始变基\",{\"1\":{\"1344\":1}}],[\"开始全局事务\",{\"1\":{\"1287\":1}}],[\"开始创建\",{\"1\":{\"1114\":1}}],[\"开始同步\",{\"1\":{\"936\":1}}],[\"开始调用\",{\"1\":{\"873\":1}}],[\"开始触发后续出站处理器的执行\",{\"1\":{\"823\":1}}],[\"开始计算\",{\"1\":{\"822\":1}}],[\"开始重新从\",{\"1\":{\"471\":1}}],[\"开始执行启发式过期数据清理\",{\"1\":{\"154\":1,\"1514\":1}}],[\"开始的\",{\"1\":{\"153\":1}}],[\"开始提供的\",{\"1\":{\"59\":1}}],[\"开始也提供了\",{\"1\":{\"58\":1}}],[\"开启jpa审计\",{\"1\":{\"1608\":1}}],[\"开启方法\",{\"1\":{\"1447\":1}}],[\"开启缓存\",{\"1\":{\"1368\":1}}],[\"开启的事务相互独立\",{\"1\":{\"1276\":1,\"1611\":1}}],[\"开启新事物并返回\",{\"1\":{\"1049\":1}}],[\"开启新事务\",{\"1\":{\"1049\":1}}],[\"开启新的空事物并返回\",{\"1\":{\"1049\":1}}],[\"开启非阻塞模式\",{\"1\":{\"783\":1}}],[\"开启同步\",{\"1\":{\"649\":1}}],[\"开启查询日志后\",{\"1\":{\"644\":1}}],[\"开启游标\",{\"1\":{\"634\":1}}],[\"开启从本地加载文件导入数据的开关\",{\"1\":{\"614\":1}}],[\"开启profiling\",{\"1\":{\"612\":1}}],[\"开启mysql慢日志查询开关\",{\"1\":{\"612\":1}}],[\"开启事务绑定\",{\"1\":{\"1045\":1}}],[\"开启事务管理\",{\"1\":{\"1040\":1}}],[\"开启事务\",{\"0\":{\"1049\":1},\"1\":{\"461\":2,\"1033\":1,\"1049\":1,\"1059\":1,\"1608\":1}}],[\"开启幂等性\",{\"1\":{\"461\":2,\"462\":1}}],[\"开启发送确认\",{\"1\":{\"417\":1}}],[\"开启全部性能监控\",{\"1\":{\"267\":1}}],[\"开启统计功能\",{\"1\":{\"73\":1}}],[\"开启\",{\"1\":{\"24\":1,\"858\":1,\"870\":1,\"1056\":1}}],[\"略去无关内容\",{\"1\":{\"1016\":1}}],[\"略\",{\"1\":{\"24\":1,\"50\":1,\"1096\":1}}],[\"本书\",{\"1\":{\"1826\":1}}],[\"本周恭王府\",{\"1\":{\"1775\":1}}],[\"本\",{\"1\":{\"1765\":1,\"1767\":1,\"1826\":1}}],[\"本国装载客货飞协议国\",{\"1\":{\"1744\":1}}],[\"本次回应的数据长度\",{\"1\":{\"1398\":1}}],[\"本机请求\",{\"1\":{\"1366\":1}}],[\"本仓库特定的配置文件\",{\"1\":{\"1349\":1}}],[\"本回滚段对应的10byte\",{\"1\":{\"751\":1}}],[\"本回滚段管理的所有undo页面链表中页面数量之和的上限\",{\"1\":{\"751\":1}}],[\"本组是否含xid信息\",{\"1\":{\"749\":1}}],[\"本组第一条日志在页面中的偏移量\",{\"1\":{\"749\":1}}],[\"本undo页面链表对应段头信息\",{\"1\":{\"749\":1}}],[\"本undo页面链表最后一个undo\",{\"1\":{\"749\":1}}],[\"本undo页面链表所处状态\",{\"1\":{\"749\":1}}],[\"本页面存储的undo日志类型\",{\"1\":{\"749\":1}}],[\"本身不支持延迟队列\",{\"1\":{\"1629\":1}}],[\"本身包含\",{\"1\":{\"1404\":1}}],[\"本身有持久化机制\",{\"1\":{\"1374\":1}}],[\"本身通过一层层的继承关系实现了\",{\"1\":{\"1058\":1}}],[\"本身实现了\",{\"1\":{\"1021\":1}}],[\"本身\",{\"1\":{\"1010\":1}}],[\"本身并不具备\",{\"1\":{\"799\":1}}],[\"本身用java语言实现\",{\"1\":{\"228\":1}}],[\"本身是只读对象\",{\"1\":{\"896\":1}}],[\"本身是分布式集群\",{\"1\":{\"478\":1}}],[\"本身是一个守护线程\",{\"1\":{\"188\":1}}],[\"本身是有有效期的\",{\"1\":{\"21\":1}}],[\"本地仓库\",{\"1\":{\"1632\":1}}],[\"本地通信\",{\"1\":{\"1461\":1}}],[\"本地dns\",{\"1\":{\"1424\":1}}],[\"本地回环接口\",{\"1\":{\"1422\":1}}],[\"本地回环地址\",{\"1\":{\"1422\":1}}],[\"本地回环地址的\",{\"1\":{\"839\":1}}],[\"本地ip最后都会走\",{\"1\":{\"1422\":1}}],[\"本地的\",{\"1\":{\"1351\":1}}],[\"本地分支默认同名\",{\"1\":{\"1338\":1}}],[\"本地协议\",{\"1\":{\"1314\":1}}],[\"本地命令\",{\"0\":{\"1313\":1}}],[\"本地事务\",{\"0\":{\"1273\":1},\"1\":{\"1273\":1}}],[\"本地锁解决方案\",{\"1\":{\"1261\":1}}],[\"本地锁\",{\"0\":{\"1261\":1}}],[\"本地方法创建新线程执行\",{\"1\":{\"1090\":1}}],[\"本地方法栈中jni\",{\"1\":{\"224\":1}}],[\"本地方法栈\",{\"0\":{\"209\":1},\"1\":{\"359\":1,\"1520\":1,\"1522\":1}}],[\"本地文件\",{\"1\":{\"1008\":1}}],[\"本地测试不走网卡\",{\"1\":{\"839\":1}}],[\"本地\",{\"1\":{\"623\":1,\"1366\":1}}],[\"本地缓存1\",{\"1\":{\"1361\":1}}],[\"本地缓存\",{\"0\":{\"512\":1,\"1253\":1,\"1361\":1},\"1\":{\"512\":1}}],[\"本地机器码\",{\"1\":{\"255\":1}}],[\"本地线程分配缓冲\",{\"1\":{\"214\":1}}],[\"本地线程副本变量工具\",{\"1\":{\"137\":1}}],[\"本引用实例的时间戳\",{\"1\":{\"192\":1}}],[\"本质原因在于\",{\"1\":{\"839\":1,\"1249\":1}}],[\"本质上就是穷举所有解\",{\"1\":{\"1669\":1}}],[\"本质上就是个map\",{\"1\":{\"1593\":1}}],[\"本质上并不读取旧aof文件\",{\"1\":{\"917\":1}}],[\"本质上和普通交换机\",{\"1\":{\"425\":1}}],[\"本质上是代理类\",{\"1\":{\"1623\":1}}],[\"本质上是竞争对象关联的\",{\"1\":{\"1515\":1}}],[\"本质上是由\",{\"1\":{\"1479\":1}}],[\"本质上是定时任务\",{\"1\":{\"1264\":1}}],[\"本质上是将传进来的任务包装成一个\",{\"1\":{\"1113\":1}}],[\"本质上是保存一个列表\",{\"1\":{\"969\":1}}],[\"本质上是整数\",{\"1\":{\"785\":1}}],[\"本质上是一个键值对\",{\"1\":{\"1514\":1}}],[\"本质上是一个键值对的映射\",{\"1\":{\"154\":1}}],[\"本质上是一个整型的计数器\",{\"1\":{\"1460\":1}}],[\"本质上是一个大的消息缓冲区\",{\"1\":{\"413\":1}}],[\"本质上是\",{\"1\":{\"382\":1}}],[\"本质上是没有名字的局部内部类\",{\"1\":{\"298\":1}}],[\"本质是内核在内存中维护的数据结构\",{\"1\":{\"1474\":1}}],[\"本质是一个单线程的执行器\",{\"1\":{\"816\":1}}],[\"本质是map集合\",{\"1\":{\"305\":1}}],[\"本质是删除旧id的文档\",{\"1\":{\"50\":1}}],[\"本文介绍\",{\"1\":{\"1147\":1}}],[\"本文档基于黑马程序员\",{\"1\":{\"104\":1}}],[\"本文以\",{\"1\":{\"1\":1}}],[\"本方案在请求时需要携带上一个服务器发送的\",{\"1\":{\"22\":1}}],[\"暂不执行提交\",{\"1\":{\"1050\":1}}],[\"暂存区和工作目录可以不一致\",{\"1\":{\"1319\":1}}],[\"暂存区\",{\"1\":{\"1310\":1,\"1633\":1}}],[\"暂存任务的任务队列\",{\"1\":{\"869\":1}}],[\"暂存的实际数据\",{\"1\":{\"450\":1}}],[\"暂时免费\",{\"1\":{\"1811\":1}}],[\"暂时获取不到锁的线程将被加入到该队列中\",{\"1\":{\"1516\":1}}],[\"暂时还没有实际动手去迁\",{\"1\":{\"1240\":1}}],[\"暂时关闭autocommit\",{\"1\":{\"734\":1}}],[\"暂时影响业务\",{\"1\":{\"21\":2}}],[\"暂停等\",{\"1\":{\"1634\":1}}],[\"暂停的外部事务\",{\"1\":{\"1383\":1}}],[\"暂停外层事物\",{\"1\":{\"1049\":1}}],[\"暂停用户线程\",{\"1\":{\"176\":2,\"177\":3,\"178\":1,\"1525\":3}}],[\"暂停线程\",{\"1\":{\"6\":1}}],[\"暂无\",{\"1\":{\"122\":1}}],[\"配酥油茶\",{\"1\":{\"1841\":1}}],[\"配件\",{\"1\":{\"1796\":1}}],[\"配合天翼云盘等\",{\"1\":{\"1811\":1}}],[\"配合readched\",{\"1\":{\"923\":1}}],[\"配合监听器模式可以在关闭后自动执行回调\",{\"1\":{\"821\":1}}],[\"配合leave\",{\"1\":{\"633\":1}}],[\"配合\",{\"1\":{\"391\":1,\"530\":1,\"536\":1,\"779\":1,\"1264\":1,\"1404\":1,\"1698\":1}}],[\"配合虚引用\",{\"1\":{\"212\":1}}],[\"配合maximumweight\",{\"1\":{\"74\":1}}],[\"配送中\",{\"1\":{\"124\":1}}],[\"配置访问控制\",{\"1\":{\"1871\":1}}],[\"配置nginx服务器\",{\"0\":{\"1871\":1}}],[\"配置等文件外\",{\"1\":{\"1634\":1}}],[\"配置请求路由\",{\"1\":{\"1366\":1}}],[\"配置缓存类型\",{\"1\":{\"1269\":1}}],[\"配置安装过程省略\",{\"1\":{\"1222\":1}}],[\"配置hadoop的相关环境变量\",{\"1\":{\"1217\":1}}],[\"配置从节点\",{\"1\":{\"1217\":1}}],[\"配置从库\",{\"1\":{\"649\":1}}],[\"配置中心\",{\"1\":{\"1162\":1}}],[\"配置主从复制\",{\"1\":{\"1563\":1}}],[\"配置主从同步\",{\"0\":{\"1153\":1}}],[\"配置主库\",{\"1\":{\"649\":1}}],[\"配置纪元\",{\"1\":{\"949\":1}}],[\"配置服务端启动器类\",{\"1\":{\"811\":1}}],[\"配置环境\",{\"0\":{\"1867\":1},\"1\":{\"524\":1}}],[\"配置和数据库配置分离\",{\"1\":{\"518\":1}}],[\"配置为\",{\"1\":{\"513\":1}}],[\"配置cache\",{\"1\":{\"512\":1}}],[\"配置消费者组\",{\"1\":{\"488\":1}}],[\"配置确认回调\",{\"1\":{\"417\":1}}],[\"配置的根节点\",{\"1\":{\"387\":1}}],[\"配置参数\",{\"1\":{\"382\":5,\"456\":1,\"854\":3}}],[\"配置文件是安装目录下的\",{\"1\":{\"1154\":1}}],[\"配置文件路径\",{\"1\":{\"929\":1}}],[\"配置文件中大多数选项对应了mysql中的某个系统变量\",{\"1\":{\"671\":1}}],[\"配置文件分多个组\",{\"1\":{\"671\":1}}],[\"配置文件与变量\",{\"0\":{\"671\":1}}],[\"配置文件的方式很容易嵌入到spring应用中\",{\"1\":{\"434\":1}}],[\"配置文件\",{\"0\":{\"516\":1,\"1164\":1,\"1311\":1},\"1\":{\"357\":1,\"517\":1,\"541\":1,\"929\":1,\"1217\":1}}],[\"配置文件logback\",{\"1\":{\"355\":1}}],[\"配置类向容器中注入了一个\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"配置类\",{\"1\":{\"24\":1,\"383\":2}}],[\"配置\",{\"0\":{\"386\":1,\"417\":1,\"445\":1,\"506\":1,\"1154\":1,\"1155\":1,\"1180\":1},\"1\":{\"21\":1,\"24\":2,\"25\":1,\"420\":1,\"457\":1,\"489\":1,\"719\":1,\"791\":1,\"813\":2,\"1155\":1,\"1264\":1,\"1368\":1,\"1796\":1}}],[\"配套方法\",{\"1\":{\"3\":1}}],[\"配套工具方法\",{\"1\":{\"3\":1}}],[\"哈希取余\",{\"1\":{\"1658\":1}}],[\"哈希分片\",{\"1\":{\"1564\":1}}],[\"哈希冲突\",{\"0\":{\"1389\":1}}],[\"哈希查找\",{\"1\":{\"1386\":1}}],[\"哈希对象保存的键值对数量小于512\",{\"1\":{\"898\":1}}],[\"哈希对象保存的所有键\",{\"1\":{\"898\":1}}],[\"哈希对象的编码有两种\",{\"1\":{\"898\":1}}],[\"哈希对象\",{\"0\":{\"898\":1},\"1\":{\"895\":1}}],[\"哈希结点过多或过少时\",{\"1\":{\"883\":1}}],[\"哈希算法可以建立数据和节点的映射关系\",{\"1\":{\"1489\":1}}],[\"哈希算法\",{\"0\":{\"883\":1}}],[\"哈希表对象\",{\"1\":{\"913\":1}}],[\"哈希表在rehashidx索引上的所有键值对rehash到ht\",{\"1\":{\"883\":1}}],[\"哈希表\",{\"0\":{\"1663\":1},\"1\":{\"882\":1,\"913\":1}}],[\"哈希表结点\",{\"1\":{\"882\":1}}],[\"哈希表默认长度16\",{\"1\":{\"304\":1}}],[\"哈希索引就是采用一定的hash算法\",{\"1\":{\"698\":1}}],[\"哈希一致性session\",{\"1\":{\"21\":1}}],[\"哈希一致性\",{\"0\":{\"21\":1}}],[\"哈希前加入一些随机数\",{\"1\":{\"14\":1}}],[\"窃取等安全隐患\",{\"1\":{\"20\":1}}],[\"篡改\",{\"1\":{\"20\":1,\"1337\":1}}],[\"存活时间\",{\"1\":{\"1862\":1}}],[\"存满后页分裂\",{\"1\":{\"698\":1}}],[\"存满时扩容1\",{\"1\":{\"304\":1}}],[\"存放消息的容器\",{\"1\":{\"1625\":1}}],[\"存放指向文件数据块的指针列表\",{\"1\":{\"1476\":1}}],[\"存放代理对象\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"存放未填充属性的半成品对象\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"存放成品对象\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"存放各个undo页面链表的first\",{\"1\":{\"751\":1}}],[\"存放在\",{\"1\":{\"1345\":1}}],[\"存放在page\",{\"1\":{\"690\":1}}],[\"存放在内存中\",{\"1\":{\"680\":1}}],[\"存放不同的信息\",{\"1\":{\"688\":1}}],[\"存放的路径\",{\"1\":{\"445\":1}}],[\"存放的消息都是有序的\",{\"1\":{\"430\":1}}],[\"存入内存\",{\"1\":{\"1622\":1}}],[\"存入一个map<trietreetypeenum\",{\"1\":{\"1361\":1}}],[\"存入了\",{\"1\":{\"490\":1}}],[\"存入\",{\"1\":{\"490\":1,\"541\":1}}],[\"存储类型的统一管理\",{\"1\":{\"1807\":1}}],[\"存储类型特定函数\",{\"1\":{\"882\":1}}],[\"存储和转发消息\",{\"1\":{\"1628\":1}}],[\"存储事务执行之前的数据版本\",{\"1\":{\"1554\":1}}],[\"存储已被虚拟机加载的类信息\",{\"1\":{\"1520\":1}}],[\"存储已接受尚未处理的数据\",{\"1\":{\"859\":1}}],[\"存储元素超过一个阈值\",{\"1\":{\"1494\":1}}],[\"存储节点\",{\"1\":{\"1489\":1}}],[\"存储器\",{\"1\":{\"1432\":1}}],[\"存储指向数据的提交对象的指针\",{\"1\":{\"1349\":1}}],[\"存储所有数据内容\",{\"1\":{\"1349\":1}}],[\"存储所指向的数据页中的最小键\",{\"1\":{\"698\":1}}],[\"存储位置\",{\"1\":{\"1536\":1}}],[\"存储位置随意\",{\"1\":{\"1228\":1}}],[\"存储位置由hive\",{\"1\":{\"1228\":1}}],[\"存储原理\",{\"0\":{\"1219\":1}}],[\"存储海量数据\",{\"1\":{\"1215\":1}}],[\"存储多个服务公用的信息\",{\"1\":{\"1162\":1}}],[\"存储提交到线程池但尚未执行的\",{\"1\":{\"1107\":1}}],[\"存储线程在底层平台的线程\",{\"1\":{\"1087\":1}}],[\"存储一些标记位\",{\"1\":{\"1074\":1}}],[\"存储哈希表节点指针\",{\"1\":{\"882\":1}}],[\"存储待发送数据\",{\"1\":{\"859\":1}}],[\"存储管理信息\",{\"1\":{\"739\":1}}],[\"存储block镜像\",{\"1\":{\"739\":1}}],[\"存储关于索引的统计数据\",{\"1\":{\"720\":1}}],[\"存储关于表的统计数据\",{\"1\":{\"720\":1}}],[\"存储链表头\",{\"1\":{\"693\":1}}],[\"存储页的通用信息\",{\"1\":{\"691\":1}}],[\"存储本页记录的状态信息\",{\"1\":{\"691\":1}}],[\"存储限制\",{\"1\":{\"681\":1}}],[\"存储索引\",{\"1\":{\"679\":1}}],[\"存储表结构信息\",{\"1\":{\"679\":1,\"680\":1}}],[\"存储该表的表结构\",{\"1\":{\"678\":1}}],[\"存储mysql服务器正常运行所需要的各种信息\",{\"1\":{\"673\":1}}],[\"存储需求\",{\"1\":{\"662\":1,\"663\":1,\"664\":1,\"665\":1}}],[\"存储用户创建的临时表等数据\",{\"1\":{\"639\":1}}],[\"存储函数名称\",{\"1\":{\"635\":1}}],[\"存储函数的参数只能是\",{\"1\":{\"635\":1}}],[\"存储函数是有返回值的存储过程\",{\"1\":{\"635\":1}}],[\"存储函数\",{\"0\":{\"635\":1}}],[\"存储过程名称\",{\"1\":{\"628\":3}}],[\"存储过程是事先经过编译并存储在数据库中的一段sql语句的集合\",{\"1\":{\"627\":1}}],[\"存储过程\",{\"0\":{\"626\":1}}],[\"存储过程以及高级映射\",{\"1\":{\"503\":1}}],[\"存储层\",{\"1\":{\"570\":1}}],[\"存储引擎拥有了崩溃恢复能力\",{\"1\":{\"1556\":1}}],[\"存储引擎小\",{\"1\":{\"1542\":1}}],[\"存储引擎对数据存储的方式非常紧凑\",{\"1\":{\"1542\":1}}],[\"存储引擎使用表级锁\",{\"1\":{\"1542\":1}}],[\"存储引擎支持全文本索引和空间索引\",{\"1\":{\"1542\":1}}],[\"存储引擎支持\",{\"1\":{\"698\":1}}],[\"存储引擎启动时会读写一些内部系统表来记录数据库元信息\",{\"1\":{\"695\":1}}],[\"存储引擎逻辑结构的最高层\",{\"1\":{\"695\":1}}],[\"存储引擎选择\",{\"0\":{\"682\":1}}],[\"存储引擎特点\",{\"0\":{\"681\":1}}],[\"存储引擎基于表而非基于库\",{\"1\":{\"677\":1}}],[\"存储引擎就是存储数据\",{\"1\":{\"677\":1}}],[\"存储引擎\",{\"0\":{\"676\":1},\"1\":{\"672\":1}}],[\"存储引擎真正的负责了mysql中数据的存储和提取\",{\"1\":{\"570\":1}}],[\"存储引擎层\",{\"1\":{\"570\":1,\"1540\":1}}],[\"存储相关数据\",{\"1\":{\"465\":1}}],[\"存储数据的buf数组实现了内存自动重分配\",{\"1\":{\"879\":1}}],[\"存储数据的仓库\",{\"1\":{\"569\":1}}],[\"存储数据\",{\"0\":{\"465\":1},\"1\":{\"679\":1}}],[\"存储对象实例数据\",{\"1\":{\"1074\":1}}],[\"存储对象的基础信息\",{\"1\":{\"1074\":1}}],[\"存储对象键值对\",{\"1\":{\"305\":1}}],[\"存储对象自身的运行时数据\",{\"1\":{\"215\":1}}],[\"存储的地址值不能改变\",{\"1\":{\"291\":1}}],[\"存储\",{\"1\":{\"210\":1,\"465\":1,\"869\":1,\"1006\":2,\"1010\":1,\"1011\":1,\"1104\":1,\"1211\":1,\"1378\":2,\"1379\":1,\"1474\":1,\"1571\":1}}],[\"存储方法里的基本数据类型以及对象的引用\",{\"1\":{\"204\":1}}],[\"存储结构\",{\"0\":{\"37\":1},\"1\":{\"1388\":1}}],[\"存储在内存中\",{\"1\":{\"719\":1}}],[\"存储在磁盘上\",{\"1\":{\"719\":1}}],[\"存储在文件系统之上\",{\"1\":{\"570\":1}}],[\"存储在对象头中\",{\"1\":{\"214\":1}}],[\"存储在\",{\"1\":{\"20\":1,\"1224\":1}}],[\"存在重复元素的数组\",{\"1\":{\"1673\":1,\"1674\":1,\"1675\":1}}],[\"存在于多个实例上\",{\"1\":{\"1629\":1}}],[\"存在于老版本的mysql中\",{\"1\":{\"1148\":1}}],[\"存在大量内存碎片\",{\"1\":{\"1525\":1}}],[\"存在\",{\"1\":{\"1513\":1,\"1651\":2}}],[\"存在饥饿\",{\"1\":{\"1472\":1}}],[\"存在性能开销\",{\"1\":{\"1468\":1}}],[\"存在响应的队头阻塞问题\",{\"1\":{\"1404\":1}}],[\"存在的两个问题\",{\"1\":{\"732\":1}}],[\"存在的问题\",{\"1\":{\"495\":1,\"782\":1,\"783\":1}}],[\"存在以下性能瓶颈\",{\"1\":{\"651\":1}}],[\"存在多个索引时决定使用哪个索引\",{\"1\":{\"570\":1}}],[\"存在sql注入的风险\",{\"1\":{\"530\":1}}],[\"存在一些边缘案例导致备份数据丢失或导致多个备份间的数据不一致\",{\"1\":{\"471\":1}}],[\"存在一些重要数据\",{\"1\":{\"461\":1}}],[\"存在延时\",{\"1\":{\"334\":1}}],[\"存在数据不一致问题\",{\"1\":{\"154\":1,\"1514\":1}}],[\"存在对共享资源进行多线程读写操作的代码块\",{\"1\":{\"134\":1}}],[\"存在泄漏\",{\"1\":{\"20\":1}}],[\"存在有效期\",{\"1\":{\"17\":1}}],[\"完了在地道里坐了3小时\",{\"1\":{\"1772\":1}}],[\"完\",{\"1\":{\"850\":1}}],[\"完全不看相机参数的人\",{\"1\":{\"1819\":1}}],[\"完全境内运输权\",{\"0\":{\"1750\":1}}],[\"完全第三国运输权\",{\"0\":{\"1748\":1}}],[\"完全背包\",{\"1\":{\"1655\":1}}],[\"完全服从\",{\"1\":{\"1612\":1}}],[\"完全由内核完成并通知\",{\"1\":{\"1488\":1}}],[\"完全公平\",{\"1\":{\"1483\":1}}],[\"完全公平调度\",{\"1\":{\"1436\":1}}],[\"完全二叉树\",{\"1\":{\"1387\":1}}],[\"完全可以使用\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"完全抛弃了\",{\"1\":{\"808\":1}}],[\"完全一样的语句才会缓存\",{\"1\":{\"672\":1}}],[\"完全限定资源定位符\",{\"1\":{\"528\":1}}],[\"完全支持jms\",{\"1\":{\"434\":1}}],[\"完全的分布式系统\",{\"1\":{\"431\":1}}],[\"完全匹配才会路由\",{\"1\":{\"414\":1,\"1628\":1}}],[\"完全匹配的\",{\"1\":{\"414\":1,\"1628\":1}}],[\"完全随机\",{\"1\":{\"127\":1,\"129\":1}}],[\"完整\",{\"1\":{\"1438\":1}}],[\"完整生命周期的管理\",{\"1\":{\"1303\":1}}],[\"完整流程\",{\"0\":{\"1082\":1}}],[\"完整版类图\",{\"1\":{\"1006\":1}}],[\"完整重同步\",{\"1\":{\"935\":1}}],[\"完整记录之间根据主键大小排序\",{\"1\":{\"689\":1}}],[\"完整实现\",{\"1\":{\"355\":1}}],[\"完整的航班计划包括\",{\"1\":{\"1730\":1}}],[\"完整的\",{\"0\":{\"101\":1},\"1\":{\"101\":1}}],[\"完整数据\",{\"1\":{\"20\":1}}],[\"完成博客更新发布的自动化流程\",{\"1\":{\"1790\":1}}],[\"完成实例化后\",{\"1\":{\"1599\":1}}],[\"完成两阶段提交\",{\"1\":{\"1556\":1}}],[\"完成时可以处理其它任务\",{\"1\":{\"1511\":1}}],[\"完成连接后\",{\"1\":{\"1487\":1}}],[\"完成进程的数量\",{\"1\":{\"1470\":1}}],[\"完成一个请求+响应才能处理下一个\",{\"1\":{\"1404\":1}}],[\"完成数据库的增删改查实现\",{\"1\":{\"1365\":1}}],[\"完成所有业务可执行性的检查\",{\"1\":{\"1284\":1}}],[\"完成的\",{\"1\":{\"1219\":1}}],[\"完成的任务数\",{\"1\":{\"1114\":1}}],[\"完成元数据整理工作\",{\"1\":{\"1216\":1}}],[\"完成海量数据的存储和计算\",{\"1\":{\"1214\":1}}],[\"完成了\",{\"1\":{\"1155\":1}}],[\"完成同步后\",{\"1\":{\"936\":1}}],[\"完成\",{\"1\":{\"873\":1,\"1135\":1,\"1284\":1,\"1402\":1,\"1420\":1,\"1471\":1,\"1482\":1}}],[\"完成后\",{\"1\":{\"1861\":1,\"1868\":1}}],[\"完成后通过手动确认的方式发送应答\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"完成后将rehashidx属性的值增一\",{\"1\":{\"883\":1}}],[\"完成后触发pipeline\",{\"1\":{\"873\":1}}],[\"完成后更新事务topic\",{\"1\":{\"461\":1}}],[\"完成文件\",{\"1\":{\"799\":1}}],[\"完成对象的注入\",{\"1\":{\"1593\":1}}],[\"完成对\",{\"1\":{\"1224\":1}}],[\"完成对超大数据的计算处理\",{\"1\":{\"1221\":1}}],[\"完成对多个\",{\"1\":{\"784\":1}}],[\"完成对语法树的遍历和调整之后\",{\"1\":{\"264\":1}}],[\"完成必要的增删改查功能\",{\"1\":{\"540\":1}}],[\"完成绑定行为\",{\"1\":{\"383\":1}}],[\"完成这一任务的后期编译器称即时编译器\",{\"1\":{\"266\":1}}],[\"完成入队\",{\"1\":{\"6\":1}}],[\"完成共享资源的竞争和释放\",{\"1\":{\"5\":1}}],[\"节省一次指针定位\",{\"1\":{\"1521\":1}}],[\"节省存储空间\",{\"1\":{\"708\":1}}],[\"节省服务器资源\",{\"1\":{\"20\":1}}],[\"节约存储空间\",{\"1\":{\"1567\":1}}],[\"节约线程数量\",{\"1\":{\"784\":1}}],[\"节约内存\",{\"1\":{\"266\":1,\"901\":1}}],[\"节约空间\",{\"1\":{\"207\":1}}],[\"节点数据是\",{\"1\":{\"1184\":1,\"1185\":1}}],[\"节点内数据的⻓度\",{\"1\":{\"1174\":1}}],[\"节点内数据的版本\",{\"1\":{\"1174\":1}}],[\"节点最近修改的时间\",{\"1\":{\"1174\":1}}],[\"节点创建的时间\",{\"1\":{\"1174\":1}}],[\"节点心跳\",{\"1\":{\"1169\":1}}],[\"节点类型\",{\"0\":{\"1169\":1},\"1\":{\"1281\":1,\"1620\":1}}],[\"节点结构\",{\"0\":{\"1168\":1}}],[\"节点通过路径引用定位\",{\"1\":{\"1167\":1}}],[\"节点构成\",{\"1\":{\"1167\":1}}],[\"节点首先查看键是否在自己的数据库中\",{\"1\":{\"947\":1}}],[\"节点转向即换一个套接字发送命令\",{\"1\":{\"947\":1}}],[\"节点会将请求转发给\",{\"1\":{\"1205\":1}}],[\"节点会在clusterstate\",{\"1\":{\"945\":1}}],[\"节点会继续使用所有单机模式下的组件\",{\"1\":{\"945\":1}}],[\"节点只能使用0号数据库\",{\"1\":{\"945\":1}}],[\"节点b与集群所有节点握手成功\",{\"1\":{\"945\":1}}],[\"节点a向节点b发送cluster\",{\"1\":{\"945\":1}}],[\"节点\",{\"0\":{\"945\":1},\"1\":{\"1169\":2,\"1220\":1}}],[\"节点变化\",{\"1\":{\"466\":1}}],[\"节点代替\",{\"1\":{\"448\":1}}],[\"节点之间互通\",{\"1\":{\"33\":1}}],[\"节点状态\",{\"0\":{\"1201\":1},\"1\":{\"3\":1}}],[\"节点关联的请求线程\",{\"1\":{\"3\":1}}],[\"大哥因为今天身体实在不适激情下单了一罐￥700的氧气\",{\"1\":{\"1843\":1}}],[\"大昭寺作为藏人心中的圣地\",{\"1\":{\"1838\":1}}],[\"大海\",{\"1\":{\"1825\":1}}],[\"大连\",{\"1\":{\"1825\":1}}],[\"大家即使困顿于生存\",{\"1\":{\"1818\":1}}],[\"大半年过去对游戏已经没兴趣了\",{\"1\":{\"1817\":1}}],[\"大自然的鬼斧神工\",{\"1\":{\"1816\":1}}],[\"大伙给我的需求也少了\",{\"1\":{\"1785\":1}}],[\"大致可以分为如下三类\",{\"1\":{\"1716\":1}}],[\"大根堆的最大元素小于小根堆的最小元素\",{\"1\":{\"1658\":1}}],[\"大字段\",{\"1\":{\"1608\":1}}],[\"大量数据中判断一个数是否存在\",{\"1\":{\"1658\":1}}],[\"大量数据中找出不重复的数字\",{\"1\":{\"1658\":1}}],[\"大量数据找出\",{\"1\":{\"1658\":1}}],[\"大量请求的\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"大量使用\",{\"1\":{\"162\":1}}],[\"大文件可以用管道配合\",{\"1\":{\"1218\":1}}],[\"大的当选\",{\"1\":{\"1204\":2}}],[\"大的直接当选\",{\"1\":{\"1204\":1}}],[\"大概率要给函数设置合理的定义和返回值\",{\"1\":{\"999\":1}}],[\"大多数人的第一次进藏\",{\"1\":{\"1840\":1}}],[\"大多数都是采用的中心化模式\",{\"1\":{\"1215\":1}}],[\"大多数情况下\",{\"1\":{\"878\":1}}],[\"大多数情况下推荐使用adaptiverecvbytebufallocator\",{\"1\":{\"861\":1}}],[\"大多数指令都包含其操作对应的数据类型信息\",{\"1\":{\"241\":1}}],[\"大大降低了缓存命中率\",{\"1\":{\"1448\":1}}],[\"大大降低缓存命中率\",{\"1\":{\"732\":1}}],[\"大大降低查询性能\",{\"1\":{\"698\":1}}],[\"大大提高了效率\",{\"1\":{\"1487\":1}}],[\"大大提高了\",{\"1\":{\"212\":1}}],[\"大部分情况下\",{\"1\":{\"1735\":1}}],[\"大部分对象都是朝生夕灭的\",{\"1\":{\"1524\":1}}],[\"大部分\",{\"1\":{\"1309\":1}}],[\"大部分事务仅修改若干条记录\",{\"1\":{\"750\":1}}],[\"大部分引擎都支持b+树索引\",{\"1\":{\"697\":1}}],[\"大部分基于锁实现\",{\"1\":{\"162\":1}}],[\"大约\",{\"1\":{\"664\":1,\"1112\":1}}],[\"大批量插入数据\",{\"1\":{\"614\":1}}],[\"大写\",{\"1\":{\"593\":1}}],[\"大幅提升读性能\",{\"1\":{\"1563\":1}}],[\"大幅提高\",{\"1\":{\"143\":1}}],[\"大幅简化了代码并保持简洁\",{\"1\":{\"508\":1}}],[\"大规模分布式系统中的机器非常多而且分散在不同机房中\",{\"1\":{\"441\":1}}],[\"大数据体系中充斥着非常多的统计分析场景\",{\"1\":{\"1223\":1}}],[\"大数据体系中使用最为广泛的分布式存储技术\",{\"1\":{\"1213\":1}}],[\"大数据就是从海量的高增长\",{\"1\":{\"1212\":1}}],[\"大数据就是对超大规模的数据进行处理并挖掘出数据背后价值的技术体系\",{\"1\":{\"1211\":1}}],[\"大数据需要确保数据的准确性\",{\"1\":{\"1212\":1}}],[\"大数据集合的数据产生速度通常很快\",{\"1\":{\"1212\":1}}],[\"大数据集合通常包含海量的数据\",{\"1\":{\"1212\":1}}],[\"大数据虽然信息海量\",{\"1\":{\"1212\":1}}],[\"大数据不仅包括结构化数据\",{\"1\":{\"1212\":1}}],[\"大数据通常具有五个主要特点\",{\"1\":{\"1212\":1}}],[\"大数据技术涵盖了数据的采集\",{\"1\":{\"1211\":1}}],[\"大数据技术已经成为从事数据分析\",{\"1\":{\"1211\":1}}],[\"大数据分布式存储框架\",{\"1\":{\"808\":1}}],[\"大数据分布式计算框架\",{\"1\":{\"808\":1}}],[\"大数据分析可以帮助企业和组织在海量数据中发现有价值的信息\",{\"1\":{\"1211\":1}}],[\"大数据分析\",{\"1\":{\"31\":1}}],[\"大数据量情况下\",{\"1\":{\"698\":1}}],[\"大数据量排序时\",{\"1\":{\"616\":1}}],[\"大数据\",{\"0\":{\"1210\":1,\"1211\":1},\"2\":{\"131\":1,\"1230\":1}}],[\"大数据课程\",{\"1\":{\"104\":1}}],[\"大小字节对齐\",{\"1\":{\"1435\":1}}],[\"大小不限\",{\"1\":{\"1405\":1}}],[\"大小写字母个数限制\",{\"1\":{\"1148\":1}}],[\"大小写转换的工具\",{\"1\":{\"79\":1}}],[\"大小计算如上\",{\"1\":{\"883\":1}}],[\"大小由\",{\"1\":{\"856\":2}}],[\"大小由innodb\",{\"1\":{\"731\":1}}],[\"大小将数据进行分割发送\",{\"1\":{\"839\":1}}],[\"大小分配\",{\"1\":{\"788\":1}}],[\"大小为\",{\"1\":{\"533\":1}}],[\"大小等\",{\"1\":{\"232\":1}}],[\"大小\",{\"1\":{\"37\":1,\"661\":1,\"777\":1,\"1226\":1,\"1427\":1,\"1525\":1}}],[\"大型服务器集群不适用\",{\"1\":{\"19\":1}}],[\"大于缓冲区会触发多次\",{\"1\":{\"785\":1}}],[\"大于等于某个年龄的对象直接进入老年代\",{\"1\":{\"1524\":1}}],[\"大于等于某个年龄的对象超过了\",{\"1\":{\"1524\":1}}],[\"大于等于\",{\"1\":{\"583\":1}}],[\"大于\",{\"1\":{\"9\":1,\"357\":1,\"583\":1,\"923\":1,\"1395\":1}}],[\"大于0表示后面的等待节点获取锁很可能成功\",{\"1\":{\"5\":1}}],[\"无奈转向了撸铁和骑车作为运动\",{\"1\":{\"1796\":1}}],[\"无所顾虑的日子太自由了\",{\"1\":{\"1786\":1}}],[\"无须涉及承运人注册国\",{\"1\":{\"1750\":1}}],[\"无可用座位\",{\"1\":{\"1740\":2}}],[\"无重可复选只要去除used数组\",{\"1\":{\"1677\":1}}],[\"无重可复选只要去除\",{\"1\":{\"1677\":1}}],[\"无重可复选的子集问题也类似\",{\"1\":{\"1676\":1}}],[\"无重不可复选通过start\",{\"1\":{\"1677\":1}}],[\"无重复元素的数组\",{\"1\":{\"1670\":1,\"1671\":1,\"1672\":1,\"1676\":1}}],[\"无重复排序\",{\"1\":{\"888\":1}}],[\"无调度\",{\"1\":{\"1483\":1}}],[\"无分类地址\",{\"1\":{\"1422\":1}}],[\"无队头阻塞\",{\"1\":{\"1404\":1}}],[\"无损压缩\",{\"1\":{\"1400\":1}}],[\"无参的缺省行为\",{\"1\":{\"1344\":1}}],[\"无参数无返回值测试方法\",{\"1\":{\"356\":1}}],[\"无界任务队列\",{\"1\":{\"1107\":1,\"1511\":1}}],[\"无效回复\",{\"1\":{\"941\":1}}],[\"无订阅连接\",{\"1\":{\"940\":1}}],[\"无环\",{\"1\":{\"880\":1}}],[\"无关\",{\"1\":{\"832\":1}}],[\"无限阻塞\",{\"1\":{\"363\":1,\"1115\":1}}],[\"无连接\",{\"1\":{\"341\":1}}],[\"无索引\",{\"1\":{\"304\":1,\"305\":3}}],[\"无序\",{\"1\":{\"304\":1,\"305\":1}}],[\"无\",{\"1\":{\"296\":1,\"1068\":12}}],[\"无论换什么姿势都不舒服\",{\"1\":{\"1833\":1}}],[\"无论基于进程还是线程\",{\"1\":{\"1487\":1}}],[\"无论基本类型还是引用类型\",{\"1\":{\"359\":1}}],[\"无论事务是否成功\",{\"1\":{\"961\":1}}],[\"无论读写都和原\",{\"1\":{\"832\":1}}],[\"无论是先写\",{\"1\":{\"1556\":1}}],[\"无论是阻塞\",{\"1\":{\"1478\":1}}],[\"无论是进程还是线程\",{\"1\":{\"1436\":1}}],[\"无论是\",{\"1\":{\"1116\":1}}],[\"无论是两种编程式事务\",{\"1\":{\"1060\":1}}],[\"无论是粘包还是半包\",{\"1\":{\"839\":1}}],[\"无论是叶子节点还是非叶子节点\",{\"1\":{\"698\":1}}],[\"无论是否使用with\",{\"1\":{\"623\":1}}],[\"无论真实数据大小\",{\"1\":{\"686\":1}}],[\"无论左边是false还是true\",{\"1\":{\"288\":1}}],[\"无论时方法调用产生的标准编译请求\",{\"1\":{\"269\":1}}],[\"无符号右移\",{\"1\":{\"1664\":1}}],[\"无符号在数据类型后加\",{\"1\":{\"661\":1}}],[\"无符号数字段\",{\"1\":{\"1418\":1}}],[\"无符号数\",{\"1\":{\"240\":1}}],[\"无符号形式的支持等等\",{\"1\":{\"80\":1}}],[\"无选项\",{\"1\":{\"234\":1}}],[\"无用\",{\"1\":{\"195\":1,\"1692\":1}}],[\"无法指定具体仓库\",{\"1\":{\"1791\":1}}],[\"无法防止\",{\"1\":{\"1642\":1}}],[\"无法处理\",{\"1\":{\"1525\":1}}],[\"无法处理浮动垃圾\",{\"1\":{\"176\":1}}],[\"无法解决\",{\"1\":{\"1599\":2}}],[\"无法解决循环依赖问题\",{\"1\":{\"1522\":1}}],[\"无法解决半包问题\",{\"1\":{\"841\":1}}],[\"无法申请足够栈空间\",{\"1\":{\"1520\":1}}],[\"无法充分利用多核\",{\"1\":{\"1488\":1}}],[\"无法再分配页面时\",{\"1\":{\"1478\":1}}],[\"无法继续执行\",{\"1\":{\"1466\":1}}],[\"无法继续执行操作\",{\"1\":{\"1068\":1}}],[\"无法读出有效的信息\",{\"1\":{\"1417\":1}}],[\"无法跟踪的工作区数据\",{\"1\":{\"1345\":1}}],[\"无法满足高并发场景\",{\"1\":{\"1283\":1}}],[\"无法满足业务需求\",{\"1\":{\"378\":1}}],[\"无法保证分布式锁的绝对安全\",{\"1\":{\"1162\":1,\"1187\":1}}],[\"无法保证一次性把\",{\"1\":{\"789\":1}}],[\"无法使用\",{\"1\":{\"1135\":1}}],[\"无法匹配的字段将置null并加入结果集\",{\"1\":{\"713\":1}}],[\"无法利用索引完成排序操作\",{\"1\":{\"698\":1}}],[\"无法手动操作的\",{\"1\":{\"1560\":1}}],[\"无法手动操作\",{\"1\":{\"560\":1}}],[\"无法输出日志\",{\"1\":{\"382\":1}}],[\"无法实现自动化测试\",{\"1\":{\"356\":1}}],[\"无法得到测试结果的报告\",{\"1\":{\"356\":1}}],[\"无法直接获取到\",{\"1\":{\"254\":1}}],[\"无法通过虚引用来获取对象实例\",{\"1\":{\"194\":1}}],[\"无法收到通知进行其它工作\",{\"1\":{\"184\":1}}],[\"无法在异步场景下给子线程共享父线程中创建的线程副本\",{\"1\":{\"154\":1,\"1514\":1}}],[\"无法回收\",{\"1\":{\"154\":1,\"1514\":1}}],[\"无法水平扩展\",{\"1\":{\"19\":1}}],[\"无返回值的\",{\"1\":{\"153\":1}}],[\"无锁的方式对死锁天然免疫\",{\"1\":{\"148\":1}}],[\"无锁并发编程\",{\"1\":{\"1510\":1}}],[\"无锁并发\",{\"0\":{\"147\":1}}],[\"无则计算\",{\"1\":{\"72\":1}}],[\"无状态\",{\"1\":{\"26\":1,\"146\":1,\"1068\":1,\"1404\":1}}],[\"无需携带数据\",{\"1\":{\"1400\":1}}],[\"无需每次实时校验库存\",{\"1\":{\"1375\":1}}],[\"无需关心\",{\"1\":{\"1349\":1}}],[\"无需解析应用层协议\",{\"1\":{\"1296\":1}}],[\"无需解决\",{\"1\":{\"14\":1}}],[\"无需等待线程创建即可立即执行\",{\"1\":{\"1104\":1}}],[\"无需等待\",{\"1\":{\"783\":1}}],[\"无需人工干预\",{\"1\":{\"638\":1,\"1589\":1}}],[\"无需显式使用\",{\"1\":{\"553\":1}}],[\"无需停机即可扩展机器\",{\"1\":{\"431\":1}}],[\"无需在运行时解释或编译字节码\",{\"1\":{\"271\":1}}],[\"无需频繁的内存访问\",{\"1\":{\"242\":1}}],[\"无需加锁也无需等待\",{\"1\":{\"148\":1}}],[\"无需同步操作\",{\"1\":{\"64\":1}}],[\"无需配置\",{\"1\":{\"52\":1}}],[\"无需修改代码\",{\"1\":{\"21\":1}}],[\"方便代理商直接投放销售政策\",{\"1\":{\"1727\":1}}],[\"方便后续的回溯剪枝\",{\"1\":{\"1677\":1}}],[\"方便回溯剪枝\",{\"1\":{\"1673\":2}}],[\"方便快捷的管理项目依赖的资源\",{\"1\":{\"1632\":1}}],[\"方便易用\",{\"1\":{\"1622\":1}}],[\"方便定位问题\",{\"1\":{\"1109\":1}}],[\"方便使用\",{\"1\":{\"1019\":1}}],[\"方便执行批处理脚本\",{\"1\":{\"675\":1}}],[\"方便\",{\"1\":{\"322\":1,\"1811\":2}}],[\"方便创建子类对象\",{\"1\":{\"298\":1}}],[\"方便反编译工具和调试器定位源文件\",{\"1\":{\"240\":1}}],[\"方便调试器在调试时定位源代码行号\",{\"1\":{\"240\":1}}],[\"方式会频繁发生运行态的切换和缺页中断\",{\"1\":{\"1445\":1}}],[\"方式取决于spring\",{\"1\":{\"1057\":1}}],[\"方式\",{\"1\":{\"507\":1,\"1228\":1,\"1459\":1,\"1811\":1}}],[\"方式存储数据\",{\"1\":{\"490\":1}}],[\"方式是将任务提交线程池执行\",{\"1\":{\"163\":1}}],[\"方式拥有更优越的性能\",{\"1\":{\"148\":1}}],[\"方式实际是合并了\",{\"1\":{\"136\":1}}],[\"方式进行\",{\"1\":{\"74\":1}}],[\"方案\",{\"0\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1},\"1\":{\"1488\":1}}],[\"方法分类\",{\"1\":{\"1861\":1}}],[\"方法分配\",{\"1\":{\"212\":1}}],[\"方法二\",{\"0\":{\"1665\":1}}],[\"方法首先会判断是否开启了自动装配\",{\"1\":{\"1598\":1}}],[\"方法去加载类\",{\"1\":{\"1528\":1}}],[\"方法在内存中的指针或偏移量\",{\"1\":{\"1527\":1}}],[\"方法被调用后\",{\"1\":{\"1512\":1}}],[\"方法不是安全\",{\"1\":{\"1405\":1}}],[\"方法是否从未被使用\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"方法是否被调用2次\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"方法是暂停当前正在执行的线程对象\",{\"1\":{\"1512\":1}}],[\"方法是安全且幂等的\",{\"1\":{\"1405\":1}}],[\"方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块合并产生的\",{\"1\":{\"253\":1}}],[\"方法是由编译器生成的合成成员\",{\"1\":{\"240\":1}}],[\"方法轮询处理数据\",{\"1\":{\"1395\":1}}],[\"方法上标注\",{\"1\":{\"1368\":1}}],[\"方法获取任务执行过程中出现的异常信息\",{\"1\":{\"1113\":1}}],[\"方法获取指定索引的内容\",{\"1\":{\"772\":1}}],[\"方法退出\",{\"1\":{\"1093\":1}}],[\"方法循环等待\",{\"1\":{\"1091\":1}}],[\"方法就一条语句\",{\"1\":{\"1059\":1}}],[\"方法就是同步等待连接建立成功\",{\"1\":{\"820\":1}}],[\"方法定义了提交事务\",{\"1\":{\"1050\":1}}],[\"方法根据不同的事务传播行为进行不同的处理流程\",{\"1\":{\"1049\":1}}],[\"方法b的事务策略如何处理\",{\"1\":{\"1041\":1}}],[\"方法如下\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"方法匹配器\",{\"1\":{\"1019\":1}}],[\"方法匹配\",{\"1\":{\"1018\":1,\"1022\":1}}],[\"方法计数加\",{\"1\":{\"829\":1}}],[\"方法计数减\",{\"1\":{\"829\":1}}],[\"方法签名\",{\"1\":{\"828\":1}}],[\"方法让异步操作同步以外\",{\"1\":{\"820\":1}}],[\"方法之前new一个springapplication对象\",{\"1\":{\"1607\":1}}],[\"方法之前\",{\"1\":{\"820\":1}}],[\"方法之间相互影响\",{\"1\":{\"356\":1}}],[\"方法来调用\",{\"1\":{\"1532\":1}}],[\"方法来获得资源的输入流\",{\"1\":{\"1008\":1}}],[\"方法来绑定其中一个\",{\"1\":{\"817\":1}}],[\"方法来实现类的加载逻辑\",{\"1\":{\"254\":1}}],[\"方法处理\",{\"1\":{\"816\":1}}],[\"方法后\",{\"1\":{\"801\":1,\"802\":1}}],[\"方法用于拷贝数据\",{\"1\":{\"801\":1}}],[\"方法3\",{\"0\":{\"1666\":1},\"1\":{\"785\":1}}],[\"方法2\",{\"1\":{\"785\":1}}],[\"方法1\",{\"0\":{\"1664\":1},\"1\":{\"785\":1}}],[\"方法并不能保证一次将\",{\"1\":{\"777\":1}}],[\"方法将\",{\"1\":{\"772\":1}}],[\"方法会对事务方法做增强\",{\"1\":{\"1060\":1}}],[\"方法会异步去关闭\",{\"1\":{\"821\":1}}],[\"方法会将接收到的数据存入\",{\"1\":{\"792\":1}}],[\"方法会间接地调用\",{\"1\":{\"777\":1}}],[\"方法会让\",{\"1\":{\"772\":1}}],[\"方法会阻塞直到获取这些\",{\"1\":{\"765\":1}}],[\"方法为\",{\"1\":{\"770\":1}}],[\"方法里根据不同的事务传播模式进行处理\",{\"1\":{\"1049\":1}}],[\"方法里创建代理对象\",{\"1\":{\"1015\":1}}],[\"方法里会执行\",{\"1\":{\"867\":1}}],[\"方法里面\",{\"1\":{\"863\":1}}],[\"方法里\",{\"1\":{\"542\":1}}],[\"方法可以使得一个线程在另一个线程结束后再执行\",{\"1\":{\"1512\":1}}],[\"方法可以刷新缓存立即执行\",{\"1\":{\"513\":1}}],[\"方法可以分为以下六类\",{\"1\":{\"508\":1}}],[\"方法可以主动将字符串放入堆中的字符串常量池\",{\"1\":{\"300\":1}}],[\"方法可以主动将串池中的字符串对象引用放入运行时常量池\",{\"1\":{\"211\":1}}],[\"方法而被阻塞的线程在哪个对象上进行了阻塞\",{\"1\":{\"362\":1}}],[\"方法参数\",{\"1\":{\"348\":1}}],[\"方法执行完成后\",{\"1\":{\"1512\":1}}],[\"方法执行完成后开始真正的\",{\"1\":{\"866\":1}}],[\"方法执行\",{\"1\":{\"332\":1,\"1109\":1,\"1511\":1}}],[\"方法执行前\",{\"1\":{\"9\":1}}],[\"方法重写\",{\"1\":{\"291\":1}}],[\"方法输出字节码\",{\"1\":{\"264\":1}}],[\"方法引用允许直接引用已有方法作为\",{\"1\":{\"263\":1}}],[\"方法引用\",{\"1\":{\"263\":1}}],[\"方法加载类\",{\"1\":{\"247\":1}}],[\"方法调用栈溢出等\",{\"1\":{\"1533\":1}}],[\"方法调用后\",{\"1\":{\"799\":1}}],[\"方法调用计数器触发即时编译器\",{\"1\":{\"268\":1}}],[\"方法调用计数器负责统计方法一段时间内执行的相对频率\",{\"1\":{\"268\":1}}],[\"方法调用阶段唯一的任务是确定被调用方法的版本\",{\"1\":{\"243\":1}}],[\"方法调用\",{\"0\":{\"243\":1},\"1\":{\"293\":1,\"1136\":1}}],[\"方法调用指令\",{\"1\":{\"241\":1}}],[\"方法已弃用\",{\"1\":{\"240\":1}}],[\"方法已经被jvm调用过\",{\"1\":{\"196\":1}}],[\"方法相关的附加信息\",{\"1\":{\"240\":1}}],[\"方法的调用\",{\"1\":{\"1524\":1}}],[\"方法的第三个参数是\",{\"1\":{\"865\":1}}],[\"方法的不同实现\",{\"1\":{\"829\":1}}],[\"方法的返回值做不同的处理\",{\"1\":{\"789\":1}}],[\"方法的每条路径是否都有返回值\",{\"1\":{\"262\":1}}],[\"方法的类型一定是java\",{\"1\":{\"253\":1}}],[\"方法的类\",{\"1\":{\"247\":1}}],[\"方法的可见注解信息\",{\"1\":{\"240\":1}}],[\"方法的泛型签名信息\",{\"1\":{\"240\":1}}],[\"方法的字节码等\",{\"1\":{\"240\":1}}],[\"方法的名称和描述符\",{\"1\":{\"240\":1}}],[\"方法表集合\",{\"1\":{\"1526\":1}}],[\"方法表用于描述类中声明的方法\",{\"1\":{\"240\":1}}],[\"方法表\",{\"1\":{\"240\":1}}],[\"方法回收\",{\"1\":{\"212\":1}}],[\"方法区保存了类的信息\",{\"1\":{\"359\":1}}],[\"方法区存放加载的类信息\",{\"1\":{\"359\":1}}],[\"方法区中对象类型\",{\"1\":{\"1521\":1}}],[\"方法区中常量引用的对象\",{\"1\":{\"224\":1,\"1522\":1}}],[\"方法区中类静态属性引用的对象\",{\"1\":{\"224\":1,\"1522\":1}}],[\"方法区中还有一个区域叫运行时常量池\",{\"1\":{\"211\":1}}],[\"方法区的元空间实现\",{\"1\":{\"211\":1}}],[\"方法区的永久代实现\",{\"1\":{\"211\":1}}],[\"方法区需要存储已被虚拟机加载的类信息\",{\"1\":{\"211\":1}}],[\"方法区\",{\"0\":{\"211\":1},\"1\":{\"359\":1,\"1520\":1}}],[\"方法服务\",{\"1\":{\"209\":1}}],[\"方法正常退出或异常退出的地址\",{\"1\":{\"206\":1}}],[\"方法返回的实例对象\",{\"1\":{\"1010\":1}}],[\"方法返回地址以及其它附加信息全部归为栈帧信息\",{\"1\":{\"208\":1}}],[\"方法返回地址\",{\"0\":{\"206\":1}}],[\"方法返回地址和一些额外的附加信息\",{\"1\":{\"203\":1}}],[\"方法返回一个localmanualcache对象\",{\"1\":{\"73\":1}}],[\"方法创建实际的操作系统线程\",{\"1\":{\"1090\":1}}],[\"方法创建\",{\"1\":{\"196\":1}}],[\"方法中首次创建\",{\"1\":{\"829\":1}}],[\"方法中\",{\"1\":{\"196\":1}}],[\"方法中将执行\",{\"1\":{\"195\":1}}],[\"方法实现的\",{\"1\":{\"1086\":1}}],[\"方法实现\",{\"1\":{\"137\":1,\"1493\":1}}],[\"方法名\",{\"1\":{\"5\":1}}],[\"方法\",{\"1\":{\"4\":1,\"101\":1,\"139\":1,\"188\":2,\"196\":6,\"211\":1,\"247\":1,\"263\":1,\"289\":1,\"304\":1,\"312\":1,\"327\":1,\"328\":1,\"329\":1,\"348\":1,\"543\":1,\"544\":2,\"771\":2,\"772\":2,\"776\":1,\"777\":1,\"799\":1,\"801\":1,\"820\":1,\"821\":2,\"867\":1,\"873\":1,\"1012\":1,\"1015\":2,\"1038\":1,\"1059\":1,\"1093\":1,\"1115\":1,\"1120\":1,\"1379\":1,\"1508\":3,\"1512\":1,\"1520\":1,\"1527\":1,\"1532\":1,\"1534\":1,\"1598\":1,\"1607\":2,\"1623\":1}}],[\"问题分析\",{\"0\":{\"651\":1}}],[\"问题\",{\"1\":{\"17\":1,\"148\":1,\"150\":1,\"301\":1,\"736\":1,\"917\":1,\"1411\":2,\"1513\":1}}],[\"保护被中断进程的\",{\"1\":{\"1482\":1}}],[\"保护性拷贝\",{\"1\":{\"146\":1}}],[\"保活时间重置\",{\"1\":{\"1419\":1}}],[\"保活机制来探测主机是否正常\",{\"1\":{\"1420\":1}}],[\"保活机制的条件\",{\"1\":{\"1419\":1}}],[\"保活机制\",{\"0\":{\"1419\":1},\"1\":{\"1409\":1}}],[\"保障隔离性\",{\"1\":{\"1284\":1}}],[\"保障一致性\",{\"1\":{\"1284\":1}}],[\"保障集群的稳定性\",{\"1\":{\"33\":1}}],[\"保留访问和修改时间\",{\"1\":{\"1218\":2}}],[\"保留y位小数\",{\"1\":{\"594\":1}}],[\"保留整数部分返回\",{\"1\":{\"287\":1}}],[\"保持基本形态就行\",{\"1\":{\"1827\":1}}],[\"保持运动的习惯\",{\"1\":{\"1786\":1}}],[\"保持有序\",{\"1\":{\"889\":1}}],[\"保持数据的一致性\",{\"1\":{\"640\":1}}],[\"保持心跳\",{\"1\":{\"483\":1}}],[\"保持同步的\",{\"1\":{\"460\":1}}],[\"保持高吞吐量\",{\"1\":{\"178\":1}}],[\"保证视频不变型\",{\"1\":{\"1878\":1}}],[\"保证两个堆的元素个数不超过\",{\"1\":{\"1658\":1}}],[\"保证高可用rabbitmq\",{\"1\":{\"1629\":1}}],[\"保证消息顺序性\",{\"1\":{\"1629\":1}}],[\"保证消息可靠性\",{\"1\":{\"1629\":1}}],[\"保证消息完整性\",{\"1\":{\"1401\":1}}],[\"保证服务的可用性\",{\"1\":{\"1589\":1}}],[\"保证在发生数据库故障时\",{\"1\":{\"1555\":1}}],[\"保证变量的可见性\",{\"1\":{\"1507\":1}}],[\"保证资源申请不形成环路\",{\"1\":{\"1466\":1}}],[\"保证多个线程访问共享资源时的互斥性\",{\"1\":{\"1463\":1}}],[\"保证一个进程\",{\"1\":{\"1463\":1}}],[\"保证进程执行的先后\",{\"1\":{\"1460\":1}}],[\"保证正在执行进程的可用性\",{\"1\":{\"1447\":1}}],[\"保证动态请求才打到后端的服务集群\",{\"1\":{\"1375\":1}}],[\"保证最终一致性\",{\"1\":{\"1282\":1}}],[\"保证强一致性\",{\"1\":{\"1282\":1}}],[\"保证只有第一个请求会落到数据库上\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"保证索引性能\",{\"1\":{\"1219\":1}}],[\"保证\",{\"1\":{\"1119\":1}}],[\"保证数据一致性\",{\"1\":{\"917\":1,\"1368\":1}}],[\"保证数据的一致性\",{\"1\":{\"1031\":1}}],[\"保证数据的一致性和完整性\",{\"1\":{\"598\":1}}],[\"保证数据的完整性和正确性\",{\"1\":{\"678\":1}}],[\"保证数据的完整性\",{\"1\":{\"550\":1}}],[\"保证主从服务器的数据一致性\",{\"1\":{\"908\":1}}],[\"保证ht\",{\"1\":{\"883\":1}}],[\"保证事务的最终一致性\",{\"1\":{\"1370\":1}}],[\"保证事务id按时间先后递增\",{\"1\":{\"744\":1}}],[\"保证事务在不受外部并发操作影响的独立环境下运行\",{\"1\":{\"735\":1}}],[\"保证字段值满足某一个条件\",{\"1\":{\"598\":1}}],[\"保证该字段的所有数据都是唯一\",{\"1\":{\"598\":1}}],[\"保证读写的正确性\",{\"1\":{\"553\":1}}],[\"保证键的唯一\",{\"1\":{\"305\":1}}],[\"保证输入的字节流能正确解析并存储于方法区之内\",{\"1\":{\"250\":1}}],[\"保证代码运行不会jvm自身的安全\",{\"1\":{\"250\":1}}],[\"保证更新的原子性\",{\"1\":{\"214\":1}}],[\"保证线程安全\",{\"1\":{\"154\":1,\"1514\":1}}],[\"保证了无重复的排列结果\",{\"1\":{\"1675\":1}}],[\"保证了java程序的稳定运行\",{\"1\":{\"1528\":1}}],[\"保证了操作的原子性\",{\"1\":{\"1513\":1}}],[\"保证了可见性和有序性\",{\"1\":{\"1506\":1}}],[\"保证了事务的一致性\",{\"1\":{\"961\":1}}],[\"保证了\",{\"1\":{\"817\":1,\"1556\":1}}],[\"保证了不重复\",{\"1\":{\"461\":1}}],[\"保证了原子性和可见性\",{\"1\":{\"1506\":1}}],[\"保证了原子性\",{\"1\":{\"145\":1}}],[\"保证了先来后到\",{\"1\":{\"9\":1}}],[\"保证内存的可见性\",{\"1\":{\"137\":1}}],[\"保存被提交但尚未被执行的任务\",{\"1\":{\"1511\":1}}],[\"保存被提交但尚未执行的任务\",{\"1\":{\"1106\":1}}],[\"保存完成了三次握手的连接\",{\"1\":{\"1487\":1}}],[\"保存还没有完成三次握手的连接\",{\"1\":{\"1487\":1}}],[\"保存需要传输的数据\",{\"1\":{\"1481\":1}}],[\"保存要执行的命令\",{\"1\":{\"1481\":1}}],[\"保存起来\",{\"1\":{\"1454\":1}}],[\"保存在\",{\"1\":{\"1642\":1}}],[\"保存在服务端\",{\"1\":{\"1642\":1}}],[\"保存在客户端\",{\"1\":{\"1642\":1}}],[\"保存在段寄存器里\",{\"1\":{\"1443\":1}}],[\"保存在数组项的u\",{\"1\":{\"970\":1}}],[\"保存暂存区信息\",{\"1\":{\"1349\":1}}],[\"保存暂停的事务资源\",{\"1\":{\"1044\":1}}],[\"保存为一个树对象\",{\"1\":{\"1332\":1}}],[\"保存的不是文件的变化或者差异\",{\"1\":{\"1331\":1}}],[\"保存的数据快照数量\",{\"1\":{\"1164\":1}}],[\"保存项目的元数据和对象数据库的地方\",{\"1\":{\"1310\":1}}],[\"保存数据\",{\"1\":{\"1168\":1}}],[\"保存数据时\",{\"1\":{\"598\":1}}],[\"保存当前线程的事务资源\",{\"1\":{\"1045\":1}}],[\"保存上限\",{\"1\":{\"978\":1}}],[\"保存结果集\",{\"1\":{\"971\":1}}],[\"保存排序结果\",{\"1\":{\"969\":1}}],[\"保存客户端和模式\",{\"1\":{\"955\":1}}],[\"保存模式和客户端\",{\"1\":{\"955\":1}}],[\"保存模式订阅信息的链表\",{\"1\":{\"929\":1}}],[\"保存两个目标节点相关信息\",{\"1\":{\"949\":1}}],[\"保存连接节点所需的信息\",{\"1\":{\"945\":1}}],[\"保存慢查询日志的结构\",{\"1\":{\"929\":1}}],[\"保存频道订阅信息的字典\",{\"1\":{\"929\":1}}],[\"保存到argv\",{\"1\":{\"926\":1}}],[\"保存到redisclient的输入缓冲区\",{\"1\":{\"926\":1}}],[\"保存长度较大的回复\",{\"1\":{\"923\":1}}],[\"保存长度较小的回复\",{\"1\":{\"923\":1}}],[\"保存时没有任何影响\",{\"1\":{\"908\":1}}],[\"保存时\",{\"1\":{\"908\":1}}],[\"保存一个集合元素\",{\"1\":{\"899\":1}}],[\"保存值\",{\"1\":{\"898\":1}}],[\"保存键\",{\"1\":{\"898\":1}}],[\"保存节点值\",{\"1\":{\"892\":1}}],[\"保存元素的数组\",{\"1\":{\"888\":1}}],[\"保存类型特定函数所需参数\",{\"1\":{\"882\":1}}],[\"保存了下次将要提交的文件列表信息\",{\"1\":{\"1310\":1}}],[\"保存了所有完全建立好的\",{\"1\":{\"856\":1}}],[\"保存了消息偏移量到物理位置的索引\",{\"1\":{\"476\":1}}],[\"保存了消息集的具体内容\",{\"1\":{\"476\":1}}],[\"保存点\",{\"1\":{\"734\":1}}],[\"保存\",{\"1\":{\"154\":1,\"1514\":1}}],[\"保存着程序运行的状态\",{\"1\":{\"134\":1}}],[\"保存对应的\",{\"1\":{\"17\":1}}],[\"内嵌服务器使得应用程序可以直接运行\",{\"1\":{\"1609\":1}}],[\"内嵌的管理控制台端口\",{\"1\":{\"1164\":1}}],[\"内有效\",{\"1\":{\"1596\":1}}],[\"内的是内核线程\",{\"1\":{\"1437\":1}}],[\"内就可以完成连接建立和密钥协商\",{\"1\":{\"1404\":1}}],[\"内含用服务端\",{\"1\":{\"1402\":1}}],[\"内含数字证书\",{\"1\":{\"1402\":1}}],[\"内含元素类型\",{\"1\":{\"122\":1}}],[\"内提供的进行分布式资源调度的组件\",{\"1\":{\"1222\":1}}],[\"内提供的进行分布式计算的框架\",{\"1\":{\"1221\":1}}],[\"内层事务\",{\"1\":{\"1049\":3}}],[\"内核为每个\",{\"1\":{\"1487\":1}}],[\"内核管理的内存区域\",{\"1\":{\"1479\":1}}],[\"内核数据准备好\",{\"1\":{\"1478\":1}}],[\"内核将数据从内核空间拷贝到应用程序空间的过程都是需要等待的\",{\"1\":{\"1478\":1}}],[\"内核将触发\",{\"1\":{\"1446\":1}}],[\"内核在合适的时机唤醒线程\",{\"1\":{\"1468\":1}}],[\"内核定义了三个内存阈值\",{\"1\":{\"1446\":1}}],[\"内核缓冲区\",{\"1\":{\"1486\":1}}],[\"内核缓冲区的数据写入网卡\",{\"1\":{\"802\":1}}],[\"内核缓存的数据的缓存时间超过某个时间时\",{\"1\":{\"1478\":1}}],[\"内核缓存的磁盘数据\",{\"1\":{\"1446\":1}}],[\"内核缓存会刷到磁盘上\",{\"1\":{\"1478\":1}}],[\"内核只保留基本能力\",{\"1\":{\"1441\":1}}],[\"内核设计\",{\"0\":{\"1441\":1}}],[\"内核处理完后再触发中断回到用户态\",{\"1\":{\"1440\":1}}],[\"内核空间占\",{\"1\":{\"1444\":1}}],[\"内核空间\",{\"1\":{\"1440\":1,\"1444\":1}}],[\"内核具有很高的权限\",{\"1\":{\"1440\":1}}],[\"内核态和用户态\",{\"0\":{\"1440\":1}}],[\"内核态来完成真正的数据读取\",{\"1\":{\"794\":1}}],[\"内核会将其加入到这个就绪事件列表中\",{\"1\":{\"1487\":1}}],[\"内核会进行直接内存回收\",{\"1\":{\"1447\":1}}],[\"内核会自动发送\",{\"1\":{\"1420\":1}}],[\"内核会把数据写到磁盘上\",{\"1\":{\"1478\":1}}],[\"内核会把连接从半连接队列中移除\",{\"1\":{\"1414\":1}}],[\"内核会把该连接存储到半连接队列中\",{\"1\":{\"1414\":1}}],[\"内核\",{\"1\":{\"1395\":1}}],[\"内核申请一个内核态的\",{\"1\":{\"1395\":1}}],[\"内核收发数据包\",{\"0\":{\"1395\":1}}],[\"内核中维护了一个链表来记录就绪事件\",{\"1\":{\"1487\":1}}],[\"内核中使用红黑树来跟踪进程所有待检测的文件描述符\",{\"1\":{\"1487\":1}}],[\"内核中的ksoftirqd线程负责处理软中断\",{\"1\":{\"1395\":1}}],[\"内核中\",{\"1\":{\"1393\":1,\"1436\":1}}],[\"内核来完成的\",{\"1\":{\"799\":1}}],[\"内核的读能力\",{\"1\":{\"799\":1}}],[\"内核线程来回收内存\",{\"1\":{\"1446\":1}}],[\"内核线程负责执行用户线程的工作\",{\"1\":{\"280\":1}}],[\"内核线程实现\",{\"1\":{\"278\":1}}],[\"内核线程通常是由操作系统调度器进行调度\",{\"1\":{\"278\":1}}],[\"内核线程是操作系统的一部分\",{\"1\":{\"278\":1}}],[\"内核线程是由操作系统内核\",{\"1\":{\"278\":1}}],[\"内核线程\",{\"0\":{\"278\":1},\"1\":{\"277\":1,\"1451\":1}}],[\"内连接可能通过优化表的连接顺序来降低整体的查询成本\",{\"1\":{\"725\":1}}],[\"内连接\",{\"1\":{\"713\":1}}],[\"内连接查询的是两张表交集的部分\",{\"1\":{\"603\":1}}],[\"内连接查询\",{\"0\":{\"603\":1}}],[\"内新增消费者\",{\"1\":{\"494\":1}}],[\"内容拷贝至\",{\"1\":{\"788\":1}}],[\"内容\",{\"1\":{\"357\":1}}],[\"内联函数\",{\"1\":{\"274\":1}}],[\"内部用队列排队\",{\"1\":{\"1629\":1}}],[\"内部通过一个守护线程定期轮询检测文件变化实现\",{\"1\":{\"1503\":1}}],[\"内部通过\",{\"1\":{\"1500\":1}}],[\"内部通过栈回溯恢复线程执行并抛出异常\",{\"1\":{\"1465\":1}}],[\"内部没有使用\",{\"1\":{\"1499\":1}}],[\"内部自动扩容\",{\"1\":{\"1499\":1}}],[\"内部array不会发生修改\",{\"1\":{\"1498\":1}}],[\"内部组织成红黑树结构\",{\"1\":{\"1436\":1}}],[\"内部原理\",{\"0\":{\"1348\":1}}],[\"内部表\",{\"1\":{\"1228\":1}}],[\"内部有一个\",{\"1\":{\"1052\":1}}],[\"内部有保存所有\",{\"1\":{\"1012\":1}}],[\"内部存储了\",{\"1\":{\"1006\":1}}],[\"内部维护了一个\",{\"1\":{\"833\":1}}],[\"内部\",{\"1\":{\"542\":1,\"1135\":1}}],[\"内部生成的主键\",{\"1\":{\"530\":1}}],[\"内部会对这个\",{\"1\":{\"490\":1}}],[\"内部会通过具体的子类定义的tryacquire去尝试修改\",{\"1\":{\"5\":1}}],[\"内部划分的独立域\",{\"1\":{\"413\":1}}],[\"内部也提供一个简单实现\",{\"1\":{\"376\":1}}],[\"内部类\",{\"0\":{\"294\":1},\"1\":{\"240\":1,\"289\":1,\"1059\":1}}],[\"内部使用\",{\"1\":{\"212\":1,\"870\":1}}],[\"内部直接使用加锁方式保证线程安全\",{\"1\":{\"162\":1}}],[\"内部基于\",{\"1\":{\"156\":1}}],[\"内部的成员变量还是比较多的\",{\"1\":{\"1087\":1}}],[\"内部的\",{\"1\":{\"154\":1,\"1514\":1}}],[\"内部都有一个\",{\"1\":{\"154\":1,\"483\":1}}],[\"内外部表\",{\"1\":{\"117\":1}}],[\"内置闪光灯\",{\"1\":{\"1799\":1}}],[\"内置注解\",{\"1\":{\"1595\":1}}],[\"内置类加载器\",{\"1\":{\"1528\":1}}],[\"内置三个特殊标记\",{\"1\":{\"1229\":1}}],[\"内置了以下四种策略\",{\"1\":{\"1109\":1}}],[\"内置了\",{\"1\":{\"846\":1}}],[\"内置了大量常用的匹配器\",{\"1\":{\"79\":1}}],[\"内置的简单日志系统打印日志\",{\"1\":{\"382\":1}}],[\"内置的哈希限定为\",{\"1\":{\"83\":1}}],[\"内置的排序器有以下几个\",{\"1\":{\"61\":1}}],[\"内存存储\",{\"1\":{\"1571\":1}}],[\"内存空间不足\",{\"1\":{\"1533\":1}}],[\"内存排查工具\",{\"0\":{\"1529\":1}}],[\"内存足够就不回收\",{\"1\":{\"1522\":1}}],[\"内存映射\",{\"1\":{\"1481\":1}}],[\"内存文件系统\",{\"1\":{\"1474\":1}}],[\"内存闲置\",{\"1\":{\"1447\":1}}],[\"内存不足\",{\"1\":{\"1447\":1}}],[\"内存不足时\",{\"1\":{\"1443\":1}}],[\"内存处在\",{\"1\":{\"1446\":1}}],[\"内存溢出前才回收\",{\"1\":{\"1522\":1}}],[\"内存溢出\",{\"1\":{\"1445\":1}}],[\"内存交换需要在硬盘和内存间交换数据\",{\"1\":{\"1443\":1}}],[\"内存交换效率低\",{\"1\":{\"1443\":1}}],[\"内存碎片化\",{\"1\":{\"1523\":1}}],[\"内存碎片\",{\"1\":{\"1443\":1}}],[\"内存管理\",{\"0\":{\"1442\":1,\"1444\":1}}],[\"内存区域\",{\"0\":{\"1520\":1},\"1\":{\"1395\":1}}],[\"内存页第二次被访问时\",{\"1\":{\"1448\":1}}],[\"内存页第二次访问时才进行升级\",{\"1\":{\"1448\":1}}],[\"内存页\",{\"1\":{\"1259\":1}}],[\"内存页的大小\",{\"1\":{\"1143\":1}}],[\"内存栅障\",{\"1\":{\"1142\":1}}],[\"内存栅栏可能会间接影响性能\",{\"1\":{\"145\":1}}],[\"内存屏障也称内存栅栏\",{\"1\":{\"1142\":1}}],[\"内存屏障\",{\"0\":{\"1142\":1},\"1\":{\"1142\":3}}],[\"内存初始化\",{\"1\":{\"1136\":1}}],[\"内存操作\",{\"0\":{\"1136\":1}}],[\"内存池中以复用\",{\"1\":{\"1445\":1}}],[\"内存池\",{\"1\":{\"1104\":1}}],[\"内存占用率\",{\"1\":{\"1631\":1}}],[\"内存占用\",{\"1\":{\"920\":1,\"927\":1}}],[\"内存占用高\",{\"1\":{\"763\":1}}],[\"内存友好\",{\"1\":{\"908\":1}}],[\"内存需求不是很大\",{\"1\":{\"860\":1}}],[\"内存回收\",{\"0\":{\"829\":1,\"1446\":1}}],[\"内存回收分成两步\",{\"1\":{\"800\":1}}],[\"内存将被释放\",{\"1\":{\"827\":1}}],[\"内存中\",{\"1\":{\"802\":1}}],[\"内存中来直接访问使用\",{\"1\":{\"800\":1}}],[\"内存中开辟一块连续的空间用于解决磁盘速度过慢的问题\",{\"1\":{\"739\":1}}],[\"内存使用\",{\"1\":{\"681\":1}}],[\"内存使用情况\",{\"1\":{\"237\":1,\"238\":1,\"1700\":1}}],[\"内存使用情况等\",{\"1\":{\"236\":1}}],[\"内存图\",{\"0\":{\"359\":1}}],[\"内存泄漏问题\",{\"1\":{\"1514\":1}}],[\"内存泄漏分析等\",{\"1\":{\"237\":1,\"238\":1}}],[\"内存泄露\",{\"1\":{\"1445\":1}}],[\"内存泄露问题\",{\"1\":{\"154\":1}}],[\"内存分页\",{\"1\":{\"1443\":1}}],[\"内存分段程序由若干个逻辑段组成\",{\"1\":{\"1443\":1}}],[\"内存分析器等\",{\"1\":{\"237\":1}}],[\"内存分配\",{\"0\":{\"1445\":1}}],[\"内存分配等\",{\"1\":{\"238\":1}}],[\"内存分配不规整\",{\"1\":{\"214\":1}}],[\"内存分配规整\",{\"1\":{\"214\":1}}],[\"内存分配完成后\",{\"1\":{\"214\":1}}],[\"内存结构\",{\"0\":{\"220\":1,\"638\":1}}],[\"内存多重映射等技术\",{\"1\":{\"179\":1}}],[\"内存系统重排\",{\"1\":{\"143\":1}}],[\"内存模型\",{\"0\":{\"141\":1,\"275\":1},\"1\":{\"142\":1,\"144\":1,\"275\":1}}],[\"内存和\",{\"1\":{\"33\":1}}],[\"内存\",{\"1\":{\"17\":1,\"435\":2,\"788\":1,\"800\":1,\"829\":1,\"961\":1,\"1222\":1,\"1395\":1,\"1434\":1,\"1440\":1,\"1446\":2,\"1524\":1}}],[\"且资源信息会一直保留\",{\"1\":{\"1811\":1}}],[\"且强调自动化测试要对被测软件提供快速且高质量的验证反馈\",{\"1\":{\"1705\":1}}],[\"且无序\",{\"1\":{\"1622\":1}}],[\"且无须返回数据\",{\"1\":{\"1488\":1}}],[\"且一个请求方法中仅能有一个\",{\"1\":{\"1608\":1}}],[\"且仅在当前应用启动时间内有效\",{\"1\":{\"1596\":1}}],[\"且仅在当前\",{\"1\":{\"1596\":2}}],[\"且仅支持本地文件\",{\"1\":{\"1488\":1}}],[\"且和加锁应是原子的\",{\"1\":{\"1582\":1}}],[\"且和串行执行结果相同\",{\"1\":{\"961\":1}}],[\"且在读操作时不需要加锁\",{\"1\":{\"1542\":1}}],[\"且通过内存屏障禁止指令重排序\",{\"1\":{\"1506\":1}}],[\"且长度超过阈值\",{\"1\":{\"1497\":1}}],[\"且返回途中不处理请求\",{\"1\":{\"1472\":1}}],[\"且加锁成本非常高的场景\",{\"1\":{\"1468\":1}}],[\"且读多写少的场景\",{\"1\":{\"1468\":1}}],[\"且拥有最高的权限\",{\"1\":{\"1441\":1}}],[\"且支持自动分配\",{\"1\":{\"1422\":1}}],[\"且数据大小\",{\"1\":{\"1412\":1}}],[\"且数据被修改过\",{\"1\":{\"638\":1}}],[\"且没有数据要继续发送\",{\"1\":{\"1410\":1}}],[\"且没有被其它线程持有\",{\"1\":{\"9\":2}}],[\"且超时时间\",{\"1\":{\"1409\":1}}],[\"且多次执行的结果相同\",{\"1\":{\"1405\":1}}],[\"且由代理服务器转发\",{\"1\":{\"1400\":1}}],[\"且最后一层的节点都连续集中在最左边\",{\"1\":{\"1387\":1}}],[\"且距离最近的三个机场\",{\"1\":{\"1360\":1}}],[\"且工作单的库存处于锁定状态才进行库存解锁\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"且分布在不同机器上\",{\"1\":{\"1262\":1}}],[\"且error要么记录进日志\",{\"1\":{\"1244\":1}}],[\"且判断对业务没有实质性影响的\",{\"1\":{\"1236\":1}}],[\"且必须有可回滚的手段\",{\"1\":{\"1234\":1}}],[\"且默认都投给自己\",{\"1\":{\"1202\":1}}],[\"且默认情况下不会记录管理语句\",{\"1\":{\"645\":1}}],[\"且非final\",{\"1\":{\"1061\":1}}],[\"且实现了目标的接口\",{\"1\":{\"1015\":1}}],[\"且实现简单\",{\"1\":{\"885\":1}}],[\"且放在\",{\"1\":{\"1015\":1}}],[\"且逆序保存简化操作\",{\"1\":{\"973\":1}}],[\"且第一个向主节点要求投票的从节点将获得主节点的投票\",{\"1\":{\"948\":1}}],[\"且参数runid是源sentinel的运行id\",{\"1\":{\"942\":1}}],[\"且提供相同的api\",{\"1\":{\"919\":1}}],[\"且子进程带有服务器进程的数据副本\",{\"1\":{\"917\":1}}],[\"且新节点总是添加到链表的表头以加快速度\",{\"1\":{\"883\":1}}],[\"且这些语句不可分割\",{\"1\":{\"739\":1}}],[\"且这些记录的id值都是相同的\",{\"1\":{\"728\":1}}],[\"且执行完后恢复原级别\",{\"1\":{\"737\":1}}],[\"且该列可为null\",{\"1\":{\"728\":1}}],[\"且该列表视图通常性能很好\",{\"1\":{\"64\":1}}],[\"且存储引擎的统计数据是精确的表\",{\"1\":{\"728\":1}}],[\"且存储的是字符串对象的引用\",{\"1\":{\"211\":1}}],[\"且查询比较频繁的表建立索引\",{\"1\":{\"708\":1}}],[\"且唯一\",{\"1\":{\"701\":1}}],[\"且所有叶子节点形成一个单向链表\",{\"1\":{\"698\":1}}],[\"且有一个默认的规则\",{\"1\":{\"674\":1}}],[\"且有安全隐患\",{\"1\":{\"17\":1}}],[\"且行锁的性能高于表锁\",{\"1\":{\"620\":1}}],[\"且遵守最左前缀法则\",{\"1\":{\"616\":1}}],[\"且只在主线程中运行\",{\"1\":{\"1488\":1}}],[\"且只有非核心线程\",{\"1\":{\"1110\":1}}],[\"且只有该线程可以读写数据\",{\"1\":{\"549\":1}}],[\"且只会用到索引相关的列\",{\"1\":{\"711\":1}}],[\"且只作用于标签所在的映射文件中的语句\",{\"1\":{\"533\":1}}],[\"且符合类型安全\",{\"1\":{\"510\":1}}],[\"且可以禁止幻读发生\",{\"1\":{\"737\":1}}],[\"且可以在线程执行完毕后获取执行结果\",{\"1\":{\"329\":1}}],[\"且可以共享一部分数据\",{\"1\":{\"207\":1}}],[\"且全部继承自抽象类java\",{\"1\":{\"254\":1}}],[\"且出队后不可再次进入\",{\"1\":{\"184\":1}}],[\"且\",{\"1\":{\"143\":1,\"154\":1,\"461\":1,\"470\":1,\"570\":1,\"1281\":1,\"1547\":1,\"1556\":1,\"1620\":1,\"1629\":1}}],[\"且不会中断\",{\"1\":{\"961\":1}}],[\"且不会抢占\",{\"1\":{\"921\":1}}],[\"且不搜索默认配置文件\",{\"1\":{\"569\":1}}],[\"且不支持事务\",{\"1\":{\"549\":1}}],[\"且不重新入队\",{\"1\":{\"425\":1}}],[\"且不能访问系统表\",{\"1\":{\"1539\":1}}],[\"且不能保证事务串行化\",{\"1\":{\"1435\":1}}],[\"且不能直接获取方法调用关系\",{\"1\":{\"268\":1}}],[\"且不能被唤醒\",{\"1\":{\"139\":1}}],[\"且不关联任何信息\",{\"1\":{\"75\":1}}],[\"且都不释放\",{\"1\":{\"134\":1}}],[\"且期望实施对其引用的查询\",{\"1\":{\"75\":1}}],[\"且会更新原始的\",{\"1\":{\"67\":1}}],[\"技术挑战\",{\"0\":{\"1752\":1}}],[\"技术能力强大的ota\",{\"1\":{\"1751\":1}}],[\"技术经停权\",{\"0\":{\"1743\":1}}],[\"技术变革\",{\"1\":{\"1721\":1}}],[\"技术总体基于\",{\"1\":{\"1365\":1}}],[\"技术栈内提供的基于主从的分布式数据存储解决方案\",{\"1\":{\"1215\":1}}],[\"技术服务栈\",{\"1\":{\"31\":1}}],[\"技术\",{\"1\":{\"17\":1,\"1486\":1}}],[\"分销交互产生了变化\",{\"1\":{\"1726\":1}}],[\"分销模式\",{\"0\":{\"1726\":1}}],[\"分开\",{\"1\":{\"1666\":1}}],[\"分治\",{\"0\":{\"1666\":1}}],[\"分治法\",{\"1\":{\"1658\":3}}],[\"分而治之\",{\"1\":{\"1641\":1,\"1658\":1}}],[\"分四种类型\",{\"1\":{\"1628\":1}}],[\"分四个阶段\",{\"1\":{\"250\":1}}],[\"分发\",{\"1\":{\"1605\":1}}],[\"分发给底层不同的\",{\"1\":{\"1629\":1}}],[\"分发给\",{\"1\":{\"1488\":1}}],[\"分表是对单表的数据进行拆分\",{\"1\":{\"1564\":1}}],[\"分表锁lock\",{\"1\":{\"564\":1}}],[\"分库是将数据库中的数据分散到不同的数据库上\",{\"1\":{\"1564\":1}}],[\"分库分表示意图\",{\"1\":{\"651\":1}}],[\"分库分表\",{\"0\":{\"650\":1,\"1564\":1},\"1\":{\"1548\":1}}],[\"分新生代\",{\"1\":{\"1520\":1}}],[\"分读\",{\"1\":{\"1483\":1}}],[\"分隐式链表\",{\"1\":{\"1476\":1}}],[\"分抢占式和非抢占式\",{\"1\":{\"1470\":1}}],[\"分段机制下的虚拟地址由两部分组成\",{\"1\":{\"1443\":1}}],[\"分数据缓存\",{\"1\":{\"1434\":1}}],[\"分数据帧和控制帧两类\",{\"1\":{\"1404\":1}}],[\"分包头和数据\",{\"1\":{\"1417\":1}}],[\"分基本信息\",{\"1\":{\"1369\":1}}],[\"分钟后从内存中清除\",{\"1\":{\"1347\":1}}],[\"分支时触发任务\",{\"1\":{\"1791\":1}}],[\"分支所需的数据\",{\"1\":{\"1347\":1}}],[\"分支推送到\",{\"1\":{\"1338\":2}}],[\"分支上\",{\"1\":{\"1337\":1}}],[\"分支的修改\",{\"1\":{\"1337\":1}}],[\"分支但不在\",{\"1\":{\"1337\":1}}],[\"分支合并\",{\"0\":{\"1334\":1}}],[\"分支重命名\",{\"1\":{\"1333\":1}}],[\"分支管理\",{\"0\":{\"1333\":1}}],[\"分支结构\",{\"0\":{\"1332\":1}}],[\"分支\",{\"0\":{\"1331\":1},\"1\":{\"1335\":1,\"1338\":2,\"1341\":1,\"1351\":1}}],[\"分支阻塞\",{\"1\":{\"872\":1}}],[\"分割\",{\"1\":{\"1227\":5,\"1567\":1}}],[\"分散\",{\"1\":{\"1221\":1}}],[\"分散读\",{\"1\":{\"772\":1}}],[\"分两部分\",{\"1\":{\"1598\":1}}],[\"分两个大的步骤\",{\"1\":{\"1114\":1}}],[\"分两种\",{\"1\":{\"492\":1,\"560\":1}}],[\"分代年龄等\",{\"1\":{\"1074\":1}}],[\"分代收集的理论基于两个假说\",{\"1\":{\"171\":1}}],[\"分代收集\",{\"0\":{\"171\":1}}],[\"分普通\",{\"1\":{\"1026\":1}}],[\"分普通任务\",{\"1\":{\"814\":1}}],[\"分层\",{\"0\":{\"1484\":1},\"1\":{\"1001\":1}}],[\"分层编译\",{\"0\":{\"267\":1}}],[\"分多条命令写入\",{\"1\":{\"917\":1}}],[\"分多次遍历服务器中的各个数据库\",{\"1\":{\"908\":1}}],[\"分6种\",{\"1\":{\"892\":1}}],[\"分三种\",{\"1\":{\"892\":1,\"1454\":1}}],[\"分三种情况\",{\"1\":{\"452\":1}}],[\"分值是槽号\",{\"1\":{\"945\":1}}],[\"分值由double转为字符串\",{\"1\":{\"913\":1}}],[\"分值按字符串对象相邻保存\",{\"1\":{\"913\":1}}],[\"分值相同的结点按成员字典序排序\",{\"1\":{\"886\":1}}],[\"分值\",{\"1\":{\"886\":1}}],[\"分入站\",{\"1\":{\"823\":1}}],[\"分乐观插入\",{\"1\":{\"739\":1}}],[\"分组后每个类别聚合成一行\",{\"1\":{\"1567\":1}}],[\"分组后的过滤条件\",{\"1\":{\"585\":1}}],[\"分组后的条件列表\",{\"1\":{\"581\":1}}],[\"分组等特定操作下可以带来显著的性能提升\",{\"1\":{\"1228\":1}}],[\"分组\",{\"1\":{\"651\":1,\"708\":1,\"1446\":1}}],[\"分组操作时\",{\"1\":{\"617\":1}}],[\"分组之后\",{\"1\":{\"585\":1}}],[\"分组字段名\",{\"1\":{\"585\":1}}],[\"分组字段列表\",{\"1\":{\"581\":1}}],[\"分组查询\",{\"0\":{\"585\":1}}],[\"分为\",{\"1\":{\"1862\":1}}],[\"分为两层\",{\"1\":{\"1862\":1}}],[\"分为两步\",{\"1\":{\"168\":1,\"170\":1}}],[\"分为阻塞队列\",{\"1\":{\"1499\":1}}],[\"分为磁盘文件系统\",{\"1\":{\"1474\":1}}],[\"分为三个阶段\",{\"1\":{\"1234\":1}}],[\"分为prepare\",{\"1\":{\"729\":1}}],[\"分为4类\",{\"1\":{\"640\":1}}],[\"分为多个\",{\"1\":{\"475\":1}}],[\"分隔符等\",{\"1\":{\"538\":1}}],[\"分隔\",{\"1\":{\"445\":1}}],[\"分服务器端过滤和消费端过滤\",{\"1\":{\"428\":1}}],[\"分全局有序和局部有序\",{\"1\":{\"428\":1}}],[\"分可读写的\",{\"1\":{\"427\":1}}],[\"分以下两类\",{\"1\":{\"262\":1,\"732\":1}}],[\"分派可以分为静态分派\",{\"1\":{\"245\":1}}],[\"分派通常发生在以下情况下\",{\"1\":{\"245\":1}}],[\"分派是指根据方法调用的接收者确定要调用的具体方法实现的过程\",{\"1\":{\"245\":1}}],[\"分派\",{\"0\":{\"245\":1}}],[\"分大\",{\"1\":{\"179\":1}}],[\"分配方式\",{\"1\":{\"1521\":1}}],[\"分配虚拟内存后\",{\"1\":{\"1446\":1}}],[\"分配\",{\"1\":{\"1136\":1}}],[\"分配的是虚拟内存\",{\"1\":{\"1445\":1}}],[\"分配的\",{\"1\":{\"1077\":1}}],[\"分配的效率低\",{\"1\":{\"770\":1}}],[\"分配固定大小的接收缓冲区\",{\"1\":{\"861\":1}}],[\"分配空间时\",{\"1\":{\"1445\":1}}],[\"分配空间\",{\"0\":{\"770\":1},\"1\":{\"770\":1,\"883\":2}}],[\"分配重用undo链表时\",{\"1\":{\"751\":1}}],[\"分配给用户进程\",{\"1\":{\"340\":1}}],[\"分配内存对象\",{\"1\":{\"1645\":1}}],[\"分配内存时修改记录\",{\"1\":{\"214\":1}}],[\"分配内存\",{\"1\":{\"214\":1,\"1136\":2,\"1521\":1}}],[\"分配内存方法\",{\"1\":{\"214\":1}}],[\"分配对象过大或过多可能产生outofmemoryerror\",{\"1\":{\"210\":1}}],[\"分配到不同的区域之中存储\",{\"1\":{\"171\":1}}],[\"分配桶是有规则的\",{\"1\":{\"127\":1}}],[\"分\",{\"1\":{\"150\":1,\"332\":1,\"814\":1,\"1478\":2,\"1560\":1,\"1599\":1}}],[\"分桶查询\",{\"1\":{\"1226\":1}}],[\"分桶表在过滤\",{\"1\":{\"1228\":1}}],[\"分桶表\",{\"1\":{\"1228\":1}}],[\"分桶表无法使用load\",{\"1\":{\"119\":1}}],[\"分桶表需要开启\",{\"1\":{\"119\":1}}],[\"分桶操作\",{\"0\":{\"119\":1}}],[\"分区容错性\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"分区列=xxx\",{\"1\":{\"1228\":1}}],[\"分区列\",{\"1\":{\"1228\":1}}],[\"分区列作为字段存储在\",{\"1\":{\"1228\":1}}],[\"分区表可以极大的提高特定场景下\",{\"1\":{\"1228\":1}}],[\"分区表\",{\"1\":{\"1228\":1}}],[\"分区表示意\",{\"1\":{\"113\":1,\"118\":1}}],[\"分区分配\",{\"0\":{\"494\":1}}],[\"分区副本分配\",{\"1\":{\"470\":1}}],[\"分区副本大于等于2\",{\"1\":{\"460\":1,\"461\":1}}],[\"分区中的所有副本统称\",{\"1\":{\"469\":1}}],[\"分区策略\",{\"0\":{\"451\":1}}],[\"分区器将数据切片发送至\",{\"1\":{\"450\":1}}],[\"分区数默认是50\",{\"1\":{\"483\":1}}],[\"分区数\",{\"1\":{\"446\":1}}],[\"分区\",{\"1\":{\"443\":1,\"1224\":1,\"1447\":1}}],[\"分区所在路径不变\",{\"1\":{\"118\":1}}],[\"分区名\",{\"1\":{\"118\":1}}],[\"分区操作\",{\"0\":{\"118\":1}}],[\"分类如下\",{\"1\":{\"1345\":1}}],[\"分类\",{\"0\":{\"572\":1,\"794\":1,\"1524\":1},\"1\":{\"112\":1,\"316\":1,\"598\":1,\"699\":2,\"1427\":1,\"1554\":1}}],[\"分解范围区间\",{\"1\":{\"70\":1}}],[\"分页机制下的虚拟地址由两部分组成\",{\"1\":{\"1443\":1}}],[\"分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小\",{\"1\":{\"1443\":1}}],[\"分页查找时\",{\"1\":{\"1245\":1}}],[\"分页查询效率越低\",{\"1\":{\"618\":1}}],[\"分页查询是数据库的方言\",{\"1\":{\"587\":1}}],[\"分页查询\",{\"0\":{\"587\":1}}],[\"分页参数\",{\"1\":{\"581\":1}}],[\"分页\",{\"1\":{\"51\":1,\"969\":1}}],[\"分布到不同的节点上\",{\"1\":{\"34\":1}}],[\"分布式事务\",{\"0\":{\"1272\":1,\"1277\":1},\"1\":{\"1277\":1}}],[\"分布式事务消息\",{\"1\":{\"434\":1}}],[\"分布式缓存的优点包括\",{\"1\":{\"1254\":1}}],[\"分布式缓存\",{\"0\":{\"1248\":1,\"1254\":1}}],[\"分布式部署的各个机器其实是会有时延的\",{\"1\":{\"1240\":1}}],[\"分布式内存资源调度组件\",{\"1\":{\"1214\":1}}],[\"分布式文件系统\",{\"1\":{\"1214\":1}}],[\"分布式的消息系统\",{\"1\":{\"1213\":1}}],[\"分布式计算框架\",{\"1\":{\"1211\":1,\"1214\":1}}],[\"分布式计算领域的公认定理\",{\"1\":{\"1206\":1}}],[\"分布式系统在遇到某节点或网络分区故障的时候\",{\"1\":{\"1206\":1}}],[\"分布式系统带来的一个明显问题就是业务日志的查看\",{\"1\":{\"441\":1}}],[\"分布式锁的迁移实在是麻烦\",{\"1\":{\"1240\":1}}],[\"分布式锁的迁移更加困难\",{\"1\":{\"1238\":1}}],[\"分布式锁等\",{\"1\":{\"1178\":1}}],[\"分布式锁\",{\"0\":{\"1182\":1,\"1238\":1,\"1262\":1,\"1582\":1},\"1\":{\"1162\":1}}],[\"分布式锁和分布式队列等功能\",{\"1\":{\"1162\":1}}],[\"分布式组件协调\",{\"1\":{\"1162\":1}}],[\"分布式协调组件\",{\"1\":{\"1162\":1}}],[\"分布式协调\",{\"1\":{\"1162\":1}}],[\"分布式协调框架\",{\"1\":{\"808\":1}}],[\"分布式应用程序可以基于\",{\"1\":{\"1162\":1}}],[\"分布式架构\",{\"1\":{\"435\":1}}],[\"分布式\",{\"0\":{\"18\":1,\"1616\":1,\"1622\":1},\"1\":{\"435\":1,\"1374\":1,\"1564\":1,\"1617\":1},\"2\":{\"28\":1,\"54\":1,\"102\":1,\"436\":1,\"501\":1,\"1132\":1,\"1208\":1,\"1270\":1,\"1292\":1}}],[\"分布式会话\",{\"0\":{\"16\":1}}],[\"分片越细\",{\"1\":{\"1637\":1}}],[\"分片算法\",{\"1\":{\"1564\":1}}],[\"分片问题\",{\"0\":{\"1416\":1}}],[\"分片与槽\",{\"0\":{\"946\":1}}],[\"分片节点\",{\"1\":{\"655\":1}}],[\"分片规则\",{\"0\":{\"656\":1},\"1\":{\"655\":1}}],[\"分片日志文件\",{\"1\":{\"476\":1}}],[\"分片日志名为当前\",{\"1\":{\"475\":1}}],[\"分片数等\",{\"1\":{\"42\":1}}],[\"分片的数量只能在创建索引前指定\",{\"1\":{\"34\":1}}],[\"分片的组成单元\",{\"1\":{\"34\":1}}],[\"分片\",{\"1\":{\"34\":1,\"1393\":1}}],[\"分词器模式\",{\"1\":{\"34\":1}}],[\"分词类型\",{\"1\":{\"34\":1}}],[\"分析异常比例\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"分析缓冲区内的请求\",{\"1\":{\"926\":1}}],[\"分析并执行aof文件中的每一条命令\",{\"1\":{\"916\":1}}],[\"分析rdb文件\",{\"0\":{\"914\":1}}],[\"分析器\",{\"1\":{\"570\":1}}],[\"分析和可视化等方面\",{\"1\":{\"1211\":1}}],[\"分析和调优java应用程序的性能和行为\",{\"1\":{\"238\":1}}],[\"分析和调优java应用程序的性能和内存使用情况\",{\"1\":{\"237\":1}}],[\"分析和计算\",{\"1\":{\"34\":1}}],[\"分析和探索的能力\",{\"1\":{\"31\":1}}],[\"分析\",{\"1\":{\"31\":2,\"1224\":1}}],[\"分别对应\",{\"1\":{\"1446\":1,\"1524\":1}}],[\"分别都是一个独立的进程\",{\"1\":{\"1216\":1}}],[\"分别在每个实例的数据目录下创建\",{\"1\":{\"1197\":1}}],[\"分别从\",{\"1\":{\"1008\":1}}],[\"分别为\",{\"1\":{\"794\":1}}],[\"分别到另一张表\",{\"1\":{\"713\":1}}],[\"分别是夏秋季\",{\"1\":{\"1730\":1}}],[\"分别是\",{\"1\":{\"640\":1,\"1723\":1}}],[\"分别关联两方主键\",{\"1\":{\"601\":1}}],[\"分别使用插入意向锁来锁定\",{\"1\":{\"561\":1}}],[\"分别负责不同领域\",{\"1\":{\"31\":1}}],[\"分别记录读锁被多少线程使用和写锁被重入的次数\",{\"1\":{\"9\":1}}],[\"更全面的测试功能集成\",{\"1\":{\"1718\":1}}],[\"更是一种改善代码设计的工具\",{\"1\":{\"1705\":1}}],[\"更高效地利用系统资源\",{\"1\":{\"1634\":1}}],[\"更为适合\",{\"1\":{\"1542\":1}}],[\"更为底层\",{\"1\":{\"760\":1}}],[\"更改航空公司\",{\"1\":{\"1738\":1}}],[\"更改\",{\"1\":{\"1436\":1}}],[\"更改缓冲区\",{\"1\":{\"638\":1}}],[\"更快的连接建立\",{\"1\":{\"1404\":1}}],[\"更多的在于它的世界第一高的意义\",{\"1\":{\"1844\":1}}],[\"更多语句详情见\",{\"1\":{\"1229\":1}}],[\"更多关于消息队列的介绍见\",{\"1\":{\"439\":1}}],[\"更推荐开发者自己定义线程池的各个参数\",{\"1\":{\"1110\":1}}],[\"更推荐使用\",{\"1\":{\"196\":1}}],[\"更简洁\",{\"1\":{\"809\":1}}],[\"更少的用户态与内核态的切换\",{\"1\":{\"802\":1}}],[\"更加安全\",{\"1\":{\"1791\":1}}],[\"更加友好\",{\"1\":{\"1573\":1}}],[\"更加简便\",{\"1\":{\"1351\":1}}],[\"更加方便清晰\",{\"1\":{\"391\":1}}],[\"更加灵活方便\",{\"1\":{\"1014\":1}}],[\"更加灵活\",{\"1\":{\"365\":1,\"1532\":1}}],[\"更加灵活高效\",{\"1\":{\"139\":1}}],[\"更好\",{\"1\":{\"376\":1}}],[\"更适合那些对整体吞吐量要求较高的场景\",{\"1\":{\"175\":1}}],[\"更适合那些对垃圾收集停顿时间要求较高的应用场景\",{\"1\":{\"175\":1}}],[\"更有优势\",{\"1\":{\"145\":1}}],[\"更强大\",{\"1\":{\"145\":1}}],[\"更符合面向对象\",{\"1\":{\"136\":1}}],[\"更灵活\",{\"1\":{\"136\":1}}],[\"更进一步\",{\"1\":{\"77\":1,\"1379\":1,\"1498\":1}}],[\"更容易理解和测试\",{\"1\":{\"64\":1}}],[\"更容易拿到\",{\"1\":{\"6\":1}}],[\"更新及不及时得看负责人了\",{\"1\":{\"1809\":1}}],[\"更新资源\",{\"1\":{\"1608\":1,\"1640\":1}}],[\"更新行记录时\",{\"1\":{\"1554\":1}}],[\"更新行为\",{\"1\":{\"599\":1}}],[\"更新某个引用\",{\"1\":{\"1351\":1}}],[\"更新暂存区\",{\"1\":{\"1350\":1}}],[\"更新了远程引用但尚未传送对象时被调用\",{\"1\":{\"1345\":1}}],[\"更新操作成功并返回客户端完成后\",{\"1\":{\"1206\":1}}],[\"更新操作都是调用执行器的\",{\"1\":{\"544\":1}}],[\"更新系统状态\",{\"1\":{\"1194\":1}}],[\"更新权限\",{\"1\":{\"1168\":1}}],[\"更新相应的clusternode结构\",{\"1\":{\"949\":1}}],[\"更新从数据库状态至主服务器执行bgsave时的状态\",{\"1\":{\"934\":1}}],[\"更新lru时钟\",{\"1\":{\"928\":1}}],[\"更新lru时钟等\",{\"1\":{\"928\":1}}],[\"更新服务器内存峰值记录\",{\"1\":{\"928\":1}}],[\"更新服务器每秒执行命令次数\",{\"1\":{\"928\":1}}],[\"更新服务器时间缓存\",{\"1\":{\"928\":1}}],[\"更新服务器的各类统计信息\",{\"1\":{\"920\":1}}],[\"更新redisclient相关属性\",{\"1\":{\"927\":1}}],[\"更新region的统计数据\",{\"1\":{\"177\":1,\"1525\":1}}],[\"更新键的lru时间\",{\"1\":{\"907\":1}}],[\"更新主键的情况\",{\"1\":{\"748\":1}}],[\"更新条件\",{\"0\":{\"624\":1}}],[\"更新外键在子表中的记录\",{\"1\":{\"599\":1}}],[\"更新对应记录时\",{\"1\":{\"599\":4}}],[\"更新数据库\",{\"0\":{\"1266\":1,\"1267\":1,\"1584\":1,\"1585\":1}}],[\"更新数据库至最新状态\",{\"1\":{\"934\":1}}],[\"更新数据\",{\"0\":{\"579\":1}}],[\"更新请求后就开始消费下一批数据\",{\"1\":{\"492\":1}}],[\"更新日志的\",{\"1\":{\"476\":1}}],[\"更新的jdk也并没有太大的变化\",{\"1\":{\"201\":1}}],[\"更新时间戳\",{\"1\":{\"192\":1}}],[\"更新\",{\"1\":{\"154\":1,\"192\":1,\"599\":2,\"623\":1,\"677\":1,\"1514\":1}}],[\"更新是先删后增\",{\"1\":{\"34\":1}}],[\"更新都是基于段来查询的\",{\"1\":{\"34\":1}}],[\"更新令牌\",{\"1\":{\"15\":1}}],[\"已连接\",{\"1\":{\"1487\":1}}],[\"已分配矩阵\",{\"1\":{\"1466\":1}}],[\"已持有资源的进程在提出新的资源请求没有得到满足时\",{\"1\":{\"1466\":1}}],[\"已失效\",{\"1\":{\"1435\":1}}],[\"已完成\",{\"1\":{\"1374\":1}}],[\"已到了上一次提交\",{\"1\":{\"1344\":1}}],[\"已移除等\",{\"1\":{\"1326\":1}}],[\"已暂存\",{\"1\":{\"1310\":1,\"1633\":1}}],[\"已修改表示修改了文件\",{\"1\":{\"1633\":1}}],[\"已修改\",{\"1\":{\"1310\":1,\"1435\":1,\"1633\":1}}],[\"已提交\",{\"1\":{\"1310\":1,\"1633\":1}}],[\"已停止\",{\"1\":{\"1115\":1}}],[\"已启动线程数\",{\"1\":{\"1099\":1}}],[\"已加入\",{\"1\":{\"1099\":1}}],[\"已有的结点数量\",{\"1\":{\"882\":1}}],[\"已发送的数据都收到\",{\"1\":{\"839\":1}}],[\"已废弃\",{\"0\":{\"1098\":1},\"1\":{\"807\":1,\"1088\":1}}],[\"已存在也不抛异常\",{\"1\":{\"779\":1}}],[\"已存在则抛出异常\",{\"1\":{\"779\":1}}],[\"已使用字节数\",{\"1\":{\"739\":1}}],[\"已同步消息标识\",{\"1\":{\"471\":1}}],[\"已过期消息可能还能存活较长时间\",{\"1\":{\"424\":1}}],[\"已弃用\",{\"1\":{\"240\":1}}],[\"已上锁\",{\"1\":{\"156\":1}}],[\"已支付各自的人数\",{\"1\":{\"124\":1}}],[\"已支付\",{\"1\":{\"124\":1,\"1289\":1,\"1371\":1}}],[\"已经用了3年了\",{\"1\":{\"1810\":1}}],[\"已经用于处理某个\",{\"1\":{\"851\":1}}],[\"已经很多年没有用过了\",{\"1\":{\"1810\":1}}],[\"已经实习一个月了\",{\"1\":{\"1778\":1}}],[\"已经开始想念长沙的烟火气了\",{\"1\":{\"1771\":1}}],[\"已经加入当前排列结果\",{\"1\":{\"1672\":1}}],[\"已经成为大数据处理领域的事实标准之一\",{\"1\":{\"1214\":1}}],[\"已经消费了数据\",{\"1\":{\"499\":1}}],[\"已经到达服务器\",{\"1\":{\"420\":1}}],[\"已经\",{\"1\":{\"382\":1}}],[\"已经是八点多了\",{\"1\":{\"1839\":1}}],[\"已经是java应用中最为流行的日志技术方案\",{\"1\":{\"391\":1}}],[\"已经是\",{\"1\":{\"196\":1}}],[\"已经破损\",{\"1\":{\"161\":1}}],[\"已经登录了\",{\"1\":{\"27\":1,\"1643\":1}}],[\"已经注册过\",{\"1\":{\"15\":1}}],[\"已标记\",{\"1\":{\"0\":1}}],[\"识别用户并登录\",{\"1\":{\"15\":1}}],[\"跳的都是交际舞\",{\"1\":{\"1771\":1}}],[\"跳到命令结尾\",{\"1\":{\"1690\":1}}],[\"跳到命令开头\",{\"1\":{\"1690\":1}}],[\"跳过回收站\",{\"1\":{\"1218\":1}}],[\"跳过offset个\",{\"1\":{\"969\":1}}],[\"跳过这里\",{\"1\":{\"6\":1}}],[\"跳跃表节点的成员是数据库键\",{\"1\":{\"945\":1}}],[\"跳表和字典通过指针共享相同的元素\",{\"1\":{\"900\":1}}],[\"跳表可以实现有序集合的范围型操作\",{\"1\":{\"900\":1}}],[\"跳表的每个结点保存一个集合元素\",{\"1\":{\"900\":1}}],[\"跳表按分值从小到大保存所有集合元素\",{\"1\":{\"900\":1}}],[\"跳表+字典实现\",{\"1\":{\"900\":1}}],[\"跳表长度\",{\"1\":{\"886\":1}}],[\"跳表中的结点按分值从小到大排序\",{\"1\":{\"886\":1}}],[\"跳表结点的最大层数\",{\"1\":{\"886\":1}}],[\"跳表结点\",{\"1\":{\"886\":1}}],[\"跳表实现\",{\"1\":{\"886\":1}}],[\"跳表概念\",{\"1\":{\"885\":1}}],[\"跳表效率与平衡树相当\",{\"1\":{\"885\":1}}],[\"跳表是一种有序数据结构\",{\"1\":{\"885\":1}}],[\"跳表\",{\"0\":{\"884\":1},\"1\":{\"895\":1}}],[\"跳转到sso\",{\"1\":{\"27\":2,\"1643\":2}}],[\"跳回首页\",{\"1\":{\"15\":1}}],[\"gh\",{\"1\":{\"1791\":1}}],[\"gds通过按流量收费模式获取收益\",{\"1\":{\"1737\":1}}],[\"gds的主机系统通过连接到航司的crs系统来获取实时的航班舱位信息\",{\"1\":{\"1724\":1}}],[\"gds的主要功能包括从旅客查询座位到下单支付出票以及售后的退票改签环节\",{\"1\":{\"1724\":1}}],[\"gds除了分销机票以外\",{\"1\":{\"1724\":1}}],[\"gds侧重于分销\",{\"1\":{\"1724\":1}}],[\"gds\",{\"0\":{\"1724\":1},\"1\":{\"1751\":1}}],[\"g=rx\",{\"1\":{\"1693\":1}}],[\"gz\",{\"1\":{\"1688\":2}}],[\"gzip模式\",{\"1\":{\"1688\":1}}],[\"gzip\",{\"1\":{\"459\":1,\"1400\":1,\"1688\":1}}],[\"gzipcompress\",{\"1\":{\"91\":1}}],[\"gb\",{\"1\":{\"1683\":1}}],[\"gbk\",{\"1\":{\"315\":1}}],[\"glob\",{\"1\":{\"1330\":1}}],[\"global选项读写\",{\"1\":{\"1311\":1}}],[\"global|session\",{\"1\":{\"671\":3}}],[\"global\",{\"1\":{\"612\":1,\"614\":1,\"1050\":1,\"1148\":2,\"1596\":1}}],[\"gpg\",{\"1\":{\"1329\":1}}],[\"gateway\",{\"1\":{\"1298\":1,\"1301\":1,\"1304\":1,\"1621\":1}}],[\"gap\",{\"1\":{\"555\":1,\"556\":2,\"564\":2}}],[\"garbage\",{\"1\":{\"179\":1}}],[\"given\",{\"1\":{\"453\":1}}],[\"gitweb\",{\"1\":{\"1349\":1}}],[\"gitignore仅作用于所在目录\",{\"1\":{\"1330\":1}}],[\"gitignore递归作用到整个仓库\",{\"1\":{\"1330\":1}}],[\"gitignore\",{\"0\":{\"1330\":1},\"1\":{\"1330\":1,\"1349\":1}}],[\"gitdemo2\",{\"1\":{\"1314\":1}}],[\"gitdemo\",{\"1\":{\"1314\":1}}],[\"gitconfig\",{\"1\":{\"1311\":2}}],[\"git\",{\"0\":{\"1307\":1,\"1350\":1,\"1351\":1,\"1633\":1},\"1\":{\"1307\":2,\"1309\":4,\"1310\":6,\"1311\":4,\"1314\":9,\"1315\":1,\"1316\":2,\"1317\":3,\"1318\":1,\"1319\":4,\"1320\":2,\"1321\":4,\"1322\":6,\"1323\":1,\"1324\":2,\"1326\":10,\"1327\":1,\"1328\":2,\"1329\":13,\"1330\":1,\"1331\":2,\"1332\":4,\"1333\":9,\"1335\":2,\"1336\":2,\"1337\":3,\"1338\":14,\"1341\":11,\"1342\":4,\"1343\":9,\"1344\":12,\"1345\":4,\"1346\":7,\"1347\":22,\"1348\":1,\"1350\":13,\"1351\":13,\"1633\":6,\"1786\":1,\"1791\":4},\"2\":{\"1353\":1}}],[\"github\",{\"0\":{\"1789\":1},\"1\":{\"85\":1,\"90\":1,\"98\":1,\"283\":3,\"392\":1,\"525\":1,\"546\":1,\"565\":1,\"667\":1,\"852\":1,\"1004\":2,\"1246\":1,\"1314\":3,\"1326\":2,\"1330\":2,\"1336\":2,\"1347\":1,\"1351\":1,\"1790\":11,\"1791\":11,\"1792\":1,\"1793\":2,\"1870\":1}}],[\"giteeinfo\",{\"1\":{\"15\":4}}],[\"giteelogin\",{\"1\":{\"15\":3}}],[\"gitee\",{\"1\":{\"15\":6}}],[\"gülcü\",{\"1\":{\"376\":2,\"382\":1}}],[\"gt\",{\"1\":{\"357\":1,\"989\":9,\"1653\":9}}],[\"gts\",{\"1\":{\"51\":1}}],[\"gotmediastream\",{\"1\":{\"1854\":1}}],[\"gotdevices\",{\"1\":{\"1853\":1}}],[\"goto指令用于无条件跳转到指定位置\",{\"1\":{\"241\":1}}],[\"gossip协议有延迟\",{\"1\":{\"949\":1}}],[\"good\",{\"1\":{\"1347\":2}}],[\"goodsmoney\",{\"1\":{\"124\":1}}],[\"google\",{\"1\":{\"75\":1,\"85\":3,\"1214\":2,\"1805\":1}}],[\"g\",{\"1\":{\"188\":2,\"196\":2,\"730\":1,\"831\":1,\"1088\":8,\"1155\":2,\"1346\":1,\"1692\":2,\"1735\":1,\"1825\":1,\"1868\":6}}],[\"g1跟踪各个region里面的垃圾堆积的\",{\"1\":{\"1525\":1}}],[\"g1收集器\",{\"1\":{\"177\":1}}],[\"g1\",{\"0\":{\"177\":1},\"1\":{\"172\":1,\"177\":5,\"1525\":2}}],[\"gc分类\",{\"1\":{\"1525\":1}}],[\"gc分代年龄\",{\"1\":{\"215\":1,\"1521\":2}}],[\"gc分代年龄等\",{\"1\":{\"214\":1}}],[\"gc扫描到就立即回收\",{\"1\":{\"1522\":1}}],[\"gc垃圾回收开始之前被调用\",{\"1\":{\"1345\":1}}],[\"gc状态\",{\"1\":{\"1074\":1}}],[\"gc时必须stw\",{\"1\":{\"1525\":1}}],[\"gc时\",{\"1\":{\"171\":1}}],[\"gc的设计原则\",{\"1\":{\"171\":1}}],[\"gc\",{\"0\":{\"1523\":1,\"1524\":1,\"1525\":1},\"1\":{\"74\":1,\"154\":1,\"171\":4,\"176\":1,\"183\":4,\"184\":1,\"186\":1,\"187\":1,\"192\":2,\"194\":1,\"210\":1,\"211\":1,\"212\":1,\"224\":4,\"770\":2,\"826\":2,\"829\":2,\"1087\":1,\"1093\":1,\"1367\":4,\"1514\":2,\"1522\":3,\"1523\":1,\"1524\":21,\"1525\":5,\"1527\":2,\"1529\":4}}],[\"gub\",{\"1\":{\"1796\":1}}],[\"guaranteed\",{\"1\":{\"1181\":1}}],[\"guava官方教程\",{\"1\":{\"85\":1}}],[\"guava\",{\"0\":{\"56\":1},\"1\":{\"58\":1,\"61\":1,\"64\":1,\"68\":1,\"69\":1,\"71\":7,\"72\":1,\"74\":2,\"77\":1,\"78\":1,\"79\":1,\"80\":2,\"81\":1,\"82\":2,\"83\":2,\"84\":1,\"85\":5},\"2\":{\"87\":1}}],[\"guest\",{\"1\":{\"417\":2}}],[\"gui\",{\"1\":{\"235\":1}}],[\"guide\",{\"0\":{\"88\":1},\"1\":{\"88\":1,\"1326\":2}}],[\"gulisession\",{\"1\":{\"24\":1}}],[\"gulimallauthapplication\",{\"1\":{\"24\":2}}],[\"gulimall\",{\"1\":{\"15\":3,\"24\":1,\"1366\":6}}],[\"geospatial\",{\"1\":{\"1570\":1}}],[\"gen\",{\"1\":{\"1125\":1}}],[\"gender\",{\"1\":{\"579\":1,\"580\":1,\"583\":1,\"585\":2,\"598\":1,\"1226\":3}}],[\"generic\",{\"1\":{\"1218\":2}}],[\"genericfuturelistener<future<\",{\"1\":{\"822\":2}}],[\"genericjackson2jsonredisserializer\",{\"1\":{\"24\":1}}],[\"general\",{\"1\":{\"639\":1,\"644\":1,\"674\":3}}],[\"generatedvalue\",{\"1\":{\"1608\":1}}],[\"generatedefaultvalue\",{\"1\":{\"58\":1}}],[\"generate\",{\"1\":{\"1067\":2}}],[\"generators\",{\"1\":{\"1087\":1,\"1791\":1}}],[\"generator\",{\"1\":{\"153\":1}}],[\"getvideotracks\",{\"1\":{\"1857\":1}}],[\"getvalue\",{\"1\":{\"73\":1,\"305\":1}}],[\"get创建path对象\",{\"1\":{\"1503\":1}}],[\"get获取元素的时候\",{\"1\":{\"1497\":1}}],[\"getkeepalivetime\",{\"1\":{\"1120\":1}}],[\"getkeysinslot\",{\"1\":{\"946\":1}}],[\"getkey\",{\"1\":{\"73\":1,\"305\":1}}],[\"getaudiotracks\",{\"1\":{\"1857\":1}}],[\"getautoconfigurationentry\",{\"1\":{\"1598\":1}}],[\"getallstacktraces\",{\"1\":{\"1095\":1}}],[\"getandincrement\",{\"1\":{\"1108\":2}}],[\"getandset\",{\"1\":{\"872\":1}}],[\"getandclearreferencependinglist\",{\"1\":{\"188\":1}}],[\"getandunsetstatus\",{\"1\":{\"7\":1,\"8\":2}}],[\"get和set操作时间上都是o\",{\"1\":{\"984\":1,\"985\":1}}],[\"getnow\",{\"1\":{\"822\":3}}],[\"getname\",{\"1\":{\"188\":1,\"330\":1,\"488\":2,\"541\":1,\"1009\":1,\"1049\":1,\"1058\":2,\"1068\":1}}],[\"getruntime\",{\"1\":{\"791\":2}}],[\"getretrycount\",{\"1\":{\"1180\":1}}],[\"getrejectedexecutionhandler\",{\"1\":{\"1120\":1}}],[\"getremoteaddress\",{\"1\":{\"791\":1}}],[\"getresourceasstream\",{\"1\":{\"507\":1,\"541\":2,\"1008\":1}}],[\"getresponse\",{\"1\":{\"48\":1}}],[\"getreferenceopaque\",{\"1\":{\"362\":1}}],[\"getrequest\",{\"1\":{\"48\":2}}],[\"getusermedia\",{\"1\":{\"1854\":1,\"1858\":1}}],[\"getusername\",{\"1\":{\"14\":2}}],[\"geturlasstream\",{\"1\":{\"541\":1}}],[\"getunsafe\",{\"1\":{\"362\":1,\"1135\":5}}],[\"getobjectvolatile\",{\"1\":{\"1140\":1}}],[\"getobjecttype\",{\"1\":{\"1010\":1}}],[\"getobject\",{\"1\":{\"1010\":2,\"1028\":1,\"1140\":1,\"1382\":1}}],[\"getoutputstream\",{\"1\":{\"343\":1,\"799\":1}}],[\"getone\",{\"1\":{\"15\":1}}],[\"getlistenable\",{\"1\":{\"1192\":1}}],[\"getlistenersforevent\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"getlock\",{\"1\":{\"1264\":1}}],[\"getlocalhost\",{\"1\":{\"93\":1,\"339\":1}}],[\"getlong\",{\"1\":{\"362\":1}}],[\"getlogger\",{\"1\":{\"355\":1,\"383\":4,\"384\":1,\"391\":2}}],[\"getlength\",{\"1\":{\"342\":1}}],[\"getbit\",{\"0\":{\"974\":1},\"1\":{\"972\":1,\"974\":1}}],[\"getbacklog\",{\"1\":{\"866\":2}}],[\"getbody\",{\"1\":{\"418\":1}}],[\"getblocker\",{\"1\":{\"362\":1}}],[\"getbyid\",{\"1\":{\"1369\":1}}],[\"getbyname\",{\"1\":{\"339\":1}}],[\"getbytes\",{\"1\":{\"315\":1,\"774\":2,\"823\":2,\"843\":1,\"844\":1,\"846\":8,\"1181\":2}}],[\"getbeanclass\",{\"1\":{\"1009\":2}}],[\"getbean\",{\"1\":{\"90\":1,\"98\":1,\"507\":1,\"1006\":1,\"1010\":1,\"1012\":1,\"1599\":1}}],[\"getdisplaymedia\",{\"1\":{\"1858\":1}}],[\"getdeclaredfield\",{\"1\":{\"1135\":1}}],[\"getdeclaredfields\",{\"1\":{\"310\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"1009\":2}}],[\"getdeclaredconstructors\",{\"1\":{\"309\":1}}],[\"getdeclaredannotation\",{\"1\":{\"348\":1}}],[\"getdeclaredannotations\",{\"1\":{\"348\":1}}],[\"getdeclaredmethods\",{\"1\":{\"311\":1,\"1016\":1}}],[\"getdatasize\",{\"1\":{\"1711\":5,\"1714\":7,\"1715\":7}}],[\"getdatasource\",{\"1\":{\"542\":1}}],[\"getdatawithredissonlock\",{\"1\":{\"1264\":1}}],[\"getdatawithredislock\",{\"1\":{\"1263\":2}}],[\"getdatawithlocallock\",{\"1\":{\"1261\":1}}],[\"getdatafromdb\",{\"1\":{\"1261\":1,\"1263\":1,\"1264\":1}}],[\"getdata\",{\"1\":{\"15\":1,\"1181\":2,\"1192\":1}}],[\"getfilename\",{\"1\":{\"779\":2}}],[\"getfields\",{\"1\":{\"310\":1}}],[\"getfield指令用于获取对象的字段值\",{\"1\":{\"241\":1}}],[\"getfrominactivefinalreference\",{\"1\":{\"196\":1}}],[\"getjavalangaccess\",{\"1\":{\"196\":1}}],[\"getqueue\",{\"1\":{\"196\":1,\"1120\":1}}],[\"gettransferavuniquekey\",{\"1\":{\"1363\":1}}],[\"gettransactionattribute\",{\"1\":{\"1059\":1}}],[\"gettransactionattributesource\",{\"1\":{\"1059\":1}}],[\"gettransactionsynchronization\",{\"1\":{\"1049\":1}}],[\"gettransactionfactoryfromenvironment\",{\"1\":{\"542\":1}}],[\"gettransaction\",{\"1\":{\"523\":1,\"1038\":2,\"1047\":1,\"1049\":2,\"1055\":1,\"1059\":1,\"1383\":1}}],[\"gettask\",{\"1\":{\"1115\":4}}],[\"getter\",{\"1\":{\"1096\":1,\"1120\":1}}],[\"getthreadfactory\",{\"1\":{\"1114\":1,\"1120\":1}}],[\"getthreads\",{\"1\":{\"1095\":1}}],[\"getthreadid\",{\"1\":{\"362\":1}}],[\"getthreadgroup\",{\"1\":{\"188\":1,\"196\":1,\"1088\":2,\"1095\":2,\"1108\":2}}],[\"gettime\",{\"1\":{\"353\":1}}],[\"gettotalhits\",{\"1\":{\"51\":1}}],[\"gethostname\",{\"1\":{\"339\":1}}],[\"gethostaddress\",{\"1\":{\"93\":1,\"339\":1}}],[\"gethits\",{\"1\":{\"51\":2}}],[\"getcallerclass\",{\"1\":{\"1135\":1}}],[\"getcause\",{\"1\":{\"73\":1}}],[\"getchannel\",{\"1\":{\"767\":1,\"776\":1,\"777\":2}}],[\"getchildren\",{\"1\":{\"541\":1}}],[\"getcorepoolsize\",{\"1\":{\"1120\":1}}],[\"getcontent\",{\"1\":{\"1711\":7,\"1714\":16,\"1715\":16}}],[\"getcontext\",{\"1\":{\"1088\":1,\"1856\":1}}],[\"getcontextclassloader\",{\"1\":{\"1088\":1}}],[\"getconnectiontimeoutms\",{\"1\":{\"1180\":1}}],[\"getconnectstring\",{\"1\":{\"1180\":1}}],[\"getconfiguration\",{\"1\":{\"544\":1}}],[\"getconstructors\",{\"1\":{\"309\":1}}],[\"getcode\",{\"1\":{\"14\":1,\"15\":1}}],[\"getclass\",{\"1\":{\"308\":1,\"418\":1,\"821\":1,\"826\":3,\"1015\":2,\"1058\":1,\"1073\":1,\"1088\":2,\"1531\":1}}],[\"getclassloader\",{\"1\":{\"188\":1,\"383\":1,\"1015\":1,\"1058\":1,\"1135\":1}}],[\"getcustomshutdownhook\",{\"1\":{\"93\":1}}],[\"getspuid\",{\"1\":{\"1369\":1}}],[\"getsaleattrsbuspuid\",{\"1\":{\"1369\":1}}],[\"getsingleton\",{\"1\":{\"1028\":1,\"1382\":1,\"1645\":1}}],[\"getsettings\",{\"1\":{\"1857\":1}}],[\"getserverurl\",{\"1\":{\"1791\":1}}],[\"getserviceloader\",{\"1\":{\"383\":1}}],[\"getsessiontimeoutms\",{\"1\":{\"1180\":1}}],[\"getsecuritymanager\",{\"1\":{\"1088\":1,\"1095\":1,\"1108\":1}}],[\"getsequenceid\",{\"1\":{\"849\":1}}],[\"getsqlfragments\",{\"1\":{\"541\":2}}],[\"getsourceasstring\",{\"1\":{\"48\":1,\"51\":1}}],[\"getstacktrace\",{\"1\":{\"1095\":2}}],[\"getstatusline\",{\"1\":{\"15\":2}}],[\"getstatuscode\",{\"1\":{\"14\":1,\"15\":2}}],[\"getstatementlog\",{\"1\":{\"544\":1}}],[\"getstate\",{\"1\":{\"9\":5,\"1114\":1}}],[\"getstringattribute\",{\"1\":{\"541\":4}}],[\"getstring\",{\"1\":{\"15\":5}}],[\"getimagesbyskuid\",{\"1\":{\"1369\":1}}],[\"getisolationlevel\",{\"1\":{\"1049\":1}}],[\"getiloggerfactory\",{\"1\":{\"383\":2}}],[\"getinterfaces\",{\"1\":{\"1015\":1}}],[\"getinputstream\",{\"1\":{\"343\":1,\"1008\":5}}],[\"getinstance\",{\"1\":{\"290\":1,\"353\":1,\"1645\":2}}],[\"getindexrequest\",{\"1\":{\"43\":2}}],[\"getid\",{\"1\":{\"15\":1,\"1068\":5}}],[\"getelapsedtimems\",{\"1\":{\"1180\":1}}],[\"getenvironment\",{\"1\":{\"542\":1}}],[\"getent\",{\"1\":{\"1692\":2}}],[\"getentry\",{\"1\":{\"154\":1}}],[\"getentity\",{\"1\":{\"15\":2}}],[\"getexclusiveownerthread\",{\"1\":{\"9\":3}}],[\"getplatformclassloader\",{\"1\":{\"1135\":1}}],[\"getpriority\",{\"1\":{\"1088\":1,\"1108\":1}}],[\"getpropagationbehavior\",{\"1\":{\"1049\":4}}],[\"getproperties\",{\"1\":{\"1015\":1}}],[\"getproperty\",{\"1\":{\"305\":1,\"1054\":1}}],[\"getproxy\",{\"1\":{\"1021\":1}}],[\"getprovider\",{\"1\":{\"383\":1}}],[\"getparametertypes\",{\"1\":{\"1009\":2}}],[\"getparameterobject\",{\"1\":{\"523\":1}}],[\"getparent\",{\"1\":{\"188\":1,\"196\":1}}],[\"getpassword\",{\"1\":{\"14\":1}}],[\"getphone\",{\"1\":{\"14\":2}}],[\"getmaximumpoolsize\",{\"1\":{\"1120\":1}}],[\"getmapper\",{\"1\":{\"507\":1,\"510\":1,\"543\":9,\"544\":1}}],[\"getmapping\",{\"1\":{\"14\":1,\"15\":1,\"1608\":1}}],[\"getmap\",{\"1\":{\"154\":1}}],[\"getmethod\",{\"1\":{\"1015\":4,\"1059\":1}}],[\"getmethods\",{\"1\":{\"311\":1}}],[\"getmessagetype\",{\"1\":{\"849\":1}}],[\"getmessageproperties\",{\"1\":{\"418\":1}}],[\"getmessage\",{\"1\":{\"14\":1,\"77\":1,\"188\":1,\"391\":1,\"1015\":2,\"1135\":1,\"1713\":2}}],[\"getmsg\",{\"1\":{\"14\":1}}],[\"get\",{\"0\":{\"1405\":1},\"1\":{\"14\":1,\"15\":1,\"43\":1,\"48\":3,\"58\":2,\"67\":1,\"68\":1,\"73\":4,\"77\":2,\"154\":3,\"183\":6,\"189\":1,\"192\":3,\"194\":1,\"196\":3,\"305\":1,\"310\":1,\"329\":1,\"383\":1,\"476\":1,\"543\":1,\"767\":2,\"772\":4,\"773\":6,\"778\":5,\"779\":1,\"788\":2,\"796\":1,\"822\":6,\"828\":1,\"872\":1,\"873\":1,\"969\":1,\"971\":2,\"985\":2,\"1002\":4,\"1028\":3,\"1095\":1,\"1113\":4,\"1114\":3,\"1115\":3,\"1116\":1,\"1120\":1,\"1135\":1,\"1174\":1,\"1191\":1,\"1218\":1,\"1261\":1,\"1263\":2,\"1363\":1,\"1368\":2,\"1369\":2,\"1382\":3,\"1405\":3,\"1497\":1,\"1514\":1,\"1640\":1,\"1651\":3,\"1663\":2,\"1712\":7}}],[\"grid\",{\"1\":{\"1000\":4}}],[\"grpc\",{\"1\":{\"808\":1,\"1406\":2,\"1623\":1}}],[\"grow\",{\"1\":{\"1493\":1}}],[\"groovy\",{\"1\":{\"255\":1}}],[\"group1\",{\"1\":{\"1693\":1}}],[\"groupdel\",{\"1\":{\"1692\":1}}],[\"groupadd\",{\"1\":{\"1692\":1}}],[\"groups\",{\"1\":{\"1099\":1}}],[\"group控制\",{\"1\":{\"739\":1}}],[\"group只有一个consumer能消费某一条消息\",{\"1\":{\"490\":1}}],[\"groupid\",{\"1\":{\"481\":1,\"483\":1,\"1632\":1}}],[\"groupid>\",{\"1\":{\"24\":2,\"39\":1,\"382\":8,\"383\":1,\"416\":1,\"455\":2,\"487\":2,\"505\":2,\"810\":1,\"1179\":3,\"1707\":1,\"1717\":1}}],[\"group中只能有一个consumer能够消费该消息\",{\"1\":{\"430\":1}}],[\"group\",{\"0\":{\"617\":1},\"1\":{\"90\":1,\"92\":1,\"93\":2,\"99\":1,\"124\":4,\"126\":1,\"128\":1,\"354\":1,\"430\":3,\"443\":1,\"481\":1,\"485\":1,\"488\":1,\"489\":1,\"490\":2,\"494\":3,\"581\":1,\"585\":5,\"588\":1,\"624\":1,\"708\":1,\"739\":1,\"811\":1,\"812\":1,\"818\":3,\"820\":1,\"821\":1,\"863\":2,\"1087\":1,\"1088\":1,\"1090\":2,\"1093\":3,\"1108\":3,\"1226\":2,\"1567\":4,\"1692\":1}}],[\"grayscale\",{\"1\":{\"1855\":3}}],[\"graysiteids\",{\"1\":{\"1781\":1}}],[\"grained\",{\"1\":{\"1791\":3}}],[\"grandson\",{\"1\":{\"357\":1}}],[\"grants\",{\"1\":{\"591\":1}}],[\"grant\",{\"1\":{\"15\":1,\"591\":1,\"1151\":2,\"1154\":1}}],[\"graph\",{\"1\":{\"75\":1,\"1322\":1}}],[\"graph提供了多种图的实现\",{\"1\":{\"75\":1}}],[\"grep\",{\"0\":{\"1684\":1},\"1\":{\"1684\":1,\"1698\":1}}],[\"greaterthan\",{\"1\":{\"81\":1}}],[\"greatest\",{\"1\":{\"61\":1}}],[\"green\",{\"1\":{\"33\":1}}],[\"从未见过的蓝\",{\"1\":{\"1843\":1}}],[\"从最开始的原始苯教\",{\"1\":{\"1837\":1}}],[\"从可可西里开始\",{\"1\":{\"1833\":1}}],[\"从此对西藏的向往一发不可收拾\",{\"1\":{\"1832\":1}}],[\"从长沙出发\",{\"1\":{\"1825\":1}}],[\"从我做起\",{\"1\":{\"1805\":1}}],[\"从高考完离家上大学\",{\"1\":{\"1786\":1}}],[\"从中午就开始头疼\",{\"1\":{\"1773\":1}}],[\"从中也可以看出其实线程池内部是不区分核心\",{\"1\":{\"1115\":1}}],[\"从舞蹈到自焚\",{\"1\":{\"1767\":1}}],[\"从把斋到吟诵\",{\"1\":{\"1767\":1}}],[\"从行乞苦修到著名的德尔维希旋转舞\",{\"1\":{\"1767\":1}}],[\"从部落上层根据资历\",{\"1\":{\"1766\":1}}],[\"从购票之日起未使用的机票\",{\"1\":{\"1738\":1}}],[\"从订票到旅行的全流程都要跟pss系统打交道\",{\"1\":{\"1723\":1}}],[\"从文件中过滤出关键字\",{\"1\":{\"1684\":1}}],[\"从类级别的耦合提升到\",{\"1\":{\"1632\":1}}],[\"从类的层级结构上\",{\"1\":{\"1055\":1}}],[\"从数据集\",{\"1\":{\"1574\":1}}],[\"从数据库提供读操作\",{\"1\":{\"658\":1}}],[\"从已设置过期时间的数据集\",{\"1\":{\"1574\":4}}],[\"从堆中分配内存\",{\"1\":{\"1521\":1}}],[\"从低地址开始向上增长\",{\"1\":{\"1444\":2}}],[\"从低风险的缓存开始迁移\",{\"1\":{\"1234\":1}}],[\"从内存读取数据的基本单位\",{\"1\":{\"1435\":1}}],[\"从内核态切换回用户态\",{\"1\":{\"799\":1}}],[\"从哈希表中找到一个空闲的单元\",{\"1\":{\"1389\":1}}],[\"从发生冲突的那个单元起\",{\"1\":{\"1389\":1}}],[\"从景点服务拉取全量景点数据\",{\"1\":{\"1360\":1}}],[\"从一个远程跟踪分支检出一个本地分支会自动创建跟踪分支\",{\"1\":{\"1338\":1}}],[\"从合作的开发者的角度看\",{\"1\":{\"1337\":1}}],[\"从暂存区中删除指定文件\",{\"1\":{\"1319\":1}}],[\"从产品定位上看\",{\"1\":{\"1303\":1}}],[\"从请求链路上看\",{\"1\":{\"1303\":1}}],[\"从业务角度想还是放那吧\",{\"1\":{\"1240\":1}}],[\"从技术角度想是可以迁的\",{\"1\":{\"1240\":1}}],[\"从本地\",{\"1\":{\"1226\":1}}],[\"从本地上传文件到\",{\"1\":{\"1218\":1}}],[\"从原理上可以分析出\",{\"1\":{\"1224\":1}}],[\"从计算模式上分为\",{\"1\":{\"1221\":1}}],[\"从角色\",{\"1\":{\"1216\":1}}],[\"从海量数据中计算出背后的价值\",{\"1\":{\"1213\":1}}],[\"从大数据的特性出发\",{\"1\":{\"1213\":1}}],[\"从节约资源的角度所以只设置奇数个节点\",{\"1\":{\"1202\":1}}],[\"从节点可以提供读取服务\",{\"1\":{\"1588\":1}}],[\"从节点所处状态\",{\"1\":{\"1201\":1}}],[\"从节点\",{\"1\":{\"949\":1}}],[\"从节点广播一条clustermsg\",{\"1\":{\"948\":1}}],[\"从节点将开始进行故障转移\",{\"1\":{\"948\":1}}],[\"从节点用于复制某个主节点以及故障转移\",{\"1\":{\"948\":1}}],[\"从tprotocol以下部分是thirft的传输协议和底层i\",{\"1\":{\"1126\":1}}],[\"从任务队列中阻塞式获取任务并返回\",{\"1\":{\"1115\":1}}],[\"从机制上也能发现\",{\"1\":{\"1077\":1}}],[\"从字节码角度看\",{\"1\":{\"1074\":1}}],[\"从配置文件中装载所有的\",{\"1\":{\"1012\":1}}],[\"从单例池中获取\",{\"1\":{\"1006\":1}}],[\"从服务器通过\",{\"1\":{\"1563\":1}}],[\"从服务器正在复制的\",{\"1\":{\"940\":1}}],[\"从服务器优先级\",{\"1\":{\"940\":1}}],[\"从服务器复制偏移量\",{\"1\":{\"940\":1}}],[\"从服务器信息保存至sentinelredisinstance\",{\"1\":{\"940\":1}}],[\"从服务器或另一个sentinel\",{\"1\":{\"939\":1}}],[\"从服务器默认每秒发送一次replconf\",{\"1\":{\"937\":1}}],[\"从服务器发送命令\",{\"1\":{\"940\":1}}],[\"从服务器发送监听端口号replconf\",{\"1\":{\"936\":1}}],[\"从服务器发送psync\",{\"1\":{\"935\":2,\"936\":1}}],[\"从服务器向主服务器发送ping\",{\"1\":{\"936\":1}}],[\"从服务器向主服务器发送sync命令\",{\"1\":{\"934\":1}}],[\"从服务器建立套接字连接\",{\"1\":{\"936\":1}}],[\"从服务器设置主服务器的地址和端口\",{\"1\":{\"936\":1}}],[\"从服务器保存下来\",{\"1\":{\"935\":1}}],[\"从服务器断线重连后\",{\"1\":{\"935\":2}}],[\"从服务器只需要更新缺失数据即可恢复一致性\",{\"1\":{\"935\":1}}],[\"从服务器只有在接到主服务器发来的del命令之后\",{\"1\":{\"908\":1}}],[\"从服务器执行\",{\"1\":{\"1563\":1}}],[\"从服务器执行了相同的写命令之后\",{\"1\":{\"934\":1}}],[\"从服务器执行这些写命令\",{\"1\":{\"934\":1}}],[\"从服务器执行读命令时\",{\"1\":{\"908\":1}}],[\"从服务器接收并载入rdb文件\",{\"1\":{\"934\":1}}],[\"从expires字典中随机检查一部分键的过期时间\",{\"1\":{\"908\":1,\"1573\":1}}],[\"从连接的建立到断开就是消息的边界\",{\"1\":{\"841\":1}}],[\"从系统表空间\",{\"1\":{\"745\":1}}],[\"从0开始每条记录自增1\",{\"1\":{\"745\":1}}],[\"从000001开始\",{\"1\":{\"643\":1}}],[\"从redo日志文件组的第一个文件的管理信息checkpoint1\",{\"1\":{\"742\":1}}],[\"从前往后采样指定行数\",{\"1\":{\"1226\":1}}],[\"从前往后循环覆写\",{\"1\":{\"739\":1}}],[\"从前往后顺序写入\",{\"1\":{\"739\":1}}],[\"从前往后直到比较到非零的结果结束\",{\"1\":{\"60\":1}}],[\"从flush链表中刷新一部分页面到磁盘\",{\"1\":{\"731\":1}}],[\"从lru链表的冷数据中刷新一部分页面到磁盘\",{\"1\":{\"731\":1}}],[\"从磁盘加载数据到内存的开销\",{\"1\":{\"716\":1}}],[\"从多个二级索引中取并集\",{\"1\":{\"711\":1}}],[\"从多个二级索引中取交集\",{\"1\":{\"711\":1}}],[\"从多个条件中选择一个使用\",{\"1\":{\"536\":1}}],[\"从页目录中找到主键值大于本记录的最小槽\",{\"1\":{\"690\":1}}],[\"从idb文件提取表结构数据的工具\",{\"1\":{\"678\":1}}],[\"从根本上来讲\",{\"1\":{\"1348\":1}}],[\"从根节点开始\",{\"1\":{\"698\":1}}],[\"从根儿上理解mysql\",{\"1\":{\"667\":1}}],[\"从根元素开始\",{\"1\":{\"357\":1}}],[\"从库的\",{\"1\":{\"1563\":2}}],[\"从库中的\",{\"1\":{\"1563\":1}}],[\"从库创建一个\",{\"1\":{\"1563\":1}}],[\"从库连接主库\",{\"1\":{\"1563\":1}}],[\"从库\",{\"0\":{\"1155\":1}}],[\"从库读取主库的二进制日志文件\",{\"1\":{\"648\":1}}],[\"从库同时也可以作为其他从服务器的主库\",{\"1\":{\"647\":1}}],[\"从意向锁加锁时机来理解\",{\"1\":{\"560\":1}}],[\"从兼容性角度\",{\"1\":{\"560\":1}}],[\"从锁模式角度\",{\"1\":{\"560\":1}}],[\"从锁粒度角度\",{\"1\":{\"560\":1}}],[\"从范围上属于表级锁\",{\"1\":{\"560\":1}}],[\"从头\",{\"1\":{\"446\":1}}],[\"从broker读取消息的客户端\",{\"1\":{\"430\":1}}],[\"从工厂生产\",{\"1\":{\"383\":1}}],[\"从源码中\",{\"1\":{\"362\":1}}],[\"从当前元素开始\",{\"1\":{\"357\":1}}],[\"从主分支的根目录执行部署即可\",{\"1\":{\"1791\":1}}],[\"从主类开始\",{\"1\":{\"247\":1}}],[\"从主内存中读取共享变量的值\",{\"1\":{\"145\":1}}],[\"从栈中弹出操作数进行计算等\",{\"1\":{\"242\":1}}],[\"从栈中弹出元素\",{\"1\":{\"241\":1}}],[\"从创建到垃圾回收并且内存不足时\",{\"1\":{\"183\":1}}],[\"从创建到jvm实例终止运行\",{\"1\":{\"183\":1}}],[\"从而完成了一个完整的循环\",{\"1\":{\"1767\":1}}],[\"从而使自己走上了与帝国冲突的道路\",{\"1\":{\"1767\":1}}],[\"从而使得从库和主库的数据保持同步\",{\"1\":{\"647\":1}}],[\"从而使得用户不必为以后的操作每次指定全部的条件\",{\"1\":{\"625\":1}}],[\"从而达到并发处理的目的\",{\"1\":{\"1487\":1}}],[\"从而达到提升数据库性能的效果\",{\"1\":{\"651\":1}}],[\"从而处理别的事务\",{\"1\":{\"1486\":1}}],[\"从而帮助其正常关闭\",{\"1\":{\"1410\":1}}],[\"从而避免网络拥塞的恶性循环\",{\"1\":{\"1408\":1}}],[\"从而避免了集中式rehash而带来的庞大计算量\",{\"1\":{\"883\":1}}],[\"从而避免了线程间的竞争和死锁等问题\",{\"1\":{\"282\":1}}],[\"从而避免了多线程之间对变量的共享和访问冲突\",{\"1\":{\"154\":1,\"1514\":1}}],[\"从而控制对端发送数据的速度\",{\"1\":{\"1408\":1}}],[\"从而快速找出出问题的首次提交\",{\"1\":{\"1347\":1}}],[\"从而快速访问结点\",{\"1\":{\"885\":1}}],[\"从而对数据库造成了巨大的压力\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"从而提升响应性能\",{\"1\":{\"1249\":2}}],[\"从而提高并发性能\",{\"1\":{\"1080\":1}}],[\"从而提高索引效率\",{\"1\":{\"707\":1}}],[\"从而提高程序的运行效率\",{\"1\":{\"271\":1}}],[\"从而提高程序的启动速度和运行效率\",{\"1\":{\"270\":1}}],[\"从而产生并发问题\",{\"1\":{\"1240\":1}}],[\"从而导致\",{\"1\":{\"1110\":3}}],[\"从而进入临界区\",{\"1\":{\"1072\":1}}],[\"从而确保整体应用是在正常有序的状态下退出的\",{\"1\":{\"817\":1}}],[\"从而构成一个记录的版本链\",{\"1\":{\"753\":1}}],[\"从而减少线程上下文切换的开销\",{\"1\":{\"1081\":1}}],[\"从而减少磁盘i0\",{\"1\":{\"638\":1}}],[\"从而减少内存占用\",{\"1\":{\"271\":1}}],[\"从而获取一致性视图\",{\"1\":{\"550\":1}}],[\"从而保证数据的一致性和完整性\",{\"1\":{\"599\":1}}],[\"从而保证了kafka的高吞吐率\",{\"1\":{\"490\":1}}],[\"从而保证可见性和有序性\",{\"1\":{\"145\":1}}],[\"从而影响后续任务执行\",{\"1\":{\"334\":1}}],[\"从而调用子类的独有功能\",{\"1\":{\"293\":1}}],[\"从而消除解释器和\",{\"1\":{\"271\":1}}],[\"从而实现高效的执行性能\",{\"1\":{\"242\":1}}],[\"从而实现更加均衡和可控的垃圾回收\",{\"1\":{\"177\":1}}],[\"从而执行一些必要的清理或其他操作\",{\"1\":{\"184\":1}}],[\"从而造成内存泄漏\",{\"1\":{\"154\":1,\"1514\":1}}],[\"从而没有一个线程可以同时拿到所有资源\",{\"1\":{\"134\":2}}],[\"从外到内\",{\"1\":{\"51\":1}}],[\"从整体结构上来看\",{\"1\":{\"37\":1}}],[\"从\",{\"1\":{\"15\":1,\"25\":1,\"91\":1,\"97\":1,\"101\":1,\"143\":1,\"154\":3,\"187\":1,\"466\":1,\"470\":1,\"471\":1,\"476\":1,\"484\":1,\"507\":1,\"542\":1,\"544\":1,\"767\":1,\"788\":1,\"827\":1,\"941\":1,\"1008\":1,\"1012\":2,\"1115\":1,\"1218\":1,\"1219\":1,\"1310\":1,\"1367\":1,\"1378\":1,\"1395\":1,\"1514\":2,\"1567\":1}}],[\"从条件队列中移出\",{\"1\":{\"8\":1}}],[\"换句话说\",{\"1\":{\"1672\":1}}],[\"换言之\",{\"1\":{\"1641\":1}}],[\"换出访问次数最少的页面\",{\"1\":{\"1471\":1}}],[\"换出最长时间未被访问的页面\",{\"1\":{\"1471\":1}}],[\"换出最近未使用的页面\",{\"1\":{\"1443\":1}}],[\"换出驻留时间最长的页面\",{\"1\":{\"1471\":1}}],[\"换出等\",{\"1\":{\"1450\":1}}],[\"换入换出\",{\"1\":{\"1446\":1}}],[\"换人\",{\"1\":{\"818\":1}}],[\"换取\",{\"1\":{\"15\":1}}],[\"换取一个附带有效期的\",{\"1\":{\"15\":1}}],[\"换算十六进制得到\",{\"1\":{\"14\":1}}],[\"获得排名顺序\",{\"1\":{\"1658\":1}}],[\"获得某个类的代理对象\",{\"1\":{\"1532\":1}}],[\"获得尽可能高的吞吐量\",{\"1\":{\"1525\":1}}],[\"获得服务器期望的序列号和确认号\",{\"1\":{\"1420\":1}}],[\"获得匹配的景点id\",{\"1\":{\"1362\":1}}],[\"获得任务执行结果\",{\"1\":{\"1113\":1}}],[\"获得一个封装事务对象的事务状态\",{\"1\":{\"1049\":1}}],[\"获得事务\",{\"1\":{\"1047\":1}}],[\"获得最多count个属于槽slot的键值对的键名\",{\"1\":{\"946\":1}}],[\"获得自己的父\",{\"1\":{\"816\":1}}],[\"获得\",{\"1\":{\"383\":1}}],[\"获得许可后才可继续运行\",{\"1\":{\"363\":1}}],[\"获得返回值\",{\"1\":{\"153\":1}}],[\"获得授权许可\",{\"1\":{\"15\":1}}],[\"获取音视频访问+约束\",{\"0\":{\"1854\":1}}],[\"获取音视频设备\",{\"0\":{\"1853\":1}}],[\"获取整理电影剧集封面和详细信息\",{\"1\":{\"1808\":1}}],[\"获取请求体参数并自动绑定到java对象\",{\"1\":{\"1608\":1}}],[\"获取查询参数\",{\"1\":{\"1608\":1}}],[\"获取路径参数\",{\"1\":{\"1608\":1}}],[\"获取资源\",{\"1\":{\"1608\":1}}],[\"获取资源后\",{\"1\":{\"1008\":1}}],[\"获取单例\",{\"1\":{\"1382\":1}}],[\"获取时自动实例化\",{\"1\":{\"1379\":1}}],[\"获取spu销售属性组合\",{\"1\":{\"1369\":1}}],[\"获取stream流\",{\"1\":{\"312\":1}}],[\"获取锁对象\",{\"1\":{\"1264\":1}}],[\"获取锁\",{\"1\":{\"1188\":2,\"1517\":1}}],[\"获取zk中所有的子节点\",{\"1\":{\"1185\":1}}],[\"获取指定偏移的对象\",{\"1\":{\"1140\":1}}],[\"获取指定字段偏移\",{\"1\":{\"1140\":1}}],[\"获取指定date的日期\",{\"1\":{\"595\":1}}],[\"获取指定date的月份\",{\"1\":{\"595\":1}}],[\"获取指定date的年份\",{\"1\":{\"595\":1}}],[\"获取给定静态字段的对象指针\",{\"1\":{\"1139\":1}}],[\"获取给定静态字段的内存地址偏移量\",{\"1\":{\"1139\":1}}],[\"获取对象\",{\"0\":{\"1135\":1}}],[\"获取对应的服务\",{\"1\":{\"101\":1}}],[\"获取工作线程数量\",{\"1\":{\"1112\":1}}],[\"获取所属线程组内所有线程\",{\"1\":{\"1095\":1}}],[\"获取所属线程组内活跃线程数\",{\"1\":{\"1095\":1}}],[\"获取所有线程对象\",{\"1\":{\"1095\":1}}],[\"获取所有\",{\"1\":{\"1012\":2}}],[\"获取所有构造器\",{\"1\":{\"309\":1}}],[\"获取当前\",{\"1\":{\"1184\":1}}],[\"获取当前所在线程\",{\"1\":{\"1095\":1}}],[\"获取当前线程池的运行状态\",{\"1\":{\"1112\":1}}],[\"获取当前线程的调用栈\",{\"1\":{\"1095\":1}}],[\"获取当前线程的顶层线程组\",{\"1\":{\"188\":1}}],[\"获取当前线程绑定的事务\",{\"1\":{\"1049\":1}}],[\"获取中断状态\",{\"1\":{\"1092\":1}}],[\"获取users集合所有id的平均值\",{\"1\":{\"1068\":1}}],[\"获取users集合所有id的和\",{\"1\":{\"1068\":1}}],[\"获取users集合id最小值\",{\"1\":{\"1068\":1}}],[\"获取users集合id最大值\",{\"1\":{\"1068\":1}}],[\"获取users元素个数\",{\"1\":{\"1068\":1}}],[\"获取事务管理器\",{\"1\":{\"1059\":1}}],[\"获取事务属性源\",{\"1\":{\"1059\":1}}],[\"获取事务\",{\"1\":{\"1055\":1}}],[\"获取事务的时候是把自己传进\",{\"1\":{\"1055\":1}}],[\"获取代理对象\",{\"1\":{\"1021\":1}}],[\"获取外部键\",{\"1\":{\"971\":1}}],[\"获取从服务器信息\",{\"1\":{\"940\":1}}],[\"获取主服务器信息\",{\"1\":{\"940\":1}}],[\"获取结果时\",{\"1\":{\"1369\":1}}],[\"获取结果\",{\"1\":{\"822\":2}}],[\"获取任务结果\",{\"1\":{\"822\":2}}],[\"获取任务执行的结果\",{\"1\":{\"329\":1}}],[\"获取集合内的下一个\",{\"1\":{\"817\":1}}],[\"获取连接建立后的通道\",{\"1\":{\"813\":1}}],[\"获取连接后的channel\",{\"1\":{\"812\":1}}],[\"获取的\",{\"1\":{\"776\":3}}],[\"获取通道\",{\"0\":{\"776\":1}}],[\"获取id后\",{\"1\":{\"707\":1}}],[\"获取游标中的记录\",{\"1\":{\"634\":1}}],[\"获取游标记录\",{\"1\":{\"634\":1}}],[\"获取日期差\",{\"1\":{\"595\":1}}],[\"获取日志记录器\",{\"1\":{\"384\":1}}],[\"获取员工数量大于等于3的工作地址\",{\"1\":{\"585\":1}}],[\"获取权限\",{\"1\":{\"570\":1}}],[\"获取一批数据的最大时间\",{\"1\":{\"485\":1}}],[\"获取最新的\",{\"1\":{\"476\":1}}],[\"获取\",{\"0\":{\"543\":1},\"1\":{\"466\":1,\"507\":1,\"777\":1,\"788\":1,\"827\":5,\"1088\":1,\"1263\":1,\"1582\":1,\"1598\":1}}],[\"获取准备发送的所有分区\",{\"1\":{\"450\":1}}],[\"获取实际接受的字节个数\",{\"1\":{\"342\":1}}],[\"获取文件信息\",{\"1\":{\"314\":1}}],[\"获取方法对象\",{\"0\":{\"311\":1}}],[\"获取成员变量的值\",{\"1\":{\"310\":1}}],[\"获取成员变量\",{\"0\":{\"310\":1}}],[\"获取公有构造器\",{\"1\":{\"309\":1}}],[\"获取构造器\",{\"0\":{\"309\":1}}],[\"获取class对象的四种方法\",{\"1\":{\"1531\":1}}],[\"获取class对象\",{\"0\":{\"308\":1}}],[\"获取类的二进制字节流不限于class文件\",{\"1\":{\"249\":1}}],[\"获取类似\",{\"1\":{\"69\":1}}],[\"获取顶级线程组\",{\"1\":{\"196\":1}}],[\"获取关联对象\",{\"1\":{\"189\":1,\"196\":1}}],[\"获取许可证\",{\"1\":{\"159\":1}}],[\"获取写锁对象\",{\"1\":{\"1188\":1}}],[\"获取写锁\",{\"1\":{\"157\":1,\"158\":1}}],[\"获取读锁对象\",{\"1\":{\"1188\":1}}],[\"获取读锁\",{\"1\":{\"157\":1}}],[\"获取线程\",{\"1\":{\"154\":1}}],[\"获取服务节点\",{\"1\":{\"101\":1}}],[\"获取并缓存了\",{\"1\":{\"99\":1}}],[\"获取反向映射\",{\"1\":{\"68\":1}}],[\"获取元素个数\",{\"1\":{\"66\":1}}],[\"获取可迭代对象中\",{\"1\":{\"61\":1}}],[\"获取用户基本信息\",{\"1\":{\"15\":1}}],[\"获取响应体\",{\"1\":{\"15\":1}}],[\"获取相关资源\",{\"1\":{\"15\":1}}],[\"获取失败信息\",{\"1\":{\"822\":1}}],[\"获取失败\",{\"1\":{\"5\":1}}],[\"值求和\",{\"1\":{\"1567\":1}}],[\"值再\",{\"1\":{\"1517\":1}}],[\"值+1\",{\"1\":{\"1517\":1}}],[\"值进行打分\",{\"1\":{\"1446\":1}}],[\"值越小优先级越高\",{\"1\":{\"1436\":1}}],[\"值和\",{\"1\":{\"1332\":1}}],[\"值为1的位数\",{\"1\":{\"976\":1}}],[\"值记录了保存\",{\"1\":{\"975\":1}}],[\"值记录了\",{\"1\":{\"974\":2,\"975\":2}}],[\"值全部是null\",{\"1\":{\"967\":1}}],[\"值是监视的客户端链表\",{\"1\":{\"960\":1}}],[\"值是订阅者的链表\",{\"1\":{\"954\":1}}],[\"值是对应的lua脚本\",{\"1\":{\"964\":1}}],[\"值是对应的sentinelredisinstance实例\",{\"1\":{\"939\":1}}],[\"值是对应sentinelredisinstance从服务器结构\",{\"1\":{\"940\":1}}],[\"值是分值\",{\"1\":{\"900\":1}}],[\"值按字符串对象相邻保存\",{\"1\":{\"913\":1}}],[\"值对象\",{\"1\":{\"913\":1}}],[\"值对象类型\",{\"1\":{\"913\":1}}],[\"值甚至可能直接保存在encoding中\",{\"1\":{\"892\":1}}],[\"值也有所不同\",{\"1\":{\"839\":1}}],[\"值判断\",{\"1\":{\"632\":1}}],[\"值的字符串长度都小于64byte\",{\"1\":{\"898\":1}}],[\"值的更新通常需要额外一轮\",{\"1\":{\"471\":1}}],[\"值的容器类\",{\"1\":{\"58\":1}}],[\"值由\",{\"1\":{\"471\":1}}],[\"值不会大于\",{\"1\":{\"471\":1}}],[\"值不作要求\",{\"1\":{\"305\":3}}],[\"值\",{\"1\":{\"452\":1,\"471\":1,\"477\":1,\"538\":1,\"828\":9,\"923\":1,\"1269\":1,\"1351\":1,\"1416\":1,\"1613\":1}}],[\"值模上分区数取余得到partition值\",{\"1\":{\"452\":1}}],[\"值2\",{\"1\":{\"50\":1,\"578\":8,\"579\":1}}],[\"值1\",{\"1\":{\"50\":1,\"578\":8,\"579\":1}}],[\"值作为字典\",{\"1\":{\"14\":1}}],[\"值相同是非常困难的\",{\"1\":{\"14\":1}}],[\"彩虹表\",{\"1\":{\"14\":1}}],[\"很照顾我们的山东大哥\",{\"1\":{\"1849\":1}}],[\"很久没有吃过这么香的东西了\",{\"1\":{\"1847\":1}}],[\"很近\",{\"1\":{\"1846\":1}}],[\"很nice\",{\"1\":{\"1838\":1}}],[\"很甜不推荐\",{\"1\":{\"1838\":1}}],[\"很好喝\",{\"1\":{\"1837\":1}}],[\"很好的保护了共享内存\",{\"1\":{\"1460\":1}}],[\"很难说好吃\",{\"1\":{\"1834\":1}}],[\"很难找\",{\"1\":{\"1805\":1}}],[\"很难找到相同\",{\"1\":{\"14\":1}}],[\"很累\",{\"1\":{\"1825\":1,\"1842\":1}}],[\"很安逸的小县城\",{\"1\":{\"1825\":1}}],[\"很喜欢up主\",{\"1\":{\"1819\":1}}],[\"很讨厌\",{\"1\":{\"1804\":1}}],[\"很可能今天想看的电影在爱奇艺\",{\"1\":{\"1803\":1}}],[\"很遗憾\",{\"1\":{\"1786\":1}}],[\"很大\",{\"1\":{\"1487\":1}}],[\"很罕见的场景吧\",{\"1\":{\"1347\":1}}],[\"很详细的源码分析\",{\"1\":{\"546\":1}}],[\"很多人都会选择广州\",{\"1\":{\"1833\":1}}],[\"很多字幕组\",{\"1\":{\"1810\":1}}],[\"很多实际的控制是靠底层\",{\"1\":{\"1086\":1}}],[\"很多时候\",{\"1\":{\"442\":1}}],[\"很多数据\",{\"1\":{\"390\":1}}],[\"很高\",{\"1\":{\"435\":2}}],[\"很少使用\",{\"1\":{\"289\":1}}],[\"很不优雅\",{\"1\":{\"68\":1}}],[\"很简单\",{\"1\":{\"9\":1}}],[\"原来这里是青藏铁路经过的地方\",{\"1\":{\"1845\":1}}],[\"原来队尾的\",{\"1\":{\"6\":1}}],[\"原味的巨酸\",{\"1\":{\"1833\":1}}],[\"原本不是我决定来到这世界的\",{\"1\":{\"1786\":1}}],[\"原本的清北游泡汤\",{\"1\":{\"1781\":1}}],[\"原本并行的开发过程就像是串行的一样\",{\"1\":{\"1337\":1}}],[\"原本使用\",{\"1\":{\"471\":1}}],[\"原则\",{\"1\":{\"1282\":1}}],[\"原因在于指令重排序\",{\"1\":{\"1506\":1}}],[\"原因在于\",{\"1\":{\"1506\":1}}],[\"原因在于实现mvcc\",{\"1\":{\"748\":1}}],[\"原因\",{\"1\":{\"839\":2,\"1278\":1,\"1555\":1,\"1618\":1}}],[\"原始的\",{\"1\":{\"829\":1}}],[\"原始的同步非阻塞相比同步阻塞并没有性能上的优势\",{\"1\":{\"794\":1}}],[\"原始类型\",{\"1\":{\"112\":1}}],[\"原先的\",{\"1\":{\"461\":1}}],[\"原生客户端\",{\"0\":{\"456\":1,\"488\":1},\"1\":{\"455\":1,\"487\":1}}],[\"原生消息详细信息\",{\"1\":{\"418\":1}}],[\"原生支持\",{\"1\":{\"19\":1}}],[\"原子递增\",{\"1\":{\"1622\":1}}],[\"原子\",{\"1\":{\"1460\":2}}],[\"原子地更新数据库和缓存\",{\"1\":{\"1266\":1,\"1584\":1}}],[\"原子广播协议解决崩溃恢复和主从数据同步的问题\",{\"1\":{\"1200\":1}}],[\"原子的\",{\"1\":{\"921\":1}}],[\"原子累加器\",{\"1\":{\"150\":1}}],[\"原子域更新器\",{\"1\":{\"150\":1}}],[\"原子数组\",{\"1\":{\"150\":1}}],[\"原子引用\",{\"1\":{\"150\":1}}],[\"原子整数\",{\"1\":{\"150\":1}}],[\"原子工具\",{\"0\":{\"150\":1}}],[\"原子指令实现\",{\"1\":{\"148\":1}}],[\"原子性\",{\"1\":{\"144\":1,\"735\":2,\"961\":1,\"1032\":1,\"1274\":1,\"1506\":1,\"1550\":1}}],[\"原分区路径为\",{\"1\":{\"118\":1}}],[\"原理类似\",{\"1\":{\"1221\":1}}],[\"原理同上\",{\"1\":{\"1095\":1}}],[\"原理就是使用了\",{\"1\":{\"1010\":1}}],[\"原理上\",{\"1\":{\"829\":1}}],[\"原理\",{\"0\":{\"17\":1,\"25\":1,\"366\":1,\"648\":1,\"1053\":1,\"1056\":1,\"1074\":1,\"1514\":1,\"1517\":1},\"1\":{\"139\":1,\"818\":1,\"960\":1,\"1263\":1,\"1269\":1,\"1425\":1,\"1426\":1,\"1582\":1,\"1599\":1,\"1613\":1}}],[\"原数据进行修改会导致结果变化很大\",{\"1\":{\"14\":1}}],[\"位存储\",{\"1\":{\"1570\":1}}],[\"位图法\",{\"1\":{\"1477\":1,\"1658\":2}}],[\"位系统\",{\"1\":{\"1443\":1}}],[\"位数\",{\"1\":{\"1112\":1}}],[\"位数组\",{\"1\":{\"973\":1}}],[\"位数组的表示\",{\"0\":{\"973\":1}}],[\"位置\",{\"1\":{\"749\":1,\"827\":1}}],[\"位置相关pos\",{\"1\":{\"37\":1}}],[\"位字段类型\",{\"1\":{\"664\":1}}],[\"位于用户层和文件系统中间\",{\"1\":{\"1474\":1}}],[\"位于基础设施层面\",{\"1\":{\"1284\":1}}],[\"位于\",{\"1\":{\"553\":1}}],[\"位运算\",{\"0\":{\"1661\":1},\"1\":{\"241\":1}}],[\"位\",{\"1\":{\"14\":1,\"782\":2,\"976\":2,\"1422\":2,\"1658\":1}}],[\"位的信息摘要\",{\"1\":{\"14\":1}}],[\"位的\",{\"1\":{\"9\":1,\"83\":1}}],[\"即2s\",{\"1\":{\"1868\":1}}],[\"即圣族\",{\"1\":{\"1765\":1}}],[\"即耶稣\",{\"1\":{\"1759\":1}}],[\"即做自己接客的事\",{\"1\":{\"1726\":1}}],[\"即便是航司直销\",{\"1\":{\"1724\":1}}],[\"即便系统故障也不会丢失\",{\"1\":{\"1032\":1}}],[\"即源文件\",{\"1\":{\"1696\":1}}],[\"即源端通过滑动窗口来告诉对端自己的发送窗口大小\",{\"1\":{\"1408\":1}}],[\"即得到每4位1的个数\",{\"1\":{\"1666\":1}}],[\"即轮询\",{\"1\":{\"1628\":1}}],[\"即变量名和类名匹配\",{\"1\":{\"1595\":1}}],[\"即变化的行数就是触发器执行的次数\",{\"1\":{\"636\":1}}],[\"即本行以及之前的行进行计算\",{\"1\":{\"1567\":1}}],[\"即本地变量表中引用的对象\",{\"1\":{\"224\":1}}],[\"即该\",{\"1\":{\"1514\":1}}],[\"即文件可以有别名\",{\"1\":{\"1474\":1}}],[\"即认为多线程同时修改共享资源的概率比较高\",{\"1\":{\"1468\":1}}],[\"即互斥\",{\"1\":{\"1463\":1}}],[\"即互斥信号量\",{\"1\":{\"1460\":1}}],[\"即同步\",{\"1\":{\"1463\":1}}],[\"即同步信号量\",{\"1\":{\"1460\":1}}],[\"即同一个undo页面中写入了多组日志\",{\"1\":{\"750\":1}}],[\"即理论上可以申请最大\",{\"1\":{\"1444\":2}}],[\"即产生\",{\"1\":{\"1417\":1}}],[\"即当网络拥塞时\",{\"1\":{\"1408\":1}}],[\"即$2\",{\"1\":{\"1387\":1}}],[\"即钩子\",{\"1\":{\"1345\":1}}],[\"即不可达对象\",{\"1\":{\"1522\":1}}],[\"即不同分支同时修改了同一块数据\",{\"1\":{\"1336\":1}}],[\"即不存在竞争\",{\"1\":{\"1076\":1}}],[\"即两个分支有共同祖先\",{\"1\":{\"1336\":1}}],[\"即让\",{\"1\":{\"1335\":1}}],[\"即找到暂存区的文件\",{\"1\":{\"1310\":1}}],[\"即已跟踪的文件有三种状态\",{\"1\":{\"1310\":1}}],[\"即已经连接成功的\",{\"1\":{\"820\":1}}],[\"即网络分区正常\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"即满足所有的约束条件和业务规则\",{\"1\":{\"1274\":1,\"1550\":1}}],[\"即时间窗口\",{\"1\":{\"1637\":1}}],[\"即时性\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"即时编译器是字节码执行引擎的另一部分\",{\"1\":{\"242\":1}}],[\"即时编译器\",{\"0\":{\"266\":1},\"1\":{\"242\":1,\"255\":1}}],[\"即新集群的所有锁键前缀加个\",{\"1\":{\"1239\":1}}],[\"即只要旧集群加锁成功\",{\"1\":{\"1239\":1}}],[\"即关联表\",{\"1\":{\"1228\":1}}],[\"即关联到本引用队列\",{\"1\":{\"184\":1}}],[\"即管理表\",{\"1\":{\"1228\":1}}],[\"即管控整个分布式服务器集群的全部资源\",{\"1\":{\"1222\":1}}],[\"即有一个中心节点来统筹其它服务器的工作\",{\"1\":{\"1215\":1}}],[\"即保证核心可用\",{\"1\":{\"1207\":1}}],[\"即注册在特定\",{\"1\":{\"1189\":1}}],[\"即羊群效应\",{\"1\":{\"1186\":1}}],[\"即list\",{\"1\":{\"1128\":1}}],[\"即len=free\",{\"1\":{\"879\":1}}],[\"即应该用队列去缓存大批量的任务\",{\"1\":{\"1120\":1}}],[\"即取后29位\",{\"1\":{\"1112\":1}}],[\"即取前3位\",{\"1\":{\"1112\":1}}],[\"即对象创建后\",{\"1\":{\"1077\":1}}],[\"即对象引用关系不会发生变化\",{\"1\":{\"172\":1}}],[\"即内部业务回滚\",{\"1\":{\"1041\":1}}],[\"即内存数据和磁盘数据不一致\",{\"1\":{\"638\":1}}],[\"即手动开启\",{\"1\":{\"1037\":1}}],[\"即传给\",{\"1\":{\"1016\":1}}],[\"即把定义了销毁方法的\",{\"1\":{\"1012\":1}}],[\"即汉明重量\",{\"1\":{\"976\":1}}],[\"即sds\",{\"1\":{\"975\":1}}],[\"即supremum伪记录\",{\"1\":{\"689\":1}}],[\"即造成主从服务器不一致的那条写命令发送给从服务器执行\",{\"1\":{\"934\":1}}],[\"即rediscommand结构\",{\"1\":{\"927\":1}}],[\"即read\",{\"1\":{\"729\":1}}],[\"即删除暂存区和工作目录下的该文件\",{\"1\":{\"1319\":1}}],[\"即删除缓存后更新数据库\",{\"1\":{\"1267\":1,\"1585\":1}}],[\"即删除过期字典的某个键值对\",{\"1\":{\"908\":1}}],[\"即删除元数据库中\",{\"1\":{\"118\":1}}],[\"即结点数量\",{\"1\":{\"886\":1}}],[\"即分隔符\",{\"1\":{\"845\":1}}],[\"即它们的容灾能力是一样的\",{\"1\":{\"1202\":1}}],[\"即它能够动态扩容的最大限制\",{\"1\":{\"827\":1}}],[\"即它可以存储的最大字节数\",{\"1\":{\"827\":1}}],[\"即工人与\",{\"1\":{\"818\":1}}],[\"即粘包半包问题\",{\"1\":{\"788\":1}}],[\"即服务端一开始\",{\"1\":{\"787\":1}}],[\"即读写可以同时进行\",{\"1\":{\"760\":1}}],[\"即undo\",{\"1\":{\"749\":1,\"751\":1}}],[\"即contents数组长度\",{\"1\":{\"888\":1}}],[\"即checkpoint\",{\"1\":{\"741\":1}}],[\"即cli中的\",{\"1\":{\"493\":1}}],[\"即oldest\",{\"1\":{\"740\":1}}],[\"即这些操作要么同时成功\",{\"1\":{\"733\":1}}],[\"即除索引条件外满足其它搜索条件的记录数占rows之比\",{\"1\":{\"728\":1}}],[\"即估算的满足搜索条件的记录总数占rows之比\",{\"1\":{\"728\":1}}],[\"即预计需要扫描的索引记录行数\",{\"1\":{\"728\":1}}],[\"即预计需要扫描的行数\",{\"1\":{\"728\":1}}],[\"即访问方法是const\",{\"1\":{\"728\":1}}],[\"即谁作为驱动表\",{\"1\":{\"718\":1}}],[\"即执行上面的\",{\"1\":{\"865\":1}}],[\"即执行计划\",{\"1\":{\"717\":1}}],[\"即执行各种query后返回的结果为空\",{\"1\":{\"34\":1}}],[\"即被驱动表中查找匹配的记录\",{\"1\":{\"713\":1}}],[\"即需要查询的数据在单个索引结构中能够全部获取到\",{\"1\":{\"706\":1}}],[\"即查询键的过期时间和当前时间之差\",{\"1\":{\"908\":1}}],[\"即查询时不会使用该列之后的字段索引\",{\"1\":{\"702\":1}}],[\"即查询从索引的最左列开始\",{\"1\":{\"702\":1}}],[\"即一个索引关联多个列\",{\"1\":{\"699\":1}}],[\"即一个索引只包含单个列\",{\"1\":{\"699\":1}}],[\"即多个进程可以同时访问一个资源\",{\"1\":{\"1466\":1}}],[\"即多个段构成一个分片\",{\"1\":{\"34\":1}}],[\"即多叉\",{\"1\":{\"698\":1}}],[\"即数据是按行进行存放的\",{\"1\":{\"693\":1}}],[\"即数据库内存在表\",{\"1\":{\"108\":1}}],[\"即最近一次修改页面对应的lsn值\",{\"1\":{\"742\":1}}],[\"即最近一次的checkpoint信息\",{\"1\":{\"742\":1}}],[\"即最近一次mtr对应的lsn\",{\"1\":{\"740\":1}}],[\"即最大记录\",{\"1\":{\"690\":1}}],[\"即最终的数字指纹\",{\"1\":{\"14\":1}}],[\"即infimum伪记录\",{\"1\":{\"689\":1}}],[\"即语言层面的代码封装与重用\",{\"1\":{\"627\":1}}],[\"即由行和列组成的表\",{\"1\":{\"569\":1}}],[\"即是否有数据存储功能\",{\"1\":{\"1614\":1}}],[\"即是否获取到锁\",{\"1\":{\"564\":1}}],[\"即是热点方法\",{\"1\":{\"268\":1}}],[\"即消费分区分配的问题\",{\"1\":{\"494\":1}}],[\"即消费的分区分配\",{\"1\":{\"483\":1}}],[\"即消息队列\",{\"1\":{\"408\":1}}],[\"即下一条消息的写入位置\",{\"1\":{\"471\":1}}],[\"即限制发送窗口为1\",{\"1\":{\"462\":1}}],[\"即控制发送窗口的大小\",{\"1\":{\"462\":1}}],[\"即和\",{\"1\":{\"460\":1}}],[\"即每个节点只有一个客户端请求\",{\"1\":{\"450\":1}}],[\"即无延迟立即发送\",{\"1\":{\"450\":1}}],[\"即为\",{\"1\":{\"408\":1}}],[\"即将该记录从正常记录链表移到垃圾链表头部\",{\"1\":{\"747\":1}}],[\"即将所有日志委托给\",{\"1\":{\"382\":1}}],[\"即将可用内存按容量划分为大小相等的两块\",{\"1\":{\"169\":1}}],[\"即毫无理由地\",{\"1\":{\"363\":1}}],[\"即java中的方法\",{\"1\":{\"356\":1}}],[\"即使是烈日当空\",{\"1\":{\"1838\":1}}],[\"即使是海量数据\",{\"1\":{\"442\":1}}],[\"即使花钱也有流量限制\",{\"1\":{\"1811\":1}}],[\"即使删除后\",{\"1\":{\"1790\":1}}],[\"即使在发生硬件故障或者系统升级的时候\",{\"1\":{\"1638\":1}}],[\"即使目标文件删除了\",{\"1\":{\"1474\":1}}],[\"即使给它cpu控制权\",{\"1\":{\"1450\":1}}],[\"即使消息积压导致消息丢失\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"即使面对故障\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"即使无法做到强一致性\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"即使发生系统故障或崩溃也不会丢失\",{\"1\":{\"1274\":1,\"1550\":1}}],[\"即使发送一个字节\",{\"1\":{\"839\":1}}],[\"即使速度慢点\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"即使它的\",{\"1\":{\"1044\":1}}],[\"即使数据库中有多个事务并发执行\",{\"1\":{\"961\":1}}],[\"即使队列中某个命令执行出错\",{\"1\":{\"961\":1}}],[\"即使碰到过期键也不会删除\",{\"1\":{\"908\":1}}],[\"即使没有连接建立和可读数据\",{\"1\":{\"783\":1}}],[\"即使其操作系统和浏览器不同\",{\"1\":{\"409\":1}}],[\"即使出现异常\",{\"1\":{\"346\":1}}],[\"即使class格式未发生变化\",{\"1\":{\"240\":1}}],[\"即1\",{\"1\":{\"277\":1}}],[\"即热点代码分两类\",{\"1\":{\"268\":1}}],[\"即先由父类加载器尝试加载类\",{\"1\":{\"254\":1}}],[\"即常量池中引用的对象\",{\"1\":{\"224\":1}}],[\"即类的静态变量引用的对象\",{\"1\":{\"224\":1}}],[\"即程序如何执行\",{\"1\":{\"210\":1}}],[\"即队列中只有一个元素\",{\"1\":{\"184\":1}}],[\"即队列里还有其它线程在等待走这段逻辑\",{\"1\":{\"6\":1}}],[\"即添加元素时先\",{\"1\":{\"162\":1}}],[\"即要保证指令不会受\",{\"1\":{\"144\":2}}],[\"即要保证指令不会受到线程上下文切换的影响\",{\"1\":{\"144\":1}}],[\"即后一个执行的语句无需依赖前面执行的语句的结果\",{\"1\":{\"143\":1}}],[\"即未完结\",{\"1\":{\"105\":1}}],[\"即用户查询中\",{\"1\":{\"53\":1}}],[\"即订单索引\",{\"1\":{\"34\":1}}],[\"即可开始测试\",{\"1\":{\"1717\":1}}],[\"即可交由\",{\"1\":{\"1040\":1}}],[\"即可用于图bfs\",{\"1\":{\"1001\":1}}],[\"即可用作传统的海量数据的检索引擎\",{\"1\":{\"31\":1}}],[\"即可以连接到运行在远程服务器上的java进程\",{\"1\":{\"236\":1}}],[\"即可以被回收\",{\"1\":{\"224\":1}}],[\"即可\",{\"1\":{\"27\":1,\"1643\":1,\"1791\":1}}],[\"即\",{\"1\":{\"25\":1,\"34\":1,\"184\":1,\"196\":1,\"788\":1,\"828\":2,\"863\":1,\"864\":1,\"865\":1,\"866\":1,\"867\":1,\"1019\":1,\"1212\":1,\"1219\":1}}],[\"可是小朋友好像有点怕\",{\"1\":{\"1846\":1}}],[\"可是还要做饭\",{\"1\":{\"1825\":1}}],[\"可是能用吗\",{\"1\":{\"71\":1}}],[\"可惜云雾太多\",{\"1\":{\"1842\":1}}],[\"可惜哈皮厨子的刀法太操蛋了\",{\"1\":{\"1819\":1}}],[\"可惜人家是食物链的上游\",{\"1\":{\"1786\":1}}],[\"可我隔壁的老大哥可一点也不闲\",{\"1\":{\"1785\":1}}],[\"可售卖状态\",{\"1\":{\"1736\":1}}],[\"可查询航班计划\",{\"1\":{\"1723\":1}}],[\"可信\",{\"1\":{\"1705\":1}}],[\"可复选\",{\"1\":{\"1676\":1}}],[\"可执行的独立软件包\",{\"1\":{\"1634\":1}}],[\"可执行文件等\",{\"1\":{\"1400\":1}}],[\"可执行文件\",{\"1\":{\"1350\":1}}],[\"可移植的容器中\",{\"1\":{\"1634\":1}}],[\"可标注任意类为\",{\"1\":{\"1594\":1}}],[\"可预测停顿\",{\"1\":{\"1525\":1}}],[\"可有可无\",{\"1\":{\"1522\":1}}],[\"可达性分析\",{\"1\":{\"1522\":1}}],[\"可达性分析算法能够准确地判断对象是否可被回收\",{\"1\":{\"224\":1}}],[\"可达性分析算法是\",{\"1\":{\"224\":1}}],[\"可达性分析算法\",{\"0\":{\"224\":1}}],[\"可写的\",{\"1\":{\"1487\":1}}],[\"可写\",{\"1\":{\"1487\":1}}],[\"可利用资源向量\",{\"1\":{\"1466\":1}}],[\"可回收内存\",{\"1\":{\"1446\":1}}],[\"可通过\",{\"1\":{\"1446\":1}}],[\"可通过join\",{\"1\":{\"714\":1}}],[\"可接受的压缩格式\",{\"1\":{\"1398\":1}}],[\"可供开发人员开发相关程序进行分布式数据计算\",{\"1\":{\"1221\":1}}],[\"可供用户整体调度大规模集群的资源使用\",{\"1\":{\"1214\":1}}],[\"可依赖性\",{\"1\":{\"1212\":1}}],[\"可调整线程数量的线程池\",{\"1\":{\"1110\":1}}],[\"可运行线程\",{\"1\":{\"1090\":1}}],[\"可运行\",{\"1\":{\"1089\":1,\"1450\":1}}],[\"可继承的线程局部变量\",{\"1\":{\"1087\":1}}],[\"可进行链式操作\",{\"1\":{\"1068\":1}}],[\"可串行化\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1}}],[\"可组合和复合\",{\"1\":{\"825\":1}}],[\"可配\",{\"1\":{\"1219\":1}}],[\"可配合\",{\"1\":{\"760\":1}}],[\"可配置\",{\"1\":{\"459\":1}}],[\"可null的列最多使用ref方式\",{\"1\":{\"710\":1}}],[\"可视化管理\",{\"1\":{\"1302\":1}}],[\"可视化运维的管理和监控平台\",{\"1\":{\"657\":1}}],[\"可视化工具\",{\"1\":{\"31\":1}}],[\"可指定大小\",{\"1\":{\"1499\":1}}],[\"可指定\",{\"1\":{\"615\":1}}],[\"可被其它语句引用的可重用语句块\",{\"1\":{\"529\":1}}],[\"可参考\",{\"1\":{\"471\":1}}],[\"可用内存和已使用情况\",{\"1\":{\"1631\":1}}],[\"可用带宽小\",{\"1\":{\"1446\":1}}],[\"可用于分布式系统\",{\"1\":{\"1461\":1}}],[\"可用于多种通信场景\",{\"1\":{\"1460\":1}}],[\"可用于同步和互斥\",{\"1\":{\"1460\":1}}],[\"可用于通知事件\",{\"1\":{\"1345\":1}}],[\"可用于类或方法\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"可用\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"可用性a\",{\"1\":{\"1279\":1}}],[\"可用性可以同时保证\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"可用性发生冲突了\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"可用性\",{\"1\":{\"435\":1,\"1206\":1,\"1278\":2,\"1618\":2}}],[\"可用性高\",{\"1\":{\"410\":1}}],[\"可用函数\",{\"1\":{\"122\":1}}],[\"可靠消息+最终一致性\",{\"0\":{\"1286\":1}}],[\"可靠抵达\",{\"1\":{\"419\":1}}],[\"可靠\",{\"1\":{\"407\":1}}],[\"可靠性中等\",{\"1\":{\"460\":1}}],[\"可靠性差\",{\"1\":{\"460\":1}}],[\"可靠性最高\",{\"1\":{\"450\":1}}],[\"可靠性\",{\"1\":{\"412\":1}}],[\"可靠性较低\",{\"1\":{\"134\":1}}],[\"可靠性高\",{\"1\":{\"134\":1}}],[\"可伸缩和最终一致性架构\",{\"1\":{\"396\":1}}],[\"可嵌套\",{\"1\":{\"357\":1}}],[\"可模拟栈\",{\"1\":{\"304\":1}}],[\"可变大小的输出缓冲区\",{\"1\":{\"923\":1}}],[\"可变字符集字段的实际长度\",{\"1\":{\"684\":1}}],[\"可变长度二进制字符串\",{\"1\":{\"664\":1}}],[\"可变参数sql\",{\"1\":{\"530\":1}}],[\"可变参数允许方法接受可变数量的参数\",{\"1\":{\"263\":1}}],[\"可变参数\",{\"1\":{\"263\":1}}],[\"可变的状态的访问\",{\"1\":{\"144\":1}}],[\"可见为了节省带宽资源\",{\"1\":{\"1803\":1}}],[\"可见注解\",{\"1\":{\"240\":1}}],[\"可见性原理\",{\"1\":{\"145\":1}}],[\"可见性\",{\"1\":{\"144\":1,\"145\":1,\"1506\":1}}],[\"可能第三方也会进行限速\",{\"1\":{\"1808\":1}}],[\"可能过段时间就得重新找一个网站\",{\"1\":{\"1804\":1}}],[\"可能只是把分辨率强行拉升\",{\"1\":{\"1803\":1}}],[\"可能破坏索引值的有序性\",{\"1\":{\"1547\":1}}],[\"可能的原因\",{\"1\":{\"1524\":1}}],[\"可能大量请求集中在一个节点\",{\"1\":{\"1489\":1}}],[\"可能访问不到需要的数据\",{\"1\":{\"1489\":1}}],[\"可能持续\",{\"1\":{\"1409\":1}}],[\"可能产生数据不一致\",{\"1\":{\"1556\":1}}],[\"可能产生多次重定向\",{\"1\":{\"1400\":1}}],[\"可能产生脏读\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1}}],[\"可能堆积大量的请求\",{\"1\":{\"1110\":2}}],[\"可能修改后创建的\",{\"1\":{\"1012\":1}}],[\"可能是字节数组\",{\"1\":{\"892\":1}}],[\"可能更合适\",{\"1\":{\"860\":1}}],[\"可能更加高效\",{\"1\":{\"860\":1}}],[\"可能导致数据不一致的问题\",{\"1\":{\"1563\":1}}],[\"可能导致数据丢失\",{\"1\":{\"1162\":1,\"1187\":1}}],[\"可能导致检索速度慢的问题\",{\"1\":{\"1546\":1}}],[\"可能导致低优先级饥饿\",{\"1\":{\"1470\":1}}],[\"可能导致日志追尾\",{\"1\":{\"741\":1}}],[\"可能导致拒绝服务以及网络拥塞\",{\"1\":{\"480\":1}}],[\"可能用到的索引\",{\"1\":{\"728\":1}}],[\"可能需要进行页分裂\",{\"1\":{\"615\":1}}],[\"可能返回给\",{\"1\":{\"414\":1,\"1628\":1}}],[\"可能发生消息丢失\",{\"1\":{\"407\":1}}],[\"可能有害的消息\",{\"1\":{\"390\":1}}],[\"可能可以恢复\",{\"1\":{\"390\":1}}],[\"可能因为异常导致timer线程死掉\",{\"1\":{\"334\":1}}],[\"可能出现oom\",{\"1\":{\"332\":1}}],[\"可能会导致脏读\",{\"1\":{\"1612\":1}}],[\"可能会导致应用程序的性能下降\",{\"1\":{\"1511\":1}}],[\"可能会导致指令集的复杂性增加\",{\"1\":{\"242\":1}}],[\"可能会创建大量线程\",{\"1\":{\"1110\":1}}],[\"可能会造成数据的漏消费\",{\"1\":{\"499\":1}}],[\"可能会引发内存泄露\",{\"1\":{\"223\":1}}],[\"可能无法等待所有线程到齐\",{\"1\":{\"161\":1}}],[\"可并发\",{\"1\":{\"179\":1}}],[\"可中断io中用于阻塞线程的对象及对应的访问锁\",{\"1\":{\"1087\":1}}],[\"可中断\",{\"1\":{\"156\":1}}],[\"可选值\",{\"1\":{\"422\":1}}],[\"可选参数为s\",{\"1\":{\"230\":1}}],[\"可选\",{\"0\":{\"1148\":1},\"1\":{\"107\":1,\"108\":2,\"113\":1,\"120\":2,\"121\":1,\"474\":2,\"509\":1,\"533\":1,\"630\":2,\"684\":1,\"913\":2,\"1225\":1,\"1557\":1}}],[\"可不写\",{\"1\":{\"105\":1}}],[\"可分词的文本\",{\"1\":{\"36\":1}}],[\"可提供接口给第三方\",{\"1\":{\"26\":1}}],[\"可扩展消息处理现场协议\",{\"1\":{\"409\":1}}],[\"可扩展标记语言\",{\"1\":{\"357\":1}}],[\"可扩展性\",{\"1\":{\"236\":1}}],[\"可扩展的分布式计算解决方案\",{\"1\":{\"1214\":1}}],[\"可扩展的接口\",{\"1\":{\"1045\":1,\"1383\":1}}],[\"可扩展的\",{\"1\":{\"52\":1}}],[\"可扩展\",{\"1\":{\"26\":1,\"409\":1,\"432\":1}}],[\"可以写个bat\",{\"1\":{\"1868\":1}}],[\"可以去\",{\"1\":{\"1867\":1}}],[\"可以付费滑沙\",{\"1\":{\"1842\":1}}],[\"可以占一整排躺下\",{\"1\":{\"1833\":1}}],[\"可以更好得记录自己的观影历史\",{\"1\":{\"1811\":1}}],[\"可以更好的帮助了解事和物在现实世界的运行规律\",{\"1\":{\"1211\":1}}],[\"可以telegram上关注开放注册的消息\",{\"1\":{\"1810\":1}}],[\"可以做种\",{\"1\":{\"1810\":1}}],[\"可以做到强一致性\",{\"1\":{\"1162\":1,\"1187\":1}}],[\"可以做到无限堆积\",{\"1\":{\"435\":1}}],[\"可以做到不丢失\",{\"1\":{\"435\":3}}],[\"可以帮助团队自动化软件开发过程中的重复性任务\",{\"1\":{\"1790\":1}}],[\"可以帮助开发人员找出java应用程序的性能瓶颈\",{\"1\":{\"237\":1}}],[\"可以帮助开发人员诊断和调试java应用程序的各种问题\",{\"1\":{\"235\":1}}],[\"可以运到第三国\",{\"1\":{\"1746\":1}}],[\"可以不支付\",{\"1\":{\"1738\":1}}],[\"可以类比成商品的库存\",{\"1\":{\"1734\":1}}],[\"可以认为是航司的crs系统\",{\"1\":{\"1729\":1}}],[\"可以计算日期\",{\"1\":{\"1697\":1}}],[\"可以临时提权\",{\"1\":{\"1691\":1}}],[\"可以简化行数\",{\"1\":{\"1686\":1}}],[\"可以表示8位二进制1的个数\",{\"1\":{\"1666\":1}}],[\"可以横跨多个\",{\"1\":{\"1626\":1}}],[\"可以防止脏读\",{\"1\":{\"1612\":1}}],[\"可以防止在程序运行时被意外修改\",{\"1\":{\"64\":1}}],[\"可以排除\",{\"1\":{\"1567\":1}}],[\"可以解决单一表数据量过大的问题\",{\"1\":{\"1564\":1}}],[\"可以解除某个线程的阻塞状态\",{\"1\":{\"364\":1}}],[\"可以小幅提升写性能\",{\"1\":{\"1563\":1}}],[\"可以利用\",{\"1\":{\"1554\":1}}],[\"可以利用套接字通信\",{\"1\":{\"672\":1}}],[\"可以代理任何类\",{\"1\":{\"1532\":1}}],[\"可以代理任何对象\",{\"1\":{\"1014\":1}}],[\"可以加快数据访问\",{\"1\":{\"1479\":1}}],[\"可以消除磁盘碎片\",{\"1\":{\"1476\":1}}],[\"可以跨文件系统\",{\"1\":{\"1474\":1}}],[\"可以定时开关\",{\"1\":{\"1828\":1}}],[\"可以定期减少已访问次数\",{\"1\":{\"1471\":1}}],[\"可以定义对应的监听器\",{\"1\":{\"84\":1}}],[\"可以基于互斥锁\",{\"1\":{\"1468\":1}}],[\"可以发送\",{\"1\":{\"1465\":1}}],[\"可以发现响应文件读取的另一个线程\",{\"1\":{\"796\":1}}],[\"可以控制\",{\"1\":{\"1440\":1}}],[\"可以监控软中断变化\",{\"1\":{\"1437\":1}}],[\"可以监视java应用程序的各种性能指标\",{\"1\":{\"238\":1}}],[\"可以开启\",{\"1\":{\"1418\":1}}],[\"可以开始接收客户端连接和请求\",{\"1\":{\"929\":1}}],[\"可以合并传输\",{\"1\":{\"1410\":1}}],[\"可以收发数据\",{\"1\":{\"1406\":1}}],[\"可以一次性请求所有所需的资源\",{\"1\":{\"1466\":1}}],[\"可以一次发起多个请求\",{\"1\":{\"1404\":1}}],[\"可以一次跳过多个结点\",{\"1\":{\"886\":1}}],[\"可以优化业务逻辑\",{\"1\":{\"1367\":1}}],[\"可以恢复\",{\"1\":{\"1345\":1}}],[\"可以调整工作目录\",{\"1\":{\"1345\":1}}],[\"可以调用\",{\"1\":{\"772\":1}}],[\"可以校验项目状态和提交信息\",{\"1\":{\"1345\":1}}],[\"可以编辑默认的提交信息\",{\"1\":{\"1345\":1}}],[\"可以保留\",{\"1\":{\"1344\":1}}],[\"可以保证多线程下并发的可见性\",{\"1\":{\"1497\":1}}],[\"可以保证同时对这两个域的修改是原子的\",{\"1\":{\"1112\":1}}],[\"可以保证数据不重复\",{\"1\":{\"461\":1}}],[\"可以保证数据不丢失\",{\"1\":{\"461\":1}}],[\"可以跟踪文件的修改与暂存的改动\",{\"1\":{\"1343\":1}}],[\"可以由rip\",{\"1\":{\"1301\":1}}],[\"可以由此扩展\",{\"1\":{\"848\":1}}],[\"可以创建\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"可以设置随机时间\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"可以设置多个索引的副本\",{\"1\":{\"34\":1}}],[\"可以置\",{\"1\":{\"1269\":1,\"1446\":1,\"1613\":1}}],[\"可以获得执行结果\",{\"1\":{\"1511\":1}}],[\"可以获得加锁结果\",{\"1\":{\"1264\":1}}],[\"可以获取到\",{\"1\":{\"1599\":1}}],[\"可以获取机器的\",{\"1\":{\"791\":1}}],[\"可以获取返回值\",{\"1\":{\"311\":1,\"1369\":1}}],[\"可以与服务端协商之后\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"可以再上一版代码\",{\"1\":{\"1236\":1}}],[\"可以像普通列一样被使用\",{\"1\":{\"1229\":1}}],[\"可以像使用mysql一样来使用mycat\",{\"1\":{\"654\":1}}],[\"可以完成分布式海量数据的\",{\"1\":{\"1223\":1}}],[\"可以完成海量规模的数据传输工作\",{\"1\":{\"1213\":1}}],[\"可以借助hadoop构建大规模服务器集群\",{\"1\":{\"1214\":1}}],[\"可以借此实现高效的查找算法\",{\"1\":{\"697\":1}}],[\"可以协助大数据体系和关系型数据库之间进行数据传输\",{\"1\":{\"1213\":1}}],[\"可以看作一种文件系统+通知机制\",{\"1\":{\"1167\":1}}],[\"可以看到期间仅发生了一次用户态与内核态的切换\",{\"1\":{\"801\":1}}],[\"可以看到中间环节较多\",{\"1\":{\"799\":1}}],[\"可以看到主要分为两步\",{\"1\":{\"383\":1}}],[\"可以看到\",{\"1\":{\"188\":1,\"362\":1,\"818\":1,\"1665\":1}}],[\"可以参考\",{\"1\":{\"1137\":1,\"1333\":1}}],[\"可以终止了\",{\"1\":{\"1116\":1}}],[\"可以以一种声明的方式处理数据\",{\"1\":{\"1065\":1}}],[\"可以阻止所有并发问题\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1}}],[\"可以阻止脏读和不可重复读\",{\"1\":{\"1612\":1}}],[\"可以阻止脏读\",{\"1\":{\"1035\":2,\"1275\":2,\"1552\":2,\"1612\":1}}],[\"可以知道a已经成功接收到自己返回的pong消息\",{\"1\":{\"945\":1}}],[\"可以知道b已经成功接收到自己发送的meet消息\",{\"1\":{\"945\":1}}],[\"可以结合当前结点地址计算出前一节点的起始地址\",{\"1\":{\"892\":1}}],[\"可以结合处理器的\",{\"1\":{\"148\":1}}],[\"可以兼容部分c字符串函数\",{\"1\":{\"879\":1}}],[\"可以尽快发出数据包\",{\"1\":{\"858\":1}}],[\"可以继承\",{\"1\":{\"851\":1}}],[\"可以继续继承\",{\"1\":{\"328\":1,\"329\":1}}],[\"可以支持协议的升级\",{\"1\":{\"848\":1}}],[\"可以支撑大量的\",{\"1\":{\"435\":1}}],[\"可以循环调用\",{\"1\":{\"829\":1}}],[\"可以关注\",{\"1\":{\"829\":1}}],[\"可以关联一个或多个物理索引\",{\"1\":{\"42\":1}}],[\"可以被随意复制粘贴到别的地方\",{\"1\":{\"1790\":1}}],[\"可以被其它线程\",{\"1\":{\"1095\":1}}],[\"可以被多个\",{\"1\":{\"851\":1}}],[\"可以被组合成更大的数据结构\",{\"1\":{\"825\":1}}],[\"可以被回收\",{\"1\":{\"223\":1,\"1522\":1}}],[\"可以主动创建\",{\"1\":{\"822\":1}}],[\"可以同步等待任务结束拿到结果\",{\"1\":{\"822\":1}}],[\"可以同时使用多个分区分配策略\",{\"1\":{\"494\":1}}],[\"可以同时轮询多个\",{\"1\":{\"324\":1}}],[\"可以理解为机票不是单纯的买座位\",{\"1\":{\"1735\":1}}],[\"可以理解为一个队列\",{\"1\":{\"443\":1}}],[\"可以理解成\",{\"1\":{\"813\":1}}],[\"可以采用\",{\"1\":{\"1370\":1}}],[\"可以采用线程池技术来减少线程数和线程上下文切换\",{\"1\":{\"782\":1}}],[\"可以采用分区技术\",{\"1\":{\"478\":1}}],[\"可以配合第三方应用挂载\",{\"1\":{\"1807\":1}}],[\"可以配合阿里小站\",{\"1\":{\"1805\":1}}],[\"可以配合一个线程来管理多个\",{\"1\":{\"765\":1}}],[\"可以配置多个\",{\"1\":{\"445\":1}}],[\"可以访问该版本\",{\"1\":{\"754\":2,\"1557\":2}}],[\"可以从类路径加载\",{\"1\":{\"1648\":1}}],[\"可以从非常多的数据源中完成数据采集传输的任务\",{\"1\":{\"1213\":1}}],[\"可以从\",{\"1\":{\"760\":1}}],[\"可以从页的file\",{\"1\":{\"742\":1}}],[\"可以从中得到或监控相应的引用实例\",{\"1\":{\"187\":1}}],[\"可以查看下载进度\",{\"1\":{\"1698\":1}}],[\"可以查看虚拟机内存使用情况\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"可以查看各个lsn值\",{\"1\":{\"741\":1}}],[\"可以查询数据本身的详细参数\",{\"1\":{\"128\":1}}],[\"可以进行增加checkpoint\",{\"1\":{\"741\":1}}],[\"可以新建联合索引替代intersection合并\",{\"1\":{\"711\":1}}],[\"可以针对字段的特点\",{\"1\":{\"708\":1}}],[\"可以存在多个\",{\"1\":{\"699\":1}}],[\"可以存储在\",{\"1\":{\"17\":1}}],[\"可以管理多个节点\",{\"1\":{\"657\":1}}],[\"可以快速开发\",{\"1\":{\"1223\":1}}],[\"可以快速切换到从库提供服务\",{\"1\":{\"647\":1}}],[\"可以快速定位要消费的数据\",{\"1\":{\"478\":1}}],[\"可以缓存磁盘上经常操作的数据\",{\"1\":{\"638\":1}}],[\"可以接收参数\",{\"1\":{\"627\":1}}],[\"可以适当增大排序缓冲区大小\",{\"1\":{\"616\":1}}],[\"可以适应不同速率的消费者\",{\"1\":{\"480\":1}}],[\"可以对一个已经启动的线程进行中断操作\",{\"1\":{\"1092\":1}}],[\"可以对事务管理的一些时间节点进行增强\",{\"1\":{\"1045\":1}}],[\"可以对\",{\"1\":{\"556\":1}}],[\"可以自动刮削视频文件信息\",{\"1\":{\"1808\":1}}],[\"可以自动将接口方法名匹配到对应的语句\",{\"1\":{\"510\":1}}],[\"可以自由写入\",{\"1\":{\"1435\":2}}],[\"可以自行分析源码\",{\"1\":{\"544\":1}}],[\"可以有如下的标签\",{\"1\":{\"532\":1}}],[\"可以有多个\",{\"1\":{\"389\":1,\"699\":3,\"1068\":1,\"1626\":1}}],[\"可以用非阻塞式的原子变量\",{\"1\":{\"1072\":1}}],[\"可以用long类型保存的整数\",{\"1\":{\"896\":1}}],[\"可以用来更新其他系统服务或者通知用户\",{\"1\":{\"1345\":1}}],[\"可以用来执行耗时较长的任务\",{\"1\":{\"817\":1}}],[\"可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤\",{\"1\":{\"634\":1}}],[\"可以用\",{\"1\":{\"702\":1,\"791\":1,\"1329\":1}}],[\"可以用它来检查服务器的配置和当前状态\",{\"1\":{\"675\":1}}],[\"可以用explain\",{\"1\":{\"672\":1}}],[\"可以用于每月的签到记录的场景\",{\"1\":{\"1658\":1}}],[\"可以用于集合的交集\",{\"1\":{\"1658\":1}}],[\"可以用于实现排行榜数据\",{\"1\":{\"1658\":1}}],[\"可以用于服务注册与发现\",{\"1\":{\"1169\":1}}],[\"可以用于清空本地缓存\",{\"1\":{\"512\":1}}],[\"可以用于获取指定的\",{\"1\":{\"510\":1}}],[\"可以用阿里开源的\",{\"1\":{\"154\":1,\"1514\":1}}],[\"可以指定适用的仓库\",{\"1\":{\"1791\":1}}],[\"可以指定多次抛出的异常\",{\"1\":{\"1713\":1}}],[\"可以指定仅关闭\",{\"1\":{\"1420\":1}}],[\"可以指定文件夹名\",{\"1\":{\"1314\":1}}],[\"可以指定节点的到期时间\",{\"1\":{\"1169\":1}}],[\"可以指定大小\",{\"1\":{\"861\":1}}],[\"可以指定该表空间\",{\"1\":{\"639\":1}}],[\"可以指定消费的主题分区\",{\"1\":{\"488\":1}}],[\"可以指定阻塞式\",{\"1\":{\"184\":1}}],[\"可以执行临界区的业务代码\",{\"1\":{\"1239\":1}}],[\"可以执行手动分配副本\",{\"1\":{\"472\":1}}],[\"可以执行大部分经典的优化动作\",{\"1\":{\"269\":1}}],[\"可以作为\",{\"1\":{\"1525\":1}}],[\"可以作为双向\",{\"1\":{\"987\":1}}],[\"可以作为栈\",{\"1\":{\"986\":1}}],[\"可以作为数据源\",{\"1\":{\"760\":1}}],[\"可以作为消息的附加信息\",{\"1\":{\"450\":1}}],[\"可以作为线程间通信的基础工具\",{\"1\":{\"365\":1}}],[\"可以分布在不同的\",{\"1\":{\"1626\":1}}],[\"可以分多行指定\",{\"1\":{\"1154\":1}}],[\"可以分成两组\",{\"1\":{\"791\":1}}],[\"可以分为多个\",{\"1\":{\"443\":1}}],[\"可以分别进行垃圾回收\",{\"1\":{\"171\":1}}],[\"可以向前回溯\",{\"1\":{\"428\":1}}],[\"可以记录下详细的投递数据\",{\"1\":{\"421\":1}}],[\"可以记录java应用程序的运行过程和性能数据\",{\"1\":{\"238\":1}}],[\"可以得到常用的日志组件搭配如下\",{\"1\":{\"382\":1}}],[\"可以减少io\",{\"1\":{\"1479\":1}}],[\"可以减少线程对锁的请求频率\",{\"1\":{\"1081\":1}}],[\"可以减少类的数量\",{\"1\":{\"375\":1}}],[\"可以减少复制操作\",{\"1\":{\"169\":1}}],[\"可以把线程绑定在某一个\",{\"1\":{\"1435\":1}}],[\"可以把参数作为字符串插入语句\",{\"1\":{\"530\":1}}],[\"可以把它想象成只有一个许可证的semaphore\",{\"1\":{\"366\":1}}],[\"可以把一个进程的资源分配和执行调度分开\",{\"1\":{\"277\":1}}],[\"可以让开发者打包他们的应用以及依赖包到一个轻量级\",{\"1\":{\"1634\":1}}],[\"可以让线程在需要时阻塞等待许可\",{\"1\":{\"362\":1}}],[\"可以让读\",{\"1\":{\"157\":1}}],[\"可以为\",{\"1\":{\"520\":1}}],[\"可以为该对象进行加工和数据注入\",{\"1\":{\"358\":1}}],[\"可以为被代理对象的所有方法做代理\",{\"1\":{\"349\":1}}],[\"可以灵活选择测试方法\",{\"1\":{\"356\":1}}],[\"可以将快照复制到其他服务器从而创建具有相同数据的服务器副本\",{\"1\":{\"1576\":1}}],[\"可以将连接断开期间的写命令发送给从服务器\",{\"1\":{\"935\":1}}],[\"可以将系统执行的信息选择性的记录到指定的位置\",{\"1\":{\"355\":1}}],[\"可以将reference对象的状态分为以下几种\",{\"1\":{\"186\":1}}],[\"可以重用旧记录的空间\",{\"1\":{\"748\":1}}],[\"可以重定向输出语句到文件中\",{\"1\":{\"322\":1}}],[\"可以重新安排语句的执行顺序\",{\"1\":{\"143\":1}}],[\"可以在从节点中选举出一个新的主节点来保证服务的可用性\",{\"1\":{\"1588\":1}}],[\"可以在从库中执行备份\",{\"1\":{\"647\":1}}],[\"可以在模式前加上叹号\",{\"1\":{\"1330\":1}}],[\"可以在多台服务器上构建存储集群\",{\"1\":{\"1215\":1}}],[\"可以在多种不同场景中应用并发挥良好作用\",{\"1\":{\"570\":1}}],[\"可以在一个线程中等待另一个线程执行完毕\",{\"1\":{\"1091\":1}}],[\"可以在不移动现有二进制位的情况下\",{\"1\":{\"975\":1}}],[\"可以在不改变原有类的基础上\",{\"1\":{\"358\":1}}],[\"可以在exec命令执行前监视任意数量的数据库键\",{\"1\":{\"960\":1}}],[\"可以在当前索引打上一个标记\",{\"1\":{\"773\":1}}],[\"可以在创建或修改的表语句中指定row\",{\"1\":{\"683\":1}}],[\"可以在\",{\"1\":{\"431\":1,\"550\":1}}],[\"可以在运行时得到这个类的全部成分\",{\"1\":{\"307\":1}}],[\"可以在使用泛型时代表一切类型\",{\"1\":{\"306\":1}}],[\"可以在任何时候被抢占或中断\",{\"1\":{\"278\":1}}],[\"可以转换成真正的子类型\",{\"1\":{\"293\":1}}],[\"可以强行将类型范围大的变量\",{\"1\":{\"287\":1}}],[\"可以大大提高程序的性能和并发处理能力\",{\"1\":{\"282\":1}}],[\"可以直接在线看\",{\"1\":{\"1805\":1}}],[\"可以直接在用户态切换上下文\",{\"1\":{\"1453\":1}}],[\"可以直接提交\",{\"1\":{\"1556\":1}}],[\"可以直接释放\",{\"1\":{\"1446\":1}}],[\"可以直接查\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"可以直接使用\",{\"1\":{\"1261\":1}}],[\"可以直接访问\",{\"1\":{\"825\":1,\"1645\":1}}],[\"可以直接访问外部类实例成员\",{\"1\":{\"296\":1}}],[\"可以直接访问外部类静态对象\",{\"1\":{\"295\":1,\"296\":1}}],[\"可以直接作为对象传给方法\",{\"1\":{\"298\":1}}],[\"可以直接赋值给类型范围大的变量\",{\"1\":{\"287\":1}}],[\"可以直接由\",{\"1\":{\"270\":1}}],[\"可以直接将\",{\"1\":{\"263\":1}}],[\"可以根据区分度来选择\",{\"1\":{\"1548\":1}}],[\"可以根据不同的场景选择不同的存储引擎\",{\"1\":{\"1540\":1}}],[\"可以根据不同的数据库厂商执行不同的语句\",{\"1\":{\"527\":1}}],[\"可以根据网络稳定性\",{\"1\":{\"1415\":1}}],[\"可以根据需要注入不同的实现方式\",{\"1\":{\"1009\":1}}],[\"可以根据需要定制类加载过程\",{\"1\":{\"254\":1}}],[\"可以根据资源的类型\",{\"1\":{\"1008\":1}}],[\"可以根据索引的选择性来决定\",{\"1\":{\"707\":1}}],[\"可以根据可选配置\",{\"1\":{\"542\":1}}],[\"可以根据实际的业务需要\",{\"1\":{\"453\":1}}],[\"可以根据输入产生一个\",{\"1\":{\"14\":1}}],[\"可以生成java应用程序的堆转储文件\",{\"1\":{\"238\":1}}],[\"可以是主\",{\"1\":{\"939\":1}}],[\"可以是多个乘客的订座信息\",{\"1\":{\"1738\":1}}],[\"可以是多列\",{\"1\":{\"610\":1}}],[\"可以是多行\",{\"1\":{\"609\":1}}],[\"可以是内连接查询\",{\"1\":{\"605\":1}}],[\"可以是内置类型\",{\"1\":{\"83\":1}}],[\"可以是嵌套的select\",{\"1\":{\"532\":2}}],[\"可以是本地java进程的pid\",{\"1\":{\"230\":1}}],[\"可以通过$\",{\"1\":{\"1791\":1}}],[\"可以通过接口的形式给平台提供数据\",{\"1\":{\"1727\":1}}],[\"可以通过不同的类\",{\"1\":{\"1648\":1}}],[\"可以通过镜像复制多个一致的容器\",{\"1\":{\"1634\":1}}],[\"可以通过重做日志将数据库恢复到事务提交后的状态\",{\"1\":{\"1555\":1}}],[\"可以通过版本号\",{\"1\":{\"1513\":1}}],[\"可以通过线程池进行优化\",{\"1\":{\"1487\":1}}],[\"可以通过零拷贝技术减少这两个开销\",{\"1\":{\"1486\":1}}],[\"可以通过内存交换解决\",{\"1\":{\"1443\":1}}],[\"可以通过伪造\",{\"1\":{\"1420\":1}}],[\"可以通过建立消息的日志表\",{\"1\":{\"1374\":1}}],[\"可以通过配置的方式\",{\"1\":{\"1303\":1}}],[\"可以通过定时任务将数据库中的数据刷新到缓存中\",{\"1\":{\"1253\":1}}],[\"可以通过alter\",{\"1\":{\"1228\":1}}],[\"可以通过协议头进行区分\",{\"1\":{\"1218\":1}}],[\"可以通过sbin\",{\"1\":{\"1217\":1}}],[\"可以通过show\",{\"1\":{\"640\":1,\"717\":1,\"729\":1}}],[\"可以通过mysqldump实现\",{\"1\":{\"1154\":1}}],[\"可以通过它的\",{\"1\":{\"1113\":1}}],[\"可以通过它读取和写入数据\",{\"1\":{\"324\":1}}],[\"可以通过添加事务控制将统计时间拉奇到同一时间节点\",{\"1\":{\"1031\":1}}],[\"可以通过bytebuf\",{\"1\":{\"827\":5}}],[\"可以通过环境变量\",{\"1\":{\"826\":1}}],[\"可以通过innodb\",{\"1\":{\"731\":1}}],[\"可以通过information\",{\"1\":{\"695\":1}}],[\"可以通过链表来解决\",{\"1\":{\"698\":1}}],[\"可以通过覆盖索引加子查询的形式进行优化\",{\"1\":{\"618\":1}}],[\"可以通过索引来提高效率\",{\"1\":{\"617\":1}}],[\"可以通过简单的\",{\"1\":{\"503\":1}}],[\"可以通过调整参数\",{\"1\":{\"477\":1}}],[\"可以通过\",{\"1\":{\"434\":1,\"475\":1,\"1077\":1,\"1329\":1,\"1367\":1,\"1629\":1}}],[\"可以通过复用线程\",{\"1\":{\"332\":1}}],[\"可以通过迭代器删除\",{\"1\":{\"304\":1}}],[\"可以通过class文件确认\",{\"1\":{\"301\":1}}],[\"可以通过安装不同的插件来扩展其功能\",{\"1\":{\"236\":1,\"237\":1,\"238\":1}}],[\"可以通过检查这个引用队列\",{\"1\":{\"194\":1}}],[\"可以通过继承\",{\"1\":{\"78\":1}}],[\"可以构成引用实例链\",{\"1\":{\"187\":1}}],[\"可以构建复杂的逻辑完成集合排序\",{\"1\":{\"61\":1}}],[\"可以取代reentrantreadwritelock\",{\"1\":{\"158\":1}}],[\"可以提前暴露一个单例工厂方法\",{\"1\":{\"1599\":1}}],[\"可以提高系统的并发处理能力\",{\"1\":{\"1437\":1}}],[\"可以提高系统性能\",{\"1\":{\"398\":1}}],[\"可以提高每批次拉取的数量\",{\"1\":{\"500\":1}}],[\"可以提高原始字节流\",{\"1\":{\"319\":1}}],[\"可以提高代码的可靠性和可维护性\",{\"1\":{\"64\":1}}],[\"可以提供\",{\"1\":{\"1736\":2}}],[\"可以提供很高的吞吐量\",{\"1\":{\"162\":1}}],[\"可以提供线程专属变量\",{\"1\":{\"154\":1}}],[\"可以使计算并行化\",{\"1\":{\"153\":1}}],[\"可以使用增强版的powermock库\",{\"1\":{\"1707\":1}}],[\"可以使用队列保存请求\",{\"1\":{\"1637\":1}}],[\"可以使用相同的\",{\"1\":{\"1628\":1}}],[\"可以使用相对类路径的资源引用\",{\"1\":{\"528\":1}}],[\"可以使用标准的\",{\"1\":{\"1330\":1}}],[\"可以使用git\",{\"1\":{\"1311\":1}}],[\"可以使用和修改\",{\"1\":{\"1310\":1}}],[\"可以使用mysql中的source\",{\"1\":{\"675\":1}}],[\"可以使用update\",{\"1\":{\"580\":1}}],[\"可以使用事务消息\",{\"1\":{\"419\":1}}],[\"可以使用\",{\"1\":{\"148\":1,\"154\":2,\"263\":7,\"672\":1,\"770\":1,\"800\":1,\"1269\":1,\"1400\":1,\"1486\":1,\"1514\":2,\"1567\":1,\"1582\":1,\"1613\":1}}],[\"可以使用时间戳\",{\"1\":{\"148\":1}}],[\"可以引出线程安全的三大特性\",{\"1\":{\"144\":1}}],[\"可以按照列的hash取模分桶\",{\"1\":{\"127\":1}}],[\"可以往\",{\"1\":{\"83\":1}}],[\"可以\",{\"1\":{\"71\":1,\"966\":2}}],[\"可以避免强制类型转换\",{\"1\":{\"70\":1}}],[\"可以实时监视java应用程序的各种性能指标\",{\"1\":{\"237\":1}}],[\"可以实时查看java应用程序的各种运行时信息\",{\"1\":{\"236\":2}}],[\"可以实时呈现elastichsearch聚合分析的数据\",{\"1\":{\"31\":1}}],[\"可以实现数据分片\",{\"1\":{\"1590\":1}}],[\"可以实现删除远程服务器上的\",{\"1\":{\"1351\":1}}],[\"可以实现重用冲突解决的方案\",{\"1\":{\"1347\":1}}],[\"可以实现限流\",{\"1\":{\"1264\":1}}],[\"可以实现多个应用的共享访问\",{\"1\":{\"1254\":1}}],[\"可以实现堆外内存的管理\",{\"1\":{\"1136\":1}}],[\"可以实现线程池的多维度实时监控\",{\"1\":{\"1120\":1}}],[\"可以实现零拷贝的同时保持读写操作的独立性\",{\"1\":{\"825\":1}}],[\"可以实现和多种日志组件无缝对接\",{\"1\":{\"376\":1}}],[\"可以实现在给定的延迟后运行任务\",{\"1\":{\"332\":1}}],[\"可以实现\",{\"1\":{\"68\":1,\"518\":1,\"523\":1,\"533\":1}}],[\"可以多次添加相等的元素\",{\"1\":{\"66\":1}}],[\"可以确保数据的安全和一致性\",{\"1\":{\"34\":1}}],[\"可重用执行器\",{\"1\":{\"542\":1}}],[\"可重用的框架\",{\"1\":{\"2\":1}}],[\"可重复读\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1}}],[\"可重复\",{\"1\":{\"304\":1,\"1655\":1}}],[\"可重入锁\",{\"1\":{\"156\":1,\"1264\":1}}],[\"可重入锁为例\",{\"1\":{\"5\":1}}],[\"r50\",{\"1\":{\"1799\":1}}],[\"rq\",{\"1\":{\"1436\":6}}],[\"rtp\",{\"1\":{\"1862\":1}}],[\"rtcpeerconnection\",{\"1\":{\"1861\":2}}],[\"rt提取pnr\",{\"1\":{\"1738\":1}}],[\"rt\",{\"1\":{\"1436\":2}}],[\"rto\",{\"1\":{\"1409\":1,\"1411\":1,\"1413\":1}}],[\"rtt\",{\"1\":{\"1404\":1,\"1411\":1,\"1415\":1}}],[\"rbac\",{\"1\":{\"1642\":1}}],[\"rb\",{\"1\":{\"1316\":1}}],[\"rxjava2标准接口\",{\"1\":{\"1264\":1}}],[\"r1\",{\"1\":{\"1238\":1}}],[\"rmutex\",{\"1\":{\"1467\":1}}],[\"rm\",{\"0\":{\"1319\":1},\"1\":{\"1218\":1,\"1287\":1,\"1319\":4,\"1320\":1,\"1321\":1,\"1344\":1,\"1634\":1}}],[\"rmi\",{\"1\":{\"228\":1,\"1634\":1}}],[\"rmid\",{\"1\":{\"228\":1}}],[\"rmiregistry\",{\"1\":{\"228\":1}}],[\"rst\",{\"1\":{\"1414\":1,\"1420\":4}}],[\"rsa\",{\"1\":{\"1401\":1,\"1402\":4}}],[\"rs=rip+rport\",{\"1\":{\"1301\":1}}],[\"rs的端口\",{\"1\":{\"1301\":1}}],[\"rs的ip地址\",{\"1\":{\"1301\":1}}],[\"rsemaphore\",{\"1\":{\"1264\":1}}],[\"rseg\",{\"1\":{\"751\":5}}],[\"rs\",{\"1\":{\"1112\":2,\"1301\":1}}],[\"rfloor\",{\"1\":{\"975\":1}}],[\"rfloor$\",{\"1\":{\"974\":1,\"975\":1}}],[\"rdb文件版本号\",{\"1\":{\"913\":1}}],[\"rdb文件常量标志\",{\"1\":{\"913\":1}}],[\"rdb文件结构\",{\"0\":{\"913\":1},\"1\":{\"913\":4}}],[\"rdb\",{\"0\":{\"910\":1,\"1576\":1},\"1\":{\"913\":8,\"914\":1,\"928\":1,\"961\":1,\"1170\":1,\"1576\":3}}],[\"rdb持久化\",{\"1\":{\"908\":1}}],[\"ringbuffer\",{\"1\":{\"1395\":4,\"1435\":1}}],[\"rip\",{\"1\":{\"1301\":1}}],[\"right++\",{\"1\":{\"990\":1,\"993\":1}}],[\"right\",{\"1\":{\"604\":2,\"989\":6,\"990\":4,\"993\":16,\"995\":5,\"996\":1,\"998\":20,\"1000\":1,\"1001\":2,\"1342\":1,\"1653\":6,\"1657\":2}}],[\"rich\",{\"1\":{\"238\":1}}],[\"rport\",{\"1\":{\"1301\":2}}],[\"rpad\",{\"1\":{\"593\":2}}],[\"rpc也不一定非得基于tcp\",{\"1\":{\"1623\":1}}],[\"rpc仍在使用\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"rpc使用连接池\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"rpc一般有专门的中间服务保存服务名和ip信息\",{\"1\":{\"1623\":1}}],[\"rpc一般有专门的中间服务\",{\"1\":{\"1406\":1}}],[\"rpc本质上是一种调用方式\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"rpc过程\",{\"1\":{\"101\":1}}],[\"rpcclient\",{\"1\":{\"99\":2,\"101\":1}}],[\"rpcclientproxy\",{\"1\":{\"99\":3}}],[\"rpcmessage\",{\"1\":{\"95\":1,\"96\":1,\"97\":1}}],[\"rpcmessagedecoder\",{\"0\":{\"96\":1},\"1\":{\"93\":1,\"96\":1,\"100\":1}}],[\"rpcmessageencoder\",{\"0\":{\"95\":1},\"1\":{\"93\":1,\"95\":1,\"100\":1}}],[\"rpcresponse\",{\"1\":{\"97\":1,\"99\":1}}],[\"rpcrequesthandler\",{\"1\":{\"97\":2,\"101\":1}}],[\"rpcrequest\",{\"1\":{\"97\":2,\"99\":1}}],[\"rpcrequesttransport\",{\"1\":{\"91\":1,\"99\":1}}],[\"rpcreference的\",{\"1\":{\"99\":1}}],[\"rpcreference注解\",{\"1\":{\"99\":1}}],[\"rpcreference\",{\"1\":{\"91\":1,\"99\":1}}],[\"rpcservice\",{\"1\":{\"91\":2,\"99\":1}}],[\"rpcserviceconfig\",{\"1\":{\"90\":4,\"92\":1}}],[\"rpcscan\",{\"1\":{\"90\":1,\"98\":1}}],[\"rpc\",{\"0\":{\"88\":1,\"101\":1,\"852\":1,\"1124\":1,\"1406\":1,\"1623\":1},\"1\":{\"88\":1,\"89\":2,\"99\":1,\"101\":2,\"808\":2,\"852\":1,\"1119\":1,\"1124\":1,\"1326\":2,\"1406\":3,\"1623\":3},\"2\":{\"103\":1,\"1133\":1}}],[\"rr使用\",{\"1\":{\"1557\":1}}],[\"rreadwritelock\",{\"1\":{\"1264\":1}}],[\"rr\",{\"1\":{\"555\":1,\"556\":1,\"557\":1,\"1470\":1,\"1552\":1,\"1557\":1}}],[\"rcountmutex\",{\"1\":{\"1467\":1}}],[\"rcount\",{\"1\":{\"1467\":1}}],[\"rcountdownlatch\",{\"1\":{\"1264\":1}}],[\"rcvd\",{\"1\":{\"1409\":1,\"1487\":1}}],[\"rcvbuf\",{\"0\":{\"859\":1,\"861\":1},\"1\":{\"859\":1}}],[\"rc5\",{\"1\":{\"1401\":1}}],[\"rc\",{\"1\":{\"555\":1}}],[\"rcp\",{\"1\":{\"238\":1}}],[\"ruby等\",{\"1\":{\"434\":1}}],[\"runs\",{\"1\":{\"1791\":1}}],[\"runstatelessthan\",{\"1\":{\"1114\":1,\"1116\":1}}],[\"runstateatleast\",{\"1\":{\"1114\":3,\"1115\":4,\"1116\":1}}],[\"runstateof\",{\"1\":{\"1112\":1}}],[\"runstate\",{\"1\":{\"1112\":2}}],[\"runwith是junit4提供的注解\",{\"1\":{\"1718\":1}}],[\"runwith和\",{\"1\":{\"1717\":1}}],[\"runwith\",{\"1\":{\"1709\":2,\"1716\":3,\"1718\":1}}],[\"runworker\",{\"0\":{\"1115\":1},\"1\":{\"1114\":1,\"1115\":3}}],[\"runid不为\",{\"1\":{\"941\":1}}],[\"runid\",{\"1\":{\"941\":1,\"942\":2}}],[\"runid＞\",{\"1\":{\"940\":1}}],[\"runable\",{\"1\":{\"1111\":1}}],[\"runalltasks\",{\"1\":{\"872\":1}}],[\"runasync\",{\"1\":{\"163\":3,\"1369\":3}}],[\"runfinalizer\",{\"1\":{\"196\":2}}],[\"runfinalization\",{\"1\":{\"188\":2}}],[\"running\",{\"1\":{\"136\":2,\"196\":3,\"1112\":4,\"1155\":2,\"1450\":1}}],[\"runnablefuture\",{\"1\":{\"1511\":2}}],[\"runnablefuture<t>\",{\"1\":{\"1113\":2}}],[\"runnable\",{\"1\":{\"77\":2,\"136\":4,\"163\":7,\"195\":3,\"332\":1,\"334\":1,\"336\":1,\"362\":1,\"791\":2,\"818\":1,\"865\":1,\"871\":1,\"1087\":2,\"1088\":1,\"1089\":1,\"1090\":2,\"1107\":1,\"1108\":2,\"1110\":3,\"1113\":4,\"1114\":4,\"1115\":4,\"1369\":1,\"1508\":1,\"1509\":1,\"1511\":4}}],[\"run\",{\"1\":{\"24\":1,\"77\":1,\"188\":1,\"196\":1,\"450\":1,\"475\":1,\"507\":1,\"791\":2,\"816\":1,\"818\":1,\"865\":1,\"871\":2,\"872\":2,\"940\":2,\"1090\":6,\"1093\":1,\"1114\":1,\"1115\":2,\"1347\":1,\"1508\":2,\"1634\":1,\"1791\":3}}],[\"runtimevisibleparameterannotations\",{\"1\":{\"240\":1}}],[\"runtimevisibleannotations\",{\"1\":{\"240\":1}}],[\"runtimeutil\",{\"1\":{\"93\":1}}],[\"runtimeexception及其子类\",{\"1\":{\"345\":1}}],[\"runtimeexception\",{\"1\":{\"62\":3,\"347\":1,\"791\":2,\"797\":2,\"1015\":1,\"1049\":1,\"1055\":1,\"1061\":1,\"1533\":1,\"1713\":5}}],[\"runtime\",{\"1\":{\"14\":2,\"348\":2,\"791\":2,\"1057\":1,\"1632\":1}}],[\"runtimeoptions\",{\"1\":{\"14\":2}}],[\"rn\",{\"1\":{\"184\":3,\"1631\":1}}],[\"rw\",{\"1\":{\"157\":4}}],[\"rarp\",{\"1\":{\"1425\":1}}],[\"rakefile\",{\"1\":{\"1316\":1}}],[\"raft\",{\"0\":{\"1281\":1,\"1620\":1},\"1\":{\"1281\":3,\"1620\":3}}],[\"raw分两次内存分配给两个结构\",{\"1\":{\"896\":1}}],[\"raw\",{\"1\":{\"896\":1,\"913\":1,\"1461\":1}}],[\"rapid\",{\"1\":{\"807\":1}}],[\"ram\",{\"1\":{\"549\":1,\"1434\":1}}],[\"ra\",{\"1\":{\"450\":6}}],[\"rabbithandler放在方法上\",{\"1\":{\"418\":1}}],[\"rabbithandler\",{\"1\":{\"418\":1}}],[\"rabbitlistener\",{\"1\":{\"418\":2}}],[\"rabbitmessagingtemplate\",{\"1\":{\"416\":1}}],[\"rabbitmq提供消息跟踪机制\",{\"1\":{\"412\":1}}],[\"rabbitmq有一个易用的web用户界面\",{\"1\":{\"412\":1}}],[\"rabbitmq\",{\"0\":{\"411\":1,\"417\":1,\"1627\":1},\"1\":{\"404\":1,\"410\":1,\"411\":3,\"412\":1,\"414\":1,\"417\":1,\"419\":1,\"420\":1,\"421\":2,\"422\":1,\"423\":1,\"435\":1,\"1625\":2,\"1628\":5,\"1629\":6}}],[\"rabbittemplate\",{\"1\":{\"416\":1,\"417\":11,\"418\":4,\"420\":2,\"421\":2}}],[\"rabbitautoconfiguration\",{\"1\":{\"416\":1}}],[\"race\",{\"1\":{\"134\":1}}],[\"rank\",{\"1\":{\"1567\":2}}],[\"randomaccessfile\",{\"1\":{\"776\":3,\"777\":1,\"799\":2}}],[\"randomaccessfileappender\",{\"1\":{\"388\":1}}],[\"randomuuid\",{\"1\":{\"418\":1,\"1263\":1}}],[\"random\",{\"1\":{\"154\":1,\"732\":1,\"989\":2,\"1067\":1,\"1087\":1,\"1259\":1,\"1402\":2,\"1514\":1,\"1574\":2,\"1653\":2,\"1713\":2}}],[\"rand\",{\"1\":{\"127\":1,\"129\":2,\"594\":4,\"989\":2,\"1226\":1,\"1653\":2}}],[\"range策略\",{\"1\":{\"495\":1}}],[\"range+\",{\"1\":{\"494\":1}}],[\"rangemap<integer\",{\"1\":{\"70\":1}}],[\"rangemap\",{\"1\":{\"70\":7}}],[\"range\",{\"0\":{\"81\":1,\"495\":1},\"1\":{\"70\":13,\"81\":12,\"494\":1,\"495\":1,\"710\":1,\"728\":1}}],[\"rangeset<integer>\",{\"1\":{\"70\":1}}],[\"rangeset\",{\"1\":{\"70\":8}}],[\"rangequery\",{\"1\":{\"51\":1}}],[\"rocks<\",{\"1\":{\"1870\":1}}],[\"rocketmq模型\",{\"1\":{\"426\":1}}],[\"rocketmq\",{\"0\":{\"426\":1},\"1\":{\"403\":1,\"410\":1,\"427\":1,\"435\":1,\"808\":1,\"1625\":1}}],[\"room\",{\"1\":{\"1859\":2}}],[\"root用户没有system\",{\"1\":{\"1151\":1}}],[\"root即超级源点\",{\"1\":{\"1001\":1}}],[\"root>\",{\"1\":{\"389\":1}}],[\"root\",{\"1\":{\"389\":1,\"541\":12,\"569\":1,\"614\":2,\"675\":1,\"1000\":4,\"1001\":2,\"1148\":1,\"1151\":2,\"1218\":4,\"1366\":1,\"1691\":1,\"1693\":2,\"1871\":2}}],[\"roots包括\",{\"1\":{\"224\":1}}],[\"roots\",{\"1\":{\"224\":3,\"1522\":3}}],[\"roots中的引用\",{\"1\":{\"178\":1}}],[\"roots能直接关联的对象\",{\"1\":{\"176\":1,\"177\":1,\"178\":1,\"1525\":2}}],[\"role\",{\"1\":{\"940\":2,\"1059\":2,\"1642\":1}}],[\"roll\",{\"1\":{\"684\":1,\"744\":1,\"747\":1,\"753\":1,\"1557\":1}}],[\"rollbackonexception\",{\"1\":{\"1055\":2}}],[\"rollbackonly\",{\"1\":{\"1051\":1}}],[\"rollback语句的方式创建嵌套事务并返回\",{\"1\":{\"1049\":1}}],[\"rollbackfor\",{\"1\":{\"1040\":1,\"1061\":2}}],[\"rollback\",{\"1\":{\"511\":2,\"523\":1,\"734\":3,\"751\":2,\"1033\":1,\"1038\":1,\"1047\":1,\"1050\":3,\"1051\":2,\"1055\":1,\"1059\":1,\"1383\":1}}],[\"rollingfile>\",{\"1\":{\"388\":1}}],[\"rollingfileinfo\",{\"1\":{\"388\":1,\"389\":1}}],[\"rollingfileappender\",{\"1\":{\"388\":1}}],[\"robin\",{\"1\":{\"452\":1,\"1470\":1,\"1628\":1}}],[\"router等\",{\"1\":{\"1563\":1}}],[\"routerkey\",{\"1\":{\"417\":2}}],[\"routine\",{\"1\":{\"628\":1}}],[\"routines\",{\"1\":{\"628\":1}}],[\"routingstatementhandler\",{\"1\":{\"544\":1}}],[\"routingkey\",{\"1\":{\"414\":3,\"418\":2,\"421\":3,\"1628\":3}}],[\"routing\",{\"1\":{\"413\":1,\"425\":1,\"1304\":1,\"1628\":2}}],[\"roundrobin策略\",{\"1\":{\"496\":1}}],[\"roundrobin\",{\"0\":{\"496\":1},\"1\":{\"494\":1,\"496\":2}}],[\"round\",{\"1\":{\"129\":3,\"452\":1,\"594\":4,\"1470\":1,\"1628\":1}}],[\"rowbounds\",{\"1\":{\"544\":3}}],[\"rowoffset=true\",{\"1\":{\"128\":2,\"1229\":1}}],[\"rows统计项是表中记录行数\",{\"1\":{\"720\":1}}],[\"rows\",{\"1\":{\"127\":1,\"728\":1,\"1226\":1}}],[\"rowkeyset\",{\"1\":{\"69\":2}}],[\"rowmap\",{\"1\":{\"69\":2}}],[\"row2\",{\"1\":{\"69\":2}}],[\"row1\",{\"1\":{\"69\":2}}],[\"row\",{\"1\":{\"69\":1,\"113\":5,\"118\":1,\"119\":1,\"121\":1,\"124\":2,\"126\":1,\"128\":3,\"636\":1,\"643\":1,\"645\":1,\"684\":1,\"693\":1,\"1227\":3,\"1228\":2,\"1229\":1,\"1556\":1,\"1557\":1,\"1567\":1}}],[\"rlock\",{\"1\":{\"1264\":2}}],[\"rlike\",{\"0\":{\"125\":1},\"1\":{\"125\":4,\"1226\":1}}],[\"rllc\",{\"1\":{\"38\":1}}],[\"rhlc\",{\"1\":{\"38\":1}}],[\"r\",{\"1\":{\"14\":3,\"15\":1,\"157\":3,\"184\":20,\"675\":1,\"697\":1,\"799\":1,\"820\":2,\"842\":1,\"843\":2,\"989\":2,\"1000\":4,\"1068\":2,\"1108\":3,\"1115\":3,\"1125\":1,\"1168\":1,\"1174\":2,\"1191\":1,\"1218\":7,\"1631\":1,\"1652\":4,\"1653\":2,\"1654\":7,\"1657\":4,\"1688\":2,\"1690\":1,\"1692\":2,\"1693\":3,\"1735\":1}}],[\"renice\",{\"1\":{\"1436\":1}}],[\"rename\",{\"1\":{\"117\":1,\"118\":1,\"575\":1,\"1326\":1}}],[\"rerere\",{\"1\":{\"1347\":5}}],[\"rebase运行于变基之前\",{\"1\":{\"1345\":1}}],[\"rebase\",{\"1\":{\"1337\":3,\"1344\":1,\"1345\":1,\"1633\":2}}],[\"rebases\",{\"1\":{\"1326\":1}}],[\"rebalance\",{\"1\":{\"467\":1}}],[\"remotes远程引用等\",{\"1\":{\"1351\":1}}],[\"remotes\",{\"1\":{\"1333\":4,\"1351\":4}}],[\"remote\",{\"0\":{\"1326\":1},\"1\":{\"1326\":9,\"1338\":2,\"1351\":2,\"1623\":1,\"1631\":3,\"1633\":1,\"1791\":1}}],[\"removallistener\",{\"1\":{\"73\":1}}],[\"removetrack\",{\"1\":{\"1857\":1}}],[\"removetail\",{\"1\":{\"1002\":2,\"1651\":2}}],[\"removelast\",{\"1\":{\"1670\":1,\"1672\":1,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1,\"1677\":1}}],[\"removenode\",{\"1\":{\"1002\":3,\"1651\":3}}],[\"remove方法抛出一个nosuchelementexception异常\",{\"1\":{\"987\":1}}],[\"removefrom\",{\"1\":{\"79\":1}}],[\"removed\",{\"1\":{\"73\":1,\"1002\":2}}],[\"remove\",{\"1\":{\"67\":1,\"70\":2,\"154\":1,\"184\":2,\"195\":1,\"196\":1,\"450\":1,\"786\":1,\"791\":2,\"985\":1,\"987\":1,\"988\":2,\"1002\":1,\"1028\":1,\"1113\":1,\"1326\":1,\"1382\":1,\"1651\":1,\"1669\":1,\"1671\":1,\"1694\":2,\"1861\":1}}],[\"removeall\",{\"1\":{\"67\":1}}],[\"reject\",{\"1\":{\"1113\":2,\"1629\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"332\":1,\"870\":3,\"1106\":1,\"1120\":2,\"1511\":2}}],[\"rejectedexecutionexception\",{\"1\":{\"8\":1,\"1109\":1}}],[\"rejected\",{\"1\":{\"8\":3}}],[\"rewrite被那些会替换提交记录的命令调用\",{\"1\":{\"1345\":1}}],[\"rewrite关闭\",{\"1\":{\"961\":1}}],[\"rewrite\",{\"1\":{\"917\":3}}],[\"rewind\",{\"1\":{\"772\":1,\"773\":1}}],[\"revert\",{\"1\":{\"1344\":2}}],[\"reverse\",{\"1\":{\"61\":1,\"996\":1}}],[\"rev\",{\"1\":{\"1341\":1}}],[\"review\",{\"0\":{\"1243\":1}}],[\"revd\",{\"1\":{\"856\":1}}],[\"revoke\",{\"1\":{\"591\":1}}],[\"reuseexecutor\",{\"1\":{\"542\":2}}],[\"reuse\",{\"1\":{\"542\":1,\"1347\":1,\"1410\":1}}],[\"relays\",{\"1\":{\"1860\":1}}],[\"relay\",{\"1\":{\"648\":1,\"1563\":4}}],[\"relection\",{\"1\":{\"545\":1}}],[\"release<\",{\"1\":{\"24\":1}}],[\"release\",{\"0\":{\"7\":1},\"1\":{\"7\":2,\"9\":1,\"159\":1,\"734\":1,\"829\":8,\"831\":1,\"1137\":1,\"1188\":2,\"1264\":1}}],[\"reload\",{\"1\":{\"1631\":1}}],[\"reload4j<\",{\"1\":{\"382\":1}}],[\"reload4j\",{\"1\":{\"382\":2,\"392\":1}}],[\"relocation\",{\"1\":{\"382\":1}}],[\"refb\",{\"1\":{\"1342\":5}}],[\"refa\",{\"1\":{\"1342\":6}}],[\"reflog\",{\"1\":{\"1341\":1,\"1346\":2}}],[\"reflection\",{\"1\":{\"1135\":2}}],[\"reflectutils\",{\"1\":{\"1016\":1}}],[\"reflectorfactory\",{\"1\":{\"541\":1}}],[\"reflectorfactoryelement\",{\"1\":{\"541\":1}}],[\"refs目录下\",{\"1\":{\"1351\":1}}],[\"refs\",{\"1\":{\"1329\":1,\"1338\":2,\"1349\":1,\"1351\":11}}],[\"refc\",{\"1\":{\"1342\":2}}],[\"refcount\",{\"1\":{\"901\":1}}],[\"refcnt\",{\"1\":{\"827\":1,\"850\":2}}],[\"refid=\",{\"1\":{\"531\":2}}],[\"ref=\",{\"1\":{\"389\":2}}],[\"refersto0\",{\"1\":{\"189\":3,\"194\":2}}],[\"referstoimpl\",{\"1\":{\"189\":3,\"194\":1}}],[\"refersto\",{\"1\":{\"189\":2}}],[\"referent\",{\"1\":{\"187\":7,\"189\":1,\"192\":4,\"193\":4,\"194\":2,\"195\":2,\"196\":2}}],[\"referencecounted\",{\"1\":{\"827\":1,\"829\":1}}],[\"references\",{\"1\":{\"599\":4,\"1351\":1}}],[\"reference直接存储对象地址\",{\"1\":{\"216\":1}}],[\"reference存储的是稳定句柄\",{\"1\":{\"216\":1}}],[\"reference存储对象的句柄地址\",{\"1\":{\"216\":1}}],[\"reference列表的下一个元素\",{\"1\":{\"187\":1}}],[\"referencehandler\",{\"0\":{\"188\":1},\"1\":{\"186\":1,\"188\":5,\"195\":1,\"196\":1}}],[\"referencequeue\",{\"0\":{\"184\":1},\"1\":{\"184\":6,\"186\":2,\"187\":1,\"188\":1,\"189\":1,\"196\":3}}],[\"referencequeue<class<\",{\"1\":{\"1097\":1}}],[\"referencequeue<\",{\"1\":{\"184\":1,\"187\":2,\"192\":1,\"193\":1,\"194\":1,\"196\":1}}],[\"referencequeue<t>\",{\"1\":{\"184\":1}}],[\"referencequeue<>\",{\"1\":{\"183\":1,\"195\":1,\"196\":1}}],[\"referencequeue<object>\",{\"1\":{\"183\":1,\"184\":3,\"195\":1,\"196\":2}}],[\"reference<t>\",{\"1\":{\"187\":1,\"192\":1,\"193\":1,\"194\":1,\"196\":1}}],[\"reference<\",{\"1\":{\"183\":1,\"184\":9,\"187\":1,\"188\":2}}],[\"reference\",{\"0\":{\"185\":1},\"1\":{\"183\":13,\"184\":1,\"185\":1,\"187\":4,\"188\":5,\"195\":1,\"196\":2,\"197\":1,\"263\":1,\"827\":1,\"1076\":1,\"1522\":4}}],[\"ref\",{\"1\":{\"188\":6,\"189\":1,\"195\":1,\"389\":2,\"529\":1,\"533\":1,\"710\":2,\"714\":1,\"728\":7,\"1326\":1,\"1351\":5}}],[\"reffromqueue\",{\"1\":{\"183\":2}}],[\"refreshcontext\",{\"1\":{\"1607\":1}}],[\"refreshbeanfactory\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"refresh\",{\"0\":{\"1012\":1},\"1\":{\"73\":1,\"91\":3,\"1012\":1,\"1379\":1}}],[\"refreshafterwrite\",{\"1\":{\"73\":1}}],[\"reacto\",{\"1\":{\"1488\":1}}],[\"reactor\",{\"1\":{\"1488\":13,\"1572\":1}}],[\"reactive\",{\"1\":{\"1264\":1}}],[\"reactiveadapterregistry\",{\"1\":{\"1059\":1}}],[\"reactivetransactionmanager\",{\"1\":{\"1059\":2}}],[\"reached\",{\"1\":{\"923\":1}}],[\"reach\",{\"1\":{\"196\":1}}],[\"reachabilityfence\",{\"1\":{\"189\":1}}],[\"reassign\",{\"1\":{\"472\":1}}],[\"readqueryfromclient函数\",{\"1\":{\"919\":1}}],[\"readcomplete\",{\"1\":{\"873\":2}}],[\"readcheckresult\",{\"1\":{\"450\":1}}],[\"readbuf\",{\"1\":{\"873\":3}}],[\"readbyte\",{\"1\":{\"849\":4}}],[\"readbytes\",{\"1\":{\"777\":1,\"849\":1}}],[\"readpending\",{\"1\":{\"867\":1,\"873\":1}}],[\"readable\",{\"1\":{\"919\":2}}],[\"readablebytes\",{\"1\":{\"850\":1}}],[\"readallbytes\",{\"1\":{\"317\":1}}],[\"readinterestop\",{\"1\":{\"867\":3}}],[\"readint\",{\"1\":{\"849\":3}}],[\"readhandler\",{\"1\":{\"797\":3}}],[\"read事务只在第一次select查询前生成一个共享的readview\",{\"1\":{\"754\":1}}],[\"readview含四个部分\",{\"1\":{\"754\":1}}],[\"readview\",{\"0\":{\"754\":1},\"1\":{\"1557\":11}}],[\"readview三部分\",{\"1\":{\"752\":1}}],[\"readme\",{\"1\":{\"667\":1,\"1316\":1}}],[\"reads\",{\"1\":{\"635\":1}}],[\"readonly\",{\"1\":{\"1040\":1}}],[\"readonlychildren即\",{\"1\":{\"817\":1}}],[\"readonly=\",{\"1\":{\"533\":1}}],[\"readobject\",{\"1\":{\"321\":1,\"849\":1}}],[\"readyops\",{\"1\":{\"873\":6}}],[\"readynodes\",{\"1\":{\"450\":2}}],[\"ready\",{\"1\":{\"450\":1,\"1450\":1}}],[\"readline\",{\"1\":{\"319\":1}}],[\"readlock\",{\"1\":{\"157\":2,\"158\":1,\"1188\":1}}],[\"readerindex\",{\"1\":{\"827\":3}}],[\"reader\",{\"1\":{\"318\":1,\"319\":1,\"518\":1,\"827\":1,\"1067\":2,\"1502\":1}}],[\"read\",{\"0\":{\"788\":1},\"1\":{\"228\":1,\"317\":2,\"318\":2,\"450\":1,\"550\":1,\"552\":1,\"555\":2,\"640\":1,\"729\":2,\"732\":2,\"734\":1,\"737\":4,\"754\":4,\"767\":2,\"771\":2,\"772\":1,\"777\":1,\"782\":2,\"783\":4,\"785\":2,\"787\":1,\"788\":5,\"789\":2,\"791\":2,\"794\":2,\"796\":4,\"797\":3,\"799\":2,\"829\":1,\"831\":1,\"855\":1,\"873\":11,\"1035\":5,\"1038\":1,\"1168\":1,\"1184\":1,\"1192\":1,\"1275\":3,\"1350\":1,\"1461\":1,\"1468\":1,\"1475\":1,\"1478\":6,\"1486\":1,\"1487\":1,\"1488\":2,\"1504\":1,\"1552\":3,\"1557\":3,\"1559\":1,\"1560\":1,\"1612\":4}}],[\"realtime\",{\"1\":{\"1436\":1}}],[\"realtotalmoney\",{\"1\":{\"124\":1}}],[\"real\",{\"1\":{\"1301\":3}}],[\"reallocatememory\",{\"1\":{\"1136\":1}}],[\"reallypoll\",{\"1\":{\"184\":1}}],[\"reentracklock\",{\"1\":{\"156\":1}}],[\"reentrantreadwritelock\",{\"0\":{\"157\":1},\"1\":{\"9\":1,\"157\":7}}],[\"reentrantlock\",{\"0\":{\"156\":1,\"1517\":1},\"1\":{\"2\":1,\"5\":1,\"6\":1,\"9\":2,\"156\":5,\"161\":1,\"331\":1,\"362\":1,\"1114\":1,\"1116\":4,\"1499\":3,\"1517\":2,\"1518\":1}}],[\"reg\",{\"1\":{\"1226\":1}}],[\"regex\",{\"1\":{\"354\":1}}],[\"regexp\",{\"1\":{\"125\":1}}],[\"region\",{\"1\":{\"177\":2,\"1525\":1}}],[\"registry\",{\"1\":{\"92\":1,\"1093\":1}}],[\"registrar\",{\"1\":{\"91\":1,\"1598\":1}}],[\"registermethodstofilter\",{\"1\":{\"1135\":1}}],[\"registersingleton\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"registerservice\",{\"1\":{\"90\":1,\"92\":2}}],[\"registerlisteners\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"registerbeanpostprocessor\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"registerbeanpostprocessors\",{\"1\":{\"91\":1}}],[\"register0\",{\"1\":{\"865\":1}}],[\"registered\",{\"1\":{\"186\":1}}],[\"register\",{\"0\":{\"865\":1},\"1\":{\"14\":1,\"84\":1,\"90\":2,\"196\":2,\"202\":1,\"785\":1,\"786\":1,\"787\":1,\"788\":2,\"789\":1,\"791\":4,\"817\":1,\"863\":2,\"865\":4,\"866\":1,\"873\":2}}],[\"recently\",{\"1\":{\"1574\":2}}],[\"receive整个过程完结以后运行\",{\"1\":{\"1345\":1}}],[\"receive处理来自客户端的推送操作时运行\",{\"1\":{\"1345\":1}}],[\"receivemessage\",{\"1\":{\"418\":1}}],[\"receive\",{\"1\":{\"342\":1,\"445\":1,\"792\":3}}],[\"received\",{\"1\":{\"84\":2}}],[\"reclaim\",{\"1\":{\"1446\":3}}],[\"recipes<\",{\"1\":{\"1179\":1}}],[\"recheck\",{\"1\":{\"1113\":3}}],[\"rechargemoney\",{\"1\":{\"124\":1}}],[\"recvfrom\",{\"1\":{\"1461\":1}}],[\"recv\",{\"1\":{\"856\":1,\"1409\":1}}],[\"rec的undo日志\",{\"1\":{\"750\":1}}],[\"rec两条undo日志\",{\"1\":{\"748\":1}}],[\"rec类型的undo日志\",{\"1\":{\"748\":1}}],[\"rec类型undo日志\",{\"1\":{\"747\":1}}],[\"recalc变量为off时\",{\"1\":{\"721\":1}}],[\"recalc变量控制是否异步自动更新\",{\"1\":{\"720\":1}}],[\"rec\",{\"1\":{\"555\":1,\"564\":3,\"689\":1,\"739\":3,\"746\":1,\"748\":1,\"749\":1}}],[\"recover\",{\"1\":{\"1346\":2}}],[\"recovery\",{\"1\":{\"445\":1}}],[\"recorded\",{\"1\":{\"1347\":1}}],[\"recorder\",{\"1\":{\"238\":1}}],[\"record遍历该槽查找记录\",{\"1\":{\"690\":1}}],[\"record结构\",{\"1\":{\"474\":1}}],[\"recordmetadata\",{\"1\":{\"456\":4}}],[\"records\",{\"0\":{\"689\":1},\"1\":{\"485\":1,\"488\":2,\"688\":1,\"689\":1}}],[\"recordsbuilder\",{\"1\":{\"450\":1}}],[\"recordstats\",{\"1\":{\"73\":1}}],[\"recordaccumulator\",{\"1\":{\"450\":1,\"456\":1,\"459\":1}}],[\"record\",{\"1\":{\"84\":1,\"453\":1,\"474\":1,\"488\":2,\"555\":1,\"689\":2,\"1076\":5,\"1077\":1,\"1738\":1,\"1792\":4}}],[\"recursive\",{\"0\":{\"1336\":1},\"1\":{\"1347\":1}}],[\"recursiveaction\",{\"1\":{\"153\":1}}],[\"recursivetask<integer>\",{\"1\":{\"153\":1}}],[\"recursivetask\",{\"1\":{\"153\":1}}],[\"requeue\",{\"1\":{\"1629\":1}}],[\"requestbody\",{\"1\":{\"1608\":1}}],[\"requested\",{\"1\":{\"1050\":2}}],[\"request消息\",{\"1\":{\"948\":1}}],[\"requestmapping\",{\"1\":{\"457\":1}}],[\"requests\",{\"1\":{\"450\":2,\"462\":4}}],[\"requestid\",{\"1\":{\"95\":2}}],[\"requestoptions\",{\"1\":{\"42\":1,\"43\":1,\"44\":1,\"47\":1,\"48\":1,\"51\":1}}],[\"request\",{\"1\":{\"25\":1,\"42\":3,\"43\":2,\"44\":2,\"47\":3,\"48\":2,\"51\":7,\"445\":1,\"450\":3,\"462\":2,\"1363\":3,\"1426\":1,\"1596\":1,\"1871\":2}}],[\"requestparam\",{\"1\":{\"14\":1,\"15\":1,\"1608\":1}}],[\"require\",{\"1\":{\"1859\":1}}],[\"requires\",{\"1\":{\"1041\":1,\"1044\":1,\"1049\":4,\"1276\":1,\"1611\":1}}],[\"required\",{\"1\":{\"1038\":1,\"1039\":1,\"1040\":1,\"1041\":3,\"1049\":4,\"1276\":1,\"1611\":1}}],[\"requirefieldmatch\",{\"1\":{\"51\":1}}],[\"representational\",{\"1\":{\"1640\":1}}],[\"reportget\",{\"1\":{\"1369\":1}}],[\"reports下线报告中\",{\"1\":{\"948\":1}}],[\"repo\",{\"1\":{\"1347\":2,\"1791\":12,\"1792\":1}}],[\"repository\",{\"1\":{\"1314\":1,\"1594\":1,\"1608\":1,\"1791\":1}}],[\"reponse\",{\"1\":{\"25\":1}}],[\"repair\",{\"1\":{\"734\":1}}],[\"repeat\",{\"1\":{\"633\":3}}],[\"repeatable\",{\"1\":{\"555\":1,\"737\":1,\"754\":1,\"1035\":2,\"1038\":1,\"1275\":1,\"1552\":1,\"1557\":1,\"1612\":2}}],[\"replicate\",{\"1\":{\"948\":1}}],[\"replication配置\",{\"1\":{\"1219\":1}}],[\"replicationfeedmonitors\",{\"1\":{\"979\":1}}],[\"replication\",{\"1\":{\"445\":1,\"446\":1,\"940\":2,\"1154\":1,\"1156\":1}}],[\"replica\",{\"1\":{\"443\":1,\"460\":1,\"467\":1,\"649\":2}}],[\"replicas个副本\",{\"1\":{\"460\":1}}],[\"replicas时\",{\"1\":{\"460\":1}}],[\"replicas\",{\"1\":{\"34\":1,\"42\":1,\"460\":2,\"469\":1}}],[\"reply\",{\"1\":{\"923\":1,\"927\":1}}],[\"replytext\",{\"1\":{\"417\":2,\"421\":3}}],[\"replycode\",{\"1\":{\"417\":2,\"421\":3}}],[\"repl\",{\"1\":{\"228\":1,\"940\":1,\"967\":3}}],[\"replace\",{\"1\":{\"622\":3,\"623\":3,\"779\":1}}],[\"replacestaleentry\",{\"1\":{\"154\":1,\"1514\":2}}],[\"replacefrom\",{\"1\":{\"79\":1}}],[\"reducer\",{\"1\":{\"1226\":1}}],[\"reducetask\",{\"1\":{\"1221\":1}}],[\"reduce\",{\"1\":{\"1068\":1,\"1221\":2}}],[\"redundant行格式\",{\"1\":{\"685\":1}}],[\"redundant\",{\"0\":{\"685\":1},\"1\":{\"683\":1}}],[\"redo文件即redo日志\",{\"1\":{\"739\":1}}],[\"redo日志文件组是有限的\",{\"1\":{\"741\":1}}],[\"redo日志文件组\",{\"1\":{\"739\":1}}],[\"redo日志缓冲区\",{\"1\":{\"739\":1}}],[\"redo日志类型\",{\"1\":{\"739\":1}}],[\"redo日志格式\",{\"0\":{\"739\":1}}],[\"redo\",{\"0\":{\"738\":1,\"1555\":1},\"1\":{\"638\":1,\"639\":3,\"735\":1,\"739\":5,\"1553\":2,\"1555\":3,\"1556\":10}}],[\"redolog\",{\"1\":{\"570\":1}}],[\"red\",{\"1\":{\"33\":1}}],[\"redirect\",{\"1\":{\"15\":3}}],[\"redis等\",{\"1\":{\"1609\":1}}],[\"redistemplate\",{\"1\":{\"1368\":2}}],[\"redis没有数据\",{\"1\":{\"1261\":1}}],[\"redis基于c语言支持对字节执行逻辑与\",{\"1\":{\"977\":1}}],[\"redis逆序存储位数组使得\",{\"1\":{\"975\":1}}],[\"redis提供了setbit\",{\"1\":{\"972\":1}}],[\"redis提供rdb持久化功能\",{\"1\":{\"910\":1}}],[\"redissonclient\",{\"1\":{\"1264\":4}}],[\"redisson\",{\"0\":{\"1264\":1},\"1\":{\"1264\":4,\"1365\":1}}],[\"redissortobject\",{\"1\":{\"970\":1}}],[\"redisserver\",{\"1\":{\"928\":3,\"979\":1}}],[\"redisserver中的clients指针指向了保存所有客户端状态的redisclient结构数组\",{\"1\":{\"922\":1}}],[\"redisserver结构的\",{\"1\":{\"912\":1}}],[\"redisserver结构的db数组中\",{\"1\":{\"906\":1}}],[\"redisserializer<object>\",{\"1\":{\"24\":1}}],[\"redis在服务器内嵌了一个修改过的lua环境\",{\"1\":{\"963\":1}}],[\"redis在入队错误\",{\"1\":{\"961\":1}}],[\"redis在从服务器少于min\",{\"1\":{\"937\":1}}],[\"redis不支持事务回滚\",{\"1\":{\"961\":1}}],[\"redis事务队列中的命令要么全部执行\",{\"1\":{\"961\":1}}],[\"redis通过multi\",{\"1\":{\"958\":1}}],[\"redis集群中的节点分主节点和从节点\",{\"1\":{\"948\":1}}],[\"redis集群的重新分片可以将任意数量的槽修改分配节点\",{\"1\":{\"946\":1}}],[\"redis集群通过分片的方式来保存数据库中的键值对\",{\"1\":{\"946\":1}}],[\"redis从2\",{\"1\":{\"935\":1}}],[\"redis是一对多的服务器程序\",{\"1\":{\"922\":1}}],[\"redis是一个键值对k\",{\"1\":{\"907\":1}}],[\"redis服务器根据配置决定是否开启集群模式\",{\"1\":{\"945\":1}}],[\"redis服务器是基于reactor模式的事件驱动程序\",{\"1\":{\"918\":1}}],[\"redis服务器进程本质上是一个事件循环\",{\"1\":{\"916\":1}}],[\"redis服务器将所有数据库都保存在服务器状态redis\",{\"1\":{\"906\":1}}],[\"redis还提供aof\",{\"1\":{\"915\":1}}],[\"redis的实现结合了查表和swar算法\",{\"1\":{\"976\":1}}],[\"redis的事务仅仅是简单的执行一组命令\",{\"1\":{\"961\":1}}],[\"redis的事务总是具有原子性\",{\"1\":{\"961\":1}}],[\"redis的发布订阅功能由publish\",{\"1\":{\"953\":1}}],[\"redis的时间事件分定时事件和周期性事件两类\",{\"1\":{\"920\":1}}],[\"redis的回收策略\",{\"1\":{\"908\":1}}],[\"redis的json序列化\",{\"1\":{\"24\":1}}],[\"rediscache\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"redisclient数组\",{\"1\":{\"929\":1}}],[\"redisclient结构中的db属性指向当前所使用的数据库\",{\"1\":{\"906\":1}}],[\"rediscommand类型\",{\"1\":{\"923\":1}}],[\"rediscode\",{\"1\":{\"14\":4}}],[\"redisdb结构的dict字典保存了数据库中的所有键值对\",{\"1\":{\"907\":1}}],[\"redisdb结构表示\",{\"1\":{\"907\":1}}],[\"redisdb结构\",{\"1\":{\"906\":1}}],[\"redisobject中的lru属性记录对象最后一次被访问的时间\",{\"1\":{\"901\":1}}],[\"redisoperationssessionrepository\",{\"1\":{\"25\":2}}],[\"redis自动对0\",{\"1\":{\"901\":1}}],[\"redis部分命令适用于任何类型键\",{\"1\":{\"901\":1}}],[\"redis可以根据不同使用场景切换使用不同实现方式\",{\"1\":{\"895\":1}}],[\"redis中可以使用slaveof\",{\"1\":{\"933\":1}}],[\"redis中键总是一个字符串对象\",{\"1\":{\"895\":1}}],[\"redis中跳表的作用有两个\",{\"1\":{\"885\":1}}],[\"redis使用二进制安全的sds字符串保存位数组\",{\"1\":{\"973\":1}}],[\"redis使用单线程方式\",{\"1\":{\"961\":1}}],[\"redis使用子进程执行重写\",{\"1\":{\"917\":1}}],[\"redis使用引用计数机制实现内存自动回收\",{\"1\":{\"901\":1}}],[\"redis使用对象来表示数据库中的键和值\",{\"1\":{\"895\":1}}],[\"redis使用murmurhash2算法\",{\"1\":{\"883\":1}}],[\"redis使用len标记字符串长度\",{\"1\":{\"879\":1}}],[\"redis会为sds分配额外空间\",{\"1\":{\"879\":1}}],[\"redis仅使用c字符串作为字面量\",{\"1\":{\"878\":1}}],[\"redishttpsessionconfiguration\",{\"1\":{\"25\":2}}],[\"redis<\",{\"1\":{\"24\":2}}],[\"redis\",{\"0\":{\"876\":1,\"904\":1,\"932\":1,\"952\":1,\"1187\":1,\"1232\":1,\"1263\":1,\"1569\":1},\"1\":{\"14\":3,\"24\":3,\"25\":3,\"27\":1,\"31\":1,\"846\":2,\"913\":2,\"914\":1,\"946\":5,\"970\":1,\"979\":1,\"1162\":3,\"1170\":1,\"1187\":2,\"1207\":1,\"1219\":1,\"1233\":3,\"1234\":2,\"1235\":1,\"1236\":2,\"1254\":1,\"1258\":1,\"1262\":1,\"1263\":3,\"1264\":2,\"1269\":1,\"1281\":1,\"1290\":4,\"1365\":1,\"1368\":5,\"1372\":4,\"1374\":2,\"1375\":1,\"1488\":1,\"1571\":3,\"1572\":3,\"1573\":2,\"1577\":1,\"1581\":1,\"1582\":1,\"1588\":2,\"1589\":2,\"1590\":3,\"1613\":1,\"1620\":1,\"1622\":1,\"1643\":1,\"1658\":1},\"2\":{\"903\":1,\"931\":1,\"951\":1,\"981\":1}}],[\"rehash期间的添加一律保存至ht\",{\"1\":{\"883\":1}}],[\"rehash期间的查找需要先后在ht\",{\"1\":{\"883\":1}}],[\"rehash开始后\",{\"1\":{\"883\":1}}],[\"rehashidx\",{\"1\":{\"882\":1}}],[\"rehash\",{\"1\":{\"21\":1,\"154\":1,\"883\":1,\"1514\":1}}],[\"reservation\",{\"1\":{\"1723\":1}}],[\"reset\",{\"0\":{\"1324\":1},\"1\":{\"643\":1,\"734\":1,\"773\":2,\"828\":1,\"1324\":2,\"1344\":11,\"1347\":1}}],[\"reset决定消费策略\",{\"1\":{\"493\":1}}],[\"resume0\",{\"1\":{\"1098\":1}}],[\"resume\",{\"1\":{\"1049\":1,\"1098\":1}}],[\"results字符集\",{\"1\":{\"674\":1}}],[\"resultset\",{\"1\":{\"540\":1}}],[\"resultsettype=\",{\"1\":{\"530\":1}}],[\"resultsethandler\",{\"1\":{\"523\":1,\"540\":1,\"544\":2}}],[\"resulthandler\",{\"1\":{\"544\":6}}],[\"resultmap>\",{\"1\":{\"532\":1}}],[\"resultmap=departmentresultmap\",{\"1\":{\"530\":1}}],[\"resultmap=\",{\"1\":{\"530\":1,\"532\":1}}],[\"resultmap\",{\"0\":{\"532\":1},\"1\":{\"529\":1,\"532\":2}}],[\"resulttype=\",{\"1\":{\"506\":1,\"530\":1,\"531\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1}}],[\"result\",{\"1\":{\"60\":1,\"77\":3,\"153\":3,\"154\":2,\"450\":3,\"532\":1,\"631\":6,\"675\":1,\"728\":1,\"796\":1,\"797\":3,\"1016\":2,\"1055\":3,\"1113\":2,\"1125\":2,\"1711\":2}}],[\"resolution\",{\"1\":{\"1347\":1,\"1527\":1}}],[\"resolvebeforeinstantiation\",{\"1\":{\"1023\":1}}],[\"resourcemanager|nodemanager|proxyserver\",{\"1\":{\"1222\":1}}],[\"resourcemanager\",{\"1\":{\"1222\":2}}],[\"resources\",{\"1\":{\"507\":1,\"541\":4,\"545\":1,\"1045\":2,\"1383\":2,\"1533\":1}}],[\"resource=\",{\"1\":{\"506\":1,\"518\":1,\"528\":1}}],[\"resource\",{\"1\":{\"15\":1,\"317\":1,\"318\":1,\"346\":1,\"457\":1,\"507\":3,\"514\":1,\"518\":1,\"541\":14,\"1008\":1,\"1214\":1,\"1287\":1,\"1595\":1,\"1640\":1}}],[\"res\",{\"1\":{\"993\":8,\"1363\":2,\"1369\":2,\"1651\":3,\"1669\":1,\"1670\":1,\"1672\":1,\"1677\":1}}],[\"resizable\",{\"1\":{\"788\":1}}],[\"res1\",{\"1\":{\"596\":2}}],[\"restful\",{\"0\":{\"1640\":1}}],[\"rest风格的控制器\",{\"1\":{\"1608\":1}}],[\"restcontroller\",{\"1\":{\"1608\":1}}],[\"restclient\",{\"1\":{\"40\":1}}],[\"restclient客户端\",{\"1\":{\"38\":1}}],[\"restore\",{\"0\":{\"1320\":1},\"1\":{\"1320\":3}}],[\"restart=always\",{\"1\":{\"1634\":1}}],[\"restart\",{\"1\":{\"1165\":1,\"1631\":1,\"1634\":1}}],[\"restrict\",{\"1\":{\"599\":1}}],[\"resthighlevelclient\",{\"1\":{\"40\":2}}],[\"rest\",{\"1\":{\"38\":2,\"39\":2,\"434\":1,\"435\":1,\"1298\":2}}],[\"rest又分为\",{\"1\":{\"38\":1}}],[\"respvo\",{\"1\":{\"15\":2}}],[\"response\",{\"1\":{\"15\":6,\"48\":2,\"51\":2,\"846\":4}}],[\"responsebody\",{\"1\":{\"14\":1,\"1608\":1}}],[\"reids\",{\"1\":{\"14\":1}}],[\"ret++\",{\"1\":{\"1665\":1,\"1666\":1}}],[\"ret\",{\"1\":{\"1665\":2,\"1666\":2}}],[\"retryntimes\",{\"1\":{\"1180\":1}}],[\"retrycount\",{\"1\":{\"1180\":1}}],[\"retrycount=5\",{\"1\":{\"1180\":1}}],[\"retry\",{\"1\":{\"1114\":4,\"1115\":1,\"1116\":1}}],[\"retries\",{\"1\":{\"6\":1,\"460\":1}}],[\"retval\",{\"1\":{\"1059\":5}}],[\"retain\",{\"1\":{\"829\":1,\"831\":2,\"850\":1}}],[\"retainfrom\",{\"1\":{\"79\":1}}],[\"retentionpolicy\",{\"1\":{\"348\":4,\"1057\":1}}],[\"retention\",{\"1\":{\"348\":2,\"445\":1,\"467\":1,\"477\":1,\"1057\":1}}],[\"returnobject\",{\"1\":{\"523\":2}}],[\"returnedmessage\",{\"1\":{\"421\":1}}],[\"returncallback\",{\"0\":{\"421\":1},\"1\":{\"421\":2,\"1374\":1}}],[\"returns=true\",{\"1\":{\"421\":1}}],[\"returns\",{\"1\":{\"417\":1,\"635\":1}}],[\"return\",{\"1\":{\"6\":2,\"7\":2,\"9\":13,\"14\":6,\"15\":4,\"24\":2,\"40\":1,\"61\":1,\"73\":1,\"77\":3,\"153\":2,\"154\":2,\"184\":5,\"188\":1,\"189\":5,\"192\":1,\"194\":2,\"195\":5,\"196\":4,\"290\":1,\"362\":2,\"383\":2,\"417\":3,\"453\":1,\"457\":1,\"515\":3,\"523\":1,\"541\":1,\"542\":2,\"543\":3,\"544\":2,\"635\":1,\"779\":2,\"797\":1,\"822\":2,\"842\":1,\"843\":1,\"864\":1,\"865\":1,\"867\":1,\"873\":2,\"989\":2,\"991\":2,\"993\":4,\"994\":2,\"995\":2,\"996\":1,\"998\":6,\"1000\":1,\"1002\":3,\"1008\":3,\"1009\":5,\"1015\":2,\"1016\":1,\"1028\":1,\"1039\":1,\"1049\":3,\"1050\":2,\"1054\":3,\"1055\":2,\"1058\":4,\"1059\":6,\"1092\":3,\"1095\":5,\"1108\":1,\"1112\":3,\"1113\":3,\"1114\":3,\"1115\":3,\"1116\":4,\"1120\":6,\"1135\":4,\"1137\":3,\"1180\":1,\"1261\":1,\"1263\":4,\"1264\":2,\"1369\":3,\"1382\":1,\"1533\":3,\"1645\":3,\"1651\":3,\"1653\":2,\"1654\":2,\"1662\":1,\"1663\":1,\"1664\":1,\"1665\":1,\"1666\":2,\"1669\":3,\"1671\":1,\"1672\":1,\"1673\":1,\"1674\":3,\"1675\":4,\"1676\":2,\"1677\":1,\"1858\":2,\"1871\":1}}],[\"接下来要向网卡写数据\",{\"1\":{\"799\":1}}],[\"接受\",{\"1\":{\"1125\":1,\"1281\":1,\"1620\":1}}],[\"接受新任务\",{\"1\":{\"1112\":1}}],[\"接受连接\",{\"1\":{\"873\":1}}],[\"接受连接后注册到\",{\"1\":{\"788\":1}}],[\"接受语句的\",{\"1\":{\"509\":1}}],[\"接入请求到业务系统的负载均衡等\",{\"1\":{\"1300\":1}}],[\"接入slf4j\",{\"1\":{\"382\":1}}],[\"接入门面\",{\"1\":{\"379\":1}}],[\"接入\",{\"0\":{\"379\":1,\"380\":1}}],[\"接着就去参观布达拉宫了\",{\"1\":{\"1847\":1}}],[\"接着就是从\",{\"1\":{\"543\":1}}],[\"接着是无尽的公路\",{\"1\":{\"1842\":1}}],[\"接着去二级缓存获取\",{\"1\":{\"1599\":1}}],[\"接着调用\",{\"1\":{\"1598\":1}}],[\"接着开辟一个新数组\",{\"1\":{\"1493\":1}}],[\"接着开始执行对象的构造方法\",{\"1\":{\"214\":1}}],[\"接着再把整个描述符集合拷贝回用户态\",{\"1\":{\"1487\":1}}],[\"接着再把每个段划分为多个页\",{\"1\":{\"1443\":1}}],[\"接着在线程里和客户端进行通信\",{\"1\":{\"1487\":1}}],[\"接着发送\",{\"1\":{\"1402\":1}}],[\"接着网卡向\",{\"1\":{\"1395\":1}}],[\"接着用中文过滤一遍\",{\"1\":{\"1362\":1}}],[\"接着将当前分支指向目标\",{\"1\":{\"1337\":1}}],[\"接着b向a返回一条pong消息\",{\"1\":{\"945\":1}}],[\"接着依次进入方法\",{\"1\":{\"383\":1}}],[\"接着介绍一下几种常见的\",{\"1\":{\"376\":1}}],[\"接着进入\",{\"1\":{\"139\":1}}],[\"接收端的数据流的一个字节\",{\"1\":{\"1418\":1}}],[\"接收端绑定该组播ip\",{\"1\":{\"342\":1}}],[\"接收窗口\",{\"1\":{\"1412\":1}}],[\"接收缓冲区\",{\"1\":{\"1395\":1}}],[\"接收来自客户端的请求\",{\"1\":{\"1296\":1}}],[\"接收者收到消息后更新对应的节点结构\",{\"1\":{\"949\":1}}],[\"接收者根据收到的信息\",{\"1\":{\"949\":1}}],[\"接收者对象\",{\"1\":{\"342\":1}}],[\"接收服务器信息\",{\"1\":{\"940\":1}}],[\"接收的字节数据\",{\"1\":{\"935\":1}}],[\"接收命令回复\",{\"1\":{\"926\":1,\"939\":1}}],[\"接收i\",{\"1\":{\"919\":1}}],[\"接收方通过解析包头就可以知道消息的边界了\",{\"1\":{\"1417\":1}}],[\"接收方的ip层无法组装成一个完整的tcp报文\",{\"1\":{\"1416\":1}}],[\"接收方不通告小窗口\",{\"1\":{\"1412\":1}}],[\"接收方在窗口小于\",{\"1\":{\"1412\":1}}],[\"接收方\",{\"1\":{\"839\":2,\"1411\":1,\"1412\":1}}],[\"接收\",{\"1\":{\"839\":2,\"1395\":1,\"1420\":1,\"1623\":2}}],[\"接收结果\",{\"1\":{\"822\":1}}],[\"接收客户端发送的数据\",{\"1\":{\"782\":1,\"783\":1}}],[\"接收消息\",{\"1\":{\"446\":1}}],[\"接收消息的方法\",{\"1\":{\"418\":1}}],[\"接收套接字的缓冲区大小\",{\"1\":{\"445\":1}}],[\"接收失败消息\",{\"1\":{\"420\":1}}],[\"接收失败\",{\"1\":{\"420\":1}}],[\"接收成功消息\",{\"1\":{\"420\":1}}],[\"接收成功\",{\"1\":{\"420\":1}}],[\"接收到只能表示\",{\"1\":{\"420\":1}}],[\"接收到才会调用\",{\"1\":{\"420\":1}}],[\"接收到就会执行\",{\"1\":{\"420\":1}}],[\"接收到消息\",{\"1\":{\"418\":1}}],[\"接收到响应后\",{\"1\":{\"101\":1}}],[\"接收到请求后\",{\"1\":{\"101\":1}}],[\"接收前端发来的发短信请求\",{\"1\":{\"14\":1}}],[\"接口类的\",{\"1\":{\"1532\":1}}],[\"接口服务就被\",{\"1\":{\"1298\":1}}],[\"接口服务\",{\"1\":{\"1298\":1}}],[\"接口限流\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"接口层进行校验\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"接口用来记录事务的状态\",{\"1\":{\"1044\":1}}],[\"接口则提供了一些方法来获取事务相应的状态\",{\"1\":{\"1042\":1}}],[\"接口可以被看作是事务上层的管理者\",{\"1\":{\"1042\":1}}],[\"接口可以手动注册组件\",{\"1\":{\"1026\":1}}],[\"接口可以一次性导入多个组件\",{\"1\":{\"1026\":1}}],[\"接口列表\",{\"1\":{\"1015\":1}}],[\"接口方法\",{\"1\":{\"1012\":1,\"1021\":1}}],[\"接口方法调用等\",{\"1\":{\"241\":1}}],[\"接口定义了三个方法\",{\"1\":{\"1010\":1}}],[\"接口定义了\",{\"1\":{\"1008\":1,\"1108\":1}}],[\"接口定义了一系列缓存操作\",{\"1\":{\"73\":1}}],[\"接口的索引集合\",{\"1\":{\"1526\":1}}],[\"接口的任意方法\",{\"1\":{\"543\":1}}],[\"接口的<clinit>\",{\"1\":{\"253\":1}}],[\"接口地绑定关系\",{\"1\":{\"541\":1}}],[\"接口对象\",{\"1\":{\"541\":2}}],[\"接口来创建插件\",{\"1\":{\"523\":1}}],[\"接口来创建自定义的服务\",{\"1\":{\"78\":1}}],[\"接口和\",{\"1\":{\"503\":1}}],[\"接口设计不好\",{\"1\":{\"376\":1}}],[\"接口中被其它的方法访问\",{\"1\":{\"292\":1}}],[\"接口中的方法默认都是\",{\"1\":{\"292\":1}}],[\"接口中的变量默认都是\",{\"1\":{\"292\":1}}],[\"接口等\",{\"1\":{\"258\":1}}],[\"接口等的符号引用\",{\"1\":{\"211\":1}}],[\"接口索引表示当前类实现的接口在常量池中的索引\",{\"1\":{\"240\":1}}],[\"接口默认是使用串行的方式\",{\"1\":{\"153\":1}}],[\"接口使用起来比\",{\"1\":{\"136\":1}}],[\"接口创建线程\",{\"1\":{\"136\":1}}],[\"接口开始\",{\"1\":{\"101\":1}}],[\"接口实现\",{\"1\":{\"827\":1,\"1508\":2}}],[\"接口实现类\",{\"1\":{\"8\":1}}],[\"接口实际执行时的实现类\",{\"1\":{\"99\":1}}],[\"接口\",{\"0\":{\"292\":1},\"1\":{\"77\":1,\"163\":1,\"211\":1,\"240\":1,\"252\":1,\"253\":1,\"298\":1,\"348\":1,\"379\":1,\"521\":1,\"541\":1,\"829\":1,\"983\":1,\"1009\":1,\"1010\":1,\"1011\":1,\"1015\":1,\"1059\":1,\"1379\":1,\"1381\":1,\"1395\":1,\"1495\":1,\"1527\":1,\"1598\":1,\"1636\":1}}],[\"接口提供了一种异步获取任务执行结果的机制\",{\"1\":{\"77\":1}}],[\"接口防刷\",{\"1\":{\"14\":1}}],[\"对齐问题\",{\"1\":{\"1868\":1}}],[\"对齐填充\",{\"1\":{\"215\":1,\"1074\":1,\"1521\":1}}],[\"对视频进行编码\",{\"0\":{\"1868\":1}}],[\"对每个候选对进行发送检查和接受检查\",{\"1\":{\"1860\":1}}],[\"对每个文件建立\",{\"1\":{\"1658\":1}}],[\"对面的是6个来自内蒙古的大四学生\",{\"1\":{\"1848\":1}}],[\"对人生的感悟是\",{\"1\":{\"1786\":1}}],[\"对各种事情的意见分歧\",{\"1\":{\"1759\":1}}],[\"对各个位置磁道响应频率比较平均\",{\"1\":{\"1472\":1}}],[\"对ota来说\",{\"1\":{\"1737\":1}}],[\"对obj对象调用目标方法\",{\"1\":{\"311\":1}}],[\"对乘客来说购买的是飞机上的一个座位\",{\"1\":{\"1728\":1}}],[\"对接行业里的各级代理商\",{\"1\":{\"1727\":1}}],[\"对文件内容进行自由编辑\",{\"1\":{\"1689\":1}}],[\"对值相同的树枝不遍历\",{\"1\":{\"1675\":1}}],[\"对系统继续加大请求压力\",{\"1\":{\"1639\":1}}],[\"对被测试的系统继续加大请求压力\",{\"1\":{\"1639\":1}}],[\"对窗口内请求数计数\",{\"1\":{\"1637\":1}}],[\"对一些服务和页面进行有策略的降级\",{\"1\":{\"1636\":1}}],[\"对一个真实节点做多个副本\",{\"1\":{\"1489\":1}}],[\"对一个已修改文件的当前版本做了标记\",{\"1\":{\"1310\":1}}],[\"对一个\",{\"1\":{\"143\":1}}],[\"对一个锁的解锁\",{\"1\":{\"143\":1}}],[\"对进程进行封装隔离\",{\"1\":{\"1634\":1}}],[\"对现有分支不会以任何方式被更改\",{\"1\":{\"1633\":1}}],[\"对编译\",{\"1\":{\"1632\":2}}],[\"对目标进行压测\",{\"1\":{\"1631\":1}}],[\"对目标对象每个方法的增强都手动完成\",{\"1\":{\"1532\":1}}],[\"对aof文件重写\",{\"1\":{\"1577\":1}}],[\"对满足查询条件的行加上行级写锁\",{\"1\":{\"1562\":1}}],[\"对索引记录的间隙上锁\",{\"1\":{\"1561\":1}}],[\"对索引中包含的字段先做判断\",{\"1\":{\"1548\":1}}],[\"对生产环境的数据库建立单独的账号\",{\"1\":{\"1539\":1}}],[\"对类变量赋值\",{\"1\":{\"1527\":1}}],[\"对类自身以外的各类信息进行匹配性校验\",{\"1\":{\"250\":1}}],[\"对cpu资源敏感\",{\"1\":{\"1525\":1}}],[\"对事件反应\",{\"1\":{\"1488\":1}}],[\"对事件的处理都是同步\",{\"1\":{\"921\":1}}],[\"对wcount的互斥\",{\"1\":{\"1467\":1}}],[\"对rcount的互斥\",{\"1\":{\"1467\":1}}],[\"对端是无法感知的\",{\"1\":{\"1420\":1}}],[\"对持有者的相关信息\",{\"1\":{\"1403\":1}}],[\"对这份文件的数字签名\",{\"1\":{\"1403\":1}}],[\"对这个\",{\"1\":{\"1058\":1}}],[\"对之前的数据做个摘要并用会话密钥加密\",{\"1\":{\"1402\":1}}],[\"对称加密算法\",{\"1\":{\"1401\":1}}],[\"对购物车数据进行缓存\",{\"1\":{\"1365\":1}}],[\"对项目的某个版本\",{\"1\":{\"1310\":1}}],[\"对所有的异常情况进行捕获\",{\"1\":{\"1539\":1}}],[\"对所有的调用者透明\",{\"1\":{\"1298\":1}}],[\"对所有的表进行锁定\",{\"1\":{\"550\":1}}],[\"对整个库加只读锁\",{\"1\":{\"1559\":1}}],[\"对整个类的缓存进行配置\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"对整个单链表查找记录性能低\",{\"1\":{\"690\":1}}],[\"对内存管理要求较高\",{\"1\":{\"1459\":1}}],[\"对内存是一种浪费\",{\"1\":{\"1253\":1}}],[\"对内存压力过大\",{\"1\":{\"19\":1}}],[\"对话整理出来的方案\",{\"1\":{\"1238\":1}}],[\"对大数据的发展做出了卓越的贡献\",{\"1\":{\"1213\":1}}],[\"对客户端提供的端口号\",{\"1\":{\"1164\":1}}],[\"对某个\",{\"1\":{\"1076\":1}}],[\"对同一字段的多次读取结果都是一致的\",{\"1\":{\"1612\":1}}],[\"对同一字段的多次读取结果都一致\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1}}],[\"对同一个对象做修改\",{\"1\":{\"302\":1}}],[\"对已经执行的操作进行回滚\",{\"1\":{\"1034\":1}}],[\"对已有的表添加外键\",{\"1\":{\"599\":1}}],[\"对当前要创建的\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"对感兴趣的\",{\"1\":{\"1012\":1}}],[\"对位数组空间进行扩展\",{\"1\":{\"975\":1}}],[\"对数组进行基于快排的数字值排序\",{\"1\":{\"970\":1}}],[\"对数据表行的拆分\",{\"1\":{\"1564\":1}}],[\"对数据表列的拆分\",{\"1\":{\"1564\":1}}],[\"对数据的内容进行深入分析\",{\"1\":{\"1211\":1}}],[\"对数据库做修改时删除缓存\",{\"1\":{\"1368\":1}}],[\"对数据库造成了巨大的压力\",{\"1\":{\"1257\":1,\"1258\":1,\"1580\":1,\"1581\":1}}],[\"对数据库的修改就是永久的\",{\"1\":{\"1032\":1}}],[\"对数据库进行了至少10000次修改\",{\"1\":{\"912\":1}}],[\"对数据库进行了至少10次修改\",{\"1\":{\"912\":1}}],[\"对数据库进行了至少1次修改\",{\"1\":{\"912\":1}}],[\"对数据进行修改的sql都会记录在日志文件中\",{\"1\":{\"643\":1}}],[\"对数据进行有组织的存储\",{\"1\":{\"569\":1}}],[\"对字符串可以使用前缀索引\",{\"1\":{\"1548\":1}}],[\"对字符串值的键进行排序\",{\"1\":{\"969\":1}}],[\"对字符编码\",{\"1\":{\"1503\":1}}],[\"对字节解码\",{\"1\":{\"1503\":1}}],[\"对字节码描述信息进行语义分析\",{\"1\":{\"250\":1}}],[\"对lua环境执行垃圾回收操作\",{\"1\":{\"965\":1}}],[\"对lua环境的全局环境进行保护\",{\"1\":{\"963\":1}}],[\"对其中最长时间没有ping过的节点发送ping消息\",{\"1\":{\"949\":1}}],[\"对其查询做了限制\",{\"1\":{\"38\":1}}],[\"对集群进行定期同步和连接测试\",{\"1\":{\"920\":1}}],[\"对套接字操作的抽象\",{\"1\":{\"918\":1}}],[\"对sds修改需要扩展空间时\",{\"1\":{\"879\":1}}],[\"对send\",{\"1\":{\"456\":1}}],[\"对原始\",{\"1\":{\"829\":1}}],[\"对自己感兴趣的事件进行处理\",{\"1\":{\"814\":1}}],[\"对记录的删改操作对应的undo日志里有old\",{\"1\":{\"753\":1}}],[\"对记录加锁的本质就是在内存中创建一个锁结构与之关联\",{\"1\":{\"564\":1}}],[\"对不同表又按存储的日志类型分insert\",{\"1\":{\"749\":1}}],[\"对处在old区域的页面进行第一次访问\",{\"1\":{\"732\":1}}],[\"对处理器资源非常敏感\",{\"1\":{\"176\":1}}],[\"对null值的处理由innodb\",{\"1\":{\"722\":1}}],[\"对前后都模糊匹配也会失效\",{\"1\":{\"703\":1}}],[\"对参数进行映射\",{\"1\":{\"544\":1}}],[\"对消息进行分类以及权限管理\",{\"1\":{\"408\":1}}],[\"对照这张图\",{\"1\":{\"382\":1}}],[\"对比虚拟机\",{\"1\":{\"1634\":1}}],[\"对比各种执行方案的代价\",{\"1\":{\"717\":1}}],[\"对比找出成本最低的方案\",{\"1\":{\"717\":1}}],[\"对比\",{\"0\":{\"365\":1,\"435\":1,\"1187\":1,\"1406\":1,\"1512\":1,\"1543\":1,\"1546\":1},\"1\":{\"1479\":1}}],[\"对外的方法\",{\"1\":{\"1361\":1}}],[\"对外开放数据和能力\",{\"1\":{\"1303\":1}}],[\"对外提供服务的入口地址\",{\"1\":{\"1301\":1}}],[\"对外提供单例接口\",{\"1\":{\"1135\":1}}],[\"对外提供的服务接口\",{\"1\":{\"89\":1}}],[\"对外是一个虚拟视图\",{\"1\":{\"833\":1}}],[\"对外不能创建对象\",{\"1\":{\"352\":1}}],[\"对业务功能进行代理\",{\"1\":{\"349\":1}}],[\"对注解类的注解\",{\"1\":{\"348\":1}}],[\"对java中类\",{\"1\":{\"348\":1}}],[\"对启动速度和运行效率要求较高的应用程序\",{\"1\":{\"273\":1}}],[\"对热点代码进行适当的优化\",{\"1\":{\"242\":1}}],[\"对栈中的元素进行运算等\",{\"1\":{\"241\":1}}],[\"对移除的引用设置自循环\",{\"1\":{\"184\":1}}],[\"对于移动端\",{\"1\":{\"1808\":1}}],[\"对于航司\",{\"1\":{\"1722\":1}}],[\"对于航司来说\",{\"1\":{\"1722\":1}}],[\"对于不能使用预编译传参时\",{\"1\":{\"1539\":1}}],[\"对于不支持行锁的\",{\"1\":{\"552\":1}}],[\"对于写操作\",{\"1\":{\"1498\":1}}],[\"对于读操作\",{\"1\":{\"1498\":1}}],[\"对于读写事务\",{\"1\":{\"744\":1}}],[\"对于大文件\",{\"1\":{\"1476\":1}}],[\"对于异常情况下的工作模式\",{\"1\":{\"1462\":1}}],[\"对于那些没有被经常使用到的内存\",{\"1\":{\"1443\":1}}],[\"对于udp\",{\"1\":{\"1417\":1}}],[\"对于update\",{\"1\":{\"750\":1}}],[\"对于重复性的\",{\"1\":{\"1400\":1}}],[\"对于下面这个分支结构\",{\"1\":{\"1335\":1}}],[\"对于具体的后端业务应用或者是服务和业务有一定关联性的策略网关\",{\"1\":{\"1300\":1}}],[\"对于单核cpu\",{\"1\":{\"1468\":1}}],[\"对于单体应用\",{\"1\":{\"1261\":1}}],[\"对于单次垃圾收集造成的暂停时间可能会略高于parnew收集器\",{\"1\":{\"175\":1}}],[\"对于一台机器想要达到\",{\"1\":{\"1487\":1}}],[\"对于一些不受\",{\"1\":{\"1136\":1}}],[\"对于一个分布式系统\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"对于一个只有聚簇索引的表\",{\"1\":{\"693\":1}}],[\"对于一个row\",{\"1\":{\"619\":1}}],[\"对于涉及子树的问题\",{\"1\":{\"999\":1}}],[\"对于步骤3获得的每个键名\",{\"1\":{\"946\":1}}],[\"对于每个监视的主服务器\",{\"1\":{\"939\":1}}],[\"对于每个客户端的\",{\"1\":{\"763\":1}}],[\"对于超过redis\",{\"1\":{\"917\":1}}],[\"对于长度$>20byte$的串\",{\"1\":{\"913\":1}}],[\"对于长度$<=20byte$的串\",{\"1\":{\"913\":1}}],[\"对于embstr\",{\"1\":{\"896\":1}}],[\"对于int\",{\"1\":{\"896\":1}}],[\"对于insert\",{\"1\":{\"750\":1}}],[\"对于\",{\"1\":{\"829\":1,\"967\":1,\"1395\":1,\"1443\":1,\"1444\":2,\"1446\":1,\"1461\":2,\"1465\":1,\"1557\":2,\"1599\":2}}],[\"对于serializable隔离级别\",{\"1\":{\"754\":1}}],[\"对于read\",{\"1\":{\"754\":2}}],[\"对于只读事务\",{\"1\":{\"744\":1}}],[\"对于部分已经刷新到磁盘的页面\",{\"1\":{\"742\":1}}],[\"对于填满的块\",{\"1\":{\"742\":1}}],[\"对于需要保证原子性的操作如果只产生一条redo日志\",{\"1\":{\"739\":1}}],[\"对于复杂日志类型\",{\"1\":{\"739\":1}}],[\"对于复杂的应用系统\",{\"1\":{\"682\":1}}],[\"对于简单日志类型\",{\"1\":{\"739\":1}}],[\"对于索引查询\",{\"1\":{\"728\":2}}],[\"对于全表扫描\",{\"1\":{\"728\":2}}],[\"对于变长字段\",{\"1\":{\"728\":1}}],[\"对于定长类型索引列\",{\"1\":{\"728\":1}}],[\"对于定长字段\",{\"1\":{\"686\":1}}],[\"对于包含不相关的标量子查询或者行子查询\",{\"1\":{\"726\":1}}],[\"对于外连接\",{\"1\":{\"713\":1,\"718\":1}}],[\"对于内连接和where子句等价\",{\"1\":{\"713\":1}}],[\"对于内连接\",{\"1\":{\"713\":1}}],[\"对于联合二级索引\",{\"1\":{\"710\":1}}],[\"对于compact和redundant\",{\"1\":{\"686\":1}}],[\"对于count聚合函数\",{\"1\":{\"584\":1}}],[\"对于类unix系统\",{\"1\":{\"672\":1}}],[\"对于windows用户\",{\"1\":{\"672\":1}}],[\"对于开发人员来说根本感觉不到mycat的存在\",{\"1\":{\"654\":1}}],[\"对于行锁需要记录加锁的记录属于哪个索引\",{\"1\":{\"564\":1}}],[\"对于相同\",{\"1\":{\"477\":1}}],[\"对于集群规模在百台以上的系统\",{\"1\":{\"441\":1}}],[\"对于严重消息积压的情况\",{\"1\":{\"424\":1}}],[\"对于任何一个副本对象而言其\",{\"1\":{\"471\":1}}],[\"对于任何一个class对象\",{\"1\":{\"307\":1}}],[\"对于任意一个类\",{\"1\":{\"254\":1}}],[\"对于循环体\",{\"1\":{\"268\":1}}],[\"对于生产环境不太适用\",{\"1\":{\"235\":1}}],[\"对于同一个线程内所有方法需要共享的资源\",{\"1\":{\"154\":1,\"1514\":1}}],[\"对于同域下的不同服务\",{\"1\":{\"27\":1,\"1643\":1}}],[\"对基本类型来说就是值的一致性\",{\"1\":{\"146\":1}}],[\"对引用变量来说是引用地址的一致性\",{\"1\":{\"146\":1}}],[\"对\",{\"1\":{\"139\":1,\"809\":1,\"831\":2,\"1025\":1,\"1026\":1,\"1368\":1,\"1394\":1,\"1446\":1,\"1497\":1}}],[\"对元素执行\",{\"1\":{\"61\":1}}],[\"对查询语法树query\",{\"1\":{\"53\":1}}],[\"对官方客户端简单封装\",{\"1\":{\"38\":1}}],[\"对象方法执行太慢等情况\",{\"1\":{\"1706\":1}}],[\"对象大小\",{\"1\":{\"1524\":1}}],[\"对象过多\",{\"1\":{\"1524\":1}}],[\"对象移动时只要改变句柄\",{\"1\":{\"1521\":1}}],[\"对象封装成\",{\"1\":{\"1511\":1}}],[\"对象序列化\",{\"1\":{\"1502\":1}}],[\"对象不再直接负责业务处理\",{\"1\":{\"1488\":1}}],[\"对象来处理后续的响应事件\",{\"1\":{\"1488\":1}}],[\"对象来判断事务的状态\",{\"1\":{\"1044\":1}}],[\"对象均以单独文件的形式保存在\",{\"1\":{\"1350\":1}}],[\"对象用\",{\"1\":{\"1245\":1}}],[\"对象操作\",{\"0\":{\"1140\":1}}],[\"对象操作指令\",{\"1\":{\"241\":1}}],[\"对象引用\",{\"1\":{\"1076\":1,\"1524\":1}}],[\"对象内部的\",{\"1\":{\"1074\":1}}],[\"对象内存布局\",{\"0\":{\"215\":1},\"1\":{\"1521\":1}}],[\"对象标记字段\",{\"1\":{\"1074\":1}}],[\"对象和线程绑定\",{\"1\":{\"1045\":1}}],[\"对象进行操作\",{\"1\":{\"1045\":1}}],[\"对象最后一次被访问时间\",{\"1\":{\"928\":1}}],[\"对象周期分创建\",{\"1\":{\"901\":1}}],[\"对象其它属性\",{\"0\":{\"901\":1}}],[\"对象类型\",{\"1\":{\"895\":1}}],[\"对象类型和编码\",{\"0\":{\"895\":1}}],[\"对象指针\",{\"1\":{\"886\":1}}],[\"对象指向它的类型元数据的指针\",{\"1\":{\"215\":1}}],[\"对象即\",{\"1\":{\"871\":1}}],[\"对象还在\",{\"1\":{\"829\":1}}],[\"对象被垃圾回收\",{\"1\":{\"800\":1}}],[\"对象仅维护了此内存的虚引用\",{\"1\":{\"800\":1}}],[\"对象并调用数据库中的存储过程\",{\"1\":{\"544\":1}}],[\"对象并向数据中推送需要预编译的sql语句\",{\"1\":{\"544\":1}}],[\"对象并向数据库中推送不需要预编译的sql语句\",{\"1\":{\"544\":1}}],[\"对象了\",{\"1\":{\"542\":1}}],[\"对象传入上面的\",{\"1\":{\"541\":1}}],[\"对象生成\",{\"1\":{\"541\":1}}],[\"对象工厂默认只是调用无参\",{\"1\":{\"522\":1}}],[\"对象中\",{\"1\":{\"324\":1,\"540\":1}}],[\"对象中的不同\",{\"1\":{\"154\":1,\"1514\":1}}],[\"对象字节输入流\",{\"1\":{\"321\":1}}],[\"对象字节输出流\",{\"1\":{\"321\":1}}],[\"对象字节流\",{\"0\":{\"321\":1}}],[\"对象拼接字符串原理\",{\"1\":{\"302\":2}}],[\"对象已经提前为你创建好了\",{\"1\":{\"290\":1}}],[\"对象等\",{\"1\":{\"235\":1}}],[\"对象存活判断\",{\"0\":{\"222\":1,\"1522\":1}}],[\"对象访问定位\",{\"0\":{\"216\":1},\"1\":{\"1521\":1}}],[\"对象真正存储的有效信息\",{\"1\":{\"215\":1,\"1521\":1}}],[\"对象头\",{\"1\":{\"215\":1,\"1074\":1,\"1521\":1}}],[\"对象创建\",{\"0\":{\"214\":1,\"1521\":1}}],[\"对象完成直接内存的分配与回收\",{\"1\":{\"212\":1}}],[\"对象的销毁方法\",{\"1\":{\"1597\":1}}],[\"对象的初始化方法\",{\"1\":{\"1597\":1}}],[\"对象的初始计数为\",{\"1\":{\"829\":1}}],[\"对象的属性赋值\",{\"1\":{\"1597\":1}}],[\"对象的大小大于\",{\"1\":{\"1524\":1}}],[\"对象的\",{\"1\":{\"1515\":1}}],[\"对象的命令有以下的一些底层命令\",{\"1\":{\"1350\":1}}],[\"对象的垃圾回收\",{\"1\":{\"1136\":1}}],[\"对象的方法\",{\"1\":{\"1090\":1}}],[\"对象的两个属性\",{\"1\":{\"362\":1}}],[\"对象的直接引用\",{\"1\":{\"210\":1}}],[\"对象的finalize\",{\"1\":{\"196\":1}}],[\"对象实例化策略\",{\"0\":{\"1009\":1}}],[\"对象实例\",{\"1\":{\"210\":1}}],[\"对象执行它们的\",{\"1\":{\"196\":1}}],[\"对象将自身重新与引用链建立了关联\",{\"1\":{\"196\":1}}],[\"对象没有覆盖继承自object类的finalize\",{\"1\":{\"196\":1}}],[\"对象通过工厂的方法创建返回\",{\"1\":{\"358\":1}}],[\"对象通过\",{\"1\":{\"195\":1,\"1488\":1}}],[\"对象在线程间重复使用\",{\"1\":{\"154\":1}}],[\"对象时\",{\"1\":{\"154\":1,\"1514\":1}}],[\"对象构造函数的执行\",{\"1\":{\"143\":1}}],[\"对象上了提供了几个\",{\"1\":{\"139\":1}}],[\"对象获取\",{\"1\":{\"73\":1}}],[\"对象\",{\"0\":{\"894\":1,\"1350\":1},\"1\":{\"36\":1,\"59\":1,\"83\":3,\"136\":1,\"154\":2,\"263\":1,\"308\":1,\"366\":1,\"503\":1,\"541\":4,\"829\":1,\"869\":1,\"1012\":1,\"1052\":1,\"1054\":2,\"1073\":1,\"1074\":1,\"1076\":2,\"1113\":1,\"1114\":1,\"1136\":1,\"1264\":2,\"1378\":1,\"1514\":2,\"1597\":1}}],[\"对象维护该用户状态\",{\"1\":{\"17\":1}}],[\"对应不同的飞机座位数\",{\"1\":{\"1730\":1}}],[\"对应控制层\",{\"1\":{\"1594\":1}}],[\"对应服务层\",{\"1\":{\"1594\":1}}],[\"对应持久层\",{\"1\":{\"1594\":1}}],[\"对应位数组下标置\",{\"1\":{\"1390\":1}}],[\"对应已提交状态\",{\"1\":{\"1310\":1}}],[\"对应已暂存状态\",{\"1\":{\"1310\":1}}],[\"对应已修改状态\",{\"1\":{\"1310\":1}}],[\"对应于\",{\"1\":{\"1089\":1}}],[\"对应128个回滚段头\",{\"1\":{\"751\":1}}],[\"对应此段的inode\",{\"1\":{\"751\":1}}],[\"对应索引列不重复的值个数\",{\"1\":{\"720\":1}}],[\"对应外键等等\",{\"1\":{\"695\":1}}],[\"对应一个\",{\"1\":{\"512\":2}}],[\"对应一组日志文件\",{\"1\":{\"475\":1}}],[\"对应partition的所有replica都无法工作\",{\"1\":{\"469\":1}}],[\"对应的域名是\",{\"1\":{\"1792\":1}}],[\"对应的对象数据\",{\"1\":{\"1640\":1}}],[\"对应的的服务器\",{\"1\":{\"1394\":1}}],[\"对应的是热点数据\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"对应的修改操作在\",{\"1\":{\"1174\":1}}],[\"对应的临时节点\",{\"1\":{\"1169\":1}}],[\"对应的长度和值都会记录下来\",{\"1\":{\"746\":1}}],[\"对应的redo日志组偏移量\",{\"1\":{\"741\":1}}],[\"对应的控制块放到old区域的头部\",{\"1\":{\"732\":1}}],[\"对应的\",{\"1\":{\"541\":1,\"1256\":1,\"1579\":1}}],[\"对应的索引项\",{\"1\":{\"476\":1}}],[\"对应的partition元数据\",{\"1\":{\"450\":1}}],[\"对应的字段域将不能进行检索\",{\"1\":{\"34\":1}}],[\"对应\",{\"1\":{\"382\":1,\"801\":1,\"1436\":3,\"1461\":4}}],[\"对应着当前正在执行的方法\",{\"1\":{\"203\":1}}],[\"对应着一个栈帧在虚拟机中从入栈到出栈的过程\",{\"1\":{\"203\":1}}],[\"对应tryinitializehead\",{\"1\":{\"4\":1}}],[\"对加盐加密的密码进行校验\",{\"1\":{\"14\":1}}],[\"对密码进行\",{\"1\":{\"14\":1}}],[\"用buffer创建blob\",{\"1\":{\"1858\":1}}],[\"用最小的刷新量实现最大的数据准确性\",{\"1\":{\"1737\":1}}],[\"用流量变现\",{\"1\":{\"1726\":1}}],[\"用两天的用户\",{\"1\":{\"1658\":1}}],[\"用两位\",{\"1\":{\"1658\":1}}],[\"用不同的方法实现\",{\"1\":{\"1648\":1}}],[\"用程序发起\",{\"1\":{\"1504\":1}}],[\"用固定长度的\",{\"1\":{\"1487\":1}}],[\"用一次sendfile\",{\"1\":{\"1486\":1}}],[\"用一字节\",{\"1\":{\"828\":1}}],[\"用二进制的一位来表示磁盘中一个块的使用情况\",{\"1\":{\"1477\":1}}],[\"用连续的数字表示\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"用返回值\",{\"1\":{\"1113\":1}}],[\"用在客户端建立连接时\",{\"1\":{\"855\":1}}],[\"用在方法声明上\",{\"1\":{\"346\":1}}],[\"用0\",{\"1\":{\"686\":1}}],[\"用字符串pad对str的右边进行填充\",{\"1\":{\"593\":1}}],[\"用字符串pad对str的左边进行填充\",{\"1\":{\"593\":1}}],[\"用装饰器模式包装原始\",{\"1\":{\"542\":1}}],[\"用完直接关闭\",{\"1\":{\"542\":1}}],[\"用作消息队列和数据处理\",{\"1\":{\"429\":1,\"1626\":1}}],[\"用futuretask把callable对象封装成线程任务对象\",{\"1\":{\"329\":1}}],[\"用c2获取更好的编译质量\",{\"1\":{\"267\":1}}],[\"用c1获取更高的编译速度\",{\"1\":{\"267\":1}}],[\"用特殊队列标记该引用已出队\",{\"1\":{\"184\":1}}],[\"用特殊队列标记已入队\",{\"1\":{\"184\":1}}],[\"用satb原始快照处理引用变化\",{\"1\":{\"177\":1,\"1525\":1}}],[\"用匹配的字符做处理\",{\"1\":{\"79\":1}}],[\"用来查询具体某个航班下各舱位还有多少座位可用\",{\"1\":{\"1734\":1}}],[\"用来查询数据库中表的记录\",{\"1\":{\"572\":1}}],[\"用来发布航班计划\",{\"1\":{\"1723\":1}}],[\"用来存储文件或目录数据\",{\"1\":{\"1474\":1}}],[\"用来存储文件系统的元信息\",{\"1\":{\"1474\":1}}],[\"用来存储索引节点\",{\"1\":{\"1474\":1}}],[\"用来认证公钥持有者的身份\",{\"1\":{\"1403\":1}}],[\"用来管理授权\",{\"1\":{\"1298\":1}}],[\"用来决定是否进行提交事务\",{\"1\":{\"1044\":1}}],[\"用来在第一时间判定是否是无效数据包\",{\"1\":{\"848\":1}}],[\"用来处理\",{\"1\":{\"819\":1,\"823\":1,\"1099\":1}}],[\"用来处理磁盘\",{\"1\":{\"445\":1}}],[\"用来解决丢包的问题\",{\"1\":{\"1418\":1}}],[\"用来解决数据复制阶段的阻塞问题\",{\"1\":{\"795\":1}}],[\"用来解放\",{\"1\":{\"799\":1}}],[\"用来与客户端通信\",{\"1\":{\"782\":1}}],[\"用来表示文件路径\",{\"1\":{\"778\":1}}],[\"用来导入mysqldump\",{\"1\":{\"675\":1}}],[\"用来备份数据库或在不同数据库之间进行数据迁移\",{\"1\":{\"675\":1}}],[\"用来很快地查找存在哪些数据库\",{\"1\":{\"675\":1}}],[\"用来创建数据库用户\",{\"1\":{\"572\":1}}],[\"用来对数据库表中的数据进行增删改\",{\"1\":{\"572\":1}}],[\"用来对查询语句进行语法分析\",{\"1\":{\"53\":1}}],[\"用来对查询语句进行词法分析和语言处理\",{\"1\":{\"53\":1}}],[\"用来定义数据库对象\",{\"1\":{\"572\":1}}],[\"用来恢复和清理\",{\"1\":{\"445\":1}}],[\"用来保存消息\",{\"1\":{\"1628\":1}}],[\"用来保存\",{\"1\":{\"427\":1}}],[\"用来描述数字\",{\"1\":{\"240\":1}}],[\"用来写索引文件\",{\"1\":{\"53\":1}}],[\"用词条索引去查询文档id\",{\"1\":{\"35\":1}}],[\"用于邮件认证\",{\"1\":{\"1792\":1}}],[\"用于构建\",{\"1\":{\"1790\":1}}],[\"用于生编占座\",{\"1\":{\"1738\":1}}],[\"用于生成高性能的伪随机数\",{\"1\":{\"1087\":1}}],[\"用于生成java进程的线程转储\",{\"1\":{\"234\":1,\"235\":2}}],[\"用于生成java进程的堆转储\",{\"1\":{\"232\":1,\"235\":1}}],[\"用于解压的\",{\"1\":{\"1688\":1}}],[\"用于压缩的\",{\"1\":{\"1688\":1}}],[\"用于服务器标记用户\",{\"1\":{\"1642\":1}}],[\"用于将\",{\"1\":{\"1792\":1}}],[\"用于将一台服务器变成多台服务器\",{\"1\":{\"1634\":1}}],[\"用于将代码和依赖资源打包在一起\",{\"1\":{\"1634\":1}}],[\"用于加速访问\",{\"1\":{\"1632\":1}}],[\"用于定义缓存的各种操作\",{\"1\":{\"1613\":1}}],[\"用于定义内存屏障\",{\"1\":{\"1142\":1}}],[\"用于数据备份\",{\"1\":{\"1556\":1}}],[\"用于衡量索引列的区分度\",{\"1\":{\"1548\":1}}],[\"用于获取所有符合条件的类的全限定类名\",{\"1\":{\"1598\":1}}],[\"用于获取对象的哈希值\",{\"1\":{\"1535\":1}}],[\"用于获取和移除\",{\"1\":{\"196\":1}}],[\"用于老年代\",{\"1\":{\"1525\":3}}],[\"用于新生代\",{\"1\":{\"1525\":3}}],[\"用于多线程交替执行同步块的场景\",{\"1\":{\"1515\":1}}],[\"用于多个线程之间的同步\",{\"1\":{\"1463\":1}}],[\"用于静态方法就是对类加锁\",{\"1\":{\"1515\":1}}],[\"用于普通方法上是对实例对象加锁\",{\"1\":{\"1515\":1}}],[\"用于普通任务\",{\"1\":{\"1436\":1}}],[\"用于简单地暂停执行\",{\"1\":{\"1512\":1}}],[\"用于简化函数式接口的匿名内部类的写法形式\",{\"1\":{\"298\":1}}],[\"用于简化组件之间的通信\",{\"1\":{\"84\":1}}],[\"用于缓存块设备\",{\"1\":{\"1479\":1}}],[\"用于缓存文件的页数据\",{\"1\":{\"1479\":1}}],[\"用于缓冲读写数据\",{\"1\":{\"761\":1}}],[\"用于线程间的等待和唤醒\",{\"1\":{\"1463\":1}}],[\"用于通知进程发生事件\",{\"1\":{\"1462\":1}}],[\"用于通知出错原因的差错报文\",{\"1\":{\"1427\":1}}],[\"用于离开共享资源后\",{\"1\":{\"1460\":1}}],[\"用于进入共享资源前\",{\"1\":{\"1460\":1}}],[\"用于控制多个进程对共享资源访问的方式\",{\"1\":{\"1460\":1}}],[\"用于控制对共享资源的访问\",{\"1\":{\"159\":1,\"1463\":1}}],[\"用于大于\",{\"1\":{\"1445\":1}}],[\"用于小于\",{\"1\":{\"1445\":1}}],[\"用于动态分配内存\",{\"1\":{\"1445\":1}}],[\"用于维护\",{\"1\":{\"1429\":1}}],[\"用于诊断的查询报文\",{\"1\":{\"1427\":1}}],[\"用于诊断和解决java应用程序运行时出现的各种问题\",{\"1\":{\"228\":1}}],[\"用于确认\",{\"1\":{\"1427\":1}}],[\"用于打印机服务器等小型嵌入式设备接入网络\",{\"1\":{\"1425\":1}}],[\"用于打开所有日志记录\",{\"1\":{\"390\":1}}],[\"用于传输确认\",{\"1\":{\"1418\":1}}],[\"用于传输\",{\"1\":{\"1347\":1}}],[\"用于检查即将提交的快照\",{\"1\":{\"1345\":1}}],[\"用于检查和修改java虚拟机的内部状态\",{\"1\":{\"235\":1}}],[\"用于清空缓存\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"用于用户的就近访问\",{\"1\":{\"1251\":1}}],[\"用于临时关联外部数据\",{\"1\":{\"1228\":1}}],[\"用于临时的分布式锁\",{\"1\":{\"1169\":1}}],[\"用于资源管理和作业调度\",{\"1\":{\"1214\":1}}],[\"用于递增计数\",{\"1\":{\"1204\":1}}],[\"用于唯一标识集群中的节点\",{\"1\":{\"1204\":1}}],[\"用于唯一确定一条消息\",{\"1\":{\"418\":1}}],[\"用于子节点非空的节点\",{\"1\":{\"1176\":1}}],[\"用于分布式锁\",{\"1\":{\"1169\":1}}],[\"用于分析垃圾回收的性能和效率\",{\"1\":{\"237\":1}}],[\"用于分析java堆转储\",{\"1\":{\"233\":1}}],[\"用于管理各个cache缓存组件\",{\"1\":{\"1613\":1}}],[\"用于管理大型主机\",{\"1\":{\"1161\":1}}],[\"用于管理和重用线程的机制\",{\"1\":{\"1104\":1}}],[\"用于结构化数据的解析\",{\"1\":{\"1125\":1}}],[\"用于更方便地管理线程\",{\"1\":{\"1099\":1}}],[\"用于优化\",{\"1\":{\"1095\":1}}],[\"用于优化对buffer\",{\"1\":{\"638\":1}}],[\"用于消除不必要的锁竞争\",{\"1\":{\"1080\":1}}],[\"用于后面的装载\",{\"1\":{\"1012\":1}}],[\"用于订阅主服务器的\",{\"1\":{\"939\":1}}],[\"用于发送命令\",{\"1\":{\"939\":1}}],[\"用于lru内存回收策略\",{\"1\":{\"901\":1}}],[\"用于计算排位\",{\"1\":{\"886\":1}}],[\"用于rehash\",{\"1\":{\"882\":1}}],[\"用于和哈希值计算应该放置的索引\",{\"1\":{\"882\":1}}],[\"用于和客户端进行通信\",{\"1\":{\"786\":1}}],[\"用于配置接收缓冲区的大小\",{\"1\":{\"861\":1}}],[\"用于设置套接字接收缓冲区\",{\"1\":{\"859\":1}}],[\"用于设置套接字发送缓冲区\",{\"1\":{\"859\":1}}],[\"用于设置或显示当前用户打开的文件描述符限制\",{\"1\":{\"857\":1}}],[\"用于是否禁用\",{\"1\":{\"858\":1}}],[\"用于阻塞\",{\"1\":{\"855\":1}}],[\"用于操作字节数据\",{\"1\":{\"824\":1}}],[\"用于读取客户端发送的数据\",{\"1\":{\"823\":1}}],[\"用于处理异步事件\",{\"1\":{\"1462\":1}}],[\"用于处理和生成大规模数据集的分布式计算框架\",{\"1\":{\"1214\":1}}],[\"用于处理连接建立后\",{\"1\":{\"813\":1}}],[\"用于处理客户端发起的连接建立后\",{\"1\":{\"813\":1}}],[\"用于处理所有写请求\",{\"1\":{\"658\":1}}],[\"用于快速开发可维护\",{\"1\":{\"807\":1}}],[\"用于文件的工具类\",{\"1\":{\"779\":1}}],[\"用于对称型nat\",{\"1\":{\"1860\":1}}],[\"用于对数据实时分析处理\",{\"1\":{\"1567\":1}}],[\"用于对类进行配置\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"用于对连接服务器监听套接字的客户端进行应答\",{\"1\":{\"919\":1}}],[\"用于对计算结果进行加工回复\",{\"1\":{\"823\":1}}],[\"用于对临时表的分配\",{\"1\":{\"751\":1}}],[\"用于对普通表的分配\",{\"1\":{\"751\":1}}],[\"用于对象被垃圾回收器回收之前的清理工作\",{\"1\":{\"196\":1}}],[\"用于purge阶段执行真正的删除\",{\"1\":{\"747\":1}}],[\"用于仅包含一条记录\",{\"1\":{\"728\":1}}],[\"用于不同主机上的进程之间进行通信\",{\"1\":{\"1461\":1}}],[\"用于不同生产环境的配置\",{\"1\":{\"524\":1}}],[\"用于不相关子查询\",{\"1\":{\"726\":1}}],[\"用于特殊作用段的区\",{\"1\":{\"693\":1}}],[\"用于特定的命令程序\",{\"1\":{\"671\":1}}],[\"用于同步正确性检验\",{\"1\":{\"691\":1}}],[\"用于保证多个线程之间的顺序性和互斥性\",{\"1\":{\"1463\":1}}],[\"用于保证消息的可靠到达\",{\"1\":{\"419\":1}}],[\"用于保存不同类型的值\",{\"1\":{\"880\":1}}],[\"用于保存要写入到磁盘中的log日志数据\",{\"1\":{\"638\":1}}],[\"用于限制存储在表中的数据\",{\"1\":{\"598\":1}}],[\"用于auto\",{\"1\":{\"562\":1}}],[\"用于创建域名的别名\",{\"1\":{\"1792\":1}}],[\"用于创建类的实例\",{\"1\":{\"1708\":1}}],[\"用于创建线程\",{\"1\":{\"1511\":1}}],[\"用于创建新的线程\",{\"1\":{\"1108\":1}}],[\"用于创建\",{\"1\":{\"541\":1}}],[\"用于创建本地语言文件\",{\"1\":{\"228\":1}}],[\"用于\",{\"1\":{\"530\":1,\"540\":1,\"1269\":1,\"1520\":1,\"1554\":1,\"1613\":1}}],[\"用于执行定义在\",{\"1\":{\"509\":1}}],[\"用于高性能数据管道\",{\"1\":{\"439\":1}}],[\"用于存放几乎所有的对象实例\",{\"1\":{\"1520\":1}}],[\"用于存放消息的队列\",{\"1\":{\"430\":1}}],[\"用于存储文本信息\",{\"1\":{\"1792\":1}}],[\"用于存储undo\",{\"1\":{\"639\":1}}],[\"用于存储动态链接方法调用点的引导方法信息\",{\"1\":{\"240\":1}}],[\"用于存储方法参数的可见注解信息\",{\"1\":{\"240\":1}}],[\"用于存储方法的字节码和异常处理信息\",{\"1\":{\"240\":1}}],[\"用于存储类\",{\"1\":{\"240\":1}}],[\"用于存储类中使用的常量\",{\"1\":{\"240\":1}}],[\"用于存储java源代码中的行号和字节码指令之间的对应关系\",{\"1\":{\"240\":1}}],[\"用于重载处理不同类型的消息\",{\"1\":{\"418\":1}}],[\"用于指定监听的队列\",{\"1\":{\"418\":1}}],[\"用于指针自愈\",{\"1\":{\"179\":1}}],[\"用于访问子系统中的一群接口\",{\"1\":{\"373\":1}}],[\"用于实现多态\",{\"1\":{\"882\":1}}],[\"用于实现等待\",{\"1\":{\"365\":1}}],[\"用于实现等待唤醒机制\",{\"1\":{\"139\":1}}],[\"用于实现异步编程和高效的并发处理\",{\"1\":{\"282\":1}}],[\"用于标识一次服务器状态的变更\",{\"1\":{\"1204\":1}}],[\"用于标识文件是否为java类文件\",{\"1\":{\"240\":1}}],[\"用于标记类\",{\"1\":{\"240\":2}}],[\"用于描述类\",{\"1\":{\"240\":1}}],[\"用于描述类中声明的内部类和外部类之间的关系\",{\"1\":{\"240\":1}}],[\"用于描述java源文件的文件名\",{\"1\":{\"240\":1}}],[\"用于描述方法中局部变量的名称\",{\"1\":{\"240\":1}}],[\"用于描述方法可能抛出的异常类型\",{\"1\":{\"240\":1}}],[\"用于描述字段的常量值\",{\"1\":{\"240\":1}}],[\"用于描述一整条记录\",{\"1\":{\"34\":1}}],[\"用于表示类或接口的访问权限和特性\",{\"1\":{\"240\":1}}],[\"用于表示无效的引用\",{\"1\":{\"240\":1}}],[\"用于表述每一个列的名字\",{\"1\":{\"34\":1}}],[\"用于查询数据本身的详细信息\",{\"1\":{\"1229\":1}}],[\"用于查找线程死锁\",{\"1\":{\"237\":1,\"238\":1}}],[\"用于查看和修改java进程的运行时配置信息\",{\"1\":{\"231\":1,\"235\":1}}],[\"用于监视\",{\"1\":{\"237\":1,\"238\":1}}],[\"用于监视和管理java应用程序的性能和资源使用情况\",{\"1\":{\"236\":1}}],[\"用于监视和显示java进程的各种运行时统计信息\",{\"1\":{\"230\":1}}],[\"用于监视java进程的各种运行时统计信息\",{\"1\":{\"235\":1}}],[\"用于在刷新脏页到磁盘发生错误时\",{\"1\":{\"639\":1}}],[\"用于在运行时检查和调试java应用程序\",{\"1\":{\"235\":1}}],[\"用于在并行计算中同步线程\",{\"1\":{\"160\":1}}],[\"用于浏览和分析java堆中的对象信息\",{\"1\":{\"233\":1}}],[\"用于列出当前系统中正在运行的java进程的信息\",{\"1\":{\"229\":1}}],[\"用于程序打包\",{\"1\":{\"228\":1}}],[\"用于程序签名\",{\"1\":{\"228\":1}}],[\"用于跨web或网络的服务交互\",{\"1\":{\"228\":1}}],[\"用于支持线程的阻塞和唤醒操作\",{\"1\":{\"362\":1}}],[\"用于支持基本的程序创建和运行\",{\"1\":{\"228\":1}}],[\"用于支持类似\",{\"1\":{\"69\":1}}],[\"用于判断对象是否可被回收的一种算法\",{\"1\":{\"224\":1}}],[\"用于帮助\",{\"1\":{\"192\":1}}],[\"用于函数式异步编程的流式调用\",{\"1\":{\"163\":1}}],[\"用于insert\",{\"1\":{\"126\":1}}],[\"用法却都要重新学\",{\"1\":{\"1773\":1}}],[\"用法\",{\"1\":{\"34\":1,\"619\":1}}],[\"用户响应时间敏感\",{\"1\":{\"1752\":1}}],[\"用户组\",{\"1\":{\"1693\":1}}],[\"用户通过成为适当角色的成员而得到这些角色的权限\",{\"1\":{\"1642\":1}}],[\"用户通过这个外壳访问表的时候\",{\"1\":{\"625\":1}}],[\"用户请求量激增\",{\"1\":{\"1638\":1}}],[\"用户最终都是体验到某个功能不可用\",{\"1\":{\"1636\":1}}],[\"用户可以通过替换存储引擎来改变\",{\"1\":{\"1540\":1}}],[\"用户可以通过网页浏览商品信息\",{\"1\":{\"1365\":1}}],[\"用户调用\",{\"1\":{\"1487\":1}}],[\"用户主动调用\",{\"1\":{\"1478\":1}}],[\"用户提交请求到系统第一次产生响应所花费的时间\",{\"1\":{\"1470\":1}}],[\"用户越不满意\",{\"1\":{\"1470\":1}}],[\"用户态再遍历一次找到可读\",{\"1\":{\"1487\":1}}],[\"用户态的转换\",{\"1\":{\"1453\":1}}],[\"用户态与内核态的切换次数没有减少\",{\"1\":{\"800\":1}}],[\"用户态与内核态的切换发生了\",{\"1\":{\"799\":1}}],[\"用户空间做内存映射\",{\"1\":{\"1479\":1}}],[\"用户空间3g\",{\"1\":{\"1464\":1}}],[\"用户空间的代码只能访问一个局部的内存空间\",{\"1\":{\"1440\":1}}],[\"用户空间\",{\"1\":{\"1440\":1,\"1444\":2,\"1486\":1}}],[\"用户滑动到某个元素才加载\",{\"1\":{\"1400\":1}}],[\"用户数据\",{\"1\":{\"1395\":1}}],[\"用户输入过滤非法字符\",{\"1\":{\"1362\":1}}],[\"用户输入第三方的账号密码进行授权\",{\"1\":{\"15\":1}}],[\"用户级\",{\"1\":{\"1311\":1}}],[\"用户下单后\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"用户接口\",{\"1\":{\"1224\":1}}],[\"用户只需要通过某种编程语言实现\",{\"1\":{\"1221\":1}}],[\"用户在\",{\"1\":{\"1218\":1}}],[\"用户键入命令请求\",{\"1\":{\"926\":1}}],[\"用户记录\",{\"1\":{\"688\":1}}],[\"用户\",{\"1\":{\"673\":1}}],[\"用户管理\",{\"0\":{\"590\":1,\"1692\":1}}],[\"用户名密码验证通过后\",{\"1\":{\"570\":1}}],[\"用户名\",{\"1\":{\"569\":1,\"590\":3,\"591\":3,\"1563\":1,\"1692\":1}}],[\"用户名是否唯一\",{\"1\":{\"14\":1}}],[\"用户线程实现\",{\"1\":{\"279\":1}}],[\"用户线程的调度和协作是由用户空间的调度器\",{\"1\":{\"279\":1}}],[\"用户线程的创建和调度仍然由用户空间的线程库来管理\",{\"1\":{\"280\":1}}],[\"用户线程的创建\",{\"1\":{\"279\":1}}],[\"用户线程是由用户空间程序创建和管理的线程\",{\"1\":{\"279\":1}}],[\"用户线程\",{\"0\":{\"279\":1},\"1\":{\"277\":1,\"1451\":1}}],[\"用户确认收货\",{\"1\":{\"124\":1}}],[\"用户取消\",{\"1\":{\"124\":1}}],[\"用户拒收\",{\"1\":{\"124\":1}}],[\"用户id\",{\"1\":{\"124\":1,\"1692\":1}}],[\"用户手册\",{\"1\":{\"85\":1}}],[\"用户填写用户名\",{\"1\":{\"27\":1,\"1643\":1}}],[\"用户访问\",{\"1\":{\"27\":2,\"1643\":2}}],[\"用户登录授权\",{\"1\":{\"15\":1}}],[\"用户点击注册后校验验证码和其它信息\",{\"1\":{\"14\":1}}],[\"用\",{\"1\":{\"14\":1,\"410\":1,\"445\":1,\"537\":1,\"703\":1,\"789\":1,\"1224\":1,\"1344\":2,\"1403\":1,\"1878\":1}}],[\"读操作时\",{\"1\":{\"1478\":1}}],[\"读操作分配到\",{\"1\":{\"658\":1}}],[\"读互斥\",{\"1\":{\"1467\":1}}],[\"读个数\",{\"1\":{\"1467\":1}}],[\"读者有限\",{\"1\":{\"1467\":1}}],[\"读者\",{\"1\":{\"1467\":1}}],[\"读一读\",{\"1\":{\"1307\":1}}],[\"读多写少\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"读多写多的场景\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"读缓存\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"读缓存的时候还要加入双读判等\",{\"1\":{\"1236\":1}}],[\"读请求发给\",{\"1\":{\"1563\":1}}],[\"读请求\",{\"1\":{\"1194\":1}}],[\"读已提交\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1}}],[\"读未提交\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1}}],[\"读入后调用select切换数据库\",{\"1\":{\"913\":1}}],[\"读指针随读取字节数移动\",{\"1\":{\"828\":1}}],[\"读指针向后走\",{\"1\":{\"772\":1}}],[\"读索引\",{\"1\":{\"827\":1}}],[\"读\",{\"1\":{\"814\":1}}],[\"读写事件\",{\"1\":{\"1488\":1}}],[\"读写事件的监控\",{\"1\":{\"784\":1}}],[\"读写互斥\",{\"1\":{\"1467\":1}}],[\"读写加锁\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"读写数据\",{\"1\":{\"1220\":1}}],[\"读写过程\",{\"0\":{\"1220\":1}}],[\"读写锁\",{\"1\":{\"1188\":2,\"1264\":1,\"1468\":1}}],[\"读写键时\",{\"1\":{\"907\":1}}],[\"读写索引分离\",{\"1\":{\"825\":1}}],[\"读写\",{\"0\":{\"828\":1},\"1\":{\"800\":1}}],[\"读写能力\",{\"1\":{\"799\":1}}],[\"读写效率高\",{\"1\":{\"770\":1,\"1476\":1}}],[\"读写效率较低\",{\"1\":{\"770\":1}}],[\"读写时需要与文件系统进行交互\",{\"1\":{\"673\":1}}],[\"读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上\",{\"1\":{\"1563\":1}}],[\"读写分离是把对数据库的读和写操作分开\",{\"1\":{\"658\":1}}],[\"读写分离\",{\"0\":{\"658\":1},\"1\":{\"1563\":1}}],[\"读写后超出指定时间即失效\",{\"1\":{\"74\":1}}],[\"读锁\",{\"1\":{\"549\":1,\"552\":1,\"1183\":1}}],[\"读数据采用稀疏索引\",{\"1\":{\"478\":1}}],[\"读取指定配置文件\",{\"1\":{\"1608\":1}}],[\"读取配置并绑定到\",{\"1\":{\"1608\":1}}],[\"读取简单配置信息\",{\"1\":{\"1608\":1}}],[\"读取操作不会去等待行上锁的释放\",{\"1\":{\"1557\":1}}],[\"读取时也会先从主内存读入本地内存再访问\",{\"1\":{\"1507\":1}}],[\"读取时弱一致性\",{\"1\":{\"162\":1}}],[\"读取完全不用加锁\",{\"1\":{\"1498\":1}}],[\"读取完成\",{\"1\":{\"814\":1}}],[\"读取到数据后交给子线程里的\",{\"1\":{\"1488\":1}}],[\"读取到的字节数\",{\"1\":{\"767\":1}}],[\"读取共享资源用读锁\",{\"1\":{\"1468\":1}}],[\"读取方向\",{\"1\":{\"1420\":1}}],[\"读取workers内容\",{\"1\":{\"1217\":1}}],[\"读取core\",{\"1\":{\"1217\":1}}],[\"读取权限\",{\"1\":{\"1168\":1}}],[\"读取流\",{\"1\":{\"1008\":1}}],[\"读取命令请求\",{\"1\":{\"926\":1}}],[\"读取文件末尾返回\",{\"1\":{\"777\":1}}],[\"读取数据库的最新数据\",{\"1\":{\"1361\":1}}],[\"读取数据最后交由\",{\"1\":{\"873\":1}}],[\"读取数据\",{\"0\":{\"772\":1},\"1\":{\"767\":1}}],[\"读取记录时判断版本是否对当前事务可见\",{\"1\":{\"1554\":1}}],[\"读取记录时直接查看最新版本\",{\"1\":{\"754\":1,\"1557\":1}}],[\"读取记录收集器\",{\"1\":{\"450\":1}}],[\"读取以及检测记录是否满足条件的开销\",{\"1\":{\"716\":1}}],[\"读取满足条件的数据行\",{\"1\":{\"616\":1}}],[\"读取\",{\"1\":{\"318\":1,\"768\":1,\"777\":1,\"916\":1,\"919\":1,\"1220\":1,\"1435\":1,\"1572\":1}}],[\"读取1\",{\"1\":{\"317\":1}}],[\"读并发\",{\"1\":{\"157\":1}}],[\"读屏障\",{\"1\":{\"145\":1}}],[\"读这种复杂源码才发现\",{\"1\":{\"10\":1}}],[\"读完\",{\"1\":{\"9\":1}}],[\"欠下的债总有一天是要还的\",{\"1\":{\"10\":1}}],[\"但伴随着青藏高原的美景\",{\"1\":{\"1833\":1}}],[\"但比较难\",{\"1\":{\"1826\":1}}],[\"但山色其实一般\",{\"1\":{\"1825\":1}}],[\"但支持多设备同步\",{\"1\":{\"1811\":1}}],[\"但支持客户端语言不多\",{\"1\":{\"410\":1}}],[\"但就是不想给\",{\"1\":{\"1805\":1}}],[\"但日复一日的业务需求终究还是会把人磨平\",{\"1\":{\"1786\":1}}],[\"但到后来\",{\"1\":{\"1773\":1}}],[\"但说实话降国旗并不震撼\",{\"1\":{\"1772\":1}}],[\"但德鲁兹教派的信徒通常不被认为是穆斯林\",{\"1\":{\"1767\":1}}],[\"但却绝对不能容忍多神崇拜或多神信仰\",{\"1\":{\"1767\":1}}],[\"但随着互联网的发展\",{\"1\":{\"1751\":1}}],[\"但随着行业的变化\",{\"1\":{\"1726\":1}}],[\"但途中必须经过登记国\",{\"1\":{\"1747\":1}}],[\"但大部分航司排列都类似\",{\"1\":{\"1739\":1}}],[\"但旅客可以候补\",{\"1\":{\"1736\":1}}],[\"但crs侧重于库存管理和订座\",{\"1\":{\"1724\":1}}],[\"但安全性和用户体验降低\",{\"1\":{\"1642\":1}}],[\"但各自作为独立的进程在用户空间中运行\",{\"1\":{\"1634\":1}}],[\"但又两种实现方式\",{\"1\":{\"1629\":1}}],[\"但又必须彻底释放\",{\"1\":{\"829\":1}}],[\"但占用存储空间过大\",{\"1\":{\"1622\":1}}],[\"但幻读仍有可能发生\",{\"1\":{\"1612\":1}}],[\"但查询条件没有遵循最左匹配原则\",{\"1\":{\"1547\":1}}],[\"但查不到任何信息\",{\"1\":{\"583\":1}}],[\"但读取和写入效率更高\",{\"1\":{\"1543\":1}}],[\"但读写性能高\",{\"1\":{\"826\":1}}],[\"但读写性能很高\",{\"1\":{\"212\":1}}],[\"但没有重写\",{\"1\":{\"1535\":1}}],[\"但没有考虑时间问题\",{\"1\":{\"1471\":1}}],[\"但gc时必须stw\",{\"1\":{\"1525\":1}}],[\"但节点变化时\",{\"1\":{\"1489\":1}}],[\"但仅适用于业务处理非常快速的场景\",{\"1\":{\"1488\":1}}],[\"但仅仅返回2000000\",{\"1\":{\"618\":1}}],[\"但仅仅是通过装饰器模式提供了一个只读的视图\",{\"1\":{\"64\":1}}],[\"但对于大文件\",{\"1\":{\"1486\":1}}],[\"但对于不同域下的服务\",{\"1\":{\"27\":1,\"1643\":1}}],[\"但应用程序会不断轮询内核\",{\"1\":{\"1478\":1}}],[\"但应确保被标记为\",{\"1\":{\"851\":1}}],[\"但存储索引占用额外空间\",{\"1\":{\"1476\":1}}],[\"但存在饥饿问题\",{\"1\":{\"1468\":1}}],[\"但隐式链表无法直接访问数据块\",{\"1\":{\"1476\":1}}],[\"但磁头在移动到最远的请求位置时就立即反向移动\",{\"1\":{\"1472\":1}}],[\"但内核空间是所有进程共享的\",{\"1\":{\"1455\":1}}],[\"但内容的变化不会收到通知\",{\"1\":{\"1191\":1}}],[\"但每个线程各自都有一套独立的寄存器和栈\",{\"1\":{\"1451\":1}}],[\"但每天有一段高峰期流量能达到1000qps\",{\"1\":{\"400\":1}}],[\"但收益高于内存回收\",{\"1\":{\"1446\":1}}],[\"但耗时稍长\",{\"1\":{\"1446\":1}}],[\"但总线压力大\",{\"1\":{\"1446\":1}}],[\"但提高了内存的利用率\",{\"1\":{\"1443\":1}}],[\"但碎片很小\",{\"1\":{\"1443\":1}}],[\"但很少人知道世界第二高峰\",{\"1\":{\"1844\":1}}],[\"但很少有程序计算这么大的数字\",{\"1\":{\"1433\":1}}],[\"但很多缺点\",{\"1\":{\"1622\":1}}],[\"但很多\",{\"1\":{\"17\":1}}],[\"但要合理选择前缀的长度\",{\"1\":{\"1548\":1}}],[\"但要求服务时间是不可预知的\",{\"1\":{\"1470\":1}}],[\"但要同时满足四元组相同\",{\"1\":{\"1420\":1}}],[\"但要注意双重检查\",{\"1\":{\"1261\":1}}],[\"但双方窗口只是近似相等\",{\"1\":{\"1412\":1}}],[\"但rtt无法准确计算\",{\"1\":{\"1411\":1}}],[\"但它是个无边界的数据流\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"但它们加锁的事件是错开的\",{\"1\":{\"1076\":1}}],[\"但完全二叉树不一定是满二叉树\",{\"1\":{\"1387\":1}}],[\"但本项目采用\",{\"1\":{\"1370\":1}}],[\"但本质上是\",{\"1\":{\"1228\":1}}],[\"但变基使得提交历史更加整洁\",{\"1\":{\"1337\":1}}],[\"但还没保存到数据库中\",{\"1\":{\"1310\":1,\"1633\":1}}],[\"但还依赖于字符集\",{\"1\":{\"686\":1}}],[\"但侵入性较强\",{\"1\":{\"1284\":1}}],[\"但延迟时间很难评估\",{\"1\":{\"1267\":1,\"1585\":1}}],[\"但延迟加大\",{\"1\":{\"450\":1}}],[\"但仔细想想这里其实仍然会存在问题\",{\"1\":{\"1240\":1}}],[\"但此时业务上仍要依赖旧集群\",{\"1\":{\"1239\":1}}],[\"但此时会丢失部分已应答的数据\",{\"1\":{\"470\":1}}],[\"但更方便的是用\",{\"1\":{\"1223\":1}}],[\"但服务可以采用适合的方式达到最终一致性\",{\"1\":{\"1207\":1}}],[\"但非\",{\"1\":{\"1203\":1}}],[\"但子节点中再新增节点不会收到通知\",{\"1\":{\"1191\":1}}],[\"但队列必须有界\",{\"1\":{\"1120\":1}}],[\"但处理入队任务\",{\"1\":{\"1112\":1}}],[\"但处理流程无法拆分\",{\"1\":{\"1028\":1}}],[\"但必须等上一个任务执行完才会开始下一个\",{\"1\":{\"1110\":1}}],[\"但和操作系统中的线程状态并没有对应关系\",{\"1\":{\"1089\":1}}],[\"但外层方法是只读\",{\"1\":{\"1049\":1}}],[\"但其实这两辆车过了西宁后很多时间都在晚上\",{\"1\":{\"1833\":1}}],[\"但其实航司的舱位类型比三种多多了\",{\"1\":{\"1735\":1}}],[\"但其实思路和上面的组合一样\",{\"1\":{\"1677\":1}}],[\"但其实就可以把这个状态理解成一个具体的事务对象\",{\"1\":{\"1044\":1}}],[\"但其中最核心的就三个\",{\"1\":{\"1120\":1}}],[\"但其中很多由于安全问题都是已废弃的\",{\"1\":{\"1099\":1}}],[\"但其底层实现还是用多路复用模拟了异步\",{\"1\":{\"795\":1}}],[\"但仍可以违反栈的单端操作规则\",{\"1\":{\"986\":1}}],[\"但仍是不可预知的\",{\"1\":{\"195\":1}}],[\"但继承自vector\",{\"1\":{\"986\":1}}],[\"但已经基本不用了\",{\"1\":{\"983\":1}}],[\"但32位的表键需要十几gb\",{\"1\":{\"976\":1}}],[\"但都会尽量减少阻塞时间\",{\"1\":{\"921\":1}}],[\"但都要等任务结束\",{\"1\":{\"822\":1}}],[\"但优先级低于aof文件\",{\"1\":{\"911\":1}}],[\"但过期删除后\",{\"1\":{\"908\":1}}],[\"但难以确定执行的频率和时长\",{\"1\":{\"908\":1}}],[\"但容易造成部分键长时间无法删除\",{\"1\":{\"908\":1}}],[\"但消耗系统内存\",{\"1\":{\"1288\":1}}],[\"但消耗cpu时间\",{\"1\":{\"908\":1}}],[\"但消息重复可能会发生\",{\"1\":{\"407\":1}}],[\"但分隔符本身如果用于传输\",{\"1\":{\"845\":1}}],[\"但分区所在的hdfs文件夹依旧保留\",{\"1\":{\"118\":1}}],[\"但综合性能和灵活性最好\",{\"1\":{\"844\":1}}],[\"但发生超时\",{\"1\":{\"839\":1}}],[\"但会产生磁盘碎片\",{\"1\":{\"1476\":1}}],[\"但会为每个分支各执行一次\",{\"1\":{\"1345\":1}}],[\"但会从尾部\",{\"1\":{\"823\":1}}],[\"但会更新newest\",{\"1\":{\"740\":1}}],[\"但中途是可以换人处理的\",{\"1\":{\"818\":1}}],[\"但长时间\",{\"1\":{\"782\":1}}],[\"但治标不治本\",{\"1\":{\"782\":1}}],[\"但降低了增删改的速度\",{\"1\":{\"697\":1}}],[\"但server组用于所有服务器程序\",{\"1\":{\"671\":1}}],[\"但这部分数据依然留存在缓存中\",{\"1\":{\"1259\":1}}],[\"但这种转向不会对客户端今后发送关于槽i的命令请求产生任何影响\",{\"1\":{\"947\":1}}],[\"但这种方案如果\",{\"1\":{\"658\":1}}],[\"但这玩意是给人用的吗\",{\"1\":{\"515\":1}}],[\"但一般都可以用存储过程替换\",{\"1\":{\"635\":1}}],[\"但一般异步处理都使用线程池复用\",{\"1\":{\"154\":1,\"1514\":1}}],[\"但具体是否检查看各自视图的定义\",{\"1\":{\"623\":1}}],[\"但速度慢\",{\"1\":{\"563\":1}}],[\"但冲突多\",{\"1\":{\"563\":1}}],[\"但锁定粒度大\",{\"1\":{\"551\":1}}],[\"但只要进入内存\",{\"1\":{\"1450\":1}}],[\"但只要静下心慢慢看\",{\"1\":{\"10\":1}}],[\"但只能读数据\",{\"1\":{\"549\":1}}],[\"但开销大\",{\"1\":{\"554\":1}}],[\"但开销大加锁慢\",{\"1\":{\"549\":1}}],[\"但开销小加锁快\",{\"1\":{\"549\":1}}],[\"但如果机器时间不正确可能产生重复id\",{\"1\":{\"1622\":1}}],[\"但如果多线程共享该\",{\"1\":{\"1420\":1}}],[\"但如果连接都是短暂的\",{\"1\":{\"860\":1}}],[\"但如果内容本身包含了分隔符\",{\"1\":{\"843\":1}}],[\"但如果这部分数据很少的话\",{\"1\":{\"839\":1}}],[\"但如果执行失败不会抛出异常\",{\"1\":{\"822\":1}}],[\"但如果数据溢出\",{\"1\":{\"792\":1}}],[\"但如果工作在\",{\"1\":{\"791\":1}}],[\"但如果预读的页面没用到\",{\"1\":{\"732\":1}}],[\"但如果有\",{\"1\":{\"495\":1}}],[\"但如果竞争激烈\",{\"1\":{\"148\":1}}],[\"但并不改变提交历史\",{\"1\":{\"1344\":1}}],[\"但并不修改本地工作目录\",{\"1\":{\"1338\":1}}],[\"但并不实用\",{\"1\":{\"510\":1}}],[\"但并不推荐\",{\"1\":{\"507\":1}}],[\"但并不保证数据不丢失\",{\"1\":{\"471\":1}}],[\"但并不兼容前任\",{\"1\":{\"376\":1}}],[\"但也不能说舒服\",{\"1\":{\"1836\":1}}],[\"但也难受\",{\"1\":{\"1833\":1}}],[\"但也真的真的很快乐\",{\"1\":{\"1825\":1}}],[\"但也可以不用\",{\"1\":{\"1642\":1}}],[\"但也可独立运行的小项目\",{\"1\":{\"1641\":1}}],[\"但也增加了安全问题\",{\"1\":{\"1531\":1}}],[\"但也无法完全避免\",{\"1\":{\"1418\":1}}],[\"但也需要注意一些潜在的问题\",{\"1\":{\"1136\":1}}],[\"但也要注意及时主动释放\",{\"1\":{\"826\":1}}],[\"但也会增加存储空间\",{\"1\":{\"469\":1}}],[\"但也存在缺点\",{\"1\":{\"176\":1}}],[\"但效率较低\",{\"1\":{\"984\":1}}],[\"但效率低下\",{\"1\":{\"462\":1}}],[\"但效率最高\",{\"1\":{\"460\":1}}],[\"但无法适应消费速率不同的消费者\",{\"1\":{\"480\":1}}],[\"但无法保证语义符合逻辑\",{\"1\":{\"262\":1}}],[\"但无疑会增加响应的延迟\",{\"1\":{\"460\":1}}],[\"但有时候因旅客行程变更导致座位浪费\",{\"1\":{\"1737\":1}}],[\"但有不同的副作用\",{\"1\":{\"1092\":1}}],[\"但有\",{\"1\":{\"452\":1}}],[\"但可候补\",{\"1\":{\"1740\":2}}],[\"但可申请\",{\"1\":{\"1740\":1}}],[\"但可能一个小资源变化后\",{\"1\":{\"1400\":1}}],[\"但可能由于缓存过期\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"但可靠性差\",{\"1\":{\"450\":1}}],[\"但可以候补\",{\"1\":{\"1736\":1}}],[\"但可以申请\",{\"1\":{\"1736\":1}}],[\"但可以通过\",{\"1\":{\"1321\":1}}],[\"但可以通过线程中断状态检查\",{\"1\":{\"365\":1}}],[\"但可以提交分布式\",{\"1\":{\"1225\":1}}],[\"但可以定义相同签名的方法\",{\"1\":{\"291\":1}}],[\"但可以被\",{\"1\":{\"156\":1}}],[\"但影响生产速率\",{\"1\":{\"435\":1}}],[\"但维护渐少\",{\"1\":{\"410\":1}}],[\"但同时也带来了新的问题\",{\"1\":{\"401\":1}}],[\"但压测发现当前系统的处理能力为100qps\",{\"1\":{\"400\":1}}],[\"但\",{\"1\":{\"383\":1,\"409\":1,\"499\":1,\"1599\":1,\"1642\":1,\"1791\":1}}],[\"但从此开发者有了两种选择\",{\"1\":{\"376\":1}}],[\"但实践还是得靠人去做\",{\"1\":{\"1238\":1}}],[\"但实际中更多的是下面这种无法快进的分支合并结构\",{\"1\":{\"1336\":1}}],[\"但实际中还是需要通过测试得到业务最佳的参数配置\",{\"1\":{\"1119\":1}}],[\"但实际上它们应该是相同的\",{\"1\":{\"1675\":1}}],[\"但实际上数据库可能还没有创建物理事务\",{\"1\":{\"1044\":1}}],[\"但实际上是拿到的队头\",{\"1\":{\"188\":1}}],[\"但实际情况下很少发生\",{\"1\":{\"893\":1}}],[\"但实时性较差\",{\"1\":{\"858\":1}}],[\"但实现复杂\",{\"1\":{\"268\":1}}],[\"但在未来长期规划里的最后一点我是认真的\",{\"1\":{\"1786\":1}}],[\"但在数据同步的时候无法提供对外服务\",{\"1\":{\"1207\":1}}],[\"但在\",{\"1\":{\"1135\":1,\"1187\":1}}],[\"但在多线程环境中\",{\"1\":{\"1096\":1}}],[\"但在阻塞模式下\",{\"1\":{\"764\":1}}],[\"但在编译器处理过程中会被转换成标准的java语法\",{\"1\":{\"263\":1}}],[\"但在整体吞吐量上会更加高效\",{\"1\":{\"175\":1}}],[\"但缺点是寄存器的数量有限\",{\"1\":{\"242\":1}}],[\"但缺点是由于操作数需要频繁压栈和弹栈\",{\"1\":{\"242\":1}}],[\"但缺点是编译过程需要消耗额外的时间和内存\",{\"1\":{\"242\":1}}],[\"但缺点也很明显\",{\"1\":{\"169\":1}}],[\"但需要在\",{\"1\":{\"1691\":1}}],[\"但需要占用额外物理内存空间\",{\"1\":{\"1479\":1}}],[\"但需要创建完整的undo页面链表\",{\"1\":{\"750\":1}}],[\"但需要扫描全部索引记录\",{\"1\":{\"728\":1}}],[\"但需要额外的缓存维护开销\",{\"1\":{\"672\":1}}],[\"但需要考虑如何存放类型数据的相关信息\",{\"1\":{\"216\":1}}],[\"但需要传递一个\",{\"1\":{\"83\":1}}],[\"但局部变量没有初始化就不能使用\",{\"1\":{\"204\":1}}],[\"但注意无法通过虚引用来获取对象实例\",{\"1\":{\"194\":1}}],[\"但不认可耶稣是上帝的儿子\",{\"1\":{\"1764\":1}}],[\"但不得作任何业务性工作\",{\"1\":{\"1743\":1}}],[\"但不保证元素的顺序\",{\"1\":{\"1496\":1}}],[\"但不是所有\",{\"1\":{\"1479\":1}}],[\"但不是直接后继\",{\"1\":{\"1336\":1}}],[\"但不适用于大磁盘\",{\"1\":{\"1476\":1}}],[\"但不优雅\",{\"1\":{\"1420\":1}}],[\"但不同时包含的提交\",{\"1\":{\"1342\":1}}],[\"但不会自动合并或修改\",{\"1\":{\"1327\":1}}],[\"但不会主动移除\",{\"1\":{\"786\":1}}],[\"但不能访问外部类的非静态成员\",{\"1\":{\"1534\":1}}],[\"但不能随机访问\",{\"1\":{\"1477\":1}}],[\"但不能分摊写请求和\",{\"1\":{\"1194\":1}}],[\"但不能同时满足范围型操作和查找操作的效率\",{\"1\":{\"900\":1}}],[\"但不能授权到数据库特定行和特定的列上\",{\"1\":{\"625\":1}}],[\"但不包括数据查询\",{\"1\":{\"643\":1}}],[\"但不包含写入数据的语句\",{\"1\":{\"635\":1}}],[\"但不取值\",{\"1\":{\"619\":1}}],[\"但不完全保证数据不丢失\",{\"1\":{\"450\":1}}],[\"但不够精确\",{\"1\":{\"268\":1}}],[\"但不希望该对象因为被缓存而阻止它被垃圾回收\",{\"1\":{\"193\":1}}],[\"但不响应中断\",{\"1\":{\"156\":1}}],[\"但尚未入队\",{\"1\":{\"186\":1}}],[\"但采用标记\",{\"1\":{\"173\":1,\"175\":1}}],[\"但两个过程的执行效率都随对象数量增长而降低\",{\"1\":{\"168\":1}}],[\"但普通的cas存在一些问题\",{\"1\":{\"148\":1}}],[\"但由于历史原因\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"但由于接收方处理不及时且窗口大小足够大\",{\"1\":{\"839\":1}}],[\"但由于是基于时间提交的\",{\"1\":{\"492\":1}}],[\"但由于每次执行都需要解释字节码指令\",{\"1\":{\"242\":1}}],[\"但由于\",{\"1\":{\"145\":1,\"1134\":1}}],[\"但是记不得是什么了\",{\"1\":{\"1846\":1}}],[\"但是看着沙丘上的两个小姐姐滑下去又得自己往上爬也是蛮累的\",{\"1\":{\"1842\":1}}],[\"但是总归容量太小不合适\",{\"1\":{\"1805\":1}}],[\"但是这些平台的缺点也很明显\",{\"1\":{\"1803\":1}}],[\"但是一直有几个问题比较困扰\",{\"1\":{\"1790\":1}}],[\"但是也都在不停地奔跑\",{\"1\":{\"1818\":1}}],[\"但是也很难感受到幸福\",{\"1\":{\"1786\":1}}],[\"但是也分头等舱\",{\"1\":{\"1732\":1}}],[\"但是业务真的好复杂\",{\"1\":{\"1778\":1}}],[\"但是基本都历史价值大于观赏价值吧\",{\"1\":{\"1775\":1}}],[\"但是周末依然要快乐\",{\"1\":{\"1774\":1}}],[\"但是真正预订机票的用户并没那么多\",{\"1\":{\"1737\":1}}],[\"但是e舱票价贵\",{\"1\":{\"1735\":1}}],[\"但是es不设置\",{\"1\":{\"34\":1}}],[\"但是要求元素不可复选\",{\"1\":{\"1672\":1}}],[\"但是会导致历史记录相对复杂\",{\"1\":{\"1633\":1}}],[\"但是会增加线程切换的开销\",{\"1\":{\"1518\":1}}],[\"但是幻读或不可重复读仍有可能发生\",{\"1\":{\"1612\":1}}],[\"但是有数据丢失的风险\",{\"1\":{\"1576\":1}}],[\"但是仅用于网络数据的读写这类耗时操作上\",{\"1\":{\"1572\":1}}],[\"但是由于主从同步延迟\",{\"1\":{\"1563\":1}}],[\"但是哈希表不支持排序和范围查找\",{\"1\":{\"1546\":1}}],[\"但是可以定义相同方法将其隐藏\",{\"1\":{\"1534\":1}}],[\"但是可能无法上传\",{\"1\":{\"1810\":1}}],[\"但是可能退票费和改签费要便宜\",{\"1\":{\"1735\":1}}],[\"但是可能会造成太多过期\",{\"1\":{\"1573\":1}}],[\"但是可能会线程不安全\",{\"1\":{\"154\":1,\"1514\":1}}],[\"但是可能导致某些线程长时间得不到锁\",{\"1\":{\"1518\":1}}],[\"但是发现对象头里锁偏向的线程\",{\"1\":{\"1515\":1}}],[\"但是注意需要对存放\",{\"1\":{\"1487\":1}}],[\"但是频繁创建和销毁线程\",{\"1\":{\"1487\":1}}],[\"但是进程必须事先声明每个进程请求得最大资源数\",{\"1\":{\"1466\":1}}],[\"但是知道身份证号是没法找到人的\",{\"1\":{\"1423\":1}}],[\"但是变基存在一定风险\",{\"1\":{\"1337\":1}}],[\"但是\",{\"1\":{\"1309\":1,\"1445\":1,\"1487\":1,\"1555\":1}}],[\"但是存在缓存资源浪费\",{\"1\":{\"1266\":1,\"1584\":1}}],[\"但是复杂度太高\",{\"1\":{\"1240\":1}}],[\"但是就跟\",{\"1\":{\"1219\":1}}],[\"但是通常协议头是可以省略的\",{\"1\":{\"1218\":1}}],[\"但是价值密度低\",{\"1\":{\"1212\":1}}],[\"但是每次在创建和释放锁的过程中\",{\"1\":{\"1187\":1}}],[\"但是实际参与了才能感受到现场的那种氛围\",{\"1\":{\"1818\":1}}],[\"但是实际生产中\",{\"1\":{\"461\":1}}],[\"但是实现起来非常简单\",{\"1\":{\"1130\":1}}],[\"但是面对某些突发的情况又要及时做出调整\",{\"1\":{\"1120\":1}}],[\"但是经调研发现\",{\"1\":{\"1075\":1}}],[\"但是具体功能实际上仍然是交给针对不同数据库的事务管理器的实现类去完成\",{\"1\":{\"1048\":1}}],[\"但是数据仍然拷贝了\",{\"1\":{\"801\":1}}],[\"但是性能越低\",{\"1\":{\"737\":1}}],[\"但是性能会下降\",{\"1\":{\"419\":1}}],[\"但是需要的数据都在索引列中能找到\",{\"1\":{\"706\":1}}],[\"但是需要回表查询数据\",{\"1\":{\"706\":1}}],[\"但是hash索引不适合做范围查询\",{\"1\":{\"638\":1}}],[\"但是给我们提供了自适应hash索引\",{\"1\":{\"638\":1}}],[\"但是stu\",{\"1\":{\"623\":1}}],[\"但是如果未来你要改签或者退票\",{\"1\":{\"1735\":1}}],[\"但是如果主键是乱序插入的话\",{\"1\":{\"615\":1}}],[\"但是如果用不上索引\",{\"1\":{\"35\":1}}],[\"但是不适合分布式系统\",{\"1\":{\"1489\":1}}],[\"但是不会相互阻塞\",{\"1\":{\"561\":1}}],[\"但是不能保证数据不丢失\",{\"1\":{\"461\":1}}],[\"但是不能保证数据不重复\",{\"1\":{\"461\":1}}],[\"但是同一个consumer\",{\"1\":{\"430\":1}}],[\"但是同步复杂\",{\"1\":{\"134\":1}}],[\"但是它的接口与客户端的期望接口不兼容\",{\"1\":{\"374\":1}}],[\"但是它所引用的对象尚未被回收\",{\"1\":{\"186\":1}}],[\"但是线程库可以利用内核线程来提高并发性能\",{\"1\":{\"280\":1}}],[\"但是当jvm发现某个方法或代码块运行频繁\",{\"1\":{\"266\":1}}],[\"但是支持更多的选项和功能\",{\"1\":{\"235\":5}}],[\"但是因为只有被根集合直接或间接引用的对象才会被标记为可达\",{\"1\":{\"224\":1}}],[\"但是为了能够加载更多的类同时改善\",{\"1\":{\"211\":1}}],[\"但是引用实例尚未加入引用队列中\",{\"1\":{\"186\":1}}],[\"但是没有义务保证多线程间的语义也一致\",{\"1\":{\"143\":1}}],[\"但是mysql更擅长事务类型操作\",{\"1\":{\"34\":1}}],[\"但是在没有第三国同意的情况下\",{\"1\":{\"1746\":1}}],[\"但是在\",{\"1\":{\"3\":1}}],[\"没听劝还是洗澡洗头了\",{\"1\":{\"1834\":1}}],[\"没带厚衣服\",{\"1\":{\"1825\":1}}],[\"没时间骑长距离\",{\"1\":{\"1796\":1}}],[\"没想到3个小时也就逛完了\",{\"1\":{\"1774\":1}}],[\"没想到mentor竟然就是leader\",{\"1\":{\"1773\":1}}],[\"没达到继续遍历\",{\"1\":{\"1674\":1}}],[\"没过期直接从缓存中取响应结果\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"没超过半数\",{\"1\":{\"1203\":2}}],[\"没提交\",{\"1\":{\"499\":1}}],[\"没有了找工作的压力\",{\"1\":{\"1825\":1}}],[\"没有隐私性\",{\"1\":{\"1790\":1}}],[\"没有新的需求\",{\"1\":{\"1786\":1}}],[\"没有收到意向的一周\",{\"1\":{\"1784\":1}}],[\"没有收到对方的\",{\"1\":{\"1411\":1}}],[\"没有放国歌么得感情\",{\"1\":{\"1772\":1}}],[\"没有唯一的大主教\",{\"1\":{\"1763\":1}}],[\"没有可利用座位\",{\"1\":{\"1736\":2}}],[\"没有\",{\"1\":{\"1686\":1}}],[\"没有堆积的情况下\",{\"1\":{\"1629\":1}}],[\"没有填充和初始化完成\",{\"1\":{\"1599\":1}}],[\"没有被使用的镜像文件\",{\"1\":{\"1634\":1}}],[\"没有被\",{\"1\":{\"1599\":1}}],[\"没有被删除\",{\"1\":{\"1573\":1}}],[\"没有被其它对象指向\",{\"1\":{\"1346\":1}}],[\"没有磁盘\",{\"1\":{\"1571\":1}}],[\"没有视图概念\",{\"1\":{\"1557\":1}}],[\"没有的话就新建\",{\"1\":{\"1514\":1}}],[\"没有其它关联的强引用\",{\"1\":{\"1514\":1}}],[\"没有碎片问题\",{\"1\":{\"1476\":1}}],[\"没有直连\",{\"1\":{\"1423\":1}}],[\"没有响应数据要发送时\",{\"1\":{\"1410\":1}}],[\"没有修改暂存区\",{\"1\":{\"1344\":1}}],[\"没有多余信息\",{\"1\":{\"1329\":1}}],[\"没有多余线程则执行拒绝策略\",{\"1\":{\"1107\":1,\"1511\":1}}],[\"没有记录\",{\"1\":{\"1283\":1}}],[\"没有过多的网络开销等\",{\"1\":{\"1253\":1}}],[\"没有过多的资源投入\",{\"1\":{\"1234\":1}}],[\"没有具体的服务进程\",{\"1\":{\"1224\":1}}],[\"没有好坏\",{\"1\":{\"1206\":1}}],[\"没有任何引用链相连\",{\"1\":{\"1522\":1}}],[\"没有任何成员变量的这种无状态类\",{\"1\":{\"146\":1}}],[\"没有任务需要处理\",{\"1\":{\"1115\":1}}],[\"没有容量\",{\"1\":{\"1107\":1,\"1511\":1}}],[\"没有空间存储\",{\"1\":{\"1077\":1}}],[\"没有空闲的再到回滚段头页面中找\",{\"1\":{\"751\":1}}],[\"没有自旋操作\",{\"1\":{\"1076\":1}}],[\"没有返回值\",{\"1\":{\"1039\":1}}],[\"没有就到二级缓存中取\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"没有就从\",{\"1\":{\"1006\":1}}],[\"没有提供额外的持久化功能\",{\"1\":{\"961\":1}}],[\"没有非法或无效数据\",{\"1\":{\"961\":1}}],[\"没有非阻塞模式\",{\"1\":{\"785\":1}}],[\"没有时间事件到达\",{\"1\":{\"921\":1}}],[\"没有相应的操作\",{\"1\":{\"896\":1}}],[\"没有边界\",{\"1\":{\"845\":1}}],[\"没有成功传递到下一个\",{\"1\":{\"829\":1}}],[\"没有池化\",{\"1\":{\"826\":1}}],[\"没有明显的性能提升\",{\"1\":{\"807\":1}}],[\"没有数据可读时\",{\"1\":{\"783\":1}}],[\"没有数据可读时会暂停线程\",{\"1\":{\"782\":1}}],[\"没有连接建立时\",{\"1\":{\"783\":1}}],[\"没有连接建立时会暂停线程\",{\"1\":{\"782\":1}}],[\"没有剩余空间的碎片区\",{\"1\":{\"693\":1}}],[\"没有主键\",{\"1\":{\"684\":1,\"1557\":1}}],[\"没有开检查选项所以不会判断\",{\"1\":{\"623\":1}}],[\"没有not\",{\"1\":{\"619\":1}}],[\"没有领导的也查询出来\",{\"1\":{\"605\":1}}],[\"没有身份证\",{\"1\":{\"583\":1}}],[\"没有条件语句则会删除整张表的所有数据\",{\"1\":{\"580\":1}}],[\"没有条件语句则会修改整张表的所有数据\",{\"1\":{\"579\":1}}],[\"没有失败重试\",{\"1\":{\"492\":1}}],[\"没有跟进\",{\"1\":{\"383\":1}}],[\"没有找到任何实现类\",{\"1\":{\"383\":1}}],[\"没有热度衰减\",{\"1\":{\"268\":1}}],[\"没有内存碎片\",{\"1\":{\"169\":1}}],[\"没有指定模拟行为的方法\",{\"1\":{\"1708\":1}}],[\"没有指定\",{\"1\":{\"163\":1,\"452\":1}}],[\"没有竞争直接获得锁\",{\"1\":{\"156\":1}}],[\"没有锁竞争带来的开销\",{\"1\":{\"148\":1}}],[\"没有一个线程可以防碍其他线程执行\",{\"1\":{\"134\":1}}],[\"没有对应的监听者则会把事件封装为deadevent\",{\"1\":{\"84\":1}}],[\"没有关联关系可以使用无参的\",{\"1\":{\"73\":1}}],[\"没有错误消息\",{\"1\":{\"59\":1}}],[\"没有丢失\",{\"1\":{\"33\":1}}],[\"没有登录\",{\"1\":{\"27\":2,\"1643\":2}}],[\"没看之前感觉好可怕\",{\"1\":{\"10\":1}}],[\"没入队\",{\"1\":{\"6\":1}}],[\"花了一天时间把这一通代码读下来\",{\"1\":{\"10\":1}}],[\"5px\",{\"1\":{\"1855\":1}}],[\"5角的纸钞\",{\"1\":{\"1836\":1}}],[\"5月\",{\"1\":{\"1815\":1}}],[\"5亿个数中找出中位数\",{\"1\":{\"1658\":1}}],[\"5xx\",{\"1\":{\"1398\":1}}],[\"5500\",{\"1\":{\"1367\":1}}],[\"5g\",{\"1\":{\"1361\":1}}],[\"5v\",{\"0\":{\"1212\":1},\"1\":{\"1212\":1}}],[\"5byte\",{\"1\":{\"913\":1}}],[\"5字节\",{\"1\":{\"892\":2}}],[\"57351\",{\"1\":{\"820\":1}}],[\"57191\",{\"1\":{\"820\":1}}],[\"56字节\",{\"1\":{\"688\":1}}],[\"5672\",{\"1\":{\"417\":1}}],[\"5之后\",{\"1\":{\"678\":1}}],[\"5~8位\",{\"1\":{\"564\":1}}],[\"51200\",{\"1\":{\"1799\":1}}],[\"512b\",{\"1\":{\"1474\":1}}],[\"512\",{\"1\":{\"533\":2}}],[\"5s\",{\"1\":{\"491\":1,\"1878\":1}}],[\"5level\",{\"1\":{\"388\":1}}],[\"5倍左右\",{\"1\":{\"1493\":1}}],[\"5倍\",{\"1\":{\"304\":1}}],[\"50x\",{\"1\":{\"1871\":2}}],[\"504\",{\"1\":{\"1871\":1}}],[\"502\",{\"1\":{\"1871\":1}}],[\"50mm\",{\"1\":{\"1799\":1}}],[\"50亿\",{\"1\":{\"1658\":1}}],[\"503\",{\"1\":{\"1398\":1,\"1871\":1}}],[\"50个分区\",{\"1\":{\"490\":1}}],[\"50\",{\"1\":{\"163\":1,\"822\":1,\"828\":2,\"1263\":1}}],[\"50000\",{\"1\":{\"1112\":1}}],[\"500条\",{\"1\":{\"485\":1}}],[\"500ms\",{\"1\":{\"485\":1}}],[\"500\",{\"1\":{\"83\":1,\"614\":1,\"1398\":1,\"1658\":1,\"1871\":1}}],[\"500px\",{\"1\":{\"0\":1,\"1828\":1}}],[\"59\",{\"1\":{\"129\":4,\"665\":6}}],[\"5\",{\"0\":{\"1857\":1,\"1870\":1},\"1\":{\"10\":1,\"38\":1,\"58\":1,\"70\":6,\"95\":1,\"122\":1,\"129\":2,\"153\":1,\"157\":1,\"159\":2,\"382\":1,\"445\":1,\"455\":1,\"456\":2,\"459\":1,\"462\":1,\"487\":1,\"495\":1,\"505\":1,\"561\":1,\"593\":3,\"631\":1,\"678\":1,\"681\":1,\"685\":1,\"697\":1,\"707\":1,\"772\":1,\"782\":1,\"783\":1,\"786\":1,\"794\":1,\"807\":1,\"808\":1,\"811\":1,\"812\":1,\"831\":1,\"834\":1,\"863\":1,\"993\":1,\"1087\":2,\"1333\":1,\"1341\":1,\"1409\":1,\"1412\":1,\"1413\":1,\"1511\":1,\"1570\":1,\"1634\":1,\"1792\":3,\"1799\":1,\"1878\":2}}],[\"480\",{\"1\":{\"1878\":1}}],[\"480p\",{\"1\":{\"1868\":1,\"1869\":2}}],[\"48\",{\"1\":{\"1868\":12}}],[\"47\",{\"1\":{\"1675\":1}}],[\"46\",{\"1\":{\"1672\":1}}],[\"4个时钟周期\",{\"1\":{\"1434\":1}}],[\"4个字节\",{\"1\":{\"661\":1}}],[\"4个字节的带符号整数\",{\"1\":{\"112\":1}}],[\"4g\",{\"1\":{\"1418\":1}}],[\"443\",{\"1\":{\"1401\":1}}],[\"4xx\",{\"1\":{\"1398\":1}}],[\"4=127\",{\"1\":{\"1196\":1}}],[\"42580217\",{\"1\":{\"1156\":1}}],[\"4位\",{\"1\":{\"976\":1}}],[\"4位长\",{\"1\":{\"892\":1}}],[\"41\",{\"1\":{\"839\":1}}],[\"40分的降国旗\",{\"1\":{\"1772\":1}}],[\"40亿\",{\"1\":{\"1658\":1}}],[\"404\",{\"1\":{\"1398\":1,\"1871\":2,\"1881\":1}}],[\"400\",{\"1\":{\"1398\":1,\"1658\":1}}],[\"4000\",{\"1\":{\"130\":4,\"1799\":1}}],[\"40\",{\"1\":{\"839\":1,\"1077\":1,\"1332\":1,\"1674\":1}}],[\"4352\",{\"1\":{\"839\":1}}],[\"4mb\",{\"1\":{\"828\":2}}],[\"4k\",{\"1\":{\"788\":2,\"1357\":1}}],[\"4kb\",{\"1\":{\"20\":1,\"467\":1,\"1448\":1,\"1474\":1,\"1479\":1}}],[\"4或8个字节\",{\"1\":{\"663\":1}}],[\"4规范\",{\"1\":{\"434\":1}}],[\"45~10\",{\"1\":{\"1729\":1}}],[\"456789\",{\"1\":{\"1687\":1}}],[\"45s\",{\"1\":{\"485\":1}}],[\"45\",{\"1\":{\"417\":1,\"585\":2}}],[\"4999\",{\"1\":{\"1796\":1}}],[\"49\",{\"1\":{\"417\":1}}],[\"49152\",{\"1\":{\"340\":1}}],[\"49151\",{\"1\":{\"340\":1}}],[\"49561445\",{\"1\":{\"10\":1}}],[\"4大类8种\",{\"1\":{\"287\":1}}],[\"4字节单精度浮点数1\",{\"1\":{\"112\":1}}],[\"4bit\",{\"1\":{\"1666\":1}}],[\"4byte\",{\"1\":{\"849\":3}}],[\"4b\",{\"1\":{\"95\":3,\"474\":4}}],[\"4\",{\"0\":{\"22\":1,\"298\":1,\"1856\":1,\"1869\":1},\"1\":{\"10\":1,\"51\":1,\"58\":1,\"69\":1,\"73\":1,\"95\":1,\"122\":1,\"124\":1,\"125\":1,\"129\":1,\"130\":1,\"153\":2,\"240\":1,\"287\":1,\"324\":1,\"376\":2,\"382\":2,\"432\":1,\"456\":1,\"488\":1,\"495\":1,\"561\":2,\"594\":1,\"608\":1,\"640\":2,\"662\":1,\"665\":1,\"729\":1,\"750\":1,\"768\":2,\"782\":1,\"783\":1,\"786\":1,\"799\":1,\"802\":1,\"807\":1,\"812\":1,\"823\":1,\"826\":1,\"831\":1,\"834\":1,\"844\":2,\"848\":3,\"849\":1,\"850\":1,\"863\":1,\"873\":1,\"1067\":2,\"1113\":1,\"1114\":2,\"1197\":1,\"1202\":1,\"1203\":1,\"1329\":2,\"1474\":1,\"1514\":1,\"1574\":1,\"1666\":1,\"1796\":1,\"1826\":1}}],[\"3888\",{\"1\":{\"1796\":1}}],[\"38字节\",{\"1\":{\"688\":1}}],[\"3他们说话的时候\",{\"1\":{\"1767\":1}}],[\"3999\",{\"1\":{\"1796\":2}}],[\"39\",{\"1\":{\"1676\":1,\"1714\":2,\"1715\":2}}],[\"3步重排序\",{\"1\":{\"1645\":1}}],[\"3g\",{\"1\":{\"1444\":2}}],[\"3xx\",{\"1\":{\"1398\":1}}],[\"3pc\",{\"1\":{\"1283\":1,\"1370\":1}}],[\"3rd\",{\"1\":{\"1246\":1}}],[\"3=127\",{\"1\":{\"1196\":1}}],[\"3bits\",{\"1\":{\"1112\":1}}],[\"3字节长有符号整数\",{\"1\":{\"892\":1}}],[\"3+3=9个链表需要维护\",{\"1\":{\"693\":1}}],[\"3个字节\",{\"1\":{\"661\":1}}],[\"3个消费者\",{\"1\":{\"495\":1}}],[\"344\",{\"1\":{\"594\":1}}],[\"35\",{\"1\":{\"583\":2}}],[\"3s\",{\"1\":{\"485\":1}}],[\"3为lz4\",{\"1\":{\"474\":1}}],[\"33554432\",{\"1\":{\"459\":1}}],[\"3306\",{\"1\":{\"340\":1,\"506\":2,\"569\":1}}],[\"318我还没真正走过呢\",{\"1\":{\"1849\":1}}],[\"318\",{\"1\":{\"1827\":1}}],[\"31736\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"31\",{\"1\":{\"129\":4,\"665\":1,\"1409\":1}}],[\"308+120\",{\"1\":{\"1877\":1}}],[\"301\",{\"1\":{\"1398\":1}}],[\"30s\",{\"1\":{\"1264\":1}}],[\"304\",{\"1\":{\"1250\":1,\"1398\":1,\"1399\":1,\"1400\":1}}],[\"300个时钟周期\",{\"1\":{\"1434\":1}}],[\"300km以内\",{\"1\":{\"1360\":1}}],[\"300s\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"3004\",{\"1\":{\"1196\":1}}],[\"3003\",{\"1\":{\"1196\":1}}],[\"3002\",{\"1\":{\"1196\":1}}],[\"3001\",{\"1\":{\"1196\":1}}],[\"300\",{\"1\":{\"855\":1,\"912\":1,\"1464\":1}}],[\"30000\",{\"1\":{\"1125\":1,\"1631\":1}}],[\"3000000\",{\"1\":{\"789\":1}}],[\"3000\",{\"1\":{\"418\":1,\"1188\":2}}],[\"30\",{\"1\":{\"93\":1,\"387\":1,\"576\":2,\"583\":6,\"1259\":1,\"1263\":2,\"1468\":1,\"1582\":1,\"1722\":1,\"1799\":1,\"1828\":1,\"1862\":1}}],[\"30m\",{\"1\":{\"24\":1}}],[\"320\",{\"1\":{\"1854\":1}}],[\"320k\",{\"1\":{\"782\":1}}],[\"32bit\",{\"1\":{\"1204\":2}}],[\"32be0699dd27b410f7c90dada3a6fab17f97899f\",{\"1\":{\"940\":1}}],[\"32位最高寻址4g\",{\"1\":{\"1433\":1}}],[\"32位\",{\"1\":{\"1418\":1,\"1444\":1,\"1464\":1}}],[\"32位系统\",{\"1\":{\"1143\":1}}],[\"32位长\",{\"1\":{\"913\":1}}],[\"32位数\",{\"1\":{\"564\":1}}],[\"32位数据栈容量为1\",{\"1\":{\"207\":1}}],[\"32767\",{\"1\":{\"661\":1}}],[\"32768\",{\"1\":{\"661\":1,\"1464\":1}}],[\"32768~32767\",{\"1\":{\"112\":1}}],[\"32mb\",{\"1\":{\"450\":1}}],[\"32\",{\"1\":{\"14\":1,\"83\":1,\"782\":1,\"892\":1,\"1357\":6,\"1358\":3,\"1422\":1}}],[\"3\",{\"0\":{\"21\":1,\"297\":1,\"329\":1,\"1855\":1,\"1868\":1},\"1\":{\"10\":1,\"42\":1,\"43\":1,\"47\":1,\"48\":1,\"51\":1,\"58\":1,\"66\":1,\"69\":1,\"70\":9,\"79\":1,\"95\":1,\"113\":1,\"119\":2,\"122\":2,\"124\":2,\"125\":1,\"127\":2,\"129\":4,\"130\":1,\"154\":1,\"160\":2,\"161\":2,\"382\":1,\"445\":1,\"456\":3,\"460\":1,\"461\":2,\"488\":1,\"495\":1,\"506\":4,\"546\":1,\"585\":1,\"623\":4,\"663\":1,\"665\":3,\"689\":1,\"729\":1,\"771\":1,\"772\":3,\"774\":1,\"782\":1,\"783\":1,\"786\":1,\"799\":1,\"801\":1,\"807\":1,\"809\":1,\"812\":1,\"823\":1,\"834\":1,\"846\":2,\"849\":1,\"863\":1,\"993\":1,\"1049\":5,\"1050\":1,\"1067\":4,\"1068\":1,\"1106\":1,\"1112\":2,\"1113\":1,\"1114\":2,\"1156\":1,\"1197\":1,\"1202\":1,\"1203\":4,\"1228\":1,\"1263\":1,\"1264\":1,\"1357\":1,\"1358\":2,\"1369\":1,\"1404\":2,\"1409\":1,\"1413\":1,\"1474\":1,\"1514\":2,\"1570\":1,\"1631\":3,\"1687\":1,\"1688\":1,\"1714\":2,\"1715\":2,\"1799\":2,\"1815\":1,\"1860\":1,\"1873\":1}}],[\"360px\",{\"1\":{\"1870\":1}}],[\"360p\",{\"1\":{\"1868\":1,\"1869\":2}}],[\"36进制\",{\"1\":{\"37\":1}}],[\"36\",{\"1\":{\"0\":1,\"129\":4,\"388\":1}}],[\"排列的重点在于任意位置放不同元素产生的序列是不一样的\",{\"1\":{\"1677\":1}}],[\"排列问题不同于子集\",{\"1\":{\"1672\":1}}],[\"排列问题就是从序列中以给定规则取若干元素构成集合的集合\",{\"1\":{\"1669\":1}}],[\"排列\",{\"0\":{\"1672\":1,\"1675\":1,\"1677\":1}}],[\"排列树\",{\"1\":{\"1669\":1}}],[\"排列组合\",{\"0\":{\"1669\":1}}],[\"排列错开来提高可靠性\",{\"1\":{\"472\":1}}],[\"排队升卧铺的人都很善良地让阿姨优先买票\",{\"1\":{\"1833\":1}}],[\"排队队列也已满的情况\",{\"1\":{\"1511\":1}}],[\"排队自旋锁\",{\"1\":{\"10\":1}}],[\"排查是不是频繁创建大对象\",{\"1\":{\"1524\":1}}],[\"排查\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"排查问题\",{\"1\":{\"228\":1}}],[\"排除已删除记录\",{\"1\":{\"690\":1}}],[\"排序算法\",{\"0\":{\"1385\":1}}],[\"排序数组\",{\"1\":{\"989\":1}}],[\"排序前2000000条记录\",{\"1\":{\"618\":1}}],[\"排序方式\",{\"1\":{\"586\":1}}],[\"排序方式2\",{\"1\":{\"586\":1}}],[\"排序方式1\",{\"1\":{\"586\":1}}],[\"排序查询\",{\"0\":{\"586\":1}}],[\"排序字段列表\",{\"1\":{\"581\":1}}],[\"排序规则\",{\"1\":{\"574\":1}}],[\"排序后的分区即\",{\"1\":{\"495\":1}}],[\"排序\",{\"0\":{\"968\":1},\"1\":{\"51\":1,\"129\":1,\"496\":1,\"616\":1,\"651\":1,\"708\":1,\"971\":1,\"1226\":1,\"1566\":1,\"1631\":1,\"1673\":1}}],[\"排他锁互斥\",{\"1\":{\"1560\":1}}],[\"排他锁只有一个线程可以获取\",{\"1\":{\"549\":1}}],[\"排他意向锁和表级共享锁\",{\"1\":{\"560\":1}}],[\"排他两种\",{\"1\":{\"560\":1}}],[\"排他记录锁\",{\"1\":{\"558\":1}}],[\"排他临键锁\",{\"1\":{\"558\":3}}],[\"排他\",{\"1\":{\"6\":1}}],[\"排他节点\",{\"1\":{\"3\":1}}],[\"排他性的拥有者线程\",{\"1\":{\"3\":1}}],[\"不对音频进行编码\",{\"1\":{\"1868\":1}}],[\"不对连接执行提交和回滚\",{\"1\":{\"525\":1}}],[\"不甘没落的北方都市\",{\"1\":{\"1816\":1}}],[\"不花钱走第三方应用的流量会限速\",{\"1\":{\"1811\":1}}],[\"不算方便\",{\"1\":{\"1811\":1}}],[\"不健康的资源\",{\"1\":{\"1805\":1}}],[\"不开会员基本处于不可用的状态\",{\"1\":{\"1805\":1}}],[\"不开启\",{\"1\":{\"675\":1}}],[\"不开启性能监控\",{\"1\":{\"267\":1}}],[\"不开启性能监控模式\",{\"1\":{\"267\":1}}],[\"不到长城非好汉\",{\"1\":{\"1776\":1}}],[\"不然晚上没法跟mentor交差了\",{\"1\":{\"1773\":1}}],[\"不沾点血根本坐不稳\",{\"1\":{\"1767\":1}}],[\"不画十字\",{\"1\":{\"1763\":1}}],[\"不允许候补或申请\",{\"1\":{\"1736\":2}}],[\"不掌握机票核心数据\",{\"1\":{\"1728\":1}}],[\"不应存在读写数据库\",{\"1\":{\"1705\":1}}],[\"不应被中断\",{\"1\":{\"1114\":1}}],[\"不需他人帮助也不会影响到他人\",{\"1\":{\"1705\":1}}],[\"不需要自己去找资源\",{\"1\":{\"1803\":1}}],[\"不需要实例化该类的对象\",{\"1\":{\"1645\":1}}],[\"不需要实例化对象\",{\"1\":{\"1534\":1}}],[\"不需要任何判断\",{\"1\":{\"1628\":1}}],[\"不需要单独部署\",{\"1\":{\"1609\":1}}],[\"不需要获取锁资源\",{\"1\":{\"1515\":1}}],[\"不需要通知其它核心\",{\"1\":{\"1435\":1}}],[\"不需要处理完所有元素就能返回结果\",{\"1\":{\"1068\":1}}],[\"不需要事务管理就是\",{\"1\":{\"1059\":1}}],[\"不需要回表查询\",{\"1\":{\"706\":1}}],[\"不需要人为对其控制\",{\"1\":{\"694\":1}}],[\"不需要额外排序\",{\"1\":{\"616\":1}}],[\"不需要标记消息是否被消费过\",{\"1\":{\"490\":1}}],[\"不需要等数据落盘应答\",{\"1\":{\"460\":1}}],[\"不需要考虑执行先后\",{\"1\":{\"365\":1}}],[\"不需要先执行\",{\"1\":{\"253\":1}}],[\"不需要重新登录认证\",{\"1\":{\"27\":1,\"1643\":1}}],[\"不需要在服务端存储用户登录记录\",{\"1\":{\"26\":1}}],[\"不足以表示原数字每4位1的个数\",{\"1\":{\"1666\":1}}],[\"不足时将进行内存回收\",{\"1\":{\"1446\":1}}],[\"不满足\",{\"1\":{\"1657\":1}}],[\"不满足where条件不参与分组\",{\"1\":{\"585\":1}}],[\"不去管系统资源的使用情况\",{\"1\":{\"1639\":1}}],[\"不去重\",{\"1\":{\"126\":1}}],[\"不必等待\",{\"1\":{\"1636\":1}}],[\"不必等到超时再重传\",{\"1\":{\"1413\":1}}],[\"不依赖输入返回\",{\"1\":{\"1711\":1}}],[\"不依赖maven\",{\"1\":{\"1632\":1}}],[\"不依赖于外层查询\",{\"1\":{\"607\":1}}],[\"不依赖于锁\",{\"1\":{\"365\":1}}],[\"不依赖于对象生命周期\",{\"1\":{\"195\":1}}],[\"不解析\",{\"1\":{\"1608\":1}}],[\"不相同就散列到其它位置上\",{\"1\":{\"1535\":1}}],[\"不相关子查询\",{\"1\":{\"607\":1}}],[\"不一定满足\",{\"1\":{\"1657\":1}}],[\"不一定立即回收\",{\"1\":{\"1524\":1}}],[\"不一致就向后遍历直到找到空槽\",{\"1\":{\"1514\":1}}],[\"不规整的空闲列表法\",{\"1\":{\"1521\":1}}],[\"不容易\",{\"1\":{\"1520\":1}}],[\"不释放锁\",{\"1\":{\"1512\":1}}],[\"不用等待\",{\"1\":{\"1488\":1}}],[\"不用调整代码即可实现分库分表\",{\"1\":{\"653\":1}}],[\"不经过标准库缓存\",{\"1\":{\"1478\":1}}],[\"不做任何处理\",{\"1\":{\"1483\":1}}],[\"不做特殊处理\",{\"1\":{\"1465\":1}}],[\"不做处理\",{\"1\":{\"829\":1}}],[\"不适用计算机密集型的场景\",{\"1\":{\"1488\":1}}],[\"不适用于无亲缘关系的进程之间的通信\",{\"1\":{\"1456\":1}}],[\"不适用于普通文件\",{\"1\":{\"784\":1}}],[\"不适合经常需要范围查询的场景\",{\"1\":{\"1564\":1}}],[\"不适合\",{\"1\":{\"1470\":1}}],[\"不适合大量数据交换\",{\"1\":{\"1462\":1}}],[\"不适合大数据的传输\",{\"1\":{\"1458\":1}}],[\"不适合进程间频繁交换数据\",{\"1\":{\"1457\":1}}],[\"不得不说是有点福气的\",{\"1\":{\"1783\":1}}],[\"不得不使用虚拟的段式内存\",{\"1\":{\"1444\":1}}],[\"不得不循环使用\",{\"1\":{\"741\":1}}],[\"不连续内存空间导致无法加载一个新进程\",{\"1\":{\"1443\":1}}],[\"不灵活且麻烦\",{\"1\":{\"1532\":1}}],[\"不灵活\",{\"1\":{\"1417\":1}}],[\"不安全\",{\"1\":{\"1404\":1}}],[\"不安全操作的方法\",{\"1\":{\"1134\":1}}],[\"不在\",{\"1\":{\"1342\":1}}],[\"不在指定的集合范围内\",{\"1\":{\"609\":1}}],[\"不涉及应用层协议的解析和处理\",{\"1\":{\"1296\":1}}],[\"不涉及数据处理\",{\"1\":{\"802\":1}}],[\"不关心应用协议\",{\"1\":{\"1299\":1}}],[\"不关心应用层协议的具体内容\",{\"1\":{\"1296\":1}}],[\"不关注是什么数据类型\",{\"1\":{\"1126\":1}}],[\"不进行任何业务检查\",{\"1\":{\"1284\":1}}],[\"不合法的直接拦截\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"不合理\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"不要写递归\",{\"1\":{\"1656\":1}}],[\"不要在接口直接返回异常信息\",{\"1\":{\"1539\":1}}],[\"不要在循环中查库\",{\"1\":{\"1245\":1}}],[\"不要产生传递依赖\",{\"1\":{\"1538\":1}}],[\"不要产生部分依赖\",{\"1\":{\"1538\":1}}],[\"不要一上来就把链路占满\",{\"1\":{\"1413\":1}}],[\"不要盲目地认为它一定会正常返回\",{\"1\":{\"1247\":1}}],[\"不要值数据\",{\"1\":{\"305\":1}}],[\"不负责实际的数据写入\",{\"1\":{\"1220\":1}}],[\"不负责由其他格式的文件抽取纯文本文件\",{\"1\":{\"52\":1}}],[\"不参与选举\",{\"1\":{\"1196\":1}}],[\"不参与\",{\"1\":{\"1194\":1}}],[\"不正确使用unsafe类会使得程序出错的概率变大\",{\"1\":{\"1134\":1}}],[\"不提供java的实现\",{\"1\":{\"1130\":1}}],[\"不处理入队任务\",{\"1\":{\"1112\":1}}],[\"不接受新任务\",{\"1\":{\"1112\":2}}],[\"不清除中断标记\",{\"1\":{\"1092\":1}}],[\"不走transactioninterceptor\",{\"1\":{\"1061\":1}}],[\"不放入单例池\",{\"1\":{\"1006\":1}}],[\"不删除数据本身\",{\"1\":{\"1228\":1}}],[\"不删除\",{\"1\":{\"987\":2}}],[\"不删除该元素\",{\"1\":{\"986\":1}}],[\"不按when属性排序\",{\"1\":{\"920\":1}}],[\"不阻塞服务器进程\",{\"1\":{\"917\":1}}],[\"不阻塞的情况\",{\"1\":{\"785\":1}}],[\"不命中次数\",{\"1\":{\"907\":1}}],[\"不额外浪费内存\",{\"1\":{\"900\":1}}],[\"不仅支持阿里云盘\",{\"1\":{\"1807\":1}}],[\"不仅包含了虚拟内存\",{\"1\":{\"1454\":1}}],[\"不仅会消耗系统资源\",{\"1\":{\"1104\":1}}],[\"不仅封装了一个\",{\"1\":{\"1055\":1}}],[\"不仅组合\",{\"1\":{\"1011\":1}}],[\"不仅发送给所有从服务器\",{\"1\":{\"935\":1}}],[\"不仅可以处理\",{\"1\":{\"869\":1}}],[\"不仅有\",{\"1\":{\"822\":1}}],[\"不发生内存拷贝\",{\"1\":{\"832\":1}}],[\"不改变读指针位置\",{\"1\":{\"828\":1}}],[\"不改变写指针位置\",{\"1\":{\"828\":1}}],[\"不改变方法源码的情况下\",{\"1\":{\"349\":1}}],[\"不调用则不会进入下一个出站处理器\",{\"1\":{\"823\":1}}],[\"不调用则不会进入下一个入站处理器\",{\"1\":{\"823\":1}}],[\"不利用\",{\"1\":{\"802\":1}}],[\"不利于随机读写\",{\"1\":{\"1564\":1}}],[\"不利于长作业\",{\"1\":{\"1470\":1}}],[\"不利于短作业\",{\"1\":{\"1470\":1}}],[\"不利于扩展\",{\"1\":{\"327\":1}}],[\"不利于集群的平滑升级\",{\"1\":{\"38\":1}}],[\"不占用\",{\"1\":{\"801\":1,\"802\":2}}],[\"不禁止不可重复读\",{\"1\":{\"754\":1}}],[\"不更新主键的情况\",{\"1\":{\"748\":1}}],[\"不保证可靠传输\",{\"1\":{\"1408\":1}}],[\"不保证值的改变被其他线程立即看到\",{\"1\":{\"1140\":1}}],[\"不保证立即刷新到磁盘\",{\"1\":{\"739\":1,\"1555\":1}}],[\"不保存查询结果\",{\"1\":{\"621\":1}}],[\"不论\",{\"1\":{\"1203\":1}}],[\"不论是否顺序读取\",{\"1\":{\"732\":1}}],[\"不论内连接还是外连接\",{\"1\":{\"713\":1}}],[\"不含控制块空间\",{\"1\":{\"731\":1}}],[\"不含该记录\",{\"1\":{\"556\":1}}],[\"不符合条件\",{\"1\":{\"1669\":1}}],[\"不符合where条件的都不会加入结果集\",{\"1\":{\"713\":1}}],[\"不符合则结束查询\",{\"1\":{\"707\":1}}],[\"不影响结果\",{\"1\":{\"713\":1}}],[\"不影响主程序的稳定性\",{\"1\":{\"134\":1}}],[\"不存放于磁盘\",{\"1\":{\"1474\":1}}],[\"不存储数据\",{\"1\":{\"698\":1}}],[\"不存在随机失败或成功\",{\"1\":{\"1705\":1}}],[\"不存在\",{\"1\":{\"1651\":1}}],[\"不存在时才会设置成功\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"不存在于缓存中\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"不存在则说明该事务已提交\",{\"1\":{\"754\":1,\"1557\":1}}],[\"不存在则返回一个空集合\",{\"1\":{\"67\":1}}],[\"不存在hash冲突的情况下\",{\"1\":{\"698\":1}}],[\"不存在不执行任何操作\",{\"1\":{\"108\":1}}],[\"不确定是\",{\"1\":{\"1811\":1}}],[\"不确定\",{\"1\":{\"688\":3}}],[\"不执行逻辑\",{\"1\":{\"633\":1}}],[\"不及格\",{\"1\":{\"631\":1}}],[\"不取值\",{\"1\":{\"619\":1}}],[\"不使用带条件的count\",{\"1\":{\"619\":1}}],[\"不等于\",{\"1\":{\"583\":1}}],[\"不直观且影响效率\",{\"1\":{\"582\":1}}],[\"不加锁\",{\"1\":{\"558\":1,\"1562\":1}}],[\"不设置\",{\"1\":{\"424\":1}}],[\"不设分代\",{\"1\":{\"179\":1}}],[\"不判断任何键\",{\"1\":{\"414\":1}}],[\"不透明的\",{\"1\":{\"413\":1}}],[\"不太具体\",{\"1\":{\"390\":1}}],[\"不太常用\",{\"1\":{\"75\":1}}],[\"不记录数据本身\",{\"1\":{\"1658\":1}}],[\"不记录\",{\"1\":{\"390\":1}}],[\"不再请求\",{\"1\":{\"1636\":1}}],[\"不再参与任何与数据搬运相关的事情\",{\"1\":{\"1486\":1}}],[\"不再有发送和接收数据的能力\",{\"1\":{\"1420\":1}}],[\"不再是整数或超出long范围\",{\"1\":{\"896\":1}}],[\"不再动态选举\",{\"1\":{\"448\":1}}],[\"不再需要从\",{\"1\":{\"448\":1}}],[\"不再关心下游有哪些系统\",{\"1\":{\"399\":1}}],[\"不再调用其他过滤器\",{\"1\":{\"388\":1}}],[\"不再执行当前的线程\",{\"1\":{\"134\":1}}],[\"不管是半连接\",{\"1\":{\"1414\":1}}],[\"不管是共享意向锁还是排他意向锁\",{\"1\":{\"560\":1}}],[\"不管处理成功与否\",{\"1\":{\"422\":1}}],[\"不管\",{\"1\":{\"382\":1}}],[\"不抛出异常\",{\"1\":{\"365\":1}}],[\"不包含union\",{\"1\":{\"728\":1}}],[\"不包含数据\",{\"1\":{\"675\":1}}],[\"不包含数据表的创建语句\",{\"1\":{\"675\":1}}],[\"不包含数据库的创建语句\",{\"1\":{\"675\":1}}],[\"不包含\",{\"1\":{\"635\":1}}],[\"不包含日期的时间\",{\"1\":{\"353\":1}}],[\"不包含具体时间的日期\",{\"1\":{\"353\":1}}],[\"不包括对常量变量的赋值\",{\"1\":{\"251\":1}}],[\"不针对特定端口\",{\"1\":{\"341\":1}}],[\"不推荐\",{\"1\":{\"332\":1}}],[\"不推荐使用的控制方法\",{\"1\":{\"1098\":1}}],[\"不推荐使用\",{\"1\":{\"162\":1,\"240\":1}}],[\"不重复的\",{\"1\":{\"598\":1}}],[\"不重复\",{\"1\":{\"304\":1,\"305\":3,\"471\":1}}],[\"不重复元素个数\",{\"1\":{\"66\":1}}],[\"不可抗力\",{\"1\":{\"1811\":1}}],[\"不可能有大善人\",{\"1\":{\"1767\":1}}],[\"不可申请和候补\",{\"1\":{\"1740\":1}}],[\"不可售卖状态\",{\"1\":{\"1736\":1}}],[\"不可复选\",{\"1\":{\"1670\":1,\"1671\":1,\"1672\":2,\"1673\":1,\"1674\":1,\"1675\":1}}],[\"不可寻址\",{\"1\":{\"1480\":1}}],[\"不可用于跨文件系统\",{\"1\":{\"1474\":1}}],[\"不可抢占\",{\"1\":{\"1466\":1}}],[\"不可混存\",{\"1\":{\"749\":1}}],[\"不可重复读问题\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1}}],[\"不可重复读\",{\"1\":{\"736\":2,\"737\":1,\"1035\":1,\"1275\":1,\"1551\":1,\"1552\":1,\"1612\":1}}],[\"不可以读取该状态数据\",{\"1\":{\"1435\":1}}],[\"不可以访问\",{\"1\":{\"754\":1,\"1557\":1}}],[\"不可以访问该版本\",{\"1\":{\"754\":1,\"1557\":1}}],[\"不可以对元数据进行写入操作\",{\"1\":{\"553\":1}}],[\"不可以被继承\",{\"1\":{\"352\":1}}],[\"不可以直接访问外部类实例成员\",{\"1\":{\"295\":1}}],[\"不可变\",{\"0\":{\"146\":1},\"1\":{\"146\":1}}],[\"不可变集合\",{\"1\":{\"64\":1,\"304\":1}}],[\"不可变对象\",{\"1\":{\"1536\":1}}],[\"不可变对象不需要实现可变对象的复制\",{\"1\":{\"64\":1}}],[\"不可变对象在创建后不会发生变化\",{\"1\":{\"64\":1}}],[\"不可变对象是线程安全的\",{\"1\":{\"64\":1}}],[\"不可变的定义有多好\",{\"1\":{\"10\":1}}],[\"不完全保证合法\",{\"1\":{\"250\":1}}],[\"不输出主类名\",{\"1\":{\"229\":1}}],[\"不是自己\",{\"1\":{\"1515\":1}}],[\"不是由内核管理的线程\",{\"1\":{\"1451\":1}}],[\"不是系统调用\",{\"1\":{\"1445\":1}}],[\"不是数据结构\",{\"1\":{\"1065\":1}}],[\"不是线程安全的\",{\"1\":{\"1045\":1}}],[\"不是则置\",{\"1\":{\"882\":1}}],[\"不是\",{\"1\":{\"583\":1,\"818\":1}}],[\"不是消息的\",{\"1\":{\"478\":1}}],[\"不是字面量\",{\"1\":{\"301\":1}}],[\"不是对象\",{\"1\":{\"224\":1}}],[\"不是表头\",{\"1\":{\"196\":1}}],[\"不属于\",{\"1\":{\"212\":1}}],[\"不断分配小空间\",{\"1\":{\"1445\":1}}],[\"不断从任务队列里获取任务\",{\"1\":{\"1115\":1}}],[\"不断循环从\",{\"1\":{\"1115\":1}}],[\"不断循环\",{\"1\":{\"1091\":1}}],[\"不断循环处理\",{\"1\":{\"188\":1}}],[\"不断地从\",{\"1\":{\"196\":2}}],[\"不为null表示当前节点正将对应的槽迁移至指向的clusternode\",{\"1\":{\"946\":1}}],[\"不为null表示当前节点正从指向的clusternode导入对应的槽\",{\"1\":{\"946\":1}}],[\"不为null\",{\"1\":{\"619\":1}}],[\"不为\",{\"1\":{\"188\":1}}],[\"不支持复杂关系查询\",{\"1\":{\"1543\":1}}],[\"不支持全文检索\",{\"1\":{\"1541\":1}}],[\"不支持网络\",{\"1\":{\"1488\":1}}],[\"不支持前向保密\",{\"1\":{\"1402\":1}}],[\"不支持范围查询\",{\"1\":{\"697\":1,\"698\":1}}],[\"不支持行锁\",{\"1\":{\"679\":1,\"681\":1}}],[\"不支持外键\",{\"1\":{\"679\":1}}],[\"不支持事务\",{\"1\":{\"679\":1}}],[\"不支持语句级触发\",{\"1\":{\"636\":1}}],[\"不支持\",{\"1\":{\"435\":3,\"618\":1,\"697\":5,\"1541\":2}}],[\"不支持返回值\",{\"1\":{\"163\":1}}],[\"不支持分词\",{\"1\":{\"36\":1}}],[\"不限制\",{\"1\":{\"122\":2}}],[\"不带local导出到hdfs\",{\"1\":{\"121\":1}}],[\"不会因为资源失效就消失不见\",{\"1\":{\"1811\":1}}],[\"不会\",{\"1\":{\"1520\":1}}],[\"不会发生内核缓存和用户程序之间数据复制\",{\"1\":{\"1478\":1}}],[\"不会发送任何请求\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"不会经历四次挥手的过程\",{\"1\":{\"1420\":1}}],[\"不会破坏服务器上的资源\",{\"1\":{\"1405\":1}}],[\"不会影响其它信息\",{\"1\":{\"1323\":1}}],[\"不会影响已提交的\",{\"1\":{\"1319\":1}}],[\"不会等到所有的\",{\"1\":{\"1205\":1}}],[\"不会改投\",{\"1\":{\"1203\":1}}],[\"不会释放任何\",{\"1\":{\"1095\":1}}],[\"不会释放锁资源\",{\"1\":{\"139\":1,\"365\":1}}],[\"不会保存数据\",{\"1\":{\"1065\":1}}],[\"不会结束在中间某个环节\",{\"1\":{\"1032\":1}}],[\"不会中断地\",{\"1\":{\"958\":1}}],[\"不会中断也不会抢占\",{\"1\":{\"921\":1}}],[\"不会产生不可预测的暂停\",{\"1\":{\"1136\":1}}],[\"不会产生内存复制\",{\"1\":{\"833\":1}}],[\"不会产生outofmemoryerror\",{\"1\":{\"202\":1}}],[\"不会抛异常\",{\"1\":{\"822\":1}}],[\"不会使用\",{\"1\":{\"799\":1}}],[\"不会使索引失效\",{\"1\":{\"606\":1}}],[\"不会阻塞主线程\",{\"1\":{\"1576\":1}}],[\"不会阻塞\",{\"1\":{\"785\":1}}],[\"不会受\",{\"1\":{\"770\":1}}],[\"不会让线程吊死在一个\",{\"1\":{\"765\":1}}],[\"不会自动缓冲数据\",{\"1\":{\"760\":1}}],[\"不会自动合并区间\",{\"1\":{\"70\":1}}],[\"不会直接操作磁盘\",{\"1\":{\"638\":1}}],[\"不会限制其它事务在同一间隙上加任何行锁\",{\"1\":{\"556\":1}}],[\"不会接收任何消息\",{\"1\":{\"481\":1}}],[\"不会导致不可用\",{\"1\":{\"435\":1}}],[\"不会丢失数据\",{\"1\":{\"435\":1}}],[\"不会投递给别人\",{\"1\":{\"422\":1}}],[\"不会打印日志\",{\"1\":{\"382\":1}}],[\"不会乱码\",{\"1\":{\"315\":1}}],[\"不会提供任何返回值\",{\"1\":{\"206\":1}}],[\"不会被回收\",{\"1\":{\"154\":1}}],[\"不会将写屏障之前的代码排在写屏障之后\",{\"1\":{\"145\":1}}],[\"不会将读屏障之后的代码排在读屏障之前\",{\"1\":{\"145\":1}}],[\"不会占用\",{\"1\":{\"139\":1}}],[\"不会立即释放cpu和锁资源\",{\"1\":{\"139\":1}}],[\"不会同步修改hdfs路径吗\",{\"1\":{\"118\":1}}],[\"不会在hdfs对数据库所在目录进行改名\",{\"1\":{\"109\":1}}],[\"不会嵌套包装\",{\"1\":{\"58\":1}}],[\"不能是\",{\"1\":{\"1712\":6}}],[\"不能访问非静态成员变量和方法\",{\"1\":{\"1534\":1}}],[\"不能交互的类\",{\"1\":{\"1503\":1}}],[\"不能互相访问\",{\"1\":{\"1455\":1}}],[\"不能保证客户端确认了服务端的序列号\",{\"1\":{\"1409\":1}}],[\"不能保存大量信息\",{\"1\":{\"20\":1}}],[\"不能部分通配\",{\"1\":{\"1351\":1}}],[\"不能修改已有数据\",{\"1\":{\"1218\":1}}],[\"不能满足某些大数据包的需求\",{\"1\":{\"842\":1}}],[\"不能区分成功失败\",{\"1\":{\"822\":1}}],[\"不能太大\",{\"1\":{\"788\":1}}],[\"不能被多个\",{\"1\":{\"788\":1}}],[\"不能写\",{\"1\":{\"552\":1}}],[\"不能重复调用\",{\"1\":{\"1090\":1}}],[\"不能重复\",{\"1\":{\"445\":1}}],[\"不能跨级\",{\"1\":{\"357\":2}}],[\"不能约束具体数据类型\",{\"1\":{\"357\":1}}],[\"不能直接打开\",{\"1\":{\"776\":1}}],[\"不能直接访问内核资源\",{\"1\":{\"279\":1}}],[\"不能直接操作主内存\",{\"1\":{\"142\":1}}],[\"不能等待老年代快满的时候再回收\",{\"1\":{\"176\":1}}],[\"不能解决多线程指令交错产生的并发问题\",{\"1\":{\"145\":1}}],[\"不能\",{\"1\":{\"67\":1}}],[\"不过很多都看不到\",{\"1\":{\"1847\":1}}],[\"不过很贵就是了\",{\"1\":{\"1808\":1}}],[\"不过下车后还是朝我们挥了挥手\",{\"1\":{\"1846\":1}}],[\"不过在经过唐古拉山观景台的时候\",{\"1\":{\"1845\":1}}],[\"不过在读王小波的时候\",{\"1\":{\"1817\":1}}],[\"不过晚上还是和fy\",{\"1\":{\"1842\":1}}],[\"不过我又对珠峰有那么一点点的执念\",{\"1\":{\"1840\":1}}],[\"不过直到今天\",{\"1\":{\"1837\":1}}],[\"不过氛围感很好\",{\"1\":{\"1834\":1}}],[\"不过布达拉宫和大昭寺附近也是人头攒动\",{\"1\":{\"1834\":1}}],[\"不过西北面食的油辣子是真的香\",{\"1\":{\"1833\":1}}],[\"不过一年一次就够了\",{\"1\":{\"1827\":1}}],[\"不过今年挑战了骑行\",{\"1\":{\"1827\":1}}],[\"不过今年最喜欢的还是\",{\"1\":{\"1817\":1}}],[\"不过苹果的软件生态还是最强的护城河\",{\"1\":{\"1819\":1}}],[\"不过跑的少了体脂也跟着上来了\",{\"1\":{\"1818\":1}}],[\"不过还是更喜欢音乐节那种蹦迪氛围\",{\"1\":{\"1817\":1}}],[\"不过还只是浅浅骑了两次\",{\"1\":{\"1796\":1}}],[\"不过实习的日子让我明白\",{\"1\":{\"1816\":1}}],[\"不过资源库的资源是需要维护的\",{\"1\":{\"1809\":1}}],[\"不过使用上需要一定的门槛\",{\"1\":{\"1807\":1}}],[\"不过好在目前阿里云盘的第三方接口还没有限速\",{\"1\":{\"1807\":1}}],[\"不过好像是盗版\",{\"1\":{\"1796\":1}}],[\"不过官方客户端还是要开会员才能原画播放视频\",{\"1\":{\"1806\":1}}],[\"不过最大的问题还是资源容易被封\",{\"1\":{\"1805\":1}}],[\"不过隐私安全问题很难保证\",{\"1\":{\"1804\":1}}],[\"不过问题不大\",{\"1\":{\"1796\":1}}],[\"不过借着这辆小破车学会了基本的变速啥的\",{\"1\":{\"1796\":1}}],[\"不过当着他的面还是不好意思\",{\"1\":{\"1786\":1}}],[\"不过也着实就纠结了好久\",{\"1\":{\"1796\":1}}],[\"不过也快离职了\",{\"1\":{\"1785\":1}}],[\"不过也可以显式声明指定版本以避免\",{\"1\":{\"382\":1}}],[\"不过确实如师兄所言\",{\"1\":{\"1775\":1}}],[\"不过mockito对于final\",{\"1\":{\"1707\":1}}],[\"不过会解析成\",{\"1\":{\"1422\":1}}],[\"不过呢\",{\"1\":{\"1240\":1}}],[\"不过由于架构老\",{\"1\":{\"1221\":1}}],[\"不过阿里巴巴开发规约里不建议使用\",{\"1\":{\"1110\":1}}],[\"不过如果中途任务出现异常\",{\"1\":{\"1110\":1}}],[\"不过如果设置了\",{\"1\":{\"511\":1}}],[\"不过\",{\"1\":{\"1096\":1,\"1406\":1,\"1629\":1}}],[\"不过目前redis仅有servercron一个时间事件\",{\"1\":{\"920\":1}}],[\"不过并不常用\",{\"1\":{\"775\":1}}],[\"不过每个\",{\"1\":{\"524\":1}}],[\"不过这次在兰州中转\",{\"1\":{\"1848\":1}}],[\"不过这几天下来身体适应了很多\",{\"1\":{\"1846\":1}}],[\"不过这几年迅雷的封禁\",{\"1\":{\"1810\":1}}],[\"不过这里就只简单聊聊\",{\"1\":{\"385\":1}}],[\"不过这三者全都已经被官方废弃了\",{\"1\":{\"38\":1}}],[\"不过是为虚拟机使用到的\",{\"1\":{\"209\":1}}],[\"不过是洒洒水了~\",{\"1\":{\"9\":1}}],[\"不怕它莫名其妙冒出个子类或者中途在某个地方改了\",{\"1\":{\"10\":1}}],[\"不同桌的藏族大叔大妈们都能互相说笑说再见\",{\"1\":{\"1837\":1}}],[\"不同代理人通过不同gds看到的库存信息就会不一样\",{\"1\":{\"1734\":1}}],[\"不同航班组合就有不同的最低价\",{\"1\":{\"1732\":1}}],[\"不同座舱布局\",{\"1\":{\"1730\":1}}],[\"不同渠道的数据成本不一样\",{\"1\":{\"1728\":1}}],[\"不同点\",{\"1\":{\"1636\":1}}],[\"不同与其它版本控制记录文件修改的增量\",{\"1\":{\"1633\":1}}],[\"不同隔离级别使用的锁不一样\",{\"1\":{\"1561\":1}}],[\"不同隔离级别\",{\"1\":{\"1557\":1}}],[\"不同节点上的数据可能出现不一致\",{\"1\":{\"1277\":1}}],[\"不同节点间数据可能不一致\",{\"1\":{\"1207\":1}}],[\"不同于湖南的辣\",{\"1\":{\"1848\":1}}],[\"不同于数据对象\",{\"1\":{\"1351\":1}}],[\"不同于业务数据的缓存\",{\"1\":{\"1238\":1}}],[\"不同于\",{\"1\":{\"1218\":1,\"1284\":1,\"1337\":1}}],[\"不同于堆内存由\",{\"1\":{\"1136\":1}}],[\"不同于传统的关系型数据库\",{\"1\":{\"961\":1}}],[\"不同于面向流的io中将数据直接读\",{\"1\":{\"324\":1}}],[\"不同类型的消息内容不同\",{\"1\":{\"949\":1}}],[\"不同类型的同步器只需要实现获取锁和释放锁的逻辑即可\",{\"1\":{\"2\":1}}],[\"不同事务对应不同的页面链表\",{\"1\":{\"749\":1}}],[\"不同目录下的配置文件有优先级顺序\",{\"1\":{\"671\":1}}],[\"不同存储引擎的\",{\"1\":{\"619\":1}}],[\"不同数据库有不同实现\",{\"1\":{\"587\":1}}],[\"不同分区的\",{\"1\":{\"472\":1}}],[\"不同线程访问的是不同资源\",{\"1\":{\"154\":1,\"1514\":1}}],[\"不同的舱位代表了不同的折扣\",{\"1\":{\"1739\":1}}],[\"不同的机型有不同的飞行性能\",{\"1\":{\"1730\":1}}],[\"不同的依赖范围\",{\"1\":{\"1632\":1}}],[\"不同的数据节点要为数据生成全局唯一主键\",{\"1\":{\"1622\":1}}],[\"不同的业务使用不同的数据库\",{\"1\":{\"1564\":1}}],[\"不同的负载均衡算法适用的业务场景也不同的\",{\"1\":{\"1489\":1}}],[\"不同的段有不同的属性\",{\"1\":{\"1443\":1}}],[\"不同的\",{\"1\":{\"1404\":1}}],[\"不同的并发队列对系统行为和性能的影响均不同\",{\"1\":{\"1107\":1}}],[\"不同的回收策略\",{\"1\":{\"908\":1}}],[\"不同的链路设备的\",{\"1\":{\"839\":1}}],[\"不同的条件子句\",{\"1\":{\"713\":1}}],[\"不同的存储引擎支持不同的索引结构\",{\"1\":{\"697\":1}}],[\"不同的存储引擎具有不同的功能\",{\"1\":{\"570\":1}}],[\"不同的消息可以并行写入不同的partition中\",{\"1\":{\"451\":1}}],[\"不同的节点会负责不同的角色\",{\"1\":{\"33\":1}}],[\"不同的同步器主要的区别就在于对队列同步状态的不同定义\",{\"1\":{\"9\":1}}],[\"不同服务无法共享\",{\"1\":{\"17\":1}}],[\"非要自己定义个版本干啥子\",{\"1\":{\"1779\":1}}],[\"非主键\",{\"1\":{\"1545\":1}}],[\"非主键生成的索引\",{\"1\":{\"699\":1}}],[\"非聚集索引\",{\"1\":{\"1545\":1}}],[\"非结构化数据\",{\"1\":{\"1543\":1}}],[\"非运行时异常\",{\"1\":{\"1533\":1}}],[\"非直接\",{\"1\":{\"1478\":2}}],[\"非缓冲\",{\"1\":{\"1478\":2}}],[\"非连续存放\",{\"1\":{\"1476\":1}}],[\"非抢占式\",{\"1\":{\"1470\":1}}],[\"非法访问会导致内存的不确定性\",{\"1\":{\"1465\":1}}],[\"非活跃\",{\"1\":{\"1448\":1}}],[\"非活跃区\",{\"1\":{\"1259\":1}}],[\"非对称加密算法\",{\"1\":{\"1401\":1}}],[\"非0值退出将拒绝推送更新\",{\"1\":{\"1345\":1}}],[\"非0值退出将中止变基\",{\"1\":{\"1345\":1}}],[\"非0值退出将放弃提交\",{\"1\":{\"1345\":1}}],[\"非故障的节点在合理的时间内返回合理的响应\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"非核心线程的\",{\"1\":{\"1115\":1,\"1511\":1}}],[\"非短路\",{\"1\":{\"1068\":1}}],[\"非static\",{\"1\":{\"1061\":1}}],[\"非代理\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"非初次复制时\",{\"1\":{\"935\":1}}],[\"非ae\",{\"1\":{\"920\":1}}],[\"非永久性数据\",{\"0\":{\"721\":1}}],[\"非永久性统计数据\",{\"1\":{\"719\":1}}],[\"非覆盖索引查询示意\",{\"1\":{\"706\":1}}],[\"非叶子结点中的记录头record\",{\"1\":{\"698\":1}}],[\"非叶子节点只存放下一层的索引\",{\"1\":{\"1546\":1}}],[\"非叶子节点仅作为索引\",{\"1\":{\"698\":1}}],[\"非叶子节点和叶子节点都会存放实际数据\",{\"1\":{\"698\":1}}],[\"非叶子节点也有独有的区\",{\"1\":{\"694\":1}}],[\"非null的变长字段\",{\"1\":{\"684\":1}}],[\"非空约束\",{\"1\":{\"598\":1}}],[\"非池化\",{\"1\":{\"526\":1,\"826\":1}}],[\"非线程安全\",{\"1\":{\"507\":1}}],[\"非常的黑暗\",{\"1\":{\"1837\":1}}],[\"非常频繁\",{\"1\":{\"1524\":1}}],[\"非常类似\",{\"1\":{\"1170\":1}}],[\"非常不经济\",{\"1\":{\"839\":1}}],[\"非常大的blob\",{\"1\":{\"664\":1}}],[\"非常小的blob\",{\"1\":{\"664\":1}}],[\"非常具体\",{\"1\":{\"390\":1}}],[\"非常灵活\",{\"1\":{\"349\":1}}],[\"非\",{\"1\":{\"188\":1,\"583\":1,\"1446\":1,\"1712\":10}}],[\"非必须的对象缓存\",{\"1\":{\"183\":1}}],[\"非必选\",{\"1\":{\"24\":1}}],[\"非公平锁则不管队列中是否有其他等待的节点\",{\"1\":{\"1518\":1}}],[\"非公平锁则不考虑等待顺序\",{\"1\":{\"1518\":1}}],[\"非公平锁实现\",{\"1\":{\"9\":1}}],[\"非公平\",{\"1\":{\"156\":1,\"157\":1}}],[\"非阻塞io\",{\"1\":{\"1571\":1}}],[\"非阻塞队列\",{\"1\":{\"1499\":2}}],[\"非阻塞模式下\",{\"1\":{\"783\":2,\"789\":1}}],[\"非阻塞\",{\"0\":{\"781\":1,\"783\":1},\"1\":{\"134\":1,\"760\":1,\"822\":2,\"1171\":1,\"1478\":3}}],[\"非负值表示正常\",{\"1\":{\"3\":1}}],[\"次遍历文件描述符集合\",{\"1\":{\"1487\":1}}],[\"次数增加\",{\"1\":{\"1546\":1}}],[\"次数增加而增加\",{\"1\":{\"6\":1}}],[\"次数为\",{\"1\":{\"450\":1}}],[\"次\",{\"1\":{\"9\":1,\"799\":2,\"801\":1,\"802\":1,\"1077\":2,\"1409\":2,\"1487\":1}}],[\"vf\",{\"1\":{\"1878\":2}}],[\"vfs\",{\"1\":{\"1474\":1}}],[\"v=128\",{\"1\":{\"1878\":1}}],[\"v=ijvr0vpsn\",{\"1\":{\"1877\":4}}],[\"v=协议版本\",{\"1\":{\"1862\":1}}],[\"v=spf1\",{\"1\":{\"1792\":1}}],[\"vr\",{\"1\":{\"1799\":1}}],[\"vruntime\",{\"1\":{\"1436\":1}}],[\"v3\",{\"1\":{\"1791\":1}}],[\"v4\",{\"1\":{\"1791\":2}}],[\"vuepress\",{\"1\":{\"1790\":1,\"1791\":5}}],[\"v加1\",{\"1\":{\"1463\":1}}],[\"v必须成对出现\",{\"1\":{\"1460\":1}}],[\"v1\",{\"1\":{\"1329\":3,\"1351\":1}}],[\"vcs\",{\"1\":{\"1309\":1}}],[\"vport\",{\"1\":{\"1301\":2}}],[\"vlq\",{\"1\":{\"1129\":1}}],[\"v数据库服务器\",{\"1\":{\"907\":1}}],[\"vs=vip+vport+protocol\",{\"1\":{\"1301\":1}}],[\"vs\",{\"0\":{\"781\":1},\"1\":{\"760\":1,\"826\":2,\"1301\":1}}],[\"vv\",{\"1\":{\"643\":1,\"1333\":1}}],[\"videplayer\",{\"1\":{\"1855\":1,\"1856\":1}}],[\"video>\",{\"1\":{\"1870\":1}}],[\"videoplayer\",{\"1\":{\"1870\":2}}],[\"videotrack\",{\"1\":{\"1857\":1}}],[\"videodeviceid\",{\"1\":{\"1854\":2}}],[\"video\",{\"1\":{\"667\":1,\"1854\":1,\"1858\":1,\"1870\":1}}],[\"vidhub都是通过第三方去连接自己的网盘资源\",{\"1\":{\"1809\":1}}],[\"vidhub新版本也开始收费了\",{\"1\":{\"1808\":1}}],[\"vidhub\",{\"0\":{\"1808\":1},\"1\":{\"1811\":1}}],[\"vip\",{\"1\":{\"1301\":1}}],[\"vim\",{\"0\":{\"1689\":1},\"1\":{\"1150\":1,\"1155\":1}}],[\"visitfile\",{\"1\":{\"779\":2}}],[\"visualvm可以监视java应用程序的垃圾回收情况\",{\"1\":{\"237\":1}}],[\"visualvm可以监视java应用程序中的线程状态\",{\"1\":{\"237\":1}}],[\"visualvm可以生成java应用程序的堆转储文件\",{\"1\":{\"237\":1}}],[\"visualvm集成了多种性能分析工具\",{\"1\":{\"237\":1}}],[\"visualvm提供了一个直观的图形化界面\",{\"1\":{\"237\":1}}],[\"visualvm是一个基于插件的可扩展应用程序\",{\"1\":{\"237\":1}}],[\"visualvm是一个基于java的图形化应用程序\",{\"1\":{\"237\":1}}],[\"visualvm是一款功能强大的java监控和调试工具\",{\"1\":{\"237\":1}}],[\"visualvm\",{\"0\":{\"237\":1},\"1\":{\"1367\":1,\"1529\":1}}],[\"viewresolver\",{\"1\":{\"1605\":1}}],[\"view\",{\"1\":{\"621\":1,\"622\":8,\"623\":3,\"1604\":1}}],[\"virtual\",{\"1\":{\"203\":1,\"413\":1,\"417\":1,\"1301\":3}}],[\"via\",{\"1\":{\"90\":1}}],[\"vmstat\",{\"1\":{\"1631\":1}}],[\"vm参数指定是否池化\",{\"1\":{\"826\":1}}],[\"vmid\",{\"1\":{\"230\":2}}],[\"vm\",{\"1\":{\"184\":2,\"196\":2,\"434\":1,\"1088\":1,\"1135\":2,\"1446\":3,\"1464\":1,\"1571\":1,\"1634\":1}}],[\"velocity\",{\"1\":{\"1212\":1}}],[\"vector相比于arraylist\",{\"1\":{\"984\":1}}],[\"vector\",{\"1\":{\"983\":1}}],[\"vercel\",{\"0\":{\"1792\":1},\"1\":{\"1792\":4}}],[\"verification\",{\"1\":{\"1527\":1}}],[\"verifyorder\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"verifytimes\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"verify\",{\"1\":{\"1347\":1,\"1714\":13,\"1715\":13}}],[\"veracity\",{\"1\":{\"1212\":1}}],[\"ver\",{\"1\":{\"848\":1}}],[\"version=\",{\"1\":{\"357\":1,\"506\":2}}],[\"version2子目录下的\",{\"1\":{\"1170\":1}}],[\"version2\",{\"1\":{\"90\":1}}],[\"version\",{\"1\":{\"90\":1,\"92\":1,\"95\":1,\"99\":1,\"240\":3,\"465\":2,\"752\":1,\"849\":2,\"913\":1,\"1168\":1,\"1175\":1,\"1176\":1,\"1329\":1,\"1632\":1,\"1634\":1,\"1707\":1,\"1791\":2}}],[\"version>\",{\"1\":{\"24\":1,\"382\":8,\"383\":1,\"455\":1,\"487\":1,\"505\":2,\"810\":1,\"1179\":3,\"1707\":1}}],[\"vetor\",{\"1\":{\"162\":1}}],[\"v2\",{\"1\":{\"130\":1,\"1239\":1,\"1344\":1,\"1791\":1}}],[\"vavrdelegate\",{\"1\":{\"1059\":1}}],[\"vavrpresent\",{\"1\":{\"1059\":1}}],[\"variety\",{\"1\":{\"1212\":1}}],[\"variables\",{\"1\":{\"642\":1,\"643\":3,\"644\":1,\"678\":1,\"1148\":1,\"1791\":1}}],[\"variable\",{\"0\":{\"1666\":1},\"1\":{\"348\":1,\"671\":1,\"976\":1,\"1463\":1}}],[\"var0\",{\"1\":{\"1015\":4,\"1016\":2}}],[\"var3\",{\"1\":{\"1015\":4}}],[\"var2\",{\"1\":{\"1015\":4}}],[\"var10000\",{\"1\":{\"1016\":5}}],[\"var1\",{\"1\":{\"1015\":3,\"1016\":3}}],[\"varbinary\",{\"1\":{\"664\":1}}],[\"varargs\",{\"1\":{\"263\":1}}],[\"var\",{\"1\":{\"148\":1,\"476\":5,\"528\":1,\"1854\":1,\"1858\":1,\"1859\":2,\"1870\":2}}],[\"varchar类型最多占用65535字节\",{\"1\":{\"686\":1}}],[\"varchar\",{\"1\":{\"112\":1,\"130\":5,\"521\":1,\"576\":2,\"598\":1,\"631\":1,\"634\":4,\"663\":1,\"707\":1,\"1357\":6,\"1358\":3}}],[\"val1\",{\"1\":{\"596\":2}}],[\"valid\",{\"1\":{\"1435\":1}}],[\"validmessages\",{\"1\":{\"476\":5}}],[\"validatemessagesandassignoffsets\",{\"1\":{\"476\":1}}],[\"validate\",{\"1\":{\"158\":1,\"1148\":10,\"1608\":1}}],[\"val>>这样的形式\",{\"1\":{\"69\":1}}],[\"vallist\",{\"1\":{\"67\":1}}],[\"val\",{\"1\":{\"60\":1,\"310\":1,\"671\":1,\"1002\":6,\"1368\":4,\"1497\":1}}],[\"valueoperations<string\",{\"1\":{\"1368\":1}}],[\"valueof\",{\"1\":{\"14\":1,\"15\":1,\"351\":1,\"797\":1}}],[\"value>\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"value是数据库连接connectionholder\",{\"1\":{\"1045\":1,\"1383\":1}}],[\"value是用户的资料\",{\"1\":{\"477\":1}}],[\"value两个注解\",{\"1\":{\"1025\":1}}],[\"value部分\",{\"1\":{\"913\":1}}],[\"value结构\",{\"1\":{\"882\":1}}],[\"value表存储在内存或硬盘\",{\"1\":{\"619\":1}}],[\"value2\",{\"1\":{\"596\":1,\"632\":1}}],[\"value1\",{\"1\":{\"596\":1,\"632\":1}}],[\"value=景点id\",{\"1\":{\"1361\":1}}],[\"value=\",{\"1\":{\"506\":4,\"518\":2,\"519\":2,\"522\":1,\"523\":1,\"524\":5,\"531\":2,\"1855\":5}}],[\"valuebytes\",{\"1\":{\"453\":2}}],[\"values\",{\"1\":{\"129\":1,\"515\":1,\"530\":1,\"578\":4,\"623\":1,\"634\":1,\"1226\":1,\"1269\":1,\"1613\":1}}],[\"values取出全部values\",{\"1\":{\"122\":1}}],[\"value类型>\",{\"1\":{\"122\":1}}],[\"value可以任意类型\",{\"1\":{\"112\":1}}],[\"valuegraph\",{\"1\":{\"75\":1}}],[\"value\",{\"1\":{\"9\":1,\"51\":1,\"58\":9,\"67\":2,\"68\":2,\"70\":1,\"73\":3,\"74\":2,\"112\":1,\"118\":6,\"119\":2,\"120\":2,\"130\":3,\"154\":6,\"332\":1,\"348\":1,\"450\":1,\"452\":3,\"453\":4,\"456\":1,\"457\":1,\"474\":2,\"477\":1,\"488\":1,\"490\":1,\"530\":3,\"541\":2,\"596\":1,\"632\":1,\"634\":4,\"788\":1,\"827\":1,\"828\":9,\"913\":5,\"975\":1,\"1002\":4,\"1025\":1,\"1059\":1,\"1091\":1,\"1107\":1,\"1110\":4,\"1136\":2,\"1212\":1,\"1234\":1,\"1236\":1,\"1263\":2,\"1269\":1,\"1368\":1,\"1400\":1,\"1514\":5,\"1582\":2,\"1595\":1,\"1608\":1,\"1613\":1,\"1651\":10,\"1664\":1,\"1791\":1,\"1855\":1}}],[\"v\",{\"1\":{\"79\":1,\"122\":1,\"148\":4,\"154\":2,\"229\":1,\"452\":3,\"622\":1,\"623\":13,\"643\":1,\"1016\":2,\"1175\":2,\"1176\":2,\"1326\":1,\"1333\":1,\"1460\":1,\"1634\":1,\"1655\":1,\"1688\":1,\"1735\":1,\"1862\":1,\"1868\":6}}],[\"v>>\",{\"1\":{\"69\":2}}],[\"v>\",{\"1\":{\"69\":2,\"73\":3,\"305\":1,\"509\":2}}],[\"v5\",{\"1\":{\"15\":1}}],[\"voter\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"volume\",{\"1\":{\"1212\":1,\"1634\":1}}],[\"volatile关键字的作用有两个\",{\"1\":{\"1507\":1}}],[\"volatile\",{\"0\":{\"145\":1,\"1507\":1},\"1\":{\"3\":6,\"137\":2,\"143\":3,\"145\":9,\"150\":1,\"184\":1,\"187\":2,\"196\":1,\"362\":1,\"476\":1,\"791\":1,\"1087\":7,\"1096\":2,\"1114\":1,\"1140\":1,\"1259\":2,\"1497\":1,\"1506\":2,\"1507\":1,\"1574\":4,\"1645\":2}}],[\"void\",{\"1\":{\"7\":1,\"8\":3,\"14\":1,\"24\":1,\"77\":3,\"78\":3,\"83\":1,\"84\":3,\"90\":1,\"93\":2,\"98\":1,\"183\":1,\"184\":1,\"188\":4,\"189\":3,\"196\":4,\"263\":1,\"296\":1,\"306\":1,\"362\":1,\"363\":4,\"364\":1,\"383\":1,\"417\":1,\"418\":5,\"420\":1,\"421\":1,\"450\":1,\"456\":1,\"489\":1,\"507\":2,\"511\":4,\"512\":1,\"514\":1,\"522\":1,\"523\":1,\"541\":2,\"788\":1,\"791\":3,\"792\":2,\"796\":2,\"797\":8,\"811\":3,\"812\":2,\"818\":5,\"820\":2,\"821\":1,\"822\":2,\"823\":5,\"829\":1,\"844\":2,\"846\":1,\"849\":2,\"865\":2,\"866\":1,\"867\":1,\"871\":2,\"872\":1,\"873\":5,\"989\":2,\"990\":1,\"1000\":1,\"1001\":1,\"1002\":4,\"1015\":4,\"1016\":4,\"1038\":1,\"1039\":3,\"1040\":1,\"1047\":2,\"1050\":1,\"1051\":1,\"1067\":1,\"1068\":2,\"1073\":5,\"1090\":3,\"1091\":2,\"1092\":2,\"1093\":1,\"1095\":5,\"1096\":2,\"1097\":1,\"1098\":6,\"1106\":1,\"1113\":1,\"1114\":1,\"1115\":1,\"1116\":2,\"1120\":5,\"1136\":6,\"1138\":2,\"1139\":1,\"1140\":2,\"1142\":3,\"1181\":5,\"1188\":2,\"1192\":2,\"1368\":1,\"1651\":4,\"1652\":4,\"1653\":2,\"1654\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1672\":1,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1,\"1677\":1,\"1709\":1,\"1711\":1,\"1714\":2,\"1715\":2,\"1718\":1}}],[\"型数据库技术\",{\"1\":{\"1213\":1}}],[\"型\",{\"1\":{\"9\":1}}],[\"重量\",{\"1\":{\"1796\":1}}],[\"重量级锁在\",{\"1\":{\"1077\":1}}],[\"重量级锁\",{\"1\":{\"1074\":1,\"1515\":1}}],[\"重发\",{\"1\":{\"1779\":3}}],[\"重建表\",{\"1\":{\"1567\":1}}],[\"重传率\",{\"1\":{\"1490\":1}}],[\"重传次数\",{\"1\":{\"1415\":1}}],[\"重传所有可能浪费网络资源\",{\"1\":{\"1411\":1}}],[\"重传时是重传一个还是重传所有已经发出去的数据包\",{\"1\":{\"1411\":1}}],[\"重传丢失的报文段\",{\"1\":{\"1411\":1}}],[\"重传机制\",{\"0\":{\"1411\":1}}],[\"重用处于\",{\"1\":{\"1410\":1}}],[\"重用记录状态\",{\"1\":{\"1347\":1}}],[\"重定向\",{\"1\":{\"1398\":1}}],[\"重难点\",{\"1\":{\"1263\":1}}],[\"重启之后的数据恢复速度比较慢\",{\"1\":{\"1577\":1}}],[\"重启连接断开解决\",{\"1\":{\"1428\":1}}],[\"重启\",{\"1\":{\"1165\":1,\"1631\":1}}],[\"重启可能部分丢失\",{\"1\":{\"21\":1}}],[\"重复连接初始化造成混乱\",{\"1\":{\"1409\":1}}],[\"重复执行步骤3和步骤4\",{\"1\":{\"946\":1}}],[\"重复\",{\"1\":{\"767\":1}}],[\"重复值消除\",{\"1\":{\"726\":1}}],[\"重复值的说明\",{\"0\":{\"722\":1}}],[\"重复消费\",{\"1\":{\"499\":1,\"1374\":1}}],[\"重点包括\",{\"1\":{\"695\":1}}],[\"重点关注\",{\"1\":{\"541\":1,\"852\":1}}],[\"重做\",{\"1\":{\"647\":1}}],[\"重做日志缓冲\",{\"1\":{\"639\":1}}],[\"重做日志\",{\"1\":{\"639\":1,\"1555\":1}}],[\"重构为sql语句\",{\"1\":{\"643\":2}}],[\"重要概念\",{\"1\":{\"1634\":1}}],[\"重要组件\",{\"0\":{\"540\":1}}],[\"重要参数\",{\"0\":{\"467\":1}}],[\"重置溢出的客户端输入缓冲区\",{\"1\":{\"928\":1}}],[\"重置读写指针\",{\"1\":{\"828\":1}}],[\"重置到索引\",{\"1\":{\"773\":1}}],[\"重置\",{\"1\":{\"366\":1,\"767\":1}}],[\"重新加载环境变量\",{\"1\":{\"1701\":1}}],[\"重新加载配置\",{\"1\":{\"1631\":1}}],[\"重新统计索引信息\",{\"1\":{\"1567\":1}}],[\"重新创建一个有独立\",{\"1\":{\"1474\":1}}],[\"重新选举的规则\",{\"1\":{\"1204\":1}}],[\"重新校验线程池\",{\"1\":{\"1113\":1}}],[\"重新分片\",{\"1\":{\"946\":2}}],[\"重新置为\",{\"1\":{\"772\":1}}],[\"重新定位并插入聚簇索引\",{\"1\":{\"748\":1}}],[\"重新进入\",{\"1\":{\"470\":1}}],[\"重新标记\",{\"1\":{\"176\":1,\"1525\":1}}],[\"重新添加\",{\"1\":{\"68\":1}}],[\"重试机制\",{\"1\":{\"1266\":1,\"1584\":1}}],[\"重试次数retries\",{\"1\":{\"460\":1}}],[\"重试\",{\"1\":{\"148\":1}}],[\"重排序\",{\"0\":{\"143\":1}}],[\"重命名远程仓库\",{\"1\":{\"1326\":1}}],[\"重命名文件\",{\"1\":{\"1218\":1}}],[\"重命名\",{\"1\":{\"117\":1}}],[\"重入计数\",{\"1\":{\"1076\":1}}],[\"重入队\",{\"1\":{\"422\":1}}],[\"重入\",{\"1\":{\"9\":1}}],[\"重写缓冲区\",{\"1\":{\"1577\":1}}],[\"重写历史\",{\"0\":{\"1344\":1}}],[\"重写过程中与服务器进程的数据不一致性\",{\"1\":{\"917\":1}}],[\"重写时过期键不会写入\",{\"1\":{\"908\":1}}],[\"重写相应的事件处理方法\",{\"1\":{\"814\":1}}],[\"重写partition方法来自定义分区器\",{\"1\":{\"453\":1}}],[\"重写构造器\",{\"1\":{\"347\":1}}],[\"重写call\",{\"1\":{\"329\":1}}],[\"重写run\",{\"1\":{\"327\":1,\"328\":1}}],[\"重写方法\",{\"1\":{\"298\":1}}],[\"重写了\",{\"1\":{\"25\":1}}],[\"重写\",{\"0\":{\"917\":1},\"1\":{\"9\":1,\"153\":1,\"1508\":1}}],[\"其自动化\",{\"1\":{\"1792\":1}}],[\"其追随者被称为苏菲\",{\"1\":{\"1767\":1}}],[\"其父类尚未初始化\",{\"1\":{\"1527\":1}}],[\"其内容是另一个文件的路径\",{\"1\":{\"1474\":1}}],[\"其内部就是通过\",{\"1\":{\"1136\":1}}],[\"其内部会调用\",{\"1\":{\"1055\":1}}],[\"其来源于对大规模互联网系统分布式实践的总结\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"其对数据库的修改就会永久保存\",{\"1\":{\"1274\":1,\"1550\":1}}],[\"其最大的优点是自身就是一个独立的应用\",{\"1\":{\"1254\":1}}],[\"其最大的优点是应用和\",{\"1\":{\"1253\":1}}],[\"其最大特点是不会\",{\"1\":{\"176\":1}}],[\"其提供了两个主要的编程接口\",{\"1\":{\"1221\":1}}],[\"其数据模型类似文件系统的目录树结构\",{\"1\":{\"1167\":1}}],[\"其值是long\",{\"1\":{\"908\":1}}],[\"其键指向某个键的对象\",{\"1\":{\"908\":1}}],[\"其各个方法均无法正常使用\",{\"1\":{\"829\":1}}],[\"其返回值都是\",{\"1\":{\"828\":1}}],[\"其间不会使用\",{\"1\":{\"799\":1}}],[\"其后的列索引将失效\",{\"1\":{\"702\":1}}],[\"其索引根据b+tree索引在指定条件下自动构建\",{\"1\":{\"698\":1}}],[\"其基本属性包括\",{\"1\":{\"538\":1}}],[\"其核心思想是通过将业务逻辑\",{\"1\":{\"1604\":1}}],[\"其核心组件都可以在没有单点故障的情况下进行水平扩展\",{\"1\":{\"428\":1}}],[\"其核心在于要对状态访问操作进行管理\",{\"1\":{\"144\":1}}],[\"其次是\",{\"1\":{\"376\":1}}],[\"其计数器加\",{\"1\":{\"223\":1}}],[\"其分配回收成本较高\",{\"1\":{\"212\":1}}],[\"其余保持不变\",{\"1\":{\"1665\":1}}],[\"其余选项的书写顺序不影响执行结果\",{\"1\":{\"971\":1}}],[\"其余位不变\",{\"1\":{\"1665\":2}}],[\"其余位\",{\"1\":{\"564\":1}}],[\"其余位保留\",{\"1\":{\"474\":1}}],[\"其余\",{\"1\":{\"471\":1}}],[\"其余数据类型都需要1个slot\",{\"1\":{\"204\":1}}],[\"其余三种引用类型的抽象基类\",{\"1\":{\"185\":1}}],[\"其余属性参见\",{\"1\":{\"117\":1}}],[\"其底层就是使用了\",{\"1\":{\"153\":1}}],[\"其他目录项层级关联等\",{\"1\":{\"1474\":1}}],[\"其他进程\",{\"1\":{\"1463\":1}}],[\"其他层的节点数都达到最大值\",{\"1\":{\"1387\":1}}],[\"其他节点的读写操作正常的话\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"其他状态非负\",{\"1\":{\"1112\":1}}],[\"其他情况\",{\"1\":{\"1092\":1}}],[\"其他语句\",{\"1\":{\"734\":1}}],[\"其他记录丢弃\",{\"1\":{\"618\":1}}],[\"其他客户端不可读也不可写\",{\"1\":{\"552\":1}}],[\"其他某个线程中断当前线程\",{\"1\":{\"363\":1}}],[\"其他某个线程将当前线程作为目标调用\",{\"1\":{\"363\":1}}],[\"其他的都通过异步的方式进行处理\",{\"1\":{\"398\":1}}],[\"其他的长度由长到短\",{\"1\":{\"215\":1}}],[\"其他的还有一些用于提供支持\",{\"1\":{\"9\":1}}],[\"其他线程能够立即看到这个修改\",{\"1\":{\"144\":1,\"1506\":1}}],[\"其他\",{\"1\":{\"124\":1}}],[\"其优势包括\",{\"1\":{\"64\":1}}],[\"其\",{\"1\":{\"59\":1}}],[\"其中令我最震撼的是耗费3721公斤黄金打造出来的五世达赖灵塔\",{\"1\":{\"1847\":1}}],[\"其中还有两本技术书\",{\"1\":{\"1817\":1}}],[\"其中$k$是二进制位数\",{\"1\":{\"1664\":1}}],[\"其中的的元素没有先后顺序但都唯一\",{\"1\":{\"1570\":1}}],[\"其中数字签名由\",{\"1\":{\"1403\":1}}],[\"其中只有应用层在用户空间\",{\"1\":{\"1393\":1}}],[\"其中h是树的高度\",{\"1\":{\"1387\":1}}],[\"其中一个包含\",{\"1\":{\"1342\":1}}],[\"其中一级字符串\",{\"1\":{\"408\":1}}],[\"其中任何一个数据库否决此次提交\",{\"1\":{\"1283\":1}}],[\"其中最核心的缓存还使用了\",{\"1\":{\"1234\":1}}],[\"其中第一列端口用于集群内部通信\",{\"1\":{\"1196\":1}}],[\"其中第一个字节置为0xfe作为标记\",{\"1\":{\"892\":1}}],[\"其中主要有两部分\",{\"1\":{\"1076\":1}}],[\"其中主节点负责处理槽\",{\"1\":{\"948\":1}}],[\"其中跟锁相关的数据在对象头的\",{\"1\":{\"1074\":1}}],[\"其中定义了获取事务\",{\"1\":{\"1047\":1}}],[\"其中文件事件负责处理客户端请求\",{\"1\":{\"916\":1}}],[\"其中redis\",{\"1\":{\"913\":1}}],[\"其中value可以是指针\",{\"1\":{\"882\":1}}],[\"其中仅含一个页面\",{\"1\":{\"751\":1}}],[\"其中trx\",{\"1\":{\"744\":1}}],[\"其中message字段类似于查询优化器重写后的执行语句\",{\"1\":{\"729\":1}}],[\"其中扇出数即驱动表查询结果集的记录条数\",{\"1\":{\"718\":1}}],[\"其中关键的常量有\",{\"1\":{\"716\":1}}],[\"其中前三种区是独立直属于表空间的\",{\"1\":{\"693\":1}}],[\"其中0\",{\"1\":{\"689\":1}}],[\"其中每个元素指向其它结点以加快访问\",{\"1\":{\"886\":1}}],[\"其中每个区的前几页是固定存储属性信息的页类型\",{\"1\":{\"693\":1}}],[\"其中每个偏移量称为槽\",{\"1\":{\"690\":1}}],[\"其中每个节点都代表着程序代码中的一个语法结构\",{\"1\":{\"258\":1}}],[\"其中每条记录的记录头部分\",{\"1\":{\"689\":1}}],[\"其中存放表中记录的是数据页\",{\"1\":{\"688\":1}}],[\"其中心思想是将数据分散存储\",{\"1\":{\"651\":1}}],[\"其中包括rdb保存\",{\"1\":{\"912\":1}}],[\"其中包括局部变量表\",{\"1\":{\"203\":1}}],[\"其中包含若干个16k的缓存页和对应的控制块\",{\"1\":{\"730\":1}}],[\"其中包含若干条消息\",{\"1\":{\"474\":1}}],[\"其中线程的阻塞对象用于记录调用\",{\"1\":{\"362\":1}}],[\"其中比较流行的有project\",{\"1\":{\"282\":1}}],[\"其中准备过程会初始化插入式注解处理器\",{\"1\":{\"255\":1}}],[\"其中验证\",{\"1\":{\"248\":1}}],[\"其中常量池表存储了编译期间生成的字面量\",{\"1\":{\"211\":1}}],[\"其中直接创建\",{\"1\":{\"136\":1}}],[\"其中\",{\"1\":{\"37\":2,\"38\":1,\"148\":1,\"154\":1,\"254\":1,\"268\":1,\"414\":1,\"461\":2,\"483\":1,\"490\":1,\"564\":1,\"599\":1,\"634\":1,\"635\":1,\"674\":1,\"735\":1,\"751\":1,\"754\":2,\"856\":1,\"907\":1,\"934\":1,\"940\":1,\"983\":1,\"1104\":1,\"1119\":1,\"1135\":1,\"1136\":1,\"1148\":1,\"1174\":1,\"1369\":1,\"1514\":1,\"1557\":1}}],[\"其它分支\",{\"0\":{\"1767\":1}}],[\"其它分支都会继续循环\",{\"1\":{\"6\":1}}],[\"其它渠道或代理商是看不到这部分运价的\",{\"1\":{\"1732\":1}}],[\"其它由地方管理局审批\",{\"1\":{\"1730\":1}}],[\"其它公共仓库\",{\"1\":{\"1632\":1}}],[\"其它可选\",{\"1\":{\"1632\":1}}],[\"其它扩展点\",{\"1\":{\"1597\":1}}],[\"其它数据也不会受到影响\",{\"1\":{\"1489\":1}}],[\"其它文件系统的具体实现\",{\"1\":{\"1484\":1}}],[\"其它文件包括服务器进程文件\",{\"1\":{\"673\":1}}],[\"其它映射例如全相联\",{\"1\":{\"1435\":1}}],[\"其它层都在\",{\"1\":{\"1393\":1}}],[\"其它节点自动成为\",{\"1\":{\"1203\":1}}],[\"其它节点接收消息后\",{\"1\":{\"948\":1}}],[\"其它不改投\",{\"1\":{\"1203\":1}}],[\"其它的状态如no或者connecting都说明配置有误或者网络无法连通\",{\"1\":{\"1155\":1}}],[\"其它任务取消\",{\"1\":{\"1113\":2}}],[\"其它框架也提供了更丰富的实现\",{\"1\":{\"1109\":1}}],[\"其它事务模式\",{\"1\":{\"1049\":1}}],[\"其它命令都不会立即执行\",{\"1\":{\"959\":1}}],[\"其它或无回复\",{\"1\":{\"941\":1}}],[\"其它操作\",{\"1\":{\"929\":1}}],[\"其它平台默认池化分配器\",{\"1\":{\"860\":1}}],[\"其它网络应用框架\",{\"1\":{\"809\":1}}],[\"其它网络应用框架有着无可比拟的优势\",{\"1\":{\"809\":1}}],[\"其它称normal\",{\"1\":{\"749\":1}}],[\"其它情况\",{\"1\":{\"739\":1}}],[\"其它结构还有例如\",{\"1\":{\"731\":1}}],[\"其它条件在回表时才会进行过滤\",{\"1\":{\"711\":1}}],[\"其它条件不变的话\",{\"1\":{\"127\":1}}],[\"其它部分\",{\"0\":{\"691\":1}}],[\"其它信息\",{\"1\":{\"564\":1}}],[\"其它锁\",{\"0\":{\"559\":1}}],[\"其它模块\",{\"0\":{\"545\":1}}],[\"其它主机注册该端口即可\",{\"1\":{\"342\":1}}],[\"其它类加载器都是由java实现\",{\"1\":{\"254\":1}}],[\"其它方法\",{\"0\":{\"189\":1}}],[\"其它线程还可以正常读写该\",{\"1\":{\"1420\":1}}],[\"其它线程调用\",{\"1\":{\"1095\":1}}],[\"其它线程中断本线程\",{\"1\":{\"1092\":1}}],[\"其它线程已经持有该\",{\"1\":{\"1076\":1}}],[\"其它线程不能读写\",{\"1\":{\"553\":1}}],[\"其它线程就会收到该异常\",{\"1\":{\"161\":1}}],[\"其它线程\",{\"1\":{\"160\":1}}],[\"其它线程立即可知\",{\"1\":{\"137\":1}}],[\"其它线程必须等待\",{\"1\":{\"134\":1}}],[\"其它\",{\"0\":{\"70\":1,\"1027\":1,\"1078\":1,\"1094\":1,\"1247\":1,\"1347\":1,\"1530\":1,\"1606\":1},\"1\":{\"137\":1,\"466\":1,\"470\":1,\"770\":1,\"1004\":1,\"1099\":1,\"1345\":1,\"1366\":1}}],[\"其它默认信息\",{\"1\":{\"14\":1}}],[\"其实从山形上\",{\"1\":{\"1844\":1}}],[\"其实看着是有些可怜的\",{\"1\":{\"1843\":1}}],[\"其实心里是非常想走阿里大环线的\",{\"1\":{\"1840\":1}}],[\"其实心里一直是倾向于尼康的\",{\"1\":{\"1799\":1}}],[\"其实有挺多不方便的\",{\"1\":{\"1819\":1}}],[\"其实自己一直不爱看书\",{\"1\":{\"1817\":1}}],[\"其实\",{\"1\":{\"1810\":1}}],[\"其实是用\",{\"1\":{\"1732\":1}}],[\"其实原著的英文版读起来也不困难\",{\"1\":{\"1246\":1}}],[\"其实主要就执行了两步\",{\"1\":{\"541\":1}}],[\"其实一般开发时也很少需要用到复杂的类型转换器\",{\"1\":{\"529\":1}}],[\"其实一开始想看看美团的动态线程池设计的\",{\"1\":{\"10\":1}}],[\"其实也还好\",{\"1\":{\"10\":1}}],[\"都不咋地\",{\"1\":{\"1841\":1}}],[\"都不相同\",{\"1\":{\"1535\":1}}],[\"都让我不想碰它\",{\"1\":{\"1810\":1}}],[\"都tm用框架管理依赖了\",{\"1\":{\"1779\":1}}],[\"都称自己是正统基督\",{\"1\":{\"1759\":1}}],[\"都适合使用mock测试\",{\"1\":{\"1706\":1}}],[\"都无法阻止\",{\"1\":{\"1642\":1}}],[\"都无需关心\",{\"1\":{\"654\":1}}],[\"都能添加成功\",{\"1\":{\"1535\":1}}],[\"都映射到一个首尾相连的哈希环上\",{\"1\":{\"1489\":1}}],[\"都构成\",{\"1\":{\"1479\":1}}],[\"都对应一个软中断内核线程\",{\"1\":{\"1437\":1}}],[\"都有最大长度限制\",{\"1\":{\"1414\":1}}],[\"都有若干个副本\",{\"1\":{\"443\":1}}],[\"都存在\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"都写完\",{\"1\":{\"1205\":1}}],[\"都相同\",{\"1\":{\"1204\":1}}],[\"都投票给自己\",{\"1\":{\"1203\":1}}],[\"都保存了相同的数据副本\",{\"1\":{\"1200\":1}}],[\"都要对它的行为保持怀疑\",{\"1\":{\"1247\":1}}],[\"都要动态创建\",{\"1\":{\"1187\":1}}],[\"都要前执行该方法尝试是否能加锁\",{\"1\":{\"9\":1}}],[\"都为\",{\"1\":{\"1077\":2,\"1155\":1,\"1390\":1}}],[\"都进行了处理\",{\"1\":{\"961\":1}}],[\"都实现了\",{\"1\":{\"829\":1}}],[\"都可以直接将命令请求发送至moved错误所指向的节点\",{\"1\":{\"947\":1}}],[\"都可以同步等待执行结果\",{\"1\":{\"822\":1}}],[\"都可以视为整个编译过程的后期\",{\"1\":{\"265\":1}}],[\"都需要用事务的方式实现原子性操作\",{\"1\":{\"1031\":1}}],[\"都需要一个\",{\"1\":{\"789\":1}}],[\"都需要记录可能被切分的消息\",{\"1\":{\"788\":1}}],[\"都需要根据具体的业务需求具体分析\",{\"1\":{\"652\":1}}],[\"都只能读\",{\"1\":{\"552\":1}}],[\"都列出来\",{\"1\":{\"496\":1}}],[\"都接收到消息后才返回\",{\"1\":{\"460\":1}}],[\"都会走拉萨\",{\"1\":{\"1840\":1}}],[\"都会同步到所有实例\",{\"1\":{\"1629\":1}}],[\"都会导致用日志恢复出来的数据和原库不一致\",{\"1\":{\"1556\":1}}],[\"都会失效\",{\"1\":{\"1533\":1}}],[\"都会先自底向上尝试调用父类的loadclass\",{\"1\":{\"1528\":1}}],[\"都会先记下对应的undo日志\",{\"1\":{\"745\":1}}],[\"都会有大量对象死亡\",{\"1\":{\"1523\":1}}],[\"都会带有\",{\"1\":{\"1204\":1}}],[\"都会调用\",{\"1\":{\"979\":1}}],[\"都会在执行后调用multi\",{\"1\":{\"960\":1}}],[\"都会在堆中开辟新的内存空间存放该字符串\",{\"1\":{\"300\":1}}],[\"都会自增\",{\"1\":{\"942\":1}}],[\"都会使其转换为raw\",{\"1\":{\"896\":1}}],[\"都会使用一个对象工厂\",{\"1\":{\"522\":1}}],[\"都会清除\",{\"1\":{\"773\":1}}],[\"都会异步预读该区中的所有其它页面\",{\"1\":{\"732\":1}}],[\"都会保存数据\",{\"1\":{\"698\":1}}],[\"都会从free\",{\"1\":{\"689\":1}}],[\"都会影响行溢出的临界点\",{\"1\":{\"686\":1}}],[\"都会占用固定大小的空间\",{\"1\":{\"686\":1}}],[\"都会向下查询所依赖视图中的规则以保持一致性\",{\"1\":{\"623\":1}}],[\"都会用类型处理器将获取到的值以某种方式转换成\",{\"1\":{\"521\":1}}],[\"都会执行该代码块\",{\"1\":{\"289\":1}}],[\"都仍将解释执行代码\",{\"1\":{\"269\":1}}],[\"都必须由加载它的类加载器和这个类本身一起共同确立其在jvm中的唯一性\",{\"1\":{\"254\":1}}],[\"都是按调用量收费的\",{\"1\":{\"1728\":1}}],[\"都是检查异常\",{\"1\":{\"1533\":1}}],[\"都是非检查异常\",{\"1\":{\"1533\":1}}],[\"都是非常量池的\",{\"1\":{\"301\":1}}],[\"都是创建底层数组的副本\",{\"1\":{\"1498\":1}}],[\"都是\",{\"1\":{\"1497\":1}}],[\"都是一种基于事件分发的网络编程模式\",{\"1\":{\"1488\":1}}],[\"都是一个有序的队列\",{\"1\":{\"443\":1}}],[\"都是多\",{\"1\":{\"1488\":1}}],[\"都是半连接队列溢出\",{\"1\":{\"1414\":1}}],[\"都是追求最终一致性\",{\"1\":{\"1265\":1,\"1583\":1}}],[\"都是主库\",{\"1\":{\"1155\":1}}],[\"都是通过当前线程池中的\",{\"1\":{\"1115\":1}}],[\"都是从队头取元素\",{\"1\":{\"988\":1}}],[\"都是队尾加入元素\",{\"1\":{\"988\":1}}],[\"都是基于raft共识算法\",{\"1\":{\"948\":1}}],[\"都是引擎自身完成\",{\"1\":{\"694\":1}}],[\"都是执行\",{\"1\":{\"543\":1}}],[\"都是值传递\",{\"1\":{\"359\":1}}],[\"都是调用父类\",{\"1\":{\"196\":1}}],[\"都是独占式的排它锁\",{\"1\":{\"156\":1}}],[\"都主动释放给其它线程使用\",{\"1\":{\"134\":1}}],[\"都没有改动\",{\"1\":{\"1\":1}}],[\"在车站还用了支付宝和高德打车的会员权益蹭了下贵宾厅\",{\"1\":{\"1847\":1}}],[\"在娜玛瑟德终于吃到了糌粑\",{\"1\":{\"1846\":1}}],[\"在人家的田地里终于拍到了一张满意的成片\",{\"1\":{\"1844\":1}}],[\"在羊湖找到了打鸟的乐趣\",{\"1\":{\"1843\":1}}],[\"在信奉藏传佛教的人们看来\",{\"1\":{\"1842\":1}}],[\"在西藏\",{\"1\":{\"1849\":1}}],[\"在西藏很重要\",{\"1\":{\"1836\":1}}],[\"在西藏这片土地\",{\"1\":{\"1836\":1}}],[\"在拉萨\",{\"1\":{\"1836\":1}}],[\"在拉萨这座城市\",{\"1\":{\"1834\":1}}],[\"在拉取和推送时能自动关联到对应的上游分支\",{\"1\":{\"1338\":1}}],[\"在公交上\",{\"1\":{\"1834\":1}}],[\"在家做做操\",{\"1\":{\"1827\":1}}],[\"在家摆烂过年\",{\"1\":{\"1815\":1}}],[\"在冷雨中感受了秦都的震撼\",{\"1\":{\"1825\":1}}],[\"在我这就是年度最佳现场\",{\"1\":{\"1817\":1}}],[\"在线影视站\",{\"0\":{\"1804\":1},\"1\":{\"1811\":1}}],[\"在线程的基础上通过时分复用的方式运行多个协程\",{\"1\":{\"134\":1,\"1453\":1}}],[\"在经历了\",{\"1\":{\"1799\":1}}],[\"在经常用于查询的列上建立索引\",{\"1\":{\"1548\":1}}],[\"在xds\",{\"1\":{\"1796\":1}}],[\"在北京又买了心心念念许久的公路车\",{\"1\":{\"1796\":1}}],[\"在北京的最后一个周末\",{\"1\":{\"1785\":1}}],[\"在学校附近花了400来块买了辆凤凰牌山地车\",{\"1\":{\"1796\":1}}],[\"在学校一开始买自行车只是因为长沙的夏天过于炎热\",{\"1\":{\"1796\":1}}],[\"在埃及\",{\"1\":{\"1767\":1}}],[\"在协议国内的两个或以上机场间的航线\",{\"1\":{\"1750\":1}}],[\"在协议国降落\",{\"1\":{\"1743\":1}}],[\"在境外两国或地区间载运客货而不用返回本国\",{\"1\":{\"1748\":1}}],[\"在两国的协定中允许对方行使有关第三国运输的权利\",{\"1\":{\"1746\":1}}],[\"在国内机票销售中\",{\"1\":{\"1739\":1}}],[\"在行政性分配基础上增加了市场化配置手段\",{\"1\":{\"1730\":1}}],[\"在提直降代的背景下\",{\"1\":{\"1726\":1}}],[\"在提交之间以二分的方式检出\",{\"1\":{\"1347\":1}}],[\"在代理模式中\",{\"1\":{\"1649\":1}}],[\"在代理类的对应方法调用目标类中的对应方法并做增强\",{\"1\":{\"1532\":1}}],[\"在敏捷开发中\",{\"1\":{\"1641\":1}}],[\"在网络传输中以某种\",{\"1\":{\"1640\":1}}],[\"在网络传输寻址过程中是一直变化的\",{\"1\":{\"1423\":1}}],[\"在固定窗口计数器基础上\",{\"1\":{\"1637\":1}}],[\"在消息发布的时候进行处理\",{\"1\":{\"1626\":1}}],[\"在消息发送的过程中\",{\"1\":{\"450\":1}}],[\"在键空间中\",{\"1\":{\"1574\":2}}],[\"在索引遍历过程中\",{\"1\":{\"1548\":1}}],[\"在索引列上进行计算\",{\"1\":{\"1547\":1}}],[\"在索引列上进行运算操作\",{\"1\":{\"703\":1}}],[\"在架构上\",{\"1\":{\"1540\":1}}],[\"在尝试加载一个类的时候\",{\"1\":{\"1528\":1}}],[\"在方法区的常量池中\",{\"1\":{\"1536\":1}}],[\"在方法区中为类的静态变量分配内存\",{\"1\":{\"1527\":1}}],[\"在方法内部自己处理\",{\"1\":{\"346\":1}}],[\"在新生代中\",{\"1\":{\"1524\":1}}],[\"在新增vs页面不用指定\",{\"1\":{\"1301\":1}}],[\"在重量级锁的状态下\",{\"1\":{\"1515\":1}}],[\"在重新分片期间\",{\"1\":{\"947\":1}}],[\"在底层实现上会进行过期\",{\"1\":{\"1514\":1}}],[\"在底层实现上\",{\"1\":{\"1511\":1}}],[\"在高并发环境下性能非常好\",{\"1\":{\"1499\":1}}],[\"在读写锁\",{\"1\":{\"1498\":1}}],[\"在解决哈希冲突时\",{\"1\":{\"1494\":1}}],[\"在面对瞬间高并发的场景时\",{\"1\":{\"1488\":1}}],[\"在进行字符串拼接时\",{\"1\":{\"1536\":1}}],[\"在进行\",{\"1\":{\"1486\":1}}],[\"在进行读写操作时\",{\"1\":{\"795\":2}}],[\"在调用\",{\"1\":{\"1478\":1}}],[\"在交互式系统中\",{\"1\":{\"1470\":1}}],[\"在用户态完成加锁和解锁\",{\"1\":{\"1468\":1}}],[\"在用户空间实现的线程\",{\"1\":{\"1451\":1}}],[\"在用类获取对象时\",{\"1\":{\"290\":1}}],[\"在物理内存紧张的时候\",{\"1\":{\"1446\":1}}],[\"在设备还没有\",{\"1\":{\"1423\":1}}],[\"在设置预处理语句\",{\"1\":{\"521\":1}}],[\"在双方进行\",{\"1\":{\"1420\":1}}],[\"在包头里记录数据部分的长度\",{\"1\":{\"1417\":1}}],[\"在容器的各个阶段执行相应的生命周期回调\",{\"1\":{\"1381\":1}}],[\"在对应的控制器方法上标注\",{\"1\":{\"1368\":1}}],[\"在对应安装目录下\",{\"1\":{\"1311\":1}}],[\"在c盘users目录下\",{\"1\":{\"1311\":1}}],[\"在工作区修改文件\",{\"1\":{\"1310\":1}}],[\"在具体架构设计时nginx做负载均衡时\",{\"1\":{\"1300\":1}}],[\"在转发过程中\",{\"1\":{\"1296\":1,\"1297\":1}}],[\"在锁定时需要记录库存工作单\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"在正常的情况下\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"在满足\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"在单体应用中\",{\"1\":{\"1273\":1}}],[\"在单应用不需要集群支持或者集群情况下各节点无需互相通知的场景下使用本地缓存较合适\",{\"1\":{\"1253\":1}}],[\"在集群模式下\",{\"1\":{\"1222\":1}}],[\"在大数据量的情况下\",{\"1\":{\"1546\":1}}],[\"在大数据框架中\",{\"1\":{\"1215\":1}}],[\"在大数据时代\",{\"1\":{\"1215\":1}}],[\"在指定的数据目录下\",{\"1\":{\"1170\":1}}],[\"在指定的集合范围内\",{\"1\":{\"609\":1}}],[\"在会话结束后依然存在的节点\",{\"1\":{\"1169\":1}}],[\"在程序中过度\",{\"1\":{\"1134\":1}}],[\"在程序设计中使用不可变对象\",{\"1\":{\"64\":1}}],[\"在开发的过程中帮助开发人员调试用的\",{\"1\":{\"1129\":1}}],[\"在最上层是用户自行实现的业务逻辑代码\",{\"1\":{\"1126\":1}}],[\"在抛出\",{\"1\":{\"1109\":1}}],[\"在计算机领域中表现为同意管理\",{\"1\":{\"1104\":1}}],[\"在竞争重量级锁时\",{\"1\":{\"1079\":1}}],[\"在轻量级锁中不涉及\",{\"1\":{\"1076\":1}}],[\"在目标方法前后增加开启事务\",{\"1\":{\"1060\":1}}],[\"在判断是否需要创建代理类来管理事务\",{\"1\":{\"1059\":1}}],[\"在源码里也是这样设计的\",{\"1\":{\"1059\":1}}],[\"在它的基础上加了一些jdbc相关的异常处理\",{\"1\":{\"1052\":1}}],[\"在事务执行过程中利用\",{\"1\":{\"1555\":1}}],[\"在事务开始之前和结束以后\",{\"1\":{\"1032\":1}}],[\"在事务提交之后\",{\"1\":{\"640\":1}}],[\"在实现分布式锁上\",{\"1\":{\"1162\":1,\"1187\":1}}],[\"在实现上\",{\"1\":{\"912\":1}}],[\"在实例化后立刻放入三级缓存\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"在编译阶段就已经生成实际的\",{\"1\":{\"1014\":1}}],[\"在编译时根据方法调用的静态类型确定要调用的具体方法实现\",{\"1\":{\"245\":1}}],[\"在需要构造\",{\"1\":{\"1009\":1}}],[\"在策略模式\",{\"1\":{\"1007\":1}}],[\"在后序位置写巧妙的代码\",{\"1\":{\"999\":1}}],[\"在后台生成rdb文件\",{\"1\":{\"934\":1}}],[\"在内核空间开辟缓冲区\",{\"1\":{\"1479\":1}}],[\"在内核态完成\",{\"1\":{\"1454\":1}}],[\"在内核中来支持用户线程\",{\"1\":{\"1451\":1}}],[\"在内核中实现的线程\",{\"1\":{\"1451\":1}}],[\"在内存访问方面\",{\"1\":{\"1443\":1}}],[\"在内存中生成一个代表这个类的java\",{\"1\":{\"249\":1}}],[\"在内的所有二进制位数组的汉明重量\",{\"1\":{\"976\":1}}],[\"在位数组bitarray中定位\",{\"1\":{\"974\":1}}],[\"在lua环境中定义一个lua函数\",{\"1\":{\"965\":1}}],[\"在客户端收到关于槽i的ask错误之后\",{\"1\":{\"947\":1}}],[\"在客户端收到关于槽i的moved错误之后\",{\"1\":{\"947\":1}}],[\"在客户端用\",{\"1\":{\"17\":1}}],[\"在就直接执行\",{\"1\":{\"947\":1}}],[\"在已下线主服务器属下的所有从服务器里\",{\"1\":{\"943\":1}}],[\"在已付款的订单中\",{\"1\":{\"124\":1}}],[\"在主服务器的数据库状态被修改\",{\"1\":{\"933\":1}}],[\"在命令传播阶段\",{\"1\":{\"937\":1}}],[\"在命令表中查找命令实现\",{\"1\":{\"927\":1}}],[\"在命令行中\",{\"1\":{\"628\":1}}],[\"在规定时间内\",{\"1\":{\"908\":1}}],[\"在增删改时可能引发连锁更新\",{\"1\":{\"893\":1}}],[\"在存储上仍然在字符末尾加上\",{\"1\":{\"879\":1}}],[\"在存储过程和函数中可以使用游标对结果集进行循环的处理\",{\"1\":{\"634\":1}}],[\"在netty中\",{\"1\":{\"851\":1}}],[\"在半包问题的测试代码中\",{\"1\":{\"850\":1}}],[\"在响应头指定长度\",{\"1\":{\"846\":1}}],[\"在传递大量数据时\",{\"1\":{\"839\":1}}],[\"在传统的多线程版服务器设计中\",{\"1\":{\"763\":1}}],[\"在异步处理时\",{\"1\":{\"822\":1}}],[\"在添加\",{\"1\":{\"818\":1}}],[\"在控制块中记录访问时间\",{\"1\":{\"732\":1}}],[\"在外连接查询中\",{\"1\":{\"725\":1}}],[\"在全表扫描或索引执行的单表查询\",{\"1\":{\"718\":1}}],[\"在sql语句中加入一些手动提示\",{\"1\":{\"705\":1}}],[\"在sql优化时分析具体的时间开销\",{\"1\":{\"612\":1}}],[\"在选择存储引擎时\",{\"1\":{\"682\":1}}],[\"在并发条件下要求数据的一致性\",{\"1\":{\"682\":1}}],[\"在mysql数据中\",{\"1\":{\"737\":1}}],[\"在mysql\",{\"1\":{\"678\":1}}],[\"在mysql中指阉割过的utf8mb3字符集\",{\"1\":{\"674\":1}}],[\"在mysql中需要通过用户名\",{\"1\":{\"590\":1}}],[\"在每个节点中维持多个指向其它节点的指针\",{\"1\":{\"885\":1}}],[\"在每个表创建语句前加上\",{\"1\":{\"675\":1}}],[\"在每个数据库创建语句前加上\",{\"1\":{\"675\":1}}],[\"在此感谢各个压制组\",{\"1\":{\"1810\":1}}],[\"在此过程中软件一直处于可使用状态\",{\"1\":{\"1641\":1}}],[\"在此期间如果其他线程的有读写操作都会判断head节点是否为forwardnode节点\",{\"1\":{\"1497\":1}}],[\"在此之上提供了一个版本控制系统的用户界面\",{\"1\":{\"1348\":1}}],[\"在此之前\",{\"1\":{\"1076\":1}}],[\"在此\",{\"1\":{\"663\":5,\"664\":4}}],[\"在应用程序中对本地执行的sql进行拦截\",{\"1\":{\"653\":1}}],[\"在业务场景中\",{\"1\":{\"699\":1}}],[\"在业务系统中\",{\"1\":{\"652\":1}}],[\"在业务代码里\",{\"1\":{\"58\":1}}],[\"在某些应用中\",{\"1\":{\"1136\":1}}],[\"在某些特殊情况下会自动切换为row进行记录\",{\"1\":{\"643\":1}}],[\"在某个范围内\",{\"1\":{\"583\":1}}],[\"在创建表时\",{\"1\":{\"639\":1}}],[\"在未来数据被读取时\",{\"1\":{\"638\":1}}],[\"在执行run\",{\"1\":{\"1607\":1}}],[\"在执行完git\",{\"1\":{\"1351\":1}}],[\"在执行此脚本的机器上\",{\"1\":{\"1217\":1}}],[\"在执行事务方法时\",{\"1\":{\"1060\":1}}],[\"在执行dml语句时\",{\"1\":{\"638\":1}}],[\"在执行增删改查操作时\",{\"1\":{\"638\":1}}],[\"在执行\",{\"1\":{\"619\":1,\"1577\":1}}],[\"在查询时\",{\"1\":{\"618\":1}}],[\"在查找某个\",{\"1\":{\"476\":1}}],[\"在数据量比较大时\",{\"1\":{\"618\":1}}],[\"在数据库中\",{\"1\":{\"549\":1}}],[\"在分配资源时判断是否会出现死锁\",{\"1\":{\"1466\":1}}],[\"在分组操作时\",{\"1\":{\"617\":1}}],[\"在分布式系统中\",{\"1\":{\"1277\":1,\"1622\":1}}],[\"在分布式系统中作为协调组件\",{\"1\":{\"1162\":1}}],[\"在分布式系统中存储转发消息\",{\"1\":{\"411\":1}}],[\"在分布式环境中协调和管理服务是一个复杂的过程\",{\"1\":{\"1161\":1}}],[\"在分布式场景\",{\"1\":{\"17\":1}}],[\"在innodb的后台线程中\",{\"1\":{\"640\":1}}],[\"在innodb存储引擎中大量使用了aio\",{\"1\":{\"640\":1}}],[\"在innodb存储引擎中\",{\"1\":{\"615\":1}}],[\"在in之后的列表中的值\",{\"1\":{\"583\":1}}],[\"在该层\",{\"1\":{\"570\":1}}],[\"在该层上引入了线程池的概念\",{\"1\":{\"570\":1}}],[\"在同一个进程内部\",{\"1\":{\"1253\":1}}],[\"在同一个事务中进行加锁操作\",{\"1\":{\"564\":1}}],[\"在同等机器下\",{\"1\":{\"435\":1}}],[\"在将要插入的那一行设置\",{\"1\":{\"558\":1}}],[\"在访问一张表的时候会自动加上\",{\"1\":{\"553\":1}}],[\"在出现同一消费者组内消费者出现问题的时候\",{\"1\":{\"497\":1}}],[\"在出现异常的地方主动\",{\"1\":{\"347\":1}}],[\"在组内选择一个消费者\",{\"1\":{\"483\":1}}],[\"在发送窗口范围内的数据都可以发送出去\",{\"1\":{\"1412\":1}}],[\"在发送数据时\",{\"1\":{\"1411\":1}}],[\"在发送\",{\"1\":{\"471\":1}}],[\"在窗口内通过排序保证消息的有序\",{\"1\":{\"462\":1}}],[\"在当前这个线程等待另一个线程加入进来\",{\"1\":{\"1091\":1}}],[\"在当前线程里执行\",{\"1\":{\"1090\":1}}],[\"在当前\",{\"1\":{\"445\":1}}],[\"在一旁服务四个德国人\",{\"1\":{\"1846\":1}}],[\"在一望无际的荒野和草原上\",{\"1\":{\"1833\":1}}],[\"在一定时间内分多次遍历服务器中的各个数据库\",{\"1\":{\"1573\":1}}],[\"在一定的时间间隔内做一次内存数据的快照\",{\"1\":{\"1170\":1}}],[\"在一个观景台看到了藏獒\",{\"1\":{\"1843\":1}}],[\"在一个\",{\"1\":{\"1571\":1}}],[\"在一个周期内没收到心跳\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"在一个配置纪元里面只会出现一个领头sentinel\",{\"1\":{\"942\":1}}],[\"在一个配置纪元里\",{\"1\":{\"942\":1}}],[\"在一个无限循环里处理\",{\"1\":{\"188\":1}}],[\"在一台普通的服务器上即可以达到10w\",{\"1\":{\"431\":1}}],[\"在相同局域网中的多个\",{\"1\":{\"412\":1}}],[\"在易用性\",{\"1\":{\"411\":1}}],[\"在日志门面中一统天下\",{\"1\":{\"385\":1}}],[\"在初期大家用system\",{\"1\":{\"378\":1}}],[\"在性能上比\",{\"1\":{\"376\":1}}],[\"在2012年推出了了新的项目\",{\"1\":{\"376\":1}}],[\"在桥接模式中\",{\"1\":{\"375\":1}}],[\"在门面模式中\",{\"1\":{\"373\":1}}],[\"在真正需要该对象时\",{\"1\":{\"290\":1}}],[\"在表达式中\",{\"1\":{\"287\":2}}],[\"在混合线程模型中\",{\"1\":{\"280\":1}}],[\"在平台相关的后端使用线性扫描算法在lir上分配寄存器\",{\"1\":{\"269\":1}}],[\"在何种状态下把class文件转换成本地基础设施\",{\"1\":{\"265\":1}}],[\"在运行时根据方法调用的实际类型确定要调用的具体方法实现\",{\"1\":{\"245\":1}}],[\"在类加载的时候做一些静态数据初始化的操作\",{\"1\":{\"289\":1}}],[\"在类加载\",{\"1\":{\"211\":2}}],[\"在类编译期间\",{\"1\":{\"211\":1}}],[\"在java\",{\"1\":{\"1142\":1}}],[\"在java的代码实现上\",{\"1\":{\"196\":1}}],[\"在java中\",{\"1\":{\"196\":1,\"224\":1,\"244\":1,\"245\":1,\"247\":1,\"254\":1,\"1535\":1}}],[\"在java虚拟机中\",{\"1\":{\"172\":1}}],[\"在看几个\",{\"1\":{\"184\":1}}],[\"在这里\",{\"1\":{\"1844\":1}}],[\"在这里也第一次见到磕长头的\",{\"1\":{\"1838\":1}}],[\"在这里执行停止服务的逻辑\",{\"1\":{\"78\":1}}],[\"在这里执行启动服务的逻辑\",{\"1\":{\"78\":1}}],[\"在这一阶段\",{\"1\":{\"1722\":1}}],[\"在这个过程中\",{\"1\":{\"1722\":1}}],[\"在这个队列中的\",{\"1\":{\"856\":1}}],[\"在这几十年的发展过程中\",{\"1\":{\"1721\":1}}],[\"在这种情况下\",{\"1\":{\"1080\":1}}],[\"在这种架构中\",{\"1\":{\"242\":2}}],[\"在这些位置上\",{\"1\":{\"172\":1}}],[\"在使用堆外内存时\",{\"1\":{\"1136\":1}}],[\"在使用完\",{\"1\":{\"154\":1}}],[\"在使用线程池情况下\",{\"1\":{\"154\":1}}],[\"在unsafe类和cas\",{\"1\":{\"150\":1}}],[\"在保证内存可见性上\",{\"1\":{\"145\":1}}],[\"在不停地向神传达人的愿望\",{\"1\":{\"1842\":1}}],[\"在不改变原有对象的情况下扩展原始类的功能\",{\"1\":{\"1503\":1}}],[\"在不改变程序结果的前提下\",{\"1\":{\"143\":1}}],[\"在不同的两个国家交换与协商这些权利时\",{\"1\":{\"1741\":1}}],[\"在不同的场景下会有几倍到几十倍的日志写入性能提升\",{\"1\":{\"391\":1}}],[\"在不同线程中访问同一个\",{\"1\":{\"154\":1,\"1514\":1}}],[\"在不同浏览器之间不共享\",{\"1\":{\"17\":1}}],[\"在hive的mysql元数据库中执行\",{\"1\":{\"130\":1}}],[\"在hdfs中\",{\"1\":{\"118\":1}}],[\"在元数据库中\",{\"1\":{\"118\":1}}],[\"在有限取值范围内的一个值\",{\"1\":{\"112\":1}}],[\"在语法描述中出现\",{\"1\":{\"105\":1}}],[\"在\",{\"1\":{\"91\":3,\"99\":1,\"139\":1,\"149\":1,\"154\":1,\"195\":2,\"209\":1,\"324\":1,\"376\":2,\"410\":1,\"461\":1,\"475\":1,\"515\":1,\"541\":1,\"542\":1,\"544\":2,\"555\":1,\"795\":1,\"808\":1,\"818\":1,\"826\":1,\"829\":1,\"865\":1,\"867\":1,\"967\":1,\"974\":1,\"975\":2,\"1009\":1,\"1015\":1,\"1034\":1,\"1050\":1,\"1051\":1,\"1054\":2,\"1057\":1,\"1059\":2,\"1075\":1,\"1077\":1,\"1099\":1,\"1115\":1,\"1116\":1,\"1137\":1,\"1219\":1,\"1283\":1,\"1322\":1,\"1342\":1,\"1368\":1,\"1369\":1,\"1396\":1,\"1401\":1,\"1420\":1,\"1514\":1,\"1515\":1,\"1516\":1,\"1546\":1,\"1599\":2,\"1786\":1,\"1791\":2}}],[\"在任意一方加入外键\",{\"1\":{\"601\":1}}],[\"在任务完成后自动执行\",{\"1\":{\"77\":1}}],[\"在任何环境中都能够始终如一地运行\",{\"1\":{\"1634\":1}}],[\"在任何\",{\"1\":{\"9\":1}}],[\"在写入\",{\"1\":{\"74\":1}}],[\"在多表查询时\",{\"1\":{\"602\":1}}],[\"在多的一方建立外键\",{\"1\":{\"601\":1}}],[\"在多个应用的系统中\",{\"1\":{\"27\":1,\"1643\":1}}],[\"在多线程下麻烦死的指针变换可以看这里\",{\"1\":{\"6\":1}}],[\"加勒比海盗\",{\"1\":{\"1817\":1}}],[\"加速\",{\"1\":{\"1792\":1}}],[\"加在实现类上\",{\"1\":{\"1708\":1}}],[\"加在\",{\"1\":{\"1608\":1}}],[\"加在controller上开启校验\",{\"1\":{\"1608\":1}}],[\"加表锁\",{\"1\":{\"1562\":1}}],[\"加共享读锁\",{\"1\":{\"1562\":1}}],[\"加行锁时\",{\"1\":{\"1561\":1}}],[\"加互斥锁\",{\"1\":{\"1506\":1}}],[\"加密等处理的场景\",{\"1\":{\"1297\":1}}],[\"加密等\",{\"1\":{\"1297\":1}}],[\"加分布式锁\",{\"1\":{\"1266\":1,\"1584\":1}}],[\"加工\",{\"1\":{\"873\":1}}],[\"加工数据时就会从指定的线程池里取\",{\"1\":{\"818\":1}}],[\"加标记\",{\"1\":{\"773\":1}}],[\"加快页面的加载\",{\"1\":{\"1367\":1}}],[\"加快恢复速度\",{\"1\":{\"742\":1}}],[\"加快处理速度\",{\"1\":{\"638\":1,\"1365\":1}}],[\"加写锁\",{\"0\":{\"1185\":1},\"1\":{\"552\":1}}],[\"加读锁\",{\"0\":{\"1184\":1},\"1\":{\"552\":1}}],[\"加全局锁\",{\"1\":{\"550\":1}}],[\"加上参数\",{\"1\":{\"614\":1}}],[\"加上\",{\"1\":{\"232\":1,\"1205\":1}}],[\"加可中断锁\",{\"1\":{\"156\":1}}],[\"加锁语句\",{\"0\":{\"1562\":1}}],[\"加锁来避免并发访问\",{\"1\":{\"1557\":1}}],[\"加锁保证同步\",{\"1\":{\"1498\":1}}],[\"加锁方式\",{\"1\":{\"1264\":1}}],[\"加锁失败时\",{\"1\":{\"1468\":1}}],[\"加锁失败时cpu睡眠\",{\"1\":{\"1468\":1}}],[\"加锁失败后\",{\"1\":{\"1468\":2}}],[\"加锁失败\",{\"1\":{\"1263\":1,\"1468\":1}}],[\"加锁成功\",{\"1\":{\"1263\":1}}],[\"加锁了\",{\"1\":{\"1115\":1}}],[\"加锁的类型一致\",{\"1\":{\"564\":1}}],[\"加锁总结\",{\"0\":{\"558\":1}}],[\"加锁速度慢\",{\"1\":{\"554\":1}}],[\"加锁速度快\",{\"1\":{\"551\":1}}],[\"加锁过程是系统自动控制\",{\"1\":{\"553\":1}}],[\"加锁后整个实例就处于只读状态\",{\"1\":{\"550\":1}}],[\"加锁获取\",{\"1\":{\"188\":1}}],[\"加锁\",{\"0\":{\"1188\":1},\"1\":{\"156\":1,\"331\":1,\"556\":1,\"1497\":1}}],[\"加锁时\",{\"1\":{\"5\":1}}],[\"加入结果集并返回\",{\"1\":{\"1672\":1,\"1675\":1}}],[\"加入监听对象中\",{\"1\":{\"1607\":1}}],[\"加入一个元素时\",{\"1\":{\"1390\":1}}],[\"加入购物车等手段均摊流量\",{\"1\":{\"1375\":1}}],[\"加入集合\",{\"1\":{\"1114\":1}}],[\"加入事务\",{\"1\":{\"1059\":1}}],[\"加入外部事务是同层级的同一个事务\",{\"1\":{\"1041\":1}}],[\"加入该事务\",{\"1\":{\"1041\":3}}],[\"加入读取\",{\"1\":{\"1024\":1}}],[\"加入服务器状态的clients链表末尾\",{\"1\":{\"924\":1}}],[\"加入服务的本地缓存\",{\"1\":{\"92\":1}}],[\"加入到\",{\"1\":{\"541\":1}}],[\"加入到文档中\",{\"1\":{\"53\":1}}],[\"加入\",{\"1\":{\"533\":1,\"786\":1,\"1114\":1,\"1155\":1}}],[\"加载本地镜像\",{\"1\":{\"1634\":1}}],[\"加载条件\",{\"1\":{\"1527\":1}}],[\"加载到表结构中\",{\"1\":{\"614\":1}}],[\"加载到目标表\",{\"1\":{\"120\":1}}],[\"加载对应的\",{\"1\":{\"541\":1}}],[\"加载自定义的参数\",{\"1\":{\"541\":1}}],[\"加载类路径特定目录下\",{\"1\":{\"383\":1}}],[\"加载机制的桥接包\",{\"1\":{\"382\":1}}],[\"加载因子0\",{\"1\":{\"304\":1}}],[\"加载指定的java堆转储文件\",{\"1\":{\"233\":1}}],[\"加载检查通过后\",{\"1\":{\"214\":1}}],[\"加载阶段完成三件事\",{\"1\":{\"249\":1}}],[\"加载阶段\",{\"1\":{\"211\":1}}],[\"加载数据页\",{\"1\":{\"1553\":1}}],[\"加载数据的语句\",{\"1\":{\"734\":1}}],[\"加载数据\",{\"1\":{\"118\":1}}],[\"加载了\",{\"1\":{\"100\":1}}],[\"加载\",{\"0\":{\"249\":1},\"1\":{\"91\":1,\"99\":1,\"214\":1,\"541\":1,\"1527\":1}}],[\"加强安全性\",{\"1\":{\"14\":1}}],[\"加盐\",{\"1\":{\"14\":1}}],[\"加盐加密\",{\"1\":{\"14\":1}}],[\"加\",{\"1\":{\"9\":1,\"675\":1}}],[\"≤\",{\"1\":{\"9\":1}}],[\"令牌可以禁止\",{\"1\":{\"1642\":1}}],[\"令牌桶算法\",{\"1\":{\"1637\":1}}],[\"令牌\",{\"1\":{\"9\":1,\"15\":1}}],[\"为peers选取最佳的连通方式\",{\"1\":{\"1860\":1}}],[\"为profession\",{\"1\":{\"701\":1}}],[\"为我的产出疯狂着想\",{\"1\":{\"1782\":1}}],[\"为安提约基亚\",{\"1\":{\"1762\":1}}],[\"为旅客寻找最便宜的航班报价\",{\"1\":{\"1751\":1}}],[\"为旅客办理离港及其它相关服务的系统总称\",{\"1\":{\"1723\":1}}],[\"为被访问版本的\",{\"1\":{\"1557\":1}}],[\"为各种框架开箱即用提供便利\",{\"1\":{\"1531\":1}}],[\"为建锁和同步器提供了一些通用功能的是实现\",{\"1\":{\"1516\":1}}],[\"为用户提供一个统一的接口\",{\"1\":{\"1474\":1}}],[\"为用户打造一站式的分布式解决方案\",{\"1\":{\"1287\":1}}],[\"为每个文件创建一个索引数据块\",{\"1\":{\"1476\":1}}],[\"为每个文件分配两个数据结构\",{\"1\":{\"1474\":1}}],[\"为每个进程维护一个打开文件表\",{\"1\":{\"1475\":1}}],[\"为每个方法设置方法调用计数器和回边计数器\",{\"1\":{\"268\":1}}],[\"为每个方法\",{\"1\":{\"268\":1}}],[\"为读缓存提供了预读机制\",{\"1\":{\"1448\":1}}],[\"为单位\",{\"1\":{\"1416\":1}}],[\"为单位的\",{\"1\":{\"476\":1}}],[\"为什么不用二级缓存\",{\"1\":{\"1599\":1}}],[\"为什么需要\",{\"1\":{\"1410\":1}}],[\"为什么需要四次挥手\",{\"1\":{\"1410\":1}}],[\"为什么需要三次握手\",{\"1\":{\"1409\":1}}],[\"为什么是弱引用\",{\"1\":{\"154\":1,\"1514\":1}}],[\"为主要开发语言的分布式计算框架\",{\"1\":{\"1213\":1}}],[\"为当前池中的线程数量\",{\"1\":{\"1112\":1}}],[\"为脚本创建相对应的函数\",{\"1\":{\"966\":1}}],[\"为客户端套接字关联回复处理器\",{\"1\":{\"927\":1}}],[\"为节约内存而开发的由一系列特殊编码的连续内存块组成的顺序型数据结构\",{\"1\":{\"890\":1}}],[\"为下一次rehash做准备\",{\"1\":{\"883\":1}}],[\"为ht\",{\"1\":{\"883\":2}}],[\"为专用于和某个客户端通信的\",{\"1\":{\"787\":1}}],[\"为服务mvvc分两大类\",{\"1\":{\"749\":1}}],[\"为该字段创建唯一索引\",{\"1\":{\"701\":1}}],[\"为该字段创建索引\",{\"1\":{\"701\":1}}],[\"为b+树非叶节点记录\",{\"1\":{\"689\":1}}],[\"为mysql服务器运行时状态提供了一个底层监控功能\",{\"1\":{\"673\":1}}],[\"为优化\",{\"1\":{\"657\":1}}],[\"为宜\",{\"1\":{\"614\":1}}],[\"为通过认证安全接入的客户端提供线程\",{\"1\":{\"570\":1}}],[\"为java类型注册别名\",{\"1\":{\"545\":1}}],[\"为数据库中的记录\",{\"1\":{\"503\":1}}],[\"为有效的消息集的每条消息重新分配绝对偏移量\",{\"1\":{\"476\":1}}],[\"为防止日志文件过大导致数据定位效率低下\",{\"1\":{\"475\":1}}],[\"为大数据而生的消息中间件\",{\"1\":{\"410\":1}}],[\"为其提供有序\",{\"1\":{\"407\":1}}],[\"为类的静态变量分配内存\",{\"1\":{\"251\":1}}],[\"为新生对象分配内存\",{\"1\":{\"214\":1}}],[\"为空时直接返回\",{\"1\":{\"184\":1}}],[\"为了看南迦巴瓦的日出\",{\"1\":{\"1842\":1}}],[\"为了从宿舍到实验室那\",{\"1\":{\"1796\":1}}],[\"为了国民生活的繁荣\",{\"1\":{\"1767\":1}}],[\"为了征税\",{\"1\":{\"1767\":1}}],[\"为了在多进程环境下\",{\"1\":{\"1443\":1}}],[\"为了达到最佳的传输效能\",{\"1\":{\"1416\":1}}],[\"为了性能考虑\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"为了防止锁过期后解锁操作误删了其它线程加的锁\",{\"1\":{\"1582\":1}}],[\"为了防止资源紧张时\",{\"1\":{\"1412\":1}}],[\"为了防止业务还未完成锁已经过期释放了\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"为了防止网络请求的延迟\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"为了防止解锁操作误删了其它线程加的锁\",{\"1\":{\"1263\":1}}],[\"为了降低迁移风险\",{\"1\":{\"1236\":1}}],[\"为了统一方便管理\",{\"1\":{\"1219\":1}}],[\"为了快速响应\",{\"1\":{\"1205\":1}}],[\"为了保证集群大部分服务的可用性和可靠性\",{\"1\":{\"1636\":1}}],[\"为了保证\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"为了保证数据的一致性\",{\"1\":{\"1200\":1}}],[\"为了保证线程安全\",{\"1\":{\"1116\":1}}],[\"为了保证消息不丢失\",{\"1\":{\"419\":1}}],[\"为了执行lua脚本包含的redis命令\",{\"1\":{\"964\":1}}],[\"为了维护主从一致性\",{\"1\":{\"934\":1}}],[\"为了避免资源竞争而导致数据错乱\",{\"1\":{\"1468\":1}}],[\"为了避免其它业务的服务干扰\",{\"1\":{\"1233\":1}}],[\"为了避免临界区的竞态条件发生\",{\"1\":{\"1072\":1}}],[\"为了避免客户端输入缓冲区溢出\",{\"1\":{\"917\":1}}],[\"为了避免大量写命令造成aof文件体积过大\",{\"1\":{\"917\":1,\"1577\":1}}],[\"为了避免一次性大量rehash对服务器性能造成影响\",{\"1\":{\"883\":1}}],[\"为了避免参数一层层显式传递\",{\"1\":{\"154\":1,\"1514\":1}}],[\"为了双工通信\",{\"1\":{\"848\":1}}],[\"为了更好的管理undo页面链表\",{\"1\":{\"751\":1}}],[\"为了mvvc\",{\"1\":{\"750\":1}}],[\"为了实现事务的持久性\",{\"1\":{\"738\":1}}],[\"为了节省空间还包含一些零散的页\",{\"1\":{\"694\":1}}],[\"为了缓解磁盘io及cpu的性能瓶颈\",{\"1\":{\"652\":1}}],[\"为了解决内存分段的\",{\"1\":{\"1443\":1}}],[\"为了解决中断处理程序执行过长和中断丢失的问题\",{\"1\":{\"1437\":1}}],[\"为了解决旧版复制在断线后重复制的巨大开销\",{\"1\":{\"935\":1}}],[\"为了解决并发事务所引发的问题\",{\"1\":{\"737\":1}}],[\"为了解决上述问题\",{\"1\":{\"651\":1}}],[\"为了解决这一问题\",{\"1\":{\"460\":1}}],[\"为了解决这个问题就需要一种跨机器的互斥机制来控制共享资源的访问\",{\"1\":{\"1262\":1}}],[\"为了解决这个问题\",{\"1\":{\"379\":1,\"450\":1}}],[\"为了支持mvcc\",{\"1\":{\"754\":1}}],[\"为了支持\",{\"1\":{\"526\":1}}],[\"为了确保\",{\"1\":{\"514\":1}}],[\"为了做好负载均衡并提高容错能力\",{\"1\":{\"469\":1}}],[\"为了应对这种场景统一日志系统应运而生\",{\"1\":{\"441\":1}}],[\"为了提高网络的传输效率\",{\"1\":{\"1412\":1}}],[\"为了提高事务并发效率\",{\"1\":{\"751\":1}}],[\"为了提高可用性\",{\"1\":{\"443\":1}}],[\"为了提高吞吐量\",{\"1\":{\"443\":1}}],[\"为了提高os的工作效率\",{\"1\":{\"134\":1}}],[\"为了提升内存分配效率\",{\"1\":{\"210\":1}}],[\"为了使\",{\"1\":{\"154\":1}}],[\"为此采用两阶段提交机制\",{\"1\":{\"1556\":1}}],[\"为此提出了readview\",{\"1\":{\"754\":1}}],[\"为此\",{\"1\":{\"83\":1,\"419\":1,\"433\":1,\"750\":1}}],[\"为此需要放大域名的作用域\",{\"1\":{\"22\":1}}],[\"为决策提供依据\",{\"1\":{\"31\":1}}],[\"为session扩大作用域\",{\"1\":{\"24\":1}}],[\"为例\",{\"1\":{\"9\":1,\"1518\":1}}],[\"为\",{\"1\":{\"9\":5,\"62\":2,\"154\":2,\"865\":1,\"873\":1,\"965\":1,\"1076\":1,\"1218\":1,\"1269\":2,\"1446\":1,\"1497\":1,\"1514\":1,\"1598\":1,\"1613\":2}}],[\"为本线程来获取锁\",{\"1\":{\"6\":1}}],[\"资源全\",{\"1\":{\"1811\":1}}],[\"资源库需要维护\",{\"1\":{\"1811\":1}}],[\"资源库整合了很多网盘的资源\",{\"1\":{\"1809\":1}}],[\"资源和谐\",{\"1\":{\"1811\":1}}],[\"资源统一\",{\"1\":{\"1811\":1}}],[\"资源具体的呈现形式\",{\"1\":{\"1640\":1}}],[\"资源非独占\",{\"1\":{\"1466\":1}}],[\"资源不存在\",{\"1\":{\"1398\":1}}],[\"资源未修改\",{\"1\":{\"1398\":1}}],[\"资源允许的情况下\",{\"1\":{\"1301\":1}}],[\"资源管理器\",{\"1\":{\"1287\":1}}],[\"资源调度为一体的大数据框架\",{\"1\":{\"1214\":1}}],[\"资源的\",{\"1\":{\"1008\":1}}],[\"资源加载策略\",{\"0\":{\"1008\":1}}],[\"资源加载模块\",{\"1\":{\"545\":1}}],[\"资源释放等功能\",{\"1\":{\"870\":1}}],[\"资源\",{\"1\":{\"783\":1,\"791\":1,\"1104\":1,\"1400\":1,\"1470\":1,\"1634\":1,\"1640\":2}}],[\"资源引用\",{\"1\":{\"528\":1}}],[\"资源表示共享的读锁和独占的写锁\",{\"1\":{\"9\":1}}],[\"资源表示信号量\",{\"1\":{\"9\":1}}],[\"资源表示倒数计数器\",{\"1\":{\"9\":1}}],[\"资源表示独占锁\",{\"1\":{\"9\":1}}],[\"资源正被其它线程占有\",{\"1\":{\"6\":1}}],[\"dx\",{\"1\":{\"1799\":1}}],[\"dcs\",{\"1\":{\"1723\":1}}],[\"dcl\",{\"0\":{\"589\":1},\"1\":{\"572\":1}}],[\"d=<date\",{\"1\":{\"1697\":1}}],[\"df\",{\"1\":{\"1631\":1,\"1700\":1}}],[\"dfs\",{\"0\":{\"1000\":1},\"1\":{\"1000\":7,\"1217\":2,\"1218\":12}}],[\"dgram\",{\"1\":{\"1461\":1}}],[\"dsah视频系统\",{\"1\":{\"1873\":1}}],[\"dsa\",{\"1\":{\"1401\":1}}],[\"dsl语句和格式\",{\"1\":{\"42\":1}}],[\"dsl\",{\"1\":{\"42\":1,\"51\":1}}],[\"dns服务器之间迭代查询\",{\"1\":{\"1424\":1}}],[\"dns\",{\"0\":{\"1424\":1},\"1\":{\"1394\":1,\"1426\":1,\"1792\":5}}],[\"d8329f\",{\"1\":{\"1350\":1}}],[\"d670460b4b4aece5915caf5c68d12f560a9fe3e4\",{\"1\":{\"1350\":1}}],[\"dl\",{\"0\":{\"1876\":1,\"1877\":1},\"1\":{\"1436\":2,\"1877\":5}}],[\"dlinkednode>\",{\"1\":{\"1002\":1,\"1651\":2}}],[\"dlinkednode\",{\"1\":{\"1002\":16,\"1651\":18}}],[\"dlx\",{\"1\":{\"425\":1,\"1629\":2}}],[\"dp\",{\"0\":{\"994\":1},\"1\":{\"993\":8,\"994\":8,\"996\":11,\"1655\":6,\"1656\":1}}],[\"dma将数据读入内核缓冲区\",{\"1\":{\"802\":1}}],[\"dma\",{\"1\":{\"799\":3,\"801\":2,\"802\":1,\"1395\":2,\"1479\":1,\"1481\":1,\"1486\":5}}],[\"dml\",{\"0\":{\"577\":1},\"1\":{\"550\":1,\"552\":1,\"553\":2,\"554\":1,\"572\":1,\"647\":1,\"678\":1,\"734\":1}}],[\"dhcp\",{\"0\":{\"1426\":1},\"1\":{\"1426\":7}}],[\"dhc\",{\"1\":{\"667\":1}}],[\"dql执行顺序\",{\"0\":{\"588\":1},\"1\":{\"588\":1}}],[\"dql\",{\"0\":{\"581\":1},\"1\":{\"552\":1,\"553\":1,\"554\":1,\"572\":1}}],[\"drawimage\",{\"1\":{\"1856\":1}}],[\"dram\",{\"1\":{\"1434\":1}}],[\"drainqueue\",{\"1\":{\"1116\":1}}],[\"drain\",{\"1\":{\"450\":1}}],[\"drive这些同步盘\",{\"1\":{\"1805\":1}}],[\"driven\",{\"1\":{\"807\":1}}],[\"driver\",{\"1\":{\"506\":4,\"524\":2,\"526\":1,\"1224\":1,\"1632\":1}}],[\"drop\",{\"1\":{\"108\":1,\"116\":1,\"118\":1,\"574\":1,\"575\":1,\"576\":1,\"590\":1,\"591\":1,\"599\":2,\"622\":1,\"628\":1,\"634\":1,\"636\":1,\"675\":6,\"701\":2,\"1226\":2,\"1343\":1,\"1567\":2}}],[\"ddos\",{\"1\":{\"1414\":1}}],[\"ddl\",{\"0\":{\"573\":1},\"1\":{\"553\":3,\"572\":1,\"647\":1}}],[\"ddl语句\",{\"1\":{\"550\":1}}],[\"dd\",{\"1\":{\"388\":1,\"643\":2,\"665\":3}}],[\"dtd文件位置\",{\"1\":{\"357\":1}}],[\"dtd文件名\",{\"1\":{\"357\":1}}],[\"dtd\",{\"1\":{\"357\":1,\"506\":6}}],[\"dup\",{\"1\":{\"880\":1}}],[\"duplicate\",{\"1\":{\"832\":1,\"1411\":1}}],[\"duplicateweedout\",{\"1\":{\"726\":1}}],[\"durability\",{\"1\":{\"735\":1,\"1032\":1}}],[\"durable\",{\"1\":{\"418\":2}}],[\"duration\",{\"1\":{\"353\":1,\"488\":1,\"552\":1,\"1869\":6}}],[\"dubbo\",{\"1\":{\"391\":1,\"808\":1,\"1109\":1}}],[\"dumpstack\",{\"1\":{\"1095\":1}}],[\"dumpthreads\",{\"1\":{\"1095\":2}}],[\"dumplogsegments\",{\"1\":{\"475\":1}}],[\"dump\",{\"1\":{\"232\":2,\"233\":4,\"234\":1,\"235\":3,\"914\":2,\"1109\":1,\"1367\":1,\"1529\":1,\"1563\":2,\"1576\":1}}],[\"dummyqueue\",{\"1\":{\"195\":2}}],[\"dashdemo\",{\"1\":{\"1872\":1}}],[\"dashjs\",{\"1\":{\"1870\":2,\"1872\":1}}],[\"dash中音视频分开编码\",{\"1\":{\"1868\":1}}],[\"dashif\",{\"1\":{\"1866\":1}}],[\"dash\",{\"1\":{\"1866\":1,\"1867\":1,\"1870\":3,\"1873\":1}}],[\"dash简介\",{\"0\":{\"1866\":1}}],[\"daemon\",{\"1\":{\"1087\":1,\"1088\":1,\"1099\":1,\"1217\":2,\"1222\":2}}],[\"dao层\",{\"1\":{\"1604\":1}}],[\"dao\",{\"1\":{\"1010\":1,\"1054\":1,\"1594\":1}}],[\"day06\",{\"0\":{\"1846\":1}}],[\"day05\",{\"0\":{\"1845\":1}}],[\"day04\",{\"0\":{\"1844\":1}}],[\"day03\",{\"0\":{\"1843\":1}}],[\"day02\",{\"0\":{\"1842\":1}}],[\"day01\",{\"0\":{\"1841\":1}}],[\"days\",{\"1\":{\"1261\":1}}],[\"dayofmonth\",{\"1\":{\"129\":1}}],[\"day\",{\"1\":{\"113\":1,\"118\":1,\"129\":1,\"595\":1,\"1567\":1,\"1697\":1}}],[\"dat\",{\"1\":{\"614\":1}}],[\"data`\",{\"1\":{\"1357\":1}}],[\"datajson\",{\"1\":{\"1261\":5}}],[\"datagrip\",{\"1\":{\"1224\":1}}],[\"datagramchannel\",{\"1\":{\"760\":1,\"792\":5}}],[\"datagramsocket的子类multicastsocket\",{\"1\":{\"342\":1}}],[\"datagramsocket\",{\"1\":{\"342\":2}}],[\"datagrampacket\",{\"1\":{\"342\":2}}],[\"datanode读取\",{\"1\":{\"1220\":1}}],[\"datanode\",{\"1\":{\"1216\":1,\"1217\":2,\"1220\":6}}],[\"datalength\",{\"1\":{\"1174\":1}}],[\"datalogdir\",{\"1\":{\"1170\":1}}],[\"dataversion\",{\"1\":{\"1174\":1}}],[\"datadir\",{\"1\":{\"1170\":1}}],[\"datadir=\",{\"1\":{\"1164\":1,\"1196\":1}}],[\"datatime=date1\",{\"1\":{\"675\":1}}],[\"datafile\",{\"1\":{\"639\":1}}],[\"datasourcetransactionmanager或jtatransactionmanager等事务管理器执行流程\",{\"1\":{\"1059\":1}}],[\"datasourcetransactionmanagerautoconfiguration\",{\"1\":{\"1054\":1}}],[\"datasourcetransactionmanager\",{\"0\":{\"1052\":1},\"1\":{\"1052\":1,\"1054\":5}}],[\"datasource\",{\"0\":{\"526\":1},\"1\":{\"506\":1,\"1052\":1,\"1054\":7}}],[\"datasource>\",{\"1\":{\"506\":1,\"518\":1,\"524\":1}}],[\"datas\",{\"1\":{\"445\":1}}],[\"data进行数据加载\",{\"1\":{\"119\":1}}],[\"database=name\",{\"1\":{\"675\":1}}],[\"databases部分\",{\"1\":{\"913\":1}}],[\"databases\",{\"1\":{\"574\":1,\"675\":1,\"913\":2}}],[\"databaseid\",{\"1\":{\"527\":1}}],[\"databaseidproviderelement\",{\"1\":{\"541\":1}}],[\"databaseidprovider\",{\"0\":{\"527\":1},\"1\":{\"541\":1}}],[\"database\",{\"1\":{\"105\":1,\"107\":3,\"108\":1,\"109\":2,\"110\":1,\"124\":1,\"574\":3,\"674\":2,\"675\":4,\"1226\":2}}],[\"data\",{\"0\":{\"1357\":1},\"1\":{\"15\":1,\"24\":2,\"101\":1,\"118\":2,\"120\":2,\"124\":2,\"126\":1,\"445\":2,\"465\":1,\"553\":1,\"572\":4,\"614\":1,\"635\":1,\"639\":1,\"675\":1,\"729\":1,\"734\":1,\"739\":2,\"742\":1,\"767\":1,\"778\":4,\"796\":1,\"799\":1,\"1168\":1,\"1173\":1,\"1175\":1,\"1180\":1,\"1181\":1,\"1192\":1,\"1214\":2,\"1226\":1,\"1228\":1,\"1261\":3,\"1263\":5,\"1264\":5,\"1368\":1,\"1435\":1,\"1859\":8}}],[\"dateutils\",{\"1\":{\"1244\":2}}],[\"date2\",{\"1\":{\"595\":1}}],[\"date1\",{\"1\":{\"595\":1}}],[\"datetime=date2\",{\"1\":{\"675\":1}}],[\"datetime\",{\"1\":{\"665\":1}}],[\"datetimeformatter\",{\"1\":{\"146\":1,\"353\":1}}],[\"datetypehandler\",{\"1\":{\"521\":1}}],[\"dateofbirth\",{\"1\":{\"515\":1}}],[\"datestr\",{\"1\":{\"353\":1}}],[\"datediff\",{\"1\":{\"129\":1,\"595\":2}}],[\"date>数据为\",{\"1\":{\"122\":1}}],[\"date\",{\"0\":{\"1697\":1},\"1\":{\"14\":1,\"36\":1,\"112\":1,\"124\":1,\"129\":4,\"353\":5,\"388\":1,\"515\":1,\"521\":1,\"595\":7,\"665\":1,\"1218\":1,\"1567\":6,\"1697\":2}}],[\"d\",{\"1\":{\"79\":2,\"301\":2,\"388\":4,\"515\":4,\"603\":6,\"604\":6,\"611\":3,\"643\":1,\"662\":1,\"675\":3,\"773\":3,\"778\":6,\"831\":1,\"990\":2,\"1016\":1,\"1150\":1,\"1155\":1,\"1168\":1,\"1314\":1,\"1329\":1,\"1333\":2,\"1335\":1,\"1343\":2,\"1366\":3,\"1437\":1,\"1631\":1,\"1688\":2,\"1690\":1,\"1692\":2,\"1697\":3,\"1700\":2,\"1735\":1}}],[\"div>\",{\"1\":{\"1336\":2,\"1870\":1}}],[\"dive和索引的基数cardinality进行比较\",{\"1\":{\"717\":1}}],[\"dive\",{\"1\":{\"717\":1}}],[\"divergence\",{\"1\":{\"471\":1}}],[\"dig\",{\"1\":{\"1792\":1}}],[\"digest\",{\"1\":{\"1177\":1}}],[\"digit\",{\"1\":{\"79\":1}}],[\"dio\",{\"1\":{\"826\":1,\"860\":1}}],[\"dictionary\",{\"1\":{\"1148\":2}}],[\"dict字典\",{\"1\":{\"967\":1}}],[\"dicttype\",{\"1\":{\"882\":1}}],[\"dictht\",{\"1\":{\"882\":1}}],[\"dictentry\",{\"1\":{\"882\":1}}],[\"dict\",{\"1\":{\"749\":1,\"882\":1,\"967\":3,\"1574\":1}}],[\"diamond\",{\"1\":{\"263\":1}}],[\"dir参数决定\",{\"1\":{\"1228\":1}}],[\"dir\",{\"1\":{\"778\":1,\"779\":3,\"1631\":1,\"1634\":2,\"1791\":1}}],[\"dirty计数器记录上次成功执行save\",{\"1\":{\"912\":1}}],[\"dirty\",{\"1\":{\"638\":1,\"960\":2}}],[\"dir=1\",{\"1\":{\"445\":1}}],[\"dirs=\",{\"1\":{\"445\":1}}],[\"dirs\",{\"1\":{\"254\":1}}],[\"directbuffer\",{\"1\":{\"826\":1,\"1136\":1}}],[\"directbuffer2\",{\"1\":{\"826\":2}}],[\"directbuf1\",{\"1\":{\"826\":2}}],[\"directbytebuffer是\",{\"1\":{\"1136\":1}}],[\"directbytebuffer\",{\"0\":{\"800\":1},\"1\":{\"761\":1,\"770\":2,\"800\":5,\"1136\":2}}],[\"directexchange\",{\"1\":{\"418\":2}}],[\"direct\",{\"1\":{\"212\":1,\"404\":1,\"414\":1,\"770\":1,\"799\":1,\"1446\":2,\"1479\":2,\"1486\":1,\"1625\":1,\"1628\":1}}],[\"directory中构成页目录\",{\"1\":{\"690\":1}}],[\"directory\",{\"0\":{\"690\":1},\"1\":{\"121\":1,\"688\":1,\"1226\":1,\"1344\":1}}],[\"disable\",{\"1\":{\"1695\":1}}],[\"dist\",{\"1\":{\"1791\":2}}],[\"distance\",{\"1\":{\"1666\":1}}],[\"distance的json格式串\",{\"1\":{\"1355\":1}}],[\"distribute\",{\"1\":{\"1226\":1}}],[\"distributed\",{\"1\":{\"1214\":2,\"1215\":1}}],[\"distinct\",{\"1\":{\"312\":1,\"582\":1,\"624\":1,\"707\":2,\"1068\":1,\"1226\":1,\"1567\":1}}],[\"dispatcherservlet\",{\"1\":{\"1605\":2}}],[\"dispatch\",{\"1\":{\"1488\":1}}],[\"dispatchuncaughtexception\",{\"1\":{\"1096\":1}}],[\"disposablebeans\",{\"1\":{\"1012\":1}}],[\"display\",{\"1\":{\"117\":1}}],[\"disk\",{\"1\":{\"740\":1}}],[\"disruptor\",{\"1\":{\"391\":1,\"1435\":1}}],[\"discriminator+case\",{\"1\":{\"532\":1}}],[\"discard\",{\"1\":{\"959\":1}}],[\"discardoldestpolicy\",{\"1\":{\"332\":1,\"1109\":1,\"1511\":1}}],[\"discardpolicy\",{\"1\":{\"332\":1,\"1109\":1,\"1511\":1}}],[\"discover\",{\"1\":{\"1426\":1}}],[\"discovered域\",{\"1\":{\"188\":1}}],[\"discovered\",{\"1\":{\"187\":2,\"188\":3}}],[\"discovered串成队列\",{\"1\":{\"186\":1}}],[\"disconnect\",{\"1\":{\"1008\":1,\"1859\":1}}],[\"disconnected\",{\"1\":{\"70\":1}}],[\"diff\",{\"0\":{\"1317\":1},\"1\":{\"71\":1,\"720\":1,\"1317\":3,\"1347\":1}}],[\"dynadot\",{\"1\":{\"1792\":2}}],[\"dynamicadvisedinterceptor\",{\"1\":{\"1022\":1}}],[\"dynamic\",{\"0\":{\"687\":1},\"1\":{\"42\":1,\"683\":1,\"878\":1,\"1866\":1}}],[\"dysmsapi20170525\",{\"1\":{\"14\":2}}],[\"dvx\",{\"1\":{\"37\":1}}],[\"dothrow\",{\"1\":{\"1713\":2}}],[\"dointransaction\",{\"1\":{\"1039\":2,\"1055\":1}}],[\"dointransactionwithoutresult\",{\"1\":{\"1039\":3}}],[\"does\",{\"1\":{\"1008\":1,\"1368\":1}}],[\"doreadbytes\",{\"1\":{\"873\":1}}],[\"doreadmessages\",{\"1\":{\"873\":3}}],[\"doregister\",{\"1\":{\"865\":2}}],[\"dobeginread\",{\"1\":{\"867\":2}}],[\"dobind\",{\"1\":{\"866\":3,\"867\":1}}],[\"do\",{\"1\":{\"633\":1,\"634\":1,\"873\":2,\"1050\":1,\"1051\":1,\"1091\":1,\"1154\":1}}],[\"doug\",{\"1\":{\"1214\":1}}],[\"doupdate\",{\"1\":{\"544\":1}}],[\"double保存的浮点数\",{\"1\":{\"896\":1}}],[\"double型浮点数\",{\"1\":{\"886\":1}}],[\"doublebuffer\",{\"1\":{\"761\":1}}],[\"doublewrite\",{\"1\":{\"639\":1}}],[\"double需要2个slot外\",{\"1\":{\"204\":1}}],[\"doubleaccumulator\",{\"1\":{\"150\":1}}],[\"doubleadder\",{\"1\":{\"150\":1}}],[\"doubles\",{\"1\":{\"80\":1,\"215\":1}}],[\"double\",{\"1\":{\"36\":1,\"80\":2,\"112\":1,\"124\":7,\"287\":2,\"348\":1,\"351\":2,\"521\":1,\"631\":1,\"662\":1,\"828\":2,\"1068\":1,\"1712\":2}}],[\"doquery\",{\"1\":{\"544\":4}}],[\"down标记\",{\"1\":{\"941\":2}}],[\"download\",{\"1\":{\"666\":1,\"1867\":1}}],[\"downloads\",{\"1\":{\"666\":1,\"779\":1}}],[\"down\",{\"1\":{\"494\":1,\"941\":2,\"942\":2}}],[\"domain\",{\"1\":{\"520\":2,\"530\":3,\"538\":1,\"1461\":2,\"1792\":2}}],[\"dom4j\",{\"1\":{\"357\":2}}],[\"dom解析\",{\"1\":{\"357\":1}}],[\"dostop\",{\"1\":{\"78\":1}}],[\"dostartthread\",{\"1\":{\"871\":2}}],[\"dostart\",{\"1\":{\"78\":1}}],[\"dosignal\",{\"1\":{\"8\":2}}],[\"done\",{\"1\":{\"77\":1}}],[\"docs\",{\"1\":{\"1791\":1}}],[\"docker\",{\"0\":{\"1634\":1},\"1\":{\"791\":1,\"1634\":25}}],[\"doctype\",{\"1\":{\"357\":1,\"506\":2,\"1870\":1}}],[\"doc\",{\"1\":{\"47\":2,\"48\":1,\"49\":1,\"50\":2,\"59\":1}}],[\"doc3\",{\"1\":{\"34\":1}}],[\"doc2\",{\"1\":{\"34\":2}}],[\"doc1\",{\"1\":{\"34\":1}}],[\"documented\",{\"1\":{\"1057\":1}}],[\"document\",{\"1\":{\"34\":1,\"53\":1,\"1870\":1}}],[\"dofilterinternal\",{\"1\":{\"25\":1}}],[\"dogettransaction\",{\"1\":{\"1049\":1}}],[\"doget\",{\"1\":{\"15\":1}}],[\"dopost\",{\"1\":{\"15\":1}}],[\"db=reggie\",{\"1\":{\"1154\":1}}],[\"db=mysql\",{\"1\":{\"1154\":1}}],[\"db数组的每个项都是一个redis\",{\"1\":{\"906\":1}}],[\"dbs\",{\"1\":{\"697\":1}}],[\"db01\",{\"1\":{\"675\":1}}],[\"db3\",{\"1\":{\"675\":1}}],[\"db2\",{\"1\":{\"675\":1}}],[\"db1\",{\"1\":{\"675\":1}}],[\"dba\",{\"1\":{\"673\":1}}],[\"dbms\",{\"1\":{\"569\":1}}],[\"db密码\",{\"1\":{\"526\":1}}],[\"db用户名\",{\"1\":{\"526\":1}}],[\"db\",{\"1\":{\"14\":1,\"31\":1,\"105\":1,\"107\":1,\"108\":1,\"110\":1,\"118\":6,\"530\":1,\"550\":1,\"569\":1,\"675\":4,\"913\":2,\"929\":1,\"1154\":1,\"1228\":1,\"1263\":1,\"1269\":2,\"1367\":1,\"1483\":1,\"1574\":5,\"1613\":2}}],[\"demo目录\",{\"1\":{\"1870\":1}}],[\"dense\",{\"1\":{\"1567\":1}}],[\"dentry\",{\"1\":{\"1474\":1}}],[\"deny\",{\"1\":{\"388\":2}}],[\"deepseek\",{\"1\":{\"1238\":2,\"1239\":1,\"1240\":2}}],[\"derby\",{\"1\":{\"1224\":1}}],[\"derived\",{\"1\":{\"728\":1}}],[\"de\",{\"1\":{\"1083\":1}}],[\"deque额外提供了first\",{\"1\":{\"988\":1}}],[\"deque中的peek\",{\"1\":{\"988\":1}}],[\"deque中add\",{\"1\":{\"988\":1}}],[\"deque和queue提供了两套api\",{\"1\":{\"988\":1}}],[\"deque\",{\"0\":{\"988\":1},\"1\":{\"987\":7}}],[\"deque<integer>\",{\"1\":{\"986\":1,\"987\":1}}],[\"dequeued\",{\"1\":{\"186\":1}}],[\"deallocator\",{\"1\":{\"1136\":1}}],[\"deallocate\",{\"1\":{\"829\":1}}],[\"dead\",{\"1\":{\"424\":1,\"425\":3,\"1629\":1}}],[\"deadline\",{\"1\":{\"363\":2,\"1436\":1}}],[\"detail\",{\"1\":{\"1567\":1}}],[\"details\",{\"1\":{\"10\":2,\"1069\":1,\"1156\":2}}],[\"determinetransactionmanager\",{\"1\":{\"1059\":1}}],[\"determinetransactionaspectclass\",{\"1\":{\"1058\":2}}],[\"deterministic\",{\"1\":{\"635\":1}}],[\"decrementworkercount\",{\"1\":{\"1115\":1}}],[\"decode\",{\"1\":{\"774\":2,\"797\":1,\"849\":1,\"850\":1,\"1433\":1}}],[\"decoder\",{\"1\":{\"101\":2}}],[\"dec\",{\"1\":{\"662\":1}}],[\"decimal\",{\"1\":{\"662\":1}}],[\"declare\",{\"1\":{\"634\":6}}],[\"declarebinding\",{\"1\":{\"418\":1}}],[\"declarequeue\",{\"1\":{\"418\":1}}],[\"declareexchange\",{\"1\":{\"418\":1}}],[\"des\",{\"1\":{\"1401\":1}}],[\"destroy\",{\"1\":{\"1381\":1}}],[\"destroymethod\",{\"1\":{\"1264\":1}}],[\"destroyed\",{\"1\":{\"1099\":1}}],[\"destaddress\",{\"1\":{\"1136\":1}}],[\"destoffset\",{\"1\":{\"1136\":1}}],[\"destbase\",{\"1\":{\"1136\":1}}],[\"destinationtype\",{\"1\":{\"418\":3}}],[\"destination\",{\"1\":{\"408\":1,\"418\":1,\"1730\":1}}],[\"deserializer=org\",{\"1\":{\"489\":1}}],[\"deserializer\",{\"1\":{\"488\":2}}],[\"desciption\",{\"1\":{\"1862\":1}}],[\"descfuture\",{\"1\":{\"1369\":1}}],[\"description\",{\"1\":{\"1349\":1,\"1860\":1,\"1862\":1}}],[\"describe\",{\"1\":{\"129\":1}}],[\"desc\",{\"1\":{\"105\":2,\"124\":1,\"575\":1,\"586\":2,\"616\":1,\"727\":1,\"971\":1,\"1226\":2}}],[\"deltas\",{\"1\":{\"1309\":1}}],[\"delta\",{\"1\":{\"1120\":3}}],[\"del\",{\"1\":{\"747\":1,\"748\":1,\"749\":1,\"1263\":1}}],[\"delayed\",{\"1\":{\"1629\":1}}],[\"delayedworkqueue\",{\"1\":{\"1499\":1}}],[\"delay\",{\"1\":{\"334\":2,\"1091\":3,\"1110\":3}}],[\"deletingchildrenifneeded\",{\"1\":{\"1181\":1}}],[\"deletemapping\",{\"1\":{\"1608\":1}}],[\"delete操作\",{\"1\":{\"1554\":1}}],[\"delete操作通过添加事务保证原子性\",{\"1\":{\"1031\":1}}],[\"deleted`\",{\"1\":{\"1357\":1,\"1358\":1}}],[\"deleteall\",{\"1\":{\"1176\":1}}],[\"deleteauthor\",{\"1\":{\"530\":1}}],[\"delete语句删除正常记录分两个阶段\",{\"1\":{\"747\":1}}],[\"delete语句不能删除某一个字段的值\",{\"1\":{\"580\":1}}],[\"delete之前或之后\",{\"1\":{\"636\":1}}],[\"delete>\",{\"1\":{\"530\":1}}],[\"delete删除文件\",{\"1\":{\"314\":1}}],[\"deleteindexrequest\",{\"1\":{\"44\":2}}],[\"delete\",{\"0\":{\"747\":1},\"1\":{\"44\":2,\"49\":1,\"477\":1,\"509\":1,\"529\":1,\"530\":2,\"533\":1,\"558\":1,\"580\":2,\"591\":1,\"599\":1,\"607\":1,\"636\":2,\"689\":1,\"747\":4,\"779\":1,\"1168\":1,\"1176\":1,\"1181\":1,\"1189\":1,\"1329\":1,\"1338\":1,\"1351\":1,\"1368\":1,\"1554\":1,\"1640\":1}}],[\"delegation\",{\"1\":{\"254\":1}}],[\"deliverytag\",{\"1\":{\"422\":3}}],[\"delivery\",{\"1\":{\"413\":1,\"1628\":1}}],[\"deliveryconfigqueryaction\",{\"1\":{\"391\":1}}],[\"delivermoney\",{\"1\":{\"124\":1}}],[\"delimited\",{\"1\":{\"113\":5,\"118\":1,\"119\":1,\"121\":1,\"124\":2,\"126\":1,\"1227\":3,\"1228\":2}}],[\"deicimal\",{\"1\":{\"112\":1}}],[\"deviceid\",{\"1\":{\"1854\":1}}],[\"devops\",{\"1\":{\"1777\":1}}],[\"development\",{\"1\":{\"506\":2,\"524\":2,\"807\":1}}],[\"developer\",{\"1\":{\"283\":1,\"546\":2,\"1304\":1,\"1791\":1}}],[\"dev\",{\"1\":{\"85\":1,\"666\":1,\"1700\":2}}],[\"debugenabled\",{\"1\":{\"1049\":5}}],[\"debuggingclasswriter\",{\"1\":{\"1016\":1}}],[\"debugger\",{\"1\":{\"235\":2}}],[\"debugall\",{\"1\":{\"788\":1,\"791\":1,\"792\":1,\"796\":1}}],[\"debugread\",{\"1\":{\"782\":1,\"783\":1}}],[\"debug\",{\"1\":{\"66\":4,\"67\":2,\"68\":1,\"79\":5,\"153\":3,\"355\":2,\"384\":2,\"390\":1,\"391\":1,\"507\":3,\"767\":2,\"791\":1,\"796\":1,\"797\":1,\"817\":3,\"818\":2,\"820\":4,\"821\":1,\"822\":8,\"823\":4,\"844\":1,\"846\":1,\"849\":2,\"850\":1,\"990\":1,\"1016\":1,\"1049\":1,\"1050\":2}}],[\"deploy\",{\"1\":{\"1791\":1,\"1793\":1}}],[\"departure\",{\"1\":{\"1723\":1}}],[\"department\",{\"1\":{\"515\":3,\"530\":1}}],[\"dependent\",{\"1\":{\"728\":2}}],[\"dependency>\",{\"1\":{\"24\":2,\"39\":1,\"382\":8,\"383\":1,\"416\":1,\"455\":2,\"487\":2,\"505\":2,\"810\":1,\"1179\":3,\"1707\":1,\"1717\":1}}],[\"depth\",{\"1\":{\"1791\":1}}],[\"depth控制\",{\"1\":{\"731\":1}}],[\"dept\",{\"1\":{\"599\":4,\"602\":3,\"603\":4,\"604\":4,\"608\":4,\"609\":4,\"611\":2}}],[\"deprecated\",{\"1\":{\"62\":1,\"240\":1,\"530\":1}}],[\"defineclass\",{\"1\":{\"1139\":1}}],[\"definition\",{\"1\":{\"9\":1,\"572\":1,\"1047\":1,\"1049\":3}}],[\"defstatus\",{\"1\":{\"1050\":8,\"1051\":2}}],[\"defualt\",{\"1\":{\"671\":1}}],[\"def\",{\"1\":{\"476\":2,\"839\":2,\"1049\":12}}],[\"defensive\",{\"1\":{\"146\":1}}],[\"defg\",{\"1\":{\"79\":1}}],[\"defaultredisscript<>\",{\"1\":{\"1263\":1}}],[\"defaultfs项\",{\"1\":{\"1217\":1}}],[\"defaultfullhttpresponse\",{\"1\":{\"846\":2}}],[\"defaultthreadfactory\",{\"1\":{\"1106\":1,\"1108\":4,\"1369\":1}}],[\"defaulttransactionstatus\",{\"1\":{\"1044\":1,\"1050\":2,\"1051\":2}}],[\"defaulttransactiondefinition\",{\"1\":{\"1038\":2,\"1043\":1,\"1044\":1}}],[\"defaultuncaughtexceptionhandler\",{\"1\":{\"1087\":1,\"1096\":1}}],[\"defaultadvisorautoproxycreator\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"defaultlistablebeanfactory\",{\"1\":{\"1006\":1,\"1012\":1,\"1378\":1}}],[\"defaultpromise<>\",{\"1\":{\"822\":1}}],[\"defaultpromise<integer>\",{\"1\":{\"822\":1}}],[\"defaultpartitioner\",{\"0\":{\"452\":1}}],[\"defaultcharset\",{\"1\":{\"789\":1,\"797\":2}}],[\"defaultcookieserializer\",{\"1\":{\"24\":2}}],[\"defaults\",{\"1\":{\"569\":2}}],[\"defaultsqlsessionfactory\",{\"1\":{\"542\":1}}],[\"defaultsqlsession\",{\"1\":{\"542\":2,\"543\":1}}],[\"defaulteventloopgroup\",{\"1\":{\"818\":3}}],[\"defaulteventexecutorgroup\",{\"1\":{\"93\":2}}],[\"defaultexecutortype\",{\"1\":{\"542\":1}}],[\"defaultobjectfactory\",{\"1\":{\"522\":1}}],[\"default=\",{\"1\":{\"506\":1,\"524\":1}}],[\"default修饰\",{\"1\":{\"292\":1}}],[\"default\",{\"1\":{\"42\":1,\"43\":1,\"44\":1,\"47\":1,\"48\":1,\"51\":1,\"58\":1,\"110\":1,\"348\":1,\"522\":1,\"569\":1,\"574\":1,\"596\":5,\"598\":2,\"599\":1,\"671\":1,\"823\":2,\"826\":3,\"831\":1,\"833\":1,\"844\":1,\"850\":1,\"872\":1,\"1039\":1,\"1040\":1,\"1049\":2,\"1057\":3,\"1058\":1,\"1357\":11,\"1358\":10,\"1612\":1,\"1632\":1}}],[\"实在是太激动了\",{\"1\":{\"1844\":1}}],[\"实验室的小伙伴终于拿到了阿里offer来到北京\",{\"1\":{\"1776\":1}}],[\"实体类的属性上\",{\"1\":{\"1608\":1}}],[\"实体类\",{\"1\":{\"1604\":1,\"1608\":1}}],[\"实体对象\",{\"1\":{\"89\":1}}],[\"实行两阶段协议\",{\"1\":{\"1561\":1}}],[\"实习日记\",{\"1\":{\"1815\":1}}],[\"实习的几个月真的成长了很多\",{\"1\":{\"1786\":1}}],[\"实习\",{\"0\":{\"1355\":1},\"2\":{\"1788\":1}}],[\"实质上就是指向一个提交记录的可变指针\",{\"1\":{\"1332\":1}}],[\"实战\",{\"0\":{\"852\":1}}],[\"实时显示日志\",{\"1\":{\"1634\":1}}],[\"实时查询\",{\"1\":{\"1543\":1}}],[\"实时消息服务才会真正发送\",{\"1\":{\"1286\":1}}],[\"实时消息服务只\",{\"1\":{\"1286\":1}}],[\"实时接收并打印服务器当前处理的命令请求信息\",{\"1\":{\"979\":1}}],[\"实时同步\",{\"1\":{\"443\":1}}],[\"实时流计算有两个特点\",{\"1\":{\"442\":1}}],[\"实时流计算应运而生\",{\"1\":{\"442\":1}}],[\"实时计算\",{\"0\":{\"442\":1}}],[\"实时的消息订阅\",{\"1\":{\"431\":1}}],[\"实时监控\",{\"1\":{\"238\":1}}],[\"实施分层编译后\",{\"1\":{\"267\":1}}],[\"实际经过预处理和计算过程策略优化后\",{\"1\":{\"1752\":1}}],[\"实际到达\",{\"1\":{\"1731\":1}}],[\"实际是通过\",{\"1\":{\"1697\":1}}],[\"实际是对tcp\",{\"1\":{\"341\":1}}],[\"实际调用的是\",{\"1\":{\"1532\":1}}],[\"实际调用的是代理对象的方法\",{\"1\":{\"1060\":1}}],[\"实际就是执行\",{\"1\":{\"1351\":1}}],[\"实际就是运行\",{\"1\":{\"1115\":1}}],[\"实际问题\",{\"1\":{\"1269\":1}}],[\"实际业务上不太可能出现\",{\"1\":{\"1240\":1}}],[\"实际生产中需要并发性的场景主要有两个\",{\"1\":{\"1120\":1}}],[\"实际的程序在运行过程中\",{\"1\":{\"1075\":1}}],[\"实际的事务管理都在这个invoke方法里\",{\"1\":{\"1059\":1}}],[\"实际的数据库数据在不同存储引擎中存放的格式一般是不同的\",{\"1\":{\"683\":1}}],[\"实际\",{\"1\":{\"1057\":1}}],[\"实际对象\",{\"1\":{\"1010\":1}}],[\"实际类型取决于encoding\",{\"1\":{\"888\":1}}],[\"实际中线程池的参数是比较难以设置的\",{\"1\":{\"1120\":1}}],[\"实际中\",{\"1\":{\"859\":1,\"860\":1}}],[\"实际中应根据服务器的负载和性能进行调优\",{\"1\":{\"856\":1}}],[\"实际消息内容\",{\"1\":{\"849\":1}}],[\"实际消息体的长度\",{\"1\":{\"474\":1}}],[\"实际内容\",{\"1\":{\"844\":1}}],[\"实际执行了ctx\",{\"1\":{\"823\":2}}],[\"实际不是物理设备级别的读写\",{\"1\":{\"799\":1}}],[\"实际字节\",{\"1\":{\"767\":1}}],[\"实际值三部分\",{\"1\":{\"747\":1}}],[\"实际占用的存储空间就是该固定值\",{\"1\":{\"728\":1}}],[\"实际用到时才会创建\",{\"1\":{\"749\":1}}],[\"实际用到的索引\",{\"1\":{\"728\":1}}],[\"实际用的是哪个日志实现很重要\",{\"1\":{\"376\":1}}],[\"实际计算时\",{\"1\":{\"717\":1}}],[\"实际非叶子节点为了保证目录项唯一\",{\"1\":{\"699\":1}}],[\"实际新增数据时\",{\"1\":{\"698\":1}}],[\"实际存储的行记录内容\",{\"1\":{\"688\":1}}],[\"实际上需要更多的状态标识来优化运营\",{\"1\":{\"1736\":1}}],[\"实际上只是移动了\",{\"1\":{\"1344\":1}}],[\"实际上是访问了各自线程内部的\",{\"1\":{\"1514\":1}}],[\"实际上是访问了各个\",{\"1\":{\"154\":1}}],[\"实际上是移动了当前分支\",{\"1\":{\"1344\":1}}],[\"实际上是用一个新的提交替换旧的提交\",{\"1\":{\"1323\":1}}],[\"实际上是基于分桶列计算\",{\"1\":{\"1228\":1}}],[\"实际上不会创建新事务\",{\"1\":{\"1049\":1}}],[\"实际上\",{\"1\":{\"788\":1,\"1338\":1}}],[\"实际上记录并没有被物理删除\",{\"1\":{\"615\":1}}],[\"实际只是某个引用队列的队头\",{\"1\":{\"184\":1}}],[\"实际订单金额\",{\"1\":{\"124\":1}}],[\"实际远程调用时通过\",{\"1\":{\"99\":1}}],[\"实际也是使用它的实现类\",{\"1\":{\"77\":1}}],[\"实际也可以通过hlrc获得rllc\",{\"1\":{\"38\":1}}],[\"实际返回的是实现类\",{\"1\":{\"77\":1}}],[\"实例之间同步\",{\"1\":{\"1629\":1}}],[\"实例之间传递数据或共享缓存等场景非常有用\",{\"1\":{\"1136\":1}}],[\"实例可以看作一个\",{\"1\":{\"1628\":1}}],[\"实例负责一部分的槽\",{\"1\":{\"1590\":1}}],[\"实例的状态\",{\"1\":{\"1589\":1}}],[\"实例的工具\",{\"1\":{\"1589\":1}}],[\"实例作为从节点\",{\"1\":{\"1588\":1}}],[\"实例作为主节点\",{\"1\":{\"1588\":1}}],[\"实例作为最终的日志器\",{\"1\":{\"383\":1}}],[\"实例域语句\",{\"1\":{\"1521\":1}}],[\"实例是弱引用\",{\"1\":{\"1514\":1}}],[\"实例加入\",{\"1\":{\"1114\":1}}],[\"实例池\",{\"1\":{\"1104\":1}}],[\"实例对象时\",{\"1\":{\"1009\":1}}],[\"实例对象的映射\",{\"1\":{\"1006\":1}}],[\"实例对象\",{\"1\":{\"1006\":1}}],[\"实例对象本身的弱引用\",{\"1\":{\"154\":1,\"1514\":1}}],[\"实例化对象分三个步骤\",{\"1\":{\"1645\":1}}],[\"实例化的对象\",{\"1\":{\"1599\":1}}],[\"实例化\",{\"1\":{\"1379\":1,\"1597\":1}}],[\"实例化一般就是反射创建对象\",{\"1\":{\"1378\":1}}],[\"实例化一个新的\",{\"1\":{\"851\":1}}],[\"实例化目标对象\",{\"1\":{\"1015\":1}}],[\"实例化所有\",{\"1\":{\"1379\":2}}],[\"实例化所有单例\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"实例化所有已经注册的\",{\"1\":{\"1012\":1}}],[\"实例化策略\",{\"1\":{\"1009\":1}}],[\"实例化时从\",{\"1\":{\"99\":1}}],[\"实例就是一个\",{\"1\":{\"443\":1}}],[\"实例方法默认对this加锁\",{\"1\":{\"331\":1}}],[\"实例方法调用\",{\"1\":{\"241\":1}}],[\"实例数量\",{\"1\":{\"232\":1}}],[\"实例数据\",{\"1\":{\"215\":1,\"1074\":1,\"1521\":1}}],[\"实例\",{\"0\":{\"1198\":1},\"1\":{\"9\":1,\"195\":1,\"383\":1,\"541\":1,\"778\":1,\"826\":2,\"1135\":1,\"1269\":1,\"1613\":1,\"1626\":1,\"1629\":1}}],[\"实现无法直接连通的客户端的中继服务\",{\"1\":{\"1860\":1}}],[\"实现无状态\",{\"1\":{\"1162\":1}}],[\"实现无状态化\",{\"1\":{\"1162\":1}}],[\"实现共同的接口来实现\",{\"1\":{\"1648\":1}}],[\"实现开箱即用\",{\"1\":{\"1609\":1}}],[\"实现开销会比较大\",{\"1\":{\"1471\":1}}],[\"实现starter自动化配置和bean的实例化等工作\",{\"1\":{\"1607\":1}}],[\"实现水平扩展\",{\"1\":{\"1564\":1}}],[\"实现主从操作的一致性\",{\"1\":{\"1563\":1}}],[\"实现增强\",{\"1\":{\"1532\":1}}],[\"实现线程安全\",{\"1\":{\"1499\":1}}],[\"实现线程有三种方式\",{\"1\":{\"277\":1}}],[\"实现并发安全\",{\"1\":{\"1497\":2,\"1500\":1}}],[\"实现进程\",{\"1\":{\"1463\":1}}],[\"实现高效的数据共享\",{\"1\":{\"1459\":1}}],[\"实现高性能\",{\"1\":{\"396\":1}}],[\"实现方法\",{\"1\":{\"1435\":2}}],[\"实现方式比如最基本的\",{\"1\":{\"1623\":1}}],[\"实现方式有两种\",{\"1\":{\"1486\":1}}],[\"实现方式\",{\"1\":{\"334\":1}}],[\"实现方式主要以下两种\",{\"1\":{\"216\":1}}],[\"实现三次挥手\",{\"1\":{\"1410\":1}}],[\"实现消息检测\",{\"1\":{\"1374\":1}}],[\"实现图片的上传存储使用\",{\"1\":{\"1365\":1}}],[\"实现分库分表\",{\"1\":{\"1564\":1}}],[\"实现分支的逻辑\",{\"1\":{\"1331\":1}}],[\"实现分布式锁避免缓存击穿使用\",{\"1\":{\"1365\":1}}],[\"实现分布式锁\",{\"1\":{\"1162\":1}}],[\"实现四层流量负载均衡\",{\"1\":{\"1299\":1}}],[\"实现库存自动解锁\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"实现自定义域名和\",{\"1\":{\"1792\":1}}],[\"实现自定义权重\",{\"1\":{\"74\":1}}],[\"实现自动关单\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"实现最终一致性\",{\"0\":{\"1288\":1},\"1\":{\"1291\":1,\"1373\":1}}],[\"实现最好是手动来释放\",{\"1\":{\"829\":1}}],[\"实现本地挂载\",{\"1\":{\"1218\":1}}],[\"实现诸如数据发布\",{\"1\":{\"1162\":1}}],[\"实现mysql主从同步\",{\"0\":{\"1147\":1}}],[\"实现堆外内存的释放\",{\"1\":{\"1136\":1}}],[\"实现堆外内存操作的\",{\"1\":{\"1136\":1}}],[\"实现部分回滚的功能\",{\"1\":{\"1041\":1}}],[\"实现事务\",{\"0\":{\"1034\":1}}],[\"实现配置分离\",{\"1\":{\"1026\":1}}],[\"实现脚本复制功能\",{\"1\":{\"964\":1}}],[\"实现原理\",{\"0\":{\"1190\":1}}],[\"实现原理如下\",{\"1\":{\"946\":1}}],[\"实现原理上\",{\"1\":{\"461\":1}}],[\"实现如下\",{\"1\":{\"945\":1}}],[\"实现来讲\",{\"1\":{\"829\":1}}],[\"实现异步的网络\",{\"1\":{\"797\":1}}],[\"实现文件的异步\",{\"1\":{\"796\":1}}],[\"实现多路复用\",{\"1\":{\"760\":1}}],[\"实现技术\",{\"0\":{\"653\":1}}],[\"实现读写分离\",{\"1\":{\"647\":1,\"1588\":1}}],[\"实现链状复制\",{\"1\":{\"647\":1}}],[\"实现机制不同\",{\"1\":{\"619\":1}}],[\"实现负载均衡\",{\"1\":{\"472\":1,\"658\":1}}],[\"实现partitioner接口\",{\"1\":{\"453\":1}}],[\"实现有限阻塞\",{\"1\":{\"1091\":1}}],[\"实现有\",{\"1\":{\"403\":1,\"404\":1}}],[\"实现对功能的增强\",{\"1\":{\"349\":1}}],[\"实现callable接口\",{\"0\":{\"329\":1}}],[\"实现runnable接口\",{\"0\":{\"328\":1}}],[\"实现暴力反射\",{\"1\":{\"309\":1}}],[\"实现类和代理类\",{\"1\":{\"1532\":1}}],[\"实现类有\",{\"1\":{\"1499\":1}}],[\"实现类继承了\",{\"1\":{\"816\":1}}],[\"实现类与类之间的解耦操作\",{\"1\":{\"358\":1}}],[\"实现类\",{\"1\":{\"253\":1,\"331\":1,\"332\":1,\"1511\":2,\"1532\":1}}],[\"实现类包括arraylistmultimap\",{\"1\":{\"67\":1}}],[\"实现简单但会增加主库压力\",{\"1\":{\"1563\":1}}],[\"实现简单粒度粗\",{\"1\":{\"1560\":1}}],[\"实现简单\",{\"1\":{\"168\":1,\"551\":1,\"1488\":1,\"1622\":1}}],[\"实现了非锁定读\",{\"1\":{\"1557\":1}}],[\"实现了一行注解完成事务的自动化管理\",{\"1\":{\"1059\":1}}],[\"实现了上述的3个基础方法\",{\"1\":{\"1048\":1}}],[\"实现了线程安全\",{\"1\":{\"984\":1}}],[\"实现了真正的异步\",{\"1\":{\"795\":1}}],[\"实现了\",{\"1\":{\"163\":1,\"802\":1,\"817\":1,\"1015\":1,\"1026\":1,\"1059\":1,\"1115\":1,\"1598\":1}}],[\"实现了trylock快速尝试加锁方法\",{\"1\":{\"9\":1}}],[\"实现不安全操作\",{\"1\":{\"1135\":1}}],[\"实现不需要加锁的并发读\",{\"1\":{\"162\":1}}],[\"实现不可变\",{\"1\":{\"146\":1}}],[\"实现等待\",{\"1\":{\"161\":1}}],[\"实现上也就是往一个文件里写入\",{\"1\":{\"1332\":1}}],[\"实现上是将\",{\"1\":{\"1511\":1}}],[\"实现上是一个\",{\"1\":{\"1204\":1}}],[\"实现上是采样平均得到的估算值\",{\"1\":{\"928\":1}}],[\"实现上即修改clusternode\",{\"1\":{\"946\":1}}],[\"实现上即指针个数\",{\"1\":{\"698\":1}}],[\"实现上通过包装常见的i\",{\"1\":{\"919\":1}}],[\"实现上前三个最终都调用pexpireat实现\",{\"1\":{\"908\":1}}],[\"实现上就是返回readonlychildren的迭代器\",{\"1\":{\"817\":1}}],[\"实现上\",{\"1\":{\"159\":1,\"192\":1,\"194\":1,\"366\":1,\"920\":1,\"948\":1,\"1673\":1}}],[\"实现包括hashbasedtable\",{\"1\":{\"69\":1}}],[\"实现数据共享的方案\",{\"1\":{\"26\":1}}],[\"实现的同步器\",{\"1\":{\"160\":1}}],[\"实现的同步工具\",{\"1\":{\"159\":1}}],[\"实现的\",{\"1\":{\"9\":2,\"362\":1,\"410\":1,\"869\":2,\"1034\":1,\"1517\":1}}],[\"实现此方法需要查询当前状态并判断同步状是否符合预期\",{\"1\":{\"5\":1}}],[\"实现\",{\"0\":{\"886\":1,\"888\":1,\"891\":1,\"906\":1,\"916\":1,\"1017\":1,\"1525\":1},\"1\":{\"3\":1,\"154\":2,\"328\":1,\"329\":1,\"376\":1,\"383\":1,\"391\":1,\"432\":1,\"601\":3,\"768\":1,\"811\":1,\"949\":1,\"964\":1,\"1021\":1,\"1137\":1,\"1283\":1,\"1369\":2,\"1406\":1,\"1451\":1,\"1508\":2,\"1514\":2,\"1516\":1,\"1642\":1}}],[\"暴露的\",{\"1\":{\"9\":1}}],[\"mkv\",{\"1\":{\"1877\":1}}],[\"mkdir\",{\"0\":{\"1682\":1},\"1\":{\"1218\":1,\"1682\":1}}],[\"mkdirs创建多级目录\",{\"1\":{\"314\":1}}],[\"mkdir创建一级目录\",{\"1\":{\"314\":1}}],[\"mp3\",{\"1\":{\"1877\":1}}],[\"mpeg\",{\"1\":{\"1873\":1}}],[\"mpd\",{\"1\":{\"1870\":1}}],[\"mpd放到nginx的html文件夹里\",{\"1\":{\"1870\":1}}],[\"mp4dash\",{\"1\":{\"1869\":1}}],[\"mp4fragment\",{\"1\":{\"1869\":5}}],[\"mp4\",{\"1\":{\"1868\":5,\"1869\":15,\"1877\":2,\"1878\":9}}],[\"m=<media><port><transport><fmt\",{\"1\":{\"1862\":1}}],[\"m=audio\",{\"1\":{\"1862\":1}}],[\"m=媒体名称和传输地址\",{\"1\":{\"1862\":1}}],[\"mx\",{\"1\":{\"1792\":2}}],[\"m舱虽然票价便宜\",{\"1\":{\"1735\":1}}],[\"mfq\",{\"1\":{\"1470\":1}}],[\"mnt\",{\"1\":{\"1314\":1}}],[\"m端的http接口\",{\"1\":{\"1303\":1}}],[\"mgw\",{\"0\":{\"1301\":1},\"1\":{\"1301\":2,\"1304\":1}}],[\"mzxid\",{\"1\":{\"1174\":1}}],[\"m3\",{\"1\":{\"1015\":3}}],[\"m2\",{\"1\":{\"1015\":2}}],[\"m1\",{\"1\":{\"1015\":2}}],[\"m0\",{\"1\":{\"1015\":2}}],[\"mt\",{\"1\":{\"1781\":1,\"1783\":1}}],[\"mtime\",{\"1\":{\"1174\":1}}],[\"mtu\",{\"1\":{\"839\":6,\"1395\":1,\"1427\":1}}],[\"mtr执行过程中可能修改页面\",{\"1\":{\"740\":1}}],[\"mtr生成的redo日志以及一些控制信息放在512byte的页中\",{\"1\":{\"739\":1}}],[\"mtr\",{\"1\":{\"739\":1}}],[\"mtr类型\",{\"1\":{\"739\":1}}],[\"mvc\",{\"0\":{\"1603\":1,\"1604\":1},\"1\":{\"1604\":2}}],[\"mvcc的具体实现依赖于记录中的隐式字段\",{\"1\":{\"752\":1}}],[\"mvcc\",{\"1\":{\"558\":1,\"752\":1,\"1541\":1}}],[\"mv\",{\"0\":{\"1321\":1},\"1\":{\"1218\":1,\"1321\":3}}],[\"mvvc\",{\"0\":{\"752\":1,\"1557\":1},\"1\":{\"1552\":1,\"1554\":1,\"1557\":2}}],[\"mlog\",{\"1\":{\"739\":1}}],[\"m+1\",{\"1\":{\"664\":1}}],[\"m+7\",{\"1\":{\"664\":1}}],[\"m+2\",{\"1\":{\"662\":1}}],[\"m和\",{\"1\":{\"663\":1}}],[\"mstate结构的multicmd数组里\",{\"1\":{\"959\":1}}],[\"mstime\",{\"1\":{\"928\":1}}],[\"ms$的从服务器\",{\"1\":{\"943\":1}}],[\"mss\",{\"1\":{\"839\":10,\"1412\":2,\"1413\":1,\"1416\":2}}],[\"ms参数设定\",{\"1\":{\"460\":1}}],[\"ms默认0ms\",{\"1\":{\"450\":1}}],[\"ms后\",{\"1\":{\"450\":1}}],[\"ms\",{\"1\":{\"410\":1,\"459\":2,\"467\":3,\"477\":1,\"483\":2,\"485\":5,\"491\":1,\"544\":4,\"913\":2}}],[\"msg=\",{\"1\":{\"1859\":1}}],[\"msg提交信息编辑后运行\",{\"1\":{\"1345\":1}}],[\"msg启动提交信息编辑器之前\",{\"1\":{\"1345\":1}}],[\"msg\",{\"1\":{\"384\":1,\"388\":1,\"457\":2,\"489\":2,\"811\":2,\"814\":1,\"818\":8,\"823\":14,\"829\":2,\"846\":3,\"848\":1,\"849\":4,\"873\":2,\"1345\":1,\"1859\":4}}],[\"mqtt模型\",{\"1\":{\"407\":1}}],[\"mqtt\",{\"0\":{\"407\":1},\"1\":{\"412\":1}}],[\"mq宕机等问题\",{\"1\":{\"401\":1,\"1625\":1}}],[\"mq流量削峰\",{\"1\":{\"400\":1}}],[\"mq应用解耦3\",{\"1\":{\"399\":1}}],[\"mq应用解耦2\",{\"1\":{\"399\":1}}],[\"mq应用解耦1\",{\"1\":{\"399\":1}}],[\"mq异步处理\",{\"1\":{\"398\":1}}],[\"mq\",{\"0\":{\"402\":1,\"410\":1,\"435\":1,\"438\":1,\"1288\":1,\"1374\":1},\"1\":{\"396\":3,\"401\":1,\"408\":2,\"410\":2,\"419\":1,\"440\":1,\"1266\":1,\"1288\":1,\"1289\":1,\"1291\":2,\"1370\":1,\"1371\":1,\"1373\":2,\"1374\":1,\"1459\":1,\"1584\":1,\"1625\":1},\"2\":{\"437\":1,\"502\":1}}],[\"mb\",{\"1\":{\"388\":1,\"1444\":1,\"1658\":2,\"1683\":1}}],[\"mmap\",{\"1\":{\"1445\":2,\"1479\":2,\"1486\":2}}],[\"mm\",{\"1\":{\"388\":5,\"643\":2,\"665\":6,\"1316\":1}}],[\"mylibgit\",{\"1\":{\"1314\":1}}],[\"myhive2\",{\"1\":{\"1226\":1}}],[\"myhive\",{\"1\":{\"1226\":5,\"1227\":3}}],[\"my\",{\"1\":{\"1154\":1,\"1329\":1,\"1634\":4}}],[\"myd\",{\"1\":{\"679\":1}}],[\"myd数据文件\",{\"1\":{\"673\":1}}],[\"mycat的逻辑结构主要包括逻辑库\",{\"1\":{\"655\":1}}],[\"mycat概念图\",{\"1\":{\"655\":1}}],[\"mycat是开源的\",{\"1\":{\"654\":1}}],[\"mycat\",{\"0\":{\"653\":1},\"1\":{\"653\":1,\"657\":5,\"1563\":1}}],[\"myid\",{\"0\":{\"1197\":1},\"1\":{\"1197\":5}}],[\"myinvocationhandler\",{\"1\":{\"1015\":4}}],[\"myinterface<e>\",{\"1\":{\"306\":1}}],[\"myi\",{\"1\":{\"679\":1}}],[\"myi索引文件\",{\"1\":{\"673\":1}}],[\"myisam中索引和数据分离\",{\"1\":{\"698\":1}}],[\"myisam引擎中\",{\"1\":{\"673\":1}}],[\"myisam等存储引擎本质上把表数据存储在os的文件系统上\",{\"1\":{\"673\":1}}],[\"myisam\",{\"0\":{\"679\":1,\"1541\":1,\"1542\":1},\"1\":{\"549\":1,\"552\":1,\"619\":1,\"679\":1,\"681\":1,\"682\":1,\"697\":2,\"1540\":1,\"1541\":5,\"1542\":4}}],[\"mybatisplus\",{\"1\":{\"1365\":1}}],[\"mybatis层级结构\",{\"1\":{\"540\":1}}],[\"mybatisspringapplication\",{\"1\":{\"507\":2}}],[\"mybatis<\",{\"1\":{\"505\":1}}],[\"mybatis\",{\"0\":{\"503\":1},\"1\":{\"503\":3,\"505\":1,\"506\":11,\"507\":2,\"508\":2,\"510\":1,\"512\":1,\"515\":1,\"518\":2,\"519\":1,\"521\":1,\"522\":2,\"523\":2,\"524\":1,\"525\":1,\"526\":1,\"527\":1,\"528\":3,\"529\":2,\"530\":1,\"533\":1,\"534\":1,\"540\":3,\"541\":2,\"546\":2,\"1010\":2,\"1036\":1,\"1531\":1,\"1609\":1},\"2\":{\"548\":1}}],[\"mypartitioner\",{\"1\":{\"453\":2}}],[\"myrabbitconfig\",{\"1\":{\"417\":1}}],[\"myfun\",{\"1\":{\"306\":1}}],[\"mygeneric<t>\",{\"1\":{\"306\":1}}],[\"myspring\",{\"0\":{\"1023\":1},\"1\":{\"1004\":1,\"1016\":2}}],[\"myself\",{\"1\":{\"948\":1}}],[\"myservice\",{\"1\":{\"78\":4}}],[\"mysql默认是\",{\"1\":{\"1552\":1}}],[\"mysql默认的强密码策略比较麻烦\",{\"1\":{\"1148\":1}}],[\"mysqlx\",{\"1\":{\"1150\":1}}],[\"mysql服务的主从同步配置\",{\"1\":{\"1155\":1}}],[\"mysql服务重启后\",{\"1\":{\"1148\":1}}],[\"mysql服务器处理客户端请求\",{\"1\":{\"672\":1}}],[\"mysql服务器处理客户端请求的流程\",{\"1\":{\"672\":1}}],[\"mysql使用锁机制避免不可重复读问题\",{\"1\":{\"754\":1}}],[\"mysql定义了128个回滚段\",{\"1\":{\"751\":1}}],[\"mysql设计了rollback\",{\"1\":{\"751\":1}}],[\"mysql数据目录下的ib\",{\"1\":{\"739\":1}}],[\"mysql在事务提交后可以判断是否重用该事务的undo页面链表\",{\"1\":{\"750\":1}}],[\"mysql在事务执行过程中利用redo\",{\"1\":{\"738\":1}}],[\"mysql在执行单表查询前\",{\"1\":{\"717\":1}}],[\"mysql以chunk为单位申请内存\",{\"1\":{\"731\":1}}],[\"mysql以表空间号+页号作为key\",{\"1\":{\"731\":1}}],[\"mysql连接查询采用嵌套循环连接算法\",{\"1\":{\"718\":1}}],[\"mysql会分别独立执行外层查询和子查询\",{\"1\":{\"726\":1}}],[\"mysql会把index\",{\"1\":{\"717\":1}}],[\"mysql会通过视图检查正在更改的每个行\",{\"1\":{\"623\":1}}],[\"mysql优先计算唯一二级索引\",{\"1\":{\"717\":1}}],[\"mysql优化器会评估哪个字段的索引效率更高\",{\"1\":{\"699\":1}}],[\"mysql执行查询语句的方式称为访问方法\",{\"1\":{\"710\":1}}],[\"mysql中仅innodb和ndb存储引擎支持事务\",{\"1\":{\"733\":1}}],[\"mysql中每条记录成本为0\",{\"1\":{\"716\":1}}],[\"mysql中记读取一个页面的成本为1\",{\"1\":{\"716\":1}}],[\"mysql中定义了一些成本估算使用的常量\",{\"1\":{\"716\":1}}],[\"mysql中\",{\"1\":{\"699\":1}}],[\"mysql中有四个等级的字符集和比较规则\",{\"1\":{\"674\":1}}],[\"mysql索引数据结构对经典的b+tree进行了优化\",{\"1\":{\"698\":1}}],[\"mysql规定一个页中至少存放两行记录\",{\"1\":{\"686\":1}}],[\"mysql引擎列表\",{\"1\":{\"677\":1}}],[\"mysql三大存储引擎\",{\"0\":{\"677\":1}}],[\"mysqlimport\",{\"1\":{\"675\":3}}],[\"mysqlshow\",{\"1\":{\"675\":3}}],[\"mysqladmin\",{\"1\":{\"675\":3}}],[\"mysql客户端工具\",{\"1\":{\"675\":1}}],[\"mysql客户端向服务器进程发送请求并得到回复的过程本质上是一个进程间通信的过程\",{\"1\":{\"672\":1}}],[\"mysql共支持40多种字符集\",{\"1\":{\"674\":1}}],[\"mysql支持三种客户端进程和服务器进程的通信方式\",{\"1\":{\"672\":1}}],[\"mysql支持一台主库同时向多台从库进行复制\",{\"1\":{\"647\":1}}],[\"mysql是怎样运行的\",{\"1\":{\"667\":1}}],[\"mysql是limit\",{\"1\":{\"587\":1}}],[\"mysql主从复制的核心是二进制日志\",{\"1\":{\"648\":1}}],[\"mysqlbinlog\",{\"1\":{\"643\":1,\"675\":3}}],[\"mysql的索引是在存储引擎层实现的\",{\"1\":{\"697\":1}}],[\"mysql的数据目录通过变量datadir定义\",{\"1\":{\"673\":1}}],[\"mysql的主从复制\",{\"1\":{\"643\":1}}],[\"mysql的innodb引擎中虽然没有直接支持hash索引\",{\"1\":{\"638\":1}}],[\"mysql实例在初始化时会自动创建两个默认的undo表空间\",{\"1\":{\"639\":1}}],[\"mysql允许一个视图依赖另一个视图\",{\"1\":{\"623\":1}}],[\"mysql简化架构\",{\"1\":{\"570\":1}}],[\"mysql插件式的存储引擎架构\",{\"1\":{\"570\":1}}],[\"mysql架构图\",{\"1\":{\"570\":1}}],[\"mysqld\",{\"1\":{\"569\":3,\"642\":1,\"671\":1,\"1150\":1,\"1154\":1,\"1155\":2}}],[\"mysqldump\",{\"1\":{\"550\":2,\"675\":5,\"1559\":1}}],[\"mysql十三\",{\"1\":{\"565\":1}}],[\"mysql>alter\",{\"1\":{\"130\":1}}],[\"mysql那样的索引是普通的正向索引\",{\"1\":{\"35\":1}}],[\"mysql不设置索引还是可以进行查询\",{\"1\":{\"34\":1}}],[\"mysql\",{\"0\":{\"549\":1,\"568\":1,\"670\":1,\"1034\":1,\"1537\":1},\"1\":{\"34\":1,\"340\":1,\"499\":1,\"506\":4,\"553\":1,\"554\":2,\"563\":1,\"569\":5,\"570\":2,\"590\":2,\"614\":1,\"618\":2,\"642\":1,\"643\":2,\"666\":2,\"667\":1,\"672\":1,\"673\":1,\"675\":3,\"679\":1,\"685\":1,\"687\":1,\"698\":1,\"703\":1,\"755\":1,\"1033\":1,\"1034\":1,\"1035\":1,\"1147\":1,\"1150\":2,\"1151\":1,\"1152\":1,\"1153\":2,\"1154\":2,\"1155\":4,\"1156\":1,\"1224\":1,\"1259\":1,\"1283\":2,\"1299\":1,\"1365\":1,\"1374\":1,\"1448\":3,\"1540\":6,\"1543\":3,\"1555\":1,\"1556\":1,\"1563\":1,\"1567\":1,\"1612\":1,\"1634\":2},\"2\":{\"567\":1,\"669\":1,\"757\":1,\"1158\":1}}],[\"mdn\",{\"1\":{\"1871\":1}}],[\"mdl锁主要作用是维护表元数据的一致性\",{\"1\":{\"553\":1}}],[\"mdl\",{\"1\":{\"553\":4}}],[\"md\",{\"1\":{\"283\":1,\"362\":1,\"367\":1,\"667\":1}}],[\"md5\",{\"1\":{\"14\":5,\"1401\":1}}],[\"m\",{\"1\":{\"229\":1,\"388\":3,\"662\":1,\"663\":3,\"664\":8,\"754\":2,\"818\":3,\"940\":1,\"996\":5,\"1316\":1,\"1329\":1,\"1333\":1,\"1343\":1,\"1557\":2,\"1567\":1,\"1634\":1,\"1685\":1,\"1697\":1,\"1735\":1,\"1862\":1}}],[\"mimetype\",{\"1\":{\"1858\":3}}],[\"mirco\",{\"1\":{\"1799\":1}}],[\"mid\",{\"1\":{\"995\":4,\"998\":23,\"1654\":6,\"1657\":6}}],[\"middleware\",{\"1\":{\"408\":1}}],[\"migrating\",{\"1\":{\"946\":2}}],[\"mightcontain\",{\"1\":{\"83\":1}}],[\"millseconds\",{\"1\":{\"943\":1}}],[\"millisec\",{\"1\":{\"1858\":1}}],[\"milliseconds\",{\"1\":{\"941\":1,\"1106\":1,\"1363\":1}}],[\"milliseconds执行时长\",{\"1\":{\"927\":1}}],[\"millis\",{\"0\":{\"855\":1},\"1\":{\"855\":1,\"1091\":5,\"1095\":1}}],[\"mi\",{\"1\":{\"643\":2}}],[\"misc\",{\"1\":{\"254\":2,\"1015\":1,\"1135\":6}}],[\"mission\",{\"0\":{\"238\":1},\"1\":{\"238\":8}}],[\"mixed\",{\"1\":{\"171\":1,\"643\":1,\"1148\":1,\"1344\":2,\"1525\":1,\"1556\":1}}],[\"minby\",{\"1\":{\"1068\":1}}],[\"mina\",{\"1\":{\"807\":1,\"809\":1}}],[\"mini\",{\"1\":{\"739\":1}}],[\"minor\",{\"1\":{\"240\":1,\"1524\":2,\"1525\":1}}],[\"minute\",{\"1\":{\"129\":1,\"1567\":2}}],[\"minutes\",{\"1\":{\"14\":1,\"73\":1,\"467\":1,\"477\":1}}],[\"min\",{\"1\":{\"61\":1,\"485\":1,\"584\":1,\"624\":1,\"689\":1,\"754\":3,\"1068\":1,\"1087\":1,\"1120\":1,\"1412\":2,\"1446\":4,\"1557\":3,\"1868\":6,\"1870\":2}}],[\"muhammad\",{\"1\":{\"1767\":1}}],[\"mutex\",{\"1\":{\"366\":1,\"1074\":1,\"1463\":1,\"1515\":1}}],[\"murmur3\",{\"1\":{\"83\":1}}],[\"multicmd是基于数组实现的fifo队列\",{\"1\":{\"959\":1}}],[\"multicastevent\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"multicaster\",{\"1\":{\"1012\":1}}],[\"multicast\",{\"1\":{\"342\":1}}],[\"multi四个命令外\",{\"1\":{\"959\":1}}],[\"multi标识\",{\"1\":{\"959\":1}}],[\"multithreadeventexecutorgroup\",{\"1\":{\"817\":1}}],[\"multithreadserver\",{\"1\":{\"791\":1}}],[\"multi\",{\"1\":{\"739\":1,\"752\":1,\"1280\":1,\"1571\":1,\"1619\":1}}],[\"multimaps\",{\"1\":{\"71\":2}}],[\"multimapbuilder\",{\"1\":{\"67\":2}}],[\"multimap\",{\"0\":{\"67\":1},\"1\":{\"71\":2,\"1355\":1}}],[\"multimatchquery\",{\"1\":{\"51\":1}}],[\"multisets\",{\"1\":{\"71\":1}}],[\"multiset<string>\",{\"1\":{\"66\":1}}],[\"multiset\",{\"0\":{\"66\":1},\"1\":{\"66\":10,\"71\":1}}],[\"must\",{\"1\":{\"3\":2,\"51\":1}}],[\"movies\",{\"1\":{\"1867\":1}}],[\"moved\",{\"1\":{\"1497\":1}}],[\"moved错误代表槽的负责权已经从一个节点转移到了另一个节点\",{\"1\":{\"947\":1}}],[\"movetohead\",{\"1\":{\"1002\":3,\"1651\":3}}],[\"move\",{\"1\":{\"779\":2}}],[\"mockbean注解可以使得这个注解的\",{\"1\":{\"1716\":1}}],[\"mock能力\",{\"1\":{\"1716\":1}}],[\"mockrandom\",{\"1\":{\"1713\":4}}],[\"mockito\",{\"1\":{\"1717\":1}}],[\"mockito提供了强大mock功能\",{\"1\":{\"1716\":1}}],[\"mockitoannotations\",{\"1\":{\"1709\":2}}],[\"mockitojunitrunner\",{\"1\":{\"1709\":2}}],[\"mockito<\",{\"1\":{\"1707\":1}}],[\"mock对象所有行为都不会执行实际代码\",{\"1\":{\"1708\":1}}],[\"mock通常针对设定好的调用方法与需要响应的参数封装模拟出合适的对象实例\",{\"1\":{\"1706\":1}}],[\"mock测试\",{\"0\":{\"1706\":1}}],[\"mock\",{\"0\":{\"1704\":1},\"1\":{\"1708\":3,\"1709\":2,\"1711\":2,\"1713\":1,\"1714\":28,\"1715\":28},\"2\":{\"1720\":1}}],[\"most\",{\"1\":{\"461\":1}}],[\"mom\",{\"1\":{\"408\":1}}],[\"modified\",{\"1\":{\"1250\":2,\"1310\":1,\"1399\":2,\"1400\":1,\"1435\":1,\"1633\":1}}],[\"modification\",{\"1\":{\"742\":1}}],[\"modification属性值\",{\"1\":{\"740\":1}}],[\"modification代表的lsn值\",{\"1\":{\"740\":1}}],[\"modify\",{\"1\":{\"130\":5,\"576\":1}}],[\"mod\",{\"1\":{\"594\":2}}],[\"module\",{\"1\":{\"445\":1}}],[\"mode控制赋值方案是使用auto\",{\"1\":{\"562\":1}}],[\"mode=out\",{\"1\":{\"530\":1}}],[\"mode=manual\",{\"1\":{\"422\":1}}],[\"mode\",{\"1\":{\"176\":1,\"413\":1,\"417\":1,\"558\":1,\"564\":2,\"1057\":1,\"1446\":1,\"1557\":1,\"1562\":1,\"1628\":1}}],[\"model\",{\"1\":{\"142\":1,\"254\":1,\"405\":1,\"532\":1,\"1604\":1}}],[\"models\",{\"1\":{\"14\":4}}],[\"monitorexit\",{\"1\":{\"1074\":1}}],[\"monitorenter\",{\"1\":{\"1074\":1}}],[\"monitors命令打开客户端的\",{\"1\":{\"979\":1}}],[\"monitors\",{\"1\":{\"979\":3}}],[\"monitorinterval\",{\"1\":{\"387\":1}}],[\"monitorinterval=\",{\"1\":{\"387\":1}}],[\"monitoring\",{\"1\":{\"230\":1}}],[\"monitor\",{\"0\":{\"1074\":1},\"1\":{\"139\":5,\"365\":1,\"979\":1,\"1074\":5,\"1075\":2,\"1076\":4,\"1077\":1,\"1089\":1,\"1095\":2,\"1515\":2}}],[\"money\",{\"1\":{\"124\":2,\"734\":4,\"1803\":1}}],[\"months\",{\"1\":{\"1341\":1}}],[\"month=201911\",{\"1\":{\"118\":2}}],[\"month=201910\",{\"1\":{\"118\":4}}],[\"month=\",{\"1\":{\"118\":1}}],[\"month\",{\"1\":{\"113\":1,\"118\":1,\"129\":1,\"595\":1,\"1567\":1}}],[\"mongodb\",{\"1\":{\"24\":1}}],[\"more\",{\"0\":{\"1681\":1},\"1\":{\"1050\":1,\"1051\":1,\"1218\":2,\"1681\":1}}],[\"moreexecutors\",{\"1\":{\"77\":1}}],[\"moreobjects\",{\"1\":{\"60\":1}}],[\"mediaplayer\",{\"1\":{\"1870\":1}}],[\"media\",{\"1\":{\"1862\":1}}],[\"mediarecorder\",{\"0\":{\"1858\":1},\"1\":{\"1858\":9}}],[\"mediastream\",{\"0\":{\"1857\":1},\"1\":{\"1857\":7}}],[\"mediadevices\",{\"1\":{\"1853\":1,\"1854\":1,\"1858\":2}}],[\"medium\",{\"1\":{\"1148\":1}}],[\"mediumblob\",{\"1\":{\"664\":1}}],[\"mediumtext\",{\"1\":{\"663\":1}}],[\"mediumint\",{\"1\":{\"661\":1}}],[\"meituan\",{\"1\":{\"1144\":1,\"1301\":1,\"1304\":3}}],[\"meet\",{\"1\":{\"945\":2,\"949\":2}}],[\"merge所需的不必要的合并提交\",{\"1\":{\"1633\":1}}],[\"merged\",{\"1\":{\"1333\":2}}],[\"mergesort\",{\"1\":{\"1654\":4}}],[\"merges\",{\"1\":{\"1322\":1}}],[\"merge\",{\"1\":{\"615\":1,\"711\":1,\"728\":1,\"1335\":2,\"1336\":1,\"1337\":1,\"1338\":1,\"1345\":2,\"1633\":2}}],[\"method方法\",{\"1\":{\"1597\":2}}],[\"methodidentification\",{\"1\":{\"1059\":1}}],[\"methodinvocation\",{\"1\":{\"1019\":1,\"1021\":1,\"1022\":1,\"1059\":1}}],[\"methodinterceptor\",{\"1\":{\"1016\":5,\"1019\":1,\"1021\":1,\"1022\":1,\"1059\":1,\"1532\":2}}],[\"methodmatcher\",{\"1\":{\"1018\":1,\"1019\":1}}],[\"methodproxy\",{\"1\":{\"1016\":7,\"1022\":1}}],[\"methodhandles\",{\"1\":{\"1015\":3}}],[\"method控制\",{\"1\":{\"722\":1}}],[\"methods\",{\"1\":{\"240\":3,\"1871\":1}}],[\"method\",{\"1\":{\"211\":1,\"240\":2,\"263\":1,\"311\":2,\"348\":3,\"349\":2,\"523\":1,\"1015\":8,\"1016\":6,\"1021\":1,\"1022\":1,\"1059\":4,\"1532\":2,\"1871\":3}}],[\"metastore\",{\"1\":{\"1224\":1,\"1225\":3,\"1228\":1}}],[\"metaspacesize和\",{\"1\":{\"211\":1}}],[\"meta\",{\"1\":{\"91\":1,\"383\":1,\"553\":1,\"1598\":1}}],[\"metadata\",{\"1\":{\"42\":1,\"450\":1,\"453\":1,\"552\":1}}],[\"messaging\",{\"1\":{\"409\":1}}],[\"message>\",{\"1\":{\"851\":1}}],[\"messagetomessagecodec<bytebuf\",{\"1\":{\"851\":1}}],[\"messagetomessagecodec\",{\"1\":{\"851\":1}}],[\"messagetype\",{\"1\":{\"95\":1,\"849\":2}}],[\"messagetype|\",{\"1\":{\"95\":1}}],[\"message格式\",{\"1\":{\"850\":1}}],[\"messagecodecsharable\",{\"1\":{\"851\":1}}],[\"messagecodec\",{\"1\":{\"849\":1,\"850\":3,\"851\":1}}],[\"messageconverter\",{\"1\":{\"417\":3}}],[\"messageoffset\",{\"1\":{\"476\":4}}],[\"messages\",{\"1\":{\"476\":3}}],[\"messagesubscriber\",{\"1\":{\"84\":3}}],[\"messageproperties\",{\"1\":{\"418\":1}}],[\"message2\",{\"1\":{\"84\":1}}],[\"messageevent2\",{\"1\":{\"84\":1}}],[\"messageevent\",{\"1\":{\"84\":4}}],[\"message\",{\"0\":{\"1458\":1},\"1\":{\"14\":2,\"84\":4,\"403\":1,\"404\":1,\"406\":1,\"407\":1,\"408\":2,\"417\":3,\"418\":5,\"420\":1,\"421\":5,\"424\":2,\"433\":1,\"461\":1,\"474\":1,\"489\":1,\"729\":1,\"848\":1,\"849\":6,\"850\":3,\"1402\":2,\"1625\":2,\"1629\":2,\"1859\":1}}],[\"mesi协议\",{\"1\":{\"1435\":1}}],[\"mesi\",{\"1\":{\"145\":1}}],[\"memcache\",{\"1\":{\"1488\":1}}],[\"memcached\",{\"1\":{\"1254\":1}}],[\"memory存储引擎支持hash索引\",{\"1\":{\"698\":1}}],[\"memory等引擎仅支持表级锁\",{\"1\":{\"549\":1}}],[\"memory\",{\"0\":{\"680\":1,\"1459\":1},\"1\":{\"142\":1,\"145\":1,\"172\":1,\"212\":1,\"232\":1,\"459\":2,\"672\":1,\"680\":1,\"681\":1,\"682\":2,\"697\":1,\"728\":1,\"799\":1,\"928\":1,\"1136\":1,\"1446\":1,\"1486\":1,\"1540\":1,\"1571\":1}}],[\"members\",{\"1\":{\"129\":3,\"1227\":1}}],[\"member\",{\"1\":{\"15\":5}}],[\"memberrespvo\",{\"1\":{\"15\":1}}],[\"memberfeignservice\",{\"1\":{\"15\":1}}],[\"memberentity\",{\"1\":{\"14\":2,\"15\":6}}],[\"mcs锁\",{\"1\":{\"10\":1}}],[\"making\",{\"1\":{\"1873\":1}}],[\"makestring\",{\"1\":{\"843\":2}}],[\"mailserver\",{\"1\":{\"1792\":2}}],[\"mail\",{\"1\":{\"1792\":1}}],[\"main方法等等\",{\"1\":{\"1527\":1}}],[\"mainreactor\",{\"1\":{\"1488\":1}}],[\"mainlock\",{\"1\":{\"1114\":4,\"1116\":13}}],[\"maintainable\",{\"1\":{\"807\":1}}],[\"main\",{\"1\":{\"24\":1,\"90\":1,\"98\":1,\"183\":1,\"247\":2,\"383\":1,\"450\":2,\"507\":3,\"667\":1,\"791\":1,\"792\":2,\"797\":1,\"811\":1,\"812\":1,\"823\":1,\"844\":1,\"863\":1,\"1015\":2,\"1016\":1,\"1067\":1,\"1099\":2,\"1791\":3}}],[\"malloc\",{\"1\":{\"1445\":5,\"1446\":1}}],[\"macbook\",{\"1\":{\"1828\":1}}],[\"mac\",{\"0\":{\"1423\":1},\"1\":{\"1347\":1,\"1393\":1,\"1394\":1,\"1396\":2,\"1423\":5,\"1425\":2,\"1622\":1,\"1828\":1}}],[\"machine\",{\"1\":{\"203\":1}}],[\"mask对应trx\",{\"1\":{\"747\":1}}],[\"mask置1\",{\"1\":{\"747\":1}}],[\"mask标志位分正常记录链表和垃圾链表\",{\"1\":{\"747\":1}}],[\"mask\",{\"1\":{\"689\":2,\"747\":1,\"1112\":3,\"1114\":1}}],[\"master上\",{\"1\":{\"1337\":1}}],[\"masterdown\",{\"1\":{\"941\":1}}],[\"masters字典属性记录了所有被sentinel监视的主服务器\",{\"1\":{\"939\":1}}],[\"masterport属性\",{\"1\":{\"936\":1}}],[\"masterhost\",{\"1\":{\"936\":1}}],[\"master2\",{\"1\":{\"658\":3}}],[\"master1\",{\"1\":{\"658\":3}}],[\"master\",{\"0\":{\"1154\":1},\"1\":{\"427\":1,\"640\":4,\"643\":3,\"647\":1,\"648\":1,\"649\":12,\"658\":2,\"940\":4,\"941\":1,\"942\":2,\"1153\":1,\"1154\":3,\"1155\":10,\"1156\":1,\"1162\":2,\"1187\":1,\"1326\":10,\"1328\":2,\"1332\":1,\"1333\":3,\"1335\":2,\"1337\":7,\"1342\":1,\"1347\":3,\"1351\":8,\"1402\":1,\"1563\":4}}],[\"mayberoll\",{\"1\":{\"476\":1}}],[\"maven\",{\"0\":{\"1632\":1},\"1\":{\"382\":2,\"1632\":2}}],[\"major\",{\"1\":{\"240\":1,\"1525\":1}}],[\"materialized\",{\"1\":{\"728\":1}}],[\"materialization\",{\"1\":{\"726\":1}}],[\"math\",{\"1\":{\"263\":2,\"994\":2,\"996\":1,\"1067\":1,\"1120\":1,\"1655\":1}}],[\"matrix全局数据结构来记录跨region的引用关系\",{\"1\":{\"178\":1}}],[\"match\",{\"1\":{\"1018\":2,\"1250\":1,\"1399\":1}}],[\"match三个void\",{\"1\":{\"880\":1}}],[\"matches\",{\"1\":{\"1019\":1}}],[\"matchesallof\",{\"1\":{\"79\":1}}],[\"matcher\",{\"1\":{\"79\":6,\"354\":3}}],[\"matchquery\",{\"1\":{\"51\":1}}],[\"matchallquery\",{\"1\":{\"51\":1}}],[\"marked\",{\"1\":{\"1049\":1,\"1050\":1}}],[\"mark产生的日志\",{\"1\":{\"749\":1}}],[\"marks\",{\"1\":{\"749\":1}}],[\"markup\",{\"1\":{\"357\":1}}],[\"mark\",{\"1\":{\"168\":1,\"169\":1,\"170\":1,\"176\":1,\"215\":1,\"747\":1,\"748\":2,\"754\":1,\"773\":4,\"828\":1,\"1074\":3,\"1075\":1,\"1076\":3,\"1077\":5,\"1521\":2,\"1523\":3,\"1525\":1,\"1554\":1}}],[\"magicnum\",{\"1\":{\"849\":2}}],[\"magic\",{\"1\":{\"95\":2,\"240\":2,\"474\":1,\"848\":1,\"1144\":1}}],[\"manipulation\",{\"1\":{\"572\":1}}],[\"many\",{\"1\":{\"510\":1}}],[\"mandatory=true\",{\"1\":{\"421\":1}}],[\"mandatory\",{\"1\":{\"417\":1,\"1041\":1,\"1049\":5,\"1276\":1,\"1611\":1}}],[\"manual\",{\"1\":{\"392\":1,\"417\":1,\"422\":1}}],[\"manually\",{\"1\":{\"90\":1}}],[\"manager\",{\"1\":{\"605\":2,\"610\":3,\"1287\":2,\"1347\":1}}],[\"managed\",{\"1\":{\"525\":1}}],[\"managedblock\",{\"1\":{\"8\":1}}],[\"management\",{\"1\":{\"236\":1}}],[\"mapred\",{\"1\":{\"1222\":1}}],[\"mapreduce\",{\"0\":{\"1221\":1},\"1\":{\"1213\":2,\"1214\":2,\"1221\":3,\"1222\":1,\"1223\":3,\"1224\":1,\"1225\":1,\"1226\":1,\"1228\":1}}],[\"maptask\",{\"1\":{\"1221\":1}}],[\"mapunderscoretocamelcase\",{\"1\":{\"519\":1}}],[\"mapkey\",{\"1\":{\"509\":1}}],[\"mappedbytebuffer\",{\"1\":{\"761\":1}}],[\"mappedstatements\",{\"1\":{\"541\":1}}],[\"mappedstatement\",{\"1\":{\"523\":1,\"540\":1,\"541\":3,\"544\":2}}],[\"mappermethod\",{\"1\":{\"544\":1}}],[\"mapperinterface\",{\"1\":{\"541\":2}}],[\"mapperclass\",{\"1\":{\"541\":5}}],[\"mapperproxy\",{\"1\":{\"543\":2,\"544\":2}}],[\"mapperproxyfactory<t>\",{\"1\":{\"543\":2}}],[\"mapperproxyfactory\",{\"1\":{\"541\":1,\"543\":2}}],[\"mapperparser\",{\"1\":{\"541\":4}}],[\"mapperpackage\",{\"1\":{\"541\":2}}],[\"mapperregistry\",{\"1\":{\"541\":1,\"543\":3}}],[\"mapperelement\",{\"1\":{\"541\":3}}],[\"mappers\",{\"0\":{\"528\":1},\"1\":{\"528\":1,\"541\":1}}],[\"mappers>\",{\"1\":{\"506\":1,\"528\":1}}],[\"mapper>\",{\"1\":{\"506\":1}}],[\"mapper\",{\"0\":{\"529\":1,\"543\":1},\"1\":{\"506\":9,\"507\":4,\"510\":2,\"512\":1,\"528\":2,\"529\":1,\"532\":1,\"541\":12,\"543\":4,\"544\":2,\"545\":1}}],[\"mappings\",{\"1\":{\"42\":2}}],[\"mapping\",{\"0\":{\"36\":1},\"1\":{\"34\":1,\"42\":2,\"45\":1}}],[\"mapmessage\",{\"1\":{\"403\":1,\"1625\":1}}],[\"map体系\",{\"1\":{\"305\":1}}],[\"maps\",{\"1\":{\"71\":3}}],[\"map<thread\",{\"1\":{\"1095\":1}}],[\"map<integer\",{\"1\":{\"450\":1,\"1002\":1,\"1068\":1,\"1651\":1,\"1663\":1}}],[\"map<character\",{\"1\":{\"990\":1}}],[\"map<c\",{\"1\":{\"69\":2}}],[\"map<r\",{\"1\":{\"69\":2}}],[\"map<key类型\",{\"1\":{\"122\":1}}],[\"map<key2\",{\"1\":{\"69\":1}}],[\"map<k\",{\"1\":{\"67\":1,\"509\":1}}],[\"map<string\",{\"1\":{\"15\":2,\"67\":1,\"69\":4,\"79\":1,\"122\":1,\"418\":1,\"1028\":3,\"1227\":1,\"1368\":2,\"1382\":3,\"1599\":3}}],[\"map\",{\"0\":{\"305\":1},\"1\":{\"58\":1,\"67\":2,\"68\":2,\"69\":1,\"71\":2,\"73\":3,\"79\":1,\"112\":2,\"122\":4,\"129\":5,\"154\":3,\"232\":1,\"304\":1,\"305\":4,\"312\":1,\"531\":1,\"538\":1,\"541\":2,\"1006\":2,\"1010\":2,\"1012\":1,\"1045\":1,\"1059\":2,\"1068\":5,\"1095\":1,\"1097\":1,\"1128\":1,\"1221\":2,\"1227\":3,\"1355\":1,\"1363\":2,\"1378\":3,\"1383\":1,\"1464\":1,\"1495\":1,\"1500\":1,\"1663\":4,\"1712\":1}}],[\"maxidx\",{\"1\":{\"1652\":8}}],[\"maximumpoolsize\",{\"1\":{\"332\":1,\"1106\":2,\"1114\":1,\"1115\":1,\"1120\":4,\"1511\":1}}],[\"maximumsize\",{\"1\":{\"73\":1,\"74\":1}}],[\"maximum\",{\"1\":{\"9\":3,\"839\":2}}],[\"maxclientcnxns=60\",{\"1\":{\"1164\":1}}],[\"maxcapacity\",{\"1\":{\"827\":2}}],[\"maxpriority\",{\"1\":{\"1099\":1}}],[\"maxby\",{\"1\":{\"1068\":1}}],[\"maxdepth\",{\"1\":{\"779\":1}}],[\"maxrequestsize\",{\"1\":{\"450\":1}}],[\"maxmetaspacesize=sz设置元空间大小\",{\"1\":{\"211\":1}}],[\"max\",{\"1\":{\"9\":1,\"34\":1,\"124\":1,\"188\":1,\"196\":1,\"332\":1,\"445\":1,\"450\":1,\"460\":1,\"462\":4,\"467\":1,\"483\":1,\"485\":4,\"584\":1,\"624\":1,\"726\":1,\"751\":1,\"754\":3,\"827\":2,\"828\":1,\"856\":1,\"937\":1,\"978\":2,\"994\":2,\"996\":2,\"1068\":1,\"1087\":1,\"1107\":1,\"1110\":4,\"1464\":3,\"1466\":1,\"1557\":3,\"1608\":1,\"1629\":1,\"1655\":1,\"1791\":1,\"1854\":1,\"1871\":1}}],[\"应付老板突如其来的任务\",{\"1\":{\"1779\":1}}],[\"应先根据条件过滤\",{\"1\":{\"1245\":1}}],[\"应尽量使用覆盖索引\",{\"1\":{\"706\":1}}],[\"应答报文\",{\"1\":{\"1410\":1}}],[\"应答报文后\",{\"1\":{\"1410\":1}}],[\"应答后\",{\"1\":{\"1410\":1}}],[\"应答消息了\",{\"1\":{\"466\":1}}],[\"应答最小副本数大于等于2\",{\"1\":{\"460\":1}}],[\"应答\",{\"1\":{\"450\":1,\"1410\":2}}],[\"应用贮藏的修改\",{\"1\":{\"1633\":1}}],[\"应用贮藏并抛弃\",{\"1\":{\"1343\":1}}],[\"应用软件可以借助中间件在不同的技术架构之间共享信息与资源\",{\"1\":{\"1625\":1}}],[\"应用在启动时创建一个实例\",{\"1\":{\"1596\":1}}],[\"应用如果需要进入内核态\",{\"1\":{\"1440\":1}}],[\"应用广泛\",{\"1\":{\"1404\":1}}],[\"应用解决方案\",{\"1\":{\"1347\":1}}],[\"应用解耦\",{\"0\":{\"399\":1},\"1\":{\"440\":1}}],[\"应用栈顶贮藏\",{\"1\":{\"1343\":1}}],[\"应用\",{\"0\":{\"1118\":1},\"1\":{\"1609\":1}}],[\"应用上下文初始化的关键流程\",{\"1\":{\"1012\":1}}],[\"应用层面向消息的中间件开发标准协议\",{\"1\":{\"1625\":1}}],[\"应用层程序调用\",{\"1\":{\"1395\":1}}],[\"应用层\",{\"1\":{\"839\":2,\"1393\":1}}],[\"应用层协议的一个开放标准\",{\"1\":{\"404\":1}}],[\"应用指定算法\",{\"1\":{\"656\":1}}],[\"应用系统的数据量也是成指数式增长\",{\"1\":{\"651\":1}}],[\"应用服务器这类容器的外置数据源\",{\"1\":{\"526\":1}}],[\"应用的响应速度\",{\"1\":{\"526\":1}}],[\"应用运行期间应一直存在\",{\"1\":{\"507\":1}}],[\"应用开始选择日志实现组件进行日志记录\",{\"1\":{\"378\":1}}],[\"应用场景\",{\"0\":{\"273\":1,\"440\":1,\"1162\":1},\"1\":{\"1136\":1}}],[\"应用程序要不断轮询数据是否准备好\",{\"1\":{\"1504\":1}}],[\"应用程序提供访问块设备的标准接口\",{\"1\":{\"1483\":1}}],[\"应用程序主动建立端口映射\",{\"1\":{\"1428\":1}}],[\"应用程序通过系统调用\",{\"1\":{\"1395\":1}}],[\"应用程序代理\",{\"1\":{\"1222\":1}}],[\"应用程序创建的线程组\",{\"1\":{\"1099\":1}}],[\"应用程序可以自由选择在内存或其它硬件设备中进行数据处理\",{\"1\":{\"802\":1}}],[\"应用程序\",{\"1\":{\"340\":1}}],[\"应用程序类加载器是\",{\"1\":{\"254\":1}}],[\"应用程序类加载器\",{\"1\":{\"254\":2,\"1528\":1}}],[\"应用程序分配资源的单位\",{\"1\":{\"134\":1}}],[\"应用于各种\",{\"1\":{\"8\":1}}],[\"应该单纯是歌单里他们的歌最多\",{\"1\":{\"1826\":1}}],[\"应该还有两部豆瓣词条被封的\",{\"1\":{\"1817\":1}}],[\"应该是长这么大\",{\"1\":{\"1816\":1}}],[\"应该是受众最多的正版观影方式\",{\"1\":{\"1803\":1}}],[\"应该是可以简化指针的切换\",{\"1\":{\"6\":1}}],[\"应该假定任何参数都是可能不正常的\",{\"1\":{\"1781\":1}}],[\"应该放出多少座位\",{\"1\":{\"1734\":1}}],[\"应该释放出来\",{\"1\":{\"1734\":1}}],[\"应该根据应用系统的特点选择合适的存储引擎\",{\"1\":{\"682\":1}}],[\"应该明确区分\",{\"1\":{\"58\":1}}],[\"和朋友们一起拍到了美美的星空\",{\"1\":{\"1844\":1}}],[\"和伊斯兰教一样\",{\"1\":{\"1837\":1}}],[\"和国内的三线城市差不多吧\",{\"1\":{\"1834\":1}}],[\"和对象又一起夜爬了武功山\",{\"1\":{\"1825\":1}}],[\"和对象一起去了隔壁的湘潭\",{\"1\":{\"1825\":1}}],[\"和妈妈一起去趟山东\",{\"1\":{\"1825\":1}}],[\"和家人们一起团聚嬉闹\",{\"1\":{\"1815\":1}}],[\"和山地车完全不一样\",{\"1\":{\"1796\":1}}],[\"和舱位代码\",{\"1\":{\"1739\":1}}],[\"和mockito\",{\"1\":{\"1708\":2}}],[\"和子集一样\",{\"1\":{\"1674\":1}}],[\"和可用性\",{\"1\":{\"1618\":1}}],[\"和可写的\",{\"1\":{\"82\":1}}],[\"和持久性\",{\"1\":{\"1571\":1}}],[\"和虚拟机栈基本类似\",{\"1\":{\"1520\":1}}],[\"和虚引用\",{\"1\":{\"183\":1}}],[\"和wait\",{\"0\":{\"1512\":1}}],[\"和异步\",{\"1\":{\"1504\":1}}],[\"和指针\",{\"1\":{\"1497\":1}}],[\"和索引节点是多对一的关系\",{\"1\":{\"1474\":1}}],[\"和内核缓存的文件数据\",{\"1\":{\"1446\":1}}],[\"和内存屏障\",{\"1\":{\"172\":1}}],[\"和服务端\",{\"1\":{\"1420\":1}}],[\"和服务端相比有两个区别\",{\"1\":{\"100\":1}}],[\"和各类\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"和目标服务器通过三次握手\",{\"1\":{\"1394\":1}}],[\"和执行状态\",{\"1\":{\"1374\":1}}],[\"和当前\",{\"1\":{\"1514\":1}}],[\"和当前这个节点保存的字符\",{\"1\":{\"1361\":1}}],[\"和当前分支到指定提交\",{\"1\":{\"1344\":1}}],[\"和db里面现有的的景点数据做diffandsave\",{\"1\":{\"1360\":1}}],[\"和其它版本控制系统在对待数据的方式上有很大的区别\",{\"1\":{\"1309\":1}}],[\"和业务数据的迁移分离开\",{\"1\":{\"1238\":1}}],[\"和已有的\",{\"1\":{\"1219\":1}}],[\"和半结构化数据\",{\"1\":{\"1212\":1}}],[\"和分区容错性\",{\"1\":{\"1206\":1}}],[\"和一个司机师傅住\",{\"1\":{\"1844\":1}}],[\"和一个树对象\",{\"1\":{\"1332\":1}}],[\"和一个接口\",{\"1\":{\"78\":1}}],[\"和一系列方法\",{\"1\":{\"1128\":1}}],[\"和外部事务是父子关系\",{\"1\":{\"1041\":1}}],[\"和自己的\",{\"1\":{\"1582\":1}}],[\"和自己的特殊值相等时才进行删除\",{\"1\":{\"1263\":1}}],[\"和自己的运行id是否相同\",{\"1\":{\"942\":1}}],[\"和自己的配置纪元是否相同\",{\"1\":{\"942\":1}}],[\"和普通redis服务器不完全相同\",{\"1\":{\"939\":1}}],[\"和ht\",{\"1\":{\"883\":1}}],[\"和hprof\",{\"1\":{\"232\":1}}],[\"和启动流程类似\",{\"1\":{\"873\":1}}],[\"和所属的单线程\",{\"1\":{\"869\":1}}],[\"和所有的\",{\"1\":{\"496\":1}}],[\"和所有\",{\"1\":{\"460\":1}}],[\"和悲观插入\",{\"1\":{\"739\":1}}],[\"和数据表的记录总数的比值\",{\"1\":{\"707\":1}}],[\"和字段书写的位置没有关系\",{\"1\":{\"702\":1}}],[\"和最大\",{\"1\":{\"689\":1}}],[\"和开发人员利用\",{\"1\":{\"673\":1}}],[\"和另一台主机\",{\"1\":{\"658\":1}}],[\"和高频\",{\"1\":{\"657\":1}}],[\"和专业\",{\"1\":{\"634\":1}}],[\"和表级排他锁互斥\",{\"1\":{\"560\":1}}],[\"和排他锁\",{\"1\":{\"549\":1}}],[\"和单例\",{\"1\":{\"1378\":1}}],[\"和单\",{\"1\":{\"541\":1}}],[\"和前面的\",{\"1\":{\"541\":1}}],[\"和参数来执行\",{\"1\":{\"510\":1}}],[\"和参数对象\",{\"1\":{\"509\":1}}],[\"和若干个\",{\"1\":{\"443\":1}}],[\"和只读不写的\",{\"1\":{\"427\":1}}],[\"和日志实现\",{\"1\":{\"376\":1}}],[\"和号\",{\"1\":{\"357\":1}}],[\"和设置定时器的时间有出入\",{\"1\":{\"334\":1}}],[\"和equals\",{\"1\":{\"304\":1,\"305\":1}}],[\"和复杂的异步处理逻辑\",{\"1\":{\"282\":1}}],[\"和动态分派\",{\"1\":{\"245\":1}}],[\"和脚本工具\",{\"1\":{\"228\":1}}],[\"和存储\",{\"1\":{\"143\":1}}],[\"和订阅者\",{\"1\":{\"84\":1}}],[\"和拷贝\",{\"1\":{\"64\":1}}],[\"和很多分布式系统一样\",{\"1\":{\"34\":1}}],[\"和\",{\"0\":{\"687\":1,\"1405\":1,\"1423\":1,\"1535\":1,\"1541\":1,\"1618\":1},\"1\":{\"8\":1,\"9\":1,\"17\":1,\"31\":1,\"34\":1,\"38\":1,\"58\":1,\"91\":1,\"99\":2,\"136\":1,\"139\":1,\"145\":1,\"161\":1,\"365\":1,\"376\":1,\"385\":1,\"407\":1,\"414\":3,\"423\":1,\"425\":1,\"427\":1,\"432\":1,\"450\":1,\"460\":1,\"469\":1,\"480\":1,\"540\":1,\"545\":1,\"553\":1,\"561\":2,\"585\":1,\"623\":1,\"636\":1,\"647\":1,\"735\":1,\"773\":1,\"802\":1,\"809\":1,\"814\":1,\"822\":2,\"830\":1,\"844\":1,\"846\":1,\"863\":1,\"865\":1,\"975\":1,\"1006\":3,\"1010\":1,\"1011\":1,\"1016\":1,\"1041\":1,\"1042\":1,\"1061\":1,\"1076\":1,\"1077\":2,\"1091\":1,\"1110\":2,\"1112\":1,\"1129\":1,\"1135\":1,\"1150\":1,\"1155\":2,\"1170\":1,\"1203\":3,\"1204\":1,\"1219\":1,\"1221\":1,\"1236\":1,\"1250\":3,\"1279\":1,\"1281\":1,\"1287\":1,\"1320\":1,\"1336\":1,\"1342\":2,\"1344\":1,\"1368\":2,\"1378\":1,\"1379\":1,\"1395\":1,\"1399\":3,\"1401\":1,\"1402\":1,\"1404\":1,\"1446\":1,\"1478\":2,\"1486\":1,\"1487\":1,\"1488\":2,\"1489\":1,\"1497\":1,\"1511\":1,\"1521\":1,\"1533\":1,\"1556\":2,\"1598\":1,\"1620\":1,\"1623\":1,\"1625\":1,\"1628\":2,\"1633\":1,\"1642\":2,\"1657\":2,\"1716\":1,\"1811\":1,\"1817\":1,\"1828\":1}}],[\"唤醒线程会进行用户态和内核态的上下文切换\",{\"1\":{\"1468\":1}}],[\"唤醒数据接收服务程序\",{\"1\":{\"1395\":1}}],[\"唤醒所有等待队列的线程进入同步队列\",{\"1\":{\"1091\":1}}],[\"唤醒\",{\"1\":{\"366\":1}}],[\"唤醒正在等待的单个\",{\"1\":{\"331\":1}}],[\"唤醒该条件变量上等待的所有线程\",{\"1\":{\"156\":1}}],[\"唤醒则对应signal\",{\"1\":{\"8\":1}}],[\"唤醒等待的线程\",{\"1\":{\"7\":1}}],[\"唤醒后又没抢到资源\",{\"1\":{\"6\":1}}],[\"~all\",{\"1\":{\"1792\":1}}],[\"~18\",{\"1\":{\"1722\":1}}],[\"~=\",{\"1\":{\"1658\":2}}],[\"~count\",{\"1\":{\"1112\":1}}],[\"~selectionkey\",{\"1\":{\"873\":1}}],[\"~\",{\"1\":{\"665\":5,\"1311\":2}}],[\"~waiting\",{\"1\":{\"7\":1}}],[\"~~\",{\"1\":{\"6\":1}}],[\"里永久性地留下自己的名字\",{\"1\":{\"1786\":1}}],[\"里是\",{\"1\":{\"1701\":1}}],[\"里是要清除的已取消节点\",{\"1\":{\"7\":1}}],[\"里都没有会发生更新操作的数据\",{\"1\":{\"1435\":1}}],[\"里获取\",{\"1\":{\"1378\":1}}],[\"里可以给特定的提交打上一个标签\",{\"1\":{\"1329\":1}}],[\"里可以容纳多个\",{\"1\":{\"443\":1}}],[\"里提供了\",{\"1\":{\"1136\":1}}],[\"里有两种方法获取中断状态\",{\"1\":{\"1092\":1}}],[\"里存储的\",{\"1\":{\"1077\":1}}],[\"里会注入\",{\"1\":{\"1054\":2}}],[\"里封装\",{\"1\":{\"544\":2}}],[\"里拿到\",{\"1\":{\"542\":1}}],[\"里称为\",{\"1\":{\"382\":1}}],[\"里的摄影师尚恩照进了现实\",{\"1\":{\"1844\":1}}],[\"里的数据页后\",{\"1\":{\"1555\":1}}],[\"里的热点数据全部都被淘汰了\",{\"1\":{\"1448\":1}}],[\"里的文件路径和\",{\"1\":{\"1218\":1}}],[\"里的线程执行的\",{\"1\":{\"820\":1}}],[\"里的成员才可能被选为leader\",{\"1\":{\"470\":1}}],[\"里的\",{\"1\":{\"139\":2}}],[\"里输入数据\",{\"1\":{\"83\":1}}],[\"里\",{\"1\":{\"9\":1,\"420\":1,\"541\":1,\"814\":1,\"1095\":1,\"1115\":2,\"1228\":1,\"1435\":2,\"1448\":1}}],[\"里面给的提示给域名设置一个\",{\"1\":{\"1792\":1}}],[\"里面存储了用户数据\",{\"1\":{\"1614\":1}}],[\"里面是\",{\"1\":{\"1598\":1,\"1690\":1}}],[\"里面都广泛应用\",{\"1\":{\"1137\":1}}],[\"里面会调用实现了\",{\"1\":{\"1114\":1}}],[\"里面会尝试获取事务管理器\",{\"1\":{\"1059\":1}}],[\"里面取出事务的属性做进一步的处理\",{\"1\":{\"1059\":1}}],[\"里面\",{\"1\":{\"1050\":1,\"1051\":1,\"1059\":2}}],[\"里面封装了实际的数据库连接\",{\"1\":{\"1044\":1}}],[\"里面封装了一个具体的事务对象\",{\"1\":{\"1038\":1}}],[\"里面封装了一个继承自\",{\"1\":{\"73\":1}}],[\"里面新增了是否只读的属性\",{\"1\":{\"1043\":1}}],[\"里面保存了代理的目标对象\",{\"1\":{\"1015\":1}}],[\"里面用户自定义的各个\",{\"1\":{\"873\":1}}],[\"里面分为\",{\"1\":{\"863\":1}}],[\"里面包含了\",{\"1\":{\"863\":1}}],[\"里面各个\",{\"1\":{\"823\":1}}],[\"里面有mpd文件和切分的segment\",{\"1\":{\"1869\":1}}],[\"里面有大量的历史文物\",{\"1\":{\"1847\":1}}],[\"里面有文成公主带进西藏的释迦牟尼十二岁等身像\",{\"1\":{\"1838\":1}}],[\"里面有两个\",{\"1\":{\"1135\":1}}],[\"里面有两种执行\",{\"1\":{\"1090\":1}}],[\"里面有一个\",{\"1\":{\"1006\":2,\"1010\":1}}],[\"里面有\",{\"1\":{\"816\":1}}],[\"里面的零拷贝意义略有不同\",{\"1\":{\"830\":1}}],[\"里面的\",{\"1\":{\"802\":1,\"1016\":1,\"1057\":1,\"1556\":2}}],[\"里面的分区按序号排序\",{\"1\":{\"495\":1}}],[\"里面采用\",{\"1\":{\"490\":1}}],[\"里面关联着所用的\",{\"1\":{\"389\":1}}],[\"里面获取\",{\"1\":{\"196\":1}}],[\"里面两个专门留给\",{\"1\":{\"196\":1}}],[\"里面涵盖了一些已经废弃的功能以及许多比较危险的操作\",{\"1\":{\"38\":1}}],[\"里面定义了\",{\"1\":{\"9\":1}}],[\"里面定义了一个exclusiveownerthread\",{\"1\":{\"3\":1}}],[\"里面唯一的\",{\"1\":{\"8\":1}}],[\"里面还定义了一个\",{\"1\":{\"8\":1}}],[\"除特定ota外\",{\"1\":{\"1737\":1}}],[\"除sigkill\",{\"1\":{\"1465\":1}}],[\"除serial外只有parnew可以和cms配合使用\",{\"1\":{\"174\":1}}],[\"除\",{\"1\":{\"971\":1,\"1202\":1,\"1528\":1}}],[\"除exec\",{\"1\":{\"959\":1}}],[\"除上述情况\",{\"1\":{\"839\":1}}],[\"除主键外必须等值匹配\",{\"1\":{\"711\":2}}],[\"除传统的计算资源\",{\"1\":{\"549\":1}}],[\"除runtimeexception之外的所有异常\",{\"1\":{\"345\":1}}],[\"除此之外\",{\"1\":{\"82\":1,\"414\":1,\"695\":1,\"732\":1,\"1044\":1,\"1057\":1,\"1508\":1,\"1515\":1,\"1622\":1}}],[\"除了青海湖是在半夜经过\",{\"1\":{\"1833\":1}}],[\"除了北洋园这样的高校pt站\",{\"1\":{\"1810\":1}}],[\"除了上面这几个正版流媒体平台\",{\"1\":{\"1804\":1}}],[\"除了价格和库存两个要素\",{\"1\":{\"1728\":1}}],[\"除了提供容器运行时所需的程序\",{\"1\":{\"1634\":1}}],[\"除了主从和哨兵的功能外\",{\"1\":{\"1590\":1}}],[\"除了最后一层外\",{\"1\":{\"1387\":1}}],[\"除了包含提交本身相关的信息\",{\"1\":{\"1332\":1}}],[\"除了合并提交之外的哪些提交修改了测试文件\",{\"1\":{\"1322\":1}}],[\"除了支持四层负载均衡以外\",{\"1\":{\"1299\":1}}],[\"除了核心的主从管理者之外\",{\"1\":{\"1222\":1}}],[\"除了通过\",{\"1\":{\"1218\":1}}],[\"除了通用的页面头和页面尾\",{\"1\":{\"749\":1}}],[\"除了命令不同\",{\"1\":{\"1218\":1}}],[\"除了统一启停之外\",{\"1\":{\"1217\":1}}],[\"除了rdb持久化\",{\"1\":{\"915\":1}}],[\"除了\",{\"1\":{\"826\":1,\"1015\":1}}],[\"除了用户自定义的\",{\"1\":{\"1012\":1}}],[\"除了用\",{\"1\":{\"820\":1}}],[\"除了实际存储的数据\",{\"1\":{\"697\":1}}],[\"除了传统\",{\"1\":{\"440\":1}}],[\"除了线程调用栈信息外\",{\"1\":{\"234\":1}}],[\"除了oops\",{\"1\":{\"215\":1}}],[\"除了long\",{\"1\":{\"204\":1}}],[\"除了标记位processpendingactive\",{\"1\":{\"187\":1}}],[\"除了继承\",{\"1\":{\"73\":1}}],[\"除了在编译期生成的常量\",{\"1\":{\"211\":1}}],[\"除了在\",{\"1\":{\"7\":1}}],[\"除非数据是被本身事务自己所修改\",{\"1\":{\"1612\":1}}],[\"除非使用\",{\"1\":{\"1512\":1}}],[\"除非使用了\",{\"1\":{\"520\":1}}],[\"除非\",{\"1\":{\"1423\":1}}],[\"除非不写会有bug或者要强调所在文件系统才需要写明\",{\"1\":{\"1218\":1}}],[\"除非ask错误再次出现\",{\"1\":{\"947\":1}}],[\"除非jvm崩溃\",{\"1\":{\"346\":1}}],[\"除非超时\",{\"1\":{\"6\":1}}],[\"除非是处在detached\",{\"1\":{\"1351\":1}}],[\"除非是\",{\"1\":{\"6\":1}}],[\"h的速度慢慢向拉萨驶去\",{\"1\":{\"1833\":1}}],[\"hn\",{\"1\":{\"1736\":1}}],[\"hu7605\",{\"1\":{\"1729\":1}}],[\"humongous区域专门存储大对象\",{\"1\":{\"177\":1,\"1525\":1}}],[\"hyperloglogs\",{\"1\":{\"1570\":1}}],[\"hyphen\",{\"1\":{\"79\":2}}],[\"hrrn\",{\"1\":{\"1470\":1}}],[\"hpf\",{\"1\":{\"1470\":1}}],[\"hpack\",{\"1\":{\"1404\":1}}],[\"hprof\",{\"1\":{\"233\":2,\"1367\":1,\"1529\":1}}],[\"hprof格式\",{\"1\":{\"232\":1}}],[\"hql\",{\"1\":{\"1224\":1}}],[\"hbase\",{\"1\":{\"1213\":1}}],[\"h4\",{\"1\":{\"823\":2}}],[\"h3\",{\"1\":{\"823\":2,\"1367\":1,\"1529\":1}}],[\"h265\",{\"1\":{\"1400\":1}}],[\"h264\",{\"1\":{\"1400\":1}}],[\"h2\",{\"1\":{\"823\":2}}],[\"hdd比内存慢\",{\"1\":{\"1434\":1}}],[\"hdd\",{\"1\":{\"1434\":1}}],[\"hdr\",{\"1\":{\"739\":2,\"742\":1}}],[\"hdfs导入数据\",{\"1\":{\"1226\":1}}],[\"hdfs核心配置文件\",{\"1\":{\"1217\":1}}],[\"hdfs\",{\"0\":{\"1215\":1},\"1\":{\"109\":1,\"113\":1,\"1213\":2,\"1214\":1,\"1215\":1,\"1216\":1,\"1217\":4,\"1218\":29,\"1219\":4,\"1222\":1,\"1224\":1,\"1225\":1,\"1226\":1,\"1228\":1}}],[\"h1>\",{\"1\":{\"846\":1}}],[\"h1\",{\"1\":{\"667\":1,\"823\":2}}],[\"hw\",{\"1\":{\"471\":10}}],[\"hh24\",{\"1\":{\"643\":2}}],[\"hh\",{\"1\":{\"388\":3,\"665\":3}}],[\"hhh\",{\"1\":{\"79\":3}}],[\"hsdb\",{\"1\":{\"235\":2}}],[\"hooks目录下\",{\"1\":{\"1345\":1}}],[\"hooks\",{\"0\":{\"1345\":1},\"1\":{\"1349\":1}}],[\"hook\",{\"1\":{\"1115\":2,\"1116\":1}}],[\"holdslock\",{\"1\":{\"1095\":1}}],[\"hotfix删除已合并的分支\",{\"1\":{\"1335\":1}}],[\"hotfix\",{\"1\":{\"1333\":1,\"1335\":2}}],[\"hot\",{\"1\":{\"242\":1}}],[\"hotspot采用第二种计数器方式\",{\"1\":{\"268\":1}}],[\"hotspot中包括客户端编译器c1\",{\"1\":{\"267\":1}}],[\"hotspot虚拟机自带的一种调试工具\",{\"1\":{\"235\":1}}],[\"hotspot\",{\"1\":{\"171\":1,\"209\":1,\"235\":2,\"1520\":1}}],[\"hoteldoc\",{\"1\":{\"48\":3,\"51\":5}}],[\"hotel\",{\"1\":{\"42\":1,\"43\":1,\"44\":1,\"48\":1,\"51\":1}}],[\"hours\",{\"1\":{\"467\":1,\"477\":1}}],[\"hours=168\",{\"1\":{\"445\":1}}],[\"hour\",{\"1\":{\"129\":1,\"1567\":1}}],[\"home目录\",{\"1\":{\"1692\":1}}],[\"home>\",{\"1\":{\"254\":1}}],[\"home\",{\"1\":{\"124\":2,\"126\":1,\"388\":2,\"1688\":2,\"1692\":2,\"1701\":1}}],[\"hostname\",{\"1\":{\"1698\":1}}],[\"host=name\",{\"1\":{\"675\":3}}],[\"host=\",{\"1\":{\"649\":1,\"1155\":1}}],[\"hostid\",{\"1\":{\"229\":1}}],[\"host\",{\"1\":{\"93\":2,\"339\":1,\"343\":1,\"413\":1,\"417\":2,\"649\":2,\"940\":1,\"1366\":1,\"1396\":1,\"1398\":1,\"1791\":1,\"1792\":2}}],[\"haha\",{\"1\":{\"1711\":3}}],[\"hamcrest\",{\"1\":{\"1716\":1,\"1717\":1}}],[\"hammingdistance\",{\"1\":{\"1666\":1}}],[\"hamming\",{\"1\":{\"1666\":1}}],[\"hammingweight\",{\"1\":{\"1664\":1,\"1665\":1}}],[\"hamano\",{\"1\":{\"1322\":2}}],[\"hard\",{\"1\":{\"1324\":1,\"1344\":2}}],[\"haproxy是目前使用最广泛的三种负载均衡软件\",{\"1\":{\"1299\":1}}],[\"happens\",{\"1\":{\"143\":10}}],[\"have\",{\"1\":{\"612\":2}}],[\"having子句和where子句合并\",{\"1\":{\"724\":1}}],[\"having是分组后对结果进行过滤\",{\"1\":{\"585\":1}}],[\"having\",{\"1\":{\"124\":1,\"581\":1,\"585\":4,\"588\":1,\"624\":1,\"1226\":1,\"1567\":2}}],[\"hat开发的低延迟垃圾收集器\",{\"1\":{\"178\":1}}],[\"hadoop核心配置文件\",{\"1\":{\"1217\":1}}],[\"hadoop\",{\"0\":{\"1210\":1,\"1214\":1},\"1\":{\"124\":2,\"126\":1,\"129\":1,\"808\":1,\"1214\":6,\"1215\":2,\"1217\":3,\"1218\":2,\"1221\":1,\"1222\":1},\"2\":{\"132\":1,\"1231\":1}}],[\"handledataavailable\",{\"1\":{\"1858\":1}}],[\"handleerror\",{\"1\":{\"1853\":1,\"1854\":1}}],[\"handleexistingtransaction\",{\"1\":{\"1049\":2}}],[\"handleoutputparameters\",{\"1\":{\"523\":1}}],[\"handleasync\",{\"1\":{\"163\":2}}],[\"handle\",{\"1\":{\"163\":1}}],[\"handleradapter\",{\"1\":{\"1605\":1}}],[\"handlermapping\",{\"1\":{\"1605\":2}}],[\"handler链\",{\"1\":{\"823\":1}}],[\"handler链执行结果\",{\"1\":{\"823\":1}}],[\"handler绑定\",{\"1\":{\"818\":1}}],[\"handler绑定结果\",{\"1\":{\"818\":1}}],[\"handler2\",{\"1\":{\"818\":1}}],[\"handler1\",{\"1\":{\"818\":1}}],[\"handleresultsets\",{\"1\":{\"523\":1,\"544\":1}}],[\"handler=\",{\"1\":{\"521\":1}}],[\"handler线程会将其放入对应的引用队列中\",{\"1\":{\"188\":1}}],[\"handler线程负责处理软引用\",{\"1\":{\"188\":1}}],[\"handler\",{\"0\":{\"823\":1},\"1\":{\"93\":2,\"188\":5,\"332\":1,\"544\":3,\"634\":5,\"812\":1,\"813\":2,\"814\":4,\"818\":4,\"820\":1,\"823\":1,\"826\":1,\"851\":2,\"852\":1,\"865\":1,\"867\":1,\"873\":4,\"1106\":1,\"1120\":2,\"1488\":6,\"1511\":1,\"1605\":6}}],[\"handlemessageevent\",{\"1\":{\"84\":2}}],[\"has\",{\"1\":{\"1050\":1}}],[\"hassavepoint\",{\"1\":{\"1044\":1}}],[\"hasfullprivilegeaccess\",{\"1\":{\"1015\":1}}],[\"hastasks\",{\"1\":{\"872\":1}}],[\"hasremaining\",{\"1\":{\"767\":1,\"777\":1,\"789\":2,\"797\":1}}],[\"hasnext\",{\"1\":{\"304\":1,\"383\":1,\"450\":1,\"786\":1,\"791\":2}}],[\"hashshake\",{\"1\":{\"1402\":2}}],[\"hashset\",{\"1\":{\"304\":1,\"869\":1,\"1496\":1,\"1658\":2}}],[\"hashsetvalues\",{\"1\":{\"67\":1}}],[\"hash索引只能用于对等比较\",{\"1\":{\"698\":1}}],[\"hash索引\",{\"1\":{\"681\":1,\"698\":2}}],[\"hash索引在进行等值匹配时\",{\"1\":{\"638\":1}}],[\"hashed\",{\"1\":{\"532\":2}}],[\"hasher\",{\"1\":{\"83\":2}}],[\"hashtable线程安全\",{\"1\":{\"983\":1}}],[\"hashtable\",{\"0\":{\"1495\":1},\"1\":{\"162\":1,\"898\":2,\"899\":2,\"1495\":1}}],[\"hashfunction\",{\"1\":{\"83\":3}}],[\"hashing\",{\"1\":{\"83\":2}}],[\"hash\",{\"0\":{\"83\":1},\"1\":{\"83\":3,\"452\":1,\"483\":1,\"638\":1,\"697\":1,\"698\":1,\"913\":2,\"1228\":1,\"1256\":1,\"1350\":2,\"1403\":1,\"1494\":1,\"1570\":1,\"1579\":1}}],[\"hashbasedtable\",{\"1\":{\"69\":1}}],[\"hashbimap\",{\"1\":{\"68\":1}}],[\"hashkeys\",{\"1\":{\"67\":1}}],[\"hashmap<integer\",{\"1\":{\"1651\":1}}],[\"hashmap<string\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"hashmap<>\",{\"1\":{\"15\":4,\"990\":1,\"1002\":1,\"1028\":1,\"1382\":1,\"1599\":2,\"1663\":1}}],[\"hashmap\",{\"0\":{\"1494\":1},\"1\":{\"305\":1,\"530\":1,\"1253\":1,\"1494\":4,\"1496\":1,\"1658\":2}}],[\"hashmultimap\",{\"1\":{\"67\":1}}],[\"hashmultiset\",{\"1\":{\"66\":2}}],[\"hashcode\",{\"0\":{\"1535\":1},\"1\":{\"60\":1,\"83\":2,\"214\":1,\"496\":1,\"1009\":2,\"1015\":3,\"1077\":6,\"1256\":1,\"1494\":1,\"1521\":2,\"1535\":4,\"1579\":1}}],[\"hasqueuedpredecessors\",{\"1\":{\"9\":1}}],[\"hasqueuedthreads\",{\"1\":{\"9\":1}}],[\"hf\",{\"1\":{\"83\":2}}],[\"height\",{\"1\":{\"1854\":1,\"1856\":1,\"1870\":1}}],[\"heidisql\",{\"1\":{\"666\":2}}],[\"hell\",{\"1\":{\"282\":1}}],[\"helloimpl\",{\"1\":{\"1125\":1}}],[\"hello创建订阅频道\",{\"1\":{\"940\":1}}],[\"hello频道\",{\"1\":{\"939\":1}}],[\"helloclient\",{\"1\":{\"812\":1}}],[\"hellocontroller\",{\"1\":{\"89\":1,\"98\":5}}],[\"helloserver\",{\"1\":{\"811\":1}}],[\"helloservice2\",{\"1\":{\"90\":2,\"92\":1}}],[\"helloservice\",{\"1\":{\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"99\":1,\"101\":2}}],[\"helloserviceimpl2\",{\"1\":{\"90\":1}}],[\"helloserviceimpl\",{\"1\":{\"89\":1,\"91\":1}}],[\"helloword\",{\"1\":{\"799\":1}}],[\"helloworld\",{\"1\":{\"384\":1,\"1125\":1}}],[\"hello\",{\"0\":{\"810\":1},\"1\":{\"58\":1,\"77\":2,\"84\":1,\"89\":1,\"418\":6,\"456\":1,\"593\":5,\"771\":1,\"774\":3,\"792\":1,\"797\":1,\"812\":1,\"820\":1,\"823\":1,\"844\":1,\"940\":1,\"1015\":9,\"1016\":7,\"1125\":3,\"1218\":2,\"1368\":5,\"1402\":2,\"1536\":2,\"1685\":1,\"1711\":2,\"1713\":1}}],[\"here\",{\"1\":{\"196\":1}}],[\"heart\",{\"1\":{\"296\":1}}],[\"heartbeat\",{\"1\":{\"100\":1,\"485\":1}}],[\"hearbeat\",{\"1\":{\"296\":6}}],[\"heapify\",{\"1\":{\"1652\":4}}],[\"heapsize\",{\"1\":{\"1652\":11}}],[\"heapsort\",{\"1\":{\"1652\":1}}],[\"heapbuffer\",{\"1\":{\"826\":3}}],[\"heapbytebuffer\",{\"1\":{\"761\":1,\"770\":1,\"800\":1}}],[\"heap\",{\"1\":{\"232\":2,\"233\":5,\"235\":1,\"689\":1,\"770\":1,\"1136\":1,\"1367\":2,\"1529\":2}}],[\"head>\",{\"1\":{\"1870\":1}}],[\"head分离头指针状态\",{\"1\":{\"1351\":1}}],[\"head~\",{\"1\":{\"1344\":2}}],[\"head~来回到上一个提交\",{\"1\":{\"1344\":1}}],[\"head~3\",{\"1\":{\"1344\":1}}],[\"head~~\",{\"1\":{\"1341\":1}}],[\"head~2\",{\"1\":{\"1341\":1}}],[\"head^2\",{\"1\":{\"1341\":1}}],[\"head^\",{\"1\":{\"1341\":1}}],[\"heads\",{\"1\":{\"1338\":2,\"1351\":6}}],[\"headcontext\",{\"1\":{\"829\":1,\"867\":1}}],[\"header对应一个rollback\",{\"1\":{\"751\":1}}],[\"header类型的页面\",{\"1\":{\"751\":1}}],[\"header三部分\",{\"1\":{\"749\":1}}],[\"header位置\",{\"1\":{\"749\":1}}],[\"header中page\",{\"1\":{\"747\":1}}],[\"header中取fil\",{\"1\":{\"742\":1}}],[\"header中log\",{\"1\":{\"742\":1}}],[\"header以及block\",{\"1\":{\"740\":1}}],[\"header和checkpoints\",{\"1\":{\"739\":1}}],[\"header部分12byte\",{\"1\":{\"739\":1}}],[\"header\",{\"1\":{\"688\":2,\"691\":2,\"739\":1,\"749\":10,\"751\":2,\"886\":1,\"1366\":1,\"1404\":1,\"1871\":5}}],[\"headers\",{\"1\":{\"404\":1,\"414\":2,\"846\":1,\"1625\":1,\"1628\":2,\"1871\":1}}],[\"head\",{\"1\":{\"3\":2,\"6\":8,\"7\":2,\"184\":7,\"844\":2,\"865\":1,\"873\":1,\"987\":4,\"1002\":8,\"1324\":2,\"1326\":1,\"1332\":2,\"1333\":1,\"1336\":2,\"1341\":8,\"1342\":1,\"1344\":7,\"1346\":2,\"1347\":1,\"1349\":2,\"1351\":5,\"1631\":1,\"1651\":8}}],[\"hessian\",{\"1\":{\"91\":1,\"848\":1}}],[\"hi\",{\"1\":{\"844\":1}}],[\"historyserver\",{\"1\":{\"1222\":1}}],[\"history链表的基结点\",{\"1\":{\"751\":1}}],[\"history链表占用的页面数量\",{\"1\":{\"751\":1}}],[\"history\",{\"1\":{\"751\":2,\"1690\":1,\"1786\":1}}],[\"histogram\",{\"1\":{\"232\":1}}],[\"histo\",{\"1\":{\"232\":1}}],[\"hiveshell\",{\"1\":{\"1226\":1}}],[\"hiveserver2\",{\"1\":{\"1225\":3}}],[\"hive进入\",{\"1\":{\"1226\":1}}],[\"hive列注释\",{\"0\":{\"130\":1}}],[\"hive目前可用3个虚拟列\",{\"1\":{\"128\":1}}],[\"hive官方文档\",{\"1\":{\"104\":1}}],[\"hive\",{\"0\":{\"104\":1,\"1223\":1},\"1\":{\"107\":1,\"117\":1,\"118\":6,\"119\":1,\"121\":3,\"128\":2,\"130\":1,\"1213\":1,\"1221\":1,\"1223\":2,\"1224\":3,\"1225\":8,\"1226\":2,\"1228\":3,\"1229\":3},\"2\":{\"132\":1}}],[\"hit\",{\"1\":{\"51\":2}}],[\"hits\",{\"1\":{\"51\":2}}],[\"highlightbuilder\",{\"1\":{\"51\":1}}],[\"highlighter\",{\"1\":{\"51\":1}}],[\"high\",{\"1\":{\"38\":1,\"39\":1,\"471\":1,\"807\":1,\"1446\":1}}],[\"htm\",{\"1\":{\"1871\":1}}],[\"html>\",{\"1\":{\"1870\":2}}],[\"html代码如下\",{\"1\":{\"1870\":1}}],[\"html\",{\"1\":{\"10\":1,\"15\":1,\"53\":1,\"125\":1,\"283\":1,\"367\":1,\"380\":1,\"385\":1,\"392\":1,\"525\":1,\"546\":1,\"565\":1,\"788\":1,\"846\":1,\"1083\":1,\"1121\":2,\"1144\":1,\"1304\":3,\"1336\":2,\"1366\":1,\"1398\":1,\"1400\":1,\"1793\":1,\"1871\":6,\"1872\":1}}],[\"ht\",{\"1\":{\"882\":2,\"883\":1}}],[\"http上的动态自适应视频流技术\",{\"1\":{\"1866\":1}}],[\"http是无状态的\",{\"1\":{\"1642\":1}}],[\"http报文非常冗余\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"http当然也能实现\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"http协议没有\",{\"1\":{\"1405\":1}}],[\"http请求经过oceanus负载均衡转发到shepherd\",{\"1\":{\"1303\":1}}],[\"http请求\",{\"1\":{\"1302\":1}}],[\"httpurlconnection\",{\"1\":{\"1008\":2}}],[\"httputils\",{\"1\":{\"15\":2}}],[\"httpheadernames\",{\"1\":{\"846\":1}}],[\"httphost\",{\"1\":{\"40\":1}}],[\"httpcontent\",{\"1\":{\"846\":1}}],[\"httprequest\",{\"1\":{\"846\":3}}],[\"httpresponsestatus\",{\"1\":{\"846\":1}}],[\"httpresponse\",{\"1\":{\"15\":2}}],[\"http\",{\"0\":{\"1397\":1,\"1398\":1,\"1399\":1,\"1400\":1,\"1404\":1},\"1\":{\"15\":3,\"17\":3,\"40\":1,\"42\":1,\"357\":3,\"666\":3,\"788\":1,\"846\":4,\"1219\":1,\"1250\":2,\"1302\":1,\"1314\":1,\"1366\":1,\"1394\":2,\"1400\":4,\"1401\":2,\"1402\":1,\"1404\":8,\"1405\":1,\"1406\":3,\"1417\":1,\"1596\":3,\"1623\":2,\"1631\":1,\"1698\":1,\"1866\":1,\"1871\":1,\"1872\":1}}],[\"https服务场景\",{\"1\":{\"1297\":1}}],[\"https等应用层协议\",{\"1\":{\"1297\":1}}],[\"httpservercodec\",{\"1\":{\"846\":1}}],[\"httpservletresponse\",{\"1\":{\"15\":1}}],[\"httpsession\",{\"1\":{\"15\":1}}],[\"https\",{\"0\":{\"1401\":1},\"1\":{\"10\":4,\"15\":2,\"39\":1,\"53\":1,\"85\":2,\"117\":1,\"125\":1,\"283\":5,\"367\":1,\"380\":1,\"385\":1,\"392\":3,\"506\":2,\"525\":1,\"546\":6,\"565\":3,\"666\":3,\"667\":3,\"846\":1,\"852\":1,\"1004\":2,\"1069\":1,\"1083\":2,\"1117\":1,\"1121\":3,\"1144\":2,\"1156\":3,\"1246\":1,\"1304\":6,\"1314\":2,\"1326\":2,\"1330\":1,\"1347\":1,\"1351\":1,\"1401\":2,\"1402\":1,\"1661\":1,\"1663\":1,\"1666\":1,\"1791\":3,\"1793\":3,\"1859\":1,\"1866\":1,\"1867\":1,\"1870\":1,\"1877\":4}}],[\"h\",{\"1\":{\"7\":4,\"349\":1,\"569\":2,\"672\":1,\"675\":3,\"831\":1,\"906\":2,\"907\":1,\"970\":1,\"1015\":2,\"1218\":2,\"1322\":2,\"1387\":2,\"1700\":2,\"1735\":1,\"1868\":1}}],[\"关单库存解锁\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"关系\",{\"1\":{\"1204\":1}}],[\"关系型数据库基于表的结构\",{\"1\":{\"1543\":1}}],[\"关系型数据库\",{\"1\":{\"569\":1}}],[\"关注\",{\"1\":{\"1154\":1}}],[\"关注可写事件\",{\"1\":{\"789\":1}}],[\"关联起来\",{\"1\":{\"1791\":1}}],[\"关联节点\",{\"1\":{\"945\":1}}],[\"关联在redisserver\",{\"1\":{\"924\":1}}],[\"关联worker\",{\"1\":{\"791\":1}}],[\"关联\",{\"1\":{\"786\":1,\"863\":1,\"865\":1,\"866\":1}}],[\"关联另外一方的主键\",{\"1\":{\"601\":1}}],[\"关联一个复杂类型的映射\",{\"1\":{\"532\":1}}],[\"关联的线程\",{\"1\":{\"1114\":1}}],[\"关联的对象被垃圾收集器回收时候得到一个系统通知\",{\"1\":{\"183\":1}}],[\"关联的\",{\"1\":{\"139\":2,\"196\":1}}],[\"关联的所有\",{\"1\":{\"67\":1}}],[\"关联的节点需要暂时入队时\",{\"1\":{\"4\":1}}],[\"关闭进程\",{\"0\":{\"1465\":1}}],[\"关闭连接\",{\"0\":{\"1420\":1}}],[\"关闭连接时\",{\"1\":{\"1410\":1}}],[\"关闭线程池\",{\"1\":{\"1106\":1}}],[\"关闭事务解绑\",{\"1\":{\"1045\":1}}],[\"关闭输出缓冲区溢出的客户端\",{\"1\":{\"928\":1}}],[\"关闭和清理连接失效的客户端\",{\"1\":{\"920\":1}}],[\"关闭等操作时\",{\"1\":{\"919\":1,\"1572\":1}}],[\"关闭也有两种方式\",{\"1\":{\"821\":1}}],[\"关闭游标\",{\"1\":{\"634\":1}}],[\"关闭一个新连接\",{\"1\":{\"526\":1}}],[\"关闭\",{\"0\":{\"1116\":1},\"1\":{\"514\":1,\"777\":1,\"819\":1,\"858\":1,\"924\":1,\"1092\":1,\"1116\":1,\"1420\":1}}],[\"关闭时自动清空\",{\"1\":{\"512\":1}}],[\"关闭生产者\",{\"1\":{\"456\":1}}],[\"关闭后就走\",{\"1\":{\"25\":1}}],[\"关键步骤\",{\"1\":{\"1791\":1}}],[\"关键只要记录当前子集的和是否达到target\",{\"1\":{\"1674\":1}}],[\"关键\",{\"1\":{\"1670\":1,\"1671\":1,\"1672\":1,\"1673\":1,\"1676\":1}}],[\"关键点\",{\"1\":{\"1203\":1}}],[\"关键还是在开启事务管理的注解上\",{\"1\":{\"1056\":1}}],[\"关键在于用start控制树枝的遍历\",{\"1\":{\"1670\":1}}],[\"关键在于剪枝的判断\",{\"1\":{\"1669\":1}}],[\"关键在于时间片的设定\",{\"1\":{\"1470\":1}}],[\"关键在于注意\",{\"1\":{\"998\":1}}],[\"关键在于奇偶分别扩展求最长\",{\"1\":{\"993\":1}}],[\"关键在于添加的处理器链\",{\"1\":{\"93\":1}}],[\"关键先遍历长度\",{\"1\":{\"993\":1}}],[\"关键逻辑在\",{\"1\":{\"863\":1}}],[\"关键逻辑包括\",{\"1\":{\"541\":1}}],[\"关键代码\",{\"1\":{\"818\":1}}],[\"关键字可以修饰\",{\"1\":{\"1534\":1}}],[\"关键字可以保护数据的一致性\",{\"1\":{\"146\":1}}],[\"关键字等等\",{\"1\":{\"1322\":1}}],[\"关键字基本的上锁原理\",{\"1\":{\"1074\":1}}],[\"关键字在代码块上\",{\"1\":{\"1073\":1}}],[\"关键字在静态方法上\",{\"1\":{\"1073\":1}}],[\"关键字在实例方法上\",{\"1\":{\"1073\":1}}],[\"关键字创建的对象\",{\"1\":{\"210\":1}}],[\"关键字实现\",{\"1\":{\"137\":1}}],[\"关键字\",{\"0\":{\"1507\":1,\"1534\":1},\"1\":{\"137\":1,\"598\":1,\"661\":1,\"699\":1}}],[\"关于网关\",{\"0\":{\"1294\":1}}],[\"关于主服务器本身的信息\",{\"1\":{\"940\":1}}],[\"关于mysql复制的语句\",{\"1\":{\"734\":1}}],[\"关于\",{\"1\":{\"136\":1,\"909\":2,\"1136\":1,\"1218\":2}}],[\"关于cleanqueue方法\",{\"1\":{\"6\":1}}],[\"状态转移\",{\"1\":{\"1640\":2}}],[\"状态转换以及触发条件如下\",{\"1\":{\"1089\":1}}],[\"状态寄存器\",{\"1\":{\"1481\":1}}],[\"状态时间\",{\"1\":{\"1415\":1}}],[\"状态时可以获取\",{\"1\":{\"196\":2}}],[\"状态码\",{\"1\":{\"1398\":1}}],[\"状态发生变化重试\",{\"1\":{\"1114\":1}}],[\"状态值的大小顺序为\",{\"1\":{\"1112\":1}}],[\"状态控制\",{\"1\":{\"1099\":1}}],[\"状态校验\",{\"1\":{\"1090\":1,\"1115\":1}}],[\"状态标记\",{\"1\":{\"1087\":1}}],[\"状态改变为\",{\"1\":{\"856\":3}}],[\"状态修改为\",{\"1\":{\"856\":1}}],[\"状态如下\",{\"1\":{\"768\":1,\"1344\":2}}],[\"状态拆分数据等业务\",{\"1\":{\"656\":1}}],[\"状态\",{\"1\":{\"139\":1,\"184\":1,\"598\":1,\"856\":2,\"1090\":1,\"1116\":3,\"1154\":1,\"1155\":1,\"1203\":5,\"1281\":2,\"1409\":7,\"1410\":8,\"1467\":1,\"1487\":1,\"1556\":2,\"1563\":2,\"1620\":2}}],[\"状态的服务端发送\",{\"1\":{\"1420\":1}}],[\"状态的连接\",{\"1\":{\"1410\":1}}],[\"状态的\",{\"1\":{\"1203\":1}}],[\"状态的引用实例链不为\",{\"1\":{\"188\":1}}],[\"状态的方案\",{\"1\":{\"17\":1}}],[\"状态的解决方案\",{\"1\":{\"17\":1}}],[\"状态开始竞争资源\",{\"1\":{\"6\":1}}],[\"状态后再自旋一次\",{\"1\":{\"6\":1}}],[\"|or\",{\"1\":{\"537\":1}}],[\"|version\",{\"1\":{\"95\":1}}],[\"|=\",{\"1\":{\"6\":1,\"8\":1}}],[\"|\",{\"1\":{\"6\":1,\"71\":44,\"85\":1,\"95\":12,\"105\":7,\"118\":1,\"119\":1,\"120\":1,\"161\":1,\"622\":3,\"674\":1,\"701\":1,\"787\":1,\"848\":18,\"867\":1,\"873\":1,\"908\":4,\"919\":1,\"1009\":3,\"1015\":1,\"1049\":1,\"1055\":1,\"1112\":1,\"1135\":1,\"1173\":3,\"1218\":1,\"1226\":5,\"1436\":1,\"1567\":2,\"1631\":7,\"1685\":3,\"1687\":1,\"1698\":1,\"1791\":1,\"1871\":1}}],[\"||\",{\"1\":{\"6\":1,\"184\":1,\"583\":1,\"873\":1,\"991\":2,\"1049\":2,\"1059\":1,\"1088\":1,\"1114\":3,\"1115\":6,\"1116\":2,\"1120\":1,\"1135\":1,\"1675\":1}}],[\"+short\",{\"1\":{\"1792\":1}}],[\"+<format>\",{\"1\":{\"1697\":1}}],[\"+<src>\",{\"1\":{\"1351\":1}}],[\"+|\",{\"1\":{\"1683\":1}}],[\"+refs\",{\"1\":{\"1351\":1}}],[\"+表示即使在不能快进的情况下也要强制更新引用\",{\"1\":{\"1351\":1}}],[\"+pong\",{\"1\":{\"941\":1}}],[\"++k\",{\"1\":{\"1654\":1}}],[\"++size\",{\"1\":{\"1651\":1}}],[\"++threadseqnumber\",{\"1\":{\"1088\":1}}],[\"++j\",{\"1\":{\"991\":2}}],[\"++i\",{\"1\":{\"991\":2}}],[\"++\",{\"1\":{\"873\":1}}],[\"++count\",{\"1\":{\"1663\":1}}],[\"++c\",{\"1\":{\"9\":2}}],[\"+=\",{\"1\":{\"789\":1,\"1664\":1}}],[\"+1$\",{\"1\":{\"948\":1,\"974\":1}}],[\"+1\",{\"1\":{\"184\":1,\"996\":1,\"1114\":3,\"1119\":1,\"1418\":2,\"1517\":1,\"1677\":1,\"1697\":1}}],[\"+∞\",{\"1\":{\"81\":3}}],[\"+\",{\"0\":{\"1263\":1,\"1789\":1},\"1\":{\"6\":1,\"9\":1,\"14\":6,\"15\":2,\"51\":3,\"73\":5,\"77\":1,\"83\":1,\"84\":2,\"95\":26,\"104\":1,\"153\":3,\"175\":1,\"183\":9,\"263\":1,\"301\":5,\"355\":1,\"382\":7,\"391\":1,\"417\":15,\"418\":3,\"420\":2,\"421\":10,\"456\":4,\"460\":2,\"461\":3,\"469\":1,\"476\":1,\"478\":1,\"489\":1,\"688\":1,\"718\":1,\"729\":1,\"734\":1,\"788\":1,\"789\":1,\"791\":1,\"811\":1,\"813\":1,\"842\":1,\"843\":2,\"846\":1,\"850\":1,\"856\":1,\"908\":1,\"949\":1,\"975\":2,\"989\":3,\"993\":7,\"994\":1,\"995\":2,\"996\":3,\"998\":7,\"1000\":2,\"1008\":1,\"1009\":2,\"1049\":5,\"1067\":1,\"1088\":1,\"1108\":3,\"1119\":2,\"1136\":1,\"1264\":2,\"1268\":1,\"1269\":2,\"1338\":1,\"1361\":4,\"1368\":1,\"1375\":2,\"1402\":4,\"1403\":3,\"1404\":2,\"1409\":3,\"1412\":2,\"1413\":2,\"1414\":1,\"1418\":2,\"1428\":2,\"1432\":2,\"1435\":1,\"1438\":1,\"1443\":5,\"1470\":1,\"1479\":1,\"1486\":2,\"1511\":2,\"1586\":1,\"1608\":1,\"1613\":2,\"1623\":2,\"1652\":3,\"1653\":4,\"1654\":5,\"1655\":2,\"1657\":5,\"1666\":4,\"1669\":1,\"1670\":1,\"1671\":1,\"1673\":1,\"1674\":2,\"1676\":2,\"1677\":1,\"1690\":7,\"1697\":1,\"1711\":2,\"1730\":1,\"1732\":1,\"1781\":1}}],[\"拿下\",{\"1\":{\"1828\":1}}],[\"拿电商来对比\",{\"1\":{\"1726\":1}}],[\"拿电商的思路来理解\",{\"1\":{\"1722\":1}}],[\"拿筷子前加上互斥信号量\",{\"1\":{\"1467\":1}}],[\"拿到对方下一次期望的序列号\",{\"1\":{\"1420\":1}}],[\"拿到对应的checkpoint\",{\"1\":{\"742\":1}}],[\"拿到参数线程组对应的所有调用栈\",{\"1\":{\"1095\":1}}],[\"拿到所有线程和对应的调用栈封装成\",{\"1\":{\"1095\":1}}],[\"拿到当前线程的调用栈\",{\"1\":{\"1095\":1}}],[\"拿到要发送的\",{\"1\":{\"789\":1}}],[\"拿到服务端响应的\",{\"1\":{\"99\":1}}],[\"拿到\",{\"1\":{\"15\":1,\"27\":2,\"154\":1,\"1643\":2}}],[\"拿到锁了就返回\",{\"1\":{\"6\":1}}],[\"拿锁失败\",{\"1\":{\"6\":1}}],[\"ㄒoㄒ\",{\"1\":{\"6\":1}}],[\"了解即可\",{\"1\":{\"775\":1}}],[\"了解\",{\"1\":{\"762\":1,\"1074\":1}}],[\"了\",{\"1\":{\"6\":1,\"8\":1,\"10\":1,\"154\":1,\"382\":2,\"385\":1,\"471\":1,\"851\":1,\"1077\":2,\"1240\":1,\"1781\":1,\"1783\":1,\"1791\":1,\"1817\":1,\"1819\":1,\"1844\":1}}],[\"就感到潮湿和闷热\",{\"1\":{\"1849\":1}}],[\"就感觉到空气的稀薄\",{\"1\":{\"1834\":1}}],[\"就前往拉萨火车站了\",{\"1\":{\"1847\":1}}],[\"就和同车的四个女生一起去看星空\",{\"1\":{\"1844\":1}}],[\"就上了藏al5591汪师傅的车\",{\"1\":{\"1841\":1}}],[\"就到西宁火车站准备硬座进藏了\",{\"1\":{\"1833\":1}}],[\"就已经无限向往旷野了\",{\"1\":{\"1825\":1}}],[\"就已经成为一项成熟的技术\",{\"1\":{\"376\":1}}],[\"就连网易云的年终关键字都是\",{\"1\":{\"1816\":1}}],[\"就得自己买硬盘\",{\"1\":{\"1809\":1}}],[\"就填刚刚生成的\",{\"1\":{\"1791\":1}}],[\"就看不到值了\",{\"1\":{\"1791\":1}}],[\"就这样用了很久\",{\"1\":{\"1790\":1}}],[\"就为了看7\",{\"1\":{\"1772\":1}}],[\"就要考虑查询流量的问题\",{\"1\":{\"1737\":1}}],[\"就像汪师傅的音乐所唱\",{\"1\":{\"1849\":1}}],[\"就像自己的影视库一样\",{\"1\":{\"1809\":1}}],[\"就像在黎巴嫩\",{\"1\":{\"1767\":1}}],[\"就像航空公司收取一定的费用\",{\"1\":{\"1737\":1}}],[\"就像图中的\",{\"1\":{\"1074\":1}}],[\"就先要对数组进行排序让相同的元素挨在一起\",{\"1\":{\"1673\":1}}],[\"就先拿哪个成分对象\",{\"1\":{\"348\":1}}],[\"就使用实例化后的对象去创建一个对象工厂\",{\"1\":{\"1599\":1}}],[\"就执行\",{\"1\":{\"1514\":1}}],[\"就用新值替换它\",{\"1\":{\"1513\":1}}],[\"就用它来回收\",{\"1\":{\"640\":1}}],[\"就扩容数组\",{\"1\":{\"1497\":1}}],[\"就有相对应的反应\",{\"1\":{\"1488\":1}}],[\"就相当于进入上一次调用的状态\",{\"1\":{\"1453\":1}}],[\"就绪挂起状态\",{\"1\":{\"1450\":1}}],[\"就绪状态\",{\"1\":{\"1450\":1}}],[\"就升级到\",{\"1\":{\"1448\":1}}],[\"就被路上的好心大哥提醒大雪封山\",{\"1\":{\"1825\":1}}],[\"就被拉去开早会了\",{\"1\":{\"1773\":1}}],[\"就被称为\",{\"1\":{\"1450\":1}}],[\"就被污染了\",{\"1\":{\"1448\":1}}],[\"就被视为慢查询\",{\"1\":{\"612\":1}}],[\"就无法读出一个有效的用户消息\",{\"1\":{\"1417\":1}}],[\"就发送0窗口通告\",{\"1\":{\"1412\":1}}],[\"就知道数据没有丢\",{\"1\":{\"1411\":1}}],[\"就进入了\",{\"1\":{\"1410\":1}}],[\"就保持tcp连接状态\",{\"1\":{\"1398\":1}}],[\"就从beanfactory中取beandefinition实例化\",{\"1\":{\"1378\":1}}],[\"就容易多了\",{\"1\":{\"1344\":1}}],[\"就指向了主干上最新的提交记录\",{\"1\":{\"1332\":1}}],[\"就一系列值达成共识\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"就越应该对其代码行为保持怀疑\",{\"1\":{\"1247\":1}}],[\"就尽量用\",{\"1\":{\"1244\":1}}],[\"就很有可能引发业务异常\",{\"1\":{\"1238\":1}}],[\"就好比java中的bytearrayoutputstream实现\",{\"1\":{\"1130\":1}}],[\"就跳出\",{\"1\":{\"1114\":1}}],[\"就允许任务延期执行或定期执行\",{\"1\":{\"1104\":1}}],[\"就需要考虑功能的划分和更加细致的配置\",{\"1\":{\"1610\":1}}],[\"就需要在异常发生时\",{\"1\":{\"1034\":1}}],[\"就需要定义两个\",{\"1\":{\"68\":1}}],[\"就能够通过自动化测试用例的运行\",{\"1\":{\"1705\":1}}],[\"就能通过sql注入随心所欲的攻击你的数据库了\",{\"1\":{\"1539\":1}}],[\"就能减少\",{\"1\":{\"1400\":1}}],[\"就能自动加载代理对象\",{\"1\":{\"1010\":1}}],[\"就能回到\",{\"1\":{\"773\":1}}],[\"就没用了\",{\"1\":{\"829\":1}}],[\"就算是堆内存\",{\"1\":{\"826\":1}}],[\"就取消\",{\"1\":{\"789\":1}}],[\"就开启一个\",{\"1\":{\"542\":1}}],[\"就完成了\",{\"1\":{\"541\":1}}],[\"就不会级联影响到\",{\"1\":{\"1636\":1}}],[\"就不移动到young区域头部\",{\"1\":{\"732\":1}}],[\"就不学了吧\",{\"1\":{\"510\":1}}],[\"就不需要再做加一的操作了\",{\"1\":{\"476\":1}}],[\"就丢失了该消息\",{\"1\":{\"460\":1}}],[\"就由各个实现类去完成了\",{\"1\":{\"383\":1}}],[\"就出现了内存分页\",{\"1\":{\"1443\":1}}],[\"就出现了\",{\"1\":{\"379\":1}}],[\"就将还存活的对象复制到另一块上面\",{\"1\":{\"169\":1}}],[\"就是在这个海拔5000多米的高原上\",{\"1\":{\"1843\":1}}],[\"就是诵经一次\",{\"1\":{\"1842\":1}}],[\"就是为了一睹夜晚的布达拉宫\",{\"1\":{\"1839\":1}}],[\"就是升级maven组件\",{\"1\":{\"1779\":1}}],[\"就是团队票\",{\"1\":{\"1737\":1}}],[\"就是负责国际机票运价搜索的\",{\"1\":{\"1732\":1}}],[\"就是个中间商\",{\"1\":{\"1728\":1}}],[\"就是个已连接的通道\",{\"1\":{\"820\":1}}],[\"就是把一个大项目分为多个相互联系\",{\"1\":{\"1641\":1}}],[\"就是基于动态代理\",{\"1\":{\"1601\":1}}],[\"就是通过把sql命令插入到web表单递交或输入域名或页面请求的查询字符串\",{\"1\":{\"1539\":1}}],[\"就是预读失效\",{\"1\":{\"1448\":1}}],[\"就是很麻烦\",{\"1\":{\"1339\":1}}],[\"就是一款可以将\",{\"1\":{\"1223\":1}}],[\"就是一个线程集合\",{\"1\":{\"1099\":1}}],[\"就是利用多台机器协同工作\",{\"1\":{\"1221\":1}}],[\"就是我们一直说的服务器\",{\"1\":{\"1204\":1}}],[\"就是数据快照\",{\"1\":{\"1170\":1}}],[\"就是对应的事务属性\",{\"1\":{\"1059\":1}}],[\"就是切入点和通知的结合\",{\"1\":{\"1059\":1}}],[\"就是支持动态伸缩扩容的\",{\"1\":{\"788\":1}}],[\"就是\",{\"1\":{\"483\":1,\"823\":1,\"1059\":1,\"1215\":1}}],[\"就是移动指针\",{\"1\":{\"214\":1}}],[\"就是阻塞\",{\"1\":{\"134\":1}}],[\"就是简单的校验\",{\"1\":{\"9\":1}}],[\"就可以协商传输的媒体类型\",{\"1\":{\"1861\":1}}],[\"就可以快速构建出一个独立的\",{\"1\":{\"1609\":1}}],[\"就可以直接进入\",{\"1\":{\"1515\":1}}],[\"就可以认为在这个序号以前的数据都已经被正常接收\",{\"1\":{\"1418\":1}}],[\"就可以进入下一阶段了\",{\"1\":{\"1236\":1}}],[\"就可以对这个具体的事务进行回滚\",{\"1\":{\"1038\":1}}],[\"就可以得到一个\",{\"1\":{\"1038\":1}}],[\"就可以自动发现\",{\"1\":{\"940\":1}}],[\"就可以原地更新\",{\"1\":{\"748\":1}}],[\"就可以开始消费消息了\",{\"1\":{\"483\":1}}],[\"就可以计算出每条消息在partition中的绝对偏移量\",{\"1\":{\"476\":1}}],[\"就可以访问其它相互信任的应用系统\",{\"1\":{\"27\":1,\"1643\":1}}],[\"就可以为\",{\"1\":{\"25\":1}}],[\"就又要被\",{\"1\":{\"6\":1}}],[\"就会自动触发构建流程推送到\",{\"1\":{\"1791\":1}}],[\"就会引发竞争\",{\"1\":{\"1515\":1}}],[\"就会被\",{\"1\":{\"1514\":1}}],[\"就会将数组扩容至当前的2倍\",{\"1\":{\"1494\":1}}],[\"就会触发\",{\"1\":{\"1524\":1}}],[\"就会触发扩容机制\",{\"1\":{\"1493\":1}}],[\"就会触发其他所有节点的监听事件\",{\"1\":{\"1186\":1}}],[\"就会开始直接回收\",{\"1\":{\"1446\":1}}],[\"就会发送三次前一个包的\",{\"1\":{\"1413\":1}}],[\"就会重发该数据\",{\"1\":{\"1411\":1}}],[\"就会再次创建若干\",{\"1\":{\"1332\":1}}],[\"就会对业务产生很大的影响\",{\"1\":{\"1234\":1}}],[\"就会告知客户端\",{\"1\":{\"1205\":1}}],[\"就会进行快速重传\",{\"1\":{\"1413\":1}}],[\"就会进行事务注解的解析\",{\"1\":{\"1059\":1}}],[\"就会进入拥塞避免算法\",{\"1\":{\"1413\":1}}],[\"就会进入\",{\"1\":{\"1091\":1}}],[\"就会根据某种策略通过\",{\"1\":{\"1074\":1}}],[\"就会产生一个文件事件\",{\"1\":{\"919\":1,\"1572\":1}}],[\"就会造成半包\",{\"1\":{\"839\":1}}],[\"就会绑定负责到底\",{\"1\":{\"814\":1}}],[\"就会执行服务端\",{\"1\":{\"813\":1}}],[\"就会大大降低缓存命中率\",{\"1\":{\"732\":1}}],[\"就会裂变\",{\"1\":{\"698\":1}}],[\"就会退出\",{\"1\":{\"634\":1}}],[\"就会导致需要插入的位置为一页中间的位置\",{\"1\":{\"615\":1}}],[\"就会走表锁\",{\"1\":{\"558\":1}}],[\"就会锁住这条主键索引\",{\"1\":{\"554\":1}}],[\"就会从\",{\"1\":{\"422\":1}}],[\"就会把链表转化为红黑树\",{\"1\":{\"1494\":1}}],[\"就会把它们判定为热点代码\",{\"1\":{\"266\":1}}],[\"就会把填充了所有所需信息的符号表交由classwriter\",{\"1\":{\"264\":1}}],[\"就会出现concurrent\",{\"1\":{\"176\":1}}],[\"就会\",{\"1\":{\"6\":1}}],[\"就会通过\",{\"1\":{\"5\":1}}],[\"就会间接调用\",{\"1\":{\"5\":1}}],[\"指舱位代码\",{\"1\":{\"1739\":1}}],[\"指舱位等级\",{\"1\":{\"1739\":1}}],[\"指航班频率\",{\"1\":{\"1730\":1}}],[\"指接收到客户端执行请求后\",{\"1\":{\"1623\":1}}],[\"指两个或多个bean互相持有对方\",{\"1\":{\"1599\":1}}],[\"指将所有的操作命令\",{\"1\":{\"1577\":1}}],[\"指对整个堆内存进行垃圾回收\",{\"1\":{\"1524\":1}}],[\"指被提交但未执行的任务队列\",{\"1\":{\"1511\":1}}],[\"指标\",{\"1\":{\"1490\":1}}],[\"指应用系统中存在无法回收的内存或使用的内存过多\",{\"1\":{\"1445\":1}}],[\"指数位决定了浮点数的表示范围\",{\"1\":{\"1438\":1}}],[\"指数\",{\"1\":{\"1438\":1}}],[\"指下一次\",{\"1\":{\"1418\":1}}],[\"指在刚刚加入网络的连接中\",{\"1\":{\"1413\":1}}],[\"指在insert\",{\"1\":{\"636\":1}}],[\"指示版本\",{\"1\":{\"1336\":1}}],[\"指vs后端挂载的真实服务器\",{\"1\":{\"1301\":1}}],[\"指\",{\"1\":{\"1284\":1}}],[\"指缓存与数据库的一致性问题\",{\"1\":{\"1265\":1,\"1583\":1}}],[\"指的是在应用中的缓存组件\",{\"1\":{\"1253\":1}}],[\"指的是事务与事务之间的交互策略\",{\"1\":{\"1041\":1}}],[\"指代\",{\"1\":{\"1135\":1}}],[\"指引客户端自动转向到正确的节点\",{\"1\":{\"947\":1}}],[\"指维护一个数据的多个版本\",{\"1\":{\"752\":1}}],[\"指针消耗了块的存储空间\",{\"1\":{\"1477\":1}}],[\"指针相连\",{\"1\":{\"1476\":1}}],[\"指针当前的引用\",{\"1\":{\"1349\":1}}],[\"指针指向另一个分支指向的提交\",{\"1\":{\"1344\":1}}],[\"指针直接后移\",{\"1\":{\"1335\":1}}],[\"指针分别指向\",{\"1\":{\"970\":1}}],[\"指针字段可以设置特殊类型函数\",{\"1\":{\"880\":1}}],[\"指针\",{\"1\":{\"831\":1,\"1074\":1,\"1338\":1,\"1474\":1}}],[\"指针也跟着减少\",{\"1\":{\"698\":1}}],[\"指针存储所有数据字节的其它页\",{\"1\":{\"687\":1}}],[\"指针串成了一个链表\",{\"1\":{\"184\":1}}],[\"指可以从中打开流的资源\",{\"1\":{\"82\":1}}],[\"指定fragment时长为2s\",{\"1\":{\"1869\":1}}],[\"指定邮件服务器的域名和优先级\",{\"1\":{\"1792\":1}}],[\"指定push的分支\",{\"1\":{\"1791\":1}}],[\"指定push的仓库\",{\"1\":{\"1791\":1}}],[\"指定检查次数\",{\"1\":{\"1698\":1}}],[\"指定时区\",{\"1\":{\"1697\":1}}],[\"指定时间ms内是否连通该ip\",{\"1\":{\"339\":1}}],[\"指定行数\",{\"1\":{\"1686\":1}}],[\"指定目录查找文件\",{\"1\":{\"1683\":1}}],[\"指定类对象\",{\"1\":{\"1515\":1}}],[\"指定对象\",{\"1\":{\"1515\":1}}],[\"指定当任务数量超过系统实际承载能力时的策略\",{\"1\":{\"1511\":1}}],[\"指定允许的最大线程数量\",{\"1\":{\"1511\":1}}],[\"指定常驻线程数量\",{\"1\":{\"1511\":1}}],[\"指定读\",{\"1\":{\"1432\":1}}],[\"指定内存地址\",{\"1\":{\"1432\":1}}],[\"指定内存地址设值\",{\"1\":{\"1136\":1}}],[\"指定远程版本库名称\",{\"1\":{\"1351\":1}}],[\"指定父提交\",{\"1\":{\"1350\":1}}],[\"指定打包区间\",{\"1\":{\"1347\":1}}],[\"指定应用某个贮藏记录\",{\"1\":{\"1343\":1}}],[\"指定提交打标签\",{\"1\":{\"1329\":1}}],[\"指定是否缓存空数据\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"指定缓存对应的\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"指定缓存名\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"指定需要复制的数据库\",{\"1\":{\"1154\":1}}],[\"指定不需要复制的数据库\",{\"1\":{\"1154\":1}}],[\"指定超时时间的等待状态\",{\"1\":{\"1089\":1}}],[\"指定域作为排序结果返回给客户端\",{\"1\":{\"970\":1}}],[\"指定了服务器端监听队列\",{\"1\":{\"856\":1}}],[\"指定使用堆内存\",{\"1\":{\"826\":1}}],[\"指定索引\",{\"0\":{\"705\":1,\"773\":1}}],[\"指定索引名\",{\"1\":{\"42\":1}}],[\"指定位置间隔内的所有日志\",{\"1\":{\"675\":1}}],[\"指定日期间隔内的所有日志\",{\"1\":{\"675\":1}}],[\"指定连接端口\",{\"1\":{\"675\":3}}],[\"指定服务器ip或域名\",{\"1\":{\"675\":3}}],[\"指定密码\",{\"1\":{\"675\":3}}],[\"指定用户\",{\"1\":{\"1692\":1}}],[\"指定用户组\",{\"1\":{\"1692\":1}}],[\"指定用户名\",{\"1\":{\"675\":3}}],[\"指定用哪个线程工厂创建线程\",{\"1\":{\"332\":1}}],[\"指定端口\",{\"1\":{\"672\":1}}],[\"指定端口号并启动jhat服务器\",{\"1\":{\"233\":1}}],[\"指定主机\",{\"1\":{\"672\":1}}],[\"指定主键字段\",{\"1\":{\"530\":1}}],[\"指定二进制位进行与运算\",{\"1\":{\"656\":1}}],[\"指定数据分布到不同数据节点上\",{\"1\":{\"656\":1}}],[\"指定数据库名称\",{\"1\":{\"643\":1,\"675\":1}}],[\"指定状态码\",{\"1\":{\"634\":1}}],[\"指定sql语句执行时间超过某个时间\",{\"1\":{\"612\":1}}],[\"指定的别名\",{\"1\":{\"1567\":1}}],[\"指定的路径文件中\",{\"1\":{\"1170\":1}}],[\"指定的字段顺序需要与值的顺序是一一对应的\",{\"1\":{\"578\":1}}],[\"指定的目录中\",{\"1\":{\"254\":1}}],[\"指定字段\",{\"1\":{\"578\":1}}],[\"指定配置文件\",{\"1\":{\"569\":1}}],[\"指定外部配置文件\",{\"1\":{\"569\":1}}],[\"指定默认存储引擎\",{\"1\":{\"569\":1}}],[\"指定别名\",{\"1\":{\"532\":1}}],[\"指定环境\",{\"1\":{\"524\":1}}],[\"指定包查找类型处理器\",{\"1\":{\"521\":1}}],[\"指定处理的\",{\"1\":{\"521\":1}}],[\"指定消费方案\",{\"1\":{\"483\":1}}],[\"指定任务队列\",{\"1\":{\"332\":1}}],[\"指定存活时间的单位\",{\"1\":{\"332\":1}}],[\"指定临时线程的最大存活时间\",{\"1\":{\"332\":1}}],[\"指定线程忙\",{\"1\":{\"332\":1}}],[\"指定线程池可支持的最大线程数\",{\"1\":{\"332\":1}}],[\"指定线程池的线程数量\",{\"1\":{\"332\":1}}],[\"指定线程的最大栈空间\",{\"1\":{\"203\":1}}],[\"指定jhat工具监听的端口号\",{\"1\":{\"233\":1}}],[\"指定获取统计信息的次数\",{\"1\":{\"230\":1}}],[\"指定获取统计信息的时间间隔\",{\"1\":{\"230\":1}}],[\"指定要监视的java虚拟机的进程id\",{\"1\":{\"230\":1}}],[\"指定要获取的统计信息类型\",{\"1\":{\"230\":1}}],[\"指定分辨率视频和音频\",{\"1\":{\"1877\":1}}],[\"指定分隔符\",{\"0\":{\"843\":1},\"1\":{\"788\":1}}],[\"指定分区器\",{\"1\":{\"453\":1}}],[\"指定分区\",{\"1\":{\"120\":1}}],[\"指定分区可选\",{\"1\":{\"120\":1}}],[\"指定分桶列\",{\"1\":{\"119\":1,\"120\":1}}],[\"指定列分隔符\",{\"1\":{\"113\":1}}],[\"指定最大容量\",{\"1\":{\"74\":1}}],[\"指定\",{\"0\":{\"493\":1},\"1\":{\"59\":2,\"79\":1,\"452\":1,\"1269\":1,\"1351\":1,\"1613\":1}}],[\"指令保证对\",{\"1\":{\"1506\":1}}],[\"指令缓存\",{\"1\":{\"1434\":1}}],[\"指令周期的四级流水线\",{\"1\":{\"1433\":1}}],[\"指令寄存器\",{\"1\":{\"1432\":1}}],[\"指令具体实现优化的等等\",{\"1\":{\"1137\":1}}],[\"指令cmpxchg\",{\"1\":{\"1137\":1}}],[\"指令类型\",{\"1\":{\"848\":1}}],[\"指令对寄存器中的操作数进行计算\",{\"1\":{\"242\":1}}],[\"指令通常包括将操作数压入栈\",{\"1\":{\"242\":1}}],[\"指令并行优化的影响\",{\"1\":{\"144\":1}}],[\"指令并行重排\",{\"1\":{\"143\":1}}],[\"指令重排序\",{\"1\":{\"144\":1,\"274\":1}}],[\"指令重排可以保证串行语义一致\",{\"1\":{\"143\":1}}],[\"指令优化等\",{\"1\":{\"142\":1}}],[\"指令\",{\"0\":{\"1433\":1},\"1\":{\"6\":1,\"148\":1,\"675\":1,\"1513\":2}}],[\"指向类元数据的指针\",{\"1\":{\"1521\":2}}],[\"指向目前所在的分支\",{\"1\":{\"1351\":1}}],[\"指向其它引用\",{\"1\":{\"1351\":1}}],[\"指向的文件\",{\"1\":{\"1696\":1}}],[\"指向的引用\",{\"1\":{\"1351\":1}}],[\"指向的快照来更新暂存区\",{\"1\":{\"1344\":1}}],[\"指向的快照来更新暂存区内的数据\",{\"1\":{\"1344\":1}}],[\"指向的\",{\"1\":{\"1335\":2}}],[\"指向的列表项\",{\"1\":{\"970\":1}}],[\"指向当前所在的本地分支\",{\"1\":{\"1332\":1}}],[\"指向该\",{\"1\":{\"1076\":1}}],[\"指向该行的\",{\"1\":{\"684\":1,\"1557\":1}}],[\"指向对象对应的\",{\"1\":{\"1074\":1}}],[\"指向对象的底层实现数据结构\",{\"1\":{\"895\":1}}],[\"指向跳表表尾结点\",{\"1\":{\"886\":1}}],[\"指向跳表表头结点\",{\"1\":{\"886\":1}}],[\"指向一个sds\",{\"1\":{\"886\":1}}],[\"指向一的一方的主键\",{\"1\":{\"601\":1}}],[\"指向前驱结点\",{\"1\":{\"886\":1}}],[\"指向null的前进指针跨度为0\",{\"1\":{\"886\":1}}],[\"指向下一个结点\",{\"1\":{\"886\":1}}],[\"指向下一个读取的索引\",{\"1\":{\"768\":1}}],[\"指向同索引的下一个结点\",{\"1\":{\"882\":1}}],[\"指向关于生成该锁事务的相关信息\",{\"1\":{\"564\":1}}],[\"指向了副本日志中下一条消息的偏移量\",{\"1\":{\"471\":1}}],[\"指向运行时常量池的方法引用\",{\"1\":{\"205\":1}}],[\"指向\",{\"1\":{\"6\":2,\"697\":1,\"1479\":1}}],[\"尝试\",{\"1\":{\"1497\":1}}],[\"尝试执行阶段\",{\"1\":{\"1284\":1}}],[\"尝试放入队列\",{\"1\":{\"1109\":1}}],[\"尝试进行aof或rdb持久化操作\",{\"1\":{\"920\":1}}],[\"尝试乐观读锁\",{\"1\":{\"158\":1}}],[\"尝试加锁\",{\"1\":{\"156\":1}}],[\"尝试直接加锁\",{\"1\":{\"9\":1}}],[\"尝试多次自旋\",{\"1\":{\"6\":1}}],[\"尝试获取资源\",{\"1\":{\"6\":1}}],[\"被罗马人钉死在十字架上\",{\"1\":{\"1759\":1}}],[\"被调用至多3次\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"被调用至少1次\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"被注入的类要被spring容器管理\",{\"1\":{\"1608\":1}}],[\"被gc\",{\"1\":{\"1527\":1}}],[\"被强占则放入原队列末尾\",{\"1\":{\"1470\":1}}],[\"被替换时需要写回内存\",{\"1\":{\"1435\":1}}],[\"被替换\",{\"1\":{\"1435\":1}}],[\"被访问完后\",{\"1\":{\"1259\":1}}],[\"被广泛应用于企业和科研机构\",{\"1\":{\"1214\":1}}],[\"被当作一个远程过程调用\",{\"1\":{\"1124\":1}}],[\"被标记为\",{\"1\":{\"851\":1}}],[\"被销毁\",{\"1\":{\"850\":1}}],[\"被引用了多少次\",{\"1\":{\"829\":1}}],[\"被连成一串\",{\"1\":{\"823\":1}}],[\"被缓存状态\",{\"1\":{\"749\":1}}],[\"被驱动表根据主键\",{\"1\":{\"728\":1}}],[\"被驱动表可能被多次访问\",{\"1\":{\"714\":1}}],[\"被驱动表可能被访问多次\",{\"1\":{\"713\":1}}],[\"被使用过\",{\"1\":{\"638\":1}}],[\"被使用的page\",{\"1\":{\"638\":1}}],[\"被加锁的记录在同一个页面中\",{\"1\":{\"564\":1}}],[\"被移出\",{\"1\":{\"470\":1}}],[\"被leader应答的消息都至少有min\",{\"1\":{\"460\":1}}],[\"被用来当做传感器和致动器的通信协议\",{\"1\":{\"407\":1}}],[\"被发布者\",{\"1\":{\"406\":1}}],[\"被适配者\",{\"1\":{\"374\":1}}],[\"被多次更新的页面不会重复插入flush链表\",{\"1\":{\"740\":1}}],[\"被多次执行的循环体\",{\"1\":{\"268\":1}}],[\"被多次调用的方法\",{\"1\":{\"268\":1}}],[\"被垃圾回收的时机\",{\"1\":{\"183\":1}}],[\"被\",{\"1\":{\"6\":1,\"420\":1,\"1534\":4,\"1599\":1}}],[\"后记\",{\"0\":{\"1849\":1}}],[\"后依附于中原王朝\",{\"1\":{\"1837\":1}}],[\"后半句保留偶数组的\",{\"1\":{\"1666\":1}}],[\"后1s突然有1000个请求\",{\"1\":{\"1637\":1}}],[\"后才开启\",{\"1\":{\"1557\":1}}],[\"后才能发送剩余部分\",{\"1\":{\"839\":1}}],[\"后才能继续发送\",{\"1\":{\"462\":1}}],[\"后就处于\",{\"1\":{\"1556\":1}}],[\"后就可以执行输入\",{\"1\":{\"1226\":1}}],[\"后就可以重新加入\",{\"1\":{\"471\":1}}],[\"后使用元空间实现方法区\",{\"1\":{\"1520\":1}}],[\"后遵循泊松分布的结果\",{\"1\":{\"1494\":1}}],[\"后检查和处理中断信号\",{\"1\":{\"1471\":1}}],[\"后拿左边筷子\",{\"1\":{\"1467\":1}}],[\"后拿右边筷子\",{\"1\":{\"1467\":1}}],[\"后两者基于\",{\"1\":{\"1446\":1}}],[\"后直接归还\",{\"1\":{\"1445\":1}}],[\"后归零\",{\"1\":{\"1418\":1}}],[\"后释放\",{\"1\":{\"1395\":1}}],[\"后放入map\",{\"1\":{\"1378\":1}}],[\"后根据订单状态和工作单状态来判断是否进行库存解锁\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"后进入死信队列\",{\"1\":{\"1289\":1,\"1371\":1}}],[\"后进入\",{\"1\":{\"1116\":2}}],[\"后进而拿到继承自\",{\"1\":{\"83\":1}}],[\"后开始下一个\",{\"1\":{\"1110\":1}}],[\"后开启一个子事务\",{\"1\":{\"1041\":1}}],[\"后线程就进入了\",{\"1\":{\"1090\":1}}],[\"后三位为\",{\"1\":{\"1077\":2}}],[\"后置增强\",{\"1\":{\"1021\":1,\"1022\":1}}],[\"后置处理器等\",{\"1\":{\"1599\":1}}],[\"后置处理器\",{\"1\":{\"1011\":1,\"1379\":1}}],[\"后创建实例对象\",{\"1\":{\"1006\":1}}],[\"后退节点\",{\"1\":{\"886\":1}}],[\"后执行\",{\"1\":{\"873\":1}}],[\"后出站\",{\"1\":{\"823\":1}}],[\"后提供了\",{\"1\":{\"801\":1}}],[\"后四字节日志序列位置lsn\",{\"1\":{\"691\":1}}],[\"后者可以忽略\",{\"1\":{\"1236\":1}}],[\"后者在磁盘中\",{\"1\":{\"639\":1}}],[\"后者相比前者封装更高级\",{\"1\":{\"38\":1}}],[\"后台下载\",{\"1\":{\"1698\":1}}],[\"后台内存回收\",{\"1\":{\"1446\":1}}],[\"后台线程执行真正的删除\",{\"1\":{\"747\":1}}],[\"后台线程自动刷新\",{\"1\":{\"739\":1}}],[\"后台线程\",{\"0\":{\"640\":1}}],[\"后台线程以一定的速率刷新到磁盘\",{\"1\":{\"637\":1}}],[\"后台维护一个优先级列表\",{\"1\":{\"177\":1,\"1525\":1}}],[\"后消费\",{\"1\":{\"499\":1}}],[\"后挂了\",{\"1\":{\"461\":1}}],[\"后文如无特殊说明\",{\"1\":{\"460\":1}}],[\"后默认取列表里第一个\",{\"1\":{\"383\":1}}],[\"后来人多了就开始慢慢用甜奶粉冲兑了\",{\"1\":{\"1837\":1}}],[\"后来经司机汪师傅口中得知\",{\"1\":{\"1834\":1}}],[\"后来发现长沙\",{\"1\":{\"1833\":1}}],[\"后来沉迷过一阵子的跑步\",{\"1\":{\"1796\":1}}],[\"后来由于东西罗马帝国的分裂\",{\"1\":{\"1759\":1}}],[\"后来又推出了以互联网接口形式的\",{\"1\":{\"1728\":1}}],[\"后来随着ota平台的兴起\",{\"1\":{\"1726\":1}}],[\"后来\",{\"1\":{\"378\":1}}],[\"后被捐赠给\",{\"1\":{\"376\":1}}],[\"后期编译器性能的好坏\",{\"1\":{\"265\":1}}],[\"后期编译\",{\"0\":{\"265\":1}}],[\"后面发现也正因此我们结识了更多的友谊\",{\"1\":{\"1841\":1}}],[\"后面车厢的人不多\",{\"1\":{\"1833\":1}}],[\"后面9折\",{\"1\":{\"1739\":1}}],[\"后面\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"后面哪怕只有一条语句\",{\"1\":{\"1244\":1}}],[\"后面再说吧\",{\"1\":{\"1240\":1}}],[\"后面配置从库时要用到\",{\"1\":{\"1154\":1}}],[\"后面是log\",{\"1\":{\"739\":1}}],[\"后面字段的排序就无法保证\",{\"1\":{\"702\":1}}],[\"后面不加索引类型参数\",{\"1\":{\"701\":1}}],[\"后面每次调用在这个整数上自增\",{\"1\":{\"452\":1}}],[\"后面跟着属性内容\",{\"1\":{\"240\":1}}],[\"后面的字节数据才能从内核缓冲区中取出\",{\"1\":{\"1404\":1}}],[\"后面的\",{\"1\":{\"184\":1}}],[\"后面的执行链需要使用\",{\"1\":{\"25\":1}}],[\"后2个字节表示次版本号\",{\"1\":{\"240\":1}}],[\"后用\",{\"1\":{\"211\":1,\"1403\":1}}],[\"后继节点\",{\"1\":{\"1516\":1}}],[\"后继\",{\"1\":{\"188\":1}}],[\"后应手动调用\",{\"1\":{\"154\":1}}],[\"后会释放\",{\"1\":{\"139\":1}}],[\"后续不需要\",{\"1\":{\"1645\":1}}],[\"后续遇到相同的冲突\",{\"1\":{\"1347\":1}}],[\"后续只要把旧集群的老代码下掉即可\",{\"1\":{\"1240\":1}}],[\"后续只要校验\",{\"1\":{\"1077\":1}}],[\"后续新加入的节点自动成为\",{\"1\":{\"1202\":1}}],[\"后续执行会被中断\",{\"1\":{\"1110\":1}}],[\"后续做了很多优化措施\",{\"1\":{\"1075\":1}}],[\"后续这个\",{\"1\":{\"817\":1}}],[\"后续再次访问时\",{\"1\":{\"732\":1}}],[\"后续的操作都是对\",{\"1\":{\"1555\":1}}],[\"后续的请求可以直接从缓存中取数据\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"后续的新缓存在两个集群中的数据\",{\"1\":{\"1235\":1}}],[\"后续的流程就是基于上面介绍的\",{\"1\":{\"1055\":1}}],[\"后续的\",{\"1\":{\"550\":1}}],[\"后续还有计算分数等耗时比较久的操作\",{\"1\":{\"398\":1}}],[\"后续sql操作基于当前选择的库执行\",{\"1\":{\"110\":1}}],[\"后续创建\",{\"1\":{\"99\":1}}],[\"后续如果有更多线程竞争资源\",{\"1\":{\"4\":1}}],[\"后返回\",{\"1\":{\"99\":1,\"1116\":1}}],[\"后\",{\"1\":{\"27\":2,\"363\":1,\"544\":1,\"768\":1,\"794\":1,\"829\":1,\"850\":1,\"863\":1,\"873\":1,\"1114\":1,\"1290\":1,\"1372\":1,\"1414\":2,\"1426\":1,\"1524\":2,\"1556\":2,\"1557\":1,\"1643\":2}}],[\"后重试\",{\"1\":{\"6\":1}}],[\"将out里面的video文件夹和stream\",{\"1\":{\"1870\":1}}],[\"将视频编码为h\",{\"1\":{\"1868\":1}}],[\"将候选者形成配对\",{\"1\":{\"1860\":1}}],[\"将域名映射到\",{\"1\":{\"1792\":2}}],[\"将生成的文档\",{\"1\":{\"1791\":1}}],[\"将生成的代理类字节码输出到\",{\"1\":{\"1015\":1}}],[\"将年轻的基督教男孩从村中带走\",{\"1\":{\"1767\":1}}],[\"将指定用户加入指定用户组\",{\"1\":{\"1692\":1}}],[\"将volume\",{\"1\":{\"1634\":1}}],[\"将调用信息传输到服务端\",{\"1\":{\"1623\":1}}],[\"将函数的返回值直接写入http响应体\",{\"1\":{\"1608\":1}}],[\"将某一时刻的内存数据\",{\"1\":{\"1576\":1}}],[\"将某个分支变基到\",{\"1\":{\"1337\":1}}],[\"将目标对象注入进代理类\",{\"1\":{\"1532\":1}}],[\"将常量池内的符号引用替换为直接引用\",{\"1\":{\"1527\":1}}],[\"将常量池内的符号引用替换为直接引用的过程\",{\"1\":{\"252\":1}}],[\"将存活对象复制到另一块上面\",{\"1\":{\"1523\":1}}],[\"将内存划为大小相等的两块\",{\"1\":{\"1523\":1}}],[\"将内存数据保存到磁盘\",{\"1\":{\"910\":1}}],[\"将每条请求共享资源的线程封装成一个\",{\"1\":{\"1516\":1}}],[\"将每个\",{\"1\":{\"475\":1}}],[\"将字符串\",{\"1\":{\"1567\":1}}],[\"将字符串全部转为大写\",{\"1\":{\"593\":1}}],[\"将字符串全部转为小写\",{\"1\":{\"593\":1}}],[\"将字符流转换为字节流不同区装饰器侧重于动态增强原始类的功能\",{\"1\":{\"1503\":1}}],[\"将字节流转化为字符流\",{\"1\":{\"1503\":1}}],[\"将事件通过\",{\"1\":{\"1488\":1}}],[\"将需要监视的\",{\"1\":{\"1487\":1}}],[\"将已连接的\",{\"1\":{\"1487\":1}}],[\"将已收到的数据信息发给\",{\"1\":{\"1411\":1}}],[\"将所有元素复制到新数组中完成扩容\",{\"1\":{\"1493\":1}}],[\"将所有控制寄存器映射到内存空间中\",{\"1\":{\"1481\":1}}],[\"将所有数据保存在内存中\",{\"1\":{\"682\":1}}],[\"将文件从宿主机拷贝到容器指定位置\",{\"1\":{\"1634\":1}}],[\"将文件描述符集合拷贝到内核里\",{\"1\":{\"1487\":1}}],[\"将文件脏数据刷新至磁盘\",{\"1\":{\"1479\":1}}],[\"将文件的脏数据和脏元数据全部刷新至磁盘\",{\"1\":{\"1479\":1}}],[\"将文件读取到内存空间实际上都是读取到\",{\"1\":{\"1479\":1}}],[\"将稀缺资源设置较大的编号\",{\"1\":{\"1466\":1}}],[\"将进程对应的进程控制块\",{\"1\":{\"1450\":1}}],[\"将不再使用的内存回收\",{\"1\":{\"1447\":1}}],[\"将不同进程的虚拟地址和内存的物理地址映射起来\",{\"1\":{\"1443\":1}}],[\"将不同类型的信息\",{\"1\":{\"53\":1}}],[\"将造成卡顿\",{\"1\":{\"1443\":1}}],[\"将中断处理程序分成了两个阶段\",{\"1\":{\"1437\":1}}],[\"将延迟一段时间随数据一块发送\",{\"1\":{\"1410\":1}}],[\"将服务器公钥放在\",{\"1\":{\"1401\":1}}],[\"将待发送数据拷贝到\",{\"1\":{\"1395\":1}}],[\"将接收缓冲区数据拷贝到应用层缓冲区\",{\"1\":{\"1395\":1}}],[\"将哈希值相同的元素构成一个同义词的单链表\",{\"1\":{\"1389\":1}}],[\"将暂存区内容写入一个树对象\",{\"1\":{\"1350\":1}}],[\"将没有输出\",{\"1\":{\"1344\":1}}],[\"将当前分支指针移动到三个提交之前的父提交\",{\"1\":{\"1344\":1}}],[\"将当前分支的\",{\"1\":{\"1324\":1}}],[\"将未完成的修改保存到一个栈上\",{\"1\":{\"1343\":1}}],[\"将针对两个分支的末端提交和它们的公共祖先执行三方合并\",{\"1\":{\"1336\":1}}],[\"将冒号前面的空值推送到远程标签名\",{\"1\":{\"1329\":1}}],[\"将本地的\",{\"1\":{\"1328\":1,\"1338\":2}}],[\"将快照永久性存储到\",{\"1\":{\"1310\":1}}],[\"将下次想要提交的修改选择性添加到暂存区\",{\"1\":{\"1310\":1}}],[\"将请求转发到内部网络中的目标服务器\",{\"1\":{\"1296\":1,\"1297\":1}}],[\"将扣减的优惠券事件放入消息队列中\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"将为用户提供了\",{\"1\":{\"1287\":1}}],[\"将为这个\",{\"1\":{\"1060\":1}}],[\"将开始一次选举\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"将方法的返回结果注入到缓存对象中\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"将方法内部出现的异常抛出给调用者\",{\"1\":{\"346\":1}}],[\"将缓存分活跃\",{\"1\":{\"1259\":1}}],[\"将表拆分到固定数量的不同文件中进行存储\",{\"1\":{\"1228\":1}}],[\"将任务划分为若干步骤分配给每台机器\",{\"1\":{\"1221\":1}}],[\"将选票交给\",{\"1\":{\"1203\":1}}],[\"将注册的监听事件发送给服务端\",{\"1\":{\"1190\":1}}],[\"将结构化数据转化为字节流给ttransport进行传输\",{\"1\":{\"1126\":1}}],[\"将符合条件的扩展结点加入队列\",{\"1\":{\"1001\":1}}],[\"将位数组\",{\"1\":{\"975\":1}}],[\"将列表项\",{\"1\":{\"970\":1}}],[\"将各个\",{\"1\":{\"970\":1}}],[\"将各个数组项的\",{\"1\":{\"970\":1}}],[\"将原来对网络\",{\"1\":{\"1249\":1}}],[\"将原来需要实时计算的内容提前准备好\",{\"1\":{\"1249\":1}}],[\"将原来的\",{\"1\":{\"967\":1}}],[\"将原始\",{\"1\":{\"829\":1}}],[\"将执行fast\",{\"1\":{\"1335\":1}}],[\"将执行任务的流程串联起来\",{\"1\":{\"1111\":1}}],[\"将执行脚本函数所得的结果保存到客户端状态的输出缓冲区里面\",{\"1\":{\"965\":1}}],[\"将执行结果存入结果集\",{\"1\":{\"570\":1}}],[\"将两个数组作为全局变量传入\",{\"1\":{\"965\":1}}],[\"将完成修改的lua环境保存到redisserver\",{\"1\":{\"963\":1}}],[\"将拒绝执行并回复错误消息\",{\"1\":{\"960\":1}}],[\"将拒绝执行写命令\",{\"1\":{\"937\":1}}],[\"将msg发送给与频道匹配的模式关联的客户端\",{\"1\":{\"956\":1}}],[\"将msg发送给channel订阅者\",{\"1\":{\"956\":1}}],[\"将客户端给定的脚本保存到lua\",{\"1\":{\"965\":1}}],[\"将客户端添加到频道对应的订阅者链表末尾\",{\"1\":{\"954\":1}}],[\"将客户端代码拆解来看\",{\"1\":{\"820\":1}}],[\"将自己成为从节点这一消息发送给集群中的其它节点\",{\"1\":{\"948\":1}}],[\"将自动执行bgsave命令\",{\"1\":{\"912\":1}}],[\"将槽slot指派给目标节点\",{\"1\":{\"946\":1}}],[\"将被改写的文件保存为数据对象\",{\"1\":{\"1350\":1}}],[\"将被选中的键原子地从源节点迁移至目标节点\",{\"1\":{\"946\":1}}],[\"将被发送到死信交换机中\",{\"1\":{\"424\":1}}],[\"将节点b纳入a所在集群\",{\"1\":{\"945\":1}}],[\"将节点的具体信息上传至\",{\"1\":{\"466\":1}}],[\"将旧主服务器设置为新主服务器的从服务器\",{\"1\":{\"943\":1}}],[\"将旧记录进行delete\",{\"1\":{\"748\":1}}],[\"将在一段时间后再次选举\",{\"1\":{\"942\":1}}],[\"将向源sentinel返回一条命令回复\",{\"1\":{\"942\":1}}],[\"将从服务器的数据库状态更新至主服务器的最新状态\",{\"1\":{\"933\":1}}],[\"将回复发送给客户端\",{\"1\":{\"926\":1}}],[\"将再次等待处理文件事件\",{\"1\":{\"921\":1}}],[\"将新数据写入\",{\"1\":{\"1435\":1}}],[\"将新aof文件改名覆盖旧aof文件\",{\"1\":{\"917\":1}}],[\"将新元素添加到底层数组里面\",{\"1\":{\"889\":1}}],[\"将压缩列表类型的value转为字符串对象\",{\"1\":{\"913\":1}}],[\"将整个分支移动到另一个分支上\",{\"1\":{\"1633\":1}}],[\"将整个堆空间划分为多个小块\",{\"1\":{\"177\":1}}],[\"将整数转为字符串\",{\"1\":{\"913\":1}}],[\"将现有的所有元素都转换成与新元素相同的类型\",{\"1\":{\"889\":1}}],[\"将rehash键值对所需的计算工作均摊到对字典的每个添加\",{\"1\":{\"883\":1}}],[\"将ht\",{\"1\":{\"883\":2}}],[\"将启动\",{\"1\":{\"871\":1}}],[\"将返回一个拒绝连接的错误信息给\",{\"1\":{\"856\":1}}],[\"将无法建立连接\",{\"1\":{\"851\":1}}],[\"将无用的代码删除\",{\"1\":{\"274\":1}}],[\"将要执行的代码作为任务提交给下一个事件循环处理\",{\"1\":{\"818\":1}}],[\"将来\",{\"1\":{\"809\":1}}],[\"将虚引用加入引用队列\",{\"1\":{\"800\":1}}],[\"将堆外内存映射到\",{\"1\":{\"800\":1}}],[\"将此\",{\"1\":{\"787\":1}}],[\"将通道注册到选择器\",{\"1\":{\"785\":1}}],[\"将记录的delete\",{\"1\":{\"747\":1}}],[\"将checkpoint\",{\"1\":{\"741\":1}}],[\"将数据分散到多个节点上进行存储和管理\",{\"1\":{\"1590\":1}}],[\"将数据恢复到事务开始之前的状态\",{\"1\":{\"1554\":1}}],[\"将数据写入并刷出\",{\"1\":{\"819\":1}}],[\"将数据写入\",{\"1\":{\"819\":1}}],[\"将数据从内核缓冲区读入用户缓冲区\",{\"1\":{\"799\":1}}],[\"将数据读入内核缓冲区\",{\"1\":{\"799\":1,\"801\":1}}],[\"将数据读入\",{\"1\":{\"760\":1,\"873\":1}}],[\"将数据存储与索引放一块\",{\"1\":{\"699\":1}}],[\"将数据文件加载到表\",{\"1\":{\"120\":1}}],[\"将键值换算成新的hash值\",{\"1\":{\"698\":1}}],[\"将该请求从\",{\"1\":{\"856\":1}}],[\"将该组拆分为一个4条记录的组和一个5条记录的组\",{\"1\":{\"690\":1}}],[\"将该字段值置为null即可\",{\"1\":{\"580\":1}}],[\"将输出的文本格式日志输出到指定文件\",{\"1\":{\"675\":1}}],[\"将写操作分配到\",{\"1\":{\"658\":1}}],[\"将一些大型数据结构或缓存放在堆外内存中可以减轻\",{\"1\":{\"1136\":1}}],[\"将一部分普通redis服务器代码替换成sentinel专用代码\",{\"1\":{\"939\":1}}],[\"将一个域名指向另一个域名\",{\"1\":{\"1792\":1}}],[\"将一个\",{\"1\":{\"1588\":1}}],[\"将一个已有的树读入暂存区\",{\"1\":{\"1350\":1}}],[\"将一个文件通过\",{\"1\":{\"799\":1}}],[\"将一个表的数据拆分到多个表中\",{\"1\":{\"652\":1}}],[\"将一个库的数据拆分到多个库中\",{\"1\":{\"652\":1}}],[\"将一列数据作为一个整体\",{\"1\":{\"584\":1}}],[\"将改变反映它自己的数据\",{\"1\":{\"648\":1}}],[\"将行事件\",{\"1\":{\"643\":2}}],[\"将会存储到下一页中\",{\"1\":{\"615\":1}}],[\"将会逐步晋升到老年代\",{\"1\":{\"171\":1}}],[\"将emp表的nickname字段修改为username\",{\"1\":{\"576\":1}}],[\"将eden和survivor中存活对象一次性复制到另一块survivor\",{\"1\":{\"171\":1}}],[\"将查询处理和其它的系统任务以及数据的存储提取分离\",{\"1\":{\"570\":1}}],[\"将产生一条无法执行的\",{\"1\":{\"537\":1}}],[\"将成为新\",{\"1\":{\"470\":1}}],[\"将有两条同样的消息\",{\"1\":{\"461\":1}}],[\"将拉取数据组成\",{\"1\":{\"450\":1}}],[\"将移除确认的消息\",{\"1\":{\"422\":1}}],[\"将消息路由到\",{\"1\":{\"414\":1,\"1628\":1}}],[\"将图片保存到云上耗时比较久\",{\"1\":{\"398\":1}}],[\"将阻止应用继续\",{\"1\":{\"390\":1}}],[\"将阻塞直到有元素可用\",{\"1\":{\"162\":1}}],[\"将阻塞直到有空间可用\",{\"1\":{\"162\":1}}],[\"将控制权交还给调用者\",{\"1\":{\"388\":1}}],[\"将默认使用\",{\"1\":{\"383\":1}}],[\"将使用第一个唯一\",{\"1\":{\"699\":1}}],[\"将使用\",{\"1\":{\"383\":1}}],[\"将对象指向刚分配的内存空间\",{\"1\":{\"1645\":1}}],[\"将对象引用压入栈等\",{\"1\":{\"241\":1}}],[\"将对新来的任务执行某种拒绝策略\",{\"1\":{\"1109\":1}}],[\"将对\",{\"1\":{\"380\":1}}],[\"将小型函数直接展开在调用它的位置\",{\"1\":{\"274\":1}}],[\"将循环体展开\",{\"1\":{\"274\":1}}],[\"将静态变量替换为常量\",{\"1\":{\"274\":1}}],[\"将多个相同的常量合并为一个\",{\"1\":{\"274\":1}}],[\"将源码中的字符流转变为标记token的过程\",{\"1\":{\"257\":1}}],[\"将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\",{\"1\":{\"249\":1}}],[\"将程序中的符号引用映射到内存中的具体对象或方法\",{\"1\":{\"244\":1}}],[\"将其整体读入内存\",{\"1\":{\"1546\":1}}],[\"将其接收的数据分发给其它\",{\"1\":{\"1220\":1}}],[\"将其放在堆外内存中可以减小\",{\"1\":{\"1136\":1}}],[\"将其转换为底层操作系统的机器码\",{\"1\":{\"242\":1}}],[\"将其它表数据\",{\"1\":{\"120\":1}}],[\"将浮点数转换为整数等\",{\"1\":{\"241\":1}}],[\"将队头的引用移除\",{\"1\":{\"184\":1}}],[\"将可用内存缩小为原来的一半\",{\"1\":{\"169\":1,\"1523\":1}}],[\"将非线程安全的集合封闭起来\",{\"1\":{\"162\":1}}],[\"将线程对象单独进行封装\",{\"1\":{\"136\":1}}],[\"将线程关联的节点移出\",{\"1\":{\"8\":1}}],[\"将spring和junit链接了起来\",{\"1\":{\"1718\":1}}],[\"将sds长度扩展为\",{\"1\":{\"975\":1}}],[\"将s1\",{\"1\":{\"593\":1}}],[\"将sql脚本执行的结果重定向到导出文件中\",{\"1\":{\"121\":1}}],[\"将sql结果重定向到导出文件中\",{\"1\":{\"121\":1}}],[\"将session保存到什么位置\",{\"1\":{\"24\":1}}],[\"将分布式的处理结果汇总统计\",{\"1\":{\"1221\":1}}],[\"将分区名修改为\",{\"1\":{\"118\":1}}],[\"将分词后的词组通过查找倒排链表快速定位到文档\",{\"1\":{\"34\":1}}],[\"将磁盘上的索引信息读入到内存\",{\"1\":{\"53\":1}}],[\"将索引写到索引文件夹中\",{\"1\":{\"53\":1}}],[\"将那些没有用的数据清除\",{\"1\":{\"34\":1}}],[\"将登录状态写入\",{\"1\":{\"27\":3,\"1643\":3}}],[\"将登陆用户信息放入\",{\"1\":{\"15\":1}}],[\"将\",{\"1\":{\"6\":1,\"148\":1,\"414\":1,\"452\":1,\"471\":1,\"541\":1,\"773\":1,\"788\":1,\"799\":1,\"801\":1,\"802\":1,\"965\":1,\"1016\":1,\"1045\":1,\"1150\":1,\"1205\":2,\"1483\":1,\"1489\":1,\"1517\":2,\"1524\":1,\"1556\":1,\"1628\":1}}],[\"一场游戏一场梦\",{\"1\":{\"1849\":1}}],[\"一聊才发现和我们一样也是硬卧换硬座\",{\"1\":{\"1848\":1}}],[\"一瞬间感觉和小时候吃的某种东西味道口感一摸一样\",{\"1\":{\"1846\":1}}],[\"一瞬即永恒\",{\"1\":{\"1819\":1}}],[\"一早从当雄出发直奔纳木措\",{\"1\":{\"1846\":1}}],[\"一早发车\",{\"1\":{\"1844\":1}}],[\"一开始很失落\",{\"1\":{\"1841\":1}}],[\"一开始也是打算直接长沙一路硬卧直到拉萨\",{\"1\":{\"1833\":1}}],[\"一共12人的团\",{\"1\":{\"1841\":1}}],[\"一边唱着激情的摇滚和动人的民谣\",{\"1\":{\"1841\":1}}],[\"一边又在准备投靠黑车\",{\"1\":{\"1841\":1}}],[\"一边也骂西藏文旅部门\",{\"1\":{\"1841\":1}}],[\"一边慢慢往回走\",{\"1\":{\"1834\":1}}],[\"一大早坐公交到罗布林卡北门\",{\"1\":{\"1841\":1}}],[\"一下火车\",{\"1\":{\"1834\":1}}],[\"一下三个命令等价\",{\"1\":{\"1351\":1}}],[\"一路上经过了可可西里无人区\",{\"1\":{\"1833\":1}}],[\"一年前\",{\"1\":{\"1832\":1}}],[\"一年过去了\",{\"1\":{\"1818\":1}}],[\"一咬牙一跺脚\",{\"1\":{\"1828\":1}}],[\"一月\",{\"1\":{\"1825\":1}}],[\"一看书就犯困\",{\"1\":{\"1817\":1}}],[\"一夜的卧铺从长沙坐到北京\",{\"1\":{\"1815\":1}}],[\"一点点把组里各个系统的权限拿到手\",{\"1\":{\"1786\":1}}],[\"一点一点地提速\",{\"1\":{\"1413\":1}}],[\"一脸懵逼各种奇奇怪怪的问题冒出来了\",{\"1\":{\"1785\":1}}],[\"一整套开发部署上线流程\",{\"1\":{\"1777\":1}}],[\"一朝终成好汉\",{\"1\":{\"1776\":1}}],[\"一部分是公共库存\",{\"1\":{\"1737\":1}}],[\"一定要去梦中都想去的西藏\",{\"1\":{\"1816\":1}}],[\"一定要等\",{\"1\":{\"446\":1}}],[\"一定满足\",{\"1\":{\"1657\":1}}],[\"一类提供系统软件和应用软件之间连接\",{\"1\":{\"1625\":1}}],[\"一切也都结束了\",{\"1\":{\"1849\":1}}],[\"一切皆文件\",{\"1\":{\"1473\":1}}],[\"一切方法调用在class文件里面存储的都只是符号引用\",{\"1\":{\"243\":1}}],[\"一键截流和性能统计等功能\",{\"1\":{\"1302\":1}}],[\"一期上线完成后\",{\"1\":{\"1235\":1}}],[\"一期上线过程中\",{\"1\":{\"1235\":1}}],[\"一列中可以插入多个子列\",{\"1\":{\"1227\":1}}],[\"一款etl\",{\"1\":{\"1213\":1}}],[\"一款流式数据采集工具\",{\"1\":{\"1213\":1}}],[\"一半的\",{\"1\":{\"1205\":1}}],[\"一些老歌越听越有味道\",{\"1\":{\"1817\":1}}],[\"一些文章里用\",{\"1\":{\"1135\":1}}],[\"一些实现用\",{\"1\":{\"1135\":1}}],[\"一书给出了估算线程数量的公式\",{\"1\":{\"1119\":1}}],[\"一图了解线程池工作原理\",{\"1\":{\"1117\":1}}],[\"一是有序集合的底层实现之一\",{\"1\":{\"885\":1}}],[\"一系列队列任务相关的\",{\"1\":{\"1120\":1}}],[\"一系列以\",{\"1\":{\"828\":2}}],[\"一系列可选属性\",{\"1\":{\"413\":1,\"1628\":1}}],[\"一致的运行环境\",{\"1\":{\"1634\":1}}],[\"一致直接返回\",{\"1\":{\"1514\":1}}],[\"一致则是可信赖的\",{\"1\":{\"1403\":1}}],[\"一致\",{\"1\":{\"814\":1,\"1514\":1,\"1556\":1}}],[\"一致性哈希算法不能保证分布均匀\",{\"1\":{\"1489\":1}}],[\"一致性哈希\",{\"0\":{\"1489\":1},\"1\":{\"1489\":1}}],[\"一致性c\",{\"1\":{\"1279\":1}}],[\"一致性和\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"一致性发生冲突了\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"一致性要求不高的数据\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"一致性要求高的数据\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"一致性要求超高的\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"一致性\",{\"1\":{\"735\":2,\"961\":2,\"1032\":1,\"1274\":1,\"1278\":2,\"1550\":1,\"1618\":2}}],[\"一致性hash分片\",{\"1\":{\"656\":1}}],[\"一致性问题\",{\"1\":{\"401\":1,\"1625\":1}}],[\"一页至少2条记录\",{\"1\":{\"698\":1}}],[\"一对一\",{\"1\":{\"601\":1}}],[\"一对多\",{\"1\":{\"601\":1}}],[\"一门课程也可以被多个学生选修\",{\"1\":{\"601\":1}}],[\"一线城市\",{\"1\":{\"596\":2}}],[\"一堆比特位\",{\"1\":{\"564\":1}}],[\"一旦依赖了spring\",{\"1\":{\"1717\":1}}],[\"一旦功能发生了改变\",{\"1\":{\"1705\":1}}],[\"一旦项目变得复杂\",{\"1\":{\"1610\":1}}],[\"一旦期间发生崩溃\",{\"1\":{\"1556\":1}}],[\"一旦与客户端连接完成\",{\"1\":{\"1487\":1}}],[\"一旦发生丢包\",{\"1\":{\"1413\":1}}],[\"一旦服务端私钥泄露\",{\"1\":{\"1402\":1}}],[\"一旦有异常可以很容易实现整体回滚\",{\"1\":{\"1273\":1}}],[\"一旦由于并发场景下对新老集群的加解锁逻辑不同步\",{\"1\":{\"1238\":1}}],[\"一旦缓存迁移出现失败\",{\"1\":{\"1234\":1}}],[\"一旦选择出\",{\"1\":{\"1203\":1}}],[\"一旦通过\",{\"1\":{\"1114\":1}}],[\"一旦某个线程使用\",{\"1\":{\"1074\":1}}],[\"一旦节点存储的key数量到达n\",{\"1\":{\"698\":1}}],[\"一旦超过\",{\"1\":{\"483\":1}}],[\"一旦开始\",{\"1\":{\"134\":2}}],[\"一条\",{\"1\":{\"1629\":1}}],[\"一条查询语句经过mysql查询优化器的各种基于成本\",{\"1\":{\"727\":1}}],[\"一条完整的记录分为记录的额外信息和记录的真实数据两部分组成\",{\"1\":{\"684\":1}}],[\"一条完整的消息包含\",{\"1\":{\"474\":1}}],[\"一条消息可以发送到多个不同的consumer\",{\"1\":{\"430\":1}}],[\"一条消息从\",{\"1\":{\"419\":1}}],[\"一次磁盘寻道就可以读出整个文件\",{\"1\":{\"1476\":1}}],[\"一次性全部查出再封装树形结构\",{\"1\":{\"1367\":1}}],[\"一次性查出来配合\",{\"1\":{\"1245\":1}}],[\"一次性监听节点\",{\"1\":{\"1191\":1}}],[\"一次插入的数据不建议超过1000条\",{\"1\":{\"614\":1}}],[\"一次锁定相邻的一组记录\",{\"1\":{\"563\":1}}],[\"一次\",{\"1\":{\"485\":1,\"1666\":1}}],[\"一次和仅一次的消息分发\",{\"1\":{\"434\":1}}],[\"一次是准备阶段赋系统初始值\",{\"1\":{\"204\":1}}],[\"一级可以销售国际机票\",{\"1\":{\"1727\":1}}],[\"一级索引\",{\"1\":{\"1476\":1}}],[\"一级页表需要覆盖所有虚拟地址\",{\"1\":{\"1443\":1}}],[\"一级缓存就可以解决循环依赖\",{\"1\":{\"1028\":1}}],[\"一级缓存\",{\"1\":{\"1028\":1,\"1382\":1,\"1599\":1}}],[\"一级消息类型\",{\"1\":{\"408\":1}}],[\"一级一级向下查找\",{\"1\":{\"357\":2}}],[\"一方面维护自身的生命周期\",{\"1\":{\"1111\":1}}],[\"一方面\",{\"1\":{\"391\":1}}],[\"一统天下而落幕\",{\"1\":{\"382\":1}}],[\"一样也要在内核态和用户态各遍历\",{\"1\":{\"1487\":1}}],[\"一样\",{\"1\":{\"365\":1}}],[\"一行一行解析\",{\"1\":{\"357\":1}}],[\"一种服务\",{\"1\":{\"1735\":1}}],[\"一种是美国模式\",{\"1\":{\"1730\":1}}],[\"一种是iata模式\",{\"1\":{\"1730\":1}}],[\"一种是记录上一次加入排列的元素\",{\"1\":{\"1677\":1}}],[\"一种是push\",{\"1\":{\"480\":1}}],[\"一种不与行级锁冲突的表级锁\",{\"1\":{\"1560\":1}}],[\"一种多路平衡查找树\",{\"1\":{\"1546\":1}}],[\"一种非阻塞同步网络模式\",{\"1\":{\"1488\":1}}],[\"一种忙等待的同步工具\",{\"1\":{\"1463\":1}}],[\"一种同步工具\",{\"1\":{\"1463\":1}}],[\"一种允许无亲缘关系的进程之间进行双向通信的方式\",{\"1\":{\"1457\":1}}],[\"一种用于父子进程之间的单向通信方式\",{\"1\":{\"1456\":1}}],[\"一种思想\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"一种思路是首先分配一个较小的\",{\"1\":{\"788\":1}}],[\"一种基于分而治之的思想\",{\"1\":{\"1214\":1}}],[\"一种抛出异常\",{\"1\":{\"988\":1}}],[\"一种硬限制\",{\"1\":{\"923\":1}}],[\"一种直接的方法是给数据流加上标点符号\",{\"1\":{\"845\":1}}],[\"一种数据表示格式\",{\"1\":{\"357\":1}}],[\"一种控制任务延时调用\",{\"1\":{\"334\":1}}],[\"一种约束规范\",{\"1\":{\"292\":1}}],[\"一种运行在线程之上的用户态模型\",{\"1\":{\"134\":1}}],[\"一文读懂java中的reference和引用类型\",{\"1\":{\"197\":1}}],[\"一起封装\",{\"1\":{\"1605\":1}}],[\"一起发送\",{\"1\":{\"1400\":1}}],[\"一起使用\",{\"1\":{\"139\":1}}],[\"一起构建条件队列\",{\"1\":{\"8\":1}}],[\"一个牢笼里\",{\"1\":{\"1786\":1}}],[\"一个人来到帝都\",{\"1\":{\"1786\":1}}],[\"一个破需求改改弄弄三次pr三次上线😅\",{\"1\":{\"1781\":1}}],[\"一个一个服务升级组件\",{\"1\":{\"1779\":1}}],[\"一个字母代表一个价格\",{\"1\":{\"1739\":1}}],[\"一个旅客出行前会有一个行程规划\",{\"1\":{\"1722\":1}}],[\"一个小根堆\",{\"1\":{\"1658\":1}}],[\"一个大根堆\",{\"1\":{\"1658\":1}}],[\"一个特殊的文件系统\",{\"1\":{\"1634\":1}}],[\"一个unit服务\",{\"1\":{\"1631\":1}}],[\"一个消息可以投入一个或多个队列\",{\"1\":{\"1628\":1}}],[\"一个消费者可以消费多个分区数据\",{\"1\":{\"481\":1}}],[\"一个消费者\",{\"1\":{\"414\":1,\"1629\":1}}],[\"一个独立的\",{\"1\":{\"1626\":1}}],[\"一个基于asm的字节码生成库\",{\"1\":{\"1532\":1}}],[\"一个期望值和一个新值\",{\"1\":{\"1513\":1}}],[\"一个blockingqueue接口的对象\",{\"1\":{\"1511\":1}}],[\"一个写者访问临界区\",{\"1\":{\"1467\":1}}],[\"一个内存的访问地址由\",{\"1\":{\"1435\":1}}],[\"一个在\",{\"1\":{\"1404\":1}}],[\"一个布隆过滤器中有多个不同的哈希函数\",{\"1\":{\"1390\":1}}],[\"一个图就是一些顶点的集合\",{\"1\":{\"1388\":1}}],[\"一个负责网络通信\",{\"1\":{\"1190\":1}}],[\"一个配置纪元里\",{\"1\":{\"948\":2}}],[\"一个集群客户端通常会与集群中的多个节点创建套接字连接\",{\"1\":{\"947\":1}}],[\"一个集群由多个节点组成\",{\"1\":{\"945\":1}}],[\"一个节点表示一个线程\",{\"1\":{\"1516\":1}}],[\"一个节点不仅会记录自己负责处理的槽记录\",{\"1\":{\"946\":1}}],[\"一个节点的子节点个数\",{\"1\":{\"698\":1}}],[\"一个函数\",{\"1\":{\"920\":1}}],[\"一个时间事件主要有三个属性组成\",{\"1\":{\"920\":1}}],[\"一个工人可以管理多个\",{\"1\":{\"814\":1}}],[\"一个数组不够\",{\"1\":{\"788\":1}}],[\"一个数据多个副本\",{\"1\":{\"435\":1}}],[\"一个活跃的事务正往此段内写入undo日志\",{\"1\":{\"749\":1}}],[\"一个事务想要对一个数据行加锁时\",{\"1\":{\"1560\":1}}],[\"一个事务的日志操作顺序\",{\"1\":{\"1553\":1}}],[\"一个事务的执行不受其他事务的影响\",{\"1\":{\"1274\":1,\"1550\":1}}],[\"一个事务被提交后\",{\"1\":{\"1032\":1}}],[\"一个事务中的所有操作\",{\"1\":{\"1032\":1}}],[\"一个事务最多对应4条undo页面链表\",{\"1\":{\"749\":1}}],[\"一个事务可以包含若干条语句\",{\"1\":{\"739\":1}}],[\"一个事务按照某些条件查询\",{\"1\":{\"736\":1,\"1551\":1}}],[\"一个事务先后读取同一条记录\",{\"1\":{\"736\":1,\"1551\":1}}],[\"一个事务读到了另一个事务还未提交的数据\",{\"1\":{\"736\":1,\"1551\":1}}],[\"一个事务修改了另一个未提交事务修改过的数据\",{\"1\":{\"736\":1,\"1551\":1}}],[\"一个使用索引的条件和一个没有使用索引的条件用or连接后无法使用该索引\",{\"1\":{\"711\":1}}],[\"一个联合索引的顺序是\",{\"1\":{\"702\":1}}],[\"一个段是一些零散的页面以及一些完整的extent区的集合\",{\"1\":{\"694\":1}}],[\"一个区包含64个大小为16k的page页\",{\"1\":{\"693\":1}}],[\"一个组内的记录达到8条后\",{\"1\":{\"690\":1}}],[\"一个组件是门面还是实现\",{\"1\":{\"376\":1}}],[\"一个设置\",{\"1\":{\"663\":1}}],[\"一个主机\",{\"1\":{\"658\":1}}],[\"一个用户仅对应一个用户详情\",{\"1\":{\"601\":1}}],[\"一个学生可以选多门课程\",{\"1\":{\"601\":1}}],[\"一个部门对应多个员工\",{\"1\":{\"601\":1}}],[\"一个分布式系统最多只能同时满足一致性\",{\"1\":{\"1206\":1}}],[\"一个分区只能由一个组内消费者消费\",{\"1\":{\"443\":1,\"481\":1}}],[\"一个分片中会累积很多段\",{\"1\":{\"34\":1}}],[\"一个是\",{\"1\":{\"1058\":1}}],[\"一个是命令连接\",{\"1\":{\"939\":1}}],[\"一个是实时\",{\"1\":{\"442\":1}}],[\"一个是抽象部分\",{\"1\":{\"375\":1}}],[\"一个或者多个broker可以组成一个kafka集群\",{\"1\":{\"430\":1}}],[\"一个kafka节点就是一个broker\",{\"1\":{\"430\":1}}],[\"一个生产者\",{\"1\":{\"414\":2}}],[\"一个中文3个字节存储\",{\"1\":{\"315\":1}}],[\"一个中文2个字节存储\",{\"1\":{\"315\":1}}],[\"一个匿名函数\",{\"1\":{\"298\":1}}],[\"一个平台相关的后端从hir中产生低级中间代码表示lir\",{\"1\":{\"269\":1}}],[\"一个平台独立的前端将字节码构造成一个高级中间代码表示hir\",{\"1\":{\"269\":1}}],[\"一个类代表另一个类的功能\",{\"1\":{\"1649\":1}}],[\"一个类的行为或其算法可以在运行时更改\",{\"1\":{\"1007\":1}}],[\"一个类同时继承父类和实现接口中的同名方法\",{\"1\":{\"292\":1}}],[\"一个类型只会被初始化一次\",{\"1\":{\"253\":1}}],[\"一个类可以有个多个方法\",{\"1\":{\"240\":1}}],[\"一个类可以有多个字段\",{\"1\":{\"240\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"240\":1}}],[\"一个阶段的执行过程中调用\",{\"1\":{\"248\":1}}],[\"一个方法的执行到结束\",{\"1\":{\"203\":1}}],[\"一个引用只能唯一注册到某个\",{\"1\":{\"184\":1}}],[\"一个很麻烦\",{\"1\":{\"154\":1,\"1514\":1}}],[\"一个\",{\"1\":{\"153\":1,\"443\":3,\"494\":2,\"675\":2,\"1115\":1,\"1281\":1,\"1404\":2,\"1555\":2,\"1563\":2,\"1620\":1,\"1626\":1,\"1628\":1,\"1738\":1}}],[\"一个变量在一个线程里改变\",{\"1\":{\"137\":1}}],[\"一个线程可以等待某个条件变量满足后被唤醒\",{\"1\":{\"1463\":1}}],[\"一个线程可以有多个协程\",{\"1\":{\"1453\":1}}],[\"一个线程组包括多个线程\",{\"1\":{\"1099\":1}}],[\"一个线程\",{\"1\":{\"782\":2,\"794\":1}}],[\"一个线程仅能处理一个\",{\"1\":{\"764\":1}}],[\"一个线程对\",{\"1\":{\"145\":2}}],[\"一个线程中的每一个操作\",{\"1\":{\"143\":1}}],[\"一个线程崩溃可能影响整个程序的稳定性\",{\"1\":{\"134\":1}}],[\"一个线程占用了临界区资源\",{\"1\":{\"134\":1}}],[\"一个进程处理每个请求如果仅需\",{\"1\":{\"1487\":1}}],[\"一个进程的周转时间越小越好\",{\"1\":{\"1470\":1}}],[\"一个进程也可以单独拥有多个协程\",{\"1\":{\"1453\":1}}],[\"一个进程中可以同时存在多个线程\",{\"1\":{\"1451\":1}}],[\"一个进程出现问题不会影响其他进程\",{\"1\":{\"134\":1}}],[\"一个进程之内可以分为若干个线程\",{\"1\":{\"134\":1}}],[\"一个简化的\",{\"1\":{\"101\":1}}],[\"一个订单可能对应多个\",{\"1\":{\"1738\":1}}],[\"一个订单信息\",{\"1\":{\"34\":1}}],[\"一个订阅者可以处理多个事件\",{\"1\":{\"84\":1}}],[\"一个订阅者可以处理多个不同的事件\",{\"1\":{\"84\":1}}],[\"一个索引对应生成两个段\",{\"1\":{\"694\":1}}],[\"一个索引分成n个shard\",{\"1\":{\"34\":1}}],[\"一个索引由多个分片组成\",{\"1\":{\"34\":1}}],[\"一直持续到我党解放西藏\",{\"1\":{\"1837\":1}}],[\"一直持续到连接断开\",{\"1\":{\"940\":1}}],[\"一直到除夕前夜才到家\",{\"1\":{\"1825\":1}}],[\"一直到这里都还没拿到资源\",{\"1\":{\"6\":1}}],[\"一直在等待救世主的到来\",{\"1\":{\"1758\":1}}],[\"一直在这里循环\",{\"1\":{\"6\":1}}],[\"一直存在\",{\"1\":{\"1514\":1}}],[\"一直等到内核数据准备好\",{\"1\":{\"1478\":1}}],[\"一直重传\",{\"1\":{\"1409\":1}}],[\"一直重传至最大次数\",{\"1\":{\"1409\":1}}],[\"一直由某个线程上锁\",{\"1\":{\"1077\":1}}],[\"一直超过则关闭\",{\"1\":{\"923\":1}}],[\"一直向前传\",{\"1\":{\"829\":1}}],[\"一直为\",{\"1\":{\"6\":1}}],[\"一般采取对等原则\",{\"1\":{\"1741\":1}}],[\"一般包括头等舱\",{\"1\":{\"1739\":1}}],[\"一般有两种收费规则\",{\"1\":{\"1737\":1}}],[\"一般面向某个完整的业务功能\",{\"1\":{\"1716\":1}}],[\"一般面向难于测试的边界功能\",{\"1\":{\"1716\":1}}],[\"一般面向方法\",{\"1\":{\"1716\":1}}],[\"一般应该止步于类\",{\"1\":{\"1705\":1}}],[\"一般放于选项开头\",{\"1\":{\"1688\":1}}],[\"一般依赖于\",{\"1\":{\"1642\":1}}],[\"一般要把容易产生锁冲突\",{\"1\":{\"1561\":1}}],[\"一般和非阻塞\",{\"1\":{\"1487\":1}}],[\"一般来说\",{\"1\":{\"1465\":1}}],[\"一般回收像\",{\"1\":{\"1447\":1}}],[\"一般会导致程序中断\",{\"1\":{\"1533\":1}}],[\"一般会暂时关闭中断请求\",{\"1\":{\"1437\":1}}],[\"一般会调用\",{\"1\":{\"817\":1}}],[\"一般在半个cpu周期内完成读写\",{\"1\":{\"1434\":1}}],[\"一般由接收方告诉发送方自己还有多少缓冲区可以用于接收数据\",{\"1\":{\"1412\":1}}],[\"一般一个业务需求使用一个独立的vip\",{\"1\":{\"1301\":1}}],[\"一般使用\",{\"1\":{\"1280\":1,\"1396\":1,\"1517\":1,\"1523\":2,\"1619\":1}}],[\"一般不要求强一致性\",{\"1\":{\"1265\":1,\"1583\":1}}],[\"一般响应\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"一般只使用ht\",{\"1\":{\"882\":1}}],[\"一般为了节省带宽使用\",{\"1\":{\"1129\":1}}],[\"一般为\",{\"1\":{\"839\":1}}],[\"一般\",{\"1\":{\"791\":1,\"1642\":1}}],[\"一般data区存储修改所需的参数\",{\"1\":{\"739\":1}}],[\"一般直接把修改的偏移量和内容写入data区域中\",{\"1\":{\"739\":1}}],[\"一般指b+树结构组织的索引\",{\"1\":{\"697\":1}}],[\"一般定长的效率要高于变长字符串\",{\"1\":{\"663\":1}}],[\"一般通过主键\",{\"1\":{\"652\":1}}],[\"一般性能是要高于b+树的\",{\"1\":{\"638\":1}}],[\"一般分页查询时\",{\"1\":{\"618\":1}}],[\"一般把共享资源作为锁对象\",{\"1\":{\"331\":1}}],[\"一般把动态连接\",{\"1\":{\"208\":1}}],[\"一般用来保存用户信息\",{\"1\":{\"1642\":1}}],[\"一般用于传输普通日志\",{\"1\":{\"460\":1}}],[\"一般用\",{\"1\":{\"317\":1,\"318\":1}}],[\"一般代表一个属性文件\",{\"1\":{\"305\":1}}],[\"一般位于\",{\"1\":{\"254\":1}}],[\"一般情况下\",{\"1\":{\"191\":1,\"711\":1}}],[\"一般就是对头\",{\"1\":{\"7\":1}}],[\"一般是旅游线路的包机\",{\"1\":{\"1737\":1}}],[\"一般是与\",{\"1\":{\"1533\":1}}],[\"一般是消费者端的性能问题\",{\"1\":{\"1374\":1}}],[\"一般是安装目录或用户home目录下的ini\",{\"1\":{\"671\":1}}],[\"一般是一个\",{\"1\":{\"15\":1}}],[\"一般是\",{\"1\":{\"6\":1,\"1444\":1}}],[\"一般此方法表示是否被当前线程所独占\",{\"1\":{\"5\":1}}],[\"因信称义\",{\"1\":{\"1763\":1}}],[\"因行为称义\",{\"1\":{\"1761\":1}}],[\"因技术需要\",{\"1\":{\"1743\":1}}],[\"因达到限制销售数而没有可用座位\",{\"1\":{\"1740\":1}}],[\"因达到限制销售数而没有可利用座位\",{\"1\":{\"1736\":1}}],[\"因而无法保证突然激增的流量\",{\"1\":{\"1637\":1}}],[\"因特网组管理协议\",{\"1\":{\"1429\":1}}],[\"因其类似于木桶效应中短板决定水位高度\",{\"1\":{\"471\":1}}],[\"因用户线程的并发执行\",{\"1\":{\"176\":1,\"1525\":1}}],[\"因为乐夏喜欢上了摇滚乐\",{\"1\":{\"1817\":1}}],[\"因为ipv6的流量不计费\",{\"1\":{\"1810\":1}}],[\"因为那个凤凰的标是拼音\",{\"1\":{\"1796\":1}}],[\"因为那段路没什么人\",{\"1\":{\"1786\":1}}],[\"因为关闭页面后这个\",{\"1\":{\"1791\":1}}],[\"因为只需要基于最新的版本构建\",{\"1\":{\"1791\":1}}],[\"因为只要有一个没有索引\",{\"1\":{\"703\":1}}],[\"因为从学生到打工人的身份转变就发生在这里\",{\"1\":{\"1786\":1}}],[\"因为leader带孩子把腿弄伤了请了三天的假\",{\"1\":{\"1785\":1}}],[\"因为作为实习生\",{\"1\":{\"1773\":1}}],[\"因为西方自文艺复兴以来所取得的进步是建立在中世纪伊斯兰教所取得的科学成就的基础上的\",{\"1\":{\"1767\":1}}],[\"因为航空运输只要超出自己的国界就涉及到其他国家的主权\",{\"1\":{\"1741\":1}}],[\"因为32bit最高只有32个1\",{\"1\":{\"1666\":1}}],[\"因为有些异常信息中包含了sql信息\",{\"1\":{\"1539\":1}}],[\"因为在\",{\"1\":{\"1535\":1}}],[\"因为在新版\",{\"1\":{\"462\":1}}],[\"因为其中的对象存活几率较高\",{\"1\":{\"1523\":1}}],[\"因为每次\",{\"1\":{\"1523\":1}}],[\"因为线程之间的上下文切换会消耗大量的cpu时间\",{\"1\":{\"1511\":1}}],[\"因为没有足够的线程来处理所有的请求\",{\"1\":{\"1511\":1}}],[\"因为各个线程的地址空间是共享的\",{\"1\":{\"1465\":1}}],[\"因为通常涉及极少的的状态信息\",{\"1\":{\"1454\":1}}],[\"因为虚拟内存是共享的\",{\"1\":{\"1454\":1}}],[\"因为程序运行符合局部性原理\",{\"1\":{\"1443\":1}}],[\"因为多个内存块会映射到同一个\",{\"1\":{\"1435\":1}}],[\"因为不同系统间传输协议等级不一样\",{\"1\":{\"1734\":1}}],[\"因为不需要在内核和用户空间之间复制数据\",{\"1\":{\"1459\":1}}],[\"因为不能简单得通过灰度开关去迁移一个锁的加锁解锁逻辑\",{\"1\":{\"1238\":1}}],[\"因为不存在并发修改的问题\",{\"1\":{\"146\":1}}],[\"因为堆外内存的管理不依赖于\",{\"1\":{\"1136\":1}}],[\"因为该节点就是目前负责槽i的节点\",{\"1\":{\"947\":1}}],[\"因为接收方的缓冲区大小仍然是有大小限制的\",{\"1\":{\"841\":1}}],[\"因为底层是同一块内存区域\",{\"1\":{\"831\":1}}],[\"因为这部分内存不受\",{\"1\":{\"826\":1}}],[\"因为客户端断开了\",{\"1\":{\"788\":1}}],[\"因为索引是用来索引少量数据的\",{\"1\":{\"703\":1}}],[\"因为插入的是不同的行\",{\"1\":{\"561\":1}}],[\"因为一旦该broker宕机\",{\"1\":{\"469\":1}}],[\"因为kafka的每个topic\",{\"1\":{\"435\":1}}],[\"因为它包含了较长时间存活的对象\",{\"1\":{\"1524\":1}}],[\"因为它避免了\",{\"1\":{\"1136\":1}}],[\"因为它执行效率高\",{\"1\":{\"242\":1}}],[\"因为它简单且易于移植\",{\"1\":{\"242\":1}}],[\"因为它们在\",{\"1\":{\"1478\":1}}],[\"因为它们有网络通信需求\",{\"1\":{\"808\":1}}],[\"因为它们将抑制一些编译器优化操作\",{\"1\":{\"145\":1}}],[\"因为它们的状态不可变\",{\"1\":{\"64\":1}}],[\"因为操作数直接存放在寄存器中\",{\"1\":{\"242\":1}}],[\"因为三级缓存的存在\",{\"1\":{\"143\":1}}],[\"因为\",{\"1\":{\"136\":1,\"446\":1,\"490\":1,\"618\":1,\"788\":1,\"1028\":1,\"1202\":1,\"1497\":1}}],[\"因为入队的开销是比较大的\",{\"1\":{\"6\":1}}],[\"因此选择使用公共服\",{\"1\":{\"1809\":1}}],[\"因此关键是要用\",{\"1\":{\"1672\":1}}],[\"因此合理使用回溯算法框架就可以一网打尽\",{\"1\":{\"1669\":1}}],[\"因此要推送代码到某个仓库前必须通过某种方式验证对这个仓库有读写权限\",{\"1\":{\"1791\":1}}],[\"因此要多做一次\",{\"1\":{\"1666\":1}}],[\"因此要手动移除处理完毕的\",{\"1\":{\"786\":1}}],[\"因此数组中所有元素异或即可得到单个的元素\",{\"1\":{\"1662\":1}}],[\"因此无法提前暴露一个正在创建中的bean\",{\"1\":{\"1599\":1}}],[\"因此无需任何同步控制就可以保证数据安全\",{\"1\":{\"1498\":1}}],[\"因此降低了数据丢失的风险\",{\"1\":{\"1588\":1}}],[\"因此降低了程序的灵活性\",{\"1\":{\"272\":1}}],[\"因此丢失数据的风险就越低\",{\"1\":{\"1577\":1}}],[\"因此占用的空间更小\",{\"1\":{\"1576\":1}}],[\"因此应尽量使用\",{\"1\":{\"1568\":1}}],[\"因此应当只在\",{\"1\":{\"789\":1}}],[\"因此并发性能差\",{\"1\":{\"1560\":1}}],[\"因此并发度低\",{\"1\":{\"551\":1}}],[\"因此导致不可重复读\",{\"1\":{\"1557\":1}}],[\"因此分两阶段\",{\"1\":{\"1554\":1}}],[\"因此分布式锁的迁移可以单独做\",{\"1\":{\"1238\":1}}],[\"因此优化器直接放弃使用索引\",{\"1\":{\"1547\":1}}],[\"因此查询效率比较稳定\",{\"1\":{\"1546\":1}}],[\"因此空间利用率较低\",{\"1\":{\"1546\":1}}],[\"因此读取速度较快\",{\"1\":{\"1542\":1}}],[\"因此是不可变的\",{\"1\":{\"1536\":1}}],[\"因此推荐使用非检查异常\",{\"1\":{\"1533\":1}}],[\"因此提供了很多参数调节和自适应调节策略\",{\"1\":{\"1525\":1}}],[\"因此线程调度时执行的是轮询策略\",{\"1\":{\"1511\":1}}],[\"因此基于\",{\"1\":{\"1488\":1}}],[\"因此程序要保证一次性将内核缓冲区的数据读取完\",{\"1\":{\"1487\":1}}],[\"因此高并发场景下\",{\"1\":{\"1486\":1}}],[\"因此设备控制器设立了可读写的数据缓冲区\",{\"1\":{\"1481\":1}}],[\"因此如果\",{\"1\":{\"1514\":1}}],[\"因此如果被锁住的代码执行时间很短应选择自旋锁\",{\"1\":{\"1468\":1}}],[\"因此如果插入的数据行row在该页存储不下\",{\"1\":{\"615\":1}}],[\"因此进程之间要通信必须通过内核\",{\"1\":{\"1455\":1}}],[\"因此访问内存时间都相同\",{\"1\":{\"1446\":1}}],[\"因此频繁的内存回收会影响系统性能\",{\"1\":{\"1446\":1}}],[\"因此申请时可以超出物理内存限制\",{\"1\":{\"1445\":1}}],[\"因此页表占用空间大\",{\"1\":{\"1443\":1}}],[\"因此效率低\",{\"1\":{\"1495\":1}}],[\"因此效率较高\",{\"1\":{\"1443\":1}}],[\"因此效率非常高\",{\"1\":{\"1332\":1}}],[\"因此可能带来多核心的缓存一致性问题\",{\"1\":{\"1435\":1}}],[\"因此可以给\",{\"1\":{\"1582\":1}}],[\"因此可以避免不可重复读的问题\",{\"1\":{\"1557\":1}}],[\"因此可以划分冷数据和热数据\",{\"1\":{\"1448\":1}}],[\"因此可以调整成链式监听\",{\"1\":{\"1186\":1}}],[\"因此可以发现\",{\"1\":{\"1170\":1}}],[\"因此可以更灵活地控制内存的使用\",{\"1\":{\"1136\":1}}],[\"因此可以更加灵活地适应不同的工作负载和系统需求\",{\"1\":{\"282\":1}}],[\"因此可以更加有效地利用系统资源\",{\"1\":{\"282\":1}}],[\"因此可以进一步优化\",{\"1\":{\"1077\":1}}],[\"因此可以基于\",{\"1\":{\"1041\":1}}],[\"因此可以保存任意格式二进制数据\",{\"1\":{\"879\":1}}],[\"因此可以保证最近5个request的数据都是有序的\",{\"1\":{\"462\":1}}],[\"因此可以共享\",{\"1\":{\"851\":1}}],[\"因此可以引入虚拟节点\",{\"1\":{\"1489\":1}}],[\"因此可以引入多线程\",{\"1\":{\"791\":1}}],[\"因此可以引入双主双从\",{\"1\":{\"658\":1}}],[\"因此可以在单个线程内创建大量的协程\",{\"1\":{\"282\":1}}],[\"因此可以使用\",{\"1\":{\"154\":1,\"1514\":1}}],[\"因此可以改成static共用\",{\"1\":{\"154\":1,\"1514\":1}}],[\"因此可以手动创建异步任务\",{\"1\":{\"77\":1}}],[\"因此断网也能\",{\"1\":{\"1422\":1}}],[\"因此接收方的程序如果不知道发送方发送的消息长度\",{\"1\":{\"1417\":1}}],[\"因此由ip层进行分片传输效率很低\",{\"1\":{\"1416\":1}}],[\"因此没必要像\",{\"1\":{\"1413\":1}}],[\"因此没有接入\",{\"1\":{\"1303\":1}}],[\"因此没有优化\",{\"1\":{\"301\":1}}],[\"因此内网服务之间通常使用\",{\"1\":{\"1406\":1}}],[\"因此内存地址固定\",{\"1\":{\"800\":1}}],[\"因此get\",{\"1\":{\"1405\":1}}],[\"因此产生了\",{\"1\":{\"1402\":1}}],[\"因此通过\",{\"1\":{\"1369\":1}}],[\"因此通常都会配合多路复用以提高性能\",{\"1\":{\"794\":1}}],[\"因此三棵树是完全一样的\",{\"1\":{\"1344\":1}}],[\"因此结合\",{\"1\":{\"1288\":1}}],[\"因此本阶段所执行的操作需要具备幂等性\",{\"1\":{\"1284\":1}}],[\"因此本方案还可以\",{\"1\":{\"21\":1}}],[\"因此迁移难度较大\",{\"1\":{\"1234\":1}}],[\"因此随着操作增多\",{\"1\":{\"1219\":1}}],[\"因此就需要分布式存储技术\",{\"1\":{\"1215\":1}}],[\"因此扩容\",{\"1\":{\"1194\":1}}],[\"因此两个实例不会发生阻塞\",{\"1\":{\"1188\":1}}],[\"因此相比七层协议\",{\"1\":{\"1296\":1}}],[\"因此相比\",{\"1\":{\"1187\":1}}],[\"因此我们说\",{\"1\":{\"1417\":1}}],[\"因此我们通常用反射来拿到\",{\"1\":{\"1135\":1}}],[\"因此我们可以通过\",{\"1\":{\"1135\":1}}],[\"因此我们需要一个段合并的过程\",{\"1\":{\"34\":1}}],[\"因此对于存储空间有限的应用场景来说\",{\"1\":{\"1542\":1}}],[\"因此对于两表表连接查询\",{\"1\":{\"718\":1}}],[\"因此对unsafe的使用一定要慎重\",{\"1\":{\"1134\":1}}],[\"因此美团内部采用了动态线程池的方案\",{\"1\":{\"1120\":1}}],[\"因此目前线程池最多支持\",{\"1\":{\"1112\":1}}],[\"因此适合多\",{\"1\":{\"1079\":1}}],[\"因此适用于只读或以读为主的场景\",{\"1\":{\"549\":1}}],[\"因此偏向锁适用于单个线程重入的场景\",{\"1\":{\"1077\":1}}],[\"因此称这种上锁为重量级锁\",{\"1\":{\"1074\":1}}],[\"因此使用spring管理事务的前提是底层数据库支持事务\",{\"1\":{\"1033\":1}}],[\"因此加入三级缓存后的获取单例\",{\"1\":{\"1028\":1}}],[\"因此持久性由持久化模式决定\",{\"1\":{\"961\":1}}],[\"因此具有更多的功能和更高的灵活性\",{\"1\":{\"1297\":1}}],[\"因此具有隔离性\",{\"1\":{\"961\":1}}],[\"因此具有原子性\",{\"1\":{\"961\":1}}],[\"因此具有线程池的所有方法\",{\"1\":{\"816\":1}}],[\"因此采用广播消息\",{\"1\":{\"949\":1}}],[\"因此采取分组索引策略\",{\"1\":{\"690\":1}}],[\"因此集群中每个节点都知道16384个槽分别被指派给哪些节点\",{\"1\":{\"946\":1}}],[\"因此时间精度不高\",{\"1\":{\"928\":1}}],[\"因此时间事件的实际执行通常比设定时间稍晚一些\",{\"1\":{\"921\":1}}],[\"因此实际上该链表仅一个节点\",{\"1\":{\"920\":1}}],[\"因此实际上又是个单线程\",{\"1\":{\"816\":1}}],[\"因此任何对embstr的修改操作\",{\"1\":{\"896\":1}}],[\"因此获取字符串长度的复杂度由o\",{\"1\":{\"879\":1}}],[\"因此底层还是\",{\"1\":{\"863\":1}}],[\"因此更为常用的是消息头+消息体的格式传输数据\",{\"1\":{\"845\":1}}],[\"因此为了提高网络利用率\",{\"1\":{\"839\":1}}],[\"因此为了尽量减少访问被驱动表的次数\",{\"1\":{\"714\":1}}],[\"因此以太网\",{\"1\":{\"839\":1}}],[\"因此支持链式调用\",{\"1\":{\"828\":1}}],[\"因此支持最多重入\",{\"1\":{\"9\":1}}],[\"因此第一个日志打印的是未建立连接的\",{\"1\":{\"820\":1}}],[\"因此第二个日志打印的\",{\"1\":{\"820\":1}}],[\"因此存在内部碎片问题\",{\"1\":{\"1443\":1}}],[\"因此存在父子关系\",{\"1\":{\"816\":1}}],[\"因此存在如下的缺点\",{\"1\":{\"763\":1}}],[\"因此又得从用户态切换至内核态\",{\"1\":{\"799\":1}}],[\"因此监测到事件后必须处理\",{\"1\":{\"786\":1}}],[\"因此仅适合短连接场景\",{\"1\":{\"764\":1}}],[\"因此重用会直接在空闲区域写入日志\",{\"1\":{\"750\":1}}],[\"因此新事务的日志可以直接覆盖原有的空间\",{\"1\":{\"750\":1}}],[\"因此purge阶段不需要undo日志\",{\"1\":{\"747\":1}}],[\"因此拿到一个叶子节点\",{\"1\":{\"707\":1}}],[\"因此性能更高\",{\"1\":{\"706\":1}}],[\"因此性能高\",{\"1\":{\"616\":1}}],[\"因此后面字段的索引将失效\",{\"1\":{\"702\":1}}],[\"因此myisam的索引都是二级索引\",{\"1\":{\"698\":1}}],[\"因此根节点始终保持不动\",{\"1\":{\"698\":1}}],[\"因此只需要\",{\"1\":{\"1666\":1}}],[\"因此只在\",{\"1\":{\"1487\":1}}],[\"因此只是理想算法\",{\"1\":{\"1470\":1}}],[\"因此只能将这些表作为临时表或缓存使用\",{\"1\":{\"680\":1}}],[\"因此只适用于小型业务场景\",{\"1\":{\"19\":1}}],[\"因此共四种拆分策略\",{\"1\":{\"652\":1}}],[\"因此建议尽量使用覆盖索引\",{\"1\":{\"620\":1}}],[\"因此建议使用\",{\"1\":{\"58\":1}}],[\"因此count\",{\"1\":{\"619\":1}}],[\"因此执行\",{\"1\":{\"619\":1}}],[\"因此修改权限不会立即生效\",{\"1\":{\"570\":1}}],[\"因此修改第三方变量不会影响到集合中的元素\",{\"1\":{\"304\":1}}],[\"因此行级锁在实现上是对索引上的索引项进行加锁\",{\"1\":{\"554\":1}}],[\"因此也不是const\",{\"1\":{\"710\":1}}],[\"因此也被称为表引擎\",{\"1\":{\"677\":1}}],[\"因此也就不需要锁机制\",{\"1\":{\"490\":1}}],[\"因此也称对象锁\",{\"1\":{\"137\":1}}],[\"因此这种模式并发量不能很高\",{\"1\":{\"1487\":1}}],[\"因此这种策略只适合特殊场景\",{\"1\":{\"477\":1}}],[\"因此这条语句没有创建新字符串\",{\"1\":{\"301\":1}}],[\"因此能够容忍min\",{\"1\":{\"460\":1}}],[\"因此能够确保数据的可靠性\",{\"1\":{\"460\":1}}],[\"因此在事务提交后可直接删除\",{\"1\":{\"1554\":1}}],[\"因此在读写操作时不会出现死锁问题\",{\"1\":{\"1542\":1}}],[\"因此在高并发下可以适当调整该时间\",{\"1\":{\"1410\":1}}],[\"因此在产生网络分区时\",{\"1\":{\"1207\":1}}],[\"因此在传播时必须确保\",{\"1\":{\"967\":1}}],[\"因此在\",{\"1\":{\"460\":1,\"820\":1}}],[\"因此消费者组是逻辑上的一个订阅者\",{\"1\":{\"443\":1,\"481\":1}}],[\"因此很多解决方案中引入了实时计算\",{\"1\":{\"442\":1}}],[\"因此不应把有状态的\",{\"1\":{\"1614\":1}}],[\"因此不存在一级缓存中\",{\"1\":{\"1599\":1}}],[\"因此不能再用start控制元素遍历的顺序了\",{\"1\":{\"1672\":1}}],[\"因此不能获得执行结果\",{\"1\":{\"1511\":1}}],[\"因此不能配合\",{\"1\":{\"785\":1}}],[\"因此不会相互影响\",{\"1\":{\"1452\":1}}],[\"因此不适合与其它工具共享数据\",{\"1\":{\"1228\":1}}],[\"因此不适合长连接\",{\"1\":{\"782\":1}}],[\"因此不用担心线程上下文切换造成共享资源错乱\",{\"1\":{\"1072\":1}}],[\"因此不推荐使用\",{\"1\":{\"986\":1}}],[\"因此不一定会被立即丢弃\",{\"1\":{\"424\":1}}],[\"因此不需要显式的锁和同步机制\",{\"1\":{\"282\":1}}],[\"因此速度最快\",{\"1\":{\"414\":1,\"1628\":1}}],[\"因此上面的依赖等同于下面\",{\"1\":{\"382\":1}}],[\"因此会降低吞吐量\",{\"1\":{\"1470\":1}}],[\"因此会产生经常变化的执行计划\",{\"1\":{\"721\":1}}],[\"因此会用到连接池\",{\"1\":{\"672\":1}}],[\"因此会检查\",{\"1\":{\"623\":1}}],[\"因此会通过\",{\"1\":{\"382\":1}}],[\"因此会增加程序的部署成本\",{\"1\":{\"272\":1}}],[\"因此会增加程序的编译时间\",{\"1\":{\"272\":1}}],[\"因此近乎成为了\",{\"1\":{\"376\":1}}],[\"因此一个stream流仅有一个\",{\"1\":{\"312\":1}}],[\"因此需要设计一套复杂的大规模计算引擎来实现运价的计算\",{\"1\":{\"1732\":1}}],[\"因此需要设计大小可变的\",{\"1\":{\"788\":1}}],[\"因此需要\",{\"1\":{\"1677\":1}}],[\"因此需要剪枝\",{\"1\":{\"1673\":1}}],[\"因此需要确保两份日志的一致性\",{\"1\":{\"1556\":1}}],[\"因此需要定时把\",{\"1\":{\"1555\":1}}],[\"因此需要定期\",{\"1\":{\"1219\":1}}],[\"因此需要一种同步机制\",{\"1\":{\"1435\":1}}],[\"因此需要使用多线程提高效率\",{\"1\":{\"1363\":1}}],[\"因此需要分布式事务来保证这些不同服务节点的事务要么全部完成\",{\"1\":{\"1277\":1}}],[\"因此需要根据实际的业务决定节点数量\",{\"1\":{\"1194\":1}}],[\"因此需要在wsl下用root新建一个用于远程连接的用户\",{\"1\":{\"1151\":1}}],[\"因此需要在同一个域名下\",{\"1\":{\"22\":1}}],[\"因此需要追踪\",{\"1\":{\"789\":1}}],[\"因此需要为每个\",{\"1\":{\"788\":1}}],[\"因此需要将\",{\"1\":{\"788\":1}}],[\"因此需要语义分析对结构上正确的源程序进行上下文相关性质的检查\",{\"1\":{\"262\":1}}],[\"因此已经被标记废弃\",{\"1\":{\"196\":1}}],[\"因此\",{\"1\":{\"148\":1,\"154\":2,\"171\":1,\"492\":1,\"563\":1,\"690\":1,\"693\":1,\"738\":1,\"741\":1,\"749\":1,\"799\":1,\"999\":1,\"1045\":1,\"1075\":1,\"1086\":1,\"1298\":1,\"1335\":1,\"1405\":1,\"1420\":1,\"1435\":1,\"1440\":2,\"1443\":1,\"1445\":2,\"1465\":1,\"1512\":1,\"1514\":1,\"1524\":1,\"1555\":1,\"1561\":1,\"1628\":1,\"1665\":1,\"1791\":1}}],[\"因此比基于锁的\",{\"1\":{\"148\":1}}],[\"因此必须保证该变量为\",{\"1\":{\"146\":1}}],[\"因此必须配合\",{\"1\":{\"139\":1}}],[\"因此多线程下指令重排可能导致内存可见性问题\",{\"1\":{\"143\":1}}],[\"因此此方案基本不会使用\",{\"1\":{\"20\":1}}],[\"因此出现了\",{\"1\":{\"17\":1}}],[\"因此说\",{\"1\":{\"5\":1}}],[\"中继连通\",{\"1\":{\"1860\":1}}],[\"中继日志中\",{\"1\":{\"1563\":1}}],[\"中途还偶遇了同车的黄毛姐姐\",{\"1\":{\"1846\":1}}],[\"中途丢失了\",{\"1\":{\"461\":1}}],[\"中国人在这片荒原上造出了一条天路\",{\"1\":{\"1833\":1}}],[\"中秋节跑去山海关兜了一圈\",{\"1\":{\"1825\":1}}],[\"中开启\",{\"1\":{\"1791\":1}}],[\"中这条语句的调用方和参数都不能为空\",{\"1\":{\"1781\":1}}],[\"中东地区的一个秘契主义族教群体\",{\"1\":{\"1767\":1}}],[\"中航信的gds又与其它gds系统共享数据\",{\"1\":{\"1734\":1}}],[\"中位数就是两个堆顶的平均值\",{\"1\":{\"1658\":1}}],[\"中加载\",{\"1\":{\"1648\":1}}],[\"中央仓库\",{\"1\":{\"1632\":1}}],[\"中消息必须先经过\",{\"1\":{\"1628\":1}}],[\"中消息传输基于流的方式\",{\"1\":{\"845\":1}}],[\"中一致性\",{\"1\":{\"1618\":1}}],[\"中仅存一份private\",{\"1\":{\"1599\":1}}],[\"中任意选择数据淘汰\",{\"1\":{\"1574\":2}}],[\"中挑选最不经常使用的数据淘汰\",{\"1\":{\"1574\":1}}],[\"中挑选最近最少使用的数据淘汰\",{\"1\":{\"1574\":1}}],[\"中挑选将要过期的数据淘汰\",{\"1\":{\"1574\":1}}],[\"中引用的对象\",{\"1\":{\"1522\":1}}],[\"中苏醒\",{\"1\":{\"1487\":1}}],[\"中苏醒一次\",{\"1\":{\"1487\":1}}],[\"中哪个\",{\"1\":{\"1435\":1}}],[\"中进行分析\",{\"1\":{\"1396\":1}}],[\"中转av批量查询接口需求中\",{\"1\":{\"1363\":1}}],[\"中通过引用\",{\"1\":{\"1351\":1}}],[\"中但不在\",{\"1\":{\"1342\":1}}],[\"中心调度\",{\"1\":{\"1221\":1}}],[\"中心化两种模式\",{\"1\":{\"1215\":1}}],[\"中心扩展\",{\"1\":{\"993\":1}}],[\"中序号比自己小的所有节点\",{\"1\":{\"1184\":1}}],[\"中查询测试结果\",{\"1\":{\"1155\":1}}],[\"中查找\",{\"1\":{\"883\":1}}],[\"中执行删除语句\",{\"1\":{\"1155\":1}}],[\"中执行查询语句\",{\"1\":{\"1155\":1}}],[\"中有两个关闭的方法\",{\"1\":{\"1116\":1}}],[\"中有多个\",{\"1\":{\"494\":1}}],[\"中线程组层级关系如下\",{\"1\":{\"1099\":1}}],[\"中就会记录下对应的\",{\"1\":{\"1074\":1}}],[\"中调用事务方法\",{\"1\":{\"1041\":1}}],[\"中字符串属性值的占位符进行替换\",{\"1\":{\"1026\":1}}],[\"中获得\",{\"1\":{\"1006\":1}}],[\"中获取任务\",{\"1\":{\"1115\":1}}],[\"中获取\",{\"1\":{\"25\":1}}],[\"中详细分析\",{\"1\":{\"863\":1}}],[\"中声明变长\",{\"1\":{\"844\":1}}],[\"中含有\",{\"1\":{\"839\":1}}],[\"中写入数据时\",{\"1\":{\"827\":1}}],[\"中读取数据时\",{\"1\":{\"827\":1}}],[\"中可以通过\",{\"1\":{\"1513\":1}}],[\"中可以通过设置\",{\"1\":{\"423\":1}}],[\"中可以使用\",{\"1\":{\"826\":1}}],[\"中止的\",{\"1\":{\"733\":1}}],[\"中等待执行\",{\"1\":{\"1224\":1}}],[\"中等\",{\"1\":{\"681\":1}}],[\"中等大小的blob\",{\"1\":{\"664\":1}}],[\"中等长度文本数据\",{\"1\":{\"663\":1}}],[\"中完成排序操作\",{\"1\":{\"616\":1}}],[\"中已经删除缓存模块\",{\"1\":{\"570\":1}}],[\"中锁定粒度介于行级锁和表级锁中间的一种锁\",{\"1\":{\"563\":1}}],[\"中取出对应的\",{\"1\":{\"544\":1}}],[\"中取消息而不管是谁发布的\",{\"1\":{\"396\":1}}],[\"中最重要的日志之一\",{\"1\":{\"642\":1}}],[\"中最复杂也是最强大的元素\",{\"1\":{\"532\":1}}],[\"中最大的一块内存区\",{\"1\":{\"210\":1}}],[\"中创建堆外内存的重要方式\",{\"1\":{\"1136\":1}}],[\"中创建占位符\",{\"1\":{\"530\":1}}],[\"中创建主要基于\",{\"1\":{\"136\":1}}],[\"中配置\",{\"1\":{\"506\":1}}],[\"中偏移量不存在时\",{\"1\":{\"493\":1}}],[\"中所有的数据在存储前都计算\",{\"1\":{\"1309\":1}}],[\"中所有修改的次序\",{\"1\":{\"1174\":1}}],[\"中所有任务\",{\"1\":{\"1113\":4}}],[\"中所有数据都写入\",{\"1\":{\"789\":1}}],[\"中所有记录的最大时间戳作为该文件的时间戳\",{\"1\":{\"477\":1}}],[\"中所有副本均宕机的情况下\",{\"1\":{\"470\":1}}],[\"中默认的日志保存时间为\",{\"1\":{\"477\":1}}],[\"中存储\",{\"1\":{\"1077\":1}}],[\"中存储目标的引用\",{\"1\":{\"1015\":1}}],[\"中存储磁盘\",{\"1\":{\"474\":1}}],[\"中存活的\",{\"1\":{\"470\":1}}],[\"中选出一个新\",{\"1\":{\"471\":1}}],[\"中携带\",{\"1\":{\"471\":1}}],[\"中数据保存的时间\",{\"1\":{\"467\":1}}],[\"中指producer不论向broker发送多少次重复数据\",{\"1\":{\"461\":1}}],[\"中拉取消息发送到\",{\"1\":{\"450\":1}}],[\"中先读取数据\",{\"1\":{\"448\":1}}],[\"中移除\",{\"1\":{\"422\":1}}],[\"中而不用管谁来取\",{\"1\":{\"396\":1}}],[\"中间点权或延远权\",{\"0\":{\"1746\":1}}],[\"中间件\",{\"1\":{\"1625\":1}}],[\"中间磁道访问频率高\",{\"1\":{\"1472\":1}}],[\"中间是未定义\",{\"1\":{\"1444\":1}}],[\"中间操作\",{\"1\":{\"1068\":8}}],[\"中间状态\",{\"1\":{\"747\":1}}],[\"中间元素向上分裂形成新的节点\",{\"1\":{\"698\":1}}],[\"中间表至少包含两个外键\",{\"1\":{\"601\":1}}],[\"中间方法\",{\"1\":{\"312\":1}}],[\"中间用指针分隔\",{\"1\":{\"214\":1}}],[\"中对应的就是线程私有的程序计数器\",{\"1\":{\"134\":1}}],[\"中触发空闲事件时会主动发送\",{\"1\":{\"100\":1}}],[\"中构建\",{\"1\":{\"99\":1}}],[\"中找到对应的服务\",{\"1\":{\"97\":1}}],[\"中把该服务注册到\",{\"1\":{\"92\":1}}],[\"中的sdp\",{\"1\":{\"1862\":1}}],[\"中的语句合并产生的\",{\"1\":{\"1527\":1}}],[\"中的设计模式\",{\"0\":{\"1503\":1}}],[\"中的提交\",{\"1\":{\"1342\":2}}],[\"中的库存扣完就无法下单了\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"中的库存\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"中的选举轮次\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"中的每一次操作\",{\"1\":{\"1219\":1}}],[\"中的每个对象都会关联一个\",{\"1\":{\"1074\":1}}],[\"中的强一致性\",{\"1\":{\"1207\":1}}],[\"中的锁分为两类\",{\"1\":{\"1183\":1}}],[\"中的锁都是基于对象的\",{\"1\":{\"137\":1}}],[\"中的mysql服务\",{\"0\":{\"1149\":1}}],[\"中的某个线程\",{\"1\":{\"1074\":1}}],[\"中的内存布局\",{\"1\":{\"1074\":1}}],[\"中的内容全部写入\",{\"1\":{\"777\":1}}],[\"中的占位符做值替换\",{\"1\":{\"1025\":1}}],[\"中的动态代理分两类\",{\"1\":{\"1014\":1}}],[\"中的所有键值对重新计算哈希值和索引值\",{\"1\":{\"883\":1}}],[\"中的所有备份的\",{\"1\":{\"471\":1}}],[\"中的两个\",{\"1\":{\"801\":1}}],[\"中的参数或从结果集中取出一个值时\",{\"1\":{\"521\":1}}],[\"中的一个特殊主题\",{\"1\":{\"490\":1}}],[\"中的偏移量\",{\"1\":{\"474\":1}}],[\"中的消息必须先经过\",{\"1\":{\"414\":1}}],[\"中的泛型类型\",{\"1\":{\"263\":1}}],[\"中的任意操作\",{\"1\":{\"143\":2}}],[\"中的线程会在新的\",{\"1\":{\"139\":1}}],[\"中的\",{\"1\":{\"91\":1,\"450\":1,\"800\":1,\"822\":2,\"1086\":1,\"1147\":1,\"1152\":1,\"1168\":1,\"1219\":1,\"1435\":1,\"1532\":1,\"1614\":1}}],[\"中的被调服务\",{\"1\":{\"91\":1}}],[\"中文名\",{\"1\":{\"688\":1}}],[\"中文教程\",{\"1\":{\"85\":1}}],[\"中文版\",{\"1\":{\"85\":1}}],[\"中为了避免和流直接打交道\",{\"1\":{\"82\":1}}],[\"中\",{\"1\":{\"17\":1,\"20\":1,\"33\":1,\"91\":1,\"92\":1,\"179\":1,\"209\":1,\"383\":1,\"406\":1,\"414\":2,\"425\":1,\"448\":2,\"475\":1,\"490\":1,\"634\":1,\"638\":1,\"647\":1,\"648\":1,\"791\":1,\"855\":1,\"920\":1,\"998\":1,\"1007\":1,\"1010\":1,\"1012\":1,\"1014\":1,\"1034\":1,\"1074\":1,\"1113\":2,\"1114\":1,\"1116\":1,\"1162\":2,\"1167\":1,\"1219\":1,\"1224\":2,\"1279\":1,\"1290\":2,\"1351\":1,\"1372\":2,\"1375\":1,\"1395\":2,\"1405\":2,\"1420\":1,\"1443\":1,\"1454\":1,\"1479\":1,\"1487\":1,\"1532\":1,\"1535\":1,\"1546\":1,\"1555\":1,\"1563\":2,\"1567\":2,\"1590\":1,\"1628\":2,\"1629\":1,\"1642\":2}}],[\"中基于\",{\"1\":{\"9\":1}}],[\"中断上下文切换\",{\"1\":{\"1454\":1}}],[\"中断是一种异步的事件处理机制\",{\"1\":{\"1437\":1}}],[\"中断是系统用来响应硬件设备请求的一种机制\",{\"1\":{\"1437\":1}}],[\"中断空闲的worker\",{\"1\":{\"1120\":1}}],[\"中断空闲线程\",{\"1\":{\"1116\":1}}],[\"中断所有空闲线程\",{\"1\":{\"1116\":1}}],[\"中断事件\",{\"1\":{\"1092\":1}}],[\"中断操作会根据线程所处的不同状态有不同结果\",{\"1\":{\"1092\":1}}],[\"中断标记置\",{\"1\":{\"1092\":4}}],[\"中断标记\",{\"1\":{\"1087\":1}}],[\"中断相关的方法\",{\"1\":{\"9\":1}}],[\"中断\",{\"0\":{\"1437\":1},\"1\":{\"6\":2,\"156\":1,\"172\":1,\"365\":1,\"1481\":1}}],[\"中并没有使用\",{\"1\":{\"3\":1}}],[\"校验数据库完整性\",{\"1\":{\"1346\":1}}],[\"校验和\",{\"1\":{\"1309\":1}}],[\"校验线程数\",{\"1\":{\"1114\":1}}],[\"校验状态\",{\"1\":{\"1114\":2,\"1115\":1}}],[\"校验是否超时\",{\"1\":{\"1091\":1}}],[\"校验是否已经关联\",{\"1\":{\"184\":1}}],[\"校验事务当前状态\",{\"1\":{\"1050\":1}}],[\"校验页是否完整\",{\"1\":{\"688\":1}}],[\"校验权限后\",{\"1\":{\"570\":1}}],[\"校验范围为magic至value之间\",{\"1\":{\"474\":1}}],[\"校验索引\",{\"1\":{\"59\":1}}],[\"校验空值\",{\"1\":{\"59\":1}}],[\"校验参数\",{\"1\":{\"59\":1}}],[\"校验用户信息\",{\"1\":{\"15\":1}}],[\"校验通过后\",{\"1\":{\"14\":1}}],[\"校验\",{\"1\":{\"6\":1,\"59\":1,\"1120\":1}}],[\"队伍的另一边坐着一些乞讨的妇人和儿童\",{\"1\":{\"1836\":1}}],[\"队空则返回\",{\"1\":{\"184\":1}}],[\"队头加入元素\",{\"1\":{\"988\":1}}],[\"队头引用实例\",{\"1\":{\"184\":1}}],[\"队头了\",{\"1\":{\"6\":1}}],[\"队列模型\",{\"1\":{\"1626\":1}}],[\"队列锁中\",{\"1\":{\"1516\":1}}],[\"队列锁的一个结点\",{\"1\":{\"1516\":1}}],[\"队列容器为空时\",{\"1\":{\"1499\":1}}],[\"队列容器已满时\",{\"1\":{\"1499\":1}}],[\"队列和\",{\"1\":{\"1484\":1}}],[\"队列削峰\",{\"1\":{\"1375\":1}}],[\"队列来实现独占锁\",{\"1\":{\"1114\":1}}],[\"队列里有任务时\",{\"1\":{\"872\":1}}],[\"队列里没有任务时\",{\"1\":{\"872\":1}}],[\"队列里可以堆放多个\",{\"1\":{\"814\":1}}],[\"队列满了无法添加\",{\"1\":{\"1629\":1}}],[\"队列满了\",{\"1\":{\"856\":1}}],[\"队列的每个元素是一个批记录producerbatch\",{\"1\":{\"450\":1}}],[\"队列的同步状态\",{\"1\":{\"3\":1}}],[\"队列信息等\",{\"1\":{\"427\":1}}],[\"队列消息长度达到限制\",{\"1\":{\"425\":1}}],[\"队列一样\",{\"1\":{\"425\":1}}],[\"队列可以在集群中的机器上进行镜像\",{\"1\":{\"412\":1}}],[\"队列非空\",{\"1\":{\"184\":1}}],[\"队列长度即当前层结点个数\",{\"1\":{\"1001\":1}}],[\"队列长度\",{\"1\":{\"184\":3}}],[\"队列为空时\",{\"1\":{\"162\":1}}],[\"队列已满时\",{\"1\":{\"162\":1}}],[\"队列\",{\"0\":{\"987\":1},\"1\":{\"6\":1,\"187\":1,\"189\":1,\"304\":1,\"856\":1,\"1414\":2}}],[\"队列构造\",{\"0\":{\"4\":1}}],[\"队列节点所关联线程的几个状态常量\",{\"1\":{\"3\":1}}],[\"队列本身主要有\",{\"1\":{\"3\":1}}],[\"eureka\",{\"1\":{\"1618\":1}}],[\"ecc\",{\"1\":{\"1402\":1}}],[\"ecdhe\",{\"1\":{\"1401\":1,\"1402\":2}}],[\"echo\",{\"1\":{\"1197\":4,\"1685\":2,\"1687\":1,\"1701\":2}}],[\"eden\",{\"1\":{\"1367\":1,\"1524\":6,\"1529\":1}}],[\"edition\",{\"1\":{\"1246\":1}}],[\"edits\",{\"1\":{\"1219\":6}}],[\"ehcache\",{\"1\":{\"1253\":1,\"1269\":1,\"1613\":1}}],[\"eterm\",{\"1\":{\"1728\":2}}],[\"etag\",{\"1\":{\"1250\":1,\"1399\":1,\"1400\":1}}],[\"etc\",{\"1\":{\"1150\":1,\"1155\":1,\"1217\":1,\"1311\":1,\"1691\":1,\"1697\":2,\"1701\":1}}],[\"epfd\",{\"1\":{\"1487\":2}}],[\"ephemeralowner\",{\"1\":{\"1174\":1}}],[\"ephemeral\",{\"1\":{\"1173\":1,\"1181\":1}}],[\"epoll是内核提供给用户态的多路复用系统调用\",{\"1\":{\"1487\":1}}],[\"epoll\",{\"1\":{\"784\":1,\"809\":1,\"919\":1,\"1478\":1,\"1487\":10,\"1504\":1,\"1571\":1}}],[\"epoch＞\",{\"1\":{\"940\":2,\"941\":1}}],[\"epoch\",{\"1\":{\"465\":2,\"471\":1,\"941\":1,\"942\":3,\"1077\":1,\"1204\":5}}],[\"eetop\",{\"1\":{\"1087\":1}}],[\"ef\",{\"1\":{\"1631\":1,\"1699\":1}}],[\"effective\",{\"0\":{\"1246\":1},\"1\":{\"1246\":1}}],[\"effectively\",{\"1\":{\"1049\":1}}],[\"efak\",{\"1\":{\"447\":2}}],[\"eof\",{\"1\":{\"913\":1}}],[\"eol\",{\"1\":{\"382\":1}}],[\"eye\",{\"1\":{\"657\":1}}],[\"ejb\",{\"1\":{\"526\":1}}],[\"earth\",{\"1\":{\"1718\":1}}],[\"earlysingletonobjects\",{\"1\":{\"1028\":3,\"1382\":3,\"1599\":1}}],[\"earliest\",{\"1\":{\"493\":1}}],[\"each\",{\"1\":{\"304\":1,\"636\":1}}],[\"erlang\",{\"1\":{\"410\":1,\"411\":1,\"435\":1,\"1628\":1}}],[\"err表示不支持psync命令\",{\"1\":{\"935\":1}}],[\"err\",{\"1\":{\"43\":1}}],[\"error日志疯了\",{\"1\":{\"1781\":1}}],[\"errors\",{\"1\":{\"846\":1}}],[\"errorcontext\",{\"1\":{\"541\":2}}],[\"errormessage\",{\"1\":{\"391\":1}}],[\"error\",{\"1\":{\"9\":3,\"14\":8,\"15\":1,\"62\":2,\"77\":1,\"93\":2,\"188\":1,\"345\":1,\"355\":1,\"378\":1,\"384\":2,\"390\":1,\"391\":3,\"417\":1,\"507\":1,\"596\":1,\"642\":1,\"1015\":1,\"1049\":1,\"1055\":1,\"1061\":1,\"1135\":1,\"1244\":1,\"1347\":1,\"1533\":2,\"1858\":2,\"1871\":2}}],[\"evilpan\",{\"1\":{\"1860\":3}}],[\"eviction\",{\"1\":{\"533\":1,\"1574\":1}}],[\"eviction=\",{\"1\":{\"533\":1}}],[\"evport\",{\"1\":{\"919\":1}}],[\"everysec\",{\"1\":{\"916\":1,\"1577\":1}}],[\"eventually\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"eventual\",{\"1\":{\"1207\":2}}],[\"events选项决定了服务器所发送通知的类型\",{\"1\":{\"909\":1}}],[\"eventexecutor\",{\"1\":{\"818\":1}}],[\"eventexecutorgroup\",{\"1\":{\"817\":2}}],[\"eventlooptaskqueuefactory\",{\"1\":{\"870\":1}}],[\"eventloop\",{\"0\":{\"815\":1,\"816\":1},\"1\":{\"811\":1,\"814\":1,\"816\":5,\"817\":7,\"822\":6,\"865\":3}}],[\"eventloopgroup\",{\"0\":{\"817\":1},\"1\":{\"93\":2,\"817\":3}}],[\"event2\",{\"1\":{\"84\":2}}],[\"event\",{\"1\":{\"84\":4,\"388\":3,\"439\":1,\"807\":1,\"909\":1}}],[\"eventbus\",{\"0\":{\"84\":1},\"1\":{\"84\":8}}],[\"evalsha\",{\"1\":{\"965\":1,\"967\":6}}],[\"evalnode\",{\"1\":{\"541\":11}}],[\"eval\",{\"0\":{\"965\":1},\"1\":{\"228\":1,\"729\":2,\"964\":1,\"965\":2,\"967\":3}}],[\"e2\",{\"1\":{\"66\":1}}],[\"e1\",{\"1\":{\"66\":1}}],[\"emit\",{\"1\":{\"1859\":4}}],[\"emby\",{\"0\":{\"1809\":1},\"1\":{\"1811\":1}}],[\"embeddedvalueresolvers\",{\"1\":{\"1025\":1}}],[\"embeddedchannel\",{\"1\":{\"823\":3,\"844\":2,\"850\":2}}],[\"embstr在某些条件下会自动转换为raw编码的字符串对象\",{\"1\":{\"896\":1}}],[\"embstr连续存储能够更好的利用缓存带来的优势\",{\"1\":{\"896\":1}}],[\"embstr与raw编码联系\",{\"1\":{\"896\":1}}],[\"embstr\",{\"1\":{\"896\":1}}],[\"employee\",{\"1\":{\"579\":1,\"580\":1,\"583\":11,\"584\":1,\"585\":3,\"586\":1,\"587\":2,\"602\":2,\"603\":2,\"604\":1,\"605\":4,\"608\":2,\"609\":4,\"610\":3,\"611\":3}}],[\"emp\",{\"1\":{\"576\":2,\"596\":1,\"599\":4,\"604\":1}}],[\"empty\",{\"1\":{\"58\":1,\"70\":1,\"1095\":3}}],[\"emptyoptional\",{\"1\":{\"58\":1}}],[\"email查看最终生效的某个配置和来源\",{\"1\":{\"1311\":1}}],[\"email\",{\"1\":{\"42\":1,\"47\":1,\"530\":4,\"707\":2,\"1336\":1}}],[\"establishment\",{\"1\":{\"1860\":1}}],[\"established\",{\"1\":{\"856\":3,\"1409\":3,\"1420\":1,\"1487\":1}}],[\"es的一个索引由三部分组成\",{\"1\":{\"42\":1}}],[\"es的使用场景非常丰富\",{\"1\":{\"31\":1}}],[\"es7\",{\"1\":{\"38\":1}}],[\"es服务器提供了http接口来对索引和文档进行crud\",{\"1\":{\"38\":1}}],[\"es是面向文档存储的\",{\"1\":{\"34\":1}}],[\"es更擅长海量数据的搜索\",{\"1\":{\"34\":1}}],[\"es作为一个数据存储系统\",{\"1\":{\"34\":1}}],[\"es\",{\"1\":{\"31\":1,\"33\":1,\"34\":2,\"697\":1},\"2\":{\"55\":1}}],[\"elapsedtimems\",{\"1\":{\"1180\":1}}],[\"elapsedtimems=5000\",{\"1\":{\"1180\":1}}],[\"elasticsearch\",{\"0\":{\"30\":1},\"1\":{\"31\":3,\"33\":1,\"39\":1,\"52\":1,\"808\":1}}],[\"eligible\",{\"1\":{\"1116\":1}}],[\"election\",{\"1\":{\"470\":1}}],[\"ele\",{\"1\":{\"357\":2}}],[\"element方法抛出一个nosuchelementexception异常\",{\"1\":{\"987\":1}}],[\"elementtype\",{\"1\":{\"348\":8,\"1057\":1}}],[\"element\",{\"1\":{\"263\":1,\"987\":1,\"988\":2}}],[\"elementset\",{\"1\":{\"66\":1}}],[\"elseif\",{\"1\":{\"630\":1,\"631\":1}}],[\"else\",{\"1\":{\"6\":12,\"8\":4,\"9\":4,\"15\":2,\"188\":1,\"195\":1,\"196\":1,\"383\":1,\"420\":1,\"456\":1,\"541\":4,\"542\":2,\"596\":4,\"630\":1,\"631\":1,\"632\":2,\"786\":2,\"788\":2,\"789\":2,\"818\":1,\"865\":1,\"866\":1,\"991\":3,\"993\":2,\"995\":1,\"996\":1,\"998\":6,\"1002\":1,\"1009\":1,\"1015\":1,\"1016\":1,\"1049\":2,\"1055\":1,\"1059\":1,\"1088\":1,\"1091\":2,\"1095\":1,\"1113\":2,\"1116\":1,\"1120\":1,\"1136\":1,\"1263\":2,\"1651\":1,\"1654\":1}}],[\"equals\",{\"0\":{\"1535\":1},\"1\":{\"541\":1,\"1015\":3,\"1244\":1,\"1535\":3}}],[\"equal\",{\"1\":{\"60\":1,\"722\":1}}],[\"eq\",{\"1\":{\"15\":1,\"728\":2}}],[\"e\",{\"1\":{\"14\":1,\"93\":2,\"121\":1,\"148\":2,\"154\":3,\"161\":2,\"183\":2,\"188\":3,\"301\":1,\"391\":3,\"456\":3,\"461\":1,\"507\":1,\"603\":6,\"604\":6,\"611\":3,\"675\":2,\"767\":2,\"788\":2,\"791\":4,\"792\":4,\"796\":2,\"797\":4,\"822\":3,\"831\":1,\"864\":2,\"865\":2,\"870\":2,\"988\":2,\"1009\":2,\"1038\":2,\"1096\":2,\"1135\":3,\"1169\":2,\"1173\":1,\"1226\":1,\"1244\":1,\"1263\":2,\"1690\":1,\"1699\":1,\"1735\":1,\"1858\":2}}],[\"enalbeautoconfiguration\",{\"1\":{\"1608\":1}}],[\"enablejpaauditing\",{\"1\":{\"1608\":1}}],[\"enableautoconfiguration\",{\"1\":{\"1598\":4}}],[\"enablecaching\",{\"1\":{\"1269\":2,\"1368\":1,\"1613\":1}}],[\"enabletx\",{\"1\":{\"1059\":2}}],[\"enabletransactionmanagement\",{\"1\":{\"1040\":1,\"1056\":1,\"1057\":3}}],[\"enabled=off\",{\"1\":{\"729\":1}}],[\"enabled=on\",{\"1\":{\"729\":1}}],[\"enabled\",{\"1\":{\"672\":1,\"1054\":1,\"1347\":1}}],[\"enable配置为\",{\"1\":{\"470\":1}}],[\"enable\",{\"1\":{\"461\":2,\"467\":1,\"485\":1,\"491\":1,\"1695\":1}}],[\"enablerabbit\",{\"1\":{\"418\":2}}],[\"enableredishttpsession\",{\"1\":{\"24\":1,\"25\":1}}],[\"enablewait\",{\"1\":{\"8\":1}}],[\"english\",{\"1\":{\"1246\":1}}],[\"engines\",{\"1\":{\"677\":1}}],[\"engine=innodb\",{\"1\":{\"677\":1,\"1357\":1,\"1358\":1}}],[\"engine=myisam\",{\"1\":{\"569\":1}}],[\"engine\",{\"1\":{\"639\":2,\"640\":1,\"671\":1,\"730\":1,\"741\":1,\"1567\":1}}],[\"enhancer\",{\"1\":{\"1009\":7,\"1016\":7,\"1022\":1,\"1532\":1}}],[\"enhanced\",{\"1\":{\"263\":1}}],[\"encrypted\",{\"1\":{\"1402\":2}}],[\"enc\",{\"1\":{\"913\":2}}],[\"encoding标记占8\",{\"1\":{\"913\":1}}],[\"encoding+integer\",{\"1\":{\"913\":1}}],[\"encoding\",{\"1\":{\"888\":1,\"892\":2,\"895\":2,\"913\":3,\"1398\":2}}],[\"encoding=\",{\"1\":{\"357\":1,\"506\":2}}],[\"encoder\",{\"1\":{\"101\":2}}],[\"encode\",{\"1\":{\"14\":1,\"771\":3,\"774\":2,\"789\":1,\"792\":1,\"797\":1,\"849\":1,\"850\":2}}],[\"en\",{\"1\":{\"506\":2,\"666\":2}}],[\"environment\",{\"1\":{\"541\":2,\"542\":5,\"1054\":6,\"1607\":1,\"1854\":1}}],[\"environmentselement\",{\"1\":{\"541\":1}}],[\"environments\",{\"0\":{\"524\":1},\"1\":{\"541\":1}}],[\"environments>\",{\"1\":{\"506\":1,\"524\":1}}],[\"environment>\",{\"1\":{\"506\":1,\"524\":1}}],[\"env\",{\"1\":{\"231\":1,\"1217\":1,\"1701\":1,\"1791\":1}}],[\"ensureclassinitialized\",{\"1\":{\"188\":2,\"1139\":1}}],[\"enforce\",{\"1\":{\"119\":1,\"1228\":1}}],[\"entry结构记录段中的属性\",{\"1\":{\"694\":1}}],[\"entrydate\",{\"1\":{\"586\":1,\"611\":1}}],[\"entryset\",{\"1\":{\"305\":1}}],[\"entrylist\",{\"1\":{\"139\":2,\"1074\":2,\"1076\":1}}],[\"entry\",{\"1\":{\"69\":1,\"154\":6,\"305\":2,\"667\":1,\"693\":1,\"749\":1,\"751\":1,\"892\":2,\"1227\":1,\"1281\":6,\"1514\":4,\"1620\":6}}],[\"entity层\",{\"1\":{\"1604\":1}}],[\"entityutils\",{\"1\":{\"15\":2}}],[\"entity\",{\"1\":{\"14\":6,\"418\":3,\"1608\":2}}],[\"enum类型可以在初始化时\",{\"1\":{\"1245\":1}}],[\"enumeratedevices\",{\"1\":{\"1853\":1}}],[\"enumerated\",{\"1\":{\"1608\":1}}],[\"enumerate\",{\"1\":{\"993\":2,\"1095\":2}}],[\"enumordinaltypehandler\",{\"1\":{\"521\":1}}],[\"enum\",{\"1\":{\"196\":1,\"352\":1,\"663\":1,\"1089\":1}}],[\"enumhashbimap\",{\"1\":{\"68\":1}}],[\"enumbimap\",{\"1\":{\"68\":1}}],[\"endian\",{\"1\":{\"828\":3}}],[\"end日志类型标识一个需要保证原子性的redo日志组结束\",{\"1\":{\"739\":1}}],[\"end\",{\"1\":{\"60\":1,\"471\":1,\"596\":4,\"628\":1,\"630\":1,\"631\":3,\"632\":2,\"633\":3,\"634\":2,\"635\":1,\"636\":1,\"1263\":1,\"1567\":2}}],[\"enqueuefrompending\",{\"1\":{\"188\":1}}],[\"enqueued\",{\"1\":{\"184\":3,\"186\":1,\"189\":2}}],[\"enqueue\",{\"1\":{\"8\":3,\"184\":2,\"189\":2,\"196\":1}}],[\"enqueuing\",{\"1\":{\"8\":1}}],[\"existing\",{\"1\":{\"779\":1,\"1049\":1}}],[\"exist\",{\"1\":{\"748\":1,\"1008\":1,\"1368\":1}}],[\"exists转换\",{\"1\":{\"726\":1}}],[\"exists\",{\"1\":{\"43\":3,\"105\":1,\"107\":2,\"108\":2,\"574\":2,\"575\":1,\"622\":1,\"628\":1,\"634\":2,\"749\":1,\"779\":1,\"964\":1,\"966\":1,\"1226\":1}}],[\"exit\",{\"0\":{\"1093\":1},\"1\":{\"634\":2,\"1093\":3,\"1450\":1,\"1465\":1}}],[\"exactly\",{\"1\":{\"461\":1}}],[\"examined\",{\"1\":{\"645\":1}}],[\"examle\",{\"1\":{\"89\":1}}],[\"exampleservice\",{\"1\":{\"1713\":1}}],[\"exampleplugin\",{\"1\":{\"523\":2}}],[\"exampleobjectfactory\",{\"1\":{\"522\":1}}],[\"example\",{\"1\":{\"79\":1,\"89\":1,\"453\":1,\"506\":1,\"518\":1,\"522\":1,\"523\":1,\"1792\":12}}],[\"exec命令用于执行事务\",{\"1\":{\"959\":1}}],[\"exectype\",{\"1\":{\"542\":2}}],[\"executionexception\",{\"1\":{\"1369\":1}}],[\"execute提交到线程池后\",{\"1\":{\"1106\":1}}],[\"execute三个阶段\",{\"1\":{\"729\":1}}],[\"execute=name\",{\"1\":{\"675\":1}}],[\"execute\",{\"1\":{\"332\":1,\"544\":2,\"817\":1,\"818\":1,\"865\":1,\"871\":2,\"1039\":2,\"1055\":3,\"1113\":7,\"1263\":1,\"1433\":1,\"1511\":4}}],[\"executor顶层接口里只定义了一个execute\",{\"1\":{\"1111\":1}}],[\"executor框架\",{\"1\":{\"1104\":1}}],[\"executortype\",{\"1\":{\"542\":10}}],[\"executors\",{\"0\":{\"1110\":1},\"1\":{\"77\":2,\"332\":1,\"334\":1,\"822\":1,\"1106\":1,\"1108\":1,\"1110\":1,\"1369\":1}}],[\"executorservice\",{\"1\":{\"77\":1,\"332\":1,\"816\":1,\"822\":1,\"1106\":4,\"1111\":1}}],[\"executor\",{\"1\":{\"77\":3,\"163\":15,\"513\":1,\"523\":2,\"540\":1,\"542\":17,\"818\":4,\"869\":1,\"870\":3,\"871\":2,\"1104\":1,\"1110\":2,\"1111\":1,\"1369\":5,\"1511\":2}}],[\"exec\",{\"1\":{\"128\":2,\"958\":1,\"1229\":1,\"1571\":1,\"1634\":1}}],[\"ext2\",{\"1\":{\"1474\":1}}],[\"extract\",{\"1\":{\"1213\":1}}],[\"extra\",{\"1\":{\"569\":1,\"706\":1,\"728\":1}}],[\"ext\",{\"1\":{\"113\":3,\"118\":1,\"254\":2}}],[\"external\",{\"1\":{\"113\":4,\"117\":1,\"1226\":1,\"1228\":1,\"1791\":1}}],[\"extentionclassloader\",{\"1\":{\"1528\":1}}],[\"extent\",{\"0\":{\"693\":1}}],[\"extensible\",{\"1\":{\"357\":1,\"409\":1}}],[\"extension\",{\"1\":{\"254\":1}}],[\"extensions\",{\"1\":{\"236\":1}}],[\"extensionloader\",{\"1\":{\"91\":1,\"99\":1}}],[\"extendedtypesenabled=true开启\",{\"1\":{\"1169\":1}}],[\"extended\",{\"1\":{\"129\":1}}],[\"extends\",{\"1\":{\"3\":1,\"9\":3,\"73\":1,\"78\":1,\"153\":1,\"154\":1,\"163\":7,\"184\":9,\"188\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":3,\"306\":1,\"849\":1,\"851\":3,\"1015\":1,\"1016\":1,\"1047\":1,\"1058\":1,\"1059\":1,\"1097\":2,\"1113\":4,\"1114\":1}}],[\"expeed\",{\"1\":{\"1799\":1}}],[\"experimental\",{\"1\":{\"1858\":1}}],[\"experiment\",{\"1\":{\"1337\":3}}],[\"expected\",{\"1\":{\"148\":1,\"1137\":6}}],[\"explain结束结束后\",{\"1\":{\"729\":1}}],[\"explain的每条记录都对应着某个单表的访问方法\",{\"1\":{\"728\":1}}],[\"explain\",{\"0\":{\"727\":1},\"1\":{\"703\":5,\"705\":3,\"706\":1,\"727\":2,\"729\":1}}],[\"exp\",{\"1\":{\"357\":2,\"1567\":1}}],[\"expungestaleentry\",{\"1\":{\"154\":1,\"1514\":3}}],[\"export\",{\"1\":{\"121\":2,\"1701\":1}}],[\"expression\",{\"1\":{\"1023\":1,\"1380\":2}}],[\"expressions\",{\"1\":{\"263\":1}}],[\"expr\",{\"1\":{\"105\":2,\"595\":1,\"596\":1}}],[\"expiretime\",{\"1\":{\"913\":1}}],[\"expireifneeded函数实现\",{\"1\":{\"908\":1}}],[\"expireat\",{\"1\":{\"908\":1}}],[\"expireafterwrite\",{\"1\":{\"74\":1}}],[\"expireafteraccess\",{\"1\":{\"74\":1}}],[\"expire\",{\"1\":{\"643\":1,\"901\":1,\"908\":1}}],[\"expires\",{\"1\":{\"15\":1,\"424\":1,\"1250\":1,\"1399\":1,\"1574\":4}}],[\"expiresin\",{\"1\":{\"15\":3}}],[\"excludename\",{\"1\":{\"1598\":1}}],[\"exclude\",{\"1\":{\"1598\":1}}],[\"exclusive\",{\"1\":{\"418\":1,\"560\":1,\"1435\":1,\"1516\":1}}],[\"exclusivenode\",{\"1\":{\"3\":1,\"4\":1,\"6\":1}}],[\"exclusiveownerthread\",{\"1\":{\"3\":1,\"6\":1}}],[\"exc\",{\"1\":{\"779\":2,\"796\":2,\"797\":6}}],[\"exchange\",{\"1\":{\"404\":1,\"406\":1,\"413\":1,\"414\":4,\"417\":2,\"418\":6,\"420\":1,\"421\":4,\"425\":2,\"1137\":1,\"1402\":1,\"1625\":5,\"1628\":5,\"1629\":2,\"1792\":1}}],[\"exceptionhandler\",{\"1\":{\"1608\":1}}],[\"exceptiontranslation\",{\"1\":{\"1054\":1}}],[\"exceptions\",{\"1\":{\"240\":1}}],[\"exceptionally\",{\"1\":{\"163\":1}}],[\"exception\",{\"1\":{\"14\":4,\"15\":2,\"77\":1,\"93\":1,\"345\":1,\"347\":1,\"456\":1,\"461\":1,\"541\":1,\"811\":2,\"812\":1,\"818\":3,\"820\":2,\"821\":1,\"822\":5,\"823\":4,\"846\":1,\"849\":2,\"865\":1,\"866\":1,\"867\":1,\"873\":2,\"1010\":1,\"1038\":1,\"1055\":2,\"1061\":2,\"1095\":2,\"1128\":1,\"1181\":5,\"1188\":2,\"1192\":2,\"1533\":1,\"1713\":2}}],[\"exceeded\",{\"1\":{\"9\":3}}],[\"ex\",{\"1\":{\"6\":2,\"8\":1,\"384\":1,\"1008\":2,\"1049\":2,\"1055\":6,\"1059\":3,\"1115\":3,\"1263\":2,\"1582\":1,\"1713\":6}}],[\"<head>\",{\"1\":{\"1870\":1}}],[\"<html>\",{\"1\":{\"1870\":1}}],[\"<h1>hello\",{\"1\":{\"846\":1}}],[\"<label>filter\",{\"1\":{\"1855\":1}}],[\"<localdst>\",{\"1\":{\"1218\":1}}],[\"<localsrc>\",{\"1\":{\"1218\":2}}],[\"<logger\",{\"1\":{\"389\":2,\"391\":1}}],[\"<loggers>\",{\"1\":{\"389\":1}}],[\"<用户名>\",{\"1\":{\"1631\":1}}],[\"<进程号>\",{\"1\":{\"1631\":1}}],[\"<索引名>\",{\"1\":{\"1567\":2}}],[\"<表名>\",{\"1\":{\"1567\":3}}],[\"<排序列>\",{\"1\":{\"1567\":1}}],[\"<分组列>\",{\"1\":{\"1567\":1}}],[\"<窗口函数>\",{\"1\":{\"1567\":1}}],[\"<y>\",{\"1\":{\"977\":1}}],[\"<x>\",{\"1\":{\"977\":1}}],[\"<video\",{\"1\":{\"1870\":1}}],[\"<value>\",{\"1\":{\"975\":1,\"1862\":1}}],[\"<version>$\",{\"1\":{\"1707\":1}}],[\"<version>xxx<\",{\"1\":{\"810\":1}}],[\"<version>3\",{\"1\":{\"455\":1,\"487\":1,\"505\":2,\"1179\":1}}],[\"<version>1\",{\"1\":{\"382\":1}}],[\"<version>2\",{\"1\":{\"24\":1,\"382\":7,\"383\":1,\"1179\":2}}],[\"<body>\",{\"1\":{\"1870\":1}}],[\"<branch\",{\"1\":{\"1338\":1}}],[\"<branch>\",{\"1\":{\"1337\":1,\"1351\":1}}],[\"<bitarray>\",{\"1\":{\"974\":1,\"975\":1,\"976\":1}}],[\"<by\",{\"1\":{\"969\":1,\"971\":1}}],[\"<group>\",{\"1\":{\"1693\":1}}],[\"<group\",{\"1\":{\"1692\":3}}],[\"<groupid>io\",{\"1\":{\"810\":1}}],[\"<groupid>ch\",{\"1\":{\"382\":1}}],[\"<groupid>org\",{\"1\":{\"24\":2,\"39\":1,\"382\":7,\"383\":1,\"416\":1,\"455\":2,\"487\":2,\"505\":2,\"1179\":3,\"1707\":1,\"1717\":1}}],[\"<get\",{\"1\":{\"969\":1,\"971\":1}}],[\"<msg>时\",{\"1\":{\"956\":1}}],[\"<msg>命令不仅向某个频道发送消息\",{\"1\":{\"949\":1}}],[\"<master\",{\"1\":{\"933\":2,\"936\":2}}],[\"<mapper\",{\"1\":{\"506\":2,\"528\":3}}],[\"<mappers>\",{\"1\":{\"506\":1,\"528\":1}}],[\"<num>\",{\"1\":{\"1686\":2,\"1698\":1}}],[\"<numkeys>\",{\"1\":{\"965\":1}}],[\"<new\",{\"1\":{\"1326\":2}}],[\"<node\",{\"1\":{\"948\":1}}],[\"<name>\",{\"1\":{\"231\":2}}],[\"<限制数>\",{\"1\":{\"857\":1}}],[\"<>\",{\"1\":{\"583\":1,\"608\":1}}],[\"<=20\",{\"1\":{\"623\":1}}],[\"<=\",{\"1\":{\"583\":2,\"598\":1,\"608\":1,\"622\":2,\"634\":1,\"702\":1,\"754\":2,\"989\":1,\"993\":1,\"996\":2,\"998\":4,\"1188\":2,\"1460\":1,\"1557\":2,\"1653\":1,\"1654\":5,\"1671\":1}}],[\"<foreach\",{\"1\":{\"538\":1}}],[\"<file\",{\"1\":{\"388\":1}}],[\"<where>\",{\"1\":{\"537\":1,\"538\":1}}],[\"<when\",{\"1\":{\"536\":2}}],[\"<oldbranch>\",{\"1\":{\"1333\":1}}],[\"<option\",{\"1\":{\"1855\":5}}],[\"<opt>\",{\"1\":{\"909\":1}}],[\"<op>\",{\"1\":{\"977\":1}}],[\"<offset>表示将执行完整重同步\",{\"1\":{\"935\":1}}],[\"<offset>\",{\"1\":{\"935\":1,\"969\":1,\"971\":1,\"974\":1,\"975\":1}}],[\"<otherwise>\",{\"1\":{\"536\":1}}],[\"<objectfactory\",{\"1\":{\"522\":1}}],[\"<ip>\",{\"1\":{\"945\":1,\"947\":1,\"1396\":1}}],[\"<if\",{\"1\":{\"535\":2,\"537\":2}}],[\"<id\",{\"1\":{\"532\":1}}],[\"<interval>\",{\"1\":{\"1700\":2}}],[\"<integer>getnumber\",{\"1\":{\"1059\":1}}],[\"<include\",{\"1\":{\"531\":2}}],[\"<insert\",{\"1\":{\"530\":1}}],[\"<init>\",{\"1\":{\"214\":1}}],[\"<random\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"<remote\",{\"1\":{\"1326\":1}}],[\"<remote>\",{\"1\":{\"1326\":2,\"1327\":1,\"1329\":2,\"1338\":2}}],[\"<repo>\",{\"1\":{\"1314\":1,\"1347\":1}}],[\"<replication\",{\"1\":{\"937\":1}}],[\"<result>\",{\"1\":{\"977\":1}}],[\"<result\",{\"1\":{\"532\":2}}],[\"<resultmap\",{\"1\":{\"532\":1}}],[\"<runid>\",{\"1\":{\"935\":2}}],[\"<root\",{\"1\":{\"389\":1}}],[\"<rollingfile\",{\"1\":{\"388\":1}}],[\"<user>\",{\"1\":{\"1691\":1,\"1693\":1}}],[\"<username>\",{\"1\":{\"1314\":1,\"1326\":2,\"1347\":1,\"1692\":4,\"1791\":2}}],[\"<url>\",{\"1\":{\"1326\":1,\"1338\":2,\"1698\":2}}],[\"<update\",{\"1\":{\"530\":1}}],[\"<u>\",{\"1\":{\"163\":8}}],[\"<key\",{\"1\":{\"946\":1}}],[\"<key>命令查看键对应的槽\",{\"1\":{\"947\":1}}],[\"<key>移除某个键的过期时间\",{\"1\":{\"908\":1}}],[\"<key>返回剩余生存时间\",{\"1\":{\"908\":1}}],[\"<key>\",{\"1\":{\"908\":1,\"909\":1,\"969\":7,\"971\":1,\"1256\":1,\"1263\":1,\"1579\":1,\"1582\":1,\"1683\":1,\"1684\":1}}],[\"<k\",{\"1\":{\"509\":1}}],[\"<exception>\",{\"1\":{\"1632\":1}}],[\"<eth0>\",{\"1\":{\"1396\":1}}],[\"<end\",{\"1\":{\"1344\":1}}],[\"<environment\",{\"1\":{\"506\":1,\"524\":1}}],[\"<environments\",{\"1\":{\"506\":1,\"524\":1}}],[\"<e>\",{\"1\":{\"509\":1,\"544\":2}}],[\"<div>\",{\"1\":{\"1870\":1}}],[\"<div\",{\"1\":{\"1336\":2}}],[\"<dst>是本地跟踪的远程引用的位置\",{\"1\":{\"1351\":1}}],[\"<dst>\",{\"1\":{\"1218\":4,\"1351\":1,\"1696\":1}}],[\"<data>\",{\"1\":{\"1169\":6}}],[\"<datasource\",{\"1\":{\"506\":1,\"518\":1,\"524\":1}}],[\"<delete\",{\"1\":{\"530\":1}}],[\"<dependency>\",{\"1\":{\"24\":2,\"39\":1,\"382\":8,\"383\":1,\"416\":1,\"455\":2,\"487\":2,\"505\":2,\"810\":1,\"1179\":3,\"1707\":1,\"1717\":1}}],[\"<script>\",{\"1\":{\"1870\":1}}],[\"<script\",{\"1\":{\"1870\":1}}],[\"<scope>test<\",{\"1\":{\"1707\":1,\"1717\":1}}],[\"<software>\",{\"1\":{\"1694\":2}}],[\"<source\",{\"1\":{\"946\":1}}],[\"<shortname>\",{\"1\":{\"1326\":2,\"1338\":1}}],[\"<sha1>\",{\"1\":{\"965\":1,\"966\":1}}],[\"<src>是一个代表远程版本库引用的模式\",{\"1\":{\"1351\":1}}],[\"<src>\",{\"1\":{\"1218\":4,\"1696\":1}}],[\"<style>\",{\"1\":{\"1855\":1,\"1870\":1}}],[\"<start\",{\"1\":{\"1344\":1}}],[\"<store\",{\"1\":{\"969\":1,\"971\":1}}],[\"<string>builder\",{\"1\":{\"64\":1}}],[\"<slot>\",{\"1\":{\"946\":4,\"947\":2}}],[\"<slots>命令将若干槽指派给当前节点负责\",{\"1\":{\"946\":1}}],[\"<sql>\",{\"1\":{\"1226\":1}}],[\"<sql\",{\"1\":{\"531\":1,\"1226\":1}}],[\"<secret\",{\"1\":{\"1791\":1}}],[\"<service>\",{\"1\":{\"1695\":1}}],[\"<server>\",{\"1\":{\"1633\":1}}],[\"<setting\",{\"1\":{\"519\":2}}],[\"<settings>\",{\"1\":{\"519\":1}}],[\"<select\",{\"1\":{\"506\":1,\"530\":1,\"531\":1,\"532\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"1855\":1}}],[\"<sizebasedtriggeringpolicy\",{\"1\":{\"388\":1}}],[\"<title>dash\",{\"1\":{\"1870\":1}}],[\"<times>\",{\"1\":{\"1700\":2}}],[\"<timeout>命令\",{\"1\":{\"946\":1}}],[\"<time>\",{\"1\":{\"912\":1}}],[\"<time>指定键的过期时间\",{\"1\":{\"908\":1}}],[\"<timebasedtriggeringpolicy\",{\"1\":{\"388\":1}}],[\"<tagname>\",{\"1\":{\"1329\":5}}],[\"<target\",{\"1\":{\"946\":4,\"947\":2}}],[\"<term\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"<ttl>\",{\"1\":{\"1169\":1}}],[\"<tree>\",{\"1\":{\"1350\":1}}],[\"<trim\",{\"1\":{\"537\":2}}],[\"<transactionmanager\",{\"1\":{\"506\":1,\"524\":1}}],[\"<typehandler\",{\"1\":{\"521\":1}}],[\"<typehandlers>\",{\"1\":{\"521\":1}}],[\"<typealias\",{\"1\":{\"520\":1,\"532\":1}}],[\"<typealiases>\",{\"1\":{\"520\":1}}],[\"<thresholdfilter\",{\"1\":{\"388\":1}}],[\"<t>\",{\"1\":{\"306\":1,\"509\":2,\"510\":1,\"522\":3,\"543\":3,\"1055\":1,\"1113\":7}}],[\"<profile>\",{\"1\":{\"1701\":1}}],[\"<protocol>\",{\"1\":{\"1396\":1}}],[\"<properties\",{\"1\":{\"518\":1}}],[\"<property\",{\"1\":{\"506\":4,\"518\":2,\"522\":1,\"523\":1,\"524\":5}}],[\"<plugin\",{\"1\":{\"523\":1}}],[\"<plugins>\",{\"1\":{\"523\":1}}],[\"<parent>\",{\"1\":{\"1350\":1}}],[\"<pattern>\",{\"1\":{\"1329\":2}}],[\"<patternlayout\",{\"1\":{\"388\":3}}],[\"<path>\",{\"1\":{\"1218\":5,\"1226\":3,\"1228\":1,\"1681\":1,\"1682\":1,\"1683\":2,\"1684\":1,\"1685\":1,\"1686\":2,\"1693\":3}}],[\"<package\",{\"1\":{\"520\":1,\"521\":1,\"528\":1}}],[\"<policies>\",{\"1\":{\"388\":1}}],[\"<port>命令\",{\"1\":{\"945\":1}}],[\"<port>\",{\"1\":{\"233\":1,\"936\":1,\"947\":1,\"1698\":1}}],[\"<async\",{\"1\":{\"391\":1}}],[\"<appender\",{\"1\":{\"389\":2}}],[\"<appenders>\",{\"1\":{\"388\":1}}],[\"<artifactid>mockito\",{\"1\":{\"1707\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"505\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"505\":1}}],[\"<artifactid>zookeeper<\",{\"1\":{\"1179\":1}}],[\"<artifactid>curator\",{\"1\":{\"1179\":2}}],[\"<artifactid>netty\",{\"1\":{\"810\":1}}],[\"<artifactid>kafka\",{\"1\":{\"455\":1,\"487\":1}}],[\"<artifactid>log4j\",{\"1\":{\"382\":2,\"383\":1}}],[\"<artifactid>logback\",{\"1\":{\"382\":1}}],[\"<artifactid>slf4j\",{\"1\":{\"382\":5}}],[\"<artifactid>spring\",{\"1\":{\"24\":2,\"416\":1,\"455\":1,\"487\":1,\"1717\":1}}],[\"<artifactid>elasticsearch\",{\"1\":{\"39\":1}}],[\"<commit>\",{\"1\":{\"1324\":1,\"1344\":4}}],[\"<count>\",{\"1\":{\"969\":1,\"971\":1}}],[\"<count>命令\",{\"1\":{\"946\":1}}],[\"<console\",{\"1\":{\"388\":1}}],[\"<configuration>\",{\"1\":{\"506\":1}}],[\"<configuration\",{\"1\":{\"387\":1}}],[\"<channel>\",{\"1\":{\"949\":1,\"956\":1}}],[\"<changes>\",{\"1\":{\"912\":1}}],[\"<choose>\",{\"1\":{\"536\":1}}],[\"<cache\",{\"1\":{\"533\":1}}],[\"<clinit>是编译器自动收集类中所有类变量的赋值动作和静态代码块\",{\"1\":{\"1527\":1}}],[\"<clinit>\",{\"1\":{\"253\":1}}],[\"<clinit>方法\",{\"1\":{\"253\":1}}],[\"<client\",{\"1\":{\"15\":2}}],[\"<根标签\",{\"1\":{\"357\":1}}],[\"<java\",{\"1\":{\"254\":1}}],[\"<<<<<<<\",{\"1\":{\"1336\":1}}],[\"<<\",{\"1\":{\"6\":1,\"1112\":6,\"1664\":1}}],[\"<\",{\"1\":{\"6\":1,\"8\":1,\"9\":3,\"14\":1,\"24\":3,\"39\":1,\"83\":1,\"128\":1,\"291\":5,\"355\":4,\"357\":3,\"382\":10,\"383\":1,\"387\":1,\"388\":12,\"389\":2,\"416\":1,\"455\":4,\"456\":1,\"487\":4,\"505\":3,\"506\":11,\"518\":2,\"519\":3,\"520\":1,\"521\":3,\"522\":1,\"523\":2,\"524\":6,\"528\":5,\"530\":8,\"531\":2,\"532\":5,\"533\":1,\"535\":3,\"536\":5,\"537\":10,\"538\":3,\"583\":2,\"585\":2,\"608\":1,\"610\":1,\"619\":3,\"698\":1,\"702\":1,\"726\":1,\"754\":1,\"788\":2,\"789\":1,\"791\":1,\"810\":1,\"842\":1,\"843\":1,\"846\":1,\"873\":1,\"879\":1,\"989\":1,\"990\":1,\"991\":3,\"993\":6,\"994\":2,\"995\":2,\"998\":5,\"1001\":1,\"1106\":1,\"1112\":4,\"1113\":2,\"1120\":2,\"1179\":5,\"1336\":5,\"1460\":1,\"1557\":1,\"1567\":2,\"1568\":2,\"1652\":4,\"1653\":1,\"1654\":1,\"1657\":1,\"1662\":1,\"1669\":1,\"1670\":1,\"1672\":1,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1,\"1677\":1,\"1707\":2,\"1717\":1,\"1855\":7,\"1870\":7}}],[\"前往酒店\",{\"1\":{\"1834\":1}}],[\"前叉\",{\"1\":{\"1796\":1}}],[\"前两天上线就\",{\"1\":{\"1781\":1}}],[\"前言\",{\"0\":{\"1705\":1}}],[\"前序位置\",{\"1\":{\"1670\":1}}],[\"前序位置的代码只能从函数参数中获取父节点传递来的参数\",{\"1\":{\"999\":1}}],[\"前半句保留奇数组的\",{\"1\":{\"1666\":1}}],[\"前提是内存可以容纳所有\",{\"1\":{\"1658\":1}}],[\"前提是处理好多进程并发访问的问题\",{\"1\":{\"1459\":1}}],[\"前端负责携带\",{\"1\":{\"1642\":1}}],[\"前端通过阿里云\",{\"1\":{\"14\":1}}],[\"前导\",{\"1\":{\"1567\":1}}],[\"前后\",{\"1\":{\"1567\":1}}],[\"前后端限流\",{\"1\":{\"1375\":1}}],[\"前已经提交\",{\"1\":{\"1557\":1}}],[\"前\",{\"1\":{\"1524\":1,\"1655\":2}}],[\"前驱节点\",{\"1\":{\"1516\":1}}],[\"前者需要结合实际业务场景进一步调研\",{\"1\":{\"1236\":1}}],[\"前者是在内存中\",{\"1\":{\"639\":1}}],[\"前段时间该集群发生了连接数过高等问题\",{\"1\":{\"1233\":1}}],[\"前置操作\",{\"1\":{\"1673\":1}}],[\"前置处理\",{\"1\":{\"1669\":1}}],[\"前置增强\",{\"1\":{\"1021\":1,\"1022\":1}}],[\"前置知识\",{\"1\":{\"1\":1}}],[\"前中后序是遍历二叉树过程中处理每一个节点的三个特殊时间点\",{\"1\":{\"999\":1}}],[\"前一个结点的长度\",{\"1\":{\"892\":1}}],[\"前进指针\",{\"1\":{\"886\":1}}],[\"前面提到过\",{\"1\":{\"753\":1,\"800\":1}}],[\"前4个字段的校验和\",{\"1\":{\"913\":1}}],[\"前4个block\",{\"1\":{\"739\":1}}],[\"前4字节校验和\",{\"1\":{\"691\":1}}],[\"前缀字典树\",{\"1\":{\"1658\":1}}],[\"前缀长度\",{\"1\":{\"707\":1}}],[\"前缀索引中有可能碰到相同索引的情况\",{\"1\":{\"707\":1}}],[\"前缀索引查询\",{\"1\":{\"707\":1}}],[\"前缀索引查询示意\",{\"1\":{\"707\":1}}],[\"前缀索引选择性\",{\"1\":{\"707\":1}}],[\"前缀索引\",{\"0\":{\"707\":1}}],[\"前期编译器\",{\"1\":{\"255\":1}}],[\"前期编译\",{\"0\":{\"255\":1}}],[\"前2个字节表示主版本号\",{\"1\":{\"240\":1}}],[\"前继已经是\",{\"1\":{\"6\":1}}],[\"前继已经取消\",{\"1\":{\"6\":1}}],[\"ffmpeg缩放分辨率\",{\"1\":{\"1878\":1}}],[\"ffmpeg的gop\",{\"1\":{\"1868\":1}}],[\"ffmpeg\",{\"0\":{\"1876\":1,\"1878\":1},\"1\":{\"1867\":1,\"1868\":5,\"1878\":7}}],[\"fb\",{\"1\":{\"1862\":1}}],[\"fcfs\",{\"1\":{\"1470\":1}}],[\"f1\",{\"1\":{\"1349\":1}}],[\"f5等\",{\"1\":{\"1299\":1}}],[\"fsync\",{\"1\":{\"1479\":1,\"1555\":1,\"1556\":3}}],[\"fsimage\",{\"1\":{\"1219\":6}}],[\"fsck\",{\"1\":{\"1219\":1,\"1346\":2}}],[\"fs\",{\"1\":{\"1217\":1,\"1218\":1}}],[\"fseg\",{\"1\":{\"693\":1,\"749\":1,\"751\":1}}],[\"fk\",{\"1\":{\"599\":2}}],[\"ft\",{\"1\":{\"1634\":1}}],[\"ftd\",{\"1\":{\"1363\":1}}],[\"ftask\",{\"1\":{\"1113\":6}}],[\"ftwrl\",{\"1\":{\"550\":1}}],[\"ftp\",{\"1\":{\"340\":1}}],[\"featured\",{\"1\":{\"536\":1}}],[\"fetchsize=\",{\"1\":{\"530\":1}}],[\"fetchrequest\",{\"1\":{\"470\":1,\"471\":2}}],[\"fetch\",{\"0\":{\"1327\":1},\"1\":{\"450\":1,\"485\":3,\"634\":2,\"1326\":1,\"1327\":1,\"1338\":3,\"1351\":2,\"1433\":1,\"1791\":1}}],[\"fenixsoft\",{\"1\":{\"283\":1}}],[\"fence\",{\"1\":{\"8\":1,\"145\":2}}],[\"fn\",{\"1\":{\"163\":7}}],[\"f\",{\"1\":{\"93\":2,\"121\":1,\"196\":2,\"232\":1,\"234\":1,\"596\":1,\"799\":2,\"831\":1,\"1135\":3,\"1139\":2,\"1140\":1,\"1218\":6,\"1226\":1,\"1319\":1,\"1343\":2,\"1344\":1,\"1686\":3,\"1688\":1,\"1699\":1,\"1735\":1,\"1799\":1,\"1877\":3,\"1878\":1}}],[\"frequently\",{\"1\":{\"1574\":2}}],[\"freedoms\",{\"1\":{\"1741\":1}}],[\"free属性指向垃圾链表的头节点\",{\"1\":{\"747\":1}}],[\"free记录当前空闲区域的头部\",{\"1\":{\"739\":1}}],[\"free数组构成伙伴系统为压缩页提供内存空间\",{\"1\":{\"731\":1}}],[\"free\",{\"1\":{\"638\":1,\"688\":1,\"689\":1,\"693\":2,\"749\":2,\"878\":1,\"880\":1,\"1445\":3,\"1446\":1,\"1631\":1}}],[\"freememory\",{\"1\":{\"212\":1,\"1136\":1}}],[\"frm\",{\"1\":{\"679\":1,\"680\":1}}],[\"frm格式文件\",{\"1\":{\"673\":1}}],[\"framerate\",{\"1\":{\"1854\":1}}],[\"framedecoder\",{\"1\":{\"842\":1}}],[\"framework<\",{\"1\":{\"1179\":1}}],[\"framework\",{\"1\":{\"88\":1,\"89\":2,\"807\":1,\"1326\":2}}],[\"fragmented\",{\"1\":{\"1869\":10}}],[\"fragment\",{\"1\":{\"1869\":6}}],[\"frag\",{\"1\":{\"693\":2,\"1862\":1}}],[\"frac\",{\"1\":{\"175\":1,\"948\":1,\"1119\":2}}],[\"friends\",{\"1\":{\"83\":4}}],[\"from是否正在导入\",{\"1\":{\"947\":1}}],[\"from后面的子查询\",{\"1\":{\"726\":1}}],[\"from\",{\"1\":{\"51\":1,\"105\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"124\":11,\"125\":4,\"126\":11,\"127\":5,\"128\":4,\"129\":6,\"183\":1,\"446\":1,\"493\":1,\"506\":1,\"515\":1,\"530\":3,\"531\":1,\"532\":1,\"535\":1,\"536\":1,\"537\":2,\"538\":1,\"552\":1,\"580\":2,\"581\":1,\"582\":5,\"583\":12,\"584\":2,\"585\":4,\"586\":2,\"587\":3,\"588\":1,\"590\":1,\"591\":1,\"596\":1,\"602\":1,\"603\":4,\"604\":4,\"605\":3,\"606\":2,\"607\":1,\"608\":4,\"609\":6,\"610\":3,\"611\":4,\"618\":6,\"622\":3,\"623\":3,\"628\":1,\"634\":1,\"675\":1,\"701\":1,\"703\":5,\"705\":3,\"707\":2,\"717\":1,\"727\":1,\"729\":1,\"734\":1,\"777\":4,\"946\":1,\"1226\":5,\"1228\":1,\"1567\":14}}],[\"fuzhengwei\",{\"1\":{\"1004\":1}}],[\"fullfence\",{\"1\":{\"1142\":1}}],[\"fulltext\",{\"1\":{\"699\":1,\"701\":1,\"728\":1,\"1567\":2}}],[\"full三个链表进行查询使用\",{\"1\":{\"693\":1}}],[\"fullname\",{\"1\":{\"515\":2}}],[\"full\",{\"1\":{\"95\":2,\"171\":1,\"515\":5,\"693\":2,\"697\":1,\"728\":2,\"1524\":7,\"1525\":1}}],[\"func表示函数\",{\"1\":{\"728\":1}}],[\"functionalinterface注解\",{\"1\":{\"298\":1}}],[\"function<\",{\"1\":{\"163\":3}}],[\"function<throwable\",{\"1\":{\"163\":1}}],[\"function<foo\",{\"1\":{\"61\":1}}],[\"functions\",{\"1\":{\"129\":1}}],[\"function\",{\"1\":{\"58\":2,\"61\":1,\"129\":1,\"635\":1,\"1068\":2,\"1859\":5,\"1870\":1}}],[\"funnel<>\",{\"1\":{\"83\":1}}],[\"funnel<user>\",{\"1\":{\"83\":1}}],[\"funnel\",{\"1\":{\"83\":5}}],[\"future<t>\",{\"1\":{\"1113\":3}}],[\"future<\",{\"1\":{\"822\":2}}],[\"future<integer>\",{\"1\":{\"822\":2}}],[\"future<string>\",{\"1\":{\"77\":1}}],[\"future监听器\",{\"1\":{\"821\":1}}],[\"futurecallback<string>\",{\"1\":{\"77\":1}}],[\"futures\",{\"1\":{\"77\":1}}],[\"futuretask<>\",{\"1\":{\"77\":1}}],[\"futuretask<string>\",{\"1\":{\"77\":1}}],[\"futuretask\",{\"1\":{\"77\":4,\"1113\":1,\"1508\":1,\"1511\":1}}],[\"future\",{\"0\":{\"822\":1},\"1\":{\"77\":6,\"821\":1,\"822\":19,\"873\":3,\"1111\":1,\"1113\":2,\"1511\":1}}],[\"found\",{\"1\":{\"634\":2,\"967\":1,\"1049\":1,\"1881\":1}}],[\"following\",{\"1\":{\"1201\":1,\"1203\":2}}],[\"follower与leader数据同步最大时限\",{\"1\":{\"1164\":1}}],[\"follower初始化连接到leader最大时限\",{\"1\":{\"1164\":1}}],[\"follower\",{\"1\":{\"443\":2,\"460\":2,\"467\":1,\"469\":2,\"470\":1,\"471\":8,\"1187\":1,\"1194\":1,\"1200\":1,\"1202\":1,\"1203\":4,\"1205\":8,\"1281\":9,\"1620\":9}}],[\"folloewr\",{\"1\":{\"471\":1}}],[\"footer\",{\"1\":{\"1336\":2}}],[\"foo\",{\"1\":{\"61\":3,\"70\":10,\"79\":2,\"263\":1}}],[\"forum\",{\"1\":{\"1870\":1}}],[\"forpath\",{\"1\":{\"1181\":7,\"1192\":1}}],[\"form\",{\"1\":{\"675\":1}}],[\"formatted\",{\"1\":{\"1226\":1}}],[\"format=json\",{\"1\":{\"729\":1}}],[\"format=b\",{\"1\":{\"232\":1,\"1367\":1,\"1529\":1}}],[\"format\",{\"1\":{\"79\":1,\"113\":5,\"118\":1,\"119\":1,\"121\":1,\"124\":2,\"126\":1,\"353\":1,\"643\":1,\"683\":1,\"848\":1,\"1181\":2,\"1227\":3,\"1228\":2,\"1567\":1}}],[\"foreign\",{\"1\":{\"598\":1,\"599\":6}}],[\"foreach>\",{\"1\":{\"538\":1}}],[\"foreach\",{\"0\":{\"538\":1},\"1\":{\"69\":1,\"79\":1,\"184\":1,\"304\":1,\"305\":1,\"538\":1,\"779\":1,\"1068\":1,\"1347\":1}}],[\"forward以快进方式合并\",{\"1\":{\"1335\":1}}],[\"forwardable\",{\"1\":{\"1326\":1}}],[\"forward\",{\"0\":{\"1335\":1},\"1\":{\"530\":1}}],[\"forwarding\",{\"1\":{\"71\":1}}],[\"forceclose\",{\"1\":{\"873\":2}}],[\"forceflush\",{\"1\":{\"873\":1}}],[\"force\",{\"1\":{\"511\":2,\"705\":2,\"777\":1,\"1567\":1,\"1791\":1}}],[\"forceput\",{\"1\":{\"68\":1}}],[\"forname\",{\"1\":{\"188\":1,\"247\":1,\"308\":1,\"774\":1,\"1015\":5,\"1016\":2,\"1531\":1}}],[\"forkjointask\",{\"1\":{\"153\":1}}],[\"forkjoin\",{\"0\":{\"153\":1},\"1\":{\"153\":2}}],[\"forkjoinpool\",{\"1\":{\"8\":1,\"153\":2,\"163\":1,\"1369\":1}}],[\"fork\",{\"1\":{\"150\":1,\"153\":6,\"1221\":1,\"1487\":1}}],[\"for\",{\"1\":{\"6\":1,\"8\":1,\"51\":1,\"83\":1,\"188\":1,\"196\":2,\"231\":1,\"232\":1,\"234\":1,\"263\":4,\"304\":1,\"376\":1,\"450\":1,\"453\":1,\"456\":1,\"488\":1,\"541\":1,\"558\":1,\"591\":1,\"612\":2,\"634\":4,\"636\":1,\"666\":1,\"782\":1,\"783\":1,\"788\":2,\"789\":1,\"791\":1,\"807\":1,\"842\":1,\"843\":1,\"865\":1,\"872\":1,\"873\":1,\"993\":4,\"994\":2,\"995\":1,\"996\":4,\"1001\":1,\"1049\":1,\"1106\":1,\"1114\":2,\"1115\":1,\"1116\":1,\"1188\":2,\"1214\":1,\"1326\":2,\"1347\":1,\"1557\":1,\"1562\":2,\"1652\":2,\"1654\":1,\"1662\":1,\"1663\":2,\"1669\":1,\"1670\":1,\"1671\":1,\"1672\":1,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1,\"1677\":1,\"1793\":1,\"1860\":1}}],[\"flink\",{\"1\":{\"1213\":1,\"1221\":1}}],[\"flip\",{\"1\":{\"767\":2,\"768\":1,\"773\":2,\"774\":1,\"782\":1,\"783\":1,\"788\":2,\"791\":1,\"792\":1,\"796\":1,\"797\":1}}],[\"flight\",{\"1\":{\"238\":1,\"462\":4}}],[\"floor\",{\"1\":{\"594\":2}}],[\"floatbuffer\",{\"1\":{\"761\":1}}],[\"floats\",{\"1\":{\"80\":1}}],[\"float\",{\"1\":{\"36\":1,\"80\":2,\"112\":1,\"287\":2,\"662\":1,\"828\":2,\"1712\":2}}],[\"flux\",{\"1\":{\"808\":1}}],[\"flume\",{\"1\":{\"480\":1,\"1213\":1}}],[\"flush链表\",{\"1\":{\"740\":1}}],[\"flushed\",{\"1\":{\"740\":1}}],[\"flushcache=\",{\"1\":{\"530\":4}}],[\"flushstatements\",{\"1\":{\"513\":1,\"523\":1}}],[\"flushinterval=\",{\"1\":{\"533\":1}}],[\"flushinterval\",{\"1\":{\"476\":1,\"533\":1}}],[\"flush\",{\"1\":{\"317\":1,\"318\":1,\"467\":1,\"476\":1,\"550\":1,\"638\":1,\"731\":3,\"739\":1,\"829\":1,\"842\":1,\"966\":1,\"967\":1,\"1148\":1,\"1151\":1,\"1154\":1,\"1555\":1,\"1559\":1}}],[\"fluent\",{\"1\":{\"61\":1,\"384\":1}}],[\"flags的sri\",{\"1\":{\"941\":2}}],[\"flags\",{\"1\":{\"231\":1,\"240\":2,\"923\":1,\"945\":1}}],[\"flag\",{\"1\":{\"231\":1}}],[\"flatmap\",{\"1\":{\"58\":1,\"1068\":1}}],[\"flyweight\",{\"1\":{\"146\":2}}],[\"fdatasync\",{\"1\":{\"1479\":1}}],[\"fd\",{\"0\":{\"1732\":1},\"1\":{\"923\":1,\"1475\":1,\"1479\":2}}],[\"fddi\",{\"1\":{\"839\":1}}],[\"fdm\",{\"1\":{\"37\":1}}],[\"fdx\",{\"1\":{\"37\":1}}],[\"farther\",{\"1\":{\"565\":1}}],[\"facingmode\",{\"1\":{\"1854\":1}}],[\"facebook\",{\"1\":{\"480\":1}}],[\"factories\",{\"1\":{\"1598\":1}}],[\"factorybean<t>\",{\"1\":{\"1010\":1}}],[\"factorybeanobjectcache\",{\"1\":{\"1010\":1}}],[\"factorybean\",{\"0\":{\"1010\":1},\"1\":{\"1010\":6,\"1026\":1}}],[\"factory\",{\"1\":{\"518\":1,\"1016\":1,\"1125\":1}}],[\"factor\",{\"1\":{\"446\":1}}],[\"factor=1\",{\"1\":{\"445\":1}}],[\"facade\",{\"1\":{\"373\":2,\"376\":1}}],[\"fanout\",{\"1\":{\"404\":1,\"414\":1,\"1625\":1,\"1628\":1}}],[\"fatal\",{\"1\":{\"390\":1}}],[\"father\",{\"1\":{\"357\":2}}],[\"fallbackserviceprovider\",{\"1\":{\"383\":1}}],[\"fallback\",{\"1\":{\"383\":1}}],[\"false忽略\",{\"1\":{\"42\":1}}],[\"false\",{\"1\":{\"6\":3,\"7\":1,\"8\":6,\"9\":5,\"51\":1,\"83\":1,\"93\":1,\"112\":1,\"146\":1,\"184\":2,\"187\":1,\"188\":2,\"195\":1,\"196\":1,\"301\":2,\"363\":3,\"388\":1,\"389\":1,\"391\":2,\"418\":3,\"422\":3,\"519\":2,\"530\":1,\"596\":1,\"783\":2,\"785\":1,\"786\":1,\"788\":1,\"789\":1,\"791\":3,\"858\":1,\"863\":1,\"865\":1,\"870\":1,\"872\":1,\"873\":1,\"993\":1,\"1040\":1,\"1050\":1,\"1051\":1,\"1057\":1,\"1059\":1,\"1087\":2,\"1088\":1,\"1090\":1,\"1092\":2,\"1108\":1,\"1113\":2,\"1114\":4,\"1115\":3,\"1269\":1,\"1536\":1,\"1613\":1,\"1629\":1,\"1672\":1,\"1675\":2}}],[\"fastopen\",{\"1\":{\"1415\":1}}],[\"fastthreadlocal\",{\"1\":{\"809\":1}}],[\"fast\",{\"0\":{\"1335\":1},\"1\":{\"162\":1,\"471\":1,\"1326\":1}}],[\"fair\",{\"1\":{\"1436\":1}}],[\"fairsync\",{\"1\":{\"9\":2,\"156\":2,\"157\":2}}],[\"failover\",{\"1\":{\"948\":2}}],[\"failed\",{\"1\":{\"796\":1,\"797\":3,\"864\":1,\"870\":1,\"1009\":1,\"1116\":1,\"1858\":1}}],[\"failure\",{\"1\":{\"176\":1,\"1714\":1,\"1715\":1}}],[\"fail\",{\"1\":{\"14\":2,\"162\":1,\"417\":1,\"421\":1,\"471\":1,\"949\":2,\"1713\":2}}],[\"firewalld\",{\"1\":{\"1695\":1}}],[\"firechannelactive\",{\"1\":{\"873\":1}}],[\"firechannelreadcomplete\",{\"1\":{\"873\":2}}],[\"firechannelread\",{\"1\":{\"818\":1,\"823\":1,\"829\":3,\"873\":2}}],[\"firsttask\",{\"1\":{\"1114\":9,\"1115\":2}}],[\"firsttopic\",{\"1\":{\"446\":4,\"456\":1,\"457\":1,\"461\":1,\"465\":1,\"488\":2,\"489\":1}}],[\"firstmatch\",{\"1\":{\"726\":1}}],[\"firstoffset\",{\"1\":{\"476\":2}}],[\"firstname\",{\"1\":{\"47\":1}}],[\"first\",{\"1\":{\"6\":7,\"8\":6,\"195\":8,\"739\":1,\"749\":1}}],[\"firstwaiter\",{\"1\":{\"3\":1,\"8\":1}}],[\"fill\",{\"1\":{\"842\":1}}],[\"fill10bytes\",{\"1\":{\"842\":2}}],[\"filterselect\",{\"1\":{\"1855\":1}}],[\"filter条记录的成本\",{\"1\":{\"729\":1}}],[\"filter\",{\"1\":{\"729\":1,\"1026\":1,\"1068\":1,\"1264\":1,\"1344\":2,\"1855\":6}}],[\"filtered\",{\"1\":{\"728\":1}}],[\"filtering\",{\"1\":{\"718\":1}}],[\"file那一块\",{\"1\":{\"1871\":1}}],[\"file2\",{\"1\":{\"1688\":1}}],[\"file0\",{\"1\":{\"1658\":1}}],[\"file1\",{\"1\":{\"1658\":1,\"1688\":1}}],[\"filewriter\",{\"1\":{\"1502\":1}}],[\"filereader\",{\"1\":{\"1067\":1,\"1502\":1}}],[\"filename\",{\"1\":{\"1503\":1}}],[\"filename=\",{\"1\":{\"388\":2}}],[\"filenotfoundexception\",{\"1\":{\"1008\":1,\"1067\":1}}],[\"filevisitresult\",{\"1\":{\"779\":2}}],[\"filevisitor\",{\"1\":{\"779\":1}}],[\"fileoutputstream\",{\"1\":{\"776\":2,\"777\":2,\"1502\":1,\"1503\":1}}],[\"fileinputstream\",{\"1\":{\"767\":1,\"776\":2,\"777\":2,\"1008\":1,\"1502\":1}}],[\"filechannel\",{\"1\":{\"760\":1,\"767\":1,\"775\":1,\"776\":1,\"777\":2,\"785\":1}}],[\"file=dump\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"file=name\",{\"1\":{\"675\":1}}],[\"file=\",{\"1\":{\"649\":1,\"1155\":1}}],[\"file=xxx\",{\"1\":{\"569\":2}}],[\"file=<filename>\",{\"1\":{\"232\":1}}],[\"filepattern=\",{\"1\":{\"388\":1}}],[\"file>\",{\"1\":{\"388\":1,\"1226\":1}}],[\"fileappender\",{\"1\":{\"388\":1}}],[\"fileutils\",{\"1\":{\"323\":2}}],[\"file类\",{\"0\":{\"314\":1}}],[\"filesystemresource\",{\"1\":{\"1008\":2}}],[\"files2\",{\"1\":{\"675\":1}}],[\"files1\",{\"1\":{\"675\":1}}],[\"filesort\",{\"1\":{\"616\":3}}],[\"files\",{\"0\":{\"779\":1},\"1\":{\"82\":1,\"475\":1,\"639\":1,\"739\":1,\"779\":8,\"1219\":2}}],[\"file\",{\"1\":{\"82\":1,\"121\":3,\"128\":10,\"233\":1,\"322\":1,\"391\":2,\"528\":1,\"639\":4,\"649\":2,\"673\":1,\"678\":2,\"688\":2,\"691\":2,\"739\":1,\"767\":1,\"779\":3,\"799\":5,\"915\":1,\"1008\":1,\"1125\":1,\"1148\":2,\"1154\":1,\"1214\":2,\"1215\":1,\"1218\":2,\"1219\":1,\"1229\":2,\"1315\":1,\"1344\":1,\"1347\":1,\"1350\":2,\"1446\":1,\"1631\":3,\"1634\":1,\"1871\":1}}],[\"fixedthreadpool\",{\"1\":{\"1110\":2}}],[\"fixedrecvbytebufallocator\",{\"1\":{\"861\":1}}],[\"fixedlengthframedecoder\",{\"1\":{\"842\":1}}],[\"fix\",{\"1\":{\"471\":1}}],[\"fianlizer\",{\"1\":{\"196\":1}}],[\"fined\",{\"1\":{\"1791\":1}}],[\"fine\",{\"1\":{\"1791\":2}}],[\"fin\",{\"1\":{\"839\":1,\"1410\":9,\"1415\":2,\"1418\":2,\"1420\":1}}],[\"finished\",{\"1\":{\"1402\":1}}],[\"finishrefresh\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"finishconnect\",{\"1\":{\"789\":1,\"873\":1}}],[\"finishbeanfactoryinitialization\",{\"1\":{\"91\":1}}],[\"findfirst\",{\"1\":{\"1068\":1}}],[\"findany\",{\"1\":{\"1068\":1}}],[\"findactivebloglike\",{\"1\":{\"535\":1,\"536\":1,\"537\":1}}],[\"findmethods\",{\"1\":{\"1016\":1}}],[\"findbycolumn\",{\"1\":{\"530\":1}}],[\"findserviceproviders\",{\"1\":{\"383\":4}}],[\"find\",{\"0\":{\"1683\":1},\"1\":{\"354\":1,\"1683\":2}}],[\"findclass\",{\"1\":{\"254\":1}}],[\"final修饰\",{\"1\":{\"1608\":1}}],[\"finalization\",{\"1\":{\"196\":2}}],[\"finalizee\",{\"1\":{\"196\":9}}],[\"finalizerthread\",{\"1\":{\"196\":3}}],[\"finalizer是一个特殊的方法\",{\"1\":{\"196\":1}}],[\"finalizer\",{\"0\":{\"196\":1},\"1\":{\"188\":1,\"195\":1,\"196\":20}}],[\"finalize\",{\"1\":{\"143\":1,\"195\":1,\"196\":8}}],[\"finalreference<object>\",{\"1\":{\"196\":1}}],[\"finalreference<t>\",{\"1\":{\"196\":1}}],[\"finalreference\",{\"1\":{\"184\":3,\"196\":3}}],[\"finally\",{\"1\":{\"93\":1,\"346\":1,\"461\":1,\"1059\":1,\"1090\":1,\"1114\":2,\"1115\":2,\"1116\":4,\"1263\":1,\"1264\":1,\"1533\":7}}],[\"final\",{\"1\":{\"3\":3,\"6\":1,\"7\":1,\"8\":2,\"9\":7,\"146\":6,\"184\":3,\"187\":1,\"189\":1,\"195\":2,\"196\":4,\"211\":1,\"240\":1,\"291\":1,\"292\":1,\"362\":5,\"383\":2,\"391\":3,\"542\":3,\"543\":1,\"797\":3,\"818\":2,\"867\":2,\"870\":1,\"872\":1,\"873\":3,\"1015\":9,\"1016\":6,\"1028\":3,\"1039\":1,\"1045\":2,\"1049\":1,\"1050\":1,\"1051\":1,\"1059\":4,\"1087\":6,\"1091\":4,\"1095\":2,\"1097\":1,\"1098\":3,\"1099\":1,\"1108\":4,\"1112\":8,\"1114\":4,\"1115\":1,\"1116\":4,\"1135\":3,\"1137\":3,\"1382\":3,\"1383\":2,\"1536\":1,\"1599\":3,\"1615\":2}}],[\"fields四张基本系统表\",{\"1\":{\"695\":1}}],[\"fieldsallocationstyle\",{\"1\":{\"215\":1}}],[\"fields\",{\"1\":{\"113\":5,\"118\":1,\"119\":1,\"121\":1,\"124\":2,\"126\":1,\"240\":3,\"614\":1,\"1227\":3,\"1228\":2}}],[\"field2\",{\"1\":{\"51\":1}}],[\"field1\",{\"1\":{\"51\":1}}],[\"field\",{\"1\":{\"34\":1,\"51\":2,\"53\":1,\"240\":2,\"310\":3,\"348\":2,\"1135\":1,\"1139\":2,\"1140\":1,\"1368\":1}}],[\"fifo\",{\"1\":{\"2\":1,\"533\":3,\"1625\":1}}],[\"u=128\",{\"1\":{\"1878\":1}}],[\"u=rwx\",{\"1\":{\"1693\":1}}],[\"ubuntu\",{\"1\":{\"1791\":1}}],[\"ublic\",{\"1\":{\"1139\":1}}],[\"uma\",{\"1\":{\"1446\":2}}],[\"ui\",{\"1\":{\"1218\":1}}],[\"uint32\",{\"1\":{\"888\":1}}],[\"uint16\",{\"1\":{\"888\":1}}],[\"uint64\",{\"1\":{\"882\":1,\"888\":1}}],[\"uidgenerator\",{\"1\":{\"1622\":1}}],[\"uid\",{\"1\":{\"15\":1,\"1368\":1}}],[\"ulimit\",{\"0\":{\"857\":1},\"1\":{\"857\":1}}],[\"u6743u9650u4e00u89c8u8868\",{\"1\":{\"667\":1}}],[\"uage\",{\"1\":{\"634\":2}}],[\"uuid\",{\"1\":{\"418\":1,\"615\":1,\"1263\":6,\"1374\":1,\"1582\":2,\"1622\":1}}],[\"udpate\",{\"1\":{\"1634\":1}}],[\"udp广播\",{\"1\":{\"1426\":1}}],[\"udp没有拥塞控制\",{\"1\":{\"1408\":1}}],[\"udp没有流量控制\",{\"1\":{\"1408\":1}}],[\"udp是无连接的\",{\"1\":{\"1408\":1}}],[\"udp层\",{\"1\":{\"1299\":1}}],[\"udp服务转发场景\",{\"1\":{\"1296\":1}}],[\"udp等传输层协议\",{\"1\":{\"1296\":1}}],[\"udpclient\",{\"1\":{\"792\":1}}],[\"udpserver\",{\"1\":{\"792\":1}}],[\"udp协议的数据包大小限制64kb\",{\"1\":{\"341\":1}}],[\"udp\",{\"0\":{\"342\":1,\"792\":1,\"1408\":1},\"1\":{\"341\":1,\"434\":1,\"792\":2,\"1301\":1,\"1404\":2,\"1426\":1,\"1461\":2,\"1862\":1}}],[\"u8分别代表1\",{\"1\":{\"240\":1}}],[\"u4\",{\"1\":{\"240\":2}}],[\"u2\",{\"1\":{\"240\":12}}],[\"u>\",{\"1\":{\"163\":6}}],[\"u\",{\"1\":{\"124\":6,\"126\":1,\"362\":6,\"363\":4,\"364\":1,\"569\":2,\"614\":1,\"634\":5,\"675\":3,\"1108\":1,\"1119\":2,\"1151\":1,\"1338\":1,\"1343\":2,\"1631\":1,\"1735\":1}}],[\"uroot\",{\"1\":{\"550\":1,\"570\":1,\"675\":5}}],[\"url>\",{\"1\":{\"1326\":1}}],[\"urlconnection\",{\"1\":{\"1008\":1}}],[\"urlresource\",{\"1\":{\"1008\":2}}],[\"url=\",{\"1\":{\"518\":1,\"528\":1}}],[\"url\",{\"1\":{\"82\":1,\"506\":2,\"518\":1,\"524\":2,\"526\":1,\"528\":1,\"541\":10,\"1008\":1,\"1326\":3,\"1351\":2,\"1394\":1,\"1400\":1,\"1405\":2,\"1642\":1,\"1658\":3,\"1870\":2}}],[\"uri\",{\"1\":{\"15\":1,\"846\":1,\"1605\":1,\"1640\":1}}],[\"utf8mb3默认比较规则是utf8mb3\",{\"1\":{\"674\":1}}],[\"utf8mb4\",{\"1\":{\"674\":3}}],[\"utf8字符集长度为3字节\",{\"1\":{\"574\":1}}],[\"utf8\",{\"1\":{\"130\":5,\"674\":3}}],[\"utf\",{\"1\":{\"79\":1,\"83\":2,\"240\":1,\"315\":1,\"357\":1,\"506\":2,\"771\":3,\"774\":4,\"792\":1,\"1503\":1}}],[\"utilities\",{\"1\":{\"1860\":1}}],[\"utility\",{\"1\":{\"71\":1}}],[\"util\",{\"1\":{\"71\":1,\"263\":1,\"376\":2,\"521\":1,\"871\":1,\"1113\":3,\"1115\":2}}],[\"ugly\",{\"1\":{\"69\":1}}],[\"usb接口\",{\"1\":{\"1799\":1}}],[\"usb等\",{\"1\":{\"1480\":1}}],[\"us\",{\"1\":{\"1336\":1}}],[\"usr\",{\"1\":{\"1218\":2,\"1697\":1}}],[\"using\",{\"1\":{\"616\":2,\"617\":1,\"706\":3,\"728\":2,\"1793\":1,\"1860\":1}}],[\"usingtostringordering\",{\"1\":{\"61\":1}}],[\"uses\",{\"1\":{\"1791\":4}}],[\"usesingleserver\",{\"1\":{\"1264\":1}}],[\"usebiasedlocking禁用偏向锁\",{\"1\":{\"1077\":1}}],[\"usecontainersupport\",{\"1\":{\"791\":1}}],[\"usecache=\",{\"1\":{\"530\":1}}],[\"used\",{\"1\":{\"728\":1,\"882\":1,\"883\":2,\"1574\":4,\"1672\":4,\"1675\":9,\"1677\":1}}],[\"usegeneratedkeys=\",{\"1\":{\"530\":1}}],[\"usegeneratedkeys\",{\"1\":{\"519\":1}}],[\"use\",{\"1\":{\"110\":2,\"124\":1,\"130\":1,\"574\":1,\"705\":2,\"1226\":1}}],[\"usefornull\",{\"1\":{\"79\":1}}],[\"userdel\",{\"1\":{\"1692\":1}}],[\"useradd\",{\"1\":{\"1692\":1}}],[\"useraddress\",{\"1\":{\"124\":3,\"125\":2}}],[\"user权限\",{\"1\":{\"1151\":1}}],[\"user3\",{\"1\":{\"1068\":2}}],[\"user2\",{\"1\":{\"1068\":2}}],[\"user=name\",{\"1\":{\"675\":3}}],[\"user=\",{\"1\":{\"649\":1,\"1155\":1}}],[\"user中\",{\"1\":{\"634\":1}}],[\"user1\",{\"1\":{\"544\":1,\"1068\":2}}],[\"userresultmap\",{\"1\":{\"532\":2}}],[\"userregistervo\",{\"1\":{\"14\":7}}],[\"usercolumns\",{\"1\":{\"531\":3}}],[\"usercontroller\",{\"1\":{\"391\":3}}],[\"usergeneratedkeys\",{\"1\":{\"530\":1}}],[\"usermod\",{\"1\":{\"1692\":1}}],[\"usermoney\",{\"1\":{\"124\":1}}],[\"usermapper\",{\"1\":{\"506\":3,\"507\":5,\"528\":1,\"543\":2,\"544\":2}}],[\"userfrom\",{\"1\":{\"124\":1}}],[\"userfunnel\",{\"1\":{\"83\":3}}],[\"usertotalscore\",{\"1\":{\"124\":1}}],[\"userqq\",{\"1\":{\"124\":1}}],[\"userphoto\",{\"1\":{\"124\":1}}],[\"userphone\",{\"1\":{\"124\":2,\"125\":1}}],[\"userservice\",{\"1\":{\"1718\":3}}],[\"usersex\",{\"1\":{\"124\":1}}],[\"userscore\",{\"1\":{\"124\":1}}],[\"users\",{\"1\":{\"124\":5,\"779\":1,\"1068\":10}}],[\"username\",{\"1\":{\"124\":4,\"125\":1,\"127\":2,\"128\":2,\"417\":1,\"506\":4,\"515\":1,\"524\":2,\"526\":1,\"530\":4,\"531\":1,\"532\":1,\"576\":1,\"1314\":1,\"1631\":1,\"1791\":1}}],[\"usernameexistexception\",{\"1\":{\"14\":1}}],[\"userid\",{\"1\":{\"124\":15,\"391\":1}}],[\"user\",{\"0\":{\"689\":1},\"1\":{\"15\":2,\"83\":10,\"107\":1,\"118\":6,\"388\":2,\"506\":3,\"507\":6,\"530\":2,\"532\":7,\"544\":1,\"590\":7,\"598\":1,\"614\":1,\"634\":4,\"649\":2,\"688\":1,\"701\":8,\"703\":5,\"705\":6,\"707\":2,\"778\":1,\"1068\":12,\"1148\":2,\"1151\":2,\"1154\":1,\"1225\":1,\"1228\":1,\"1311\":1,\"1614\":1,\"1718\":6}}],[\"upv4\",{\"1\":{\"1461\":1}}],[\"upstream\",{\"1\":{\"1338\":1,\"1366\":2}}],[\"upd\",{\"1\":{\"748\":1}}],[\"update也是处理客户端推送\",{\"1\":{\"1345\":1}}],[\"update1\",{\"1\":{\"748\":1}}],[\"update>\",{\"1\":{\"530\":1}}],[\"updateauthor\",{\"1\":{\"530\":1}}],[\"updatepersonsql\",{\"1\":{\"515\":1}}],[\"updatelogendoffset\",{\"1\":{\"476\":2}}],[\"update\",{\"0\":{\"620\":1,\"748\":1},\"1\":{\"50\":1,\"509\":1,\"515\":1,\"523\":3,\"529\":1,\"530\":3,\"533\":1,\"542\":1,\"558\":2,\"579\":2,\"591\":1,\"599\":1,\"607\":1,\"620\":2,\"636\":3,\"734\":2,\"749\":2,\"751\":1,\"993\":1,\"1031\":1,\"1347\":1,\"1350\":1,\"1351\":3,\"1357\":1,\"1358\":1,\"1554\":2,\"1557\":1,\"1562\":1,\"1811\":3}}],[\"updatebyid\",{\"1\":{\"15\":1}}],[\"upro\",{\"1\":{\"634\":3}}],[\"uploads\",{\"1\":{\"125\":1}}],[\"uppercase\",{\"1\":{\"1148\":2}}],[\"uppercamel\",{\"1\":{\"79\":1}}],[\"upper\",{\"1\":{\"79\":5,\"593\":2,\"1567\":1}}],[\"up\",{\"1\":{\"8\":1,\"940\":1,\"1156\":1}}],[\"upon\",{\"1\":{\"6\":1}}],[\"untracked\",{\"1\":{\"1343\":1}}],[\"until\",{\"1\":{\"633\":1}}],[\"unmerged\",{\"1\":{\"1333\":1}}],[\"unmodified\",{\"1\":{\"64\":1}}],[\"unreservememory\",{\"1\":{\"1136\":1}}],[\"unregistered\",{\"1\":{\"186\":1}}],[\"uncaughtexception\",{\"1\":{\"1096\":1}}],[\"uncaughtexceptionhandler\",{\"1\":{\"1087\":3,\"1093\":1,\"1096\":4,\"1099\":1}}],[\"uncommited\",{\"1\":{\"1035\":1,\"1275\":1,\"1552\":1,\"1557\":1,\"1612\":1}}],[\"uncommitted隔离级别\",{\"1\":{\"754\":1}}],[\"uncommitted\",{\"1\":{\"737\":1}}],[\"unexpected\",{\"1\":{\"1055\":1}}],[\"unequal\",{\"1\":{\"722\":1}}],[\"unwrappedselector\",{\"1\":{\"865\":1,\"869\":1,\"870\":4}}],[\"unzip\",{\"1\":{\"731\":1,\"1688\":1}}],[\"uname\",{\"1\":{\"634\":3}}],[\"undefined\",{\"1\":{\"1854\":1}}],[\"undeclared\",{\"1\":{\"1055\":1}}],[\"undeclaredthrowableexception\",{\"1\":{\"1015\":1,\"1055\":1}}],[\"understandingthejvm\",{\"1\":{\"283\":1}}],[\"understanding\",{\"1\":{\"283\":1}}],[\"underscore\",{\"1\":{\"79\":6}}],[\"undo链表\",{\"1\":{\"749\":4,\"750\":2}}],[\"undo页面链表总结\",{\"1\":{\"749\":1}}],[\"undo页面链表的first\",{\"1\":{\"749\":1}}],[\"undo页面链表的基结点\",{\"1\":{\"749\":1}}],[\"undo页面链表\",{\"1\":{\"749\":1}}],[\"undo页面特有undo\",{\"1\":{\"749\":1}}],[\"undo页的回收\",{\"1\":{\"640\":1}}],[\"undo表空间中分配\",{\"1\":{\"745\":1}}],[\"undo日志不能立即删除\",{\"1\":{\"754\":1}}],[\"undo日志在事务提交后即可释放\",{\"1\":{\"754\":1}}],[\"undo日志专门存放于fil\",{\"1\":{\"749\":1}}],[\"undo日志中\",{\"1\":{\"747\":1}}],[\"undo日志\",{\"0\":{\"746\":1,\"747\":1,\"748\":1}}],[\"undo日志记录在fil\",{\"1\":{\"745\":1}}],[\"undo日志格式\",{\"0\":{\"745\":1}}],[\"undo\",{\"0\":{\"743\":1,\"1554\":1},\"1\":{\"638\":1,\"639\":1,\"640\":1,\"684\":1,\"735\":1,\"745\":1,\"746\":2,\"747\":3,\"748\":4,\"749\":39,\"750\":1,\"751\":4,\"752\":1,\"753\":1,\"1034\":1,\"1553\":1,\"1554\":4,\"1557\":2}}],[\"undolog\",{\"1\":{\"570\":1}}],[\"unflushedmessages\",{\"1\":{\"476\":1}}],[\"unfinalized\",{\"1\":{\"196\":10}}],[\"uniq\",{\"1\":{\"1631\":1}}],[\"uniquekey\",{\"1\":{\"1363\":2}}],[\"unique字段的记录\",{\"1\":{\"684\":1,\"1557\":1}}],[\"unique\",{\"1\":{\"598\":2,\"601\":1,\"699\":2,\"701\":2,\"728\":2,\"1567\":2}}],[\"uniform\",{\"1\":{\"1446\":1}}],[\"unix中的五种io模型\",{\"1\":{\"1504\":1}}],[\"unix\",{\"1\":{\"1168\":1,\"1461\":1,\"1476\":1}}],[\"unixtime\",{\"1\":{\"928\":1}}],[\"unix时间戳\",{\"1\":{\"913\":1}}],[\"unix域套接字\",{\"1\":{\"672\":1}}],[\"unit\",{\"1\":{\"332\":1,\"334\":1,\"839\":1,\"1106\":1,\"1110\":3,\"1113\":2,\"1120\":3,\"1511\":1}}],[\"unicode\",{\"1\":{\"315\":1}}],[\"union三种索引合并的方式来执行查询\",{\"1\":{\"728\":1}}],[\"union合并\",{\"1\":{\"711\":2}}],[\"union写在子查询中\",{\"1\":{\"126\":1}}],[\"union写在from中\",{\"1\":{\"126\":1}}],[\"union联合\",{\"0\":{\"126\":1}}],[\"union\",{\"0\":{\"606\":2},\"1\":{\"112\":2,\"126\":5,\"606\":2,\"624\":2,\"728\":4}}],[\"unboxing\",{\"1\":{\"263\":1}}],[\"unsubscribe\",{\"1\":{\"939\":1}}],[\"unsafe\",{\"0\":{\"149\":1,\"1134\":1},\"1\":{\"149\":1,\"212\":1,\"362\":5,\"873\":6,\"1134\":2,\"1135\":21,\"1136\":5,\"1137\":1,\"1138\":1,\"1139\":1,\"1144\":1,\"1513\":1}}],[\"unsignedlongs\",{\"1\":{\"80\":1}}],[\"unsignedlong\",{\"1\":{\"80\":1}}],[\"unsignedints\",{\"1\":{\"80\":1}}],[\"unsignedinteger\",{\"1\":{\"80\":1}}],[\"unsignedbytes\",{\"1\":{\"80\":1}}],[\"unsigned\",{\"1\":{\"9\":1,\"661\":1,\"1357\":1,\"1358\":1,\"1664\":1}}],[\"unpooledbytebufallocator\",{\"1\":{\"860\":2}}],[\"unpooleddirectbytebuf\",{\"1\":{\"829\":1}}],[\"unpooledheapbytebuf\",{\"1\":{\"829\":1}}],[\"unpooled|pooled\",{\"1\":{\"826\":1}}],[\"unpooled\",{\"0\":{\"834\":1},\"1\":{\"526\":1,\"834\":3}}],[\"unpack200\",{\"1\":{\"228\":1}}],[\"unpark\",{\"0\":{\"140\":1,\"364\":1},\"1\":{\"6\":4,\"7\":1,\"8\":2,\"363\":1,\"364\":3,\"365\":1,\"366\":3,\"1074\":1,\"1138\":3}}],[\"unprocessedrequests\",{\"1\":{\"100\":1}}],[\"unnecessary\",{\"1\":{\"8\":1}}],[\"unless\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"unlinkcancelledwaiters\",{\"1\":{\"8\":1}}],[\"unlockwrite\",{\"1\":{\"158\":1}}],[\"unlockread\",{\"1\":{\"158\":1}}],[\"unlock\",{\"1\":{\"5\":1,\"156\":1,\"157\":1,\"331\":1,\"550\":1,\"552\":1,\"1114\":2,\"1115\":2,\"1116\":3,\"1264\":1,\"1517\":1,\"1562\":1}}],[\"0db8\",{\"1\":{\"1792\":1}}],[\"0b00001111\",{\"1\":{\"1666\":1}}],[\"0b0011\",{\"1\":{\"1666\":1}}],[\"0b0101\",{\"1\":{\"1666\":1}}],[\"09\",{\"1\":{\"1304\":1}}],[\"0之后validate\",{\"1\":{\"1148\":1}}],[\"0在线\",{\"1\":{\"941\":1}}],[\"0未通过\",{\"1\":{\"923\":1}}],[\"0空字符\",{\"1\":{\"879\":1}}],[\"0x3f\",{\"1\":{\"1666\":1}}],[\"0x33333333\",{\"1\":{\"1666\":3}}],[\"0x0f0f0f0f\",{\"1\":{\"1666\":2}}],[\"0x55555555\",{\"1\":{\"1666\":2}}],[\"0xff\",{\"1\":{\"848\":1,\"849\":1}}],[\"0x250\",{\"1\":{\"828\":2}}],[\"0x2e1884dd\",{\"1\":{\"820\":2}}],[\"0x749124ba\",{\"1\":{\"820\":1}}],[\"0x80000000\",{\"1\":{\"3\":1}}],[\"04\",{\"1\":{\"768\":1,\"1729\":1}}],[\"02\",{\"0\":{\"837\":1},\"1\":{\"768\":1,\"828\":2,\"1144\":1}}],[\"02000\",{\"1\":{\"634\":1}}],[\"0为手动提交\",{\"1\":{\"734\":1}}],[\"0为none\",{\"1\":{\"474\":1}}],[\"0非null\",{\"1\":{\"684\":1}}],[\"07\",{\"1\":{\"665\":1,\"1729\":1,\"1793\":1}}],[\"00没出现\",{\"1\":{\"1658\":1}}],[\"000\",{\"1\":{\"1112\":2}}],[\"00001111\",{\"1\":{\"1666\":1}}],[\"000002\",{\"1\":{\"1155\":1}}],[\"00000000000000000000000000000\",{\"1\":{\"1112\":5}}],[\"00000000000000004096\",{\"1\":{\"475\":1}}],[\"0000\",{\"1\":{\"976\":2,\"1792\":2}}],[\"00008\",{\"1\":{\"675\":1}}],[\"0011\",{\"1\":{\"1666\":1}}],[\"001\",{\"1\":{\"1077\":1,\"1112\":1}}],[\"00\",{\"1\":{\"665\":5,\"828\":4,\"1722\":1,\"1729\":1,\"1878\":1}}],[\"06\",{\"1\":{\"565\":1,\"768\":1,\"1304\":1,\"1722\":1,\"1729\":1}}],[\"08\",{\"1\":{\"565\":1,\"1811\":1}}],[\"0<\",{\"1\":{\"382\":2,\"383\":1,\"1179\":2}}],[\"05\",{\"1\":{\"129\":6,\"768\":1,\"1304\":2,\"1811\":1}}],[\"0370\",{\"1\":{\"1792\":1}}],[\"03\",{\"1\":{\"112\":1,\"665\":1,\"768\":1,\"1811\":1}}],[\"01出现一次\",{\"1\":{\"1658\":1}}],[\"011\",{\"1\":{\"1112\":1}}],[\"0101\",{\"1\":{\"1666\":1}}],[\"010\",{\"1\":{\"1112\":1}}],[\"01|00\",{\"1\":{\"828\":1}}],[\"0123456789abcdef3333\",{\"1\":{\"788\":1}}],[\"01之后的员工\",{\"1\":{\"611\":1}}],[\"01\",{\"0\":{\"805\":1},\"1\":{\"83\":1,\"122\":2,\"129\":3,\"593\":2,\"595\":2,\"611\":3,\"665\":8,\"768\":1,\"892\":1,\"1304\":1,\"1322\":2,\"1657\":1,\"1722\":1}}],[\"0l\",{\"1\":{\"6\":1,\"8\":1,\"363\":2}}],[\"0\",{\"1\":{\"6\":6,\"7\":1,\"8\":4,\"9\":16,\"14\":1,\"15\":1,\"70\":2,\"77\":1,\"83\":2,\"93\":2,\"95\":1,\"112\":5,\"124\":3,\"125\":3,\"146\":1,\"184\":1,\"188\":1,\"196\":2,\"223\":1,\"340\":2,\"342\":3,\"357\":1,\"363\":1,\"366\":3,\"382\":5,\"383\":1,\"410\":1,\"424\":1,\"450\":1,\"453\":1,\"456\":1,\"460\":1,\"461\":2,\"465\":4,\"474\":1,\"475\":1,\"488\":1,\"490\":2,\"495\":1,\"505\":1,\"506\":4,\"569\":2,\"594\":2,\"598\":2,\"631\":1,\"638\":1,\"649\":5,\"685\":1,\"687\":1,\"689\":1,\"716\":1,\"734\":1,\"739\":1,\"772\":1,\"777\":1,\"782\":1,\"783\":3,\"788\":2,\"789\":1,\"791\":2,\"796\":1,\"817\":1,\"820\":8,\"822\":1,\"827\":1,\"829\":1,\"831\":1,\"842\":1,\"843\":1,\"849\":3,\"850\":3,\"863\":1,\"865\":1,\"867\":1,\"873\":6,\"882\":1,\"883\":10,\"909\":2,\"927\":1,\"940\":8,\"946\":1,\"985\":2,\"989\":1,\"990\":2,\"991\":4,\"993\":5,\"994\":5,\"995\":4,\"996\":10,\"998\":4,\"1001\":1,\"1016\":4,\"1033\":1,\"1077\":2,\"1087\":1,\"1088\":1,\"1090\":1,\"1091\":5,\"1095\":2,\"1099\":1,\"1106\":1,\"1108\":1,\"1112\":2,\"1113\":3,\"1116\":5,\"1119\":1,\"1120\":3,\"1136\":4,\"1148\":1,\"1196\":8,\"1218\":2,\"1263\":1,\"1329\":2,\"1330\":1,\"1343\":1,\"1351\":1,\"1357\":1,\"1358\":2,\"1366\":2,\"1404\":1,\"1412\":1,\"1413\":1,\"1422\":8,\"1426\":4,\"1446\":1,\"1460\":2,\"1463\":1,\"1471\":1,\"1488\":1,\"1494\":2,\"1555\":1,\"1556\":1,\"1567\":4,\"1574\":1,\"1634\":4,\"1651\":1,\"1652\":5,\"1653\":1,\"1654\":3,\"1655\":1,\"1662\":3,\"1664\":2,\"1665\":2,\"1666\":3,\"1669\":1,\"1672\":1,\"1673\":1,\"1674\":2,\"1675\":3,\"1676\":2,\"1677\":1,\"1711\":2,\"1712\":7,\"1856\":2,\"1862\":7,\"1868\":6,\"1878\":2}}],[\"反色\",{\"1\":{\"1855\":1}}],[\"反正我的物质生活质量要求也不高\",{\"1\":{\"1771\":1}}],[\"反复被捞\",{\"1\":{\"1771\":1}}],[\"反复被挂\",{\"1\":{\"1771\":1}}],[\"反复操作\",{\"1\":{\"1665\":1}}],[\"反引号的会被当做命令处理\",{\"1\":{\"1685\":1}}],[\"反馈\",{\"1\":{\"1470\":1}}],[\"反向代理代理服务器\",{\"1\":{\"1366\":1}}],[\"反向代理\",{\"0\":{\"1366\":1}}],[\"反熵机制是个啥\",{\"1\":{\"1240\":1}}],[\"反而会影响并发性能\",{\"1\":{\"1077\":1}}],[\"反超的势头\",{\"1\":{\"376\":1}}],[\"反射可以让代码更加灵活\",{\"1\":{\"1531\":1}}],[\"反射可以在运行时分析类以及执行类中方法\",{\"1\":{\"1531\":1}}],[\"反射机制\",{\"0\":{\"1531\":1}}],[\"反射式\",{\"1\":{\"1264\":1}}],[\"反射执行业务方法\",{\"1\":{\"1059\":1}}],[\"反射生成代理类的实例\",{\"1\":{\"1015\":1}}],[\"反射模块\",{\"1\":{\"545\":1}}],[\"反射实例化后加入\",{\"1\":{\"383\":1}}],[\"反射\",{\"0\":{\"307\":1},\"1\":{\"1009\":1,\"1378\":1,\"1527\":1}}],[\"反映jvm内部情况的jmxbean\",{\"1\":{\"224\":1}}],[\"反序列化流\",{\"1\":{\"1502\":1}}],[\"反序列化的对象保持一致\",{\"1\":{\"321\":1}}],[\"反序列化\",{\"1\":{\"101\":2,\"1527\":1,\"1623\":2}}],[\"反序列化等过程\",{\"1\":{\"25\":1}}],[\"反直觉的输出\",{\"1\":{\"79\":1}}],[\"反之也可以\",{\"1\":{\"1634\":1}}],[\"反之\",{\"1\":{\"5\":1,\"8\":1}}],[\"反加大于等于0\",{\"1\":{\"5\":1}}],[\"描述支持的媒体格式\",{\"1\":{\"1860\":1}}],[\"描述一个系统在大部分时间都是可用的\",{\"1\":{\"1638\":1}}],[\"描述信息\",{\"1\":{\"1634\":1,\"1692\":1}}],[\"描述符上有可读事件发生时\",{\"1\":{\"1487\":1}}],[\"描述进程暂时被淘汰出内存的状态\",{\"1\":{\"1450\":1}}],[\"描述节点的元数据\",{\"1\":{\"1168\":1}}],[\"描述具体执行查询的方式\",{\"1\":{\"727\":1}}],[\"描述如何从数据库结果集中加载对象\",{\"1\":{\"529\":1}}],[\"描述该索引的全局配置\",{\"1\":{\"42\":1}}],[\"描述了当前索引的版本\",{\"1\":{\"37\":1}}],[\"描述字段的约束信息\",{\"1\":{\"34\":1}}],[\"描述\",{\"1\":{\"5\":1,\"34\":1,\"112\":1,\"467\":1,\"485\":1,\"598\":1,\"609\":1,\"688\":1,\"697\":1,\"736\":1}}],[\"通向这个地球上离天最近的地方\",{\"1\":{\"1833\":1}}],[\"通\",{\"1\":{\"1422\":1}}],[\"通俗的讲\",{\"1\":{\"621\":1}}],[\"通配\",{\"1\":{\"590\":1}}],[\"通用的注解\",{\"1\":{\"1594\":1}}],[\"通用块层\",{\"0\":{\"1483\":1},\"1\":{\"1484\":1}}],[\"通用寄存器\",{\"1\":{\"1432\":1}}],[\"通用属性\",{\"0\":{\"923\":1}}],[\"通用格式中\",{\"1\":{\"739\":1}}],[\"通用页结构\",{\"1\":{\"691\":1}}],[\"通用表空间\",{\"1\":{\"639\":1}}],[\"通用公开\",{\"1\":{\"409\":1}}],[\"通用创建方式\",{\"1\":{\"81\":1}}],[\"通信时\",{\"1\":{\"1420\":1}}],[\"通信密文都会被破解\",{\"1\":{\"1402\":1}}],[\"通信过程中基于对称加密用会话秘钥来加密明文数据\",{\"1\":{\"1401\":1}}],[\"通信建立前基于非对称加密的数字证书交换会话秘钥\",{\"1\":{\"1401\":1}}],[\"通信连接\",{\"0\":{\"940\":1}}],[\"通信流程\",{\"0\":{\"672\":1}}],[\"通信和大多数基于客户端\",{\"1\":{\"570\":1}}],[\"通信\",{\"0\":{\"342\":1,\"343\":1},\"1\":{\"1512\":1}}],[\"通道可写\",{\"1\":{\"785\":1}}],[\"通道可写时触发\",{\"1\":{\"785\":1}}],[\"通道可读时触发\",{\"1\":{\"785\":1}}],[\"通道是双向的\",{\"1\":{\"324\":1}}],[\"通道\",{\"1\":{\"324\":1}}],[\"通知类型\",{\"0\":{\"1602\":1}}],[\"通知订单系统将这个订单的优惠券业务状态设为完成\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"通知的优先级\",{\"1\":{\"1057\":2}}],[\"通知机制\",{\"1\":{\"365\":1}}],[\"通知等待的线程\",{\"1\":{\"184\":1}}],[\"通知模式下\",{\"1\":{\"1057\":1}}],[\"通知模式\",{\"1\":{\"161\":1,\"365\":1}}],[\"通知\",{\"1\":{\"137\":1,\"1059\":2,\"1092\":1,\"1162\":1}}],[\"通常来说\",{\"1\":{\"1745\":1}}],[\"通常由三大系统组成\",{\"1\":{\"1723\":1}}],[\"通常开销较大\",{\"1\":{\"1524\":1}}],[\"通常包括\",{\"1\":{\"1522\":1}}],[\"通常被用于线程间交互\",{\"1\":{\"1512\":1}}],[\"通常耗时较长\",{\"1\":{\"1437\":1}}],[\"通常也用不太到的奇技淫巧\",{\"1\":{\"1339\":1}}],[\"通常api网指的是业务网关\",{\"1\":{\"1300\":1}}],[\"通常基于某些分布式事务组件例如\",{\"1\":{\"1284\":1}}],[\"通常可以把它理解为\",{\"1\":{\"1315\":1}}],[\"通常可以将nginx至于api网关前\",{\"1\":{\"1300\":1}}],[\"通常可以基于\",{\"1\":{\"1262\":1}}],[\"通常可以直接使用\",{\"1\":{\"73\":1}}],[\"通常存储在关系数据库\",{\"1\":{\"1224\":1}}],[\"通常需要实际生产环境的验证得到一个较好的参数值\",{\"1\":{\"1120\":1}}],[\"通常采用\",{\"1\":{\"1119\":1}}],[\"通常我们使用的也是它的实现类\",{\"1\":{\"1044\":1}}],[\"通常的\",{\"1\":{\"1036\":1}}],[\"通常的统计算法有\",{\"1\":{\"976\":1}}],[\"通常会把空出来的座位在互联网平台上投放出去\",{\"1\":{\"1737\":1}}],[\"通常会采用\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"通常会多分配两个字节\",{\"1\":{\"975\":1}}],[\"通常会将其声明为全局变量\",{\"1\":{\"154\":1}}],[\"通常就是半连接队列\",{\"1\":{\"856\":1}}],[\"通常倾向于使用更高性能的\",{\"1\":{\"784\":1}}],[\"通常有多个文件构成一个日志文件组\",{\"1\":{\"739\":1}}],[\"通常使用\",{\"1\":{\"1463\":1}}],[\"通常使用较少\",{\"1\":{\"697\":1}}],[\"通常使用了线程池\",{\"1\":{\"154\":1,\"1514\":1}}],[\"通常显式性能比隐式高\",{\"1\":{\"603\":1}}],[\"通常只需要配置\",{\"1\":{\"526\":1}}],[\"通常只有\",{\"1\":{\"470\":1}}],[\"通常在消息系统中\",{\"1\":{\"480\":1}}],[\"通常为了不给系统带来额外负担一般会采用异步上报\",{\"1\":{\"441\":1}}],[\"通常捕获通过应用的流\",{\"1\":{\"390\":1}}],[\"通常与其他同步工具一起使用\",{\"1\":{\"362\":1}}],[\"通常指定一个序列化版本号\",{\"1\":{\"321\":1}}],[\"通常加上\",{\"1\":{\"298\":1}}],[\"通常比线程更加轻量\",{\"1\":{\"282\":1}}],[\"通常是只有网页端\",{\"1\":{\"1804\":1}}],[\"通常是键值对\",{\"1\":{\"1543\":1}}],[\"通常是线程池中的线程已经用完\",{\"1\":{\"1511\":1}}],[\"通常是一个符号引用\",{\"1\":{\"1351\":1}}],[\"通常是项目中编写的java类\",{\"1\":{\"254\":1}}],[\"通常是由虚拟机实现提供的\",{\"1\":{\"254\":1}}],[\"通常用\",{\"1\":{\"1428\":1}}],[\"通常用本地代码来实现\",{\"1\":{\"254\":1}}],[\"通常用于文件的保存\",{\"1\":{\"1689\":1}}],[\"通常用于虚拟机\",{\"1\":{\"1483\":1}}],[\"通常用于处理异步事件\",{\"1\":{\"1462\":1}}],[\"通常用于配置方法\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"通常用于临时表及缓存\",{\"1\":{\"682\":1}}],[\"通常用于执行某些清理工作或其他操作\",{\"1\":{\"194\":1}}],[\"通常用于对内存敏感的缓存场景\",{\"1\":{\"192\":1}}],[\"通常用于确保对象不会被意外地回收\",{\"1\":{\"191\":1}}],[\"通常更推荐使用\",{\"1\":{\"136\":1}}],[\"通常\",{\"1\":{\"5\":1,\"383\":1,\"698\":1}}],[\"通过黑屏系统指令获取\",{\"1\":{\"1729\":1}}],[\"通过定义工厂类来创建对象\",{\"1\":{\"1646\":1}}],[\"通过脚本盗用信息\",{\"1\":{\"1642\":1}}],[\"通过脚本一次性改写大量提交\",{\"1\":{\"1344\":1}}],[\"通过crud\",{\"1\":{\"1640\":1}}],[\"通过client\",{\"1\":{\"923\":1}}],[\"通过测试工具模拟用户请求系统\",{\"1\":{\"1639\":1}}],[\"通过模块名或者模块文档\",{\"1\":{\"1632\":1}}],[\"通过模板方式定义了一些方法的默认实现\",{\"1\":{\"1111\":1}}],[\"通过自动\",{\"1\":{\"1609\":1}}],[\"通过三级缓存解决循环依赖\",{\"1\":{\"1599\":1}}],[\"通过扫描各种注解\",{\"1\":{\"1594\":1}}],[\"通过类路径扫描来自动侦测以及自动装配到\",{\"1\":{\"1594\":1}}],[\"通过读取数据库中的键值对\",{\"1\":{\"1577\":1}}],[\"通过读取外部的属性配置文件\",{\"1\":{\"1026\":1}}],[\"通过多台数据库服务器\",{\"1\":{\"1563\":1}}],[\"通过加锁\",{\"1\":{\"1557\":1}}],[\"通过加锁实现线程安全\",{\"1\":{\"1499\":1}}],[\"通过继承方式实现代理\",{\"1\":{\"1532\":1}}],[\"通过继承目标类实现代理\",{\"1\":{\"1014\":1}}],[\"通过内置的\",{\"1\":{\"1516\":1}}],[\"通过内存池减少了系统调用和缺页中断\",{\"1\":{\"1445\":1}}],[\"通过插入特定的内存屏障\",{\"1\":{\"1507\":1}}],[\"通过组合替代继承\",{\"1\":{\"1503\":1}}],[\"通过维护多层链表实现的\",{\"1\":{\"1500\":1}}],[\"通过回调函数\",{\"1\":{\"1487\":1}}],[\"通过回调由另外的线程来获得结果\",{\"1\":{\"795\":1}}],[\"通过通用块层管理不同的块设备\",{\"1\":{\"1483\":1}}],[\"通过特殊汇编指令操作\",{\"1\":{\"1481\":1}}],[\"通过对资源进行排序\",{\"1\":{\"1466\":1}}],[\"通过消息传递数据\",{\"1\":{\"1458\":1}}],[\"通过消息队列在线程间传递数据\",{\"1\":{\"791\":1}}],[\"通过mkfifo创建\",{\"1\":{\"1457\":1}}],[\"通过pipe创建\",{\"1\":{\"1456\":1}}],[\"通过链表组织起来\",{\"1\":{\"1450\":1}}],[\"通过后台守护进程\",{\"1\":{\"1447\":1}}],[\"通过总线访问其它\",{\"1\":{\"1446\":1}}],[\"通过页面置换算法得到以下两类可回收的内存\",{\"1\":{\"1446\":1}}],[\"通过取模运算\",{\"1\":{\"1435\":1}}],[\"通过软中断通知ksoftirqd接收数据\",{\"1\":{\"1422\":1}}],[\"通过软引用包装\",{\"1\":{\"74\":1}}],[\"通过压缩做了很多改进\",{\"1\":{\"1406\":1}}],[\"通过连接id标记通信的两个端点\",{\"1\":{\"1404\":1}}],[\"通过连表查询即可实现第一句的效果\",{\"1\":{\"618\":1}}],[\"通过哈希函数计算传输内容的指纹\",{\"1\":{\"1401\":1}}],[\"通过缓存技术\",{\"1\":{\"1400\":1}}],[\"通过一次磁盘顺序读将多个\",{\"1\":{\"1448\":1}}],[\"通过一层层的继承关系主要实现了两个接口\",{\"1\":{\"1378\":1}}],[\"通过一个类的全限定名来获取定义此类的二进制字节流\",{\"1\":{\"249\":1}}],[\"通过监控\",{\"1\":{\"1374\":1}}],[\"通过配置文件或者注解给\",{\"1\":{\"1597\":1}}],[\"通过配置的方式限制批量请求的总时间\",{\"1\":{\"1363\":1}}],[\"通过配置参数partition\",{\"1\":{\"494\":1}}],[\"通过git\",{\"1\":{\"1347\":1}}],[\"通过虚拟ip+虚拟端口对外提供服务\",{\"1\":{\"1301\":1}}],[\"通过数据库的日志和加锁实现\",{\"1\":{\"1283\":1}}],[\"通过数据流分析和控制流分析\",{\"1\":{\"250\":1}}],[\"通过强制\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"通过心跳保持为\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"通过心跳保持\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"通过执行多个\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"通过保持复制日志的一致性\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"通过保存所执行的写命令实现持久化\",{\"1\":{\"915\":1}}],[\"通过分布式锁\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"通过分区数\",{\"1\":{\"495\":1}}],[\"通过协商结果来判断是否使用本地缓存\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"通过远程配置逐步将所有缓存的读操作迁移到新集群\",{\"1\":{\"1236\":1}}],[\"通过远程配置的形式控制某类缓存是否要从新集群读取\",{\"1\":{\"1236\":1}}],[\"通过命令只能新增文件\",{\"1\":{\"1218\":1}}],[\"通过增加机器数量来满足大规模数据存储和处理的需求\",{\"1\":{\"1215\":1}}],[\"通过其简单的架构和\",{\"1\":{\"1161\":1}}],[\"通过wsl地址连接服务\",{\"0\":{\"1152\":1}}],[\"通过池化技术重复利用已创建的线程\",{\"1\":{\"1104\":1}}],[\"通过中断异常来退出执行\",{\"1\":{\"1093\":1}}],[\"通过嵌套begin\",{\"1\":{\"1049\":1}}],[\"通过二级缓存将成品对象和半成品对象分开\",{\"1\":{\"1028\":1}}],[\"通过二分法确定该记录所在的槽\",{\"1\":{\"690\":1}}],[\"通过实现和目标一样的接口实现代理\",{\"1\":{\"1014\":1}}],[\"通过实现\",{\"1\":{\"1009\":1}}],[\"通过不同的\",{\"1\":{\"1008\":1}}],[\"通过位移\",{\"1\":{\"976\":1}}],[\"通过redis\",{\"1\":{\"939\":1}}],[\"通过给定配置参数\",{\"1\":{\"929\":1}}],[\"通过i\",{\"1\":{\"922\":1}}],[\"通过innodb\",{\"1\":{\"719\":1}}],[\"通过打印的日志可以发现\",{\"1\":{\"850\":1}}],[\"通过若干个索引分割\",{\"1\":{\"827\":1}}],[\"通过专门线程访问引用队列\",{\"1\":{\"800\":1}}],[\"通过网络编程实现不同服务器上的方法调用\",{\"1\":{\"1623\":1}}],[\"通过网络连接\",{\"1\":{\"924\":1}}],[\"通过网络把数据实际发送出去\",{\"1\":{\"783\":1}}],[\"通过网络协议进行通讯\",{\"1\":{\"672\":1}}],[\"通过代码操作文件要谨慎\",{\"1\":{\"775\":1}}],[\"通过普通二级索引进行等值匹配\",{\"1\":{\"728\":1}}],[\"通过普通二级索引进行等值匹配可能采用ref方式\",{\"1\":{\"728\":1}}],[\"通过external指定\",{\"1\":{\"1228\":1}}],[\"通过explain命令查看\",{\"1\":{\"727\":1}}],[\"通过exchange进行路由\",{\"1\":{\"412\":1}}],[\"通过主键\",{\"1\":{\"710\":1}}],[\"通过索引列对数据进行排序\",{\"1\":{\"697\":1}}],[\"通过记录的next\",{\"1\":{\"690\":1}}],[\"通过在配置文件中配置可能的枚举值\",{\"1\":{\"656\":1}}],[\"通过在内部定义一个继承自\",{\"1\":{\"9\":1}}],[\"通过static代码段构造枚举的map集合\",{\"1\":{\"1245\":1}}],[\"通过static关键字修饰\",{\"1\":{\"289\":1}}],[\"通过select命令切换数据库\",{\"1\":{\"906\":1}}],[\"通过show\",{\"1\":{\"643\":1}}],[\"通过视图可以让用户只能查询和修改他们所能见到的数据\",{\"1\":{\"625\":1}}],[\"通过覆盖索引加快速度\",{\"1\":{\"618\":1}}],[\"通过创建覆盖索引能够提高性能\",{\"1\":{\"618\":1}}],[\"通过有序索引顺序扫描直接返回有序数据\",{\"1\":{\"616\":1}}],[\"通过表的索引或全表扫描\",{\"1\":{\"616\":1}}],[\"通过反射或者工厂方法创建\",{\"1\":{\"1597\":1}}],[\"通过反射可以获取任意一个类的所有属性和方法\",{\"1\":{\"1531\":1}}],[\"通过反射创建\",{\"1\":{\"543\":1}}],[\"通过反射执行对应方法\",{\"1\":{\"97\":1}}],[\"通过指定的\",{\"1\":{\"541\":1}}],[\"通过轮询算法来分配\",{\"1\":{\"496\":1}}],[\"通过这种压缩策略\",{\"1\":{\"477\":1}}],[\"通过这个基准偏移量\",{\"1\":{\"476\":1}}],[\"通过offset标识消息被消费的位置\",{\"1\":{\"430\":1}}],[\"通过设置不分片确定路径上合适的\",{\"1\":{\"1427\":1}}],[\"通过设置特殊的\",{\"1\":{\"1427\":1}}],[\"通过设置\",{\"1\":{\"424\":1,\"425\":1}}],[\"通过非侵入的方式\",{\"1\":{\"374\":1}}],[\"通过调用方法返回不同类型的线程池对象\",{\"1\":{\"332\":1}}],[\"通过futuretask\",{\"1\":{\"329\":1}}],[\"通过解释器和即时编译器的协作\",{\"1\":{\"242\":1}}],[\"通过查看各种统计信息\",{\"1\":{\"236\":1}}],[\"通过jvm直接调用赋值\",{\"1\":{\"187\":1}}],[\"通过并行的方式进行垃圾回收\",{\"1\":{\"174\":1}}],[\"通过装饰模式\",{\"1\":{\"162\":1}}],[\"通过装饰器模式装饰特殊实现\",{\"1\":{\"71\":1}}],[\"通过与其他类似对象共享尽可能多的数据\",{\"1\":{\"146\":1}}],[\"通过拷贝创建副本对象\",{\"1\":{\"146\":1}}],[\"通过重排序和组合来实现指令级并行\",{\"1\":{\"143\":1}}],[\"通过子列名取出子列值\",{\"1\":{\"122\":1}}],[\"通过弱引用存储\",{\"1\":{\"74\":2}}],[\"通过用户查询的关键词进行分词\",{\"1\":{\"34\":1}}],[\"通过为第三方应用颁发一个\",{\"1\":{\"15\":1}}],[\"通过\",{\"1\":{\"3\":1,\"15\":2,\"21\":1,\"73\":1,\"84\":1,\"99\":1,\"153\":1,\"210\":1,\"382\":5,\"383\":1,\"408\":1,\"796\":1,\"1015\":1,\"1024\":1,\"1045\":1,\"1114\":1,\"1115\":1,\"1125\":2,\"1190\":1,\"1250\":1,\"1311\":3,\"1341\":1,\"1369\":1,\"1395\":2,\"1409\":1,\"1445\":2,\"1446\":1,\"1479\":1,\"1487\":4,\"1497\":2,\"1499\":1,\"1506\":1,\"1511\":1,\"1572\":1,\"1589\":1,\"1628\":1,\"1670\":1,\"1716\":1,\"1790\":1}}],[\"通过队列中的节点来管理等待线程\",{\"1\":{\"2\":1}}],[\"而我在沉迷调整相机一次都没看到\",{\"1\":{\"1844\":1}}],[\"而我们其它人由于贫穷决定听天由命\",{\"1\":{\"1843\":1}}],[\"而我们要学会观察\",{\"1\":{\"1767\":1}}],[\"而他现在已经是一名中共党员了\",{\"1\":{\"1833\":1}}],[\"而城市就是在一群大山的夹缝中建造起来的\",{\"1\":{\"1833\":1}}],[\"而实际码率低的不行\",{\"1\":{\"1803\":1}}],[\"而实现部分则包含低层次的具体实现\",{\"1\":{\"375\":1}}],[\"而税收是国家唯一的常规财富来源\",{\"1\":{\"1767\":1}}],[\"而各个航空公司根据各自喜好排列出相应地舱位表\",{\"1\":{\"1739\":1}}],[\"而大多国内航司的ics系统部署在中航信的主机上\",{\"1\":{\"1734\":1}}],[\"而计算得到的销售价格\",{\"1\":{\"1733\":1}}],[\"而航拓的放大配置是用来多工发送\",{\"1\":{\"1728\":1}}],[\"而gds并不拥有库存\",{\"1\":{\"1724\":1}}],[\"而规模代价平方定律告诉我们要尽早发现错误\",{\"1\":{\"1705\":1}}],[\"而软链接源\",{\"1\":{\"1696\":1}}],[\"而最低位1和0相与得0\",{\"1\":{\"1665\":1}}],[\"而窗口函数不会减少行数\",{\"1\":{\"1567\":1}}],[\"而主库会生成\",{\"1\":{\"1563\":1}}],[\"而哈希值用于确定对象在哈希表中的索引位置\",{\"1\":{\"1535\":1}}],[\"而垃圾收集器就是垃圾收集算法的具体实现\",{\"1\":{\"1525\":1}}],[\"而老年代空间也不足\",{\"1\":{\"1524\":1}}],[\"而老年代的垃圾回收则更加谨慎\",{\"1\":{\"1524\":1}}],[\"而spring\",{\"1\":{\"1716\":1}}],[\"而stringbuffer是线程安全的\",{\"1\":{\"1536\":1}}],[\"而sleep\",{\"1\":{\"1512\":1}}],[\"而s9由于s8是变量\",{\"1\":{\"301\":1}}],[\"而wait\",{\"1\":{\"1512\":1}}],[\"而过期销毁非核心线程是根据当前活跃的线程数来判断的\",{\"1\":{\"1511\":1}}],[\"而使用\",{\"1\":{\"1486\":1}}],[\"而设备驱动程序属于\",{\"1\":{\"1482\":1}}],[\"而真正的异步\",{\"1\":{\"1478\":1}}],[\"而标准库再通过系统调用访问文件\",{\"1\":{\"1478\":1}}],[\"而显式链接通过文件分配表\",{\"1\":{\"1476\":1}}],[\"而文件系统把多个扇区构成一个逻辑块\",{\"1\":{\"1474\":1}}],[\"而目录也是磁盘上的文件\",{\"1\":{\"1474\":1}}],[\"而一般中断返回到该指令的\",{\"1\":{\"1471\":1}}],[\"而一般中断在一条指令执行\",{\"1\":{\"1471\":1}}],[\"而乐观锁\",{\"1\":{\"1468\":1}}],[\"而乐观锁总是假设对共享资源的访问没有冲突\",{\"1\":{\"148\":1}}],[\"而像电影天堂这样的下载站要么是p2p下载\",{\"1\":{\"1810\":1}}],[\"而像坚果云\",{\"1\":{\"1805\":1}}],[\"而像\",{\"1\":{\"1465\":1}}],[\"而协程则是异步\",{\"1\":{\"1453\":1}}],[\"而协议的目的就是划定消息的边界\",{\"1\":{\"845\":1}}],[\"而暂时停止运行\",{\"1\":{\"1450\":1}}],[\"而用户空间内存分为\",{\"1\":{\"1444\":1}}],[\"而二级页表按需创建\",{\"1\":{\"1443\":1}}],[\"而二进制日志不包含查询数据的sql语句\",{\"1\":{\"644\":1}}],[\"而内核空间的代码可以访问所有内存空间\",{\"1\":{\"1440\":1}}],[\"而应用程序具有的权限很小\",{\"1\":{\"1440\":1}}],[\"而应立即执行\",{\"1\":{\"1120\":1}}],[\"而导致\",{\"1\":{\"1435\":1}}],[\"而服务端可能还有数据需要处理和发送\",{\"1\":{\"1410\":1}}],[\"而rpc定制化程度高\",{\"1\":{\"1406\":1,\"1623\":1}}],[\"而经过网关再访问吞吐量还剩\",{\"1\":{\"1367\":1}}],[\"而远程引用是一种只读的\",{\"1\":{\"1351\":1}}],[\"而从读者或者是新加入的开发者角度看可能只需要关注最终的结果\",{\"1\":{\"1337\":1}}],[\"而从属于段的fseg通过维护free\",{\"1\":{\"693\":1}}],[\"而创建一个新分支\",{\"1\":{\"1332\":1}}],[\"而新集群的锁相当于是一个影子锁\",{\"1\":{\"1239\":1}}],[\"而新版的\",{\"1\":{\"448\":1}}],[\"而合并元数据这一操作是由辅助角色\",{\"1\":{\"1219\":1}}],[\"而该中间状态不会影响系统整体可用性\",{\"1\":{\"1207\":1}}],[\"而后面三个属性必须先获取到\",{\"1\":{\"1369\":1}}],[\"而后启动的\",{\"1\":{\"1203\":1}}],[\"而后序遍历代码不仅可以获取参数数据\",{\"1\":{\"999\":1}}],[\"而非\",{\"1\":{\"1657\":1}}],[\"而非自增主键可能引起页分裂导致写性能降低\",{\"1\":{\"1548\":1}}],[\"而非大量数据\",{\"1\":{\"1200\":1}}],[\"而非单列索引\",{\"1\":{\"699\":1}}],[\"而非单独的循环体\",{\"1\":{\"268\":1}}],[\"而如果预读的数据没有被访问\",{\"1\":{\"1448\":1}}],[\"而如果主机宕机\",{\"1\":{\"1420\":1}}],[\"而如果客户端已经发送数据了\",{\"1\":{\"1409\":1}}],[\"而如果客户端写请求命中的是\",{\"1\":{\"1205\":1}}],[\"而如果重定向的工作交由代理服务器完成\",{\"1\":{\"1400\":1}}],[\"而如果经过\",{\"1\":{\"1367\":1}}],[\"而如果执行的是git\",{\"1\":{\"1344\":2}}],[\"而如果替换失败\",{\"1\":{\"1076\":1}}],[\"而如果当前事务的外部已经存在挂起的事务\",{\"1\":{\"1051\":1}}],[\"而如果当前事务的外部还存在挂起的事务\",{\"1\":{\"1050\":1}}],[\"而当\",{\"1\":{\"1074\":1}}],[\"而当服务器开始执行事务时\",{\"1\":{\"960\":1}}],[\"而其它的\",{\"1\":{\"1465\":1}}],[\"而其它线程只能阻塞等待\",{\"1\":{\"1072\":1}}],[\"而其它部分则由\",{\"1\":{\"2\":1}}],[\"而事务操作必须使用同一个\",{\"1\":{\"1045\":1}}],[\"而声明式事务管理只需要在代码中添加\",{\"1\":{\"1040\":1}}],[\"而三级缓存的作用是处理\",{\"1\":{\"1028\":1}}],[\"而动态代理则是在运行时动态生成类的字节码\",{\"1\":{\"1014\":1}}],[\"而push\",{\"1\":{\"988\":1}}],[\"而peek方法返回null\",{\"1\":{\"987\":1}}],[\"而poll方法返回false\",{\"1\":{\"987\":1}}],[\"而offer方法返回false\",{\"1\":{\"987\":1}}],[\"而需要高精度时间的任务\",{\"1\":{\"928\":1}}],[\"而每个元素的分值都是一个double\",{\"1\":{\"900\":1}}],[\"而embstr一次性分配连续的内存空间给两个结构\",{\"1\":{\"896\":1}}],[\"而es使用的倒排索引\",{\"1\":{\"35\":1}}],[\"而值可以是五种对象中任意一种\",{\"1\":{\"895\":1}}],[\"而对外提供的接口是通过\",{\"1\":{\"870\":1}}],[\"而对于tcp\",{\"1\":{\"1417\":1}}],[\"而对于非单例的\",{\"1\":{\"1006\":1}}],[\"而对于read\",{\"1\":{\"754\":1}}],[\"而对于内连接\",{\"1\":{\"718\":1}}],[\"而无需经过\",{\"1\":{\"1136\":1}}],[\"而无需为每个\",{\"1\":{\"851\":1}}],[\"而无需使用操作系统线程的上下文切换开销\",{\"1\":{\"282\":1}}],[\"而context创建时根据配置自动注册bean\",{\"1\":{\"1379\":1}}],[\"而compressed会采用压缩算法对页面进行压缩\",{\"1\":{\"687\":1}}],[\"而c端接口在api层的处理逻辑特别复杂\",{\"1\":{\"1303\":1}}],[\"而ctx\",{\"1\":{\"823\":1}}],[\"而第二个日志打印\",{\"1\":{\"820\":1}}],[\"而udp头部固定只有8个字节\",{\"1\":{\"1408\":1}}],[\"而update\",{\"1\":{\"754\":1}}],[\"而union会自动去重\",{\"1\":{\"606\":1}}],[\"而临时表不需要\",{\"1\":{\"751\":1}}],[\"而普通页面仅填充undo\",{\"1\":{\"749\":1}}],[\"而隔离性由锁机制和mvcc保证\",{\"1\":{\"735\":1}}],[\"而myisam仅支持表锁\",{\"1\":{\"681\":1}}],[\"而myisam不支持\",{\"1\":{\"681\":2}}],[\"而具体的数据存储还是在物理结构\",{\"1\":{\"655\":1}}],[\"而具体底层用到几台数据库\",{\"1\":{\"654\":1}}],[\"而io多路复用通过\",{\"1\":{\"1504\":1}}],[\"而io\",{\"1\":{\"640\":1}}],[\"而会将数据变更记录在\",{\"1\":{\"638\":1}}],[\"而having可以\",{\"1\":{\"585\":1}}],[\"而意向排他锁只能表明表里的某一行被加了行级排他锁\",{\"1\":{\"560\":1}}],[\"而意向锁是表锁\",{\"1\":{\"560\":1}}],[\"而由于mvcc的支持\",{\"1\":{\"550\":1}}],[\"而这些解呈现树形结构\",{\"1\":{\"1669\":1}}],[\"而这缺一不可\",{\"1\":{\"500\":1}}],[\"而这段时间称半衰周期\",{\"1\":{\"268\":1}}],[\"而言\",{\"1\":{\"495\":1}}],[\"而kafka能够保证单分区内有序\",{\"1\":{\"462\":1}}],[\"而为了保证多会话\",{\"1\":{\"461\":1}}],[\"而有了partition后\",{\"1\":{\"451\":1}}],[\"而相比于依赖对象监视器的\",{\"1\":{\"365\":1}}],[\"而流是单向的\",{\"1\":{\"324\":1}}],[\"而回边计数器负责统计方法中循环体代码执行的次数\",{\"1\":{\"268\":1}}],[\"而前期编译器\",{\"1\":{\"255\":1}}],[\"而分派根据调用的接收者确定要调用的具体方法实现\",{\"1\":{\"243\":1}}],[\"而基于寄存器的指令集架构更适合于物理处理器等环境\",{\"1\":{\"242\":1}}],[\"而未被标记的对象则被认为是不可达的\",{\"1\":{\"224\":1}}],[\"而字符串常量池在堆中\",{\"1\":{\"211\":1}}],[\"而在普通家庭用户的局域网环境下一般也能下载\",{\"1\":{\"1810\":1}}],[\"而在第三行\",{\"1\":{\"1666\":1}}],[\"而在获取任务的方法\",{\"1\":{\"1115\":1}}],[\"而在日志实现方面\",{\"1\":{\"385\":1}}],[\"而在\",{\"1\":{\"383\":1,\"490\":1}}],[\"而在实现上\",{\"1\":{\"211\":1}}],[\"而在公平锁\",{\"1\":{\"9\":1}}],[\"而栈顶即活动栈帧\",{\"1\":{\"203\":1}}],[\"而队列中的所有引用则是通过各自的\",{\"1\":{\"184\":1}}],[\"而性能上\",{\"1\":{\"145\":1}}],[\"而锁可以保证整个临界区代码的执行具有原子性\",{\"1\":{\"145\":1}}],[\"而是学习上的痛苦\",{\"1\":{\"1773\":1}}],[\"而是选择与本地精英合作统治\",{\"1\":{\"1767\":1}}],[\"而是直接保存修改文件的快照\",{\"1\":{\"1633\":1}}],[\"而是直接经过文件系统访问磁盘\",{\"1\":{\"1478\":1}}],[\"而是读取行的一个快照数据\",{\"1\":{\"1557\":1}}],[\"而是以页为单位\",{\"1\":{\"1546\":1}}],[\"而是通过\",{\"1\":{\"1499\":1}}],[\"而是通过并发的方式来进行标记和清除\",{\"1\":{\"176\":1}}],[\"而是进程处于就绪队列的时间\",{\"1\":{\"1470\":1}}],[\"而是\",{\"1\":{\"1445\":1}}],[\"而是创建一个新的提交记录\",{\"1\":{\"1344\":1}}],[\"而是创建一个新文件\",{\"1\":{\"917\":1}}],[\"而是不同时刻的快照\",{\"1\":{\"1331\":1}}],[\"而是不会重复拷贝数据到\",{\"1\":{\"802\":1}}],[\"而是位于用户代码层面\",{\"1\":{\"1284\":1}}],[\"而是会在原地进行自旋等待\",{\"1\":{\"1079\":1}}],[\"而是提供了多种事务管理器\",{\"1\":{\"1047\":1}}],[\"而是放入redisclient\",{\"1\":{\"959\":1}}],[\"而是先记录到free字段中\",{\"1\":{\"879\":1}}],[\"而是缓存的拷贝复制\",{\"1\":{\"799\":1}}],[\"而是将需求分解为多个\",{\"1\":{\"1221\":1}}],[\"而是将来让\",{\"1\":{\"795\":1}}],[\"而是将具体的功能以委托的形式交给内部的子类\",{\"1\":{\"9\":1}}],[\"而是由其它线程发送结果\",{\"1\":{\"794\":1}}],[\"而是由配置文件规定\",{\"1\":{\"448\":1}}],[\"而是专门做了优化\",{\"1\":{\"619\":1}}],[\"而是交由容器来管理事务的生命周期\",{\"1\":{\"525\":1}}],[\"而是能够独立运行\",{\"1\":{\"448\":1}}],[\"而是用三台\",{\"1\":{\"448\":1}}],[\"而是等待指定时间后\",{\"1\":{\"423\":1}}],[\"而是等同步代码执行完毕才释放\",{\"1\":{\"139\":1}}],[\"而是根据发送的消息内容中的\",{\"1\":{\"414\":1,\"1628\":1}}],[\"而是对象的地址\",{\"1\":{\"359\":1}}],[\"而是存放在一个栈数据结构中\",{\"1\":{\"242\":1}}],[\"而同步指线程之间按照一定的顺序执行\",{\"1\":{\"137\":1}}],[\"而线程共享进程的地址空间\",{\"1\":{\"1452\":1}}],[\"而线程共享所属进程占有的内存地址空间和资源\",{\"1\":{\"134\":1}}],[\"而线程是处理器调度的基本单位\",{\"1\":{\"1452\":1}}],[\"而线程让进程的内部并发成为了可能\",{\"1\":{\"134\":1}}],[\"而不仅仅是临时文件\",{\"1\":{\"1634\":1}}],[\"而不提供传统数据库的一致性\",{\"1\":{\"1571\":1}}],[\"而不会影响\",{\"1\":{\"1540\":1}}],[\"而不会相互影响\",{\"1\":{\"375\":1}}],[\"而不用检测每一行是否有排他锁\",{\"1\":{\"1560\":1}}],[\"而不用去处理这些策略性的基础设施\",{\"1\":{\"1298\":1}}],[\"而不用定义map<k\",{\"1\":{\"67\":1}}],[\"而不必担心应用程序的分布式特性\",{\"1\":{\"1161\":1}}],[\"而不涉及操作系统内核\",{\"1\":{\"279\":1}}],[\"而不需要直接与子系统的类进行交互\",{\"1\":{\"373\":1}}],[\"而不需要显式使用迭代器\",{\"1\":{\"263\":1}}],[\"而不需要修改代码\",{\"1\":{\"239\":1}}],[\"而不能在运行期检查\",{\"1\":{\"262\":1}}],[\"而不是英文的phoenix\",{\"1\":{\"1796\":1}}],[\"而不是强化精英的控制\",{\"1\":{\"1767\":1}}],[\"而不是每个消费者都收到所有的消息并处理\",{\"1\":{\"1628\":1}}],[\"而不是每条记录都回表再判断是否符合条件\",{\"1\":{\"1548\":1}}],[\"而不是每次迭代都获取和释放锁\",{\"1\":{\"1081\":1}}],[\"而不是个\",{\"1\":{\"1413\":1}}],[\"而不是文件名\",{\"1\":{\"1309\":1}}],[\"而不是真正的发送\",{\"1\":{\"1286\":1}}],[\"而不是在实例化后就立马进行aop代理\",{\"1\":{\"1599\":1}}],[\"而不是在\",{\"1\":{\"1136\":1}}],[\"而不是执行\",{\"1\":{\"1090\":1}}],[\"而不是根据空字符\",{\"1\":{\"879\":1}}],[\"而不是等\",{\"1\":{\"829\":1}}],[\"而不是容器分配的\",{\"1\":{\"791\":1}}],[\"而不是比较索引中的值\",{\"1\":{\"699\":1}}],[\"而不是消息自带的顺序值\",{\"1\":{\"476\":1}}],[\"而不是方法在实际运行时内存布局中的入口地址\",{\"1\":{\"243\":1}}],[\"而不是\",{\"1\":{\"6\":1,\"383\":1,\"1010\":1}}],[\"而且座位也都还在一起\",{\"1\":{\"1848\":1}}],[\"而且门票收费巨贵\",{\"1\":{\"1847\":1}}],[\"而且中途可以在西宁歇上一个白天\",{\"1\":{\"1833\":1}}],[\"而且能听乐手创造出一些即兴的演奏\",{\"1\":{\"1826\":1}}],[\"而且这种我为人人\",{\"1\":{\"1810\":1}}],[\"而且看的时候不用担心网速问题影响观影体验\",{\"1\":{\"1810\":1}}],[\"而且也开始限速了\",{\"1\":{\"1806\":1}}],[\"而且也没有更好用吧\",{\"1\":{\"82\":1}}],[\"而且资源太少\",{\"1\":{\"1805\":1}}],[\"而且疯狂想要你的个人数据\",{\"1\":{\"1805\":1}}],[\"而且跟各个流媒体平台一样吃相难看\",{\"1\":{\"1805\":1}}],[\"而且由于版权的分散\",{\"1\":{\"1803\":1}}],[\"而且不同设备平台上都有对应的软件\",{\"1\":{\"1803\":1}}],[\"而且友超过了师\",{\"1\":{\"1786\":1}}],[\"而且德鲁兹教派在神学实践上更接近基督教\",{\"1\":{\"1767\":1}}],[\"而且两个临近舱位之间的折扣差为一个折扣左右\",{\"1\":{\"1739\":1}}],[\"而且消耗io资源\",{\"1\":{\"1556\":1}}],[\"而且没有额外空间分配担保\",{\"1\":{\"1523\":1}}],[\"而且指针还消耗额外存储空间\",{\"1\":{\"1476\":1}}],[\"而且相同的地址空间不需要切换页表\",{\"1\":{\"1452\":1}}],[\"而且一旦商业数据库实现了\",{\"1\":{\"1283\":1}}],[\"而且风险有点大\",{\"1\":{\"1240\":1}}],[\"而且是持续的心肺有氧\",{\"1\":{\"1796\":1}}],[\"而且是业务核心中的核心服务\",{\"1\":{\"1234\":1}}],[\"而且是正常响应时间\",{\"1\":{\"1206\":1}}],[\"而且集群越大\",{\"1\":{\"1194\":1}}],[\"而且内存使用频繁\",{\"1\":{\"860\":1}}],[\"而且脱离了任务独立存在\",{\"1\":{\"822\":1}}],[\"而且无法原画质观看\",{\"1\":{\"1808\":1}}],[\"而且无法保障数据的安全性\",{\"1\":{\"682\":1}}],[\"而且无法定制\",{\"1\":{\"378\":1}}],[\"而且可能出现死锁\",{\"1\":{\"554\":1}}],[\"而且可以非常容易的嵌入到企业的应用环境中\",{\"1\":{\"432\":1}}],[\"而且该\",{\"1\":{\"461\":1}}],[\"而且效率较高\",{\"1\":{\"223\":1}}],[\"而且支持函数式编程的特性\",{\"1\":{\"58\":1}}],[\"而且\",{\"1\":{\"17\":1,\"148\":1,\"738\":1,\"1555\":1}}],[\"而\",{\"1\":{\"17\":1,\"64\":1,\"71\":1,\"77\":1,\"139\":2,\"475\":1,\"497\":1,\"619\":1,\"760\":3,\"809\":1,\"820\":1,\"821\":1,\"822\":1,\"823\":1,\"967\":1,\"1041\":1,\"1042\":2,\"1058\":1,\"1113\":1,\"1170\":1,\"1187\":1,\"1225\":1,\"1402\":1,\"1412\":1,\"1422\":1,\"1423\":3,\"1445\":1,\"1511\":1,\"1514\":1,\"1532\":1,\"1546\":1}}],[\"而执行\",{\"1\":{\"5\":1}}],[\"这十二天的旅程如此快就结束了\",{\"1\":{\"1849\":1}}],[\"这家餐厅很丰富\",{\"1\":{\"1846\":1}}],[\"这车也是当地居民的公交\",{\"1\":{\"1846\":1}}],[\"这天正好是端午节\",{\"1\":{\"1845\":1}}],[\"这位大哥一个月上了三次珠峰\",{\"1\":{\"1844\":1}}],[\"这还没完\",{\"1\":{\"1843\":1}}],[\"这辈子都没见过这么多的山\",{\"1\":{\"1833\":1}}],[\"这几年由于环境问题又后撤了几十公里\",{\"1\":{\"1844\":1}}],[\"这几年也渐渐想要留下人生中那些不想遗忘的时刻\",{\"1\":{\"1819\":1}}],[\"这几大流媒体平台的视频质量堪忧\",{\"1\":{\"1803\":1}}],[\"这优雅严肃的机械设计\",{\"1\":{\"1799\":1}}],[\"这份实习日记到这就完结了\",{\"1\":{\"1786\":1}}],[\"这三个月就跟打游戏过关卡一样\",{\"1\":{\"1786\":1}}],[\"这三项中的两项\",{\"1\":{\"1206\":1}}],[\"这难用的平台\",{\"1\":{\"1782\":1}}],[\"这不得骂一句傻逼java\",{\"1\":{\"1781\":1}}],[\"这不得瘦死\",{\"1\":{\"1778\":1}}],[\"这周几乎只忙了一个需求\",{\"1\":{\"1784\":1}}],[\"这周\",{\"1\":{\"1783\":1}}],[\"这周还真的是异常的充实～\",{\"1\":{\"1781\":1}}],[\"这周一直在联调测试\",{\"1\":{\"1779\":1}}],[\"这周重启leetcode\",{\"1\":{\"1778\":1}}],[\"这周末颐和园+北海公园暴走25000步\",{\"1\":{\"1778\":1}}],[\"这周基本完成了一个大需求\",{\"1\":{\"1778\":1}}],[\"这周基本就是在熟练\",{\"1\":{\"1777\":1}}],[\"这在当时那个流动性有限的社会中向上流动的唯一手段\",{\"1\":{\"1767\":1}}],[\"这直接挑战了奥斯曼帝国的宗教合法性\",{\"1\":{\"1767\":1}}],[\"这部分库存信息\",{\"1\":{\"1737\":1}}],[\"这部分垃圾只能到下一次\",{\"1\":{\"176\":1}}],[\"这套运价计算系统业内称为shopping系统\",{\"1\":{\"1732\":1}}],[\"这也会导致库存的变化\",{\"1\":{\"1734\":1}}],[\"这也就表明一个\",{\"1\":{\"1626\":1}}],[\"这也是国内用户最主要盗版观影方式了\",{\"1\":{\"1805\":1}}],[\"这也是\",{\"1\":{\"1344\":1,\"1626\":1}}],[\"这也是策略模式的一种应用\",{\"1\":{\"1008\":1}}],[\"这可提高\",{\"1\":{\"1470\":1}}],[\"这可能涉及到数十tb\",{\"1\":{\"1212\":1}}],[\"这整个\",{\"1\":{\"1435\":1}}],[\"这次顺便给他用起来的吧\",{\"1\":{\"1792\":1}}],[\"这次需要新增批量查询接口\",{\"1\":{\"1363\":1}}],[\"这次使用\",{\"1\":{\"1016\":1}}],[\"这会让我们的\",{\"1\":{\"1310\":1}}],[\"这会让索引变得很大\",{\"1\":{\"707\":1}}],[\"这让\",{\"1\":{\"1283\":1}}],[\"这一切的一切\",{\"1\":{\"1849\":1}}],[\"这一天到这还没结束\",{\"1\":{\"1846\":1}}],[\"这一天北京的太阳大得很\",{\"1\":{\"1771\":1}}],[\"这一夜真的太幸福了\",{\"1\":{\"1841\":1}}],[\"这一刻突然觉得一夜的痛苦都是值得的\",{\"1\":{\"1833\":1}}],[\"这一程\",{\"1\":{\"1825\":1}}],[\"这一路的纠结\",{\"1\":{\"1799\":1}}],[\"这一步的原因在于\",{\"1\":{\"1791\":1}}],[\"这一周我下班都很早\",{\"1\":{\"1786\":1}}],[\"这一阶段也可以持续一段时间\",{\"1\":{\"1236\":1}}],[\"这一阶段持续了一个多月\",{\"1\":{\"1235\":1}}],[\"这一阶段\",{\"1\":{\"1235\":1,\"1237\":1}}],[\"这一指派信息会通过消息发送至整个集群\",{\"1\":{\"946\":1}}],[\"这类编程语言去处理\",{\"1\":{\"1223\":1}}],[\"这对我们理解后续的机票业务流程很重要\",{\"1\":{\"1724\":1}}],[\"这对于需要在不同的\",{\"1\":{\"1136\":1}}],[\"这对以后项目里到底要引入哪些依赖\",{\"1\":{\"376\":1}}],[\"这使得可以通过本地指针直接对内存进行读写\",{\"1\":{\"1136\":1}}],[\"这使得加载\",{\"1\":{\"143\":1}}],[\"这无疑也增加了程序发生相关指针问题的风险\",{\"1\":{\"1134\":1}}],[\"这是哪个大厂的老话来着记不得了\",{\"1\":{\"1786\":1}}],[\"这是真正的乘客乘机凭证\",{\"1\":{\"1738\":1}}],[\"这是最关键的一个阶段\",{\"1\":{\"1240\":1}}],[\"这是最好的索引选择性\",{\"1\":{\"707\":1}}],[\"这是mysql\",{\"1\":{\"1148\":1}}],[\"这是\",{\"1\":{\"1093\":1}}],[\"这就回到了国家的责任上来\",{\"1\":{\"1767\":1}}],[\"这就解决了多进程之间地址冲突的问题\",{\"1\":{\"1443\":2}}],[\"这就和\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"这就是分布式锁要解决的问题\",{\"1\":{\"1262\":1}}],[\"这就是\",{\"1\":{\"839\":1}}],[\"这就造成了半包\",{\"1\":{\"839\":1}}],[\"这就达不到高可用的效果\",{\"1\":{\"469\":1}}],[\"这\",{\"1\":{\"839\":1}}],[\"这块内存不受\",{\"1\":{\"800\":1}}],[\"这项能力\",{\"1\":{\"799\":1}}],[\"这期间\",{\"1\":{\"799\":1}}],[\"这期间用户线程阻塞\",{\"1\":{\"799\":1}}],[\"这条数据能够成功\",{\"1\":{\"623\":1}}],[\"这肯定是不合理的\",{\"1\":{\"553\":1}}],[\"这种基于用户名+密码的校验方式去验证\",{\"1\":{\"1791\":1}}],[\"这种情况有可能在外航航班上出现\",{\"1\":{\"1736\":1}}],[\"这种情况下系统显示具体的可利用座位数\",{\"1\":{\"1736\":1}}],[\"这种限流算法无法保证限流速率\",{\"1\":{\"1637\":1}}],[\"这种分代的设计提高了垃圾回收的效率\",{\"1\":{\"1524\":1}}],[\"这种模式基于同步阻塞\",{\"1\":{\"1487\":1}}],[\"这种自己定义了信号处理函数的进程\",{\"1\":{\"1465\":1}}],[\"这种相互制约的等待与互通信息称为进程\",{\"1\":{\"1463\":1}}],[\"这种节约只提供json只写的协议\",{\"1\":{\"1129\":1}}],[\"这种协议非常有效的\",{\"1\":{\"1129\":1}}],[\"这种技术被称为锁粗化\",{\"1\":{\"1081\":1}}],[\"这种类型的设计模式属于行为型模式\",{\"1\":{\"1007\":1}}],[\"这种算法时间复杂度大大降低\",{\"1\":{\"976\":1}}],[\"这种方式除非db和os都挂了\",{\"1\":{\"739\":1,\"1555\":1}}],[\"这种方式存在一些问题\",{\"1\":{\"738\":1}}],[\"这种通过直接访问索引对应的b+树来计算范围区间对应的索引记录条数的方式称为index\",{\"1\":{\"717\":1}}],[\"这种b+tree提高了区间访问的性能\",{\"1\":{\"698\":1}}],[\"这种数据结构就是索引\",{\"1\":{\"697\":1}}],[\"这种存储方式的表称为索引组织表\",{\"1\":{\"615\":1}}],[\"这种架构可以根据业务的需求和实际需要选择合适的存储引擎\",{\"1\":{\"570\":1}}],[\"这种多厂商的支持是基于映射语句中的\",{\"1\":{\"527\":1}}],[\"这种特性主要得益于所有平台统一支持的程序存储格式\",{\"1\":{\"239\":1}}],[\"这两个过程都不用等待\",{\"1\":{\"1478\":1}}],[\"这两个过程共同保证了java程序的多态性和灵活性\",{\"1\":{\"243\":1}}],[\"这两个接口可以看作是事务的描述\",{\"1\":{\"1042\":1}}],[\"这两个接口\",{\"1\":{\"822\":1}}],[\"这两者并不能解决我们的问题\",{\"1\":{\"461\":1}}],[\"这里如果没有这个参数后面bento4切分时会报错\",{\"1\":{\"1868\":1}}],[\"这里推荐电脑端使用alist挂载\",{\"1\":{\"1807\":1}}],[\"这里一般会有查订比\",{\"1\":{\"1737\":1}}],[\"这里\",{\"1\":{\"1240\":1,\"1791\":1}}],[\"这里需要根据实际的缓存使用场景判断双写阶段的持续时间\",{\"1\":{\"1235\":1}}],[\"这里我们让\",{\"1\":{\"1153\":1}}],[\"这里解锁以允许中断\",{\"1\":{\"1115\":1}}],[\"这里的概念可以理解成\",{\"1\":{\"823\":1}}],[\"这里的删除是完整的删除\",{\"1\":{\"748\":1}}],[\"这里才会执行真正的网络读写\",{\"1\":{\"450\":1}}],[\"这里kafka以其高吞吐量在日志处理中得到了很好的应用\",{\"1\":{\"441\":1}}],[\"这里是\",{\"1\":{\"6\":1}}],[\"这时队列中的消息会被平均分摊\",{\"1\":{\"1628\":1}}],[\"这时偏向锁就会升级成轻量级锁\",{\"1\":{\"1515\":1}}],[\"这时找到了一个空槽\",{\"1\":{\"1514\":1}}],[\"这时接收方如果不知道消息边界的话\",{\"1\":{\"1417\":1}}],[\"这时设置\",{\"1\":{\"1413\":1}}],[\"这时候如果我们执行\",{\"1\":{\"1344\":1}}],[\"这时候如果手动引入了\",{\"1\":{\"383\":1}}],[\"这时将rehashidx属性的值置\",{\"1\":{\"883\":1}}],[\"这时将剩余数据发送\",{\"1\":{\"839\":1}}],[\"这时将数据从用户缓冲区写入\",{\"1\":{\"799\":1}}],[\"这时放不下了\",{\"1\":{\"839\":1}}],[\"这时\",{\"1\":{\"829\":1,\"1450\":1}}],[\"这时无须\",{\"1\":{\"829\":1}}],[\"这时即使\",{\"1\":{\"829\":1}}],[\"这时就需要用到元数据锁\",{\"1\":{\"553\":1}}],[\"这时虚拟机将临时启用\",{\"1\":{\"176\":1}}],[\"这么多年过去了\",{\"1\":{\"382\":1}}],[\"这下问题就变得有趣起来了\",{\"1\":{\"380\":1}}],[\"这样避免消息被重复消费\",{\"1\":{\"1628\":1}}],[\"这样违背了spring设计的原则\",{\"1\":{\"1599\":1}}],[\"这样对\",{\"1\":{\"1573\":1}}],[\"这样其它事务对表加排他锁时可以直接检测表的意向锁\",{\"1\":{\"1560\":1}}],[\"这样进程切换到内核态后就可以很方便地访问内核空间内存\",{\"1\":{\"1444\":1}}],[\"这样即使一个ip分片丢失\",{\"1\":{\"1416\":1}}],[\"这样即使系统崩溃也能快速恢复数据\",{\"1\":{\"738\":1,\"1555\":1}}],[\"这样发送方就可以只重传丢失的数据\",{\"1\":{\"1411\":1}}],[\"这样发布者和使用者都不用知道对方的存在\",{\"1\":{\"396\":1}}],[\"这样若干次的提交就形成了一个链表结构\",{\"1\":{\"1332\":1}}],[\"这样序号最小的节点变化时只会触发后续一个节点的监听事件\",{\"1\":{\"1186\":1}}],[\"这样会导致占用内存过多\",{\"1\":{\"789\":1}}],[\"这样能有效地减轻单台数据库的压力\",{\"1\":{\"658\":1}}],[\"这样我们可以根据自己的需要\",{\"1\":{\"570\":1}}],[\"这样在解决大量读操作的环境中能够很好的提升系统的性能\",{\"1\":{\"570\":1}}],[\"这样\",{\"1\":{\"541\":1,\"1291\":1,\"1298\":1,\"1373\":1,\"1411\":1,\"1636\":1}}],[\"这样可以很大程度上简化应用的开发\",{\"1\":{\"1593\":1}}],[\"这样可以提高响应速度\",{\"1\":{\"1518\":1}}],[\"这样可以避免线程饥饿\",{\"1\":{\"1518\":1}}],[\"这样可以确保线程的控制流是相对独立的\",{\"1\":{\"1451\":1}}],[\"这样可以确保类加载的顺序和可靠性\",{\"1\":{\"254\":1}}],[\"这样可以大大节约索引空间\",{\"1\":{\"707\":1}}],[\"这样可以极大地提高数据库的性能\",{\"1\":{\"640\":1}}],[\"这样可以保证多个副本之间的数据一致性\",{\"1\":{\"471\":1}}],[\"这样就可以像读写内存一样读写数据缓冲区\",{\"1\":{\"1481\":1}}],[\"这样就可以保证同一个锁对象的请求在同一时刻仅依赖旧集群或者新集群其中一个\",{\"1\":{\"1240\":1}}],[\"这样就可以在不修改原目标对象的前提下\",{\"1\":{\"1532\":1}}],[\"这样就可以在\",{\"1\":{\"1152\":1}}],[\"这样就仅需要一次\",{\"1\":{\"1077\":1}}],[\"这样就保证了即使遇到数据库突然宕机等情况\",{\"1\":{\"1034\":1}}],[\"这样就不用等长期联系不上或者已经故障的节点\",{\"1\":{\"460\":1}}],[\"这样就实现了负载均衡\",{\"1\":{\"451\":1}}],[\"这样只在日志级别满足打印需求时\",{\"1\":{\"391\":1}}],[\"这样每次日志打印时不用再创建日志对象\",{\"1\":{\"391\":1}}],[\"这样每个线程内访问的都是相同的资源\",{\"1\":{\"154\":1,\"1514\":1}}],[\"这样一个真正可用的对象被完全构造出来\",{\"1\":{\"214\":1}}],[\"这样的日子太美好了\",{\"1\":{\"1815\":1}}],[\"这样的日志门面\",{\"1\":{\"379\":1}}],[\"这样的形式来引用这个\",{\"1\":{\"1791\":1}}],[\"这样的特性\",{\"1\":{\"1657\":1}}],[\"这样的没有实际载体的匿名页数据\",{\"1\":{\"1447\":1}}],[\"这样的没有实际载体的数据\",{\"1\":{\"1446\":1}}],[\"这样的一个连续且尺寸固定的内存空间叫页\",{\"1\":{\"1443\":1}}],[\"这样的四元组来唯一确定一条连接\",{\"1\":{\"1409\":1}}],[\"这样的话对\",{\"1\":{\"1186\":1}}],[\"这样的工具类\",{\"1\":{\"154\":1,\"1514\":1}}],[\"这样的设计可以保证工具类对外接口的简洁性\",{\"1\":{\"9\":1}}],[\"这个仓库在执行\",{\"1\":{\"1791\":1}}],[\"这个印记它永远占着了\",{\"1\":{\"1786\":1}}],[\"这个问题还没想到答案\",{\"1\":{\"1786\":1}}],[\"这个问题直到\",{\"1\":{\"791\":1}}],[\"这个权力等于没有\",{\"1\":{\"1746\":1}}],[\"这个软链接指定的\",{\"1\":{\"1697\":1}}],[\"这个交换器就是\",{\"1\":{\"1629\":1}}],[\"这个功能类似于消息队列\",{\"1\":{\"1626\":1}}],[\"这个类提供了一种访问其唯一的对象的方式\",{\"1\":{\"1645\":1}}],[\"这个类实现了\",{\"1\":{\"1598\":1}}],[\"这个类别被称为topic\",{\"1\":{\"430\":1}}],[\"这个应该没人使用吧\",{\"1\":{\"1574\":1}}],[\"这个是最常用的\",{\"1\":{\"1574\":1}}],[\"这个方法的调用就会被转发到实现\",{\"1\":{\"1532\":1}}],[\"这个方法是事务管理的具体实现\",{\"1\":{\"1059\":1}}],[\"这个机制\",{\"1\":{\"1516\":1}}],[\"这个等待时间不是阻塞状态的时间\",{\"1\":{\"1470\":1}}],[\"这个内存空间专门给应用程序使用\",{\"1\":{\"1440\":1}}],[\"这个内存空间只有内核程序可以访问\",{\"1\":{\"1440\":1}}],[\"这个树就可以看作是仓库的一个快照\",{\"1\":{\"1332\":1}}],[\"这个配置项时\",{\"1\":{\"1240\":1}}],[\"这个datanode一般是离客户端最近\",{\"1\":{\"1220\":1}}],[\"这个全网搜索引擎项目\",{\"1\":{\"1214\":1}}],[\"这个编号就会增加\",{\"1\":{\"1204\":1}}],[\"这个要求\",{\"1\":{\"1202\":1}}],[\"这个文件\",{\"1\":{\"1155\":1}}],[\"这个对象就归该线程所持有\",{\"1\":{\"1077\":1}}],[\"这个流也就用完了\",{\"1\":{\"1068\":1}}],[\"这个拦截器的\",{\"1\":{\"1060\":1}}],[\"这个注解主要包括三个子注解\",{\"1\":{\"1598\":1}}],[\"这个注解的作用就是引入\",{\"1\":{\"1057\":1}}],[\"这个注入选择器\",{\"1\":{\"1057\":1}}],[\"这个空的标记接口\",{\"1\":{\"1047\":1}}],[\"这个事务同步管理器\",{\"1\":{\"1045\":1}}],[\"这个事件会频繁触发\",{\"1\":{\"789\":1}}],[\"这个jar包\",{\"1\":{\"1036\":1}}],[\"这个客户端就和模式建立了订阅关系\",{\"1\":{\"955\":1}}],[\"这个客户端就和频道建立了订阅关系\",{\"1\":{\"954\":1}}],[\"这个字典称为键空间\",{\"1\":{\"907\":1}}],[\"这个放到\",{\"1\":{\"863\":1}}],[\"这个限制称之为\",{\"1\":{\"839\":1}}],[\"这个操作对直接内存代价昂贵\",{\"1\":{\"826\":1}}],[\"这个结果容器\",{\"1\":{\"822\":1}}],[\"这个动作分为两个阶段\",{\"1\":{\"794\":1}}],[\"这个过程由\",{\"1\":{\"1447\":1}}],[\"这个过程中数据是可以正常更新的\",{\"1\":{\"550\":1}}],[\"这个过程可以允许消费者继续保留当前的分区不变化\",{\"1\":{\"497\":1}}],[\"这个过程称为召回\",{\"1\":{\"34\":1}}],[\"这个协议可能最终允许因特网用户向因特网上的其他任何人发送即时消息\",{\"1\":{\"409\":1}}],[\"这个时候可以通过mq来进行削峰\",{\"1\":{\"400\":1}}],[\"这个\",{\"1\":{\"154\":1,\"541\":2,\"1058\":1,\"1116\":1}}],[\"这个会导致不同的集群版本需要不同的transportclient版本\",{\"1\":{\"38\":1}}],[\"这个头节点只是作为占位的虚拟节点\",{\"1\":{\"4\":1}}],[\"这些网站的使用体验都一般\",{\"1\":{\"1804\":1}}],[\"这些平台的视频质量参差不齐\",{\"1\":{\"1804\":1}}],[\"这些代理有一定的研发能力或者是采用一些非正规渠道出票\",{\"1\":{\"1727\":1}}],[\"这些大量数据都会被加入到\",{\"1\":{\"1448\":1}}],[\"这些顶点通过一系列边结对\",{\"1\":{\"1388\":1}}],[\"这些事务之间可能存在相互依赖的关系\",{\"1\":{\"1277\":1}}],[\"这些本地锁解决缓存击穿\",{\"1\":{\"1261\":1}}],[\"这些数据基本都是不变的\",{\"1\":{\"1251\":1}}],[\"这些数据结构以某种方式引用\",{\"1\":{\"697\":1}}],[\"这些块由集群内的唯一\",{\"1\":{\"1219\":1}}],[\"这些不同类型的数据需要采用不同的处理方式\",{\"1\":{\"1212\":1}}],[\"这些方法在提升\",{\"1\":{\"1134\":1}}],[\"这些方法底层基于\",{\"1\":{\"139\":1}}],[\"这些\",{\"1\":{\"765\":1,\"1012\":1}}],[\"这些日志记录必须保持一致\",{\"1\":{\"739\":1}}],[\"这些区的集合为非叶子节点段\",{\"1\":{\"694\":1}}],[\"这些区的集合为叶子节点段\",{\"1\":{\"694\":1}}],[\"这些文件位于同一个文件夹下\",{\"1\":{\"475\":1}}],[\"这些特性在语言的语法上是可选的\",{\"1\":{\"263\":1}}],[\"这些阶段通常都是互相交叉混合进行的\",{\"1\":{\"248\":1}}],[\"这些指令用于异常处理\",{\"1\":{\"241\":1}}],[\"这些指令用于创建对象\",{\"1\":{\"241\":1}}],[\"这些指令用于调用方法\",{\"1\":{\"241\":1}}],[\"这些指令用于控制程序的流程\",{\"1\":{\"241\":1}}],[\"这些指令用于进行数据类型的转换\",{\"1\":{\"241\":1}}],[\"这些指令用于执行算术运算和逻辑运算\",{\"1\":{\"241\":1}}],[\"这些指令用于操作操作数栈\",{\"1\":{\"241\":1}}],[\"这些操作可以帮助开发人员进行调试和故障排查\",{\"1\":{\"236\":1}}],[\"这些工具jdk9之前在jdk\",{\"1\":{\"228\":1}}],[\"这些东西也许有点用\",{\"1\":{\"71\":1}}],[\"这些段里存在很多已经删掉的文档\",{\"1\":{\"34\":1}}],[\"这些集群的appkey都是一样的\",{\"1\":{\"33\":1}}],[\"这些采集器可以从成千上万的系统中采集数据并向logstash和elasticsearch发送数据\",{\"1\":{\"31\":1}}],[\"这些获取方式去尝试竞争资源\",{\"1\":{\"5\":1}}],[\"以百度网盘\",{\"1\":{\"1805\":1}}],[\"以爱奇艺\",{\"1\":{\"1803\":1}}],[\"以响应各种事件\",{\"1\":{\"1790\":1}}],[\"以色列\",{\"1\":{\"1767\":1}}],[\"以体现马龙派教会对天主教教会的归附\",{\"1\":{\"1762\":1}}],[\"以北京到休斯顿的一次搜索为例\",{\"1\":{\"1752\":1}}],[\"以航班号为标识\",{\"1\":{\"1730\":1}}],[\"以制定航班时刻表的形式公布\",{\"1\":{\"1730\":1}}],[\"以旗舰店的形式售卖航司产品\",{\"1\":{\"1727\":1}}],[\"以命令驱动执行不同的功能\",{\"1\":{\"1689\":1}}],[\"以用户身份发送虚假请求\",{\"1\":{\"1642\":1}}],[\"以一定速率网桶里添加令牌\",{\"1\":{\"1637\":1}}],[\"以保证核心业务的正常运行\",{\"1\":{\"1636\":1}}],[\"以保证临界区的程序同一时间只能有一个线程在执行\",{\"1\":{\"148\":1}}],[\"以找到\",{\"1\":{\"1629\":1}}],[\"以找到最优的查询执行计划\",{\"1\":{\"1566\":1}}],[\"以二进制的方式写入磁盘\",{\"1\":{\"1576\":1}}],[\"以二进制的形式保存在磁盘中\",{\"1\":{\"643\":1}}],[\"以实现数据备份\",{\"1\":{\"1563\":1}}],[\"以实现更复杂的线程协作\",{\"1\":{\"362\":1}}],[\"以基于\",{\"1\":{\"1518\":1}}],[\"以减少搜索时间\",{\"1\":{\"1494\":1}}],[\"以减少程序的代码量\",{\"1\":{\"274\":1}}],[\"以减少程序的调用开销\",{\"1\":{\"274\":1}}],[\"以减少程序的执行时间\",{\"1\":{\"274\":1}}],[\"以减少程序的执行时间和内存占用\",{\"1\":{\"274\":1}}],[\"以减少程序内存的使用\",{\"1\":{\"274\":1}}],[\"以链表形式组织一个动态数组表示文件描述符集合\",{\"1\":{\"1487\":1}}],[\"以字符为单位收发数据\",{\"1\":{\"1480\":1}}],[\"以字段为依据\",{\"1\":{\"652\":3}}],[\"以逻辑块为单位读写磁盘\",{\"1\":{\"1474\":1}}],[\"以商品相关信息的\",{\"1\":{\"1368\":1}}],[\"以商品\",{\"1\":{\"1368\":1}}],[\"以免影响开发主线\",{\"1\":{\"1331\":1}}],[\"以文本的形式追加到文件中\",{\"1\":{\"1577\":1}}],[\"以文本的形式展现方便阅读\",{\"1\":{\"1129\":1}}],[\"以文件传输的场景为例\",{\"1\":{\"1486\":1}}],[\"以文件变更列表的方式存储系统\",{\"1\":{\"1309\":1}}],[\"以集群的方式做高可用\",{\"1\":{\"1300\":1}}],[\"以数据为生活赋能\",{\"1\":{\"1211\":1}}],[\"以前觉得自己一个人旅行还算挺勇敢的\",{\"1\":{\"1849\":1}}],[\"以前珠峰大本营离珠峰还要更近\",{\"1\":{\"1844\":1}}],[\"以前都是用的牛奶\",{\"1\":{\"1837\":1}}],[\"以前从来没有坐过这么久的硬座\",{\"1\":{\"1833\":1}}],[\"以前几乎天天都要逛酷安刷帖子\",{\"1\":{\"1828\":1}}],[\"以前不懂为什么要费那么大劲办这么个没什么观赏价值的活动\",{\"1\":{\"1818\":1}}],[\"以前的concurrenthashmap使用分段锁\",{\"1\":{\"1497\":1}}],[\"以前已经有了单个查询请求的接口\",{\"1\":{\"1363\":1}}],[\"以前用户在搜索机场数据时\",{\"1\":{\"1355\":1}}],[\"以前用永久代实现方法区\",{\"1\":{\"1520\":1}}],[\"以前用永久代实现\",{\"1\":{\"211\":1}}],[\"以前放在\",{\"1\":{\"1162\":1}}],[\"以更加深入的理解参数的设定\",{\"1\":{\"1110\":1}}],[\"以非事务方式运行\",{\"1\":{\"1041\":3,\"1049\":1,\"1276\":2,\"1611\":2}}],[\"以非阻塞方式拿到所有\",{\"1\":{\"872\":1}}],[\"以外的所有方法\",{\"1\":{\"1016\":1}}],[\"以nums\",{\"1\":{\"994\":1}}],[\"以上图pek\",{\"1\":{\"1752\":1}}],[\"以上三种锁都是悲观锁\",{\"1\":{\"1468\":1}}],[\"以上三类消息都基于gossip协议\",{\"1\":{\"949\":1}}],[\"以上方法也适用于arraylist\",{\"1\":{\"985\":1}}],[\"以协议格式将被执行的命令追加到redisserver的aof\",{\"1\":{\"916\":1}}],[\"以ascii和16进制打开rdb文件\",{\"1\":{\"914\":1}}],[\"以优化性能\",{\"1\":{\"861\":1}}],[\"以太网的\",{\"1\":{\"839\":1}}],[\"以避免历史报文被下一个相同四元组的连接接收\",{\"1\":{\"1418\":1}}],[\"以避免并发访问导致的问题\",{\"1\":{\"851\":1}}],[\"以避免守护线程意外结束\",{\"1\":{\"796\":1}}],[\"以避免备份期间影响主库服务\",{\"1\":{\"647\":1}}],[\"以充分利用\",{\"1\":{\"791\":1}}],[\"以此缓解服务器资源的的压力\",{\"1\":{\"1636\":1}}],[\"以此实现非锁定读\",{\"1\":{\"1554\":1}}],[\"以此提高节点的均衡度和稳定性\",{\"1\":{\"1489\":1}}],[\"以此提高并发处理能力\",{\"1\":{\"731\":1}}],[\"以此来获得更高的利润\",{\"1\":{\"1735\":1}}],[\"以此来完成\",{\"1\":{\"1577\":1}}],[\"以此来提高恢复速度\",{\"1\":{\"1170\":1}}],[\"以此来执行客户端给定的lua脚本\",{\"1\":{\"965\":1}}],[\"以此来保证事务的安全性\",{\"1\":{\"960\":1}}],[\"以此减少随机io\",{\"1\":{\"742\":1}}],[\"以节省空间\",{\"1\":{\"687\":1}}],[\"以节点为级别的生产请求列表\",{\"1\":{\"450\":1}}],[\"以页作为磁盘和内存之间交互的基本单位\",{\"1\":{\"683\":1}}],[\"以对应不同的数据库服务器\",{\"1\":{\"658\":1}}],[\"以表为依据\",{\"1\":{\"652\":1}}],[\"以使其符合视图的定义\",{\"1\":{\"623\":1}}],[\"以确定语句的执行计划\",{\"1\":{\"570\":1}}],[\"以确保在硬件问题下还保证消息安全\",{\"1\":{\"412\":1}}],[\"以确保序列化\",{\"1\":{\"321\":1}}],[\"以防止幻读\",{\"1\":{\"557\":1}}],[\"以提供更好的性能和并发处理能力\",{\"1\":{\"784\":1}}],[\"以提供可靠的消息传递\",{\"1\":{\"434\":1}}],[\"以提升性能\",{\"1\":{\"705\":1}}],[\"以提升操作效率\",{\"1\":{\"601\":1}}],[\"以提高读写效率\",{\"1\":{\"1483\":1}}],[\"以提高网络效率\",{\"1\":{\"1410\":1}}],[\"以提高程序的并行性\",{\"1\":{\"274\":1}}],[\"以提高程序的执行效率\",{\"1\":{\"274\":1}}],[\"以提高执行速度\",{\"1\":{\"242\":1}}],[\"以其高性能\",{\"1\":{\"426\":1}}],[\"以降低网络流量\",{\"1\":{\"407\":1}}],[\"以内存为基准\",{\"1\":{\"321\":2}}],[\"以u1\",{\"1\":{\"240\":1}}],[\"以class文件作为它们产品的交付媒介\",{\"1\":{\"239\":1}}],[\"以下类库将被一同依赖进去\",{\"1\":{\"1717\":1}}],[\"以下窗口大小的单位都是\",{\"1\":{\"1413\":1}}],[\"以下的框架都使用了\",{\"1\":{\"808\":1}}],[\"以下介绍以mycat为例\",{\"1\":{\"653\":1}}],[\"以下三种情况会触发分区分配\",{\"1\":{\"494\":1}}],[\"以下有重大安全漏洞\",{\"1\":{\"385\":1}}],[\"以下是java协程的一些特点和优势\",{\"1\":{\"282\":1}}],[\"以下是java中常见的语法糖\",{\"1\":{\"263\":1}}],[\"以下是java\",{\"1\":{\"238\":1}}],[\"以下是jconsole的一些主要功能和特点\",{\"1\":{\"236\":1}}],[\"以下是visualvm的一些主要功能和特点\",{\"1\":{\"237\":1}}],[\"以下简称关联对象\",{\"1\":{\"187\":1}}],[\"以便在测试中替代真实的依赖\",{\"1\":{\"1708\":1}}],[\"以便在内存被回收时释放相关资源\",{\"1\":{\"194\":1}}],[\"以便向外界提供功能接口\",{\"1\":{\"1649\":1}}],[\"以便故障时快速切换\",{\"1\":{\"1638\":1}}],[\"以便我们自定义大小\",{\"1\":{\"1444\":1}}],[\"以便对业务并发竞争的程度有个认知\",{\"1\":{\"1239\":1}}],[\"以便后续使用\",{\"1\":{\"289\":1}}],[\"以便支持调用过程中的动态连接\",{\"1\":{\"205\":1}}],[\"以便查看软引用和弱引用的回收情况\",{\"1\":{\"183\":1}}],[\"以后看\",{\"1\":{\"1136\":1}}],[\"以后已经默认使用\",{\"1\":{\"177\":1}}],[\"以后建议使用内置的\",{\"1\":{\"79\":1}}],[\"以尽量减少应用程序的停顿时间\",{\"1\":{\"176\":1}}],[\"以支持访问远端\",{\"1\":{\"1446\":1}}],[\"以支持非标准类型的转换\",{\"1\":{\"521\":1}}],[\"以支持\",{\"1\":{\"209\":1}}],[\"以支持更细粒度的锁定\",{\"1\":{\"158\":1}}],[\"以支持分区键能够用中文表示\",{\"1\":{\"130\":1}}],[\"以当前\",{\"1\":{\"154\":1,\"1514\":1}}],[\"以最大化利用多核处理器提高应用程序的性能\",{\"1\":{\"153\":1}}],[\"以逗号隔开\",{\"1\":{\"105\":1}}],[\"以权重作为容量\",{\"1\":{\"74\":1}}],[\"以跟踪用户\",{\"1\":{\"17\":1}}],[\"以及风趣幽默\",{\"1\":{\"1849\":1}}],[\"以及罗布林卡曾是西藏的政教统治者达赖喇嘛的住所\",{\"1\":{\"1847\":1}}],[\"以及穿着漂亮的牦牛\",{\"1\":{\"1843\":1}}],[\"以及酥油和哈达\",{\"1\":{\"1836\":1}}],[\"以及不愿看使用说明的小白\",{\"1\":{\"1810\":1}}],[\"以及不带阻塞对象的重载\",{\"1\":{\"363\":2}}],[\"以及哈希姆家族\",{\"1\":{\"1765\":1}}],[\"以及很多其它问题分裂成什叶派\",{\"1\":{\"1764\":1}}],[\"以及加快字符串处理速度\",{\"1\":{\"1536\":1}}],[\"以及加入链表\",{\"1\":{\"978\":1}}],[\"以及节点规模会发生变化的场景\",{\"1\":{\"1489\":1}}],[\"以及内核堆栈\",{\"1\":{\"1487\":1}}],[\"以及4次数据拷贝\",{\"1\":{\"1486\":1}}],[\"以及公平读写锁\",{\"1\":{\"1468\":1}}],[\"以及提供一些回调\",{\"1\":{\"1383\":1}}],[\"以及提交差异\",{\"1\":{\"1333\":1}}],[\"以及排查死锁问题jhsdb\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"以及线程数量等信息\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"以及是否是叶子结点的标志位\",{\"1\":{\"1361\":1}}],[\"以及工作区内的数据\",{\"1\":{\"1344\":1}}],[\"以及工具类\",{\"1\":{\"778\":1}}],[\"以及他们的最新提交记录\",{\"1\":{\"1333\":1}}],[\"以及一个不可能的端口号\",{\"1\":{\"1427\":1}}],[\"以及一个提交对象\",{\"1\":{\"1332\":1}}],[\"以及一些基于\",{\"1\":{\"1234\":1}}],[\"以及一些默认值的设置\",{\"1\":{\"1043\":1}}],[\"以及一些其它信息\",{\"1\":{\"564\":1}}],[\"以及一些连接池的参数就够用了\",{\"1\":{\"526\":1}}],[\"以及更高的安全性\",{\"1\":{\"1297\":1}}],[\"以及更新类事务提交语句都将被阻塞\",{\"1\":{\"550\":1}}],[\"以及查询缓存\",{\"1\":{\"1261\":1}}],[\"以及查询计划的生成\",{\"1\":{\"1224\":1}}],[\"以及通过祷告\",{\"1\":{\"1767\":1}}],[\"以及通过\",{\"1\":{\"1253\":1}}],[\"以及表的数据所在目录等\",{\"1\":{\"1224\":1}}],[\"以及本次操作影响的文件及其对应的\",{\"1\":{\"1219\":1}}],[\"以及关闭线程池的接口方法\",{\"1\":{\"1111\":1}}],[\"以及实际执行事务的时候都会从这个\",{\"1\":{\"1059\":1}}],[\"以及注册销毁\",{\"1\":{\"1012\":1}}],[\"以及指派的节点\",{\"1\":{\"946\":1}}],[\"以及集群特定的相关组件\",{\"1\":{\"945\":1}}],[\"以及属下的从服务器\",{\"1\":{\"938\":1}}],[\"以及还原时间过长\",{\"1\":{\"917\":1,\"1577\":1}}],[\"以及可选的过期时间\",{\"1\":{\"913\":1}}],[\"以及对应的引用规范\",{\"1\":{\"1351\":1}}],[\"以及对应的作用域\",{\"1\":{\"1311\":1}}],[\"以及对应的\",{\"1\":{\"786\":1}}],[\"以及对应的回调任务\",{\"1\":{\"161\":1}}],[\"以及此次checkpoint编号写入文件组第一个日志文件的管理信息中\",{\"1\":{\"741\":1}}],[\"以及连接查询中被驱动表拥有索引的情况\",{\"1\":{\"722\":1}}],[\"以及列的数量\",{\"1\":{\"686\":1}}],[\"以及三个隐藏字段\",{\"1\":{\"684\":1}}],[\"以及服务器在运行过程中发生任何严重错误时的相关信息\",{\"1\":{\"642\":1}}],[\"以及重做日志文件\",{\"1\":{\"639\":1}}],[\"以及两张表交集部分数据\",{\"1\":{\"604\":2}}],[\"以及结构末尾的比特位数\",{\"1\":{\"564\":1}}],[\"以及相应的参数信息\",{\"1\":{\"540\":1}}],[\"以及其它与消息相关的元数据\",{\"1\":{\"427\":1}}],[\"以及其他的一些基础类库\",{\"1\":{\"254\":1}}],[\"以及下面\",{\"1\":{\"382\":1}}],[\"以及在其他线程发出信号时唤醒\",{\"1\":{\"362\":1}}],[\"以及graal编译器\",{\"1\":{\"267\":1}}],[\"以及寄存器的分配和管理成为挑战\",{\"1\":{\"242\":1}}],[\"以及与之关联的java应用程序的主类名\",{\"1\":{\"229\":1}}],[\"以及常量池表\",{\"1\":{\"211\":1}}],[\"以及前后引用\",{\"1\":{\"196\":1}}],[\"以及整堆收集\",{\"1\":{\"171\":1}}],[\"以及用\",{\"1\":{\"146\":1}}],[\"以及用户自定义的数据\",{\"1\":{\"37\":1}}],[\"以及停止执行管道\",{\"1\":{\"145\":1}}],[\"以及临界区前后的有序性\",{\"1\":{\"145\":1}}],[\"以及栈帧等信息\",{\"1\":{\"134\":1}}],[\"以及各种优化措施\",{\"1\":{\"144\":1}}],[\"以及各种\",{\"1\":{\"61\":1}}],[\"以及\",{\"1\":{\"37\":1,\"623\":1,\"698\":1,\"792\":1,\"964\":1,\"1393\":1,\"1402\":1,\"1567\":1}}],[\"以及超时\",{\"1\":{\"9\":1}}],[\"以及支持是否公平\",{\"1\":{\"9\":1}}],[\"以及initialtrylock抽象方法用于校验可重入性\",{\"1\":{\"9\":1}}],[\"以\",{\"1\":{\"5\":1,\"9\":1,\"74\":1,\"240\":1,\"477\":1,\"846\":1,\"913\":6,\"1213\":1,\"1368\":1,\"1547\":1,\"1567\":1,\"1631\":1,\"1689\":1,\"1691\":1}}],[\"只记得水有点绿\",{\"1\":{\"1843\":1}}],[\"只想躺着\",{\"1\":{\"1785\":1}}],[\"只保留最纯粹的伊斯兰教信仰\",{\"1\":{\"1767\":1}}],[\"只保留最后一个版本\",{\"1\":{\"477\":1}}],[\"只放在一个实例上\",{\"1\":{\"1629\":1}}],[\"只支持表级锁\",{\"1\":{\"1541\":1}}],[\"只支持java语言\",{\"1\":{\"653\":1}}],[\"只分配dml相关权限\",{\"1\":{\"1539\":1}}],[\"只负责数据接收和发送\",{\"1\":{\"1488\":1}}],[\"只负责元数据记录和权限校验\",{\"1\":{\"1220\":1}}],[\"只将有事件发生的\",{\"1\":{\"1487\":1}}],[\"只在不会出现死锁的情况下才分配资源\",{\"1\":{\"1466\":1}}],[\"只用于访问控制和内存保护\",{\"1\":{\"1444\":1}}],[\"只重传一个可能造成延迟重传\",{\"1\":{\"1411\":1}}],[\"只监听自己临近的节点\",{\"1\":{\"1186\":1}}],[\"只通过静态方法\",{\"1\":{\"1135\":1}}],[\"只需部署在一台机器上\",{\"1\":{\"1225\":1}}],[\"只需等\",{\"1\":{\"829\":1}}],[\"只需要添加相应的场景依赖\",{\"1\":{\"1609\":1}}],[\"只需要切换线程的寄存器状态和栈数据\",{\"1\":{\"1454\":1}}],[\"只需要知道起始地址就知道该释放多大的内存空间\",{\"1\":{\"1445\":1}}],[\"只需要根据ip地址和端口号进行请求转发的场景\",{\"1\":{\"1296\":1}}],[\"只需要分别为驱动表和被驱动表选择成本最低的访问方法\",{\"1\":{\"718\":1}}],[\"只需要一次检索\",{\"1\":{\"698\":1}}],[\"只需要在mycat中配置即可\",{\"1\":{\"654\":1}}],[\"只需要登陆一次\",{\"1\":{\"27\":1,\"1643\":1}}],[\"只需要修改\",{\"1\":{\"21\":1}}],[\"只需要修改配置文件即可实现\",{\"1\":{\"19\":1}}],[\"只作为两个线程间传递结果的容器\",{\"1\":{\"822\":1}}],[\"只适合找非常小众的电影偶尔凑活用\",{\"1\":{\"1804\":1}}],[\"只适合短连接\",{\"1\":{\"782\":1}}],[\"只适合连接数少的场景\",{\"1\":{\"763\":1}}],[\"只读\",{\"1\":{\"1042\":1,\"1383\":1}}],[\"只读事务id默认0\",{\"1\":{\"754\":1,\"1557\":1}}],[\"只读缓存\",{\"1\":{\"533\":1}}],[\"只会在取出\",{\"1\":{\"1573\":1}}],[\"只会在元数据中修改\",{\"1\":{\"118\":1}}],[\"只会被替换\",{\"1\":{\"1498\":1}}],[\"只会展示对应的城市机场信息\",{\"1\":{\"1355\":1}}],[\"只会将一些\",{\"1\":{\"802\":1}}],[\"只会经历阶段一\",{\"1\":{\"747\":1}}],[\"只会存储该列前768个字节\",{\"1\":{\"686\":1}}],[\"只列出指定的数据库相关操作\",{\"1\":{\"643\":1,\"675\":1}}],[\"只不过找不到目标文件\",{\"1\":{\"1474\":1}}],[\"只不过不是交给多线程执行\",{\"1\":{\"1221\":1}}],[\"只不过用代理拦截的方式在外面包了一层\",{\"1\":{\"1059\":1}}],[\"只不过这次是\",{\"1\":{\"873\":1}}],[\"只不过这个信号量在重复执行\",{\"1\":{\"366\":1}}],[\"只不过新增了一些指针来维护不同的实例\",{\"1\":{\"830\":1}}],[\"只不过源码中入队的操作很克制\",{\"1\":{\"4\":1}}],[\"只对外提供了一些公共静态方法\",{\"1\":{\"362\":1}}],[\"只执行一次\",{\"1\":{\"289\":1,\"1534\":1}}],[\"只能说在座的各位都是垃圾\",{\"1\":{\"1803\":1}}],[\"只能说既兴奋又刺激\",{\"1\":{\"1786\":1}}],[\"只能判断是否存在\",{\"1\":{\"1658\":1}}],[\"只能代理实现了接口的类\",{\"1\":{\"1532\":2}}],[\"只能代理实现了接口的对象\",{\"1\":{\"1014\":1}}],[\"只能执行\",{\"1\":{\"1511\":1}}],[\"只能一对一通信\",{\"1\":{\"1487\":1}}],[\"只能传递简单的信息\",{\"1\":{\"1462\":1}}],[\"只能全部通配\",{\"1\":{\"1351\":1}}],[\"只能满足\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"只能处理读请求\",{\"1\":{\"1194\":2}}],[\"只能先发送前\",{\"1\":{\"839\":1}}],[\"只能同步等待任务结束\",{\"1\":{\"822\":1}}],[\"只能写\",{\"1\":{\"776\":1}}],[\"只能读\",{\"1\":{\"776\":1}}],[\"只能工作在阻塞模式下\",{\"1\":{\"775\":1}}],[\"只能利用单个二级索引执行查询\",{\"1\":{\"711\":1}}],[\"只能有一个\",{\"1\":{\"699\":1,\"1068\":1}}],[\"只能有一个枚举字符串值\",{\"1\":{\"663\":1}}],[\"只能增加树的高度\",{\"1\":{\"698\":1}}],[\"只能依次遍历所有记录\",{\"1\":{\"697\":1}}],[\"只能按照所设计的方式进行访问与更新\",{\"1\":{\"625\":1}}],[\"只能选择一种环境\",{\"1\":{\"524\":1}}],[\"只能手动杀死\",{\"1\":{\"446\":1}}],[\"只能是数字\",{\"1\":{\"445\":1}}],[\"只能测试main\",{\"1\":{\"356\":1}}],[\"只能在当前主机localhost访问\",{\"1\":{\"590\":1}}],[\"只能在\",{\"1\":{\"292\":1}}],[\"只能通过看书来打发时间\",{\"1\":{\"1826\":1}}],[\"只能通过指针顺序访问\",{\"1\":{\"1476\":1}}],[\"只能通过系统配置zookeeper\",{\"1\":{\"1169\":1}}],[\"只能通过\",{\"1\":{\"196\":1}}],[\"只能保证一个共享变量的原子操作\",{\"1\":{\"148\":1}}],[\"只有周末会出去骑车\",{\"1\":{\"1827\":1}}],[\"只有犹太人可以信\",{\"1\":{\"1758\":1}}],[\"只有票号才能办理乘机手续\",{\"1\":{\"1738\":1}}],[\"只有第一次初始化才需要加锁\",{\"1\":{\"1645\":1}}],[\"只有二级索引\",{\"1\":{\"1541\":1}}],[\"只有拷贝阶段才阻塞\",{\"1\":{\"1504\":1}}],[\"只有删除文件的所有硬链接以及源文件时\",{\"1\":{\"1474\":1}}],[\"只有计算大数字才能体现超过32位cpu的性能\",{\"1\":{\"1433\":1}}],[\"只有前一个字节数据到达\",{\"1\":{\"1404\":1}}],[\"只有订单是过期的\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"只有在初次访问时由\",{\"1\":{\"1445\":1}}],[\"只有在跟服务器通信时才会更新的对象\",{\"1\":{\"1351\":1}}],[\"只有在得到确认发送指令后\",{\"1\":{\"1286\":1}}],[\"只有在父类加载器无法加载时才由子类加载器尝试加载\",{\"1\":{\"254\":1}}],[\"只有\",{\"1\":{\"1281\":2,\"1620\":2}}],[\"只有核心线程\",{\"1\":{\"1110\":1}}],[\"只有一个\",{\"1\":{\"1488\":1}}],[\"只有一个服务器是\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"只有一个核心线程的线程池\",{\"1\":{\"1110\":1}}],[\"只有一次\",{\"1\":{\"407\":1}}],[\"只有上述基于\",{\"1\":{\"1075\":1}}],[\"只有上一个\",{\"1\":{\"462\":1}}],[\"只有拿到所有元素之后才能获得结果\",{\"1\":{\"1068\":1}}],[\"只有代理对象才会放到三级缓存\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"只有当修改过的\",{\"1\":{\"1435\":1}}],[\"只有当16384个槽都有节点负责处理时\",{\"1\":{\"946\":1}}],[\"只有当大量相互独立且同构的任务可以并发进行处理时\",{\"1\":{\"163\":1}}],[\"只有精确匹配索引列的查询才有效\",{\"1\":{\"697\":1}}],[\"只有很少的更新和删除操作\",{\"1\":{\"682\":1}}],[\"只有以下\",{\"1\":{\"529\":1}}],[\"只有多次自旋拿不到资源才会真的入队\",{\"1\":{\"4\":1}}],[\"只关注是否修改过\",{\"1\":{\"150\":1}}],[\"只是偶尔开黄腔的司机汪师傅\",{\"1\":{\"1849\":1}}],[\"只是通过连接协议来获取库存信息\",{\"1\":{\"1724\":1}}],[\"只是响应来自\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"只是复制旧锁操作\",{\"1\":{\"1239\":1}}],[\"只是对操作进行了记录\",{\"1\":{\"1065\":1}}],[\"只是在原数据集上定义了一组操作\",{\"1\":{\"1065\":1}}],[\"只是在元数据中删除\",{\"1\":{\"118\":1}}],[\"只是执行一些\",{\"1\":{\"1050\":1}}],[\"只是被标记为删除\",{\"1\":{\"615\":1}}],[\"只是set集合中的元素只要键数据\",{\"1\":{\"305\":1}}],[\"只是修改location后\",{\"1\":{\"109\":1}}],[\"只修改指定id文档的部分字段\",{\"1\":{\"50\":1}}],[\"只要订座了就会产生pnr\",{\"1\":{\"1738\":1}}],[\"只要缓存的数据有过期时间就足够了\",{\"1\":{\"1613\":1}}],[\"只要复制少量对象即可完成\",{\"1\":{\"1523\":1}}],[\"只要\",{\"1\":{\"1461\":1}}],[\"只要引用计数非0\",{\"1\":{\"1420\":1}}],[\"只要证书是可信的\",{\"1\":{\"1401\":1}}],[\"只要任意一端没有提出断开\",{\"1\":{\"1398\":1}}],[\"只要没有冲突\",{\"1\":{\"1341\":1}}],[\"只要有一位非\",{\"1\":{\"1390\":1}}],[\"只要有一方是对象\",{\"1\":{\"1244\":1}}],[\"只要有一半的\",{\"1\":{\"1205\":1}}],[\"只要有节点发生变化\",{\"1\":{\"1186\":1}}],[\"只要发生异常整个事务回滚\",{\"1\":{\"1041\":1}}],[\"只要实现\",{\"1\":{\"1010\":1}}],[\"只要某个类实现了\",{\"1\":{\"1010\":1}}],[\"只要向\",{\"1\":{\"789\":1}}],[\"只要调用\",{\"1\":{\"773\":1}}],[\"只要select没有选中某一列\",{\"1\":{\"702\":1}}],[\"只要容量够\",{\"1\":{\"435\":1}}],[\"只要抵达队列\",{\"1\":{\"417\":1}}],[\"只要不是直接双引号给出的字符串\",{\"1\":{\"301\":1}}],[\"只要不改变程序的执行结果\",{\"1\":{\"143\":1}}],[\"只要能无歧义的定位到目标\",{\"1\":{\"252\":1}}],[\"只要登录了这个公共的登陆服务就代表对应的服务群都登录了\",{\"1\":{\"27\":1,\"1643\":1}}],[\"只要扩大\",{\"1\":{\"27\":1,\"1643\":1}}],[\"只要浏览器不关\",{\"1\":{\"25\":1}}],[\"也许是骑自行车\",{\"1\":{\"1849\":1}}],[\"也许是骑摩托\",{\"1\":{\"1849\":1}}],[\"也许是自驾\",{\"1\":{\"1849\":1}}],[\"也许这些措施是有效的\",{\"1\":{\"1240\":1}}],[\"也从另一方面反映出当时对普通民众的盘剥\",{\"1\":{\"1847\":1}}],[\"也挺可怕的\",{\"1\":{\"1832\":1}}],[\"也算是为了未来骑行\",{\"1\":{\"1827\":1}}],[\"也确实累着了\",{\"1\":{\"1825\":1}}],[\"也确实挣了很多钱\",{\"1\":{\"1786\":1}}],[\"也作为自己的毕业旅行\",{\"1\":{\"1816\":1}}],[\"也骑着它骑过30公里\",{\"1\":{\"1796\":1}}],[\"也希望自己能朝着这个方向走下去\",{\"1\":{\"1786\":1}}],[\"也承认耶稣传教\",{\"1\":{\"1764\":1}}],[\"也在做自己的国际运价计算引擎\",{\"1\":{\"1751\":1}}],[\"也声明了模糊匹配\",{\"1\":{\"1712\":1}}],[\"也被归类为消息队列的原因\",{\"1\":{\"1626\":1}}],[\"也被称为传输层网关\",{\"1\":{\"1296\":1}}],[\"也放数据\",{\"1\":{\"1546\":1}}],[\"也实现了\",{\"1\":{\"1495\":1}}],[\"也就可以提升程序执行速度\",{\"1\":{\"1435\":1}}],[\"也就不能售卖\",{\"1\":{\"1737\":1}}],[\"也就不用ip分片了\",{\"1\":{\"1416\":1}}],[\"也就不会响应ack给发送方\",{\"1\":{\"1416\":1}}],[\"也就是山南市的行政处\",{\"1\":{\"1842\":1}}],[\"也就是始发地国家和目的地国家以外的其他国家\",{\"1\":{\"1746\":1}}],[\"也就是散客票\",{\"1\":{\"1737\":1}}],[\"也就是每产生一个预订\",{\"1\":{\"1737\":1}}],[\"也就是每个\",{\"1\":{\"490\":1}}],[\"也就是价格\",{\"1\":{\"1734\":1}}],[\"也就是从xx到xx的某条航线路径上\",{\"1\":{\"1732\":1}}],[\"也就是航司之间可以进行航班时刻的交易\",{\"1\":{\"1730\":1}}],[\"也就是库存\",{\"1\":{\"1724\":1}}],[\"也就是所有需要装配的\",{\"1\":{\"1598\":1}}],[\"也就是与不同任务的套接字关联的一个个函数\",{\"1\":{\"1572\":1}}],[\"也就是再执行一遍\",{\"1\":{\"1563\":1}}],[\"也就是对分段划分出来的连续空间\",{\"1\":{\"1443\":1}}],[\"也就是前面提到的分段机制\",{\"1\":{\"1443\":1}}],[\"也就是swap分区\",{\"1\":{\"1443\":1}}],[\"也就是软中断\",{\"1\":{\"1437\":1}}],[\"也就是硬中断\",{\"1\":{\"1437\":1}}],[\"也就是要等待服务端把手上的数据处理发送完再关闭\",{\"1\":{\"1410\":1}}],[\"也就是浏览器\",{\"1\":{\"1394\":1}}],[\"也就是当前的工作目录\",{\"1\":{\"1344\":1}}],[\"也就是当前分支引用的指针\",{\"1\":{\"1344\":1}}],[\"也就是基于文件的差异进行版本控制\",{\"1\":{\"1309\":1}}],[\"也就是调用create\",{\"1\":{\"1189\":1}}],[\"也就是总字节数会使用\",{\"1\":{\"839\":1}}],[\"也就是数据库服务器中存储的\",{\"1\":{\"655\":1}}],[\"也就是只有分两类\",{\"1\":{\"378\":1}}],[\"也就是正在运行的程序\",{\"1\":{\"134\":1}}],[\"也就是说当内存不足以容纳新写入数据时\",{\"1\":{\"1574\":1}}],[\"也就是说堆不存在该类的实例对象\",{\"1\":{\"1527\":1}}],[\"也就是说这个过程是同步的\",{\"1\":{\"1478\":1}}],[\"也就是说每经过一个rtt\",{\"1\":{\"1413\":2}}],[\"也就是说本地的某个分支关联到远程仓库的某个分支\",{\"1\":{\"1338\":1}}],[\"也就是说任务不应该缓存下来慢慢执行\",{\"1\":{\"1120\":1}}],[\"也就是说表上有活动事务的时候\",{\"1\":{\"553\":1}}],[\"也就是说\",{\"1\":{\"6\":1,\"524\":1,\"543\":1,\"1055\":1,\"1524\":1}}],[\"也就是\",{\"1\":{\"4\":1,\"1090\":1,\"1300\":1}}],[\"也回复一个\",{\"1\":{\"1410\":1}}],[\"也进入\",{\"1\":{\"1409\":1}}],[\"也随机一个序列号\",{\"1\":{\"1409\":1}}],[\"也发送\",{\"1\":{\"1402\":1}}],[\"也跟着移动过去了\",{\"1\":{\"1344\":1}}],[\"也很常用的功能\",{\"1\":{\"1343\":1}}],[\"也能通过定时任务将未完成的消息重新发送\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"也能享受编译器的优化措施\",{\"1\":{\"255\":1}}],[\"也向客户端发送\",{\"1\":{\"1410\":1}}],[\"也向\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"也需要满足幂等性\",{\"1\":{\"1284\":1}}],[\"也需要加入\",{\"1\":{\"839\":1}}],[\"也应采用适当的方式来使系统达到最终一致性\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"也应该查数据库\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"也要稍微花点时间准备秋招呢\",{\"1\":{\"1778\":1}}],[\"也要加上大括号\",{\"1\":{\"1244\":1}}],[\"也要保存主键值\",{\"1\":{\"699\":1}}],[\"也没啥影响\",{\"1\":{\"1240\":1}}],[\"也没有支持\",{\"1\":{\"1283\":1}}],[\"也没有\",{\"1\":{\"452\":1}}],[\"也没有线程间频繁调度的开销\",{\"1\":{\"148\":1}}],[\"也没有登录\",{\"1\":{\"27\":1,\"1643\":1}}],[\"也只能成为\",{\"1\":{\"1203\":1}}],[\"也有西餐\",{\"1\":{\"1846\":1}}],[\"也有遗憾\",{\"1\":{\"1829\":1}}],[\"也有\",{\"1\":{\"1283\":1}}],[\"也有两种情况\",{\"1\":{\"1076\":1}}],[\"也有很多相似的理念\",{\"1\":{\"34\":1}}],[\"也写入复制积压缓冲区\",{\"1\":{\"935\":1}}],[\"也用于idletime计算空转时间\",{\"1\":{\"901\":1}}],[\"也节约了内存\",{\"1\":{\"889\":1}}],[\"也完成了\",{\"1\":{\"867\":1}}],[\"也会导致程序的性能下降\",{\"1\":{\"1511\":1}}],[\"也会把数据刷到磁盘上\",{\"1\":{\"1478\":1}}],[\"也会把内核缓存的数据刷到磁盘上\",{\"1\":{\"1478\":1}}],[\"也会有一个消息发送到延迟队列\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"也会继续执行下去\",{\"1\":{\"961\":1}}],[\"也会造成粘包\",{\"1\":{\"839\":1}}],[\"也会增加\",{\"1\":{\"826\":1}}],[\"也会加入最后的结果集\",{\"1\":{\"713\":1}}],[\"也正因此\",{\"1\":{\"754\":1,\"1200\":1}}],[\"也分global和session两个作用域\",{\"1\":{\"671\":1}}],[\"也分共享锁和排他锁\",{\"1\":{\"553\":1}}],[\"也遵循最左前缀法则\",{\"1\":{\"616\":1}}],[\"也可能是年纪大了\",{\"1\":{\"1817\":1,\"1828\":1}}],[\"也可能因为自己写的\",{\"1\":{\"1786\":1}}],[\"也可能申请共享锁\",{\"1\":{\"553\":1}}],[\"也可用于\",{\"1\":{\"859\":1}}],[\"也可以实现虚拟化\",{\"1\":{\"1634\":1}}],[\"也可以表示目录项\",{\"1\":{\"1474\":1}}],[\"也可以通过对象名访问\",{\"1\":{\"1534\":1}}],[\"也可以通过脚本单独控制所在机器的\",{\"1\":{\"1217\":1}}],[\"也可以通过invalidate手动清除缓存\",{\"1\":{\"74\":1}}],[\"也可以放到\",{\"1\":{\"1162\":1}}],[\"也可以提交\",{\"1\":{\"1113\":1}}],[\"也可以同时监听ae\",{\"1\":{\"919\":1}}],[\"也可以处理普通任务和定时任务\",{\"1\":{\"869\":1}}],[\"也可以包装普通字节数组\",{\"1\":{\"834\":1}}],[\"也可以使用堆内存\",{\"1\":{\"826\":1}}],[\"也可以被拆分成多个小的数据结构\",{\"1\":{\"825\":1}}],[\"也可以执行ctx\",{\"1\":{\"823\":1}}],[\"也可以异步方式得到结果\",{\"1\":{\"822\":1}}],[\"也可以进行任务处理\",{\"1\":{\"814\":1}}],[\"也可以将快照留在原地以便重启服务器的时候使用\",{\"1\":{\"1576\":1}}],[\"也可以将\",{\"1\":{\"760\":1}}],[\"也可以作为输出参数\",{\"1\":{\"631\":1}}],[\"也可以返回数据\",{\"1\":{\"627\":1}}],[\"也可以简化他们的操作\",{\"1\":{\"625\":1}}],[\"也可以自己实现\",{\"1\":{\"521\":1}}],[\"也可以在mysql的配置文件中配置二进制日志的过期时间\",{\"1\":{\"643\":1}}],[\"也可以在\",{\"1\":{\"506\":1}}],[\"也可以指定模拟部分行为\",{\"1\":{\"1708\":1}}],[\"也可以指定包名\",{\"1\":{\"520\":1}}],[\"也可以指定\",{\"1\":{\"490\":1}}],[\"也可以用阻塞式的锁\",{\"1\":{\"1072\":1}}],[\"也可以用analyze\",{\"1\":{\"720\":1}}],[\"也可以用\",{\"1\":{\"507\":1,\"1688\":1}}],[\"也可以用来决定该消息被写入到哪个partition\",{\"1\":{\"450\":1}}],[\"也可以用作时序分析\",{\"1\":{\"31\":1}}],[\"也可以轻松地与cxf\",{\"1\":{\"434\":1}}],[\"也可以向后回溯\",{\"1\":{\"428\":1}}],[\"也可以直接为接口本身做代理\",{\"1\":{\"349\":1}}],[\"也可以发生在运行时\",{\"1\":{\"244\":1}}],[\"也可以是外连接查询\",{\"1\":{\"605\":1}}],[\"也可以是远程java进程的主机名\",{\"1\":{\"230\":1}}],[\"也可以是自定义类型\",{\"1\":{\"83\":1}}],[\"也可以看成存储元素和对应数量的键值对映射\",{\"1\":{\"66\":1}}],[\"也支持\",{\"1\":{\"1218\":1}}],[\"也支持用\",{\"1\":{\"530\":1}}],[\"也支持自定义插件的开发\",{\"1\":{\"412\":1}}],[\"也提供了手动提交\",{\"1\":{\"492\":1}}],[\"也提供了几个没什么大用的小工具\",{\"1\":{\"79\":1}}],[\"也叫子舱位\",{\"1\":{\"1739\":1}}],[\"也叫包机\",{\"1\":{\"1737\":1}}],[\"也叫文件运价\",{\"1\":{\"1732\":1}}],[\"也叫基础运价\",{\"1\":{\"1732\":1}}],[\"也叫航空公司订座系统\",{\"1\":{\"1723\":1}}],[\"也叫代理人订座系统\",{\"1\":{\"1723\":1}}],[\"也叫锁定读\",{\"1\":{\"1557\":1}}],[\"也叫非锁定读\",{\"1\":{\"1557\":1}}],[\"也叫幻影引用\",{\"1\":{\"1522\":1}}],[\"也叫时分多路复用\",{\"1\":{\"1487\":1}}],[\"也叫无锁编程\",{\"1\":{\"1468\":1}}],[\"也叫高水位线\",{\"1\":{\"471\":1}}],[\"也叫标签\",{\"1\":{\"413\":1,\"1628\":1}}],[\"也因此\",{\"1\":{\"461\":1,\"1486\":1}}],[\"也即可复选元素\",{\"1\":{\"1676\":1}}],[\"也即分布式id\",{\"1\":{\"1622\":1}}],[\"也即线程调度\",{\"1\":{\"1470\":1}}],[\"也即实时任务总是先于普通任务被执行\",{\"1\":{\"1436\":1}}],[\"也即解决消费者端幂等性问题\",{\"1\":{\"1374\":1}}],[\"也即浏览器的\",{\"1\":{\"1250\":1}}],[\"也即原始的\",{\"1\":{\"869\":1}}],[\"也即\",{\"1\":{\"452\":1}}],[\"也搞了分离设计\",{\"1\":{\"376\":1}}],[\"也代表一个对象\",{\"1\":{\"298\":1}}],[\"也称航空自由权\",{\"1\":{\"1741\":1}}],[\"也称直接\",{\"1\":{\"1486\":1}}],[\"也称\",{\"1\":{\"1280\":2,\"1414\":2,\"1446\":1,\"1619\":2}}],[\"也称全连接队列\",{\"1\":{\"856\":1}}],[\"也称半连接队列\",{\"1\":{\"856\":1}}],[\"也称过滤条件\",{\"1\":{\"713\":1}}],[\"也称为类变量\",{\"1\":{\"1534\":1}}],[\"也称为hash碰撞\",{\"1\":{\"698\":1}}],[\"也称为系统类加载器\",{\"1\":{\"254\":1}}],[\"也称索引页\",{\"1\":{\"688\":1}}],[\"也称外观模式\",{\"1\":{\"373\":1}}],[\"也称受检异常\",{\"1\":{\"345\":1}}],[\"也称高效流\",{\"1\":{\"319\":1}}],[\"也称纤程\",{\"1\":{\"134\":1,\"1453\":1}}],[\"也不知道是产品和运营用这种复杂的东西能分析出个啥子\",{\"1\":{\"1778\":1}}],[\"也不知道是打工人的生活不适应\",{\"1\":{\"1773\":1}}],[\"也不存在\",{\"1\":{\"1599\":1}}],[\"也不存在于数据库\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"也不一定非得基于\",{\"1\":{\"1406\":1}}],[\"也不是幂等的\",{\"1\":{\"1405\":1}}],[\"也不影响其他服务\",{\"1\":{\"1375\":1}}],[\"也不影响其他事务\",{\"1\":{\"1274\":1,\"1550\":1}}],[\"也不占用\",{\"1\":{\"801\":1}}],[\"也不会记录不使用索引进行查找的查询\",{\"1\":{\"645\":1}}],[\"也不会回收强引用实例\",{\"1\":{\"191\":1}}],[\"也不需要通过broker去保证同一个consumer\",{\"1\":{\"490\":1}}],[\"也不用受下游系统可用性的影响\",{\"1\":{\"399\":1}}],[\"也不受\",{\"1\":{\"212\":1}}],[\"也是很震撼\",{\"1\":{\"1846\":1}}],[\"也是个小景点\",{\"1\":{\"1842\":1}}],[\"也是被群山环绕着\",{\"1\":{\"1834\":1}}],[\"也是毕业旅行\",{\"1\":{\"1833\":1}}],[\"也是最远请求时就返回\",{\"1\":{\"1472\":1}}],[\"也是最常见的模式\",{\"1\":{\"1130\":1}}],[\"也是以\",{\"1\":{\"1218\":1}}],[\"也是广泛使用的分布式内存计算引擎\",{\"1\":{\"1213\":1}}],[\"也是发送心跳的时间间隔\",{\"1\":{\"1164\":1}}],[\"也是\",{\"1\":{\"1074\":1,\"1350\":1}}],[\"也是要新建\",{\"1\":{\"873\":1}}],[\"也是由\",{\"1\":{\"432\":1}}],[\"也是出自\",{\"1\":{\"382\":1}}],[\"也是一种主从架构的设计\",{\"1\":{\"1222\":1}}],[\"也是一种结构型设计模式\",{\"1\":{\"374\":1,\"375\":1}}],[\"也是一样的放到队尾\",{\"1\":{\"4\":1}}],[\"也是商业jvm的核心\",{\"1\":{\"265\":1}}],[\"也是线程安全的\",{\"1\":{\"146\":1}}],[\"也最重要的一些列文件\",{\"1\":{\"37\":1}}],[\"ld\",{\"1\":{\"1783\":2}}],[\"ln\",{\"0\":{\"1696\":1},\"1\":{\"1696\":2,\"1697\":1}}],[\"lfu\",{\"1\":{\"1471\":1,\"1574\":2}}],[\"lfloor\",{\"1\":{\"974\":1,\"975\":2}}],[\"l3\",{\"1\":{\"1434\":1}}],[\"l2\",{\"1\":{\"1434\":1,\"1435\":1}}],[\"l1\",{\"1\":{\"1434\":1,\"1435\":2}}],[\"lw\",{\"1\":{\"1329\":1}}],[\"lvs\",{\"1\":{\"1299\":1}}],[\"lvbu6\",{\"1\":{\"707\":1}}],[\"l7\",{\"1\":{\"1299\":1}}],[\"l4\",{\"1\":{\"1299\":1}}],[\"ls\",{\"1\":{\"1174\":1,\"1191\":2,\"1218\":1,\"1338\":1,\"1349\":1,\"1634\":3}}],[\"lsn的redo日志就不需要恢复了\",{\"1\":{\"742\":1}}],[\"lsn说明该页已经刷新回磁盘\",{\"1\":{\"742\":1}}],[\"lsn值\",{\"1\":{\"742\":1}}],[\"lsn值越小说明日志产生的越早\",{\"1\":{\"740\":1}}],[\"lsn和checkpoint\",{\"1\":{\"742\":1}}],[\"lsn之后的redo日志\",{\"1\":{\"742\":1}}],[\"lsn操作\",{\"1\":{\"741\":1}}],[\"lsn表示当前系统可以被覆盖的redo日志总量\",{\"1\":{\"741\":1}}],[\"lsn表示已经刷新到磁盘的日志序列号\",{\"1\":{\"740\":1}}],[\"lsn\",{\"1\":{\"740\":1,\"741\":2}}],[\"lsn初始值为8704\",{\"1\":{\"740\":1}}],[\"lcs\",{\"1\":{\"996\":5}}],[\"lpush\",{\"1\":{\"960\":1}}],[\"lpad\",{\"1\":{\"593\":2,\"594\":1}}],[\"lutyuv=y=val\",{\"1\":{\"1878\":1}}],[\"lua属性中\",{\"1\":{\"963\":1}}],[\"lua脚本\",{\"0\":{\"962\":1}}],[\"lua\",{\"0\":{\"1263\":1},\"1\":{\"924\":1,\"927\":1,\"929\":1,\"964\":5,\"965\":2,\"966\":4,\"967\":3,\"1263\":2,\"1582\":1}}],[\"lua伪客户端\",{\"1\":{\"924\":1}}],[\"lucene仅支持纯文本文件的索引和搜索\",{\"1\":{\"52\":1}}],[\"lucene是一个高效的\",{\"1\":{\"52\":1}}],[\"lucene\",{\"0\":{\"52\":1},\"1\":{\"52\":1,\"53\":1,\"697\":1}}],[\"lucene的文件可以分为3个不同的层次\",{\"1\":{\"37\":1}}],[\"lucene的删除是标记删除\",{\"1\":{\"34\":1}}],[\"lzf是lzf压缩算法标记\",{\"1\":{\"913\":1}}],[\"lzf+compressed\",{\"1\":{\"913\":1}}],[\"lz4\",{\"1\":{\"459\":1}}],[\"l+4\",{\"1\":{\"664\":1}}],[\"l+4字节\",{\"1\":{\"663\":1}}],[\"l+3\",{\"1\":{\"664\":1}}],[\"l+3字节\",{\"1\":{\"663\":1}}],[\"l+2\",{\"1\":{\"664\":1}}],[\"l+2字节\",{\"1\":{\"663\":1}}],[\"l+1\",{\"1\":{\"664\":1}}],[\"l+1字节\",{\"1\":{\"663\":2}}],[\"l<2^32\",{\"1\":{\"663\":1,\"664\":1}}],[\"l<2^24\",{\"1\":{\"663\":1,\"664\":1}}],[\"l<2^16\",{\"1\":{\"663\":1,\"664\":1}}],[\"l<2^8\",{\"1\":{\"663\":1,\"664\":1}}],[\"l<\",{\"1\":{\"663\":1}}],[\"lt++\",{\"1\":{\"989\":2,\"1653\":2}}],[\"ltd\",{\"1\":{\"411\":1}}],[\"lt\",{\"1\":{\"357\":1,\"989\":4,\"1653\":4}}],[\"lte\",{\"1\":{\"51\":1}}],[\"l\",{\"1\":{\"229\":1,\"234\":1,\"388\":3,\"623\":2,\"820\":2,\"1329\":1,\"1347\":1,\"1631\":1,\"1652\":4,\"1654\":7,\"1657\":3,\"1685\":1,\"1690\":1,\"1735\":1,\"1736\":1,\"1740\":1}}],[\"large\",{\"1\":{\"1214\":1}}],[\"largestpoolsize\",{\"1\":{\"1114\":2}}],[\"lable\",{\"1\":{\"633\":2}}],[\"label>\",{\"1\":{\"1855\":1}}],[\"label\",{\"1\":{\"633\":2}}],[\"latitude`\",{\"1\":{\"1357\":1}}],[\"latest\",{\"1\":{\"493\":1,\"1791\":1}}],[\"latch\",{\"1\":{\"160\":4}}],[\"lag=0\",{\"1\":{\"940\":3}}],[\"lag时\",{\"1\":{\"937\":1}}],[\"lag\",{\"1\":{\"460\":1,\"467\":1}}],[\"lambda表达式\",{\"1\":{\"298\":1,\"304\":1,\"305\":1}}],[\"lambda\",{\"1\":{\"263\":5}}],[\"launcher$appclassloader\",{\"1\":{\"254\":1}}],[\"launcher$extclassloader\",{\"1\":{\"254\":1}}],[\"language\",{\"1\":{\"357\":1,\"572\":4}}],[\"languagemanualddl\",{\"1\":{\"117\":1}}],[\"languagemanual+ddl\",{\"1\":{\"117\":1}}],[\"lang包下\",{\"1\":{\"345\":1}}],[\"lang\",{\"1\":{\"154\":3,\"195\":1,\"196\":1,\"249\":1,\"253\":1,\"254\":4,\"327\":1,\"352\":1,\"1015\":4,\"1089\":1,\"1090\":2,\"1093\":1,\"1527\":1}}],[\"lastnum\",{\"1\":{\"1675\":3}}],[\"lastname\",{\"1\":{\"47\":1}}],[\"last后缀的方法\",{\"1\":{\"988\":1}}],[\"lastinteraction\",{\"1\":{\"923\":1}}],[\"lastsave属性记录上次成功执行save\",{\"1\":{\"912\":1}}],[\"lastbytesread\",{\"1\":{\"873\":1}}],[\"lastoffset\",{\"1\":{\"476\":2}}],[\"last\",{\"0\":{\"1786\":1},\"1\":{\"407\":1,\"749\":1,\"1250\":1,\"1399\":1,\"1410\":1}}],[\"lastwaiter\",{\"1\":{\"3\":1,\"8\":1}}],[\"lrucache\",{\"1\":{\"1002\":5,\"1651\":2}}],[\"lru链表分为两部分\",{\"1\":{\"732\":1}}],[\"lru链表管理解压页\",{\"1\":{\"731\":1}}],[\"lru\",{\"0\":{\"732\":1,\"1002\":1,\"1651\":1},\"1\":{\"74\":1,\"533\":1,\"731\":2,\"901\":1,\"1002\":1,\"1259\":2,\"1446\":1,\"1448\":9,\"1471\":1,\"1574\":2}}],[\"lettuce\",{\"1\":{\"1368\":1}}],[\"letter\",{\"1\":{\"424\":1,\"425\":3,\"1629\":1}}],[\"leetcode没有这样的例题\",{\"1\":{\"1677\":1}}],[\"leetcode461\",{\"1\":{\"1666\":1}}],[\"leetcode191\",{\"1\":{\"1663\":1}}],[\"leetcode136\",{\"1\":{\"1661\":1}}],[\"leetcode\",{\"0\":{\"1661\":1,\"1669\":1},\"1\":{\"989\":1,\"993\":1,\"996\":1,\"1002\":1,\"1661\":1,\"1663\":1,\"1666\":1,\"1670\":1,\"1671\":1,\"1672\":1,\"1673\":1,\"1674\":1,\"1675\":1,\"1676\":1},\"2\":{\"1668\":1,\"1679\":1}}],[\"lee\",{\"1\":{\"807\":1}}],[\"lei\",{\"1\":{\"667\":1}}],[\"leo\",{\"1\":{\"471\":5}}],[\"learner\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"lead\",{\"1\":{\"1567\":1}}],[\"leading\",{\"1\":{\"1201\":1,\"1203\":1,\"1567\":1}}],[\"leader说有个后门接口改一下\",{\"1\":{\"1779\":1}}],[\"leader讲了一小时也没听太明白\",{\"1\":{\"1777\":1}}],[\"leader选举等工作\",{\"1\":{\"470\":1}}],[\"leader停止写入生产者生产的消息\",{\"1\":{\"460\":1}}],[\"leader+isr\",{\"1\":{\"460\":1}}],[\"leader+follower\",{\"1\":{\"460\":1}}],[\"leader收到数据后应答\",{\"1\":{\"460\":1}}],[\"leader\",{\"0\":{\"1204\":1},\"1\":{\"443\":5,\"450\":4,\"460\":7,\"461\":2,\"465\":3,\"466\":3,\"467\":3,\"469\":2,\"470\":7,\"471\":10,\"472\":1,\"483\":2,\"941\":3,\"942\":4,\"1178\":1,\"1187\":1,\"1194\":4,\"1200\":2,\"1202\":2,\"1203\":3,\"1204\":2,\"1205\":4,\"1280\":1,\"1281\":15,\"1619\":1,\"1620\":15}}],[\"leaf\",{\"1\":{\"720\":1,\"1622\":1}}],[\"leaved\",{\"1\":{\"1859\":1}}],[\"leave\",{\"1\":{\"633\":1,\"1859\":1}}],[\"least\",{\"1\":{\"461\":1,\"1574\":4}}],[\"len++\",{\"1\":{\"993\":1,\"995\":1}}],[\"len+compressed\",{\"1\":{\"913\":1}}],[\"len+origin\",{\"1\":{\"913\":1}}],[\"len+string\",{\"1\":{\"913\":1}}],[\"len记录当前块已使用的字节数\",{\"1\":{\"742\":1}}],[\"len加1\",{\"1\":{\"728\":1}}],[\"len\",{\"1\":{\"317\":2,\"318\":2,\"593\":1,\"728\":1,\"739\":1,\"767\":3,\"771\":1,\"772\":1,\"842\":2,\"843\":3,\"878\":1,\"975\":2,\"978\":2,\"993\":3,\"995\":4,\"1139\":1,\"1567\":1}}],[\"lengthoflis\",{\"1\":{\"994\":1,\"995\":1}}],[\"length+itemn+\",{\"1\":{\"913\":1}}],[\"lengthfieldbasedframedecoder会等完整的帧到达后再发送给后续的\",{\"1\":{\"850\":1}}],[\"lengthfieldbasedframedecoder\",{\"1\":{\"844\":2,\"850\":1}}],[\"length\",{\"1\":{\"14\":1,\"95\":2,\"342\":1,\"474\":2,\"788\":4,\"791\":2,\"799\":1,\"802\":1,\"844\":3,\"846\":2,\"848\":1,\"849\":5,\"886\":1,\"888\":1,\"892\":2,\"989\":1,\"990\":1,\"991\":5,\"993\":9,\"994\":3,\"995\":2,\"996\":2,\"998\":4,\"1129\":1,\"1148\":5,\"1398\":1,\"1652\":2,\"1653\":1,\"1654\":2,\"1662\":1,\"1669\":1,\"1670\":1,\"1672\":2,\"1673\":1,\"1674\":1,\"1675\":6,\"1676\":1,\"1677\":2}}],[\"left++\",{\"1\":{\"990\":1,\"993\":1}}],[\"left\",{\"1\":{\"124\":1,\"604\":2,\"605\":1,\"611\":1,\"989\":9,\"990\":3,\"993\":19,\"995\":5,\"996\":1,\"998\":30,\"1000\":1,\"1001\":2,\"1342\":1,\"1653\":9,\"1657\":4}}],[\"lessthan\",{\"1\":{\"81\":1}}],[\"level类型有两个字段\",{\"1\":{\"886\":1}}],[\"level类型数组\",{\"1\":{\"886\":1}}],[\"level=\",{\"1\":{\"388\":1,\"389\":3}}],[\"level\",{\"1\":{\"38\":2,\"39\":1,\"512\":1,\"542\":2,\"737\":1,\"886\":1,\"1049\":2}}],[\"life\",{\"0\":{\"1755\":1},\"2\":{\"1756\":1,\"1787\":1,\"1797\":1,\"1800\":1,\"1812\":1,\"1821\":1,\"1830\":1,\"1850\":1}}],[\"lightweight\",{\"1\":{\"1329\":1}}],[\"license\",{\"1\":{\"1316\":1}}],[\"little\",{\"1\":{\"828\":1}}],[\"linux初始值为10\",{\"1\":{\"1413\":1}}],[\"linux采用加权移动平均\",{\"1\":{\"1411\":1}}],[\"linux中为30s\",{\"1\":{\"1410\":1}}],[\"linux下一页4kb\",{\"1\":{\"1443\":1}}],[\"linux下\",{\"1\":{\"1148\":1}}],[\"linux\",{\"0\":{\"1444\":1,\"1484\":1,\"1631\":1,\"1680\":1},\"1\":{\"785\":1,\"795\":1,\"801\":1,\"802\":1,\"1218\":4,\"1259\":1,\"1396\":1,\"1409\":1,\"1414\":1,\"1420\":1,\"1436\":1,\"1437\":1,\"1441\":1,\"1444\":1,\"1446\":1,\"1448\":3,\"1473\":1,\"1474\":1,\"1477\":1,\"1479\":1,\"1483\":1,\"1484\":1,\"1488\":2,\"1634\":1,\"1688\":1},\"2\":{\"1703\":1}}],[\"linebasedframedecoder\",{\"1\":{\"843\":1}}],[\"line\",{\"1\":{\"829\":1,\"846\":7,\"1435\":14}}],[\"linesstream\",{\"1\":{\"1067\":1}}],[\"lines\",{\"1\":{\"614\":1,\"1067\":1}}],[\"linenumbertable\",{\"1\":{\"240\":1}}],[\"linger\",{\"1\":{\"450\":1,\"459\":2}}],[\"linkin\",{\"1\":{\"1826\":1}}],[\"linking\",{\"1\":{\"1527\":1}}],[\"links\",{\"1\":{\"1819\":1}}],[\"linkedblockingqueue\",{\"1\":{\"1107\":1,\"1110\":1,\"1499\":1,\"1511\":1}}],[\"linkedblockingqueue<>\",{\"1\":{\"1106\":1}}],[\"linkedblockingdeque<>\",{\"1\":{\"1369\":1}}],[\"linkedblockingdeque\",{\"1\":{\"988\":1}}],[\"linkedhashmap\",{\"1\":{\"305\":1}}],[\"linkedhashmultiset\",{\"1\":{\"66\":1}}],[\"linkedhashset\",{\"1\":{\"304\":1,\"1496\":1}}],[\"linkedlist基于双向链表实现了双端队列\",{\"1\":{\"988\":1}}],[\"linkedlist实现了deque\",{\"1\":{\"987\":1}}],[\"linkedlist中已经有第0个元素\",{\"1\":{\"985\":1}}],[\"linkedlist<integer>\",{\"1\":{\"1669\":1}}],[\"linkedlist<>\",{\"1\":{\"985\":1,\"987\":1,\"1669\":3,\"1670\":1,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1}}],[\"linkedlist<string>\",{\"1\":{\"985\":1}}],[\"linkedlist\",{\"0\":{\"985\":1,\"987\":1},\"1\":{\"304\":1,\"897\":2,\"985\":6,\"1672\":1,\"1677\":1}}],[\"linkedlistmultimap\",{\"1\":{\"67\":1}}],[\"link\",{\"1\":{\"8\":1,\"940\":1}}],[\"livehouse\",{\"1\":{\"1826\":1}}],[\"live参数可以只统计存活对象\",{\"1\":{\"232\":1}}],[\"live\",{\"1\":{\"232\":1}}],[\"liv文件\",{\"1\":{\"37\":1}}],[\"libx264\",{\"1\":{\"1868\":6}}],[\"libgit2\",{\"1\":{\"1314\":2}}],[\"lib\",{\"1\":{\"228\":1,\"254\":1,\"1316\":1}}],[\"like\",{\"1\":{\"114\":1,\"124\":2,\"515\":1,\"535\":2,\"536\":2,\"537\":2,\"583\":3,\"612\":1,\"642\":1,\"643\":3,\"644\":1,\"671\":2,\"678\":1,\"703\":3,\"717\":1,\"1148\":1,\"1539\":1,\"1547\":2}}],[\"limit选项设置的时长\",{\"1\":{\"966\":1}}],[\"limit的所有的sql语句的日志\",{\"1\":{\"645\":1}}],[\"limit\",{\"0\":{\"618\":1},\"1\":{\"79\":1,\"124\":1,\"312\":1,\"581\":1,\"587\":4,\"588\":1,\"618\":5,\"768\":3,\"788\":2,\"923\":1,\"969\":1,\"971\":1,\"1068\":1,\"1226\":1,\"1567\":1}}],[\"list>\",{\"1\":{\"1862\":1}}],[\"list|hash|zset\",{\"1\":{\"913\":1}}],[\"list2\",{\"1\":{\"632\":2}}],[\"list1\",{\"1\":{\"632\":2}}],[\"listfiles返回目录下文件对象数组\",{\"1\":{\"314\":1}}],[\"list返回目录下文件名数组\",{\"1\":{\"314\":1}}],[\"listtableproperties\",{\"1\":{\"117\":1}}],[\"listen\",{\"1\":{\"1366\":1,\"1409\":1,\"1422\":1,\"1461\":1,\"1859\":1,\"1871\":1}}],[\"listener\",{\"1\":{\"417\":1,\"422\":1,\"820\":1,\"1190\":3}}],[\"listening\",{\"1\":{\"936\":1}}],[\"listeningdecorator\",{\"1\":{\"77\":1}}],[\"listeningexecutorservice\",{\"1\":{\"77\":5}}],[\"listenablefuture<string>\",{\"1\":{\"77\":1}}],[\"listenablefuturetask\",{\"1\":{\"77\":1}}],[\"listenablefuture\",{\"0\":{\"77\":1},\"1\":{\"77\":1}}],[\"liststream2\",{\"1\":{\"1067\":1}}],[\"liststream1\",{\"1\":{\"1067\":1}}],[\"lists\",{\"1\":{\"71\":1}}],[\"list<list<integer>>\",{\"1\":{\"1669\":2,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1}}],[\"list<itemsaleattrvo>\",{\"1\":{\"1369\":1}}],[\"list<integer>\",{\"1\":{\"67\":1,\"1067\":1,\"1068\":1}}],[\"list<treenode>\",{\"1\":{\"1361\":1}}],[\"list<topicpartition>\",{\"1\":{\"488\":1}}],[\"list<runnable>\",{\"1\":{\"1116\":2}}],[\"list<recordbatch>>\",{\"1\":{\"450\":1}}],[\"list<future<t>>\",{\"1\":{\"1113\":2}}],[\"list<object>\",{\"1\":{\"522\":1,\"849\":1,\"873\":1}}],[\"list<class<\",{\"1\":{\"522\":1}}],[\"list<clientrequest>\",{\"1\":{\"450\":1}}],[\"list<batchresult>\",{\"1\":{\"513\":1}}],[\"list<e>\",{\"1\":{\"509\":1,\"544\":2}}],[\"list<skuimagesentity>\",{\"1\":{\"1369\":1}}],[\"list<socketchannel>\",{\"1\":{\"782\":1,\"783\":1}}],[\"list<slf4jserviceprovider>\",{\"1\":{\"383\":3}}],[\"list<string>\",{\"1\":{\"263\":1,\"488\":1}}],[\"list<\",{\"1\":{\"263\":1}}],[\"list<v>>\",{\"1\":{\"67\":1}}],[\"listmultimap\",{\"1\":{\"67\":9}}],[\"listmultimap<string\",{\"1\":{\"67\":1}}],[\"list\",{\"1\":{\"64\":1,\"71\":1,\"78\":1,\"153\":1,\"263\":1,\"304\":2,\"446\":1,\"538\":1,\"540\":1,\"544\":1,\"632\":2,\"731\":1,\"749\":1,\"913\":2,\"1067\":3,\"1068\":2,\"1168\":1,\"1311\":1,\"1329\":1,\"1343\":1,\"1369\":1,\"1448\":6,\"1570\":1,\"1712\":1}}],[\"lilinchao\",{\"1\":{\"10\":1}}],[\"lob\",{\"1\":{\"1608\":1}}],[\"lombok\",{\"1\":{\"391\":1}}],[\"look\",{\"1\":{\"1472\":2}}],[\"lookaside\",{\"1\":{\"1443\":1}}],[\"looking\",{\"1\":{\"1201\":1,\"1203\":3}}],[\"lookupclass\",{\"1\":{\"1015\":1}}],[\"lookup\",{\"1\":{\"1015\":3}}],[\"loosescan\",{\"1\":{\"726\":1}}],[\"loom中的fiber和quasar框架\",{\"1\":{\"282\":1}}],[\"loop\",{\"1\":{\"228\":1,\"263\":1,\"633\":3}}],[\"loadmetadata\",{\"1\":{\"1598\":1}}],[\"loadclass\",{\"1\":{\"1531\":1}}],[\"loadcustomlogimpl\",{\"1\":{\"541\":1}}],[\"loadcustomvfs\",{\"1\":{\"541\":1}}],[\"loadfence\",{\"1\":{\"1142\":1}}],[\"loadbeandefinitions\",{\"1\":{\"1012\":1}}],[\"loadbalance\",{\"1\":{\"91\":1}}],[\"loader\",{\"1\":{\"349\":1,\"1135\":3,\"1139\":1}}],[\"loading\",{\"1\":{\"73\":1,\"941\":1,\"1527\":1}}],[\"loadingcache\",{\"1\":{\"73\":6}}],[\"loadingcache<string\",{\"1\":{\"73\":1}}],[\"load\",{\"1\":{\"73\":1,\"118\":2,\"120\":2,\"124\":2,\"126\":1,\"143\":1,\"145\":1,\"305\":1,\"383\":1,\"614\":1,\"964\":1,\"966\":1,\"967\":1,\"1213\":1,\"1226\":3,\"1228\":1,\"1506\":1,\"1634\":1}}],[\"locations\",{\"1\":{\"129\":3,\"506\":1,\"1219\":2,\"1227\":1}}],[\"location\",{\"1\":{\"105\":2,\"107\":2,\"109\":1,\"113\":3,\"1016\":1,\"1226\":1,\"1366\":2,\"1871\":3}}],[\"localstorage\",{\"1\":{\"1642\":1}}],[\"localsrc\",{\"1\":{\"1218\":1}}],[\"local选项读写\",{\"1\":{\"1311\":1}}],[\"localread\",{\"1\":{\"873\":1}}],[\"localaddress\",{\"1\":{\"866\":3}}],[\"localhost\",{\"1\":{\"446\":4,\"456\":1,\"488\":1,\"590\":1,\"782\":1,\"792\":1,\"812\":1,\"820\":1,\"1125\":1,\"1148\":1,\"1199\":4,\"1422\":1,\"1871\":1,\"1872\":1}}],[\"localtime\",{\"1\":{\"353\":1,\"1697\":2}}],[\"localdatetime\",{\"1\":{\"353\":1}}],[\"localdate\",{\"1\":{\"353\":1}}],[\"localvariabletable\",{\"1\":{\"240\":1}}],[\"local可选\",{\"1\":{\"121\":1}}],[\"local\",{\"1\":{\"118\":1,\"120\":1,\"121\":1,\"124\":2,\"126\":1,\"210\":1,\"348\":1,\"512\":1,\"614\":5,\"622\":3,\"623\":2,\"1218\":2,\"1226\":2,\"1228\":1,\"1326\":2,\"1338\":2,\"1461\":1,\"1631\":1}}],[\"localcache<k\",{\"1\":{\"73\":1}}],[\"localmanualcache\",{\"1\":{\"73\":1}}],[\"localloadingcache继承自\",{\"1\":{\"73\":1}}],[\"localloadingcache\",{\"1\":{\"73\":1}}],[\"lockvalue\",{\"1\":{\"1263\":1}}],[\"lock1\",{\"1\":{\"1188\":2}}],[\"locks\",{\"1\":{\"552\":1,\"556\":1,\"557\":1}}],[\"locksupport\",{\"0\":{\"361\":1},\"1\":{\"1\":1,\"6\":2,\"7\":1,\"8\":3,\"140\":1,\"362\":5,\"365\":2,\"367\":1,\"1087\":1,\"1138\":1}}],[\"lock锁\",{\"1\":{\"331\":1}}],[\"lockinterruptibly\",{\"1\":{\"156\":1}}],[\"lockmoney\",{\"1\":{\"124\":1}}],[\"lock\",{\"1\":{\"5\":1,\"9\":4,\"134\":1,\"156\":10,\"157\":1,\"184\":6,\"196\":3,\"331\":1,\"367\":1,\"550\":1,\"552\":4,\"553\":1,\"555\":2,\"556\":1,\"557\":1,\"558\":1,\"560\":2,\"561\":1,\"562\":1,\"564\":10,\"1074\":1,\"1076\":5,\"1077\":1,\"1114\":3,\"1115\":1,\"1116\":3,\"1261\":1,\"1263\":6,\"1264\":8,\"1517\":1,\"1557\":1,\"1559\":1,\"1560\":1,\"1562\":2}}],[\"lowest\",{\"1\":{\"1057\":1}}],[\"lowercase\",{\"1\":{\"1148\":2}}],[\"lowercamel\",{\"1\":{\"79\":1}}],[\"lower\",{\"1\":{\"79\":7,\"593\":2,\"1567\":1}}],[\"low\",{\"1\":{\"38\":1,\"1148\":1,\"1446\":2}}],[\"log文件有多个\",{\"1\":{\"1555\":1}}],[\"logn\",{\"1\":{\"1500\":1,\"1665\":1}}],[\"log类型的页面中\",{\"1\":{\"745\":1,\"749\":1}}],[\"log格式\",{\"1\":{\"739\":1}}],[\"log重做日志\",{\"1\":{\"738\":1}}],[\"logfile\",{\"1\":{\"739\":1}}],[\"logfilename\",{\"1\":{\"643\":1}}],[\"logfactory\",{\"1\":{\"545\":1}}],[\"log可能不用了\",{\"1\":{\"640\":1}}],[\"log日志\",{\"1\":{\"639\":1}}],[\"log=1\",{\"1\":{\"612\":1}}],[\"logappendinfo对象\",{\"1\":{\"476\":1}}],[\"logoffsetmetadata\",{\"1\":{\"476\":2}}],[\"log每写入4kb会新增一条索引项\",{\"1\":{\"475\":1}}],[\"logs\",{\"1\":{\"388\":2,\"643\":3,\"1225\":2,\"1634\":1}}],[\"logstash\",{\"1\":{\"31\":2}}],[\"logging\",{\"1\":{\"376\":5,\"382\":4,\"383\":1,\"385\":1}}],[\"logginghandler\",{\"1\":{\"93\":1,\"811\":1,\"842\":1,\"844\":1,\"850\":1,\"851\":1}}],[\"logger=\",{\"1\":{\"391\":1}}],[\"logger>\",{\"1\":{\"389\":2}}],[\"loggers>\",{\"1\":{\"389\":1}}],[\"loggers\",{\"0\":{\"389\":1}}],[\"loggerfactory\",{\"1\":{\"355\":1,\"383\":5,\"384\":1,\"391\":2}}],[\"logger\",{\"1\":{\"355\":5,\"383\":6,\"384\":1,\"389\":1,\"391\":5,\"1049\":4,\"1050\":2}}],[\"log4j<\",{\"1\":{\"382\":2,\"383\":1}}],[\"log4j12<\",{\"1\":{\"382\":1}}],[\"log4j2配置文件详解\",{\"1\":{\"386\":1}}],[\"log4j2\",{\"0\":{\"385\":1},\"1\":{\"376\":5,\"382\":4,\"383\":1,\"385\":1,\"386\":2,\"387\":1,\"388\":1,\"391\":3}}],[\"log4j\",{\"1\":{\"355\":1,\"376\":9,\"378\":1,\"382\":9,\"383\":3,\"385\":3}}],[\"logback<\",{\"1\":{\"382\":1}}],[\"logback\",{\"1\":{\"355\":4,\"376\":5,\"382\":5,\"385\":1}}],[\"loglevel\",{\"1\":{\"93\":1,\"844\":1,\"850\":1}}],[\"loginrequestmessage\",{\"1\":{\"850\":2}}],[\"loginpwd\",{\"1\":{\"124\":1}}],[\"loginsecret\",{\"1\":{\"124\":1}}],[\"loginname\",{\"1\":{\"124\":1}}],[\"login\",{\"1\":{\"15\":6}}],[\"log\",{\"0\":{\"738\":1,\"740\":1,\"743\":1,\"1322\":1,\"1554\":1,\"1555\":1,\"1556\":1},\"1\":{\"14\":1,\"66\":4,\"67\":2,\"68\":1,\"79\":5,\"93\":2,\"153\":3,\"355\":2,\"384\":8,\"388\":5,\"391\":1,\"417\":2,\"418\":4,\"445\":3,\"467\":3,\"471\":4,\"475\":1,\"476\":1,\"477\":1,\"507\":3,\"638\":5,\"639\":3,\"640\":2,\"642\":1,\"643\":3,\"648\":1,\"649\":6,\"675\":2,\"684\":1,\"735\":2,\"739\":13,\"742\":1,\"746\":1,\"747\":2,\"748\":1,\"749\":12,\"752\":1,\"753\":1,\"767\":2,\"791\":1,\"797\":1,\"817\":3,\"818\":2,\"820\":4,\"821\":1,\"822\":8,\"823\":4,\"831\":2,\"833\":1,\"846\":1,\"849\":2,\"978\":1,\"1034\":1,\"1135\":1,\"1154\":1,\"1155\":2,\"1170\":1,\"1192\":1,\"1225\":2,\"1281\":2,\"1322\":6,\"1342\":4,\"1346\":1,\"1351\":3,\"1553\":4,\"1554\":4,\"1555\":3,\"1556\":13,\"1557\":2,\"1563\":5,\"1620\":2,\"1631\":1,\"1698\":1}}],[\"longitude`\",{\"1\":{\"1357\":1}}],[\"longestcommonsubsequence\",{\"1\":{\"996\":1}}],[\"longestpalindrome\",{\"1\":{\"993\":2}}],[\"long类型整数\",{\"1\":{\"908\":1}}],[\"longbuffer\",{\"1\":{\"761\":1}}],[\"longblob\",{\"1\":{\"664\":1}}],[\"longtext\",{\"1\":{\"663\":1}}],[\"longaccumulator\",{\"1\":{\"150\":1}}],[\"longadder\",{\"1\":{\"150\":1}}],[\"longs\",{\"1\":{\"80\":1,\"215\":1}}],[\"long\",{\"1\":{\"6\":2,\"14\":2,\"36\":1,\"51\":1,\"74\":4,\"80\":2,\"139\":1,\"146\":1,\"158\":3,\"184\":2,\"192\":2,\"287\":2,\"330\":1,\"332\":1,\"362\":4,\"363\":2,\"450\":1,\"476\":1,\"612\":1,\"645\":1,\"777\":2,\"785\":1,\"828\":2,\"1068\":2,\"1087\":5,\"1088\":1,\"1091\":3,\"1095\":1,\"1106\":1,\"1110\":5,\"1113\":2,\"1114\":1,\"1120\":2,\"1136\":16,\"1137\":7,\"1138\":1,\"1139\":1,\"1140\":7,\"1263\":1,\"1369\":1,\"1435\":1,\"1511\":1,\"1512\":1,\"1712\":2}}],[\"own\",{\"1\":{\"1873\":1}}],[\"owned加一\",{\"1\":{\"690\":1}}],[\"owned标记该组内记录数\",{\"1\":{\"690\":1}}],[\"owned\",{\"1\":{\"689\":1}}],[\"owner\",{\"1\":{\"3\":1,\"139\":2,\"1074\":1,\"1515\":1}}],[\"o=<username><session\",{\"1\":{\"1862\":1}}],[\"o=\",{\"1\":{\"1862\":1}}],[\"o=所有者\",{\"1\":{\"1862\":1}}],[\"o=x\",{\"1\":{\"1693\":1}}],[\"ota一般都会在本地系统增加一个缓存\",{\"1\":{\"1737\":1}}],[\"ota\",{\"1\":{\"1734\":1,\"1737\":1}}],[\"ota需要定时抓取+缓存数据\",{\"1\":{\"1728\":1}}],[\"ota平台也直接对接航空公司\",{\"1\":{\"1726\":1}}],[\"ota平台是从ota的基础上发展起来的\",{\"1\":{\"1726\":1}}],[\"ota或旅客来说\",{\"1\":{\"1722\":1}}],[\"otherwise>\",{\"1\":{\"536\":1}}],[\"otherwise\",{\"1\":{\"536\":1}}],[\"other\",{\"1\":{\"114\":1,\"720\":1,\"940\":2}}],[\"others\",{\"1\":{\"3\":1}}],[\"oceanus是http负载均衡服务\",{\"1\":{\"1303\":1}}],[\"oceanus\",{\"0\":{\"1302\":1},\"1\":{\"1302\":3,\"1304\":1}}],[\"occur\",{\"1\":{\"93\":1}}],[\"o进行传输\",{\"1\":{\"1130\":1}}],[\"o通信\",{\"1\":{\"1126\":1}}],[\"o缓冲区溢出\",{\"1\":{\"924\":1}}],[\"o多路复用实现单线程单进程处理所有客户端的命令请求\",{\"1\":{\"922\":1}}],[\"o多路复用库\",{\"1\":{\"919\":1}}],[\"o多路复用程序传来的套接字\",{\"1\":{\"919\":1,\"1572\":1}}],[\"o多路复用程序\",{\"1\":{\"919\":1}}],[\"odbc\",{\"1\":{\"1224\":1}}],[\"od\",{\"1\":{\"914\":1}}],[\"o成本\",{\"1\":{\"716\":1}}],[\"og\",{\"1\":{\"467\":1}}],[\"o将会成为这个topic的性能瓶颈\",{\"1\":{\"451\":1}}],[\"ois\",{\"1\":{\"321\":1,\"849\":2}}],[\"oos\",{\"1\":{\"321\":1,\"849\":2}}],[\"oops\",{\"1\":{\"215\":1}}],[\"oom\",{\"1\":{\"191\":1,\"192\":1,\"782\":1,\"1110\":3,\"1445\":1,\"1446\":6,\"1520\":5}}],[\"observing\",{\"1\":{\"1201\":1}}],[\"observer\",{\"1\":{\"1194\":2,\"1196\":2,\"1202\":1}}],[\"obuf\",{\"1\":{\"923\":1}}],[\"ob\",{\"1\":{\"195\":2}}],[\"obj\",{\"1\":{\"139\":10,\"189\":4,\"191\":1,\"194\":2,\"310\":1,\"311\":1,\"321\":4,\"970\":2,\"1002\":3,\"1095\":1}}],[\"object创建间谍对象\",{\"1\":{\"1708\":1}}],[\"objectwaiter\",{\"1\":{\"1074\":1}}],[\"objectwrapperfactory\",{\"1\":{\"541\":1}}],[\"objectwrapperfactoryelement\",{\"1\":{\"541\":1}}],[\"objectprovider<transactionmanagercustomizers>\",{\"1\":{\"1054\":1}}],[\"object存储成员\",{\"1\":{\"900\":1}}],[\"objectutil\",{\"1\":{\"818\":1}}],[\"objectfactory<\",{\"1\":{\"1028\":3,\"1382\":3,\"1599\":1}}],[\"objectfactoryelement\",{\"1\":{\"541\":1}}],[\"objectfactory>\",{\"1\":{\"522\":1}}],[\"objectfactory\",{\"0\":{\"522\":1},\"1\":{\"522\":2,\"541\":1}}],[\"objectfieldoffset\",{\"1\":{\"362\":2,\"1140\":1}}],[\"object>>\",{\"1\":{\"1045\":1,\"1383\":1}}],[\"object>\",{\"1\":{\"418\":1,\"797\":1,\"1028\":2,\"1382\":2,\"1599\":2}}],[\"objectmessage\",{\"1\":{\"403\":1,\"1625\":1}}],[\"objectinputstream\",{\"1\":{\"321\":1,\"849\":2,\"1502\":1}}],[\"objectoutputstream\",{\"1\":{\"321\":1,\"849\":2,\"1502\":1}}],[\"object类型数据\",{\"1\":{\"95\":1}}],[\"objects目录下\",{\"1\":{\"1350\":1}}],[\"objects\",{\"0\":{\"60\":1},\"1\":{\"59\":1,\"60\":2,\"503\":1,\"1016\":1,\"1244\":1,\"1349\":1}}],[\"object\",{\"1\":{\"36\":1,\"59\":2,\"60\":1,\"137\":1,\"139\":3,\"154\":2,\"183\":5,\"187\":2,\"189\":2,\"191\":2,\"194\":1,\"195\":2,\"196\":5,\"215\":1,\"253\":1,\"254\":1,\"310\":1,\"349\":2,\"362\":3,\"363\":3,\"365\":1,\"453\":2,\"509\":7,\"523\":3,\"544\":1,\"552\":3,\"797\":2,\"811\":1,\"818\":4,\"823\":4,\"873\":1,\"1002\":1,\"1009\":4,\"1015\":12,\"1016\":4,\"1019\":1,\"1028\":2,\"1039\":1,\"1049\":1,\"1059\":4,\"1073\":2,\"1076\":7,\"1077\":2,\"1087\":3,\"1091\":1,\"1095\":1,\"1098\":1,\"1136\":3,\"1137\":3,\"1138\":1,\"1139\":1,\"1140\":9,\"1244\":2,\"1261\":1,\"1350\":1,\"1382\":2,\"1493\":1,\"1532\":1}}],[\"os内核\",{\"1\":{\"1465\":1}}],[\"os缓存\",{\"1\":{\"1424\":1}}],[\"os不会对消息进行拆分\",{\"1\":{\"1417\":1}}],[\"osxkeychain\",{\"1\":{\"1347\":1}}],[\"os的文件系统影响库名\",{\"1\":{\"673\":1}}],[\"osr\",{\"1\":{\"469\":1}}],[\"os\",{\"0\":{\"1439\":1},\"1\":{\"134\":1,\"666\":1,\"794\":1,\"795\":1,\"799\":2,\"825\":1,\"830\":1,\"856\":1,\"857\":1,\"916\":1,\"1074\":1,\"1077\":1,\"1393\":1,\"1420\":1,\"1440\":1,\"1443\":3,\"1444\":1,\"1445\":3,\"1446\":1,\"1475\":1,\"1482\":2,\"1487\":1,\"1577\":1}}],[\"oschina\",{\"1\":{\"125\":1}}],[\"oldvalue\",{\"1\":{\"975\":1}}],[\"old区域\",{\"1\":{\"732\":1}}],[\"old表示将要或者已经删除的数据\",{\"1\":{\"636\":1}}],[\"old表示修改之前的数据\",{\"1\":{\"636\":1}}],[\"old\",{\"1\":{\"117\":1,\"118\":1,\"172\":2,\"173\":1,\"175\":1,\"176\":1,\"503\":1,\"636\":1,\"732\":2,\"747\":1,\"1367\":1,\"1448\":5,\"1524\":1,\"1525\":2,\"1529\":1,\"1791\":1}}],[\"omitemptystrings\",{\"1\":{\"79\":1}}],[\"o2\",{\"1\":{\"60\":1}}],[\"o1\",{\"1\":{\"60\":1}}],[\"orphan\",{\"1\":{\"1791\":1}}],[\"orthodoxy\",{\"0\":{\"1760\":1}}],[\"orm\",{\"1\":{\"1036\":1}}],[\"oracle\",{\"1\":{\"1035\":1}}],[\"oriented\",{\"1\":{\"408\":1}}],[\"orientated\",{\"1\":{\"408\":1}}],[\"origin\",{\"1\":{\"64\":1,\"1311\":2,\"1326\":2,\"1328\":4,\"1329\":2,\"1333\":5,\"1338\":13,\"1342\":1,\"1351\":8,\"1633\":1,\"1730\":1,\"1791\":1,\"1871\":2}}],[\"organized\",{\"1\":{\"615\":1}}],[\"org\",{\"1\":{\"117\":1,\"357\":1,\"383\":5,\"385\":1,\"389\":1,\"391\":2,\"392\":1,\"456\":2,\"506\":5,\"518\":1,\"522\":1,\"523\":1,\"528\":2,\"546\":1,\"1269\":2,\"1613\":2,\"1866\":1,\"1867\":1}}],[\"or\",{\"1\":{\"71\":1,\"453\":4,\"583\":4,\"611\":1,\"622\":3,\"623\":3,\"632\":1,\"703\":1,\"710\":1,\"728\":3,\"993\":1,\"1050\":1,\"1051\":1,\"1148\":3,\"1547\":2}}],[\"ordinary\",{\"1\":{\"215\":1,\"557\":1,\"564\":1}}],[\"ording\",{\"1\":{\"61\":1}}],[\"orderdate\",{\"1\":{\"1567\":1}}],[\"ordered\",{\"1\":{\"1057\":1}}],[\"orderedeventexecutor\",{\"1\":{\"816\":1}}],[\"orderreturnentity\",{\"1\":{\"418\":1}}],[\"orderno\",{\"1\":{\"124\":1}}],[\"orderid\",{\"1\":{\"124\":4,\"127\":1,\"128\":2}}],[\"ordering<foo>\",{\"1\":{\"61\":1}}],[\"ordering\",{\"0\":{\"61\":1},\"1\":{\"60\":1,\"61\":6}}],[\"orderstatus\",{\"1\":{\"124\":1}}],[\"orders\",{\"1\":{\"124\":14,\"125\":4,\"127\":5,\"128\":4}}],[\"order\",{\"0\":{\"616\":1},\"1\":{\"43\":1,\"44\":1,\"105\":1,\"124\":1,\"418\":3,\"515\":1,\"581\":1,\"586\":2,\"588\":1,\"618\":3,\"708\":1,\"1057\":1,\"1059\":1,\"1226\":1,\"1567\":3,\"1714\":1,\"1715\":1}}],[\"orelsethrow\",{\"1\":{\"58\":1}}],[\"orelseget\",{\"1\":{\"58\":1}}],[\"orelse\",{\"1\":{\"58\":1}}],[\"op\",{\"1\":{\"785\":1,\"786\":1,\"787\":2,\"788\":2,\"789\":3,\"791\":2,\"863\":1,\"867\":1,\"873\":7}}],[\"optimize\",{\"1\":{\"729\":1,\"1567\":1}}],[\"optimizer\",{\"1\":{\"729\":4}}],[\"option>\",{\"1\":{\"1855\":5}}],[\"option2\",{\"1\":{\"671\":1}}],[\"option1\",{\"1\":{\"671\":1}}],[\"option是级联的\",{\"1\":{\"623\":1}}],[\"option创建视图\",{\"1\":{\"623\":1}}],[\"options\",{\"1\":{\"229\":1,\"675\":8,\"779\":1,\"1218\":2,\"1791\":1,\"1858\":4,\"1861\":2,\"1871\":1}}],[\"option\",{\"1\":{\"93\":1,\"230\":2,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"622\":3,\"623\":2,\"854\":4,\"855\":1,\"856\":1,\"858\":1}}],[\"optional<integer>\",{\"1\":{\"1068\":2}}],[\"optional<string>\",{\"1\":{\"58\":5}}],[\"optional\",{\"0\":{\"58\":1},\"1\":{\"58\":22,\"1068\":3}}],[\"opt\",{\"1\":{\"445\":1}}],[\"operationcomplete\",{\"1\":{\"820\":2,\"821\":1,\"822\":2,\"873\":1}}],[\"operator\",{\"1\":{\"263\":1}}],[\"open票\",{\"1\":{\"1738\":1}}],[\"openconnection\",{\"1\":{\"1008\":1}}],[\"openclosed\",{\"1\":{\"70\":1,\"81\":1}}],[\"opened\",{\"1\":{\"1008\":1}}],[\"openselector\",{\"1\":{\"870\":4}}],[\"openserversocketchannel\",{\"1\":{\"864\":1}}],[\"opensessionfromdatasource\",{\"1\":{\"542\":2}}],[\"opensession\",{\"1\":{\"507\":1,\"542\":2}}],[\"open=\",{\"1\":{\"538\":1}}],[\"openwire\",{\"1\":{\"434\":1,\"435\":1}}],[\"open\",{\"1\":{\"70\":3,\"81\":2,\"634\":2,\"782\":2,\"783\":1,\"785\":1,\"786\":2,\"787\":1,\"791\":3,\"792\":2,\"796\":1,\"797\":1,\"863\":2,\"864\":1,\"870\":1,\"1125\":1,\"1475\":1}}],[\"opcode\",{\"1\":{\"241\":1}}],[\"opsforvalue\",{\"1\":{\"14\":2,\"1261\":2,\"1263\":2,\"1368\":1}}],[\"ops\",{\"1\":{\"3\":1,\"873\":3,\"928\":1}}],[\"output\",{\"1\":{\"1877\":3,\"1878\":3}}],[\"outputstreamwriter\",{\"1\":{\"320\":1,\"1502\":1,\"1503\":2}}],[\"outputstream\",{\"1\":{\"317\":1,\"319\":1,\"320\":1,\"321\":1,\"324\":1,\"1502\":1}}],[\"outofmemoryerror\",{\"1\":{\"1136\":1,\"1533\":1}}],[\"outbound\",{\"1\":{\"814\":1}}],[\"out就是一个printstream对象\",{\"1\":{\"322\":1}}],[\"outer$ninner\",{\"1\":{\"297\":1}}],[\"outer\",{\"1\":{\"295\":2,\"296\":2,\"604\":4}}],[\"out\",{\"1\":{\"51\":2,\"58\":1,\"69\":1,\"70\":2,\"73\":2,\"77\":4,\"78\":2,\"79\":1,\"83\":1,\"84\":2,\"127\":2,\"153\":1,\"183\":9,\"263\":2,\"290\":1,\"296\":3,\"301\":3,\"378\":1,\"388\":1,\"418\":2,\"420\":2,\"421\":1,\"456\":1,\"488\":1,\"489\":1,\"631\":2,\"773\":6,\"778\":1,\"779\":3,\"782\":1,\"789\":2,\"811\":1,\"826\":3,\"849\":11,\"990\":1,\"996\":1,\"1015\":2,\"1016\":2,\"1106\":1,\"1125\":3,\"1181\":4,\"1188\":6,\"1226\":1,\"1368\":2,\"1536\":2,\"1652\":1,\"1781\":1}}],[\"o\",{\"0\":{\"1487\":1},\"1\":{\"33\":1,\"82\":1,\"124\":10,\"189\":1,\"192\":3,\"194\":1,\"324\":2,\"431\":1,\"549\":1,\"638\":1,\"643\":1,\"675\":1,\"929\":1,\"941\":1,\"1016\":2,\"1073\":2,\"1098\":1,\"1119\":1,\"1130\":1,\"1131\":3,\"1136\":1,\"1137\":6,\"1140\":4,\"1249\":1,\"1338\":1,\"1470\":1,\"1478\":4,\"1481\":1,\"1484\":3,\"1486\":2,\"1487\":2,\"1500\":1,\"1504\":5,\"1563\":4,\"1634\":1,\"1656\":1,\"1698\":2,\"1862\":1,\"1877\":2}}],[\"onicecandidate\",{\"1\":{\"1861\":1}}],[\"onnegotiationneeded\",{\"1\":{\"1861\":1}}],[\"ondataavailable\",{\"1\":{\"1858\":1}}],[\"onremovetrack\",{\"1\":{\"1857\":1}}],[\"onresultof\",{\"1\":{\"61\":1}}],[\"onaddtrack\",{\"1\":{\"1857\":1}}],[\"onapplicationevent\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"online\",{\"1\":{\"1722\":1}}],[\"only|read\",{\"1\":{\"734\":1}}],[\"only\",{\"1\":{\"530\":1,\"915\":1,\"1050\":1,\"1116\":1}}],[\"onto\",{\"1\":{\"1326\":1,\"1337\":1}}],[\"on子句\",{\"1\":{\"713\":1}}],[\"onended\",{\"1\":{\"1857\":1}}],[\"onedrive\",{\"1\":{\"1805\":1}}],[\"oneline|full|fuller\",{\"1\":{\"1322\":1}}],[\"one命令\",{\"1\":{\"943\":1,\"948\":1}}],[\"one\",{\"1\":{\"510\":1,\"1116\":1,\"1783\":2}}],[\"once\",{\"1\":{\"461\":3,\"1050\":1,\"1051\":1}}],[\"oncompletion\",{\"1\":{\"456\":1}}],[\"onmismatch=\",{\"1\":{\"388\":1}}],[\"onmatch=\",{\"1\":{\"388\":1}}],[\"onfailure\",{\"1\":{\"77\":1}}],[\"onshutdown\",{\"1\":{\"1116\":1}}],[\"onsuccess\",{\"1\":{\"77\":1}}],[\"onspinwait\",{\"1\":{\"6\":2,\"8\":1,\"1095\":1}}],[\"on\",{\"1\":{\"27\":1,\"79\":3,\"124\":2,\"127\":2,\"453\":4,\"515\":2,\"591\":2,\"599\":2,\"603\":2,\"604\":4,\"605\":2,\"611\":1,\"636\":1,\"701\":6,\"707\":1,\"961\":1,\"1116\":1,\"1151\":2,\"1154\":1,\"1214\":1,\"1226\":1,\"1357\":1,\"1358\":1,\"1567\":2,\"1643\":1,\"1791\":2,\"1859\":5}}],[\"oauth\",{\"1\":{\"15\":1}}],[\"oauth2\",{\"0\":{\"15\":1},\"1\":{\"15\":3}}],[\"over\",{\"1\":{\"383\":1,\"471\":1,\"1567\":2,\"1779\":1,\"1866\":1}}],[\"overwrite\",{\"1\":{\"118\":1,\"119\":1,\"120\":1,\"121\":2,\"126\":1,\"1226\":2,\"1228\":1}}],[\"override会报错\",{\"1\":{\"1534\":1}}],[\"override\",{\"1\":{\"14\":1,\"15\":1,\"73\":1,\"77\":4,\"78\":2,\"83\":1,\"93\":1,\"153\":1,\"188\":2,\"194\":1,\"196\":3,\"420\":1,\"421\":1,\"453\":1,\"456\":1,\"523\":2,\"544\":1,\"779\":2,\"791\":1,\"796\":2,\"797\":6,\"811\":2,\"812\":1,\"818\":4,\"820\":2,\"821\":1,\"822\":4,\"823\":4,\"846\":1,\"849\":2,\"865\":2,\"866\":1,\"867\":1,\"871\":1,\"872\":1,\"873\":1,\"1008\":3,\"1009\":3,\"1015\":2,\"1016\":1,\"1039\":1,\"1049\":1,\"1050\":1,\"1051\":1,\"1058\":1,\"1192\":1,\"1369\":1}}],[\"overflow\",{\"1\":{\"9\":2}}],[\"ok\",{\"1\":{\"14\":1,\"596\":2,\"846\":1,\"1398\":1}}],[\"ofseconds\",{\"1\":{\"488\":1}}],[\"offer\",{\"1\":{\"791\":1,\"987\":1,\"988\":2,\"1113\":1,\"1426\":2}}],[\"offet\",{\"1\":{\"490\":1}}],[\"off\",{\"1\":{\"390\":1,\"1136\":1,\"1139\":1}}],[\"offset÷8\",{\"1\":{\"974\":1,\"975\":2}}],[\"offset=43\",{\"1\":{\"940\":3}}],[\"offset=n\",{\"1\":{\"675\":1}}],[\"offset>\",{\"1\":{\"937\":1}}],[\"offsets分区数\",{\"1\":{\"483\":1}}],[\"offsets\",{\"1\":{\"445\":1,\"483\":1,\"485\":2,\"490\":1}}],[\"offset\",{\"0\":{\"490\":1,\"493\":1},\"1\":{\"128\":8,\"471\":1,\"474\":1,\"475\":2,\"476\":7,\"483\":1,\"485\":1,\"490\":7,\"491\":1,\"492\":2,\"493\":2,\"499\":3,\"742\":1,\"802\":1,\"940\":1,\"974\":5,\"975\":5,\"1136\":1,\"1137\":6,\"1140\":4,\"1229\":2,\"1404\":1,\"1435\":1}}],[\"offset相关pay\",{\"1\":{\"37\":1}}],[\"ofnullable\",{\"1\":{\"58\":1}}],[\"of\",{\"1\":{\"6\":1,\"42\":2,\"58\":2,\"64\":1,\"78\":1,\"127\":2,\"304\":3,\"312\":1,\"515\":1,\"720\":1,\"807\":1,\"1067\":1,\"1135\":1,\"1226\":1,\"1615\":4,\"1663\":1,\"1741\":1,\"1793\":1}}],[\"bbb\",{\"1\":{\"1868\":5,\"1869\":5,\"1878\":4}}],[\"b收到后也收集自己的candidate\",{\"1\":{\"1860\":1}}],[\"b收到a返回的ping消息后\",{\"1\":{\"945\":1}}],[\"b收到a发送的meet消息后\",{\"1\":{\"945\":1}}],[\"b站算是矮子里的将军\",{\"1\":{\"1803\":1}}],[\"bjs\",{\"1\":{\"1729\":1}}],[\"bw\",{\"1\":{\"1503\":1}}],[\"bss\",{\"1\":{\"1444\":1}}],[\"blender\",{\"1\":{\"1867\":1}}],[\"blur\",{\"1\":{\"1855\":3}}],[\"blame\",{\"1\":{\"1347\":1}}],[\"bloom\",{\"1\":{\"1264\":1}}],[\"bloomfilter\",{\"1\":{\"83\":1}}],[\"bloomfilter<user>\",{\"1\":{\"83\":1}}],[\"blokingqueue\",{\"1\":{\"1264\":1}}],[\"blong\",{\"1\":{\"1136\":1}}],[\"blob\",{\"1\":{\"664\":2,\"667\":1,\"1332\":2,\"1350\":2}}],[\"blogmapper\",{\"1\":{\"506\":1}}],[\"blog\",{\"1\":{\"10\":2,\"520\":2,\"530\":3,\"535\":2,\"536\":2,\"537\":3,\"538\":1,\"1069\":1,\"1156\":2,\"1791\":2,\"1793\":1}}],[\"blocklock\",{\"1\":{\"1073\":3}}],[\"blocks\",{\"1\":{\"732\":2,\"1219\":2}}],[\"blockerlock\",{\"1\":{\"1087\":1,\"1092\":1}}],[\"blocker\",{\"1\":{\"363\":6,\"1087\":1,\"1092\":2,\"1093\":1}}],[\"blockedon\",{\"1\":{\"1095\":1}}],[\"blocked\",{\"1\":{\"77\":1,\"139\":2,\"336\":1,\"1089\":1,\"1450\":1,\"1509\":1}}],[\"blocking=\",{\"1\":{\"391\":1}}],[\"blocking\",{\"1\":{\"162\":1}}],[\"blockingqueue<runnable>\",{\"1\":{\"332\":1,\"1106\":1,\"1120\":1,\"1511\":1}}],[\"blockingqueue\",{\"1\":{\"8\":1,\"1499\":1,\"1511\":1}}],[\"block\",{\"1\":{\"8\":1,\"128\":8,\"739\":10,\"740\":1,\"742\":2,\"1219\":5,\"1220\":2,\"1229\":2,\"1435\":3}}],[\"b查缓存不存在取数据库\",{\"1\":{\"1267\":1,\"1585\":1}}],[\"bfs\",{\"0\":{\"1001\":1},\"1\":{\"1001\":1}}],[\"bgrewriteaof\",{\"1\":{\"1577\":2}}],[\"bgrewriteaof命令执行期间\",{\"1\":{\"911\":1}}],[\"bgsave执行完毕后\",{\"1\":{\"934\":1}}],[\"bgsave的时间\",{\"1\":{\"912\":1}}],[\"bgsave后\",{\"1\":{\"912\":1}}],[\"bgsave命令会被拒绝\",{\"1\":{\"911\":1}}],[\"bgsave\",{\"1\":{\"911\":1,\"1576\":1}}],[\"bdid\",{\"1\":{\"909\":1}}],[\"bdb\",{\"1\":{\"563\":1}}],[\"b3\",{\"1\":{\"771\":2}}],[\"b2\",{\"1\":{\"771\":2}}],[\"b1\",{\"1\":{\"771\":2}}],[\"b树中\",{\"1\":{\"698\":1}}],[\"b树每个节点可以有多个分支\",{\"1\":{\"698\":1}}],[\"b树是一种多叉平衡查找树\",{\"1\":{\"698\":1}}],[\"b+\",{\"1\":{\"1546\":1}}],[\"b+树\",{\"0\":{\"1546\":1}}],[\"b+树每层非叶子结点的最小记录\",{\"1\":{\"689\":1}}],[\"b+tree是b\",{\"1\":{\"698\":1}}],[\"b+tree\",{\"1\":{\"697\":1,\"698\":4}}],[\"b+tree索引\",{\"1\":{\"681\":1}}],[\"bv1kr4y1i7ru\",{\"1\":{\"667\":1}}],[\"both\",{\"1\":{\"1567\":1}}],[\"bos\",{\"1\":{\"849\":3}}],[\"boss线程运行\",{\"1\":{\"791\":1}}],[\"boss\",{\"1\":{\"791\":6,\"865\":1}}],[\"bossgroup\",{\"1\":{\"93\":4}}],[\"bound\",{\"1\":{\"993\":1,\"998\":2}}],[\"boundsql\",{\"1\":{\"540\":2,\"544\":3}}],[\"boundtype\",{\"1\":{\"81\":2}}],[\"body>\",{\"1\":{\"1870\":1}}],[\"body\",{\"1\":{\"95\":2,\"418\":1,\"844\":2,\"848\":1,\"1405\":1}}],[\"booyah\",{\"1\":{\"1338\":1}}],[\"book\",{\"1\":{\"283\":1,\"348\":1,\"675\":1}}],[\"boostrapclassloader\",{\"1\":{\"1528\":1}}],[\"boostrap\",{\"1\":{\"254\":1}}],[\"boolquery\",{\"1\":{\"51\":3}}],[\"boolquerybuilder\",{\"1\":{\"51\":1}}],[\"booleans\",{\"1\":{\"80\":1,\"215\":1}}],[\"boolean\",{\"1\":{\"5\":4,\"6\":5,\"7\":1,\"8\":2,\"9\":6,\"36\":1,\"43\":1,\"59\":2,\"80\":2,\"112\":1,\"146\":1,\"184\":2,\"187\":1,\"188\":1,\"189\":5,\"194\":2,\"195\":1,\"196\":2,\"309\":1,\"310\":1,\"311\":1,\"418\":5,\"420\":1,\"476\":1,\"511\":2,\"522\":1,\"542\":1,\"791\":1,\"828\":2,\"865\":1,\"993\":2,\"1010\":1,\"1015\":1,\"1044\":4,\"1049\":2,\"1054\":3,\"1057\":1,\"1068\":6,\"1087\":3,\"1088\":1,\"1090\":1,\"1092\":3,\"1095\":2,\"1097\":2,\"1099\":2,\"1114\":4,\"1115\":3,\"1135\":1,\"1137\":3,\"1138\":1,\"1139\":1,\"1263\":1,\"1675\":2,\"1712\":2}}],[\"bootzkclientapplicationtests\",{\"1\":{\"1181\":1}}],[\"bootstrapclassloader\",{\"1\":{\"1528\":2}}],[\"bootstrapmethods\",{\"1\":{\"240\":1}}],[\"bootstrap\",{\"1\":{\"100\":1,\"254\":1,\"446\":4,\"456\":1,\"457\":1,\"488\":1,\"489\":1,\"812\":1,\"813\":1,\"820\":1,\"854\":1,\"855\":1,\"858\":1,\"864\":1,\"873\":1,\"1135\":2}}],[\"boot\",{\"1\":{\"24\":1,\"416\":1,\"505\":1,\"1036\":1,\"1054\":1,\"1269\":1,\"1598\":1,\"1716\":2,\"1717\":4}}],[\"boot<\",{\"1\":{\"24\":1,\"416\":1,\"505\":1,\"1717\":1}}],[\"bad\",{\"1\":{\"1347\":2}}],[\"backtrack\",{\"1\":{\"1670\":2,\"1672\":2,\"1673\":3,\"1674\":3,\"1675\":6,\"1676\":3,\"1677\":2}}],[\"backtrace\",{\"1\":{\"1669\":3,\"1671\":2}}],[\"backed\",{\"1\":{\"1446\":1}}],[\"back\",{\"1\":{\"1435\":1}}],[\"backup\",{\"1\":{\"550\":1}}],[\"backlog指定\",{\"1\":{\"856\":1}}],[\"backlog\",{\"0\":{\"856\":1},\"1\":{\"93\":1,\"856\":1}}],[\"batchexecutor\",{\"1\":{\"542\":2}}],[\"batches\",{\"1\":{\"450\":2}}],[\"batch\",{\"1\":{\"450\":1,\"459\":2,\"513\":1,\"523\":1,\"542\":1,\"1176\":1,\"1363\":1}}],[\"bashrc\",{\"1\":{\"1701\":1}}],[\"bash\",{\"1\":{\"1634\":1}}],[\"basic\",{\"1\":{\"1280\":2,\"1619\":2,\"1629\":2}}],[\"basically\",{\"1\":{\"1207\":1,\"1279\":1,\"1618\":1}}],[\"basicack\",{\"1\":{\"422\":1,\"1629\":1}}],[\"basicfileattributes\",{\"1\":{\"779\":1}}],[\"basicreject\",{\"1\":{\"422\":1}}],[\"basicnack\",{\"1\":{\"422\":1}}],[\"based\",{\"1\":{\"1642\":1}}],[\"base下的核心系统类\",{\"1\":{\"1528\":1}}],[\"base64\",{\"1\":{\"1400\":1}}],[\"baseattrfuture\",{\"1\":{\"1369\":1}}],[\"base\",{\"0\":{\"1207\":1,\"1279\":1,\"1618\":1},\"1\":{\"693\":1,\"1000\":1,\"1024\":1,\"1128\":1,\"1136\":8,\"1207\":1,\"1279\":2,\"1282\":1,\"1618\":3}}],[\"basename\",{\"1\":{\"643\":1}}],[\"baseexecutor\",{\"1\":{\"544\":1}}],[\"basetypehandler\",{\"1\":{\"521\":1}}],[\"baseoffset\",{\"1\":{\"476\":3}}],[\"basepackage\",{\"1\":{\"90\":1,\"91\":1,\"98\":1}}],[\"basejson\",{\"1\":{\"15\":4}}],[\"basemapper\",{\"1\":{\"14\":1}}],[\"barrier\",{\"1\":{\"161\":2,\"172\":1,\"1463\":1}}],[\"barrier指令\",{\"1\":{\"145\":1}}],[\"bar\",{\"1\":{\"70\":4,\"79\":2}}],[\"b=带宽信息\",{\"1\":{\"1862\":1}}],[\"b=\",{\"1\":{\"67\":1}}],[\"b\",{\"1\":{\"61\":1,\"64\":2,\"66\":2,\"67\":1,\"79\":5,\"81\":11,\"93\":3,\"105\":3,\"112\":4,\"122\":1,\"143\":5,\"263\":2,\"605\":6,\"675\":1,\"698\":3,\"767\":2,\"772\":3,\"773\":2,\"778\":2,\"831\":1,\"1041\":1,\"1091\":2,\"1092\":3,\"1095\":1,\"1139\":1,\"1176\":1,\"1321\":2,\"1324\":2,\"1330\":2,\"1333\":1,\"1338\":1,\"1546\":2,\"1599\":4,\"1636\":7,\"1662\":3,\"1698\":2,\"1712\":2,\"1735\":1,\"1860\":1,\"1861\":1}}],[\"bunny\",{\"1\":{\"1867\":1,\"1868\":5}}],[\"bundle\",{\"1\":{\"1347\":8}}],[\"bu\",{\"1\":{\"1833\":1}}],[\"but\",{\"1\":{\"1049\":1,\"1050\":1,\"1714\":1,\"1715\":1}}],[\"busy\",{\"1\":{\"872\":1}}],[\"bulk\",{\"1\":{\"846\":1,\"941\":1}}],[\"bug\",{\"1\":{\"382\":1,\"785\":1,\"809\":1,\"1367\":1,\"1529\":1,\"1786\":1}}],[\"buff\",{\"1\":{\"1395\":11}}],[\"buffer等抽象实现\",{\"1\":{\"1504\":1}}],[\"buffer4\",{\"1\":{\"774\":1}}],[\"buffer3\",{\"1\":{\"774\":1}}],[\"buffer2\",{\"1\":{\"774\":2}}],[\"buffer1\",{\"1\":{\"774\":4}}],[\"buffer使用一半左右空间时\",{\"1\":{\"739\":1}}],[\"bufferpool\",{\"1\":{\"731\":1,\"1554\":1,\"1555\":1}}],[\"buffer中的block镜像\",{\"1\":{\"739\":1}}],[\"buffer中的多条驱动记录进行匹配\",{\"1\":{\"714\":1}}],[\"buffer中\",{\"1\":{\"714\":1}}],[\"buffered\",{\"1\":{\"1479\":1}}],[\"bufferedwriter\",{\"1\":{\"319\":1,\"1502\":1,\"1503\":1}}],[\"bufferedreader\",{\"1\":{\"319\":1,\"1067\":3,\"1502\":1}}],[\"bufferedoutputstream\",{\"1\":{\"319\":1,\"1502\":1}}],[\"bufferedinputstream\",{\"1\":{\"319\":1,\"1502\":1}}],[\"buffer\",{\"0\":{\"731\":1,\"761\":1},\"1\":{\"210\":1,\"324\":1,\"445\":2,\"459\":2,\"616\":2,\"638\":5,\"639\":2,\"640\":1,\"714\":1,\"728\":1,\"731\":3,\"739\":1,\"740\":1,\"760\":2,\"761\":2,\"767\":10,\"768\":3,\"770\":1,\"771\":1,\"772\":1,\"773\":11,\"777\":4,\"782\":5,\"783\":5,\"788\":14,\"789\":12,\"791\":4,\"792\":2,\"796\":3,\"823\":2,\"826\":2,\"831\":1,\"833\":3,\"844\":10,\"846\":1,\"850\":1,\"1443\":1,\"1446\":1,\"1479\":1,\"1555\":3}}],[\"bufpos\",{\"1\":{\"923\":1}}],[\"buf写入aof文件\",{\"1\":{\"917\":1}}],[\"buf写入aof文件中\",{\"1\":{\"916\":1}}],[\"buf缓冲区\",{\"1\":{\"916\":1}}],[\"buf4\",{\"1\":{\"834\":1}}],[\"buf3\",{\"1\":{\"834\":1}}],[\"buf2\",{\"1\":{\"833\":1,\"834\":1}}],[\"buf1\",{\"1\":{\"833\":1,\"834\":1}}],[\"buf\",{\"1\":{\"342\":1,\"731\":3,\"771\":2,\"772\":2,\"799\":4,\"826\":1,\"831\":5,\"842\":1,\"843\":1,\"846\":16,\"850\":6,\"873\":2,\"878\":1,\"917\":2,\"923\":1,\"927\":1}}],[\"buck\",{\"1\":{\"1867\":1,\"1868\":5}}],[\"bucket\",{\"1\":{\"127\":2,\"128\":2,\"1226\":1}}],[\"bucketing=true\",{\"1\":{\"119\":1,\"1228\":1}}],[\"buckets\",{\"1\":{\"113\":2,\"119\":2,\"1228\":1}}],[\"buczhizicai\",{\"1\":{\"53\":1}}],[\"buildheap\",{\"1\":{\"1652\":2}}],[\"buildsuggestionenv\",{\"1\":{\"1361\":1}}],[\"buildings\",{\"1\":{\"667\":1}}],[\"build\",{\"1\":{\"64\":1,\"67\":2,\"73\":2,\"90\":1,\"507\":1,\"518\":1,\"541\":7,\"1791\":2}}],[\"builder\",{\"1\":{\"40\":1,\"90\":1,\"528\":2}}],[\"brk\",{\"1\":{\"1445\":3}}],[\"branches\",{\"1\":{\"1791\":1}}],[\"branch1\",{\"1\":{\"1333\":1}}],[\"branch\",{\"1\":{\"1326\":3,\"1333\":7,\"1335\":1,\"1338\":4,\"1343\":2,\"1344\":1,\"1346\":3,\"1351\":1,\"1791\":1}}],[\"brand\",{\"1\":{\"51\":1}}],[\"brandagg\",{\"1\":{\"51\":1}}],[\"brian\",{\"0\":{\"1665\":1}}],[\"bridge\",{\"1\":{\"375\":1}}],[\"brithday\",{\"1\":{\"124\":1}}],[\"broker应用层不关心存储的数据\",{\"1\":{\"478\":1}}],[\"broker将每个partition的消息追加到日志中\",{\"1\":{\"476\":1}}],[\"broker工作流程\",{\"1\":{\"466\":1}}],[\"brokerid\",{\"1\":{\"465\":1}}],[\"brokers\",{\"1\":{\"465\":2,\"466\":1}}],[\"broker只会持久化一条\",{\"1\":{\"461\":1}}],[\"broker端都只会持久化一条\",{\"1\":{\"461\":1}}],[\"broker的配置项min\",{\"1\":{\"460\":1}}],[\"broker\",{\"0\":{\"463\":1},\"1\":{\"408\":1,\"412\":1,\"413\":1,\"417\":1,\"419\":1,\"420\":3,\"422\":4,\"427\":2,\"430\":1,\"431\":1,\"433\":5,\"443\":7,\"445\":3,\"446\":1,\"450\":3,\"461\":1,\"462\":1,\"465\":1,\"466\":3,\"470\":3,\"480\":3,\"483\":2,\"484\":1,\"490\":2,\"1626\":4,\"1628\":2,\"1629\":1}}],[\"brokenbarrierexception\",{\"1\":{\"161\":2}}],[\"broadcast\",{\"1\":{\"342\":1,\"1200\":1,\"1859\":1}}],[\"brooks\",{\"1\":{\"178\":1}}],[\"break\",{\"1\":{\"6\":2,\"8\":3,\"767\":1,\"989\":1,\"993\":1,\"1114\":1,\"1120\":1,\"1653\":1}}],[\"bcryptpasswordencoder\",{\"1\":{\"14\":5}}],[\"bisect\",{\"1\":{\"1347\":4}}],[\"bilingual\",{\"1\":{\"1246\":1}}],[\"bilibili\",{\"1\":{\"667\":1}}],[\"biasedlockingstartupdelay=0禁用延迟\",{\"1\":{\"1077\":1}}],[\"bizfunction\",{\"1\":{\"1040\":1}}],[\"bizexception\",{\"1\":{\"1040\":1}}],[\"bizcodeenum\",{\"1\":{\"14\":2,\"15\":1}}],[\"bicount\",{\"1\":{\"972\":1}}],[\"biconsumer<k\",{\"1\":{\"305\":1}}],[\"biconsumer<\",{\"1\":{\"163\":3}}],[\"bio\",{\"1\":{\"530\":4,\"760\":1,\"1171\":2,\"1504\":1}}],[\"birth\",{\"1\":{\"515\":1}}],[\"bigbuckbunny\",{\"1\":{\"1867\":1}}],[\"bigoplus\",{\"1\":{\"1662\":6}}],[\"bigtable\",{\"1\":{\"1214\":1}}],[\"big\",{\"1\":{\"828\":2,\"1218\":1,\"1867\":1,\"1868\":5}}],[\"bigdecimal只是手段\",{\"1\":{\"351\":1}}],[\"bigdecimal\",{\"0\":{\"351\":1}}],[\"bigint\",{\"1\":{\"112\":1,\"124\":3,\"129\":1,\"661\":1,\"1357\":1,\"1358\":1}}],[\"bifunction<\",{\"1\":{\"163\":3}}],[\"bin=mysql\",{\"1\":{\"1154\":1}}],[\"binlog的索引文件\",{\"1\":{\"643\":1}}],[\"binlog\",{\"1\":{\"550\":1,\"643\":7,\"648\":2,\"649\":2,\"675\":1,\"1154\":3,\"1556\":6,\"1563\":8}}],[\"bin\",{\"0\":{\"1556\":1},\"1\":{\"121\":3,\"643\":3,\"1154\":1,\"1155\":1,\"1217\":2,\"1222\":2,\"1225\":5,\"1226\":1,\"1553\":1,\"1556\":3}}],[\"binaryoperator\",{\"1\":{\"1068\":1}}],[\"binary\",{\"1\":{\"112\":1,\"129\":1,\"664\":1,\"998\":1,\"1129\":1}}],[\"bindingkey\",{\"1\":{\"414\":4,\"1628\":5}}],[\"binding\",{\"1\":{\"382\":1,\"413\":1,\"414\":1,\"418\":8,\"545\":1,\"1628\":1}}],[\"bind\",{\"0\":{\"866\":1},\"1\":{\"93\":1,\"383\":4,\"782\":1,\"783\":1,\"786\":1,\"791\":1,\"792\":2,\"797\":1,\"811\":1,\"818\":1,\"863\":4,\"866\":3,\"1150\":2,\"1461\":2}}],[\"bimap<integer\",{\"1\":{\"68\":1}}],[\"bimap<string\",{\"1\":{\"68\":1}}],[\"bimap\",{\"0\":{\"68\":1},\"1\":{\"68\":5,\"71\":1}}],[\"bitmap\",{\"1\":{\"1570\":1,\"1658\":1}}],[\"bitsmap\",{\"1\":{\"1487\":1}}],[\"bitset\",{\"1\":{\"1264\":1}}],[\"bits\",{\"1\":{\"1112\":7,\"1136\":1,\"1663\":1}}],[\"bitop\",{\"0\":{\"977\":1},\"1\":{\"977\":1}}],[\"bitop四个命令用于处理二进制位数组\",{\"1\":{\"972\":1}}],[\"bitcount\",{\"0\":{\"976\":1},\"1\":{\"976\":1,\"1666\":2}}],[\"bitarray\",{\"1\":{\"974\":1,\"975\":3}}],[\"bit\",{\"1\":{\"3\":1,\"664\":1,\"974\":1,\"975\":2,\"1435\":1,\"1658\":4}}],[\"byname\",{\"1\":{\"1595\":2}}],[\"bytype\",{\"1\":{\"1595\":2}}],[\"byte字节的第几个二进制位\",{\"1\":{\"974\":1,\"975\":1}}],[\"bytetomessagecodec\",{\"1\":{\"851\":1}}],[\"bytetomessagecodec<message>\",{\"1\":{\"849\":1,\"851\":1}}],[\"bytearrayinputstream\",{\"1\":{\"849\":1}}],[\"bytearrayoutputstream\",{\"1\":{\"849\":2}}],[\"bytebuf复制\",{\"1\":{\"832\":1}}],[\"bytebuf切片\",{\"1\":{\"831\":1}}],[\"bytebuf结构\",{\"1\":{\"827\":1}}],[\"bytebufallocator\",{\"1\":{\"823\":2,\"826\":3,\"831\":1,\"833\":1,\"844\":1,\"850\":1}}],[\"bytebuffer>\",{\"1\":{\"796\":1,\"797\":2}}],[\"bytebuffer\",{\"0\":{\"766\":1},\"1\":{\"761\":1,\"767\":2,\"768\":8,\"770\":8,\"771\":4,\"772\":7,\"773\":2,\"774\":8,\"777\":2,\"782\":3,\"783\":3,\"788\":22,\"789\":7,\"791\":2,\"792\":8,\"796\":4,\"797\":10,\"800\":3,\"809\":1,\"828\":3,\"1136\":1}}],[\"bytebuffermessageset\",{\"1\":{\"476\":1}}],[\"bytebuf\",{\"0\":{\"824\":1},\"1\":{\"95\":1,\"96\":1,\"788\":1,\"809\":1,\"814\":2,\"823\":1,\"824\":1,\"825\":5,\"826\":7,\"827\":8,\"828\":4,\"829\":17,\"830\":1,\"831\":5,\"832\":4,\"833\":4,\"834\":5,\"839\":2,\"844\":2,\"846\":1,\"849\":2,\"850\":3,\"873\":7}}],[\"bytes=1073741824\",{\"1\":{\"445\":1}}],[\"bytes=104857600\",{\"1\":{\"445\":1}}],[\"bytes=102400\",{\"1\":{\"445\":2}}],[\"bytesmessage\",{\"1\":{\"403\":1,\"1625\":1}}],[\"bytesterams\",{\"1\":{\"82\":1}}],[\"bytes\",{\"1\":{\"80\":1,\"215\":1,\"467\":2,\"485\":2,\"839\":8,\"842\":7,\"844\":3,\"846\":3,\"849\":6,\"1136\":6,\"1181\":4,\"1192\":2}}],[\"byte\",{\"1\":{\"6\":2,\"36\":1,\"80\":2,\"287\":3,\"315\":1,\"317\":1,\"342\":1,\"404\":1,\"418\":1,\"453\":2,\"767\":1,\"771\":1,\"772\":1,\"773\":1,\"799\":3,\"828\":3,\"831\":1,\"834\":2,\"842\":6,\"844\":1,\"846\":1,\"849\":7,\"974\":1,\"975\":2,\"1136\":3,\"1139\":1,\"1181\":2,\"1192\":1,\"1625\":1,\"1712\":2}}],[\"by的字段存在索引\",{\"1\":{\"616\":1}}],[\"by\",{\"0\":{\"616\":1,\"617\":1},\"1\":{\"3\":2,\"73\":1,\"105\":1,\"113\":11,\"118\":2,\"119\":4,\"120\":1,\"121\":1,\"124\":7,\"126\":2,\"128\":1,\"515\":1,\"581\":2,\"585\":5,\"586\":2,\"588\":2,\"590\":5,\"614\":2,\"618\":3,\"624\":1,\"708\":2,\"941\":1,\"942\":2,\"969\":1,\"971\":1,\"1148\":1,\"1151\":1,\"1154\":1,\"1226\":6,\"1227\":7,\"1228\":5,\"1567\":8}}],[\"bestvideo+bestaudio\",{\"1\":{\"1877\":1}}],[\"bento4\",{\"1\":{\"1867\":1}}],[\"beyond\",{\"1\":{\"1841\":1}}],[\"beeline\",{\"1\":{\"1224\":1}}],[\"because\",{\"1\":{\"1008\":1,\"1615\":4}}],[\"better\",{\"1\":{\"565\":1}}],[\"between\",{\"1\":{\"471\":1,\"583\":3,\"698\":1}}],[\"beta状态\",{\"1\":{\"70\":2}}],[\"begin\",{\"1\":{\"628\":1,\"631\":2,\"634\":1,\"635\":1,\"636\":1,\"734\":1,\"1033\":1}}],[\"begintransaction\",{\"1\":{\"461\":1}}],[\"beginning\",{\"1\":{\"446\":1,\"493\":1}}],[\"before=\",{\"1\":{\"1322\":1}}],[\"beforeexecute\",{\"1\":{\"1115\":1}}],[\"beforeeach\",{\"1\":{\"356\":1}}],[\"beforecompletion\",{\"1\":{\"1045\":1}}],[\"beforecommit\",{\"1\":{\"1045\":1}}],[\"beforeclass\",{\"1\":{\"356\":1}}],[\"beforeall\",{\"1\":{\"356\":1}}],[\"before\",{\"1\":{\"143\":10,\"356\":1,\"636\":1,\"643\":1,\"1016\":1,\"1602\":2,\"1709\":1}}],[\"beats\",{\"1\":{\"31\":2}}],[\"bean域\",{\"1\":{\"1025\":1}}],[\"beanpostprocessor\",{\"1\":{\"1012\":1,\"1026\":1,\"1058\":1,\"1060\":1,\"1379\":1,\"1597\":1}}],[\"beansexception\",{\"1\":{\"1009\":3}}],[\"beanname\",{\"1\":{\"1006\":2,\"1009\":2,\"1028\":6,\"1378\":3,\"1382\":6}}],[\"beandefinitionregistry\",{\"1\":{\"1024\":1}}],[\"beandefinitionreader\",{\"1\":{\"1008\":2}}],[\"beandefinition\",{\"1\":{\"1006\":4,\"1008\":2,\"1009\":6,\"1011\":1,\"1012\":5,\"1059\":1,\"1378\":1,\"1379\":2,\"1594\":1,\"1648\":1}}],[\"beanfactory是需要手动注册bean的\",{\"1\":{\"1379\":1}}],[\"beanfactorytransactionattributesourceadvisor\",{\"1\":{\"1059\":3}}],[\"beanfactorypostprocessor\",{\"1\":{\"1012\":2,\"1379\":1,\"1597\":1}}],[\"beanfactory\",{\"0\":{\"1006\":1,\"1378\":1},\"1\":{\"1006\":3,\"1010\":1,\"1011\":1,\"1012\":2,\"1378\":1,\"1379\":2,\"1599\":1}}],[\"bean\",{\"0\":{\"1381\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1},\"1\":{\"24\":2,\"40\":1,\"91\":2,\"99\":1,\"417\":2,\"520\":1,\"1006\":4,\"1009\":1,\"1011\":1,\"1012\":9,\"1023\":3,\"1026\":2,\"1028\":6,\"1054\":4,\"1058\":3,\"1059\":5,\"1060\":2,\"1061\":1,\"1180\":2,\"1264\":1,\"1378\":2,\"1379\":2,\"1380\":2,\"1382\":5,\"1594\":3,\"1597\":4,\"1598\":5,\"1599\":4,\"1608\":2,\"1614\":6,\"1716\":2}}],[\"be\",{\"1\":{\"3\":2,\"1002\":1,\"1008\":1,\"1049\":1,\"1088\":1}}],[\"wy\",{\"1\":{\"1846\":1}}],[\"wy一起逛了当地的神力时代广场\",{\"1\":{\"1842\":1}}],[\"wy还夸我唱歌好听来着\",{\"1\":{\"1841\":1}}],[\"wj\",{\"1\":{\"1842\":1}}],[\"wget\",{\"1\":{\"1698\":2}}],[\"ws\",{\"1\":{\"1567\":1}}],[\"wsl2\",{\"0\":{\"1149\":1}}],[\"wsl\",{\"0\":{\"1147\":1},\"1\":{\"1147\":1,\"1152\":2,\"1153\":1,\"1155\":2}}],[\"wdatamutex\",{\"1\":{\"1467\":1}}],[\"wmutex\",{\"1\":{\"1467\":1}}],[\"wzh2010\",{\"1\":{\"1304\":1}}],[\"wt\",{\"1\":{\"1115\":4}}],[\"wcountmutext\",{\"1\":{\"1467\":1}}],[\"wcount\",{\"1\":{\"1467\":1}}],[\"wc\",{\"0\":{\"1685\":1},\"1\":{\"1112\":2,\"1115\":4,\"1631\":1,\"1685\":1}}],[\"wch853\",{\"1\":{\"546\":1}}],[\"wll\",{\"1\":{\"622\":1}}],[\"wrk\",{\"1\":{\"1631\":1}}],[\"wrappedbuffer\",{\"1\":{\"834\":2}}],[\"wrapperzk\",{\"1\":{\"1180\":8}}],[\"wrapper\",{\"1\":{\"544\":1}}],[\"wrap\",{\"1\":{\"774\":2}}],[\"writable\",{\"1\":{\"919\":1}}],[\"writable事件\",{\"1\":{\"919\":1}}],[\"writedouble\",{\"1\":{\"828\":1}}],[\"writefloat\",{\"1\":{\"828\":1}}],[\"writecharsequence\",{\"1\":{\"828\":1}}],[\"writechar\",{\"1\":{\"828\":1}}],[\"writeclass\",{\"1\":{\"264\":1}}],[\"writelong\",{\"1\":{\"828\":1}}],[\"writelock\",{\"1\":{\"157\":2,\"158\":1,\"1188\":1}}],[\"writeintle\",{\"1\":{\"828\":1}}],[\"writeint\",{\"1\":{\"828\":1,\"844\":1,\"849\":2}}],[\"writeinbound\",{\"1\":{\"823\":1,\"844\":1,\"850\":3}}],[\"writeshort\",{\"1\":{\"828\":1}}],[\"writebyte\",{\"1\":{\"828\":1,\"844\":2,\"849\":4}}],[\"writebytes\",{\"1\":{\"823\":2,\"828\":3,\"831\":1,\"842\":1,\"843\":1,\"844\":1,\"846\":15,\"849\":2}}],[\"writeboolean\",{\"1\":{\"828\":1}}],[\"writeoutbound\",{\"1\":{\"823\":1,\"850\":1}}],[\"writeobject\",{\"1\":{\"321\":1,\"849\":1}}],[\"writeandflush\",{\"1\":{\"812\":1,\"819\":1,\"820\":1,\"846\":2}}],[\"writehandler\",{\"1\":{\"797\":3}}],[\"write记录已经刷新到磁盘的位置末尾\",{\"1\":{\"739\":1}}],[\"writer|reader\",{\"1\":{\"828\":2}}],[\"writerindex\",{\"1\":{\"827\":4}}],[\"writer\",{\"1\":{\"318\":1,\"319\":1,\"827\":1,\"1502\":1}}],[\"write\",{\"0\":{\"789\":1},\"1\":{\"317\":1,\"318\":1,\"552\":1,\"640\":1,\"734\":1,\"771\":1,\"772\":2,\"777\":2,\"785\":2,\"787\":1,\"789\":7,\"797\":2,\"799\":2,\"819\":1,\"823\":8,\"828\":1,\"831\":1,\"850\":1,\"873\":1,\"937\":1,\"1168\":1,\"1185\":1,\"1350\":1,\"1435\":2,\"1461\":1,\"1468\":1,\"1475\":1,\"1478\":1,\"1486\":3,\"1555\":1,\"1556\":2,\"1560\":1}}],[\"written\",{\"1\":{\"3\":1}}],[\"w3\",{\"1\":{\"357\":1}}],[\"width\",{\"1\":{\"1854\":1,\"1856\":1,\"1870\":1}}],[\"wire\",{\"1\":{\"1409\":2}}],[\"wireshark\",{\"1\":{\"1396\":1}}],[\"window\",{\"1\":{\"990\":2,\"1858\":1}}],[\"windows平台搭建dash系统\",{\"0\":{\"1865\":1}}],[\"windows下默认root用户是无法连接wsl下的mysql\",{\"1\":{\"1151\":1}}],[\"windows\",{\"0\":{\"1147\":1,\"1149\":1},\"1\":{\"569\":1,\"795\":1,\"1147\":1,\"1152\":1,\"1153\":1,\"1154\":1,\"1155\":1,\"1311\":2,\"1347\":2,\"1441\":1,\"1696\":1,\"1828\":1,\"1867\":1,\"1873\":1}}],[\"will\",{\"1\":{\"407\":1,\"1002\":1,\"1049\":1}}],[\"wildcard\",{\"1\":{\"263\":1}}],[\"withmockuser\",{\"1\":{\"1608\":1}}],[\"withmode\",{\"1\":{\"1181\":1}}],[\"withdefaults\",{\"1\":{\"1049\":1}}],[\"withkeyvalueseparator\",{\"1\":{\"79\":1}}],[\"with\",{\"1\":{\"73\":1,\"317\":1,\"318\":1,\"346\":1,\"514\":1,\"550\":1,\"590\":1,\"622\":3,\"623\":1,\"734\":1,\"791\":1,\"1049\":2,\"1154\":1,\"1533\":1,\"1559\":1,\"1791\":4}}],[\"w\",{\"1\":{\"157\":1,\"1114\":5,\"1115\":8,\"1119\":2,\"1168\":1,\"1174\":4,\"1191\":3,\"1350\":2,\"1655\":1,\"1685\":1,\"1735\":1}}],[\"world\",{\"0\":{\"810\":1},\"1\":{\"593\":3,\"771\":1,\"812\":1,\"820\":1,\"823\":1,\"844\":1,\"846\":1,\"1368\":1,\"1711\":2}}],[\"world2099\",{\"1\":{\"565\":1}}],[\"workflows\",{\"1\":{\"1791\":2}}],[\"working\",{\"1\":{\"1344\":1}}],[\"workcount=0\",{\"1\":{\"1112\":1}}],[\"worker被中断\",{\"1\":{\"1115\":1}}],[\"workeradded\",{\"1\":{\"1114\":3}}],[\"workercountof\",{\"1\":{\"1112\":1,\"1113\":2,\"1114\":1,\"1115\":1,\"1116\":1,\"1120\":1}}],[\"workercount\",{\"1\":{\"1112\":3,\"1114\":1,\"1116\":2}}],[\"worker线程池\",{\"1\":{\"813\":1}}],[\"worker线程运行\",{\"1\":{\"791\":1}}],[\"workerstarted\",{\"1\":{\"1114\":4}}],[\"workers\",{\"1\":{\"791\":5,\"817\":3,\"1114\":4,\"1115\":1,\"1116\":1,\"1217\":1}}],[\"worker\",{\"1\":{\"791\":9,\"811\":1,\"818\":1,\"1113\":3,\"1114\":11,\"1115\":15,\"1116\":1,\"1120\":1,\"1629\":1}}],[\"workergroup\",{\"1\":{\"93\":4}}],[\"workbench\",{\"1\":{\"666\":2}}],[\"workaddress\",{\"1\":{\"584\":1,\"585\":4}}],[\"workqueue\",{\"1\":{\"332\":1,\"1106\":1,\"1113\":1,\"1114\":1,\"1115\":5,\"1116\":1,\"1120\":4,\"1511\":1}}],[\"work\",{\"1\":{\"129\":3,\"1227\":1,\"1628\":1}}],[\"wordaddress\",{\"1\":{\"596\":1}}],[\"word\",{\"1\":{\"34\":1,\"215\":1,\"1074\":3,\"1075\":1,\"1076\":3,\"1077\":5,\"1435\":1,\"1521\":2}}],[\"where子句如果\",{\"1\":{\"725\":1}}],[\"where子句\",{\"1\":{\"713\":1}}],[\"where不能对聚合函数进行判断\",{\"1\":{\"585\":1}}],[\"where是分组之前进行过滤\",{\"1\":{\"585\":1}}],[\"where>\",{\"1\":{\"537\":1,\"538\":1}}],[\"where\",{\"1\":{\"124\":3,\"125\":4,\"126\":4,\"128\":1,\"129\":1,\"506\":1,\"515\":2,\"530\":4,\"532\":1,\"535\":1,\"536\":1,\"537\":5,\"579\":2,\"580\":2,\"581\":1,\"583\":12,\"584\":1,\"585\":5,\"588\":1,\"602\":1,\"603\":2,\"605\":1,\"607\":1,\"608\":4,\"609\":6,\"610\":3,\"611\":3,\"618\":2,\"620\":2,\"622\":3,\"623\":3,\"628\":1,\"634\":1,\"703\":5,\"705\":3,\"706\":1,\"708\":1,\"727\":1,\"734\":3,\"1226\":1,\"1567\":2}}],[\"when>\",{\"1\":{\"536\":2}}],[\"whencompleteasync\",{\"1\":{\"163\":2}}],[\"whencomplete\",{\"1\":{\"163\":1}}],[\"when\",{\"1\":{\"93\":1,\"536\":1,\"596\":5,\"632\":6,\"920\":1,\"1567\":2,\"1711\":5,\"1712\":3,\"1713\":2,\"1714\":1,\"1715\":1}}],[\"whitespace\",{\"1\":{\"79\":1}}],[\"while循环\",{\"1\":{\"1468\":1}}],[\"while\",{\"1\":{\"8\":3,\"188\":2,\"196\":1,\"383\":1,\"450\":1,\"488\":1,\"633\":3,\"634\":2,\"767\":2,\"777\":1,\"782\":1,\"783\":1,\"786\":2,\"791\":4,\"873\":2,\"989\":3,\"990\":2,\"991\":2,\"993\":1,\"995\":1,\"998\":3,\"1001\":1,\"1091\":2,\"1115\":1,\"1120\":1,\"1653\":3,\"1654\":3,\"1657\":1,\"1664\":1,\"1665\":1,\"1666\":1}}],[\"why\",{\"1\":{\"62\":1}}],[\"week\",{\"0\":{\"1786\":1}}],[\"weekofyear\",{\"1\":{\"129\":1}}],[\"weakclasskey\",{\"1\":{\"1097\":1}}],[\"weakreference\",{\"1\":{\"193\":2}}],[\"weakreference<class<\",{\"1\":{\"1097\":2}}],[\"weakreference<t>\",{\"1\":{\"193\":1}}],[\"weakreference<threadlocal<\",{\"1\":{\"154\":1}}],[\"weakreference<>\",{\"1\":{\"183\":1}}],[\"weakreference<object>\",{\"1\":{\"183\":1}}],[\"weakref\",{\"1\":{\"183\":3}}],[\"weak\",{\"1\":{\"183\":3,\"533\":1,\"1137\":1}}],[\"weakvalues\",{\"1\":{\"74\":1}}],[\"weakkeys\",{\"1\":{\"74\":1}}],[\"weigher\",{\"1\":{\"74\":2}}],[\"weixin\",{\"1\":{\"10\":1,\"1156\":1}}],[\"we\",{\"1\":{\"62\":1}}],[\"webm\",{\"1\":{\"1858\":1}}],[\"webmvctest等\",{\"1\":{\"1716\":1}}],[\"webkit\",{\"1\":{\"1855\":5}}],[\"webrtc\",{\"0\":{\"1852\":1},\"1\":{\"1862\":1},\"2\":{\"1864\":1}}],[\"webp\",{\"1\":{\"1400\":1}}],[\"webpack\",{\"1\":{\"1400\":1}}],[\"websocket实现客户端和服务器之间的双向通信\",{\"1\":{\"1859\":1}}],[\"websocket\",{\"1\":{\"1596\":2}}],[\"websphereuowtransactionmanager\",{\"1\":{\"1059\":1}}],[\"websphereuowtransactionmanager事务管理流程\",{\"1\":{\"1055\":1}}],[\"webservice工具\",{\"1\":{\"228\":1}}],[\"web管理界面\",{\"1\":{\"435\":4}}],[\"web\",{\"1\":{\"17\":1,\"19\":1,\"26\":1,\"228\":1,\"447\":1,\"526\":1,\"657\":2,\"667\":1,\"1218\":1,\"1222\":1,\"1596\":5}}],[\"www\",{\"1\":{\"10\":2,\"53\":1,\"357\":1,\"392\":1,\"565\":1,\"666\":4,\"667\":1,\"1083\":1,\"1121\":2,\"1156\":1,\"1304\":1,\"1792\":2,\"1793\":1,\"1877\":4}}],[\"wahhab\",{\"1\":{\"1767\":1}}],[\"wanted\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"watchable接口\",{\"1\":{\"1503\":1}}],[\"watch数\",{\"1\":{\"1194\":1}}],[\"watcher\",{\"1\":{\"1190\":1}}],[\"watched\",{\"1\":{\"960\":1}}],[\"watch命令是一个乐观锁\",{\"1\":{\"960\":1}}],[\"watch命令监视某个键时\",{\"1\":{\"907\":1}}],[\"watch\",{\"0\":{\"960\":1,\"1189\":1},\"1\":{\"959\":1,\"1171\":1,\"1189\":3,\"1437\":1,\"1877\":4}}],[\"watch等命令实现事务\",{\"1\":{\"958\":1}}],[\"watermark\",{\"1\":{\"471\":1}}],[\"walkfiletree\",{\"1\":{\"779\":2}}],[\"walk\",{\"1\":{\"779\":2}}],[\"war\",{\"1\":{\"1632\":1}}],[\"warehouse内\",{\"1\":{\"1225\":1}}],[\"warehouse\",{\"1\":{\"107\":1,\"118\":6,\"1228\":2}}],[\"warnings\",{\"1\":{\"729\":1}}],[\"warn\",{\"1\":{\"14\":1,\"355\":1,\"384\":2,\"387\":1,\"390\":1,\"1049\":1}}],[\"wakenup\",{\"1\":{\"872\":2}}],[\"wakeup\",{\"1\":{\"785\":1,\"791\":1,\"872\":1}}],[\"wake\",{\"1\":{\"8\":1}}],[\"waitstatus\",{\"1\":{\"1516\":1}}],[\"waitset\",{\"1\":{\"139\":7}}],[\"waitpid\",{\"1\":{\"1487\":1}}],[\"wait2\",{\"1\":{\"1415\":1}}],[\"waitforreferencependinglist\",{\"1\":{\"188\":1}}],[\"waitforreferenceprocessing\",{\"1\":{\"188\":2}}],[\"waiter\",{\"1\":{\"3\":1,\"6\":2,\"7\":1,\"8\":1}}],[\"wait\",{\"0\":{\"139\":1},\"1\":{\"3\":1,\"134\":1,\"137\":1,\"139\":5,\"331\":1,\"365\":3,\"485\":1,\"872\":1,\"1077\":1,\"1091\":3,\"1092\":1,\"1410\":7,\"1487\":6,\"1512\":3}}],[\"waitingget\",{\"1\":{\"1369\":1}}],[\"waiting\",{\"1\":{\"3\":1,\"6\":1,\"7\":1,\"139\":2,\"336\":2,\"564\":1,\"782\":1,\"1089\":2,\"1095\":1,\"1509\":2}}],[\"264\",{\"1\":{\"1868\":2}}],[\"26不确定\",{\"1\":{\"688\":1}}],[\"2d\",{\"1\":{\"1856\":1}}],[\"2月\",{\"1\":{\"1815\":1}}],[\"2x11速\",{\"1\":{\"1796\":1}}],[\"2x12速\",{\"1\":{\"1796\":2}}],[\"2x10速\",{\"1\":{\"1796\":1}}],[\"2xx\",{\"1\":{\"1398\":1}}],[\"28c\",{\"1\":{\"1796\":2}}],[\"2亿+\",{\"1\":{\"1752\":2}}],[\"2通过压缩做了很多改进\",{\"1\":{\"1623\":1}}],[\"2n\",{\"1\":{\"1511\":1}}],[\"2次系统调用\",{\"1\":{\"1486\":1}}],[\"2h\",{\"1\":{\"1420\":1}}],[\"2msl\",{\"1\":{\"1410\":2}}],[\"2pc\",{\"0\":{\"1283\":1},\"1\":{\"1283\":2,\"1284\":1,\"1370\":1}}],[\"2>\",{\"1\":{\"1225\":2}}],[\"2给3和4\",{\"1\":{\"1220\":1}}],[\"2=127\",{\"1\":{\"1196\":1}}],[\"2^\",{\"1\":{\"892\":2,\"1438\":1}}],[\"2^6\",{\"1\":{\"892\":1}}],[\"2^n$\",{\"1\":{\"883\":2}}],[\"2^n\",{\"1\":{\"6\":1,\"1656\":1}}],[\"2个小时就到了\",{\"1\":{\"1846\":1}}],[\"2个rtt\",{\"1\":{\"1402\":1}}],[\"2个宇节\",{\"1\":{\"661\":1}}],[\"2个字节的有符号整数\",{\"1\":{\"112\":1}}],[\"223\",{\"1\":{\"1792\":1}}],[\"2200\",{\"1\":{\"1367\":1}}],[\"22之前\",{\"1\":{\"649\":2}}],[\"22之后\",{\"1\":{\"649\":2}}],[\"224\",{\"1\":{\"342\":1}}],[\"23年肌肉量确实长了不少\",{\"1\":{\"1818\":1}}],[\"23年因为要找工作\",{\"1\":{\"1817\":1}}],[\"2350984\",{\"1\":{\"1304\":1}}],[\"23\",{\"1\":{\"665\":1}}],[\"23之前\",{\"1\":{\"649\":1}}],[\"239\",{\"1\":{\"342\":1}}],[\"2的check\",{\"1\":{\"623\":1}}],[\"2的位置开始探测式清理\",{\"1\":{\"154\":1,\"1514\":1}}],[\"2<\",{\"1\":{\"505\":1}}],[\"2为snappy\",{\"1\":{\"474\":1}}],[\"279\",{\"1\":{\"471\":1}}],[\"2184\",{\"1\":{\"1199\":1}}],[\"2183\",{\"1\":{\"1199\":1}}],[\"2182\",{\"1\":{\"1199\":1}}],[\"2181\",{\"1\":{\"1180\":1,\"1199\":1}}],[\"2155\",{\"1\":{\"665\":1}}],[\"2147483648\",{\"1\":{\"661\":1}}],[\"2147483647\",{\"1\":{\"460\":1,\"661\":1}}],[\"21\",{\"1\":{\"340\":1,\"382\":2,\"383\":1,\"465\":1}}],[\"2byte\",{\"1\":{\"240\":1}}],[\"25c\",{\"1\":{\"1796\":2}}],[\"25岁及以上\",{\"1\":{\"1567\":1}}],[\"25岁以下\",{\"1\":{\"1567\":1}}],[\"253字节的数组\",{\"1\":{\"893\":1}}],[\"25\",{\"1\":{\"583\":2,\"1567\":2}}],[\"2500\",{\"1\":{\"1367\":1}}],[\"25000\",{\"1\":{\"1367\":1}}],[\"250\",{\"1\":{\"419\":1}}],[\"255\",{\"1\":{\"342\":7,\"1426\":4}}],[\"2560x1440\",{\"1\":{\"1878\":1}}],[\"256x144\",{\"1\":{\"1868\":2,\"1869\":1}}],[\"256×144\",{\"1\":{\"1868\":1}}],[\"256mb\",{\"1\":{\"1219\":1}}],[\"256\",{\"1\":{\"130\":1,\"530\":1,\"839\":3,\"1599\":1}}],[\"2511\",{\"1\":{\"10\":1}}],[\"29bits\",{\"1\":{\"1112\":1}}],[\"29\",{\"1\":{\"112\":1,\"1112\":2,\"1155\":1}}],[\"24200\",{\"1\":{\"1828\":1}}],[\"24年计划学一学摄影\",{\"1\":{\"1819\":1}}],[\"24年争取多看一本\",{\"1\":{\"1817\":1}}],[\"24岁的我\",{\"1\":{\"1786\":1}}],[\"24\",{\"1\":{\"83\":2,\"1793\":1,\"1828\":1}}],[\"2088万\",{\"1\":{\"1799\":1}}],[\"20~19\",{\"1\":{\"1436\":1}}],[\"20个时钟周期\",{\"1\":{\"1434\":1}}],[\"20个类别的\",{\"1\":{\"1234\":1}}],[\"204\",{\"1\":{\"1398\":1,\"1871\":1}}],[\"2048bytes\",{\"1\":{\"739\":1}}],[\"20536\",{\"1\":{\"1367\":2,\"1529\":2}}],[\"2038\",{\"1\":{\"665\":1}}],[\"20的\",{\"1\":{\"623\":1}}],[\"2023年一共去了5个城市\",{\"1\":{\"1816\":1}}],[\"2023\",{\"0\":{\"1814\":1}}],[\"2023的上半年对我太不友好了\",{\"1\":{\"1771\":1}}],[\"2025\",{\"1\":{\"1811\":1,\"1826\":1}}],[\"2024年一共去了19个城市\",{\"1\":{\"1825\":1}}],[\"2024年的6月\",{\"1\":{\"1816\":1}}],[\"2024继续争取一周一部电影吧\",{\"1\":{\"1817\":1}}],[\"2024\",{\"0\":{\"1823\":1},\"1\":{\"1811\":3,\"1826\":1}}],[\"2021\",{\"1\":{\"565\":1,\"1304\":1,\"1791\":1}}],[\"2022\",{\"1\":{\"129\":3,\"595\":2,\"1793\":1}}],[\"2020\",{\"1\":{\"129\":9,\"1729\":1}}],[\"2018\",{\"1\":{\"1304\":1}}],[\"2017\",{\"1\":{\"1304\":1}}],[\"2013\",{\"1\":{\"807\":1}}],[\"2015\",{\"1\":{\"376\":1,\"807\":1}}],[\"2019年10月\",{\"1\":{\"1799\":1}}],[\"2019年6月不再维护\",{\"1\":{\"38\":1}}],[\"2019\",{\"1\":{\"129\":1,\"1144\":1}}],[\"201911后\",{\"1\":{\"118\":1}}],[\"201910\",{\"1\":{\"118\":1}}],[\"2016\",{\"1\":{\"112\":1}}],[\"20l\",{\"1\":{\"83\":1}}],[\"20\",{\"1\":{\"70\":9,\"530\":3,\"576\":1,\"583\":3,\"623\":1,\"839\":2,\"1077\":1,\"1304\":1,\"1357\":1,\"1358\":1,\"1369\":1,\"1434\":1,\"1711\":4}}],[\"2003\",{\"1\":{\"1196\":1}}],[\"2002\",{\"1\":{\"1196\":1}}],[\"2002年\",{\"1\":{\"376\":1}}],[\"200ms\",{\"1\":{\"839\":1}}],[\"2008\",{\"1\":{\"807\":1,\"1214\":1,\"1322\":3}}],[\"2004\",{\"1\":{\"807\":2,\"1196\":1}}],[\"2006\",{\"1\":{\"611\":1}}],[\"2006年\",{\"1\":{\"376\":1}}],[\"2001\",{\"1\":{\"357\":1,\"1196\":1,\"1792\":1}}],[\"2000010的记录\",{\"1\":{\"618\":1}}],[\"2000000\",{\"1\":{\"618\":1}}],[\"2000\",{\"1\":{\"122\":1,\"817\":2,\"850\":1,\"1869\":5}}],[\"200\",{\"1\":{\"15\":2,\"68\":1,\"1369\":1,\"1398\":1,\"1434\":1,\"1714\":4,\"1715\":4}}],[\"2\",{\"0\":{\"20\":1,\"296\":1,\"328\":1,\"1854\":1,\"1867\":1},\"1\":{\"3\":1,\"10\":1,\"42\":2,\"43\":1,\"44\":1,\"47\":1,\"48\":1,\"51\":1,\"58\":1,\"66\":1,\"67\":5,\"69\":1,\"73\":1,\"77\":1,\"93\":1,\"95\":1,\"112\":2,\"122\":2,\"124\":3,\"130\":1,\"196\":1,\"240\":1,\"268\":1,\"287\":1,\"382\":3,\"383\":1,\"385\":2,\"445\":1,\"456\":2,\"461\":1,\"465\":2,\"488\":1,\"495\":1,\"506\":1,\"507\":1,\"594\":2,\"623\":4,\"638\":1,\"663\":1,\"689\":1,\"703\":1,\"729\":1,\"739\":1,\"771\":1,\"772\":1,\"773\":1,\"774\":2,\"782\":1,\"783\":1,\"786\":1,\"788\":1,\"795\":1,\"801\":1,\"802\":2,\"807\":1,\"811\":1,\"817\":1,\"818\":2,\"821\":1,\"822\":3,\"823\":1,\"834\":1,\"843\":1,\"849\":1,\"863\":2,\"873\":1,\"883\":1,\"892\":1,\"913\":1,\"948\":1,\"993\":2,\"995\":1,\"998\":3,\"999\":1,\"1049\":2,\"1050\":1,\"1057\":1,\"1067\":5,\"1068\":1,\"1074\":2,\"1092\":1,\"1106\":1,\"1112\":1,\"1113\":1,\"1114\":7,\"1148\":1,\"1156\":1,\"1197\":1,\"1222\":1,\"1226\":1,\"1263\":1,\"1280\":1,\"1283\":2,\"1322\":3,\"1341\":1,\"1369\":1,\"1404\":2,\"1406\":2,\"1409\":1,\"1410\":1,\"1413\":2,\"1434\":1,\"1438\":2,\"1487\":1,\"1555\":1,\"1567\":2,\"1619\":1,\"1631\":1,\"1645\":1,\"1652\":4,\"1657\":2,\"1666\":1,\"1675\":4,\"1688\":1,\"1711\":3,\"1714\":2,\"1715\":2,\"1860\":1,\"1862\":1,\"1873\":1,\"1878\":2}}],[\"=name\",{\"1\":{\"675\":3}}],[\"=bar\",{\"1\":{\"70\":1}}],[\"=foo\",{\"1\":{\"70\":2}}],[\"=>\",{\"1\":{\"70\":11,\"418\":2,\"508\":2,\"809\":2,\"1113\":4}}],[\"=======\",{\"1\":{\"1336\":1}}],[\"===>routingkey\",{\"1\":{\"421\":1}}],[\"===>exchange\",{\"1\":{\"421\":1}}],[\"==>replytext\",{\"1\":{\"421\":1}}],[\"==>replycode\",{\"1\":{\"421\":1}}],[\"==\",{\"1\":{\"6\":8,\"8\":2,\"9\":7,\"15\":3,\"153\":1,\"184\":5,\"187\":1,\"189\":1,\"195\":3,\"196\":3,\"290\":1,\"301\":3,\"362\":1,\"456\":1,\"541\":6,\"542\":3,\"754\":1,\"767\":1,\"788\":3,\"797\":1,\"867\":1,\"871\":1,\"873\":1,\"991\":5,\"993\":1,\"994\":1,\"995\":2,\"996\":2,\"998\":6,\"1000\":1,\"1002\":1,\"1008\":1,\"1009\":1,\"1015\":1,\"1016\":1,\"1028\":2,\"1049\":5,\"1059\":1,\"1088\":4,\"1091\":1,\"1095\":1,\"1113\":4,\"1114\":1,\"1135\":2,\"1263\":1,\"1368\":1,\"1382\":2,\"1497\":1,\"1557\":1,\"1645\":3,\"1651\":2,\"1663\":2,\"1671\":1,\"1672\":1,\"1673\":1,\"1674\":2,\"1675\":4,\"1676\":1,\"1677\":2}}],[\"=\",{\"1\":{\"3\":3,\"6\":29,\"7\":5,\"8\":19,\"9\":6,\"14\":12,\"15\":17,\"24\":1,\"42\":1,\"43\":2,\"44\":1,\"47\":1,\"48\":3,\"51\":9,\"58\":8,\"61\":1,\"64\":4,\"66\":1,\"67\":4,\"68\":2,\"69\":5,\"70\":2,\"73\":2,\"77\":7,\"78\":2,\"79\":5,\"83\":6,\"84\":3,\"90\":5,\"92\":1,\"93\":7,\"98\":3,\"117\":2,\"124\":3,\"126\":4,\"153\":5,\"154\":8,\"156\":3,\"157\":4,\"158\":4,\"159\":1,\"160\":1,\"161\":1,\"175\":1,\"183\":7,\"184\":15,\"187\":4,\"188\":13,\"191\":1,\"192\":6,\"195\":18,\"196\":25,\"263\":1,\"290\":2,\"295\":1,\"296\":4,\"301\":7,\"317\":1,\"318\":1,\"355\":2,\"362\":3,\"363\":3,\"364\":1,\"366\":3,\"383\":11,\"384\":1,\"391\":1,\"417\":1,\"418\":5,\"450\":6,\"456\":4,\"460\":6,\"461\":5,\"469\":1,\"476\":10,\"483\":1,\"488\":5,\"489\":1,\"506\":1,\"507\":9,\"515\":6,\"518\":1,\"523\":5,\"530\":8,\"532\":1,\"535\":4,\"536\":5,\"537\":3,\"541\":18,\"542\":11,\"543\":2,\"544\":7,\"579\":5,\"580\":1,\"583\":7,\"584\":1,\"587\":1,\"602\":1,\"603\":2,\"604\":2,\"605\":2,\"608\":5,\"609\":4,\"610\":4,\"611\":3,\"612\":1,\"614\":1,\"618\":1,\"619\":2,\"620\":4,\"628\":1,\"631\":5,\"639\":1,\"663\":1,\"671\":2,\"698\":1,\"703\":2,\"718\":1,\"734\":6,\"767\":4,\"770\":2,\"771\":4,\"772\":5,\"773\":1,\"774\":6,\"777\":5,\"778\":5,\"782\":5,\"783\":6,\"785\":5,\"786\":6,\"787\":2,\"788\":13,\"789\":10,\"791\":20,\"792\":5,\"796\":2,\"797\":5,\"799\":4,\"811\":1,\"817\":1,\"818\":3,\"820\":1,\"821\":1,\"822\":7,\"823\":5,\"826\":4,\"831\":2,\"833\":1,\"834\":2,\"839\":2,\"842\":4,\"843\":3,\"844\":4,\"846\":3,\"849\":12,\"850\":5,\"863\":3,\"864\":1,\"865\":3,\"867\":4,\"870\":6,\"871\":1,\"872\":1,\"873\":17,\"974\":2,\"975\":3,\"985\":2,\"986\":3,\"987\":5,\"989\":8,\"990\":5,\"991\":9,\"993\":20,\"994\":8,\"995\":8,\"996\":13,\"998\":19,\"999\":1,\"1001\":6,\"1002\":23,\"1008\":2,\"1009\":4,\"1015\":7,\"1016\":10,\"1028\":8,\"1033\":1,\"1038\":2,\"1040\":5,\"1045\":2,\"1049\":7,\"1050\":1,\"1051\":1,\"1054\":1,\"1055\":3,\"1059\":16,\"1067\":13,\"1068\":12,\"1073\":1,\"1087\":8,\"1088\":20,\"1090\":4,\"1091\":3,\"1092\":8,\"1093\":9,\"1095\":7,\"1099\":1,\"1106\":2,\"1108\":8,\"1112\":8,\"1113\":7,\"1114\":18,\"1115\":17,\"1116\":7,\"1119\":4,\"1120\":3,\"1125\":7,\"1135\":4,\"1136\":7,\"1148\":1,\"1180\":2,\"1181\":7,\"1188\":6,\"1192\":2,\"1226\":1,\"1228\":1,\"1261\":2,\"1263\":5,\"1264\":4,\"1338\":1,\"1347\":1,\"1351\":3,\"1361\":2,\"1363\":2,\"1368\":7,\"1369\":7,\"1382\":8,\"1383\":2,\"1403\":1,\"1412\":1,\"1413\":7,\"1418\":2,\"1422\":1,\"1432\":1,\"1443\":1,\"1470\":1,\"1494\":1,\"1503\":1,\"1536\":4,\"1567\":1,\"1595\":1,\"1599\":3,\"1608\":1,\"1615\":1,\"1629\":1,\"1645\":3,\"1651\":21,\"1652\":12,\"1653\":8,\"1654\":11,\"1655\":2,\"1657\":6,\"1662\":6,\"1663\":2,\"1664\":2,\"1665\":3,\"1666\":12,\"1669\":3,\"1670\":1,\"1671\":1,\"1672\":3,\"1673\":1,\"1674\":1,\"1675\":10,\"1676\":1,\"1677\":1,\"1711\":4,\"1713\":1,\"1714\":5,\"1715\":5,\"1718\":1,\"1733\":1,\"1854\":1,\"1855\":1,\"1858\":3,\"1859\":2,\"1861\":1,\"1870\":2,\"1871\":2}}],[\"s=会话名称\",{\"1\":{\"1862\":1}}],[\"svip\",{\"1\":{\"1803\":1}}],[\"sg\",{\"1\":{\"1486\":1}}],[\"sjf\",{\"1\":{\"1470\":1}}],[\"s参数可以简览状态\",{\"1\":{\"1316\":1}}],[\"sqoop\",{\"1\":{\"1213\":1}}],[\"sql文件\",{\"1\":{\"675\":1}}],[\"sqlyog\",{\"1\":{\"666\":2}}],[\"sql语句\",{\"1\":{\"635\":1}}],[\"sql语句中嵌套select语句\",{\"1\":{\"607\":1}}],[\"sqlwarning\",{\"1\":{\"634\":2}}],[\"sql逻辑\",{\"1\":{\"633\":3}}],[\"sql性能分析\",{\"0\":{\"612\":1}}],[\"sql的分析和优化\",{\"1\":{\"570\":1}}],[\"sqlexception\",{\"1\":{\"544\":2,\"634\":1}}],[\"sqlstate\",{\"1\":{\"634\":3}}],[\"sqlsource\",{\"1\":{\"540\":1}}],[\"sqlsessionfacotry\",{\"1\":{\"508\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"507\":1,\"508\":1,\"518\":1,\"541\":2}}],[\"sqlsessionfactory\",{\"1\":{\"507\":6,\"508\":1,\"518\":1,\"524\":2,\"541\":5,\"542\":2}}],[\"sqlsession\",{\"0\":{\"508\":1},\"1\":{\"507\":2,\"508\":3,\"540\":1,\"542\":3,\"543\":6,\"544\":1}}],[\"sql>\",{\"1\":{\"531\":1}}],[\"sql\",{\"0\":{\"104\":1,\"123\":1,\"515\":1,\"531\":1,\"534\":1,\"544\":1,\"571\":1,\"613\":1,\"1033\":1,\"1539\":1,\"1565\":1},\"1\":{\"121\":2,\"503\":1,\"509\":1,\"510\":1,\"515\":6,\"528\":1,\"529\":1,\"531\":1,\"534\":1,\"537\":1,\"540\":2,\"541\":4,\"542\":1,\"544\":5,\"545\":1,\"554\":1,\"558\":1,\"569\":1,\"614\":1,\"628\":1,\"635\":3,\"657\":4,\"675\":1,\"1033\":1,\"1065\":1,\"1155\":1,\"1213\":1,\"1223\":3,\"1224\":3,\"1226\":2,\"1229\":1,\"1448\":1,\"1540\":1,\"1543\":1,\"1563\":4,\"1566\":2}}],[\"s3\",{\"1\":{\"1213\":1}}],[\"s的架构体系\",{\"1\":{\"1126\":1}}],[\"s的吞吐速率\",{\"1\":{\"431\":1}}],[\"sflags标记位\",{\"1\":{\"927\":1}}],[\"src=\",{\"1\":{\"1870\":1}}],[\"srcaddress\",{\"1\":{\"1136\":1}}],[\"srcoffset\",{\"1\":{\"1136\":1}}],[\"srcbase\",{\"1\":{\"1136\":1}}],[\"src\",{\"1\":{\"828\":3,\"1791\":2}}],[\"sbin\",{\"1\":{\"1217\":2,\"1222\":2}}],[\"sb\",{\"1\":{\"789\":3,\"843\":6,\"996\":3}}],[\"sk决定了旅客出行的时间安排\",{\"1\":{\"1729\":1}}],[\"sk\",{\"0\":{\"1729\":1},\"1\":{\"1395\":11}}],[\"skusaleattrvalueservice\",{\"1\":{\"1369\":1}}],[\"sku图片信息\",{\"1\":{\"1369\":1}}],[\"skuinfoentity\",{\"1\":{\"1369\":1}}],[\"skuitemvo\",{\"1\":{\"1369\":8}}],[\"skuid\",{\"1\":{\"1369\":4}}],[\"sku2\",{\"1\":{\"1368\":1}}],[\"sku1\",{\"1\":{\"1368\":1}}],[\"sku\",{\"1\":{\"618\":6,\"675\":1,\"1365\":2,\"1369\":4}}],[\"skiptrash\",{\"1\":{\"1218\":2}}],[\"skiplist\",{\"1\":{\"900\":2}}],[\"skip\",{\"1\":{\"312\":1,\"569\":1,\"675\":1,\"1068\":1}}],[\"snowflake\",{\"1\":{\"1622\":1}}],[\"sndbuf\",{\"0\":{\"859\":1},\"1\":{\"839\":2,\"859\":1}}],[\"snapretaincount=3\",{\"1\":{\"1164\":1}}],[\"snapshot\",{\"1\":{\"734\":1,\"1170\":1}}],[\"snappy\",{\"1\":{\"459\":2}}],[\"sn拼接成一个字符串\",{\"1\":{\"593\":1}}],[\"sn\",{\"1\":{\"593\":1}}],[\"ss之后会生成一个pnr\",{\"1\":{\"1738\":1}}],[\"ss黑屏系统的一种指令\",{\"1\":{\"1738\":1}}],[\"ssd比内存慢\",{\"1\":{\"1434\":1}}],[\"ssd\",{\"1\":{\"1434\":1}}],[\"ssthresh\",{\"1\":{\"1413\":3}}],[\"ssthresh时\",{\"1\":{\"1413\":1}}],[\"ssh\",{\"1\":{\"1314\":1,\"1695\":1}}],[\"ssckey\",{\"1\":{\"786\":1,\"863\":2}}],[\"ssc\",{\"1\":{\"782\":3,\"783\":4,\"786\":5,\"787\":3,\"788\":2,\"789\":1,\"791\":5,\"863\":6,\"865\":2,\"866\":1,\"873\":1}}],[\"ssl\",{\"1\":{\"434\":1,\"1401\":1,\"1402\":1}}],[\"sss\",{\"1\":{\"388\":3}}],[\"ss\",{\"1\":{\"388\":3,\"643\":2,\"665\":3,\"1490\":1,\"1631\":1,\"1878\":4}}],[\"sso\",{\"0\":{\"27\":1,\"1643\":1},\"1\":{\"27\":12,\"1643\":11}}],[\"s9指向堆里的\",{\"1\":{\"301\":1}}],[\"s9\",{\"1\":{\"301\":2}}],[\"s8\",{\"1\":{\"301\":2}}],[\"s7指向常量池的\",{\"1\":{\"301\":1}}],[\"s7\",{\"1\":{\"301\":2}}],[\"s11\",{\"1\":{\"301\":2}}],[\"s10\",{\"1\":{\"301\":2}}],[\"s1指向的是常量池里的\",{\"1\":{\"301\":1}}],[\"s1\",{\"1\":{\"301\":2,\"593\":1,\"850\":4,\"993\":3,\"996\":7,\"1567\":1}}],[\"s2指向的是堆里的\",{\"1\":{\"301\":1}}],[\"s2\",{\"1\":{\"301\":2,\"593\":2,\"850\":3,\"993\":3,\"996\":7,\"1567\":1}}],[\"s|ms\",{\"1\":{\"230\":1}}],[\"swar\",{\"0\":{\"1666\":1}}],[\"swar算法来计算这128位的汉明重量\",{\"1\":{\"976\":1}}],[\"swar算法\",{\"1\":{\"976\":2}}],[\"swappiness\",{\"1\":{\"1446\":1}}],[\"swap\",{\"0\":{\"1447\":1},\"1\":{\"214\":1,\"989\":4,\"1443\":1,\"1446\":2,\"1447\":3,\"1479\":1,\"1652\":3,\"1653\":4}}],[\"switch工作在osi的应用层\",{\"1\":{\"1299\":1}}],[\"switch工作在osi的传输层\",{\"1\":{\"1299\":1}}],[\"switch\",{\"1\":{\"532\":1,\"536\":1,\"872\":1,\"1058\":1}}],[\"sweep\",{\"1\":{\"168\":1,\"176\":1,\"1523\":1,\"1525\":1}}],[\"slidingwindow\",{\"1\":{\"990\":1}}],[\"slice\",{\"1\":{\"831\":8,\"850\":2}}],[\"slower\",{\"1\":{\"978\":1}}],[\"slowlogpushentryifneeded\",{\"1\":{\"978\":1}}],[\"slowlogentry\",{\"1\":{\"978\":1}}],[\"slowlog链表中\",{\"1\":{\"978\":1}}],[\"slowlog\",{\"1\":{\"929\":1,\"978\":4}}],[\"slow\",{\"1\":{\"612\":1,\"1413\":1}}],[\"slot指向的链表可重用\",{\"1\":{\"751\":1}}],[\"slot集合\",{\"1\":{\"751\":1}}],[\"slots属性\",{\"1\":{\"946\":1,\"947\":1}}],[\"slots和clusterstate\",{\"1\":{\"946\":1}}],[\"slots\",{\"1\":{\"751\":1,\"945\":1,\"946\":4,\"947\":2}}],[\"slot根据变量作用范围可复用\",{\"1\":{\"204\":1}}],[\"slot\",{\"1\":{\"154\":1,\"751\":1,\"946\":1}}],[\"slottoexpunge\",{\"1\":{\"154\":2,\"1514\":2}}],[\"slave标记\",{\"1\":{\"948\":1}}],[\"slave0\",{\"1\":{\"940\":1}}],[\"slaves字典中\",{\"1\":{\"940\":1}}],[\"slaves\",{\"1\":{\"937\":2,\"948\":1,\"1563\":1}}],[\"slaves选项\",{\"1\":{\"937\":1}}],[\"slaveof指针\",{\"1\":{\"948\":1}}],[\"slaveof\",{\"1\":{\"936\":1}}],[\"slave2\",{\"1\":{\"658\":1,\"940\":1}}],[\"slave1\",{\"1\":{\"658\":1,\"940\":1}}],[\"slave重做中继日志中的事件\",{\"1\":{\"648\":1}}],[\"slave\",{\"0\":{\"1155\":1},\"1\":{\"427\":1,\"647\":1,\"649\":2,\"658\":1,\"734\":2,\"940\":3,\"1153\":1,\"1154\":1,\"1155\":10,\"1156\":1,\"1563\":3}}],[\"slf4j源码解析\",{\"1\":{\"392\":1}}],[\"slf4jserviceprovider\",{\"1\":{\"383\":4}}],[\"slf4j桥接包\",{\"1\":{\"382\":1}}],[\"slf4j2\",{\"1\":{\"382\":1,\"383\":1}}],[\"slf4j<\",{\"1\":{\"382\":5}}],[\"slf4j\",{\"0\":{\"380\":1,\"381\":1},\"1\":{\"355\":1,\"376\":4,\"380\":2,\"382\":20,\"383\":11,\"384\":1,\"385\":1,\"391\":5,\"392\":1,\"507\":2,\"849\":1,\"1181\":1}}],[\"sleep\",{\"0\":{\"1512\":1},\"1\":{\"134\":1,\"137\":1,\"139\":3,\"183\":1,\"330\":1,\"365\":2,\"418\":1,\"817\":2,\"822\":3,\"850\":1,\"1092\":1,\"1095\":1,\"1188\":2,\"1263\":1,\"1450\":1,\"1512\":2}}],[\"s+\",{\"1\":{\"125\":1}}],[\"scp\",{\"1\":{\"1631\":1}}],[\"scenicid\",{\"1\":{\"1361\":1}}],[\"scenicdatapulljob\",{\"1\":{\"1360\":1}}],[\"scenic\",{\"0\":{\"1357\":1,\"1358\":1},\"1\":{\"1357\":1,\"1358\":1}}],[\"schacon\",{\"1\":{\"1351\":1}}],[\"scheme\",{\"1\":{\"357\":1}}],[\"schema系统数据库查询\",{\"1\":{\"695\":1}}],[\"schema性能数据库进行性能调优和诊断的视图\",{\"1\":{\"673\":1}}],[\"schemalocation=\",{\"1\":{\"357\":1}}],[\"schema\",{\"1\":{\"34\":1,\"552\":2,\"628\":2,\"636\":1,\"673\":2,\"729\":1}}],[\"schedulewithfixeddelay\",{\"1\":{\"1110\":1}}],[\"scheduledthreadpool\",{\"1\":{\"1110\":1}}],[\"scheduledfuture<\",{\"1\":{\"1110\":3}}],[\"scheduled\",{\"1\":{\"817\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"334\":2,\"1110\":1}}],[\"scheduleatfixedrate\",{\"1\":{\"334\":1,\"817\":1,\"1110\":1}}],[\"schedule\",{\"1\":{\"334\":1,\"1110\":1}}],[\"scheduling\",{\"1\":{\"282\":1}}],[\"scope>\",{\"1\":{\"1707\":1,\"1717\":1}}],[\"scope\",{\"1\":{\"1608\":1}}],[\"scope命令查看当前环境所有的配置\",{\"1\":{\"1311\":1}}],[\"score属性值\",{\"1\":{\"970\":1}}],[\"score属性中\",{\"1\":{\"970\":1}}],[\"score存储分值\",{\"1\":{\"900\":1}}],[\"score\",{\"1\":{\"631\":9,\"675\":1,\"1446\":2,\"1570\":1}}],[\"sckey\",{\"1\":{\"788\":2,\"789\":4}}],[\"sc\",{\"1\":{\"782\":4,\"783\":4,\"787\":3,\"788\":5,\"789\":8,\"791\":6,\"1868\":6}}],[\"scale=\",{\"1\":{\"1878\":1}}],[\"scala\",{\"1\":{\"435\":1}}],[\"scan\",{\"1\":{\"731\":1,\"1024\":1,\"1472\":2}}],[\"scavenge的老年代版本\",{\"1\":{\"1525\":1}}],[\"scavenge\",{\"1\":{\"172\":1,\"175\":1,\"1525\":1}}],[\"scribe\",{\"1\":{\"480\":1}}],[\"scribeasyncappender\",{\"1\":{\"391\":1}}],[\"script>\",{\"1\":{\"1870\":2}}],[\"scriptcache\",{\"1\":{\"967\":4}}],[\"scripts字典\",{\"1\":{\"965\":1}}],[\"scripts\",{\"1\":{\"964\":4,\"966\":3,\"967\":2}}],[\"script\",{\"1\":{\"121\":1,\"964\":2,\"965\":2,\"966\":7,\"967\":2,\"1263\":2}}],[\"sdp规范\",{\"0\":{\"1862\":1}}],[\"sdp\",{\"1\":{\"1860\":1}}],[\"sdiffstore命令\",{\"1\":{\"1658\":1}}],[\"sds\",{\"1\":{\"895\":1,\"1570\":1}}],[\"sds需要缩短字符串时\",{\"1\":{\"879\":1}}],[\"sds额外记录了字符串长度\",{\"1\":{\"879\":1}}],[\"sds结构\",{\"1\":{\"878\":1}}],[\"sds表\",{\"1\":{\"118\":1}}],[\"sdk本质上是组装dsl语句\",{\"1\":{\"38\":1}}],[\"sufis\",{\"1\":{\"1767\":1}}],[\"sufism\",{\"1\":{\"1767\":1}}],[\"suffixoverrides=\",{\"1\":{\"537\":1}}],[\"sudoers文件中配置\",{\"1\":{\"1691\":1}}],[\"sudo\",{\"0\":{\"1691\":1},\"1\":{\"1691\":1,\"1697\":1}}],[\"su\",{\"0\":{\"1691\":1},\"1\":{\"1691\":1}}],[\"suspend0\",{\"1\":{\"1098\":1}}],[\"suspend\",{\"1\":{\"1049\":1,\"1098\":1}}],[\"suspendedresources\",{\"1\":{\"1049\":3}}],[\"suspendedresourcesholder\",{\"1\":{\"1049\":1}}],[\"suspendedresource\",{\"1\":{\"1044\":1,\"1049\":2}}],[\"such\",{\"1\":{\"1002\":1}}],[\"successfully\",{\"1\":{\"1181\":2}}],[\"successful\",{\"1\":{\"383\":1}}],[\"success\",{\"1\":{\"15\":2,\"457\":1}}],[\"sum记录当前track集合总和\",{\"1\":{\"1674\":1}}],[\"summingint\",{\"1\":{\"1068\":1}}],[\"sum\",{\"1\":{\"584\":1,\"624\":1,\"720\":1,\"913\":1,\"1567\":1,\"1674\":4,\"1676\":4}}],[\"sunnism\",{\"0\":{\"1766\":1}}],[\"sun\",{\"1\":{\"254\":2,\"376\":1,\"1135\":4,\"1137\":1}}],[\"survivor等\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"survivor\",{\"1\":{\"177\":1,\"1524\":9,\"1525\":1}}],[\"support\",{\"1\":{\"1336\":2}}],[\"supported\",{\"1\":{\"1041\":1,\"1044\":1,\"1049\":2,\"1276\":1,\"1611\":1,\"1858\":1}}],[\"supports\",{\"1\":{\"1041\":1,\"1049\":2,\"1276\":1,\"1611\":1}}],[\"supplyasync\",{\"1\":{\"163\":2,\"1363\":1,\"1369\":2}}],[\"supply\",{\"1\":{\"163\":1}}],[\"supplier<u>\",{\"1\":{\"163\":2}}],[\"supplier\",{\"1\":{\"58\":1,\"163\":2,\"1369\":1}}],[\"supremum\",{\"1\":{\"556\":1,\"688\":1,\"689\":1}}],[\"super\",{\"1\":{\"154\":1,\"163\":15,\"184\":1,\"187\":2,\"188\":1,\"192\":4,\"193\":3,\"194\":2,\"195\":1,\"196\":5,\"240\":1,\"304\":1,\"306\":1,\"779\":2,\"822\":4,\"823\":6,\"870\":1,\"1009\":1,\"1015\":2,\"1016\":2,\"1136\":1,\"1796\":1}}],[\"subreactor\",{\"1\":{\"1488\":2}}],[\"submodule\",{\"1\":{\"1347\":5}}],[\"submit\",{\"1\":{\"77\":2,\"332\":1,\"822\":2,\"1106\":1,\"1113\":7,\"1511\":3}}],[\"subversion\",{\"1\":{\"1309\":1}}],[\"subnode1\",{\"1\":{\"1169\":1}}],[\"subcl\",{\"1\":{\"1097\":1}}],[\"subclass\",{\"1\":{\"1088\":1}}],[\"subquery其中之一\",{\"1\":{\"728\":1}}],[\"subquery\",{\"1\":{\"728\":5}}],[\"subsetswithdup\",{\"1\":{\"1673\":1}}],[\"subsets\",{\"1\":{\"1669\":1}}],[\"substr\",{\"1\":{\"1567\":1,\"1631\":1}}],[\"substring\",{\"1\":{\"593\":2,\"703\":1,\"707\":1,\"990\":1,\"993\":3,\"1567\":1}}],[\"subsystems\",{\"1\":{\"373\":1}}],[\"subscribe\",{\"1\":{\"84\":2,\"488\":1,\"909\":2,\"939\":1,\"953\":1}}],[\"subscriber\",{\"1\":{\"84\":3}}],[\"sub\",{\"1\":{\"129\":1,\"1181\":1}}],[\"smb\",{\"1\":{\"1474\":1}}],[\"smp\",{\"1\":{\"1446\":1}}],[\"smtop\",{\"1\":{\"435\":2}}],[\"smtp\",{\"1\":{\"435\":1}}],[\"small\",{\"1\":{\"1004\":1}}],[\"smallint\",{\"1\":{\"112\":1,\"661\":1}}],[\"smartinstantiationawarebeanpostprocessor\",{\"1\":{\"1597\":1}}],[\"smart\",{\"1\":{\"42\":1}}],[\"smsclient\",{\"1\":{\"14\":1}}],[\"sms\",{\"1\":{\"14\":7}}],[\"solution\",{\"1\":{\"989\":1,\"993\":2,\"1652\":1,\"1653\":1,\"1654\":1,\"1662\":1,\"1663\":1,\"1664\":1,\"1665\":1,\"1666\":1,\"1669\":1}}],[\"solr\",{\"1\":{\"697\":1}}],[\"somaxconn指定\",{\"1\":{\"856\":1}}],[\"somedependency\",{\"1\":{\"1709\":2}}],[\"sometest\",{\"1\":{\"1709\":1}}],[\"sometitle\",{\"1\":{\"537\":1}}],[\"someapp\",{\"1\":{\"532\":1}}],[\"someproperty\",{\"1\":{\"522\":1,\"523\":1}}],[\"some\",{\"1\":{\"418\":1,\"531\":2,\"532\":1,\"609\":1,\"1181\":1}}],[\"somebody\",{\"1\":{\"83\":2}}],[\"sony\",{\"1\":{\"1799\":1}}],[\"son\",{\"1\":{\"357\":1}}],[\"softirqs\",{\"1\":{\"1437\":1}}],[\"softonic\",{\"1\":{\"666\":1}}],[\"softreference\",{\"1\":{\"192\":2}}],[\"softreference<t>\",{\"1\":{\"192\":1}}],[\"softreference<>\",{\"1\":{\"183\":1}}],[\"softreference<object>\",{\"1\":{\"183\":1}}],[\"softref\",{\"1\":{\"183\":3}}],[\"soft\",{\"1\":{\"183\":3,\"533\":1,\"923\":1,\"1207\":1,\"1279\":1,\"1344\":2,\"1618\":1}}],[\"softvalues\",{\"1\":{\"74\":1}}],[\"so\",{\"0\":{\"856\":1,\"859\":2},\"1\":{\"93\":2,\"839\":2,\"854\":3,\"855\":1,\"856\":1,\"859\":2}}],[\"sock\",{\"1\":{\"570\":1,\"1461\":1}}],[\"sockets\",{\"1\":{\"1859\":1}}],[\"socketserver\",{\"1\":{\"89\":1}}],[\"socketio将websocket\",{\"1\":{\"1859\":1}}],[\"socketio\",{\"0\":{\"1859\":1},\"1\":{\"1859\":2}}],[\"socketutils\",{\"1\":{\"873\":1}}],[\"socketaddress\",{\"1\":{\"866\":1}}],[\"socket是一个调用接口\",{\"1\":{\"341\":1}}],[\"socket同步\",{\"1\":{\"99\":1}}],[\"socketchannal\",{\"1\":{\"855\":1,\"858\":1}}],[\"socketchannel\",{\"1\":{\"93\":1,\"760\":1,\"782\":6,\"783\":4,\"786\":2,\"787\":3,\"788\":4,\"789\":3,\"791\":4,\"813\":2,\"854\":2,\"859\":2,\"860\":1,\"861\":1,\"873\":4}}],[\"socketclient\",{\"1\":{\"89\":1}}],[\"socket\",{\"0\":{\"1461\":1},\"1\":{\"91\":1,\"343\":4,\"445\":3,\"763\":1,\"764\":1,\"789\":2,\"792\":1,\"799\":6,\"801\":1,\"802\":1,\"864\":2,\"866\":2,\"873\":1,\"1395\":4,\"1420\":7,\"1461\":3,\"1473\":1,\"1486\":2,\"1487\":13,\"1488\":1,\"1490\":1,\"1623\":1,\"1631\":1,\"1859\":9}}],[\"social\",{\"1\":{\"15\":1}}],[\"socialuser\",{\"1\":{\"15\":1}}],[\"sortarray\",{\"1\":{\"989\":1,\"1653\":1,\"1654\":1}}],[\"sort实现\",{\"1\":{\"970\":1}}],[\"sorted\",{\"1\":{\"913\":1,\"1068\":1}}],[\"sortedby\",{\"1\":{\"61\":1}}],[\"sortorder\",{\"1\":{\"51\":1}}],[\"sort\",{\"0\":{\"969\":1},\"1\":{\"51\":1,\"129\":1,\"304\":1,\"616\":2,\"711\":1,\"728\":1,\"969\":7,\"971\":1,\"1226\":1,\"1631\":2,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1}}],[\"source=copy\",{\"1\":{\"667\":1}}],[\"sourcefile\",{\"1\":{\"240\":1}}],[\"source\",{\"1\":{\"42\":1,\"47\":1,\"51\":6,\"82\":1,\"348\":1,\"649\":5,\"675\":2,\"778\":3,\"779\":2,\"788\":7,\"1701\":1}}],[\"source等\",{\"1\":{\"42\":1}}],[\"satish\",{\"1\":{\"1615\":1}}],[\"sar\",{\"1\":{\"1490\":1,\"1631\":1,\"1700\":1}}],[\"sack\",{\"1\":{\"1411\":4}}],[\"saleattrvos\",{\"1\":{\"1369\":2}}],[\"saleattrfuture\",{\"1\":{\"1369\":2}}],[\"salary\",{\"1\":{\"609\":4,\"610\":3,\"611\":2}}],[\"saga\",{\"1\":{\"1287\":1}}],[\"sadd\",{\"1\":{\"901\":1}}],[\"sample\",{\"1\":{\"720\":2}}],[\"sampling采样\",{\"0\":{\"127\":1}}],[\"sax解析\",{\"1\":{\"357\":1}}],[\"safelyinstantiate\",{\"1\":{\"383\":1}}],[\"safe\",{\"1\":{\"172\":1,\"569\":1}}],[\"safety\",{\"1\":{\"64\":1}}],[\"sankuai\",{\"1\":{\"39\":1}}],[\"savegeneratedfiles属性\",{\"1\":{\"1015\":2}}],[\"savegeneratedfiles\",{\"1\":{\"1015\":1}}],[\"saveparams数组保存触发条件\",{\"1\":{\"912\":1}}],[\"savepoint\",{\"1\":{\"734\":4,\"1041\":2}}],[\"save\",{\"1\":{\"15\":1,\"911\":1,\"912\":4,\"1368\":1,\"1576\":1,\"1634\":1}}],[\"savedstate\",{\"1\":{\"8\":2}}],[\"sigsegv\",{\"1\":{\"1465\":2}}],[\"sigstp\",{\"1\":{\"1462\":1}}],[\"sigterm\",{\"1\":{\"1465\":1}}],[\"sigkill\",{\"1\":{\"1465\":1,\"1631\":1}}],[\"sigint\",{\"1\":{\"1462\":1}}],[\"signature\",{\"1\":{\"240\":1,\"523\":1}}],[\"signalall\",{\"1\":{\"156\":1,\"1116\":1}}],[\"signal\",{\"0\":{\"1462\":1},\"1\":{\"156\":1}}],[\"signalnext\",{\"1\":{\"7\":3}}],[\"signalnextifshared\",{\"1\":{\"6\":1}}],[\"signedbytes\",{\"1\":{\"80\":1}}],[\"sign\",{\"1\":{\"27\":1,\"1643\":1}}],[\"siteid\",{\"1\":{\"1781\":1}}],[\"site\",{\"1\":{\"1217\":3,\"1632\":1,\"1791\":1}}],[\"simpliﬁed\",{\"1\":{\"1214\":1}}],[\"simplegit\",{\"1\":{\"1351\":1}}],[\"simplecacheconfiguration\",{\"1\":{\"1269\":2,\"1613\":2}}],[\"simplecache\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"simplechannelinboundhandler<httprequest>\",{\"1\":{\"846\":1}}],[\"simpleinstantiationstrategy\",{\"1\":{\"1009\":2}}],[\"simplefilevisitor<path>\",{\"1\":{\"779\":1}}],[\"simplestatementhandler\",{\"1\":{\"544\":1}}],[\"simpleexecutor\",{\"1\":{\"542\":2,\"544\":1}}],[\"simple<\",{\"1\":{\"382\":1}}],[\"simplelogger\",{\"1\":{\"382\":1}}],[\"simpledateformat\",{\"1\":{\"154\":1,\"353\":2,\"1514\":1}}],[\"simple\",{\"1\":{\"89\":1,\"376\":1,\"382\":2,\"417\":1,\"422\":1,\"728\":1,\"846\":1,\"878\":1,\"1873\":1}}],[\"sid\",{\"1\":{\"1204\":3}}],[\"since=\",{\"1\":{\"1322\":1}}],[\"since\",{\"1\":{\"1250\":1,\"1399\":1}}],[\"sink\",{\"1\":{\"82\":1}}],[\"singlenumber\",{\"1\":{\"1662\":1,\"1663\":1}}],[\"singlethreadscheduledexecutor\",{\"1\":{\"1110\":1}}],[\"singlethreadexecutor\",{\"1\":{\"1110\":2}}],[\"singlethreadeventexecutor\",{\"1\":{\"869\":1,\"871\":2}}],[\"singlethreadeventloop\",{\"1\":{\"816\":1}}],[\"singleton\",{\"1\":{\"1596\":1,\"1599\":1,\"1645\":21}}],[\"singletonfactory\",{\"1\":{\"1028\":3,\"1382\":3}}],[\"singletonfactories\",{\"1\":{\"1028\":3,\"1382\":3,\"1599\":1}}],[\"singletonobject\",{\"1\":{\"1028\":7,\"1382\":7}}],[\"singletonobjects\",{\"1\":{\"1028\":2,\"1382\":2,\"1599\":1}}],[\"singletonbeanregistry\",{\"1\":{\"1006\":2,\"1378\":1}}],[\"singleinstance\",{\"1\":{\"290\":9}}],[\"single\",{\"1\":{\"27\":1,\"550\":1,\"731\":1,\"1559\":1,\"1643\":1,\"1661\":1}}],[\"size+membern+scoren+\",{\"1\":{\"913\":1}}],[\"size+keyn+valuen+\",{\"1\":{\"913\":1}}],[\"size+elemn+\",{\"1\":{\"913\":1}}],[\"sizemask\",{\"1\":{\"882\":1}}],[\"sizes\",{\"1\":{\"720\":1}}],[\"size配置缓冲区大小\",{\"1\":{\"714\":1}}],[\"sizeinbytes\",{\"1\":{\"476\":1}}],[\"size默认16kb\",{\"1\":{\"450\":1}}],[\"size=8192\",{\"1\":{\"1791\":1}}],[\"size=\",{\"1\":{\"388\":1,\"533\":1}}],[\"size指定堆最大内存\",{\"1\":{\"210\":1}}],[\"size指定堆初始内存\",{\"1\":{\"210\":1}}],[\"size统计元素个数array\",{\"1\":{\"122\":1}}],[\"size统计元素个数\",{\"1\":{\"122\":1}}],[\"size\",{\"1\":{\"51\":4,\"59\":1,\"66\":2,\"129\":2,\"154\":1,\"203\":1,\"450\":1,\"459\":2,\"474\":1,\"476\":2,\"616\":1,\"638\":1,\"720\":3,\"731\":2,\"751\":2,\"777\":3,\"839\":1,\"873\":3,\"882\":1,\"945\":1,\"1001\":1,\"1002\":1,\"1112\":1,\"1114\":1,\"1120\":1,\"1136\":4,\"1176\":1,\"1514\":2,\"1608\":1,\"1651\":4,\"1669\":1,\"1671\":2,\"1672\":1,\"1675\":2,\"1677\":1,\"1683\":1,\"1711\":2}}],[\"si\",{\"1\":{\"37\":1}}],[\"style>\",{\"1\":{\"1855\":1,\"1870\":1}}],[\"stklway\",{\"1\":{\"1156\":1}}],[\"steps\",{\"1\":{\"1791\":1,\"1873\":1}}],[\"step2\",{\"0\":{\"1153\":1}}],[\"step1\",{\"0\":{\"1149\":1}}],[\"step0\",{\"0\":{\"1148\":1}}],[\"stillborn\",{\"1\":{\"1087\":1}}],[\"sticky\",{\"0\":{\"497\":1},\"1\":{\"494\":1,\"497\":1}}],[\"stun\",{\"0\":{\"1860\":1},\"1\":{\"1860\":3}}],[\"stub\",{\"1\":{\"1623\":2}}],[\"study\",{\"1\":{\"675\":1}}],[\"student\",{\"1\":{\"620\":2,\"622\":2,\"623\":1}}],[\"stu\",{\"1\":{\"622\":2,\"623\":11}}],[\"stmt\",{\"1\":{\"544\":3,\"636\":1}}],[\"stderr来打印日志\",{\"1\":{\"378\":1}}],[\"stdout或system\",{\"1\":{\"378\":1}}],[\"stw\",{\"1\":{\"170\":1,\"173\":2,\"176\":1,\"1523\":1,\"1525\":1}}],[\"str4\",{\"1\":{\"1536\":1}}],[\"str3==str4\",{\"1\":{\"1536\":1}}],[\"str3\",{\"1\":{\"1536\":1}}],[\"str2\",{\"1\":{\"774\":1,\"1536\":1}}],[\"str1==str2\",{\"1\":{\"1536\":1}}],[\"str1\",{\"1\":{\"774\":1,\"1536\":1}}],[\"str\",{\"1\":{\"593\":6,\"1067\":2,\"1567\":5}}],[\"strategy\",{\"1\":{\"870\":2,\"1007\":1}}],[\"strategy指定\",{\"1\":{\"494\":1}}],[\"stract\",{\"1\":{\"112\":1}}],[\"strongref\",{\"1\":{\"183\":4}}],[\"strong\",{\"1\":{\"183\":3,\"1148\":1}}],[\"struct部分资源是共享了进程已创建的资源\",{\"1\":{\"1436\":1}}],[\"structured\",{\"1\":{\"1214\":1}}],[\"structure\",{\"1\":{\"465\":1}}],[\"struct<name\",{\"1\":{\"1227\":1}}],[\"struct<c1\",{\"1\":{\"122\":1}}],[\"struct<子列名\",{\"1\":{\"122\":1}}],[\"struct\",{\"1\":{\"112\":2,\"122\":2,\"283\":1,\"1128\":1,\"1227\":2,\"1436\":1}}],[\"stream是录制源\",{\"1\":{\"1858\":1}}],[\"stream是手段\",{\"1\":{\"312\":1}}],[\"streamid\",{\"1\":{\"1404\":1}}],[\"streaming\",{\"1\":{\"408\":1,\"439\":1,\"1866\":1}}],[\"stream自带的静态方法\",{\"1\":{\"1067\":1}}],[\"stream<double>\",{\"1\":{\"1067\":1}}],[\"stream<string>\",{\"1\":{\"1067\":2}}],[\"stream<integer>\",{\"1\":{\"1067\":5}}],[\"streamapi\",{\"1\":{\"1067\":1}}],[\"stream不保存数据\",{\"1\":{\"1065\":1}}],[\"stream流使用一种类似用\",{\"1\":{\"1065\":1}}],[\"streammessage\",{\"1\":{\"403\":1,\"1625\":1}}],[\"stream\",{\"0\":{\"312\":1,\"1064\":1},\"1\":{\"79\":1,\"153\":3,\"305\":2,\"312\":6,\"324\":1,\"760\":5,\"794\":1,\"1067\":5,\"1068\":16,\"1245\":1,\"1363\":1,\"1404\":4,\"1461\":1,\"1858\":1,\"1861\":3,\"1870\":1}}],[\"strict\",{\"1\":{\"1878\":2}}],[\"strict抛异常\",{\"1\":{\"42\":1}}],[\"string返回null\",{\"1\":{\"1708\":1}}],[\"stringutils\",{\"1\":{\"1244\":1,\"1261\":1}}],[\"string简单动态字符串作为字符串表示\",{\"1\":{\"878\":1}}],[\"stringencoder\",{\"1\":{\"812\":1,\"820\":1}}],[\"stringdecoder\",{\"1\":{\"811\":1}}],[\"stringdeserializer\",{\"1\":{\"488\":2,\"489\":1}}],[\"stringbuffer是stringbuilder的多线程安全版\",{\"1\":{\"302\":1}}],[\"stringbuilder不是线程安全的\",{\"1\":{\"1536\":1}}],[\"stringbuilder只是个工具\",{\"1\":{\"302\":1}}],[\"stringbuilder相当于一个容器\",{\"1\":{\"302\":1}}],[\"stringbuilder\",{\"0\":{\"302\":1},\"1\":{\"211\":1,\"301\":1,\"302\":1,\"789\":2,\"843\":4,\"996\":2}}],[\"string等\",{\"1\":{\"254\":1}}],[\"stringstringvalueoperations\",{\"1\":{\"1368\":4}}],[\"stringstream\",{\"1\":{\"1067\":1}}],[\"stringserializer\",{\"1\":{\"456\":2,\"457\":2}}],[\"strings\",{\"0\":{\"79\":1},\"1\":{\"79\":1,\"846\":2}}],[\"string>\",{\"1\":{\"15\":2,\"61\":1,\"68\":1,\"70\":1,\"79\":1,\"456\":2,\"457\":1,\"461\":2,\"488\":3,\"1068\":1,\"1227\":1,\"1368\":1,\"1697\":1}}],[\"stringredistemplate\",{\"1\":{\"14\":2,\"1261\":2,\"1263\":3,\"1368\":1}}],[\"string\",{\"0\":{\"1536\":1},\"1\":{\"14\":8,\"15\":9,\"24\":1,\"51\":1,\"58\":3,\"59\":1,\"61\":1,\"69\":1,\"73\":1,\"77\":3,\"79\":2,\"84\":1,\"90\":1,\"93\":1,\"98\":1,\"112\":1,\"113\":6,\"118\":3,\"119\":3,\"122\":1,\"124\":12,\"126\":3,\"146\":2,\"183\":1,\"188\":1,\"210\":1,\"211\":1,\"263\":1,\"300\":1,\"301\":8,\"302\":1,\"308\":1,\"315\":2,\"348\":2,\"351\":1,\"353\":2,\"354\":1,\"383\":1,\"418\":5,\"420\":1,\"421\":3,\"452\":3,\"453\":1,\"457\":2,\"489\":1,\"507\":3,\"509\":8,\"515\":3,\"521\":1,\"530\":2,\"541\":6,\"774\":2,\"791\":3,\"792\":2,\"797\":2,\"811\":1,\"812\":1,\"823\":1,\"844\":2,\"913\":1,\"985\":1,\"990\":1,\"993\":10,\"996\":2,\"1009\":2,\"1015\":2,\"1016\":2,\"1028\":1,\"1058\":4,\"1059\":1,\"1067\":2,\"1087\":1,\"1088\":1,\"1099\":1,\"1108\":1,\"1125\":1,\"1139\":1,\"1180\":1,\"1181\":9,\"1192\":1,\"1226\":2,\"1227\":3,\"1228\":2,\"1261\":1,\"1263\":3,\"1363\":1,\"1368\":1,\"1382\":1,\"1536\":8,\"1570\":2,\"1615\":4,\"1711\":1,\"1712\":1}}],[\"storage\",{\"1\":{\"569\":1,\"671\":1,\"1214\":1}}],[\"store操作重排序\",{\"1\":{\"1142\":1}}],[\"storefence\",{\"1\":{\"1142\":1}}],[\"store\",{\"1\":{\"24\":1,\"143\":1,\"145\":1,\"305\":1,\"969\":1,\"971\":1,\"1347\":1,\"1433\":1,\"1506\":1}}],[\"stomp协议\",{\"1\":{\"408\":1}}],[\"stomp提供一个可互操作的连接格式\",{\"1\":{\"408\":1}}],[\"stomp\",{\"0\":{\"408\":1},\"1\":{\"408\":2,\"412\":1,\"434\":1}}],[\"stop0\",{\"1\":{\"1098\":1}}],[\"stop\",{\"1\":{\"569\":1,\"675\":2,\"734\":1,\"1098\":1,\"1112\":3,\"1114\":2,\"1115\":3,\"1116\":4,\"1155\":1,\"1165\":1,\"1217\":1,\"1222\":1,\"1631\":1,\"1634\":1,\"1695\":1,\"1858\":1}}],[\"stopasync\",{\"1\":{\"78\":1}}],[\"stopping\",{\"1\":{\"78\":1}}],[\"st\",{\"1\":{\"27\":6,\"1643\":6}}],[\"stash\",{\"1\":{\"1343\":12,\"1347\":1,\"1633\":2}}],[\"staged\",{\"1\":{\"1310\":1,\"1317\":1,\"1320\":1,\"1633\":1}}],[\"standardopenoption\",{\"1\":{\"796\":1}}],[\"standardcopyoption\",{\"1\":{\"779\":2}}],[\"standardcharsets\",{\"1\":{\"79\":1,\"83\":2,\"771\":3,\"774\":3,\"792\":1}}],[\"starjuly\",{\"1\":{\"283\":1}}],[\"startindex\",{\"1\":{\"1669\":2,\"1671\":2}}],[\"starting\",{\"1\":{\"78\":1}}],[\"start|stop\",{\"1\":{\"1222\":2}}],[\"start|status|stop\",{\"1\":{\"1217\":2}}],[\"starttime\",{\"1\":{\"1091\":2}}],[\"starttransaction\",{\"1\":{\"1049\":1}}],[\"start0\",{\"1\":{\"1090\":2}}],[\"started\",{\"1\":{\"1090\":3}}],[\"starter<\",{\"1\":{\"505\":1}}],[\"starter\",{\"1\":{\"24\":1,\"416\":1,\"1036\":1,\"1269\":1,\"1368\":1,\"1609\":1,\"1717\":3}}],[\"startasync\",{\"1\":{\"78\":1}}],[\"start\",{\"0\":{\"1090\":1},\"1\":{\"60\":1,\"77\":1,\"90\":1,\"93\":2,\"143\":3,\"188\":1,\"196\":1,\"228\":1,\"327\":1,\"329\":1,\"446\":2,\"569\":1,\"593\":1,\"649\":4,\"675\":2,\"734\":1,\"749\":2,\"791\":4,\"817\":1,\"822\":1,\"1033\":1,\"1090\":6,\"1114\":1,\"1115\":1,\"1155\":1,\"1165\":1,\"1180\":1,\"1192\":1,\"1198\":4,\"1217\":1,\"1222\":1,\"1347\":1,\"1413\":1,\"1563\":1,\"1567\":4,\"1631\":1,\"1634\":1,\"1670\":3,\"1673\":3,\"1674\":3,\"1676\":2,\"1677\":1,\"1695\":1,\"1858\":2,\"1871\":1}}],[\"stackoverflow\",{\"1\":{\"1520\":1}}],[\"stackoverflowerror\",{\"1\":{\"1465\":1,\"1533\":1}}],[\"stackoverflow上的回答\",{\"1\":{\"1137\":1}}],[\"stacktrace\",{\"1\":{\"1095\":4}}],[\"stacktracearray\",{\"1\":{\"1095\":2}}],[\"stacktraceelement\",{\"1\":{\"1095\":7}}],[\"stack实现了后进先出\",{\"1\":{\"986\":1}}],[\"stack\",{\"1\":{\"234\":1,\"983\":1,\"986\":5,\"1095\":5}}],[\"stacksize\",{\"1\":{\"1087\":1,\"1088\":3}}],[\"stacks\",{\"1\":{\"203\":1}}],[\"stamp\",{\"1\":{\"158\":6}}],[\"stampedlock\",{\"0\":{\"158\":1},\"1\":{\"158\":10}}],[\"staleslot\",{\"1\":{\"154\":2,\"1514\":3}}],[\"stats\",{\"1\":{\"719\":1,\"720\":4,\"721\":1,\"722\":1}}],[\"stat\",{\"1\":{\"701\":1,\"928\":1,\"1168\":1,\"1322\":1}}],[\"statistics\",{\"1\":{\"230\":1}}],[\"staticfieldbase\",{\"1\":{\"1139\":1}}],[\"staticfieldoffset\",{\"1\":{\"1139\":1}}],[\"staticloggerbinder\",{\"1\":{\"383\":2}}],[\"static修饰\",{\"1\":{\"292\":1,\"295\":1,\"296\":1}}],[\"static\",{\"0\":{\"1534\":1},\"1\":{\"3\":4,\"7\":1,\"9\":3,\"24\":1,\"90\":1,\"98\":1,\"154\":2,\"163\":4,\"183\":1,\"184\":4,\"187\":2,\"188\":5,\"189\":1,\"192\":1,\"195\":5,\"196\":7,\"210\":1,\"263\":2,\"289\":1,\"290\":5,\"292\":1,\"362\":6,\"363\":4,\"364\":1,\"383\":4,\"391\":2,\"507\":4,\"788\":1,\"791\":2,\"792\":2,\"797\":5,\"811\":1,\"812\":1,\"818\":1,\"823\":1,\"842\":1,\"843\":1,\"844\":2,\"864\":1,\"989\":1,\"993\":1,\"1015\":7,\"1016\":6,\"1045\":2,\"1067\":1,\"1073\":1,\"1087\":6,\"1092\":1,\"1095\":13,\"1096\":1,\"1097\":5,\"1108\":2,\"1112\":10,\"1135\":6,\"1366\":2,\"1383\":2,\"1527\":1,\"1534\":5,\"1615\":2,\"1645\":6,\"1653\":1,\"1666\":1,\"1707\":1,\"1791\":1}}],[\"status创建联合索引\",{\"1\":{\"701\":1}}],[\"status=\",{\"1\":{\"387\":1}}],[\"statuscode\",{\"1\":{\"14\":1}}],[\"status\",{\"0\":{\"1316\":1},\"1\":{\"3\":1,\"6\":3,\"7\":1,\"8\":2,\"229\":1,\"387\":1,\"598\":1,\"612\":1,\"622\":1,\"640\":1,\"649\":3,\"671\":1,\"701\":1,\"702\":1,\"717\":1,\"730\":1,\"741\":1,\"928\":1,\"940\":1,\"1038\":3,\"1039\":5,\"1044\":1,\"1047\":2,\"1049\":2,\"1050\":3,\"1051\":3,\"1055\":5,\"1154\":2,\"1155\":2,\"1165\":1,\"1316\":1,\"1344\":1,\"1347\":1,\"1563\":2,\"1695\":1}}],[\"state=online\",{\"1\":{\"940\":3}}],[\"statementmap\",{\"1\":{\"542\":1}}],[\"statementtype\",{\"1\":{\"530\":1,\"544\":1}}],[\"statementtype=\",{\"1\":{\"530\":4}}],[\"statementhandler\",{\"1\":{\"523\":1,\"540\":1,\"544\":4}}],[\"statement\",{\"1\":{\"509\":7,\"530\":1,\"540\":2,\"542\":3,\"544\":8,\"632\":6,\"634\":1,\"643\":1,\"1556\":2}}],[\"state减\",{\"1\":{\"9\":1}}],[\"state\",{\"1\":{\"3\":2,\"5\":2,\"6\":3,\"7\":1,\"9\":8,\"336\":1,\"383\":2,\"465\":1,\"535\":1,\"536\":1,\"537\":3,\"749\":1,\"939\":1,\"941\":1,\"945\":1,\"1055\":1,\"1089\":3,\"1114\":1,\"1207\":1,\"1279\":1,\"1467\":1,\"1516\":1,\"1517\":3,\"1518\":1,\"1618\":1,\"1640\":1}}],[\"spf\",{\"1\":{\"1792\":2}}],[\"spy注解创建的模拟对象注入相应的字段\",{\"1\":{\"1708\":1}}],[\"spy对象默认会执行所有方法的实际代码\",{\"1\":{\"1708\":1}}],[\"spy\",{\"1\":{\"1708\":2,\"1709\":1}}],[\"sprites\",{\"1\":{\"1400\":1}}],[\"springrunner\",{\"1\":{\"1718\":1}}],[\"spring也没有对\",{\"1\":{\"1614\":1}}],[\"spring在设计之初就是通过annotationawareaspectjautoproxycreator这个后置处理器来在bean生命周期的最后一步来完成aop代理\",{\"1\":{\"1599\":1}}],[\"spring容器不缓存prototype作用域的bean\",{\"1\":{\"1599\":1}}],[\"springfactoriesloader\",{\"1\":{\"1598\":1}}],[\"springframework\",{\"1\":{\"24\":2,\"389\":1,\"416\":1,\"455\":1,\"487\":1,\"1269\":2,\"1613\":2,\"1717\":1}}],[\"springtemplate\",{\"0\":{\"1053\":1},\"1\":{\"1053\":1}}],[\"springtransactionannotationparser\",{\"1\":{\"1059\":3}}],[\"springtransaction\",{\"1\":{\"525\":1}}],[\"spring事务管理器可以通过\",{\"1\":{\"1044\":1}}],[\"springboot测试可以在测试时启动spring容器\",{\"1\":{\"1718\":1}}],[\"springboot测试\",{\"0\":{\"1716\":1}}],[\"springbootconfiguration\",{\"1\":{\"1598\":1,\"1608\":1}}],[\"springboot+springcloud+mybatis+redis\",{\"1\":{\"1365\":1}}],[\"springboottest替代了spring\",{\"1\":{\"1718\":1}}],[\"springboottest注解\",{\"1\":{\"1717\":1}}],[\"springboottest启动spring容器\",{\"1\":{\"1716\":1}}],[\"springboottest等\",{\"1\":{\"1716\":1}}],[\"springboottest\",{\"1\":{\"1181\":1,\"1188\":1,\"1718\":1}}],[\"springboot\",{\"0\":{\"457\":1,\"489\":1,\"1609\":1,\"1610\":1},\"1\":{\"455\":1,\"487\":1,\"505\":1,\"506\":2,\"507\":1,\"1053\":1,\"1054\":1,\"1057\":1,\"1269\":1,\"1365\":1,\"1609\":3,\"1613\":1,\"1716\":1}}],[\"springbootapplicationtests\",{\"1\":{\"1718\":1}}],[\"springbootapplication注解的\",{\"1\":{\"1598\":1}}],[\"springbootapplication\",{\"1\":{\"24\":1,\"507\":1,\"1608\":1}}],[\"springbeanpostprocessor\",{\"1\":{\"91\":2,\"99\":2}}],[\"springhttpsessionconfiguration\",{\"1\":{\"25\":1}}],[\"springsessiondefaultredisserializer\",{\"1\":{\"24\":1}}],[\"springapplication\",{\"1\":{\"24\":1,\"507\":1}}],[\"spring\",{\"0\":{\"23\":1,\"415\":1,\"1004\":1,\"1030\":1,\"1036\":1,\"1042\":1,\"1269\":1,\"1591\":1,\"1607\":1,\"1613\":1,\"1614\":1},\"1\":{\"10\":1,\"14\":3,\"22\":1,\"24\":3,\"25\":1,\"417\":2,\"421\":2,\"422\":1,\"434\":1,\"457\":3,\"489\":3,\"505\":2,\"506\":1,\"511\":1,\"525\":3,\"808\":2,\"1004\":1,\"1024\":1,\"1026\":1,\"1028\":2,\"1033\":1,\"1036\":4,\"1039\":1,\"1040\":1,\"1041\":1,\"1042\":1,\"1045\":1,\"1047\":2,\"1054\":2,\"1060\":2,\"1061\":2,\"1253\":1,\"1269\":4,\"1276\":1,\"1368\":2,\"1382\":1,\"1383\":1,\"1531\":1,\"1532\":1,\"1593\":2,\"1594\":4,\"1595\":1,\"1598\":4,\"1599\":1,\"1601\":1,\"1604\":1,\"1609\":1,\"1611\":1,\"1613\":3,\"1614\":1,\"1621\":1,\"1648\":1,\"1716\":2,\"1717\":2}}],[\"spuid\",{\"1\":{\"1369\":1}}],[\"spu\",{\"1\":{\"1365\":1}}],[\"spec\",{\"1\":{\"1402\":2}}],[\"special\",{\"1\":{\"1148\":3}}],[\"specified\",{\"1\":{\"1049\":1}}],[\"spel\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"spark\",{\"1\":{\"808\":1,\"1211\":1,\"1213\":1,\"1221\":1}}],[\"space分配完毕则该页使用完毕\",{\"1\":{\"689\":1}}],[\"space分配一条记录的空间给user\",{\"1\":{\"689\":1}}],[\"space\",{\"1\":{\"688\":1,\"739\":1,\"907\":1,\"1791\":1}}],[\"sp\",{\"1\":{\"734\":3}}],[\"spot\",{\"1\":{\"242\":1}}],[\"spinlock\",{\"1\":{\"1463\":1}}],[\"spins\",{\"1\":{\"6\":4}}],[\"spi\",{\"1\":{\"91\":1,\"382\":1,\"383\":6}}],[\"splitasstream\",{\"1\":{\"1067\":1}}],[\"splitmap\",{\"1\":{\"79\":1}}],[\"splitter\",{\"1\":{\"79\":3}}],[\"splits\",{\"1\":{\"70\":1}}],[\"split\",{\"1\":{\"14\":1,\"79\":5,\"788\":2}}],[\"shel\",{\"1\":{\"1791\":1}}],[\"shell\",{\"1\":{\"1218\":1,\"1791\":1}}],[\"shenyu\",{\"1\":{\"1621\":1}}],[\"shenandoah工作流程\",{\"1\":{\"178\":1}}],[\"shenandoah的设计目标是在提供低延迟的同时\",{\"1\":{\"178\":1}}],[\"shenandoah\",{\"0\":{\"178\":1},\"1\":{\"172\":1,\"178\":1}}],[\"shepherd是api托管服务\",{\"1\":{\"1303\":1}}],[\"shepherd是一个高性能\",{\"1\":{\"1303\":1}}],[\"shepherd在oceanus下游\",{\"1\":{\"1303\":1}}],[\"shepherd\",{\"0\":{\"1303\":1},\"1\":{\"1303\":2,\"1304\":1}}],[\"sh统一启动\",{\"1\":{\"1217\":1}}],[\"sh和sbin\",{\"1\":{\"1217\":1}}],[\"shiism\",{\"0\":{\"1765\":1}}],[\"shi\",{\"1\":{\"1083\":1}}],[\"shrink\",{\"1\":{\"990\":1}}],[\"sh\",{\"1\":{\"446\":6,\"472\":1,\"475\":1,\"1165\":4,\"1198\":4,\"1199\":1,\"1217\":2,\"1222\":2,\"1347\":1}}],[\"shuts\",{\"1\":{\"494\":1}}],[\"shutdownnow\",{\"1\":{\"332\":1,\"1116\":3}}],[\"shutdowngracefully方法首先切换\",{\"1\":{\"817\":1}}],[\"shutdowngracefully\",{\"1\":{\"93\":3,\"821\":1}}],[\"shutdown\",{\"1\":{\"93\":1,\"332\":1,\"965\":1,\"966\":2,\"1106\":1,\"1112\":3,\"1114\":3,\"1115\":1,\"1116\":6,\"1264\":1,\"1420\":1}}],[\"shuffle\",{\"1\":{\"304\":1}}],[\"shopping\",{\"1\":{\"1732\":1}}],[\"shopid\",{\"1\":{\"124\":1}}],[\"shouldbeinitialized\",{\"1\":{\"1139\":1}}],[\"shouldcommitonglobalrollbackonly\",{\"1\":{\"1050\":1}}],[\"should\",{\"1\":{\"196\":1}}],[\"show\",{\"1\":{\"129\":1,\"296\":1,\"574\":1,\"575\":2,\"591\":1,\"612\":4,\"622\":2,\"628\":1,\"636\":1,\"642\":1,\"643\":3,\"644\":1,\"649\":1,\"671\":2,\"674\":2,\"677\":2,\"678\":1,\"701\":1,\"741\":1,\"1148\":2,\"1154\":1,\"1155\":1,\"1311\":3,\"1326\":1,\"1329\":1,\"1341\":9,\"1563\":2}}],[\"shortbuffer\",{\"1\":{\"761\":1}}],[\"shorts\",{\"1\":{\"80\":1,\"215\":1}}],[\"short\",{\"1\":{\"9\":1,\"36\":1,\"80\":2,\"287\":3,\"675\":1,\"828\":1,\"1712\":2}}],[\"shanghai\",{\"1\":{\"1697\":1}}],[\"sha1\",{\"1\":{\"1401\":1}}],[\"sha\",{\"1\":{\"1309\":1,\"1332\":1,\"1341\":1,\"1351\":1,\"1729\":1}}],[\"sha256\",{\"1\":{\"83\":1,\"1401\":1}}],[\"sharable\",{\"0\":{\"851\":1},\"1\":{\"851\":6}}],[\"share\",{\"1\":{\"558\":1,\"667\":2,\"1516\":1,\"1557\":1,\"1562\":2,\"1697\":1}}],[\"sharedsecrets\",{\"1\":{\"188\":1,\"196\":1}}],[\"shared\",{\"0\":{\"1459\":1},\"1\":{\"6\":4,\"560\":1,\"672\":1,\"1435\":1}}],[\"sharednode\",{\"1\":{\"3\":1,\"6\":1}}],[\"shardingsphere\",{\"1\":{\"1564\":1}}],[\"sharding\",{\"1\":{\"1563\":2}}],[\"shardingjdbc\",{\"1\":{\"653\":1}}],[\"shards\",{\"1\":{\"42\":1}}],[\"shard\",{\"1\":{\"34\":1}}],[\"symbolic\",{\"1\":{\"1351\":2}}],[\"syn+ack\",{\"1\":{\"1409\":1,\"1415\":1}}],[\"syn\",{\"1\":{\"856\":6,\"1409\":10,\"1414\":4,\"1415\":1,\"1418\":2,\"1420\":1,\"1487\":1}}],[\"synthetic\",{\"1\":{\"240\":1}}],[\"synclimit=5\",{\"1\":{\"1164\":1,\"1196\":1}}],[\"synchronousqueue\",{\"1\":{\"1107\":1,\"1110\":2,\"1499\":1,\"1511\":1}}],[\"synchronization\",{\"1\":{\"1049\":1}}],[\"synchronizations\",{\"1\":{\"1045\":2,\"1383\":2}}],[\"synchronizedsortedset\",{\"1\":{\"162\":1}}],[\"synchronizedsortedmap\",{\"1\":{\"162\":1}}],[\"synchronizedset\",{\"1\":{\"162\":1}}],[\"synchronizednavigableset\",{\"1\":{\"162\":1}}],[\"synchronizednavigablemap\",{\"1\":{\"162\":1}}],[\"synchronizedmap\",{\"1\":{\"162\":1}}],[\"synchronizedlist\",{\"1\":{\"162\":1}}],[\"synchronizedcollection\",{\"1\":{\"162\":1}}],[\"synchronized\",{\"0\":{\"138\":1,\"1072\":1,\"1515\":1},\"1\":{\"134\":1,\"137\":1,\"138\":1,\"139\":1,\"145\":3,\"148\":2,\"156\":1,\"184\":1,\"188\":3,\"195\":2,\"196\":2,\"331\":2,\"365\":1,\"1073\":5,\"1074\":2,\"1075\":1,\"1076\":1,\"1090\":1,\"1091\":1,\"1092\":1,\"1261\":2,\"1497\":2,\"1506\":1,\"1645\":2}}],[\"synchronizer\",{\"1\":{\"9\":1}}],[\"synchronzied\",{\"1\":{\"139\":1}}],[\"sync\",{\"1\":{\"9\":5,\"93\":2,\"460\":1,\"812\":1,\"813\":1,\"819\":1,\"820\":4,\"822\":2,\"856\":3,\"1269\":2,\"1347\":1,\"1478\":1,\"1479\":1,\"1556\":1,\"1613\":2}}],[\"sys\",{\"1\":{\"388\":2,\"673\":1,\"695\":4,\"856\":2,\"1409\":1,\"1446\":3,\"1464\":3,\"1474\":1}}],[\"sysprop\",{\"1\":{\"231\":1}}],[\"sysprops\",{\"1\":{\"231\":1}}],[\"systemctl\",{\"0\":{\"1695\":1},\"1\":{\"1631\":1,\"1695\":1}}],[\"system选项读写\",{\"1\":{\"1311\":1}}],[\"system\",{\"1\":{\"6\":1,\"14\":2,\"43\":1,\"51\":2,\"58\":1,\"69\":1,\"70\":2,\"73\":2,\"77\":4,\"78\":2,\"79\":1,\"83\":1,\"84\":2,\"153\":1,\"183\":10,\"263\":2,\"290\":1,\"296\":3,\"301\":3,\"322\":2,\"357\":1,\"388\":1,\"404\":1,\"418\":2,\"420\":2,\"421\":1,\"456\":1,\"488\":1,\"489\":1,\"639\":1,\"728\":1,\"773\":6,\"778\":1,\"779\":3,\"782\":1,\"789\":2,\"796\":2,\"797\":1,\"811\":1,\"826\":3,\"989\":1,\"990\":1,\"996\":1,\"1015\":3,\"1016\":3,\"1088\":1,\"1091\":2,\"1095\":1,\"1099\":2,\"1106\":1,\"1108\":1,\"1125\":3,\"1151\":1,\"1181\":4,\"1188\":6,\"1192\":1,\"1214\":3,\"1215\":1,\"1218\":1,\"1219\":1,\"1368\":2,\"1524\":1,\"1536\":2,\"1625\":1,\"1632\":1,\"1652\":1,\"1653\":1,\"1723\":4,\"1781\":1}}],[\"s\",{\"1\":{\"7\":5,\"15\":2,\"125\":1,\"301\":2,\"564\":1,\"618\":2,\"675\":2,\"940\":1,\"941\":1,\"985\":4,\"990\":5,\"991\":2,\"993\":17,\"1067\":2,\"1108\":3,\"1114\":3,\"1169\":2,\"1173\":1,\"1174\":4,\"1175\":2,\"1181\":2,\"1316\":1,\"1322\":2,\"1350\":1,\"1560\":1,\"1567\":2,\"1666\":4,\"1696\":2,\"1697\":1,\"1735\":1,\"1736\":1,\"1740\":1,\"1868\":6,\"1877\":4,\"1878\":1}}],[\"sepia\",{\"1\":{\"1855\":3}}],[\"separator\",{\"1\":{\"1567\":1}}],[\"separator=\",{\"1\":{\"538\":1}}],[\"seata\",{\"0\":{\"1287\":1},\"1\":{\"1284\":1,\"1287\":2}}],[\"searchhit\",{\"1\":{\"51\":2}}],[\"searchhits\",{\"1\":{\"51\":4}}],[\"searchresponse\",{\"1\":{\"51\":1}}],[\"searchrequest\",{\"1\":{\"51\":4}}],[\"search\",{\"1\":{\"48\":1,\"51\":1,\"53\":1,\"632\":2,\"998\":1,\"1634\":1,\"1694\":2}}],[\"sent\",{\"1\":{\"1409\":1}}],[\"sentinel发送sentinel\",{\"1\":{\"941\":1}}],[\"sentinel发现主服务器有新的从服务器后\",{\"1\":{\"940\":1}}],[\"sentinels连接网络\",{\"1\":{\"940\":1}}],[\"sentinels字典\",{\"1\":{\"940\":2}}],[\"sentinelstate\",{\"1\":{\"939\":1}}],[\"sentinelstate结构保存和sentinel功能相关的状态信息\",{\"1\":{\"939\":1}}],[\"sentinel通过订阅连接接收来自主从服务器的信息\",{\"1\":{\"940\":1}}],[\"sentinel与主从服务器建立订阅信息后\",{\"1\":{\"940\":1}}],[\"sentinel默认每1s向所有建立命令连接的实例\",{\"1\":{\"941\":1}}],[\"sentinel默认每10s通过命令连接向主服务器发送info命令\",{\"1\":{\"940\":1}}],[\"sentinel默认每2s通过命令连接向所有主\",{\"1\":{\"940\":1}}],[\"sentinel无须用户提供从服务器地址信息\",{\"1\":{\"940\":1}}],[\"sentinel将创建两个异步网络连接\",{\"1\":{\"939\":1}}],[\"sentinel\",{\"0\":{\"938\":1},\"1\":{\"938\":2,\"939\":5,\"940\":5,\"941\":1,\"1589\":1}}],[\"sendto\",{\"1\":{\"1461\":1}}],[\"sendreplytoclient函数\",{\"1\":{\"919\":1}}],[\"sendrpcrequest\",{\"1\":{\"99\":1}}],[\"sendfile\",{\"1\":{\"801\":2,\"802\":1,\"1486\":1}}],[\"sendfetches\",{\"1\":{\"484\":1}}],[\"sender读取记录收集器\",{\"1\":{\"450\":1}}],[\"sender\",{\"1\":{\"450\":2}}],[\"sendmsg\",{\"1\":{\"418\":1}}],[\"send\",{\"1\":{\"342\":1,\"445\":1,\"450\":1,\"456\":1,\"457\":1,\"461\":1,\"484\":1,\"792\":2,\"844\":3,\"856\":1,\"1488\":1}}],[\"sendsmswithoptions\",{\"1\":{\"14\":1}}],[\"sendsmsresponse\",{\"1\":{\"14\":5}}],[\"sendsmsrequest\",{\"1\":{\"14\":4}}],[\"sendsmscode\",{\"1\":{\"14\":2}}],[\"sendcode\",{\"1\":{\"14\":2}}],[\"see\",{\"1\":{\"755\":1}}],[\"seq\",{\"1\":{\"848\":1}}],[\"sequential\",{\"1\":{\"1173\":1,\"1181\":1}}],[\"sequenceid\",{\"1\":{\"849\":2}}],[\"sequence\",{\"0\":{\"740\":1},\"1\":{\"461\":1,\"828\":1}}],[\"sequelpro\",{\"1\":{\"666\":1}}],[\"sequel\",{\"1\":{\"666\":1}}],[\"seqnumber>作为判断重复数据的主键\",{\"1\":{\"461\":1}}],[\"selective\",{\"1\":{\"1411\":1}}],[\"selectimports\",{\"1\":{\"1058\":1,\"1269\":1,\"1598\":2,\"1613\":1}}],[\"selectionkey\",{\"1\":{\"785\":2,\"786\":11,\"787\":2,\"788\":6,\"789\":5,\"791\":4,\"863\":2,\"865\":1,\"867\":7,\"869\":2,\"873\":6}}],[\"selectdb\",{\"1\":{\"913\":1}}],[\"select命令原理即修改该指针\",{\"1\":{\"906\":1}}],[\"selectstrategy\",{\"1\":{\"870\":2,\"872\":4}}],[\"selectsinglenode\",{\"1\":{\"357\":1}}],[\"selected\",{\"1\":{\"865\":3}}],[\"selectedkeys\",{\"1\":{\"786\":2,\"791\":2}}],[\"select阻塞方法\",{\"1\":{\"786\":1}}],[\"selectnowsupplier\",{\"1\":{\"872\":1}}],[\"selectnow\",{\"1\":{\"785\":1,\"865\":1,\"872\":1}}],[\"selectnodes\",{\"1\":{\"357\":1}}],[\"select语句\",{\"1\":{\"622\":2}}],[\"selectpostin\",{\"1\":{\"538\":1}}],[\"selectperson\",{\"1\":{\"530\":1}}],[\"selectpersonsql\",{\"1\":{\"515\":1}}],[\"selectusers\",{\"1\":{\"531\":1,\"532\":1}}],[\"selectuserbyid\",{\"1\":{\"506\":2,\"507\":2,\"544\":1}}],[\"selectkey\",{\"1\":{\"530\":1}}],[\"selectmap\",{\"1\":{\"509\":1}}],[\"selectcursor\",{\"1\":{\"509\":1,\"544\":1}}],[\"selectlist\",{\"1\":{\"509\":1,\"544\":1}}],[\"selectone\",{\"1\":{\"509\":1}}],[\"selectortuple\",{\"1\":{\"870\":5}}],[\"selectorprovider\",{\"1\":{\"864\":1,\"870\":3}}],[\"selectorkey\",{\"1\":{\"786\":1}}],[\"selector\",{\"0\":{\"762\":1,\"784\":1},\"1\":{\"324\":1,\"450\":1,\"760\":1,\"762\":1,\"765\":1,\"784\":1,\"785\":11,\"786\":11,\"787\":2,\"788\":4,\"789\":4,\"791\":12,\"811\":1,\"813\":1,\"816\":1,\"863\":7,\"865\":2,\"866\":1,\"869\":5,\"870\":5,\"872\":2,\"1092\":1}}],[\"select>\",{\"1\":{\"506\":1,\"530\":1,\"531\":1,\"532\":1,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"1855\":1}}],[\"select\",{\"1\":{\"105\":1,\"110\":1,\"115\":1,\"118\":2,\"119\":1,\"120\":2,\"121\":2,\"124\":11,\"125\":4,\"126\":12,\"127\":5,\"128\":4,\"129\":29,\"506\":1,\"515\":1,\"529\":1,\"530\":4,\"531\":1,\"532\":1,\"535\":1,\"536\":1,\"537\":2,\"538\":1,\"542\":1,\"544\":1,\"552\":1,\"558\":3,\"574\":1,\"581\":1,\"582\":5,\"583\":12,\"584\":2,\"585\":4,\"586\":2,\"587\":3,\"588\":1,\"590\":1,\"591\":1,\"593\":7,\"594\":6,\"595\":2,\"596\":5,\"602\":1,\"603\":4,\"604\":3,\"605\":3,\"606\":2,\"607\":2,\"608\":4,\"609\":6,\"610\":3,\"611\":4,\"612\":1,\"614\":1,\"618\":6,\"622\":4,\"623\":3,\"628\":1,\"631\":2,\"634\":1,\"643\":1,\"675\":1,\"703\":5,\"705\":3,\"706\":1,\"707\":2,\"726\":1,\"727\":1,\"728\":1,\"729\":2,\"734\":2,\"737\":1,\"765\":1,\"785\":3,\"786\":1,\"791\":2,\"872\":3,\"1226\":5,\"1228\":2,\"1478\":1,\"1487\":5,\"1488\":1,\"1504\":1,\"1547\":1,\"1557\":3,\"1562\":4,\"1567\":17}}],[\"segmentfault\",{\"1\":{\"1304\":1}}],[\"segments控制\",{\"1\":{\"751\":1}}],[\"segment\",{\"0\":{\"694\":1},\"1\":{\"34\":1,\"37\":1,\"445\":3,\"467\":1,\"475\":3,\"476\":4,\"477\":2,\"749\":4,\"751\":4,\"839\":1}}],[\"secure\",{\"1\":{\"1631\":1}}],[\"securityexception\",{\"1\":{\"1135\":1}}],[\"securityconstants\",{\"1\":{\"1088\":1,\"1095\":1}}],[\"securitymanager\",{\"1\":{\"1088\":2,\"1095\":1,\"1108\":1,\"1116\":1}}],[\"security\",{\"1\":{\"14\":3,\"385\":1,\"1088\":6,\"1095\":3}}],[\"sections\",{\"1\":{\"940\":2}}],[\"sec\",{\"1\":{\"928\":1}}],[\"secondmock\",{\"1\":{\"1714\":4,\"1715\":4}}],[\"secondarynamenode\",{\"1\":{\"1216\":1,\"1217\":1,\"1219\":1}}],[\"secondary\",{\"1\":{\"699\":1}}],[\"second\",{\"1\":{\"129\":1,\"512\":1,\"1490\":1,\"1567\":1}}],[\"seconds\",{\"1\":{\"93\":1,\"643\":1,\"817\":1,\"1263\":1,\"1369\":1}}],[\"secrets\",{\"1\":{\"1791\":4}}],[\"secret>\",{\"1\":{\"15\":1}}],[\"secret\",{\"1\":{\"15\":1,\"1791\":1}}],[\"sessiondescription\",{\"1\":{\"1861\":2}}],[\"session复用\",{\"1\":{\"1302\":1}}],[\"sessiontimeoutms\",{\"1\":{\"1180\":1}}],[\"sessiontimeoutms=60000\",{\"1\":{\"1180\":1}}],[\"session|global\",{\"1\":{\"737\":1}}],[\"session作用域\",{\"1\":{\"542\":1}}],[\"sessionrepository\",{\"1\":{\"25\":1}}],[\"sessionrepositoryfilter\",{\"1\":{\"25\":1}}],[\"session的超时时间\",{\"1\":{\"24\":1}}],[\"session<\",{\"1\":{\"24\":1}}],[\"session原理\",{\"1\":{\"17\":1}}],[\"sessionid\",{\"1\":{\"17\":2,\"1169\":2,\"1174\":1,\"1642\":1}}],[\"session\",{\"0\":{\"17\":1,\"18\":1,\"19\":1,\"23\":1},\"1\":{\"15\":3,\"17\":6,\"19\":2,\"20\":2,\"21\":2,\"22\":3,\"24\":5,\"25\":8,\"26\":1,\"27\":5,\"405\":1,\"483\":1,\"485\":1,\"507\":2,\"512\":2,\"513\":1,\"514\":2,\"542\":1,\"543\":1,\"544\":1,\"1162\":1,\"1596\":4,\"1642\":4,\"1643\":5,\"1860\":2,\"1862\":1}}],[\"seriablizable\",{\"1\":{\"1557\":1}}],[\"serial的多线程版本\",{\"1\":{\"1525\":1}}],[\"serial的老年代版本\",{\"1\":{\"1525\":1}}],[\"serialver\",{\"1\":{\"228\":1}}],[\"serial收集器\",{\"1\":{\"173\":1}}],[\"serial\",{\"0\":{\"173\":1},\"1\":{\"172\":2,\"173\":3,\"174\":1,\"176\":1,\"1525\":2}}],[\"serialization\",{\"1\":{\"456\":2,\"457\":2,\"489\":1}}],[\"serializable\",{\"1\":{\"3\":1,\"737\":1,\"1035\":1,\"1275\":1,\"1552\":1,\"1612\":1}}],[\"serialized\",{\"1\":{\"453\":2}}],[\"serializertype\",{\"1\":{\"849\":2}}],[\"serializer=org\",{\"1\":{\"457\":2}}],[\"serializer\",{\"1\":{\"91\":1,\"456\":2}}],[\"ser\",{\"1\":{\"848\":1}}],[\"serve\",{\"1\":{\"1125\":1}}],[\"serverless\",{\"1\":{\"1792\":1}}],[\"serverfix\",{\"1\":{\"1338\":12}}],[\"server5\",{\"1\":{\"1203\":3}}],[\"server4\",{\"1\":{\"1203\":4}}],[\"server3\",{\"1\":{\"1203\":9}}],[\"server2\",{\"1\":{\"1203\":7}}],[\"server1\",{\"1\":{\"1203\":9}}],[\"serverport=8081\",{\"1\":{\"1164\":1}}],[\"servercron每100ms执行一次\",{\"1\":{\"928\":1}}],[\"servercron函数\",{\"0\":{\"928\":1}}],[\"servercron函数的工作包括\",{\"1\":{\"920\":1}}],[\"servercron服务器周期性函数每隔100ms执行一次维护\",{\"1\":{\"912\":1}}],[\"server层提供统一的调用接口\",{\"1\":{\"672\":1}}],[\"servers=localhost\",{\"1\":{\"457\":1,\"489\":1}}],[\"servers\",{\"1\":{\"456\":1,\"488\":1,\"807\":1}}],[\"serversocketchannal\",{\"1\":{\"856\":1}}],[\"serversocketchannel实现\",{\"1\":{\"813\":1}}],[\"serversocketchannel\",{\"1\":{\"760\":1,\"782\":3,\"783\":3,\"786\":3,\"787\":3,\"791\":2,\"811\":1,\"813\":2,\"854\":1,\"859\":1,\"863\":2,\"864\":3,\"873\":2}}],[\"serversocket\",{\"1\":{\"343\":3,\"1125\":2}}],[\"serverhandler\",{\"1\":{\"101\":1}}],[\"serverbootstrapacceptor\",{\"1\":{\"864\":1,\"865\":1,\"873\":2}}],[\"serverbootstrap\",{\"1\":{\"93\":3,\"811\":1,\"813\":1,\"818\":1,\"854\":1,\"856\":1,\"863\":3,\"873\":1}}],[\"server\",{\"0\":{\"93\":1},\"1\":{\"15\":1,\"19\":1,\"89\":1,\"93\":1,\"99\":1,\"101\":1,\"445\":1,\"446\":6,\"553\":1,\"569\":1,\"643\":1,\"671\":1,\"674\":2,\"788\":1,\"792\":2,\"797\":1,\"813\":2,\"856\":6,\"864\":1,\"929\":5,\"940\":2,\"1125\":3,\"1154\":1,\"1155\":1,\"1170\":1,\"1196\":4,\"1199\":1,\"1200\":1,\"1203\":3,\"1301\":4,\"1337\":2,\"1366\":3,\"1402\":3,\"1540\":5,\"1574\":5,\"1859\":1,\"1871\":2,\"1873\":1}}],[\"servcieloader\",{\"1\":{\"383\":1}}],[\"service层\",{\"1\":{\"1604\":1}}],[\"serviceimpl1\",{\"1\":{\"1595\":1}}],[\"serviceimpl$$enhancerbycglib$$27e8234e\",{\"1\":{\"1016\":3}}],[\"serviceimpl\",{\"1\":{\"1015\":4,\"1016\":5}}],[\"service技术整合\",{\"1\":{\"434\":1}}],[\"serviceloader\",{\"1\":{\"383\":2}}],[\"serviceloader<slf4jserviceprovider>\",{\"1\":{\"383\":1}}],[\"services\",{\"1\":{\"383\":1}}],[\"servicehandlergroup\",{\"1\":{\"93\":3}}],[\"servicename\",{\"1\":{\"92\":1}}],[\"servicemap\",{\"1\":{\"92\":1}}],[\"servicemanager\",{\"1\":{\"78\":6}}],[\"serviceprovider\",{\"1\":{\"91\":1,\"92\":2,\"97\":1,\"101\":1}}],[\"servicediscovery\",{\"1\":{\"91\":1}}],[\"serviceregistry\",{\"1\":{\"91\":1}}],[\"service\",{\"0\":{\"78\":1},\"1\":{\"27\":1,\"78\":6,\"89\":1,\"90\":3,\"93\":1,\"383\":1,\"403\":1,\"418\":1,\"822\":2,\"1015\":4,\"1128\":1,\"1225\":4,\"1594\":2,\"1608\":1,\"1625\":1,\"1643\":1,\"1723\":1}}],[\"servlet\",{\"1\":{\"24\":2}}],[\"servletresponse\",{\"1\":{\"15\":1}}],[\"setlocaldescription\",{\"1\":{\"1861\":3}}],[\"setup\",{\"1\":{\"1709\":1,\"1791\":2}}],[\"setusername\",{\"1\":{\"14\":1}}],[\"set等\",{\"1\":{\"1498\":1}}],[\"setremotedescription\",{\"1\":{\"1861\":3}}],[\"setrejectedexecutionhandler\",{\"1\":{\"1120\":1}}],[\"setreturncallback\",{\"1\":{\"417\":1,\"421\":1}}],[\"setkeepalivetime\",{\"1\":{\"1120\":1}}],[\"setorder\",{\"1\":{\"1059\":1}}],[\"setout\",{\"1\":{\"322\":1}}],[\"setbit\",{\"0\":{\"975\":1},\"1\":{\"975\":2}}],[\"setbyte\",{\"1\":{\"831\":1}}],[\"setblocker\",{\"1\":{\"362\":1,\"363\":6}}],[\"setfailure\",{\"1\":{\"822\":2}}],[\"setname\",{\"1\":{\"330\":1,\"418\":1,\"791\":1,\"1718\":1}}],[\"setnickname\",{\"1\":{\"15\":1}}],[\"set系列集合的底层就是map实现的\",{\"1\":{\"305\":1}}],[\"setjavalangrefaccess\",{\"1\":{\"188\":1}}],[\"setdata等方法时\",{\"1\":{\"1189\":1}}],[\"setdata\",{\"1\":{\"1181\":1}}],[\"setdaemon\",{\"1\":{\"188\":1,\"196\":1,\"1108\":1}}],[\"setdomainname\",{\"1\":{\"24\":1}}],[\"setimages\",{\"1\":{\"1369\":1}}],[\"setifabsent\",{\"1\":{\"1263\":1}}],[\"setisolationlevel\",{\"1\":{\"1038\":1,\"1039\":1}}],[\"setinfo\",{\"1\":{\"1369\":1}}],[\"setint\",{\"1\":{\"846\":1}}],[\"setinitialvalue\",{\"1\":{\"154\":1}}],[\"setid\",{\"1\":{\"15\":1}}],[\"set<integer>\",{\"1\":{\"1068\":1}}],[\"set<eventexecutor>\",{\"1\":{\"817\":1}}],[\"set<string>\",{\"1\":{\"69\":2}}],[\"set<v>>这样的哈皮形式\",{\"1\":{\"67\":1}}],[\"setmemory\",{\"1\":{\"1136\":3}}],[\"setmessageconverter\",{\"1\":{\"417\":1}}],[\"setmessage\",{\"1\":{\"384\":1}}],[\"setmaximumpoolsize\",{\"1\":{\"1120\":1}}],[\"setmultimap\",{\"1\":{\"67\":1}}],[\"setmultimap<string\",{\"1\":{\"67\":1}}],[\"setmobile\",{\"1\":{\"14\":1}}],[\"setthreadfactory\",{\"1\":{\"1120\":1}}],[\"setters\",{\"1\":{\"1381\":1}}],[\"setter\",{\"1\":{\"1096\":1,\"1120\":1,\"1599\":1}}],[\"settemplateparam\",{\"1\":{\"14\":1}}],[\"settemplatecode\",{\"1\":{\"14\":1}}],[\"settransactionmanager\",{\"1\":{\"1059\":1}}],[\"settransactionattributesource\",{\"1\":{\"1059\":2}}],[\"settime\",{\"1\":{\"353\":1}}],[\"settingselement\",{\"1\":{\"541\":1}}],[\"settingsasproperties\",{\"1\":{\"541\":1}}],[\"settings>\",{\"1\":{\"519\":1}}],[\"settings\",{\"0\":{\"519\":1},\"1\":{\"42\":2,\"541\":5,\"1791\":3}}],[\"setexpiresin\",{\"1\":{\"15\":2}}],[\"setexclusiveownerthread\",{\"1\":{\"9\":5}}],[\"setaddress\",{\"1\":{\"1264\":1,\"1718\":1}}],[\"setadvice\",{\"1\":{\"1059\":1}}],[\"setaccessible\",{\"1\":{\"309\":1,\"310\":1,\"311\":1,\"1135\":1}}],[\"setaccesstoken\",{\"1\":{\"15\":2}}],[\"setattribute\",{\"1\":{\"15\":1}}],[\"setcallback\",{\"1\":{\"1009\":1,\"1016\":1,\"1022\":1}}],[\"setcorepoolsize\",{\"1\":{\"1120\":1}}],[\"setconfirmcallback\",{\"1\":{\"417\":1,\"420\":1}}],[\"setcount\",{\"1\":{\"66\":1}}],[\"setcookiename\",{\"1\":{\"24\":1}}],[\"setcreatetime\",{\"1\":{\"14\":1}}],[\"setcurrentblocker\",{\"1\":{\"8\":2}}],[\"setparameters\",{\"1\":{\"523\":1}}],[\"setpassword\",{\"1\":{\"14\":1}}],[\"setpropagationbehavior\",{\"1\":{\"1038\":1,\"1039\":1}}],[\"setproperties\",{\"1\":{\"522\":1,\"523\":1}}],[\"setproperty\",{\"1\":{\"305\":1,\"1016\":1}}],[\"setpriority\",{\"1\":{\"188\":1,\"196\":1,\"1088\":1,\"1108\":1}}],[\"setprevrelaxed\",{\"1\":{\"6\":2,\"8\":1}}],[\"setphonenumbers\",{\"1\":{\"14\":1}}],[\"setsaleattr\",{\"1\":{\"1369\":1}}],[\"setsuperclass\",{\"1\":{\"1009\":1,\"1016\":1}}],[\"setsuccess\",{\"1\":{\"822\":2}}],[\"setslot\",{\"1\":{\"946\":3}}],[\"sets\",{\"1\":{\"71\":2}}],[\"setsocialuid\",{\"1\":{\"15\":1}}],[\"setsignname\",{\"1\":{\"14\":1}}],[\"setstate\",{\"1\":{\"9\":3,\"1114\":1,\"1115\":1}}],[\"set\",{\"0\":{\"1496\":1},\"1\":{\"14\":1,\"71\":1,\"109\":1,\"117\":1,\"119\":1,\"128\":2,\"130\":5,\"154\":1,\"224\":1,\"304\":3,\"310\":1,\"460\":1,\"515\":1,\"530\":1,\"537\":3,\"579\":2,\"599\":2,\"612\":1,\"614\":1,\"620\":2,\"631\":5,\"663\":1,\"671\":1,\"674\":8,\"729\":2,\"734\":3,\"737\":1,\"828\":1,\"846\":3,\"913\":4,\"985\":2,\"1012\":1,\"1033\":1,\"1055\":1,\"1068\":2,\"1116\":1,\"1128\":1,\"1135\":1,\"1148\":2,\"1156\":1,\"1175\":1,\"1226\":1,\"1228\":2,\"1256\":1,\"1261\":1,\"1263\":2,\"1326\":1,\"1338\":1,\"1366\":1,\"1368\":2,\"1514\":1,\"1570\":2,\"1579\":1,\"1582\":1,\"1658\":2,\"1712\":1}}],[\"semaphore\",{\"0\":{\"159\":1,\"1460\":1},\"1\":{\"2\":1,\"9\":1,\"137\":1,\"159\":8,\"1463\":1,\"1516\":1}}],[\"并合并\",{\"1\":{\"1877\":1}}],[\"并推送到一个公开仓库中\",{\"1\":{\"1790\":1}}],[\"并认为伊斯兰世界有义务和权利恢复这一学问\",{\"1\":{\"1767\":1}}],[\"并认为该中间状态的存在不会影响系统的整体可用性\",{\"1\":{\"1279\":1,\"1618\":1}}],[\"并获得其认可\",{\"1\":{\"1762\":1}}],[\"并可以控制该对象的行为\",{\"1\":{\"1708\":1}}],[\"并可以对应用层协议进行深度解析和处理\",{\"1\":{\"1297\":1}}],[\"并移到头部\",{\"1\":{\"1651\":1}}],[\"并打印时间戳\",{\"1\":{\"1634\":1}}],[\"并打日志记录key\",{\"1\":{\"1236\":1}}],[\"并避免任何单个资源的过载\",{\"1\":{\"1617\":1}}],[\"并会将请求涉及到的拦截器和\",{\"1\":{\"1605\":1}}],[\"并给予客户端响应\",{\"1\":{\"1605\":1}}],[\"并添加到三级缓存中\",{\"1\":{\"1599\":1}}],[\"并添加到自己的clusterstate\",{\"1\":{\"945\":2}}],[\"并作为参数来创建\",{\"1\":{\"1508\":2}}],[\"并更新sizectl为新数组大小的0\",{\"1\":{\"1497\":1}}],[\"并更新各自保存的主服务器sentinelredisinstance\",{\"1\":{\"940\":1}}],[\"并确保达到最终期限的请求被优先处理\",{\"1\":{\"1483\":1}}],[\"并确认\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"并进行筛选\",{\"1\":{\"1566\":1}}],[\"并进行重试来解决冲突\",{\"1\":{\"1468\":1}}],[\"并进行优化\",{\"1\":{\"237\":1}}],[\"并被内核置为睡眠状态\",{\"1\":{\"1468\":1}}],[\"并等待某个事件的出现\",{\"1\":{\"1450\":1}}],[\"并响应\",{\"1\":{\"1414\":1}}],[\"并没有改变任何分支的指针\",{\"1\":{\"1344\":1}}],[\"并没有阻止对原始集合的修改操作\",{\"1\":{\"64\":1}}],[\"并显示处于哪一侧\",{\"1\":{\"1342\":1}}],[\"并图形化分支合并\",{\"1\":{\"1322\":1}}],[\"并限制条目数为\",{\"1\":{\"1322\":1}}],[\"并把数据从内核缓冲区拷贝到应用程序的缓冲区中\",{\"1\":{\"1478\":1}}],[\"并把数据放到流水线上准备进行操作\",{\"1\":{\"312\":1}}],[\"并把状态设为未完成\",{\"1\":{\"1291\":1,\"1373\":1}}],[\"并驱动分支事务提交或回滚\",{\"1\":{\"1287\":1}}],[\"并反映是否可以提交\",{\"1\":{\"1283\":1}}],[\"并广播给其它服务器\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"并广播给所有节点\",{\"1\":{\"948\":1}}],[\"并转换为\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"并就该提议作出运算\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"并基于远程配置的灰度比例决定依赖旧集群还是新集群\",{\"1\":{\"1240\":1}}],[\"并观察写操作的性能\",{\"1\":{\"1235\":1}}],[\"并维持从老集群读不变\",{\"1\":{\"1235\":1}}],[\"并接入新的\",{\"1\":{\"1235\":1}}],[\"并告知客户端最近的\",{\"1\":{\"1220\":1}}],[\"并告知运行id和初始复制偏移量\",{\"1\":{\"935\":1}}],[\"并成为\",{\"1\":{\"1203\":1}}],[\"并成功返回\",{\"1\":{\"143\":1}}],[\"并以一系列简单易用的接口提供给用户使用\",{\"1\":{\"1161\":1}}],[\"并配置主从同步\",{\"1\":{\"1147\":1}}],[\"并配置非阻塞\",{\"1\":{\"863\":1}}],[\"并判断是否需要添加新\",{\"1\":{\"1115\":1}}],[\"并运行任务\",{\"1\":{\"1114\":1}}],[\"并中断进行中的任务\",{\"1\":{\"1112\":1}}],[\"并处理入队任务\",{\"1\":{\"1112\":1}}],[\"并\",{\"1\":{\"1109\":1}}],[\"并消除这些锁\",{\"1\":{\"1080\":1}}],[\"并让\",{\"1\":{\"1076\":1}}],[\"并加入发送缓冲区\",{\"1\":{\"1395\":1}}],[\"并加载到容器中\",{\"1\":{\"1598\":1}}],[\"并加载到\",{\"1\":{\"1014\":1,\"1532\":1}}],[\"并加上\",{\"1\":{\"356\":1}}],[\"并放入监听器集合\",{\"1\":{\"1379\":1}}],[\"并放入\",{\"1\":{\"1012\":1}}],[\"并放入缓存中\",{\"1\":{\"544\":1}}],[\"并实例化对应的\",{\"1\":{\"1012\":2}}],[\"并删除该元素\",{\"1\":{\"986\":1}}],[\"并删除过期键\",{\"1\":{\"908\":1,\"1573\":1}}],[\"并保存至\",{\"1\":{\"966\":1}}],[\"并保证正常可用\",{\"1\":{\"118\":1}}],[\"并负责处理相应的槽\",{\"1\":{\"948\":1}}],[\"并再次进行选举\",{\"1\":{\"948\":1}}],[\"并再次发送命令\",{\"1\":{\"947\":1}}],[\"并记录下当前持有锁的线程\",{\"1\":{\"1517\":1}}],[\"并记录下日志\",{\"1\":{\"612\":1}}],[\"并记录在对应的节点的fail\",{\"1\":{\"948\":1}}],[\"并开启\",{\"1\":{\"1410\":1}}],[\"并开启非阻塞\",{\"1\":{\"783\":1}}],[\"并开始复制\",{\"1\":{\"948\":1}}],[\"并创建一个\",{\"1\":{\"1488\":1}}],[\"并创建sentinel之间的命令连接\",{\"1\":{\"940\":1}}],[\"并创建命令表\",{\"1\":{\"929\":1}}],[\"并关联用于处理复制工作的文件事件处理器\",{\"1\":{\"936\":1}}],[\"并关联接口方法和\",{\"1\":{\"541\":1}}],[\"并清空缓冲区\",{\"1\":{\"926\":1}}],[\"并向客户端返回代表事务执行失败的空回复\",{\"1\":{\"960\":1}}],[\"并向文件事件分派器传送那些产生了事件的套接字\",{\"1\":{\"919\":1}}],[\"并向生产者抛出notenoughreplicas异常\",{\"1\":{\"460\":1}}],[\"并初始化\",{\"1\":{\"865\":1}}],[\"并为集群中其它节点创建一个对应的节点结构\",{\"1\":{\"945\":1}}],[\"并为每个字节记录偏移量\",{\"1\":{\"935\":1}}],[\"并为新元素分配空间\",{\"1\":{\"889\":1}}],[\"并为ht\",{\"1\":{\"883\":1}}],[\"并为\",{\"1\":{\"864\":1}}],[\"并为重分配集中的每个region维护一个转发表\",{\"1\":{\"179\":1}}],[\"并做出响应\",{\"1\":{\"846\":1}}],[\"并注册后续关注的事件\",{\"1\":{\"787\":1}}],[\"并注册感兴趣事件\",{\"1\":{\"786\":1,\"863\":1,\"865\":1}}],[\"并注册该端口\",{\"1\":{\"342\":1}}],[\"并修改\",{\"1\":{\"1323\":1}}],[\"并修改相关的统计\",{\"1\":{\"1090\":1}}],[\"并修改相应的其它信息\",{\"1\":{\"747\":1}}],[\"并修改tams指针以便正确分配对象\",{\"1\":{\"177\":1,\"1525\":1}}],[\"并定期进行更新\",{\"1\":{\"720\":1}}],[\"并存储在数据字典中\",{\"1\":{\"698\":1}}],[\"并存储在文件系统上的单个数据文件中\",{\"1\":{\"639\":1}}],[\"并借助前一个槽找到所在槽中主键值最小的记录\",{\"1\":{\"690\":1}}],[\"并借鉴了\",{\"1\":{\"158\":1,\"1214\":1}}],[\"并新增对应的槽\",{\"1\":{\"690\":1}}],[\"并分别完成\",{\"1\":{\"1641\":1}}],[\"并分配到不同的服务器去执行\",{\"1\":{\"1221\":1}}],[\"并分析慢\",{\"1\":{\"657\":1}}],[\"并分布在多个\",{\"1\":{\"443\":1}}],[\"并输出注释信息\",{\"1\":{\"643\":1}}],[\"并每秒刷新到磁盘一次\",{\"1\":{\"638\":1}}],[\"并包含表1和表2交集部分的数据\",{\"1\":{\"604\":1}}],[\"并包含表1和表2交集部分的数据select\",{\"1\":{\"604\":1}}],[\"并完成与存储引擎的交互\",{\"1\":{\"570\":1}}],[\"并完成缓存的查询\",{\"1\":{\"570\":1}}],[\"并调用\",{\"1\":{\"544\":1}}],[\"并调用其\",{\"1\":{\"247\":1}}],[\"并执行其他线程\",{\"1\":{\"1512\":1}}],[\"并执行后置处理\",{\"1\":{\"1379\":2}}],[\"并执行\",{\"1\":{\"544\":1,\"1015\":1,\"1155\":1,\"1861\":1}}],[\"并解析成具体的操作\",{\"1\":{\"1563\":1}}],[\"并解析\",{\"1\":{\"541\":1}}],[\"并解析字节码文件\",{\"1\":{\"242\":1}}],[\"并在入队前标记已访问\",{\"1\":{\"1001\":1}}],[\"并在exec命令执行时\",{\"1\":{\"960\":1}}],[\"并在主服务器进入下线状态时\",{\"1\":{\"938\":1}}],[\"并在需要时让出执行权\",{\"1\":{\"921\":1}}],[\"并在\",{\"1\":{\"529\":1}}],[\"并覆盖之前读取过的同名属性\",{\"1\":{\"518\":2}}],[\"并支持渐进重平衡过程\",{\"1\":{\"497\":1}}],[\"并支持反向映射\",{\"1\":{\"71\":1}}],[\"并对其完成相应的优化如确定表的查询的顺序\",{\"1\":{\"570\":1}}],[\"并对表内另一行加行级排他锁\",{\"1\":{\"560\":1}}],[\"并对消费者按字典序排序\",{\"1\":{\"495\":1}}],[\"并对数据继续校验\",{\"1\":{\"246\":1}}],[\"并触发再平衡\",{\"1\":{\"483\":1}}],[\"并持久化到一个特殊的事务topic\",{\"1\":{\"461\":1}}],[\"并有许多高级功能\",{\"1\":{\"432\":1}}],[\"并指定一个\",{\"1\":{\"1628\":1}}],[\"并指定感兴趣的事件\",{\"1\":{\"785\":1}}],[\"并指定默认环境\",{\"1\":{\"524\":1}}],[\"并指定是否重入队\",{\"1\":{\"422\":1}}],[\"并指定是否批量\",{\"1\":{\"422\":1}}],[\"并指定是否累积确认\",{\"1\":{\"422\":1}}],[\"并指定文件名和格式\",{\"1\":{\"232\":1}}],[\"并将本地的\",{\"1\":{\"1791\":1}}],[\"并将他们带上伊斯兰教的正道\",{\"1\":{\"1767\":1}}],[\"并将其初始化为默认值\",{\"1\":{\"1527\":1}}],[\"并将其解析为直接引用\",{\"1\":{\"244\":1}}],[\"并将虚拟节点也映射到哈希环上\",{\"1\":{\"1489\":1}}],[\"并将数据映射到\",{\"1\":{\"1395\":1}}],[\"并将数据存入缓存\",{\"1\":{\"1257\":1,\"1580\":1}}],[\"并将票投给\",{\"1\":{\"1203\":1}}],[\"并将票投给自己\",{\"1\":{\"1203\":1}}],[\"并将请求转发processor处理\",{\"1\":{\"1126\":1}}],[\"并将结果封装成\",{\"1\":{\"1111\":1}}],[\"并将客户端添加到\",{\"1\":{\"979\":1}}],[\"并将所有新扩展空间的二进制位置0\",{\"1\":{\"975\":1}}],[\"并将校验和改成脚本\",{\"1\":{\"967\":1}}],[\"并将全部结果返回给客户端\",{\"1\":{\"959\":1}}],[\"并将类型转换后的元素放置到正确的位上\",{\"1\":{\"889\":1}}],[\"并将该请求放入\",{\"1\":{\"856\":1}}],[\"并将\",{\"1\":{\"786\":1}}],[\"并将用户的姓名和专业插入到所创建的一张新表\",{\"1\":{\"634\":1}}],[\"并将消息推送到队列中\",{\"1\":{\"413\":1}}],[\"并自动将\",{\"1\":{\"1708\":1}}],[\"并自动跟踪\",{\"1\":{\"1338\":1}}],[\"并自动归档旧日志\",{\"1\":{\"388\":1}}],[\"并自动加入\",{\"1\":{\"195\":1}}],[\"并返回在常量池中的地址\",{\"1\":{\"1536\":1}}],[\"并返回此文件的\",{\"1\":{\"1220\":1}}],[\"并返回这个位的值\",{\"1\":{\"974\":1}}],[\"并返回\",{\"1\":{\"383\":1}}],[\"并返回常量池中的该对象\",{\"1\":{\"300\":1}}],[\"并于2017年9月25日成为\",{\"1\":{\"426\":1}}],[\"并于\",{\"1\":{\"376\":1}}],[\"并重置自增计数器\",{\"1\":{\"1567\":1}}],[\"并重置工作区和暂存区到该提交状态\",{\"1\":{\"1324\":1}}],[\"并重启mysql服务\",{\"1\":{\"1155\":1}}],[\"并重新创建该表\",{\"1\":{\"575\":1}}],[\"并重新设置关联的路由键\",{\"1\":{\"425\":1}}],[\"并重设\",{\"1\":{\"366\":1}}],[\"并重写其\",{\"1\":{\"254\":1}}],[\"并生成对应class对象的重要组件\",{\"1\":{\"254\":1}}],[\"并标记热点代码\",{\"1\":{\"242\":1}}],[\"并标记清理中状态\",{\"1\":{\"188\":1}}],[\"并提供了默认配置\",{\"1\":{\"1609\":1}}],[\"并提供鉴权认证\",{\"1\":{\"1303\":1}}],[\"并提供强大的工具用于分析录制的数据\",{\"1\":{\"238\":1}}],[\"并提供垃圾回收分析工具\",{\"1\":{\"237\":1}}],[\"并提供线程分析工具\",{\"1\":{\"237\":1,\"238\":1}}],[\"并提供一套工具用于分析堆转储文件\",{\"1\":{\"238\":1}}],[\"并提供一套强大的工具用于分析堆转储文件\",{\"1\":{\"237\":1}}],[\"并提供一个简单的基于web的用户界面\",{\"1\":{\"233\":1}}],[\"并监视其运行时信息\",{\"1\":{\"236\":1}}],[\"并启动jhat服务器\",{\"1\":{\"233\":1}}],[\"并检查该符号引用代表的类是否已被加载\",{\"1\":{\"214\":1}}],[\"并统计回收价值最高的region构成回收集\",{\"1\":{\"178\":1}}],[\"并根据配置的路由规则\",{\"1\":{\"1296\":1}}],[\"并根据\",{\"1\":{\"1026\":1}}],[\"并根据套接字产生的事件的类型调用相应的事件处理器\",{\"1\":{\"919\":1,\"1572\":1}}],[\"并根据类型加入insert\",{\"1\":{\"751\":1}}],[\"并根据工作地址分组\",{\"1\":{\"585\":2}}],[\"并根据返回的\",{\"1\":{\"450\":1}}],[\"并根据性能监控进行一些不可靠的激进优化\",{\"1\":{\"267\":1}}],[\"并根据程序的运行情况进行动态优化\",{\"1\":{\"242\":1}}],[\"并根据各个区域的垃圾回收效率来动态调整回收策略\",{\"1\":{\"177\":1}}],[\"并根据负载均衡选择节点\",{\"1\":{\"101\":1}}],[\"并暴露加锁的对外方法\",{\"1\":{\"162\":1}}],[\"并恢复另一个线程的状态\",{\"1\":{\"134\":1}}],[\"并行执行大批次任务\",{\"1\":{\"1120\":1}}],[\"并行执行子任务\",{\"1\":{\"1120\":1}}],[\"并行度高\",{\"1\":{\"478\":1}}],[\"并行与并发\",{\"0\":{\"335\":1}}],[\"并行计算任务共享一个线程池\",{\"1\":{\"153\":1}}],[\"并行\",{\"1\":{\"134\":1,\"335\":1}}],[\"并过滤大于10000的数据\",{\"1\":{\"124\":1}}],[\"并集计算等\",{\"1\":{\"1658\":1}}],[\"并集\",{\"1\":{\"81\":1}}],[\"并使用一个缓冲区记录从现在开始执行的所有写命令\",{\"1\":{\"934\":1}}],[\"并使用\",{\"1\":{\"78\":1,\"1369\":1,\"1375\":1}}],[\"并通过链表维护元素的插入顺序\",{\"1\":{\"1496\":1}}],[\"并通过消息在集群内交换信息\",{\"1\":{\"948\":1}}],[\"并通过\",{\"1\":{\"414\":1}}],[\"并通过各种手段进行优化\",{\"1\":{\"266\":1}}],[\"并通过分段锁实现线程安全\",{\"1\":{\"73\":1}}],[\"并通知浏览器中写入\",{\"1\":{\"27\":1,\"1643\":1}}],[\"并用信号量控制进来的请求数\",{\"1\":{\"1375\":1}}],[\"并用连接器来描述这种连接机制\",{\"1\":{\"433\":1}}],[\"并用\",{\"1\":{\"58\":1}}],[\"并不是以二进制存储的\",{\"1\":{\"1577\":1}}],[\"并不是将这个记录本身从磁盘读出来\",{\"1\":{\"1546\":1}}],[\"并不是真正无拷贝\",{\"1\":{\"802\":1}}],[\"并不涉及整体网络中的流量\",{\"1\":{\"1412\":1}}],[\"并不显式跟踪文件移动\",{\"1\":{\"1321\":1}}],[\"并不能提高性能\",{\"1\":{\"1077\":1}}],[\"并不能保证消息一定会被投递到目标\",{\"1\":{\"420\":1}}],[\"并不一致\",{\"1\":{\"1077\":1}}],[\"并不会继承到另一个测试方法\",{\"1\":{\"1711\":1}}],[\"并不会创建新线程\",{\"1\":{\"1090\":1}}],[\"并不会立即执行\",{\"1\":{\"1065\":1}}],[\"并不会阻塞主线程\",{\"1\":{\"820\":1}}],[\"并不直接管理事务\",{\"1\":{\"1047\":1}}],[\"并不立即回收多余空间\",{\"1\":{\"879\":1}}],[\"并不发生内存复制\",{\"1\":{\"831\":1}}],[\"并不想让消费者立即拿到消息\",{\"1\":{\"423\":1}}],[\"并不断新增新的功能特性\",{\"1\":{\"38\":1}}],[\"并不实际代表某个线程\",{\"1\":{\"4\":1}}],[\"并且地铁上没有信号\",{\"1\":{\"1826\":1}}],[\"并且开始上真的业务需求了\",{\"1\":{\"1777\":1}}],[\"并且开启了\",{\"1\":{\"1419\":1}}],[\"并且对网络有一定限制\",{\"1\":{\"1810\":1}}],[\"并且对应一个线程使用\",{\"1\":{\"1629\":1}}],[\"并且对事务的完整性\",{\"1\":{\"682\":1}}],[\"并且大大提高\",{\"1\":{\"1590\":1}}],[\"并且大多数操作不能被重排序\",{\"1\":{\"145\":1}}],[\"并且默认就是行级锁\",{\"1\":{\"1541\":1}}],[\"并且默认开启了池化技术\",{\"1\":{\"826\":1}}],[\"并且所有对象共享同一个静态变量的值\",{\"1\":{\"1534\":1}}],[\"并且应该被捕获进行处理\",{\"1\":{\"1533\":1}}],[\"并且无法恢复和预防\",{\"1\":{\"1533\":1}}],[\"并且将共享资源设置为锁定状态\",{\"1\":{\"1516\":1}}],[\"并且将静态变量和字符串常量池放入了堆中\",{\"1\":{\"211\":1}}],[\"并且数组长度超过64\",{\"1\":{\"1494\":1}}],[\"并且直接把内核缓冲区数据拷贝到\",{\"1\":{\"1486\":1}}],[\"并且进行\",{\"1\":{\"1483\":1}}],[\"并且都在等待对方释放资源\",{\"1\":{\"1466\":1}}],[\"并且双方都没有进行数据传输\",{\"1\":{\"1419\":1}}],[\"并且确认客户端报文的序列号\",{\"1\":{\"1409\":1}}],[\"并且封装了一个实际的事务对象\",{\"1\":{\"1383\":1}}],[\"并且基于单次查询的调用时间\",{\"1\":{\"1363\":1}}],[\"并且永不过期\",{\"1\":{\"1347\":1}}],[\"并且是强制的没有任何提示的\",{\"1\":{\"1344\":1}}],[\"并且是一个守护线程\",{\"1\":{\"188\":1}}],[\"并且预留好全部需用到的业务资源\",{\"1\":{\"1284\":1}}],[\"并且和加锁操作是原子的\",{\"1\":{\"1263\":1}}],[\"并且设置过期时间\",{\"1\":{\"1263\":1}}],[\"并且设置外键为唯一的\",{\"1\":{\"601\":1}}],[\"并且能在异常情况下实现回滚操作\",{\"1\":{\"1239\":1}}],[\"并且能达到第二句的速度\",{\"1\":{\"618\":1}}],[\"并且判断是并发导致的暂时性不一致\",{\"1\":{\"1236\":1}}],[\"并且通过\",{\"1\":{\"1552\":1}}],[\"并且通过多副本的方式提升了安全性\",{\"1\":{\"1219\":1}}],[\"并且通过状态变量保证只启动一次\",{\"1\":{\"871\":1}}],[\"并且可靠\",{\"1\":{\"1214\":1}}],[\"并且可以排除一些包\",{\"1\":{\"1598\":1}}],[\"并且可以保存执行结果\",{\"1\":{\"1511\":1}}],[\"并且可以为每道工序指定不同的工人\",{\"1\":{\"814\":1}}],[\"并且可以动态调整任务的数量和调度策略\",{\"1\":{\"282\":1}}],[\"并且可以在任务之间进行切换\",{\"1\":{\"282\":2}}],[\"并且可以对java应用程序进行一些基本的管理操作\",{\"1\":{\"236\":1}}],[\"并且可以附加\",{\"1\":{\"59\":1}}],[\"并且可以防止开发人员误用\",{\"1\":{\"9\":1}}],[\"并且只能通过\",{\"1\":{\"1187\":1}}],[\"并且内部校验必须是\",{\"1\":{\"1135\":1}}],[\"并且实现了java中的nio通道\",{\"1\":{\"1131\":1}}],[\"并且这个提交对象里包含一个指向上次提交对象\",{\"1\":{\"1332\":1}}],[\"并且这里的\",{\"1\":{\"1077\":1}}],[\"并且这时内部出现异常需要回滚了\",{\"1\":{\"1051\":1}}],[\"并且该锁记录的地址字段为\",{\"1\":{\"1076\":1}}],[\"并且该索引不能失效\",{\"1\":{\"620\":1}}],[\"并且外层方法的事务隔离级别与内层方法不一致\",{\"1\":{\"1049\":1}}],[\"并且回滚日志会先于数据持久化到磁盘上\",{\"1\":{\"1034\":1}}],[\"并且彼此之间互不干扰\",{\"1\":{\"1032\":1}}],[\"并且尚未投票给其他从节点\",{\"1\":{\"948\":1}}],[\"并且相关槽所属的键值对也会迁移至目标节点\",{\"1\":{\"946\":1}}],[\"并且一旦设置不能更改\",{\"1\":{\"942\":1}}],[\"并且一旦某个工人负责了某个\",{\"1\":{\"814\":1}}],[\"并且哈希表的负载因子大于等于5\",{\"1\":{\"883\":2}}],[\"并且哈希表的负载因子大于等于1\",{\"1\":{\"883\":1}}],[\"并且底层不会发生拷贝\",{\"1\":{\"834\":1}}],[\"并且采用了与\",{\"1\":{\"826\":1}}],[\"并且使用池化技术分配内存\",{\"1\":{\"825\":1}}],[\"并且不能保证客户端收到每次节点变化的通知\",{\"1\":{\"1189\":1}}],[\"并且不会移动读指针\",{\"1\":{\"772\":1}}],[\"并且不跳过索引中的列\",{\"1\":{\"702\":1}}],[\"并且网络\",{\"1\":{\"760\":1}}],[\"并且由于保存了数据的完整副本\",{\"1\":{\"1588\":1}}],[\"并且由\",{\"1\":{\"643\":1}}],[\"并且以相对随机的顺序插入二级索引\",{\"1\":{\"638\":1}}],[\"并且在内存中创建一个代表该类的java\",{\"1\":{\"1527\":1}}],[\"并且在操作失败的时候要打点统计\",{\"1\":{\"1239\":1}}],[\"并且在使用视图时动态生成\",{\"1\":{\"621\":1}}],[\"并且在底层资源中有位置状态的\",{\"1\":{\"82\":1}}],[\"并且它的空间允许被其他记录使用\",{\"1\":{\"615\":1}}],[\"并且\",{\"1\":{\"583\":1,\"1336\":1,\"1514\":2,\"1573\":1,\"1577\":1}}],[\"并且其中的第9个比特位标志is\",{\"1\":{\"564\":1}}],[\"并且同一\",{\"1\":{\"1626\":1}}],[\"并且同时提升消费组的消费者数量\",{\"1\":{\"500\":1}}],[\"并且同步更新\",{\"1\":{\"68\":1}}],[\"并且禁止使用\",{\"1\":{\"391\":1}}],[\"并且功能和性能都非常优秀\",{\"1\":{\"376\":1}}],[\"并且随时以开关的形式控制是否记录\",{\"1\":{\"355\":1}}],[\"并且还可以创建临时线程\",{\"1\":{\"332\":1}}],[\"并且具有完整的权限和优先级\",{\"1\":{\"278\":1}}],[\"并且让非javac产生的class文件\",{\"1\":{\"255\":1}}],[\"并且已经被移除\",{\"1\":{\"186\":1}}],[\"并且未被加入引用队列\",{\"1\":{\"186\":1}}],[\"并且会执行\",{\"1\":{\"1112\":1}}],[\"并且会自动失败重试\",{\"1\":{\"492\":1}}],[\"并且会造成内存碎片\",{\"1\":{\"168\":1}}],[\"并且会释放对象锁\",{\"1\":{\"139\":1}}],[\"并且提供了转换和组合\",{\"1\":{\"163\":1}}],[\"并且计数器可以复用\",{\"1\":{\"161\":1}}],[\"并且支持多种过滤器限定事件\",{\"1\":{\"1322\":1}}],[\"并且支持可重入\",{\"1\":{\"157\":1}}],[\"并且支持泛型的通配符\",{\"1\":{\"84\":1}}],[\"并且支持范围的运算\",{\"1\":{\"81\":1}}],[\"并且支持负载均衡以提高查询效率\",{\"1\":{\"34\":1}}],[\"并且效率较低\",{\"1\":{\"64\":1}}],[\"并设置默认初始值\",{\"1\":{\"251\":1}}],[\"并设置\",{\"1\":{\"27\":2,\"1289\":1,\"1371\":1,\"1643\":2}}],[\"并携带\",{\"1\":{\"15\":1}}],[\"并缓存到\",{\"1\":{\"14\":1}}],[\"并发量\",{\"1\":{\"1638\":1}}],[\"并发安全问题由开发决定\",{\"1\":{\"1614\":1}}],[\"并发安全的\",{\"0\":{\"1499\":1}}],[\"并发控制\",{\"1\":{\"1540\":1}}],[\"并发收集\",{\"1\":{\"1525\":1}}],[\"并发连接数\",{\"1\":{\"1490\":1}}],[\"并发进程\",{\"1\":{\"1463\":1}}],[\"并发时依然有不一致的问题\",{\"1\":{\"1267\":1,\"1585\":1}}],[\"并发时可能有暂时的脏数据\",{\"1\":{\"1266\":1,\"1584\":1}}],[\"并发性能好\",{\"1\":{\"1561\":1}}],[\"并发性能较低\",{\"1\":{\"1187\":1}}],[\"并发性要求不高\",{\"1\":{\"682\":1}}],[\"并发问题\",{\"0\":{\"736\":1,\"1551\":1},\"1\":{\"1521\":1}}],[\"并发度最高\",{\"1\":{\"554\":1}}],[\"并发大\",{\"1\":{\"549\":1}}],[\"并发低\",{\"1\":{\"549\":1}}],[\"并发回\",{\"1\":{\"483\":1}}],[\"并发回收\",{\"1\":{\"178\":1}}],[\"并发送异步通知给\",{\"1\":{\"1190\":1}}],[\"并发送\",{\"1\":{\"483\":1,\"856\":1,\"1409\":1}}],[\"并发包中提供的一个工具类\",{\"1\":{\"362\":1}}],[\"并发包中提供的一个用于构建锁和其他同步器的框架\",{\"1\":{\"2\":1}}],[\"并发和synchronized\",{\"1\":{\"281\":1}}],[\"并发重映射\",{\"1\":{\"179\":1}}],[\"并发重分配\",{\"1\":{\"179\":1}}],[\"并发预备重分配\",{\"1\":{\"179\":1}}],[\"并发引用更新\",{\"1\":{\"178\":1}}],[\"并发清理\",{\"1\":{\"178\":2}}],[\"并发清除\",{\"1\":{\"176\":1,\"1525\":1}}],[\"并发标记\",{\"1\":{\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"1525\":2}}],[\"并发容器\",{\"1\":{\"162\":1}}],[\"并发修改会\",{\"1\":{\"162\":1}}],[\"并发工具的底层基础\",{\"1\":{\"155\":1}}],[\"并发工具\",{\"0\":{\"151\":1}}],[\"并发学习\",{\"0\":{\"133\":1}}],[\"并发等级\",{\"1\":{\"73\":1}}],[\"并发\",{\"0\":{\"76\":1,\"1505\":1},\"1\":{\"134\":1,\"335\":1,\"1525\":1},\"2\":{\"12\":1,\"165\":1,\"369\":1,\"1085\":1,\"1102\":1,\"1123\":1,\"1146\":1}}],[\"并释放所持有的资源\",{\"1\":{\"8\":1}}],[\"并扩展出三个子类\",{\"1\":{\"3\":1}}],[\"np\",{\"1\":{\"1752\":1}}],[\"npe\",{\"1\":{\"1028\":1,\"1465\":1,\"1781\":2}}],[\"nfd\",{\"1\":{\"1732\":1}}],[\"nfs\",{\"1\":{\"1218\":1,\"1474\":1}}],[\"n显示行号\",{\"1\":{\"1684\":1}}],[\"n末尾的0与运算后仍是0\",{\"1\":{\"1665\":1}}],[\"nnavigator\",{\"1\":{\"1858\":1}}],[\"nn\",{\"1\":{\"1396\":1}}],[\"nlogn\",{\"1\":{\"1385\":3}}],[\"nx\",{\"1\":{\"1263\":2,\"1582\":1}}],[\"ngroups\",{\"1\":{\"1099\":1}}],[\"nginx请求转发\",{\"1\":{\"1300\":1}}],[\"nginx\",{\"0\":{\"1366\":1},\"1\":{\"21\":2,\"1299\":1,\"1366\":4,\"1367\":1,\"1375\":1,\"1488\":1,\"1867\":1,\"1871\":2,\"1873\":1}}],[\"n^2\",{\"1\":{\"893\":1,\"1385\":3}}],[\"n$\",{\"1\":{\"828\":1}}],[\"n阶\",{\"1\":{\"698\":1}}],[\"nikkor\",{\"1\":{\"1828\":1}}],[\"nikon\",{\"1\":{\"1799\":4,\"1828\":1}}],[\"nice\",{\"1\":{\"1436\":2}}],[\"nic\",{\"1\":{\"1409\":2}}],[\"nickname\",{\"1\":{\"576\":2}}],[\"nil\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"niomessageunsafe\",{\"1\":{\"873\":1}}],[\"niounsafe\",{\"1\":{\"873\":1}}],[\"niobyteunsafe\",{\"1\":{\"829\":1,\"873\":1}}],[\"nioeventloop\",{\"0\":{\"868\":1},\"1\":{\"816\":1,\"863\":3,\"868\":1,\"869\":1,\"870\":5,\"871\":1,\"872\":1,\"873\":1}}],[\"nioeventloopgroup\",{\"1\":{\"93\":2,\"811\":1,\"812\":1,\"813\":2,\"817\":2,\"818\":3,\"820\":2,\"822\":2,\"863\":2,\"870\":1}}],[\"niosocketchannel\",{\"1\":{\"812\":2,\"820\":2,\"873\":2}}],[\"nioserversocketchannel\",{\"1\":{\"93\":1,\"811\":1,\"818\":1,\"863\":1,\"864\":1,\"865\":1,\"866\":2,\"873\":1}}],[\"nio库\",{\"1\":{\"324\":1}}],[\"nio\",{\"0\":{\"324\":1,\"758\":1},\"1\":{\"212\":1,\"324\":1,\"434\":1,\"765\":1,\"784\":1,\"785\":1,\"786\":1,\"794\":1,\"809\":2,\"814\":1,\"828\":2,\"829\":2,\"863\":4,\"864\":2,\"865\":3,\"866\":2,\"867\":3,\"869\":1,\"870\":3,\"871\":1,\"872\":1,\"873\":8,\"1092\":2,\"1136\":1,\"1171\":3,\"1189\":1,\"1504\":1},\"2\":{\"804\":1}}],[\"nio中的directbytebuffer对象使用虚引用来跟踪对象的回收情况\",{\"1\":{\"194\":1}}],[\"nbroker收到消息\",{\"1\":{\"417\":1}}],[\"nthreads\",{\"1\":{\"332\":1,\"1099\":1}}],[\"nutch\",{\"1\":{\"1214\":1}}],[\"nunstartedthreads\",{\"1\":{\"1099\":1}}],[\"numa\",{\"1\":{\"1446\":2}}],[\"numchildren\",{\"1\":{\"1174\":1}}],[\"numkeys\",{\"1\":{\"965\":1,\"967\":1}}],[\"numpat\",{\"1\":{\"957\":1}}],[\"nums\",{\"1\":{\"989\":19,\"994\":5,\"995\":4,\"998\":21,\"1652\":21,\"1653\":19,\"1654\":15,\"1662\":4,\"1663\":3,\"1669\":6,\"1670\":4,\"1672\":5,\"1673\":9,\"1674\":7,\"1675\":22,\"1676\":5,\"1677\":7}}],[\"numsub\",{\"1\":{\"957\":1}}],[\"numslaves属性\",{\"1\":{\"948\":1}}],[\"numslot\",{\"1\":{\"946\":1}}],[\"numeric\",{\"1\":{\"521\":1,\"1148\":2}}],[\"num\",{\"1\":{\"113\":1,\"445\":4,\"485\":1,\"995\":3,\"1226\":3}}],[\"number作为key\",{\"1\":{\"742\":1}}],[\"number是单调自增的序列号\",{\"1\":{\"461\":1}}],[\"number\",{\"0\":{\"740\":1},\"1\":{\"42\":2,\"240\":1,\"739\":1,\"913\":1,\"1087\":1,\"1148\":1,\"1404\":1,\"1567\":2,\"1661\":1,\"1663\":1}}],[\"nullobject\",{\"1\":{\"1256\":1,\"1579\":1}}],[\"nullable\",{\"1\":{\"1039\":2,\"1047\":1,\"1049\":1,\"1059\":1}}],[\"nullable=\",{\"1\":{\"538\":1}}],[\"null值不保证仅有一条记录\",{\"1\":{\"710\":1}}],[\"null值列表\",{\"1\":{\"684\":1}}],[\"null约束它\",{\"1\":{\"708\":1}}],[\"null约束的话\",{\"1\":{\"619\":2}}],[\"nullpointerexception\",{\"1\":{\"362\":1,\"1088\":1,\"1113\":3,\"1533\":1}}],[\"nullification\",{\"1\":{\"183\":1}}],[\"nulls\",{\"1\":{\"722\":3}}],[\"nullsfirst\",{\"1\":{\"61\":1}}],[\"nullslast\",{\"1\":{\"60\":1}}],[\"null\",{\"1\":{\"6\":17,\"7\":2,\"8\":6,\"14\":2,\"15\":2,\"58\":4,\"61\":2,\"79\":1,\"154\":6,\"183\":1,\"184\":11,\"187\":4,\"188\":6,\"192\":1,\"194\":2,\"195\":9,\"196\":9,\"290\":1,\"362\":1,\"363\":3,\"364\":1,\"383\":1,\"418\":1,\"453\":4,\"456\":1,\"467\":1,\"535\":3,\"536\":3,\"537\":2,\"541\":10,\"542\":2,\"544\":1,\"583\":3,\"596\":1,\"598\":2,\"599\":1,\"619\":1,\"634\":1,\"710\":1,\"728\":1,\"783\":2,\"786\":1,\"787\":1,\"789\":1,\"791\":1,\"797\":2,\"822\":1,\"850\":1,\"863\":1,\"871\":1,\"873\":3,\"1000\":1,\"1001\":2,\"1002\":2,\"1008\":1,\"1009\":2,\"1015\":1,\"1016\":2,\"1028\":3,\"1039\":1,\"1049\":5,\"1055\":1,\"1058\":1,\"1059\":8,\"1076\":3,\"1087\":2,\"1088\":12,\"1090\":1,\"1092\":1,\"1093\":10,\"1095\":2,\"1108\":1,\"1113\":4,\"1114\":4,\"1115\":8,\"1120\":1,\"1135\":4,\"1136\":2,\"1269\":1,\"1357\":11,\"1358\":9,\"1368\":1,\"1382\":3,\"1497\":2,\"1514\":2,\"1528\":1,\"1567\":2,\"1613\":1,\"1645\":3,\"1651\":2,\"1663\":1,\"1712\":17,\"1781\":2}}],[\"nvm\",{\"1\":{\"37\":1}}],[\"navigator\",{\"1\":{\"1853\":1,\"1854\":1,\"1858\":1}}],[\"navicat\",{\"1\":{\"666\":3,\"1224\":1}}],[\"napt\",{\"1\":{\"1428\":1}}],[\"na\",{\"1\":{\"1083\":1}}],[\"nagle\",{\"1\":{\"839\":3,\"858\":3,\"1412\":2}}],[\"nack\",{\"1\":{\"422\":1,\"1629\":1}}],[\"nat穿透\",{\"1\":{\"1428\":1}}],[\"nat\",{\"0\":{\"1428\":1},\"1\":{\"1423\":1,\"1860\":2}}],[\"native\",{\"1\":{\"188\":1,\"189\":2,\"194\":1,\"209\":1,\"212\":1,\"224\":1,\"590\":1,\"1086\":1,\"1090\":2,\"1092\":1,\"1095\":7,\"1098\":3,\"1141\":2,\"1142\":3,\"1143\":2,\"1154\":1,\"1520\":1}}],[\"naturalordering\",{\"1\":{\"61\":1}}],[\"natural\",{\"1\":{\"60\":1,\"61\":1}}],[\"name`\",{\"1\":{\"1357\":2,\"1358\":1}}],[\"namenode做元数据记录工作\",{\"1\":{\"1220\":1}}],[\"namenode|secondarynamenode|datanode\",{\"1\":{\"1217\":2}}],[\"namenode\",{\"1\":{\"1216\":2,\"1217\":1,\"1218\":1,\"1219\":3,\"1220\":7}}],[\"nameprefix\",{\"1\":{\"1108\":3}}],[\"name>\",{\"1\":{\"946\":1,\"1326\":2,\"1692\":3,\"1791\":1}}],[\"name＞\",{\"1\":{\"940\":1}}],[\"name字段为姓名字段\",{\"1\":{\"701\":1}}],[\"namespace\",{\"1\":{\"541\":1}}],[\"namespace=\",{\"1\":{\"506\":1}}],[\"nameserver\",{\"1\":{\"427\":1}}],[\"name=\",{\"1\":{\"388\":3,\"389\":2,\"391\":2,\"506\":4,\"518\":2,\"519\":2,\"520\":1,\"521\":1,\"522\":1,\"523\":1,\"524\":5,\"528\":1,\"531\":2}}],[\"namedthreadlocal<>\",{\"1\":{\"1045\":2,\"1383\":2}}],[\"named\",{\"0\":{\"1457\":1},\"1\":{\"112\":1,\"672\":1}}],[\"name\",{\"1\":{\"15\":1,\"47\":1,\"51\":1,\"79\":1,\"83\":1,\"105\":2,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"113\":7,\"114\":1,\"115\":1,\"119\":1,\"126\":1,\"128\":5,\"188\":2,\"310\":2,\"311\":2,\"357\":1,\"383\":2,\"391\":1,\"418\":2,\"453\":1,\"506\":1,\"515\":8,\"532\":2,\"535\":3,\"536\":3,\"541\":1,\"550\":1,\"552\":3,\"579\":1,\"583\":1,\"596\":1,\"598\":1,\"603\":4,\"604\":2,\"605\":4,\"608\":2,\"609\":2,\"610\":1,\"611\":2,\"620\":1,\"622\":2,\"623\":3,\"634\":4,\"636\":4,\"639\":4,\"675\":5,\"701\":9,\"707\":1,\"734\":6,\"791\":5,\"846\":3,\"923\":2,\"927\":1,\"945\":1,\"1049\":1,\"1058\":2,\"1059\":2,\"1087\":1,\"1088\":5,\"1099\":1,\"1139\":1,\"1148\":1,\"1226\":1,\"1227\":1,\"1229\":1,\"1366\":1,\"1567\":4,\"1595\":1,\"1683\":1,\"1738\":1,\"1791\":6,\"1792\":1,\"1871\":1}}],[\"nanotime\",{\"1\":{\"6\":1,\"1091\":2}}],[\"nanoseconds\",{\"1\":{\"1091\":1,\"1115\":1,\"1120\":1}}],[\"nanos\",{\"1\":{\"6\":3,\"363\":3}}],[\"nojekyll\",{\"1\":{\"1791\":1}}],[\"nohup\",{\"1\":{\"1225\":2}}],[\"norm\",{\"1\":{\"1087\":1,\"1108\":2}}],[\"normalize\",{\"1\":{\"778\":2}}],[\"noop\",{\"1\":{\"1009\":1}}],[\"nomore\",{\"1\":{\"920\":2}}],[\"no表示当前执行checkpoint的次数\",{\"1\":{\"741\":1}}],[\"no\",{\"1\":{\"453\":2,\"564\":1,\"599\":2,\"620\":2,\"635\":1,\"675\":3,\"689\":1,\"728\":1,\"739\":2,\"742\":1,\"745\":1,\"749\":1,\"916\":1,\"943\":1,\"948\":1,\"961\":1,\"1049\":2,\"1055\":1,\"1322\":1,\"1333\":1,\"1398\":1,\"1437\":1,\"1574\":1,\"1577\":1}}],[\"now\",{\"1\":{\"450\":7,\"595\":2}}],[\"nop<\",{\"1\":{\"382\":1}}],[\"nop\",{\"1\":{\"382\":2,\"383\":3}}],[\"noclassdeffounderror\",{\"1\":{\"188\":1,\"1015\":1}}],[\"nonematch\",{\"1\":{\"1068\":1}}],[\"none\",{\"1\":{\"79\":1,\"422\":1,\"459\":1,\"493\":1,\"1250\":1,\"1399\":1,\"1855\":3}}],[\"nonfairsync\",{\"1\":{\"9\":2,\"156\":1,\"157\":1}}],[\"notnull\",{\"1\":{\"1712\":1}}],[\"notblank\",{\"1\":{\"1608\":1}}],[\"notempty\",{\"1\":{\"1608\":1}}],[\"note\",{\"1\":{\"667\":1}}],[\"notifykeyspaceevent\",{\"1\":{\"909\":1}}],[\"notifyall\",{\"1\":{\"137\":1,\"139\":2,\"184\":1,\"188\":2,\"331\":1,\"1091\":1}}],[\"notify\",{\"0\":{\"139\":1},\"1\":{\"137\":1,\"139\":3,\"331\":1,\"365\":3,\"1077\":1}}],[\"notifystopped\",{\"1\":{\"78\":1}}],[\"notifystarted\",{\"1\":{\"78\":1}}],[\"notification\",{\"1\":{\"73\":4}}],[\"not\",{\"1\":{\"58\":1,\"105\":1,\"107\":2,\"555\":1,\"564\":1,\"574\":1,\"583\":2,\"598\":2,\"609\":1,\"610\":1,\"634\":3,\"693\":1,\"961\":1,\"967\":1,\"993\":1,\"1008\":1,\"1041\":1,\"1044\":1,\"1049\":2,\"1050\":1,\"1051\":1,\"1226\":1,\"1276\":1,\"1342\":1,\"1357\":9,\"1358\":9,\"1368\":1,\"1400\":1,\"1611\":1,\"1615\":4,\"1858\":1,\"1881\":1}}],[\"nosuchfieldexception\",{\"1\":{\"1135\":1}}],[\"nosuchmethoderror\",{\"1\":{\"1015\":1}}],[\"nosuchmethodexception\",{\"1\":{\"1009\":1,\"1015\":1,\"1533\":1}}],[\"nosuchelementexception\",{\"1\":{\"58\":1}}],[\"nosave\",{\"1\":{\"966\":1}}],[\"nosql\",{\"0\":{\"1543\":1},\"1\":{\"808\":1,\"1213\":1,\"1283\":1,\"1543\":4,\"1622\":1}}],[\"nosql的索引引擎\",{\"1\":{\"31\":1}}],[\"nodemanager\",{\"1\":{\"1222\":2}}],[\"nodechanged\",{\"1\":{\"1192\":1}}],[\"nodecachelistener\",{\"1\":{\"1192\":1}}],[\"nodecache\",{\"1\":{\"1192\":5}}],[\"nodes查看当前集群节点状态\",{\"1\":{\"945\":1}}],[\"nodes字典里面\",{\"1\":{\"945\":2}}],[\"node结构\",{\"1\":{\"693\":1}}],[\"node1\",{\"1\":{\"113\":1}}],[\"nodelay\",{\"0\":{\"858\":1},\"1\":{\"93\":1,\"839\":1,\"858\":1}}],[\"node\",{\"1\":{\"3\":6,\"4\":1,\"6\":29,\"7\":2,\"8\":18,\"450\":3,\"749\":1,\"946\":1,\"948\":2,\"1001\":5,\"1002\":27,\"1169\":1,\"1177\":1,\"1181\":10,\"1192\":4,\"1446\":3,\"1497\":4,\"1516\":1,\"1651\":21,\"1791\":4}}],[\"n\",{\"0\":{\"857\":1},\"1\":{\"9\":2,\"34\":1,\"37\":2,\"139\":1,\"148\":2,\"153\":11,\"388\":3,\"495\":2,\"593\":2,\"614\":1,\"675\":1,\"681\":1,\"689\":1,\"698\":2,\"707\":1,\"720\":3,\"788\":2,\"843\":3,\"857\":1,\"879\":1,\"889\":1,\"948\":1,\"984\":1,\"985\":1,\"993\":10,\"996\":5,\"1001\":2,\"1110\":1,\"1119\":2,\"1226\":1,\"1343\":2,\"1511\":2,\"1556\":2,\"1631\":1,\"1656\":1,\"1662\":1,\"1663\":2,\"1664\":5,\"1665\":9,\"1671\":3,\"1683\":2,\"1684\":1,\"1686\":2,\"1700\":4,\"1735\":1}}],[\"need\",{\"1\":{\"1466\":1,\"1664\":1}}],[\"needs\",{\"1\":{\"990\":1}}],[\"near\",{\"0\":{\"1358\":1},\"1\":{\"1358\":2}}],[\"negotiator\",{\"1\":{\"1214\":1}}],[\"negative\",{\"1\":{\"3\":1,\"1091\":1}}],[\"nested\",{\"1\":{\"1041\":3,\"1049\":4,\"1276\":1,\"1611\":1}}],[\"neutral\",{\"1\":{\"388\":1}}],[\"never\",{\"1\":{\"196\":1,\"1041\":1,\"1049\":2,\"1276\":1,\"1611\":1,\"1714\":3,\"1715\":3}}],[\"netfilter\",{\"1\":{\"1409\":1}}],[\"netflix\",{\"1\":{\"1178\":1,\"1621\":1}}],[\"netstat\",{\"1\":{\"856\":2,\"1490\":1,\"1631\":1,\"1698\":1}}],[\"net等\",{\"1\":{\"435\":1}}],[\"netty启动流程\",{\"1\":{\"863\":1}}],[\"netty<\",{\"1\":{\"810\":1}}],[\"nettyrpcclienthandler\",{\"1\":{\"100\":2}}],[\"nettyrpcserverhandler\",{\"0\":{\"97\":1},\"1\":{\"93\":1}}],[\"nettyrpcserver\",{\"1\":{\"90\":6,\"91\":1,\"92\":1}}],[\"netty异步\",{\"1\":{\"99\":1}}],[\"netty\",{\"0\":{\"93\":1,\"100\":1,\"805\":1,\"807\":1,\"808\":1,\"809\":1,\"837\":1},\"1\":{\"91\":1,\"101\":2,\"788\":1,\"807\":3,\"808\":3,\"809\":1,\"810\":1,\"816\":1,\"817\":1,\"818\":1,\"822\":8,\"824\":2,\"826\":3,\"828\":1,\"829\":2,\"830\":1,\"839\":1,\"846\":1,\"851\":1,\"860\":1,\"863\":2,\"864\":2,\"865\":3,\"866\":1,\"867\":2,\"868\":1,\"870\":3,\"871\":1,\"872\":1,\"873\":6,\"1109\":1,\"1488\":1,\"1623\":1},\"2\":{\"836\":1,\"875\":1}}],[\"nettyservermain\",{\"1\":{\"90\":2}}],[\"nettyserver\",{\"1\":{\"89\":1}}],[\"nettyclientmain\",{\"1\":{\"98\":2}}],[\"nettyclient\",{\"1\":{\"89\":1}}],[\"networking\",{\"1\":{\"569\":1}}],[\"network\",{\"1\":{\"75\":1,\"433\":1,\"445\":1,\"807\":1,\"1218\":1,\"1695\":1}}],[\"net\",{\"1\":{\"10\":2,\"125\":1,\"343\":1,\"434\":1,\"569\":2,\"666\":1,\"856\":2,\"1069\":1,\"1156\":2,\"1409\":1}}],[\"newnode\",{\"1\":{\"1651\":3}}],[\"newinputstream创建inputstream对象\",{\"1\":{\"1503\":1}}],[\"newinstance\",{\"1\":{\"309\":1,\"543\":1,\"1009\":2}}],[\"newbranch\",{\"1\":{\"1333\":1}}],[\"newbuffer\",{\"1\":{\"788\":3}}],[\"newbuilder\",{\"1\":{\"73\":1}}],[\"newtaskfor\",{\"1\":{\"1113\":2}}],[\"newtaskqueue\",{\"1\":{\"870\":2}}],[\"newthread\",{\"1\":{\"1108\":2,\"1114\":1}}],[\"newtransaction\",{\"1\":{\"542\":1}}],[\"newpos\",{\"1\":{\"777\":1}}],[\"newproxyinstance\",{\"1\":{\"349\":1,\"1015\":1,\"1532\":1}}],[\"newest\",{\"1\":{\"742\":1}}],[\"newexecutor\",{\"1\":{\"542\":3}}],[\"new表示将要或已经修改后的数据\",{\"1\":{\"636\":1}}],[\"new出来的对象实例\",{\"1\":{\"359\":1}}],[\"newscheduledthreadpool\",{\"1\":{\"1110\":1}}],[\"newscheduledthreadpool​\",{\"1\":{\"332\":1,\"334\":1}}],[\"newsynchronization\",{\"1\":{\"1049\":2}}],[\"newsocket\",{\"1\":{\"864\":2}}],[\"newstatementhandler\",{\"1\":{\"544\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"332\":1}}],[\"newclient\",{\"1\":{\"1180\":1}}],[\"newchannel\",{\"1\":{\"864\":1}}],[\"newcachedthreadpool\",{\"1\":{\"332\":1}}],[\"newcondition\",{\"1\":{\"156\":1}}],[\"newline\",{\"1\":{\"319\":1}}],[\"new关键字不论常量池中是否已经有该串\",{\"1\":{\"300\":1}}],[\"new的类型的子类类型\",{\"1\":{\"298\":1}}],[\"new指令用于创建新的对象\",{\"1\":{\"241\":1}}],[\"newhasher\",{\"1\":{\"83\":1}}],[\"newfixedthreadpool​\",{\"1\":{\"332\":1}}],[\"newfixedthreadpool\",{\"1\":{\"77\":2,\"822\":1}}],[\"newmember\",{\"1\":{\"15\":11}}],[\"new\",{\"1\":{\"6\":2,\"8\":3,\"9\":3,\"14\":6,\"15\":8,\"24\":2,\"40\":1,\"42\":1,\"43\":1,\"44\":1,\"47\":1,\"48\":1,\"51\":2,\"58\":1,\"61\":1,\"73\":1,\"77\":5,\"78\":2,\"83\":3,\"84\":3,\"90\":2,\"93\":10,\"98\":1,\"117\":2,\"118\":1,\"148\":1,\"153\":3,\"154\":1,\"156\":2,\"157\":2,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"183\":8,\"184\":3,\"187\":1,\"188\":3,\"191\":2,\"195\":2,\"196\":5,\"210\":1,\"263\":1,\"290\":2,\"295\":1,\"296\":2,\"298\":1,\"301\":1,\"322\":1,\"336\":1,\"353\":1,\"362\":1,\"383\":1,\"417\":2,\"418\":5,\"420\":1,\"421\":1,\"456\":4,\"461\":3,\"476\":3,\"488\":5,\"507\":1,\"515\":3,\"518\":1,\"523\":1,\"541\":4,\"542\":5,\"636\":2,\"767\":2,\"771\":1,\"772\":1,\"773\":1,\"777\":2,\"779\":1,\"782\":3,\"783\":2,\"786\":1,\"789\":1,\"791\":7,\"792\":3,\"796\":1,\"797\":6,\"799\":3,\"811\":6,\"812\":5,\"817\":1,\"818\":8,\"820\":6,\"821\":1,\"822\":8,\"823\":5,\"831\":1,\"834\":2,\"842\":2,\"843\":2,\"844\":3,\"846\":3,\"849\":6,\"850\":6,\"854\":2,\"863\":5,\"864\":1,\"865\":1,\"870\":2,\"871\":1,\"873\":2,\"985\":1,\"986\":1,\"987\":1,\"989\":1,\"990\":1,\"991\":1,\"993\":1,\"994\":1,\"995\":1,\"996\":2,\"1001\":1,\"1002\":5,\"1008\":2,\"1009\":4,\"1015\":6,\"1016\":3,\"1028\":3,\"1038\":1,\"1039\":1,\"1041\":1,\"1044\":1,\"1045\":2,\"1049\":6,\"1050\":1,\"1051\":1,\"1054\":3,\"1055\":1,\"1058\":2,\"1059\":4,\"1067\":2,\"1068\":4,\"1073\":1,\"1087\":2,\"1088\":1,\"1089\":1,\"1090\":1,\"1091\":1,\"1095\":4,\"1106\":2,\"1108\":3,\"1112\":1,\"1113\":3,\"1114\":3,\"1120\":1,\"1125\":8,\"1135\":2,\"1136\":1,\"1180\":1,\"1181\":2,\"1188\":2,\"1192\":3,\"1261\":1,\"1263\":1,\"1264\":1,\"1276\":1,\"1343\":1,\"1363\":1,\"1369\":4,\"1382\":3,\"1383\":2,\"1450\":1,\"1503\":3,\"1509\":1,\"1514\":1,\"1536\":2,\"1599\":3,\"1611\":1,\"1645\":3,\"1651\":4,\"1653\":1,\"1654\":1,\"1663\":1,\"1669\":3,\"1670\":1,\"1671\":1,\"1672\":1,\"1673\":1,\"1674\":1,\"1675\":4,\"1676\":1,\"1677\":1,\"1713\":3,\"1718\":1,\"1858\":1,\"1861\":1}}],[\"nextthreadid\",{\"1\":{\"1088\":1}}],[\"nextint\",{\"1\":{\"842\":1,\"843\":1,\"989\":1,\"1653\":1,\"1713\":3}}],[\"nextoffset\",{\"1\":{\"476\":1}}],[\"nextoffsetmetadata\",{\"1\":{\"476\":4}}],[\"nexthashcode\",{\"1\":{\"154\":1,\"1514\":1}}],[\"nextwaiter\",{\"1\":{\"8\":1}}],[\"next\",{\"1\":{\"3\":2,\"6\":3,\"7\":1,\"8\":4,\"184\":5,\"187\":2,\"195\":11,\"196\":9,\"304\":1,\"450\":1,\"557\":1,\"689\":1,\"739\":1,\"749\":1,\"786\":1,\"791\":2,\"817\":1,\"818\":6,\"822\":2,\"882\":1,\"991\":5,\"1002\":9,\"1497\":1,\"1516\":1,\"1651\":9}}],[\"turn\",{\"0\":{\"1860\":1},\"1\":{\"1860\":4}}],[\"tutorials\",{\"1\":{\"788\":1}}],[\"tw\",{\"1\":{\"1410\":1}}],[\"tnonblockingserver\",{\"1\":{\"1131\":1}}],[\"tzlibtransport\",{\"1\":{\"1130\":1}}],[\"tfiletransport\",{\"1\":{\"1130\":1}}],[\"tframedtransport\",{\"1\":{\"1130\":1}}],[\"tdebugprotocol\",{\"1\":{\"1129\":1}}],[\"tjsonprotocol\",{\"1\":{\"1129\":1}}],[\"tprotocol是用于数据类型解析的\",{\"1\":{\"1126\":1}}],[\"tprotocol\",{\"1\":{\"1125\":1}}],[\"tprocessor=new\",{\"1\":{\"1125\":1}}],[\"tprocessor\",{\"1\":{\"1125\":2}}],[\"tthreadpoolserver\",{\"1\":{\"1131\":1}}],[\"ttransport是与底层数据传输密切相关的传输层\",{\"1\":{\"1126\":1}}],[\"ttransport\",{\"1\":{\"1125\":1}}],[\"ttl过期时间设为30分钟\",{\"1\":{\"1368\":1}}],[\"ttl\",{\"0\":{\"424\":1},\"1\":{\"423\":1,\"424\":5,\"908\":1,\"1169\":1,\"1173\":2,\"1289\":2,\"1290\":1,\"1371\":2,\"1372\":1,\"1396\":1,\"1427\":1,\"1574\":1,\"1629\":2}}],[\"tyding\",{\"1\":{\"1116\":1}}],[\"type>\",{\"1\":{\"1862\":1}}],[\"type><connection\",{\"1\":{\"1862\":1}}],[\"type><address>\",{\"1\":{\"1862\":1}}],[\"type><address\",{\"1\":{\"1862\":2}}],[\"type类型的对象\",{\"1\":{\"1712\":1}}],[\"typereference<data>\",{\"1\":{\"1261\":1}}],[\"typereference<memberrespvo>\",{\"1\":{\"15\":1}}],[\"types\",{\"1\":{\"1128\":1}}],[\"type为redis\",{\"1\":{\"913\":6}}],[\"type存0标识数据记录\",{\"1\":{\"698\":1}}],[\"type存1标识记录项记录\",{\"1\":{\"698\":1}}],[\"typealiasregistry\",{\"1\":{\"545\":1}}],[\"typealiaseselement\",{\"1\":{\"541\":1}}],[\"typealiases>\",{\"1\":{\"520\":1}}],[\"typealiases\",{\"0\":{\"520\":1},\"1\":{\"541\":1}}],[\"typehandlerelement\",{\"1\":{\"541\":1}}],[\"typehandler\",{\"1\":{\"521\":1,\"540\":1,\"545\":1}}],[\"typehandlers>\",{\"1\":{\"521\":1}}],[\"typehandlers\",{\"0\":{\"521\":1},\"1\":{\"541\":1}}],[\"type=pooled|unpooled指定\",{\"1\":{\"860\":1}}],[\"type=\",{\"1\":{\"506\":2,\"518\":1,\"520\":1,\"522\":1,\"523\":1,\"524\":2,\"532\":2,\"826\":1}}],[\"type\",{\"1\":{\"15\":1,\"24\":1,\"34\":1,\"36\":1,\"42\":2,\"45\":1,\"113\":5,\"348\":2,\"459\":2,\"510\":1,\"522\":3,\"543\":6,\"552\":2,\"564\":3,\"595\":1,\"635\":1,\"674\":1,\"689\":1,\"728\":2,\"739\":1,\"749\":1,\"788\":1,\"895\":1,\"909\":1,\"913\":7,\"948\":2,\"1057\":1,\"1398\":2,\"1461\":2,\"1862\":1}}],[\"tmd\",{\"1\":{\"1781\":1}}],[\"tmemorytransport\",{\"1\":{\"1130\":1}}],[\"tm\",{\"1\":{\"1059\":3,\"1287\":1}}],[\"tmp\",{\"1\":{\"113\":1,\"675\":1,\"989\":2,\"1164\":1,\"1196\":1,\"1197\":4,\"1652\":2,\"1653\":2,\"1654\":7}}],[\"t类型整数\",{\"1\":{\"892\":3}}],[\"tlb\",{\"1\":{\"1443\":2}}],[\"tls版本\",{\"1\":{\"1402\":1}}],[\"tls\",{\"0\":{\"1402\":1},\"1\":{\"1401\":1,\"1402\":4,\"1404\":2,\"1862\":1}}],[\"tlv\",{\"1\":{\"788\":1}}],[\"tlab预先分配的缓冲内存\",{\"1\":{\"1521\":1}}],[\"tlab\",{\"1\":{\"210\":1,\"214\":1}}],[\"tsimplejsonprotocol\",{\"1\":{\"1129\":1}}],[\"tsimpleserver\",{\"1\":{\"1125\":1,\"1131\":1}}],[\"tsocket\",{\"1\":{\"1125\":1,\"1130\":1}}],[\"tserver主要任务是高效的接受客户端请求\",{\"1\":{\"1126\":1}}],[\"tserver\",{\"1\":{\"1125\":3}}],[\"tserversocket\",{\"1\":{\"1125\":2}}],[\"ts\",{\"1\":{\"639\":2}}],[\"txinfo\",{\"1\":{\"1059\":5}}],[\"txattr\",{\"1\":{\"1059\":5}}],[\"txmanager\",{\"1\":{\"1059\":2}}],[\"tx\",{\"1\":{\"542\":3,\"1036\":2,\"1039\":1}}],[\"txt带有文件路径的形式\",{\"1\":{\"1344\":1}}],[\"txt文件\",{\"1\":{\"675\":1}}],[\"txt\",{\"1\":{\"124\":2,\"126\":1,\"675\":1,\"767\":1,\"777\":2,\"778\":4,\"796\":1,\"799\":1,\"1218\":2,\"1316\":1,\"1319\":3,\"1320\":2,\"1321\":6,\"1324\":2,\"1344\":1,\"1347\":1,\"1350\":2,\"1685\":2,\"1688\":3,\"1693\":2,\"1792\":2}}],[\"t2\",{\"1\":{\"531\":2}}],[\"tc\",{\"1\":{\"1287\":1}}],[\"tcc事务补偿\",{\"1\":{\"1284\":1}}],[\"tcc\",{\"0\":{\"1284\":1},\"1\":{\"1284\":2,\"1287\":1,\"1370\":1}}],[\"tcompactprotocol\",{\"1\":{\"1129\":1}}],[\"tcause\",{\"1\":{\"417\":1}}],[\"tcpkill\",{\"1\":{\"1420\":1}}],[\"tcp规定必须先收缩窗口\",{\"1\":{\"1412\":1}}],[\"tcp开销大\",{\"1\":{\"1408\":1}}],[\"tcp会降低自己的发送速度\",{\"1\":{\"1408\":1}}],[\"tcp提供拥塞控制\",{\"1\":{\"1408\":1}}],[\"tcp提供流量控制\",{\"1\":{\"1408\":1}}],[\"tcp是有连接的\",{\"1\":{\"1408\":1}}],[\"tcpdump\",{\"1\":{\"1396\":2,\"1409\":2}}],[\"tcp\",{\"0\":{\"343\":1,\"858\":1,\"1393\":1,\"1407\":1,\"1408\":1,\"1415\":1},\"1\":{\"93\":1,\"434\":1,\"462\":1,\"672\":1,\"809\":1,\"839\":7,\"845\":1,\"856\":4,\"858\":2,\"1301\":1,\"1394\":3,\"1395\":3,\"1401\":1,\"1402\":1,\"1404\":3,\"1406\":3,\"1409\":2,\"1410\":3,\"1411\":1,\"1412\":2,\"1414\":2,\"1415\":1,\"1416\":1,\"1417\":4,\"1418\":5,\"1419\":9,\"1420\":5,\"1461\":2,\"1487\":4,\"1623\":2,\"1629\":2}}],[\"tgn\",{\"1\":{\"188\":4,\"196\":4}}],[\"tg\",{\"1\":{\"188\":5,\"196\":5}}],[\"t>>\",{\"1\":{\"184\":1}}],[\"t>\",{\"1\":{\"163\":4,\"184\":7,\"187\":2,\"192\":1,\"193\":1,\"194\":1,\"196\":1,\"304\":1}}],[\"t1\",{\"1\":{\"153\":4,\"408\":1,\"531\":2}}],[\"tb2\",{\"1\":{\"1228\":2}}],[\"tb1\",{\"1\":{\"1226\":1,\"1228\":3}}],[\"tbinaryprotocol\",{\"1\":{\"1125\":2,\"1129\":1}}],[\"tb\",{\"1\":{\"113\":3,\"506\":1,\"552\":2,\"598\":1,\"614\":1,\"618\":6,\"634\":4,\"675\":2,\"701\":4,\"703\":5,\"705\":3,\"707\":2,\"1226\":1,\"1228\":1,\"1567\":2}}],[\"tblproperties\",{\"1\":{\"117\":1,\"1226\":1,\"1228\":1}}],[\"tbl\",{\"1\":{\"105\":1,\"114\":2,\"115\":1,\"116\":1,\"117\":1,\"118\":2,\"119\":1,\"120\":2,\"636\":1,\"1226\":2}}],[\"ta\",{\"1\":{\"1567\":1}}],[\"tag>\",{\"1\":{\"1338\":1}}],[\"tags标签引用\",{\"1\":{\"1351\":1}}],[\"tags\",{\"1\":{\"1329\":2,\"1351\":1}}],[\"tag\",{\"1\":{\"1329\":7,\"1435\":2,\"1567\":1}}],[\"tair\",{\"1\":{\"1234\":1}}],[\"tails\",{\"1\":{\"995\":3}}],[\"tailcontext\",{\"1\":{\"829\":1}}],[\"tail\",{\"0\":{\"1686\":1},\"1\":{\"3\":2,\"6\":2,\"8\":1,\"823\":1,\"865\":1,\"873\":1,\"886\":1,\"986\":2,\"1002\":5,\"1651\":7,\"1686\":2,\"1698\":1}}],[\"talk\",{\"1\":{\"1144\":1,\"1775\":1}}],[\"tarball\",{\"1\":{\"1688\":1}}],[\"tar\",{\"0\":{\"1688\":1},\"1\":{\"1634\":2,\"1688\":5}}],[\"targs\",{\"1\":{\"1125\":4}}],[\"targetclass\",{\"1\":{\"1059\":4}}],[\"targetsource\",{\"1\":{\"1019\":1}}],[\"target=\",{\"1\":{\"388\":1}}],[\"target\",{\"1\":{\"348\":2,\"374\":1,\"779\":3,\"788\":3,\"998\":19,\"1015\":6,\"1016\":2,\"1021\":1,\"1022\":2,\"1057\":2,\"1087\":1,\"1088\":3,\"1090\":5,\"1093\":1,\"1531\":1,\"1602\":1,\"1674\":6,\"1676\":6}}],[\"tarray\",{\"1\":{\"1095\":3}}],[\"tas\",{\"1\":{\"1059\":3}}],[\"tasks\",{\"1\":{\"791\":3,\"1113\":8,\"1116\":3}}],[\"task数量\",{\"1\":{\"119\":1}}],[\"task\",{\"1\":{\"77\":1,\"334\":1,\"791\":3,\"817\":2,\"1113\":8,\"1115\":8,\"1436\":1}}],[\"tab=name\",{\"1\":{\"675\":1}}],[\"table开关\",{\"1\":{\"639\":1}}],[\"table和行锁lock\",{\"1\":{\"564\":1}}],[\"tablename\",{\"1\":{\"118\":3,\"1226\":2}}],[\"tablespaces\",{\"1\":{\"639\":4}}],[\"tablespace\",{\"0\":{\"695\":1},\"1\":{\"639\":4}}],[\"tablesample\",{\"1\":{\"127\":5,\"1226\":2}}],[\"tables\",{\"1\":{\"71\":2,\"550\":2,\"552\":3,\"575\":1,\"675\":1,\"695\":1,\"728\":1,\"734\":1,\"1559\":1,\"1560\":1,\"1562\":2}}],[\"table<string\",{\"1\":{\"69\":1}}],[\"table<r\",{\"1\":{\"69\":1}}],[\"table\",{\"0\":{\"69\":1},\"1\":{\"69\":12,\"71\":1,\"113\":6,\"114\":1,\"115\":1,\"116\":1,\"117\":2,\"118\":13,\"119\":2,\"120\":2,\"124\":4,\"126\":3,\"130\":6,\"211\":1,\"240\":3,\"531\":2,\"532\":1,\"575\":5,\"576\":6,\"598\":1,\"599\":6,\"614\":1,\"615\":1,\"622\":1,\"634\":2,\"639\":2,\"673\":1,\"675\":4,\"677\":2,\"678\":2,\"701\":3,\"707\":1,\"717\":1,\"720\":2,\"726\":1,\"728\":1,\"749\":1,\"882\":1,\"1226\":5,\"1227\":3,\"1228\":5,\"1357\":1,\"1358\":1,\"1567\":6,\"1608\":1}}],[\"tack\",{\"1\":{\"417\":1}}],[\"taobao\",{\"1\":{\"391\":1}}],[\"tangbean\",{\"1\":{\"283\":1}}],[\"take\",{\"1\":{\"162\":1,\"1115\":3}}],[\"tvm\",{\"1\":{\"37\":1}}],[\"tvx\",{\"1\":{\"37\":1}}],[\"telegram上可以搜到很多\",{\"1\":{\"1809\":1}}],[\"telemetry\",{\"1\":{\"407\":1}}],[\"ted\",{\"1\":{\"1775\":1}}],[\"tes\",{\"1\":{\"1191\":1}}],[\"test中的\",{\"1\":{\"1718\":1}}],[\"testadduser\",{\"1\":{\"1718\":1}}],[\"testament\",{\"1\":{\"407\":1}}],[\"test<\",{\"1\":{\"1717\":1}}],[\"test依赖\",{\"1\":{\"1717\":1}}],[\"test支持的测试种类\",{\"1\":{\"1716\":1}}],[\"test之上的再次封装\",{\"1\":{\"1716\":1}}],[\"test与junit等其他测试框架结合起来\",{\"1\":{\"1716\":1}}],[\"testlist\",{\"1\":{\"1712\":7}}],[\"testclassmock\",{\"1\":{\"1711\":14}}],[\"testclass\",{\"1\":{\"1711\":3,\"1714\":6,\"1715\":6}}],[\"testcreatewithparent\",{\"1\":{\"1181\":1}}],[\"testing\",{\"1\":{\"1333\":1}}],[\"testgetwritelock\",{\"1\":{\"1188\":2}}],[\"testgetreadlock\",{\"1\":{\"1188\":2}}],[\"testgetdata\",{\"1\":{\"1181\":1}}],[\"testreturn\",{\"1\":{\"1711\":1}}],[\"testredis\",{\"1\":{\"1368\":1}}],[\"testreadwritelock\",{\"1\":{\"1188\":1}}],[\"testreceive\",{\"1\":{\"418\":1}}],[\"testdelete\",{\"1\":{\"1181\":1}}],[\"testsetdata\",{\"1\":{\"1181\":1}}],[\"testservice\",{\"1\":{\"78\":1}}],[\"test1\",{\"1\":{\"1169\":2}}],[\"test02\",{\"1\":{\"1106\":1}}],[\"test01\",{\"1\":{\"675\":1}}],[\"testthreadpoolexecutor\",{\"1\":{\"1106\":1}}],[\"testtransactiontemplate\",{\"1\":{\"1039\":1}}],[\"testtransactionmanager\",{\"1\":{\"1038\":1}}],[\"test=\",{\"1\":{\"535\":2,\"536\":2,\"537\":2}}],[\"test注解\",{\"1\":{\"356\":1}}],[\"test2\",{\"1\":{\"90\":1}}],[\"testevnetbus\",{\"1\":{\"84\":1}}],[\"test\",{\"1\":{\"78\":1,\"84\":1,\"98\":1,\"113\":3,\"118\":13,\"129\":6,\"355\":1,\"388\":1,\"418\":4,\"488\":1,\"535\":1,\"590\":3,\"620\":1,\"675\":2,\"850\":2,\"1016\":2,\"1038\":1,\"1039\":1,\"1106\":1,\"1151\":3,\"1155\":2,\"1177\":1,\"1181\":5,\"1188\":2,\"1191\":3,\"1192\":1,\"1226\":6,\"1227\":3,\"1347\":1,\"1351\":1,\"1368\":1,\"1608\":1,\"1632\":1,\"1685\":2,\"1688\":4,\"1693\":2,\"1711\":1,\"1714\":2,\"1715\":2,\"1716\":2,\"1717\":3,\"1718\":1}}],[\"temp2\",{\"1\":{\"1169\":1}}],[\"temp1\",{\"1\":{\"1169\":1}}],[\"temporary\",{\"1\":{\"617\":1,\"639\":1}}],[\"template\",{\"1\":{\"42\":1,\"417\":1,\"421\":1}}],[\"texchange\",{\"1\":{\"417\":1}}],[\"text2\",{\"1\":{\"996\":3}}],[\"text1\",{\"1\":{\"996\":4}}],[\"text等\",{\"1\":{\"707\":1}}],[\"textfile2\",{\"1\":{\"675\":1}}],[\"textfile1\",{\"1\":{\"675\":1}}],[\"textmessage\",{\"1\":{\"403\":1,\"1625\":1}}],[\"text\",{\"1\":{\"36\":1,\"42\":1,\"175\":4,\"408\":1,\"663\":1,\"697\":1,\"883\":2,\"1398\":1,\"1438\":3,\"1792\":1}}],[\"tencent\",{\"1\":{\"283\":1,\"546\":2,\"1304\":1}}],[\"technologies\",{\"1\":{\"411\":1}}],[\"tech\",{\"1\":{\"283\":1,\"367\":1,\"1083\":1,\"1144\":1,\"1304\":3,\"1793\":1}}],[\"termination\",{\"1\":{\"1116\":1}}],[\"terminatingthreadlocal\",{\"1\":{\"1093\":2}}],[\"terminate\",{\"1\":{\"1116\":1}}],[\"terminated\",{\"1\":{\"113\":5,\"118\":1,\"119\":1,\"121\":1,\"124\":2,\"126\":1,\"336\":1,\"614\":2,\"1089\":1,\"1112\":5,\"1116\":6,\"1227\":7,\"1228\":2,\"1509\":1}}],[\"terminal\",{\"1\":{\"1068\":9,\"1361\":1}}],[\"terms\",{\"1\":{\"51\":1}}],[\"termquery\",{\"1\":{\"51\":2}}],[\"term\",{\"1\":{\"35\":1,\"1281\":3,\"1620\":3}}],[\"term2\",{\"1\":{\"34\":1}}],[\"term1\",{\"1\":{\"34\":1}}],[\"teaexception\",{\"1\":{\"14\":3}}],[\"teautil\",{\"1\":{\"14\":4}}],[\"ticktime=2000\",{\"1\":{\"1164\":1,\"1196\":1}}],[\"ticket\",{\"1\":{\"27\":1,\"1643\":1}}],[\"tinyid\",{\"1\":{\"1622\":1}}],[\"tinyint\",{\"1\":{\"112\":1,\"124\":5,\"661\":1}}],[\"tinyblob\",{\"1\":{\"664\":1}}],[\"tinytext\",{\"1\":{\"663\":1}}],[\"title>\",{\"1\":{\"1870\":1}}],[\"title\",{\"1\":{\"535\":3,\"536\":3,\"537\":4}}],[\"tidying\",{\"1\":{\"1112\":3,\"1116\":3}}],[\"tid\",{\"1\":{\"362\":4,\"1087\":1,\"1088\":1}}],[\"tianjin\",{\"1\":{\"129\":1}}],[\"tip\",{\"1\":{\"37\":1}}],[\"time`\",{\"1\":{\"1357\":2,\"1358\":2}}],[\"times\",{\"1\":{\"1119\":2,\"1714\":3,\"1715\":3}}],[\"timestampdiff\",{\"1\":{\"1567\":1}}],[\"timestamp\",{\"1\":{\"112\":1,\"124\":3,\"129\":2,\"192\":5,\"465\":1,\"521\":1,\"665\":1,\"1357\":5,\"1358\":5,\"1567\":3}}],[\"timeproc\",{\"1\":{\"920\":1}}],[\"time控制\",{\"1\":{\"732\":1}}],[\"time默认为10秒\",{\"1\":{\"645\":1}}],[\"time设置值并且扫描记录数不小于min\",{\"1\":{\"645\":1}}],[\"time=2\",{\"1\":{\"612\":1}}],[\"timeindex\",{\"1\":{\"475\":1}}],[\"timer单线程\",{\"1\":{\"334\":1}}],[\"timer\",{\"1\":{\"334\":2,\"1110\":1}}],[\"timeout=\",{\"1\":{\"530\":4}}],[\"timeout\",{\"0\":{\"855\":1},\"1\":{\"24\":1,\"159\":1,\"184\":1,\"339\":1,\"483\":1,\"485\":1,\"785\":1,\"854\":2,\"855\":3,\"924\":1,\"1040\":1,\"1091\":1,\"1113\":2,\"1363\":1,\"1512\":1}}],[\"timeunit\",{\"1\":{\"14\":1,\"73\":1,\"74\":2,\"93\":1,\"156\":1,\"159\":1,\"332\":1,\"817\":1,\"1091\":1,\"1106\":2,\"1110\":3,\"1113\":2,\"1115\":1,\"1120\":3,\"1261\":1,\"1263\":1,\"1363\":1,\"1369\":1,\"1511\":1}}],[\"time\",{\"1\":{\"6\":2,\"34\":1,\"156\":1,\"242\":1,\"334\":1,\"353\":2,\"460\":1,\"467\":1,\"665\":1,\"923\":2,\"966\":1,\"1120\":1,\"1138\":1,\"1410\":4,\"1567\":3}}],[\"timedout\",{\"1\":{\"1115\":4}}],[\"timed\",{\"1\":{\"6\":2,\"336\":1,\"1089\":1,\"1095\":1,\"1115\":3,\"1509\":1}}],[\"totime\",{\"1\":{\"1567\":1}}],[\"totalpayfee\",{\"1\":{\"124\":1}}],[\"totalmoney\",{\"1\":{\"124\":6,\"127\":1}}],[\"total\",{\"1\":{\"51\":2}}],[\"totalhits\",{\"1\":{\"34\":1}}],[\"tojsonstring\",{\"1\":{\"1261\":1}}],[\"tojson\",{\"1\":{\"1244\":2}}],[\"tolerance\",{\"1\":{\"1206\":2,\"1278\":1,\"1618\":1}}],[\"tolist\",{\"1\":{\"79\":1,\"312\":2,\"1068\":1}}],[\"to数组\",{\"1\":{\"947\":1}}],[\"tobytearray\",{\"1\":{\"849\":1}}],[\"touchwatchkey函数对watched\",{\"1\":{\"960\":1}}],[\"touch\",{\"1\":{\"818\":1}}],[\"touppercase\",{\"1\":{\"58\":2}}],[\"tomillis\",{\"1\":{\"1091\":1}}],[\"tomap\",{\"1\":{\"1068\":1}}],[\"tomap等\",{\"1\":{\"312\":1}}],[\"tomcat01\",{\"1\":{\"1634\":1}}],[\"tomcat\",{\"1\":{\"808\":1,\"1634\":4}}],[\"tom\",{\"1\":{\"623\":1}}],[\"todo\",{\"1\":{\"499\":1,\"553\":1,\"1369\":1}}],[\"toint\",{\"1\":{\"476\":2}}],[\"top\",{\"1\":{\"1631\":2,\"1634\":1,\"1658\":2,\"1700\":1,\"1796\":2}}],[\"topic1\",{\"1\":{\"1341\":1}}],[\"topicandpartition\",{\"1\":{\"496\":1}}],[\"topicpartition\",{\"1\":{\"488\":1}}],[\"topicpartitions\",{\"1\":{\"488\":3}}],[\"topicpartion\",{\"1\":{\"450\":1}}],[\"topic名称+分区序号\",{\"1\":{\"475\":1}}],[\"topic的数据被分成一个或多个partition\",{\"1\":{\"450\":1}}],[\"topics\",{\"1\":{\"446\":2,\"465\":1,\"488\":3,\"489\":1,\"846\":1}}],[\"topic从几十到几百个时候\",{\"1\":{\"435\":1}}],[\"topic达到几百\",{\"1\":{\"435\":1}}],[\"topic数量对吞吐量的影响\",{\"1\":{\"435\":1}}],[\"topic\",{\"1\":{\"404\":1,\"408\":3,\"414\":1,\"430\":1,\"433\":1,\"435\":1,\"443\":4,\"445\":2,\"446\":3,\"452\":3,\"453\":3,\"456\":2,\"475\":1,\"483\":1,\"485\":1,\"490\":1,\"494\":1,\"495\":4,\"500\":1,\"1351\":4,\"1625\":1,\"1626\":6,\"1628\":2}}],[\"topscoredoccollector\",{\"1\":{\"53\":1}}],[\"toset\",{\"1\":{\"312\":1,\"1068\":1}}],[\"tostringhelper\",{\"1\":{\"60\":1}}],[\"tostring\",{\"1\":{\"15\":2,\"59\":1,\"60\":1,\"61\":1,\"391\":1,\"418\":1,\"515\":3,\"774\":2,\"789\":1,\"818\":2,\"843\":1,\"996\":1,\"1015\":4,\"1263\":1}}],[\"toarray\",{\"1\":{\"312\":1,\"1363\":1}}],[\"tools\",{\"1\":{\"475\":1,\"1218\":1,\"1366\":2}}],[\"tools目录下\",{\"1\":{\"228\":1}}],[\"tool\",{\"1\":{\"125\":1,\"229\":1,\"230\":1,\"233\":1}}],[\"token头部实现的鉴权\",{\"1\":{\"1791\":1}}],[\"tokens\",{\"1\":{\"1791\":5}}],[\"token\",{\"1\":{\"15\":10,\"26\":6,\"1642\":4,\"1791\":8}}],[\"to\",{\"1\":{\"8\":1,\"79\":1,\"117\":1,\"118\":1,\"129\":1,\"453\":4,\"575\":1,\"591\":1,\"643\":1,\"649\":1,\"734\":1,\"739\":1,\"740\":1,\"749\":2,\"777\":3,\"864\":1,\"870\":1,\"937\":1,\"945\":1,\"946\":1,\"1009\":1,\"1116\":1,\"1151\":2,\"1154\":1,\"1155\":1,\"1326\":1,\"1338\":1,\"1367\":1,\"1664\":1,\"1858\":1,\"1859\":1}}],[\"than\",{\"1\":{\"978\":1,\"1050\":1,\"1051\":1}}],[\"that\",{\"1\":{\"60\":3}}],[\"theunsafe\",{\"1\":{\"1135\":3}}],[\"theinternalunsafe\",{\"1\":{\"1135\":2,\"1137\":3}}],[\"theadlocalmap\",{\"1\":{\"1514\":1}}],[\"thead\",{\"1\":{\"1074\":1}}],[\"the\",{\"1\":{\"283\":1,\"453\":8,\"1214\":1,\"1741\":1,\"1793\":1}}],[\"thenthrow\",{\"1\":{\"1713\":1}}],[\"thenreturn\",{\"1\":{\"1711\":6,\"1712\":3,\"1714\":1,\"1715\":1}}],[\"thenrunasync\",{\"1\":{\"163\":2}}],[\"thenrun\",{\"1\":{\"163\":1}}],[\"then\",{\"1\":{\"596\":5,\"630\":2,\"631\":2,\"632\":4,\"1263\":1,\"1368\":1,\"1567\":2,\"1853\":1,\"1854\":1}}],[\"thenacceptasync\",{\"1\":{\"163\":2,\"1369\":2}}],[\"thenaccept\",{\"1\":{\"163\":1,\"1363\":2}}],[\"thenapplyasync\",{\"1\":{\"163\":2}}],[\"thenapply\",{\"1\":{\"163\":1}}],[\"thunk\",{\"1\":{\"195\":7}}],[\"thirdpartfeignservice\",{\"1\":{\"14\":1}}],[\"this\",{\"1\":{\"6\":2,\"8\":1,\"15\":3,\"60\":3,\"153\":1,\"154\":1,\"184\":1,\"187\":3,\"189\":4,\"192\":4,\"195\":1,\"196\":16,\"240\":1,\"296\":2,\"417\":1,\"450\":3,\"523\":1,\"542\":3,\"543\":1,\"791\":2,\"797\":5,\"828\":1,\"865\":1,\"867\":1,\"871\":1,\"872\":1,\"873\":1,\"1002\":3,\"1008\":1,\"1015\":2,\"1016\":5,\"1039\":1,\"1055\":7,\"1059\":5,\"1073\":2,\"1088\":11,\"1090\":2,\"1092\":2,\"1093\":1,\"1095\":2,\"1114\":5,\"1116\":3,\"1120\":2,\"1136\":1,\"1261\":1,\"1651\":2,\"1709\":1}}],[\"through\",{\"1\":{\"1435\":1}}],[\"throws\",{\"1\":{\"8\":1,\"14\":1,\"15\":2,\"77\":1,\"98\":1,\"188\":1,\"346\":1,\"391\":1,\"418\":1,\"507\":1,\"523\":1,\"541\":1,\"544\":2,\"779\":2,\"791\":2,\"797\":1,\"811\":2,\"812\":2,\"818\":3,\"820\":2,\"821\":1,\"822\":4,\"823\":4,\"846\":1,\"849\":2,\"865\":1,\"866\":1,\"867\":1,\"873\":2,\"1008\":3,\"1009\":2,\"1010\":1,\"1015\":2,\"1016\":1,\"1047\":3,\"1049\":1,\"1050\":1,\"1051\":1,\"1055\":1,\"1059\":3,\"1067\":1,\"1091\":1,\"1181\":5,\"1188\":2,\"1192\":2,\"1369\":1,\"1533\":1}}],[\"throw\",{\"1\":{\"6\":1,\"8\":2,\"9\":3,\"188\":1,\"196\":1,\"347\":1,\"362\":1,\"541\":1,\"791\":2,\"797\":2,\"864\":1,\"865\":1,\"870\":1,\"1008\":2,\"1009\":1,\"1015\":5,\"1038\":1,\"1049\":2,\"1050\":1,\"1051\":1,\"1055\":2,\"1059\":1,\"1088\":1,\"1090\":1,\"1091\":1,\"1113\":3,\"1114\":1,\"1115\":1,\"1120\":1,\"1135\":1,\"1136\":1}}],[\"throwable>\",{\"1\":{\"163\":3}}],[\"throwables\",{\"0\":{\"62\":1},\"1\":{\"62\":5}}],[\"throwable\",{\"1\":{\"6\":1,\"77\":1,\"163\":3,\"196\":1,\"523\":1,\"796\":1,\"797\":3,\"871\":1,\"873\":1,\"1015\":2,\"1016\":1,\"1055\":1,\"1059\":4,\"1090\":1,\"1096\":2,\"1115\":1,\"1533\":1}}],[\"thriftserver\",{\"1\":{\"1224\":1,\"1225\":1}}],[\"thrift是一种c\",{\"1\":{\"1126\":1}}],[\"thrift\",{\"0\":{\"1124\":1},\"1\":{\"1124\":1,\"1125\":2,\"1406\":1,\"1623\":1}}],[\"thresh\",{\"1\":{\"1514\":1}}],[\"threshold\",{\"1\":{\"615\":1,\"732\":1,\"1413\":1,\"1868\":6}}],[\"threw\",{\"1\":{\"1055\":2}}],[\"threadnumber\",{\"1\":{\"1108\":2}}],[\"thread类的使用\",{\"1\":{\"1100\":1}}],[\"threadterminated\",{\"1\":{\"1093\":2}}],[\"threadinitnumber++\",{\"1\":{\"1088\":1}}],[\"threadinitnumber\",{\"1\":{\"1087\":1}}],[\"thread主要负责这些io请求的回调\",{\"1\":{\"640\":1}}],[\"threadstartfailed\",{\"1\":{\"1090\":1}}],[\"threadstatus\",{\"1\":{\"1087\":1,\"1090\":1}}],[\"threadseqnumber\",{\"1\":{\"1087\":1}}],[\"threads\",{\"1\":{\"445\":1,\"1095\":1,\"1099\":1,\"1119\":1,\"1464\":1}}],[\"threads=8\",{\"1\":{\"445\":1}}],[\"threads=3\",{\"1\":{\"445\":1}}],[\"threadfactory接口的实现类用来创建线程\",{\"1\":{\"1108\":1}}],[\"threadfactory\",{\"1\":{\"332\":2,\"1106\":2,\"1108\":1,\"1120\":4,\"1511\":2}}],[\"thread常用api\",{\"0\":{\"330\":1}}],[\"threadgroup\",{\"0\":{\"1099\":1},\"1\":{\"188\":3,\"196\":3,\"1087\":1,\"1088\":1,\"1099\":5,\"1100\":1,\"1108\":1}}],[\"threadpoolexecutor提供了以下策略\",{\"1\":{\"1511\":1}}],[\"threadpoolexecutor\",{\"0\":{\"1103\":1},\"1\":{\"152\":1,\"332\":6,\"1104\":1,\"1106\":2,\"1109\":1,\"1110\":1,\"1111\":1,\"1113\":2,\"1114\":1,\"1115\":3,\"1116\":2,\"1120\":1,\"1369\":2,\"1511\":3}}],[\"threadpoolfactoryutil\",{\"1\":{\"93\":1}}],[\"threadb\",{\"1\":{\"143\":4}}],[\"threadlocalrandomsecondaryseed\",{\"1\":{\"1087\":1}}],[\"threadlocalrandomseed\",{\"1\":{\"1087\":1}}],[\"threadlocalrandomprobe\",{\"1\":{\"1087\":1}}],[\"threadlocal<set<transactionsynchronization>>\",{\"1\":{\"1045\":1,\"1383\":1}}],[\"threadlocal<map<object\",{\"1\":{\"1045\":1,\"1383\":1}}],[\"threadlocal<\",{\"1\":{\"154\":1}}],[\"threadlocals\",{\"1\":{\"154\":3,\"1087\":1,\"1093\":2}}],[\"threadlocalmap\",{\"1\":{\"154\":11,\"1087\":2,\"1514\":3}}],[\"threadlocal结构\",{\"1\":{\"154\":1}}],[\"threadlocal\",{\"0\":{\"154\":1,\"1514\":1},\"1\":{\"137\":1,\"154\":14,\"809\":1,\"1045\":1,\"1087\":2,\"1088\":1,\"1514\":8,\"1614\":1}}],[\"thread\",{\"0\":{\"136\":1,\"1086\":1},\"1\":{\"3\":2,\"6\":6,\"8\":4,\"9\":8,\"64\":1,\"77\":1,\"136\":4,\"139\":1,\"154\":6,\"183\":1,\"188\":4,\"196\":4,\"210\":1,\"234\":1,\"235\":2,\"277\":1,\"327\":1,\"336\":1,\"362\":9,\"363\":6,\"364\":4,\"365\":1,\"367\":2,\"418\":1,\"640\":14,\"671\":1,\"791\":2,\"811\":1,\"816\":1,\"817\":2,\"822\":4,\"850\":1,\"869\":1,\"871\":4,\"1074\":1,\"1077\":4,\"1086\":2,\"1087\":2,\"1088\":4,\"1089\":3,\"1090\":5,\"1091\":1,\"1092\":3,\"1093\":1,\"1095\":6,\"1096\":2,\"1099\":2,\"1108\":8,\"1114\":6,\"1115\":5,\"1138\":1,\"1188\":2,\"1263\":1,\"1508\":2,\"1514\":1,\"1516\":1}}],[\"t\",{\"1\":{\"6\":5,\"8\":6,\"59\":1,\"62\":6,\"77\":2,\"113\":4,\"118\":1,\"119\":2,\"124\":2,\"126\":8,\"153\":1,\"154\":6,\"163\":9,\"187\":3,\"189\":3,\"192\":4,\"193\":2,\"194\":3,\"196\":2,\"263\":1,\"306\":2,\"312\":2,\"362\":5,\"363\":9,\"408\":2,\"509\":1,\"510\":1,\"522\":2,\"543\":3,\"596\":1,\"675\":4,\"871\":1,\"873\":2,\"882\":2,\"888\":4,\"1010\":1,\"1039\":1,\"1055\":2,\"1068\":12,\"1092\":3,\"1096\":1,\"1108\":6,\"1113\":3,\"1114\":4,\"1169\":1,\"1173\":1,\"1227\":1,\"1228\":1,\"1322\":1,\"1350\":1,\"1567\":4,\"1631\":1,\"1735\":1,\"1862\":1,\"1871\":1,\"1878\":2}}],[\"tr\",{\"0\":{\"1687\":1},\"1\":{\"1687\":2}}],[\"trx\",{\"1\":{\"638\":1,\"739\":1,\"748\":1,\"749\":26,\"751\":5,\"754\":13,\"1555\":1,\"1557\":13}}],[\"trietree\",{\"1\":{\"1361\":1}}],[\"trietree封装了一个treenode根结点\",{\"1\":{\"1361\":1}}],[\"trietree>里\",{\"1\":{\"1361\":1}}],[\"trie\",{\"1\":{\"1361\":1}}],[\"trib将对每个给定的槽分别执行上面给出的步骤\",{\"1\":{\"946\":1}}],[\"trib向集群中的任意一个节点发送cluster\",{\"1\":{\"946\":1}}],[\"trib向源节点发送cluster\",{\"1\":{\"946\":1}}],[\"trib都向源节点发送一个migrate\",{\"1\":{\"946\":1}}],[\"trib对源节点发送cluster\",{\"1\":{\"946\":1}}],[\"trib对目标节点发送cluster\",{\"1\":{\"946\":1}}],[\"trib负责\",{\"1\":{\"946\":1}}],[\"triggers\",{\"1\":{\"636\":1}}],[\"trigger\",{\"1\":{\"636\":5}}],[\"trim>\",{\"1\":{\"537\":2}}],[\"triminvalidbytes\",{\"1\":{\"476\":1}}],[\"trimfrom\",{\"1\":{\"79\":1}}],[\"trimresults\",{\"1\":{\"79\":1}}],[\"trim\",{\"0\":{\"537\":1},\"1\":{\"79\":1,\"537\":3,\"593\":2,\"1567\":1}}],[\"trustin\",{\"1\":{\"807\":1}}],[\"truncate\",{\"1\":{\"575\":1,\"1226\":1,\"1567\":1}}],[\"true开启这个功能后\",{\"1\":{\"1347\":1}}],[\"true开启附加模式\",{\"1\":{\"317\":1,\"318\":1}}],[\"true|false\",{\"1\":{\"828\":1}}],[\"truename\",{\"1\":{\"124\":1}}],[\"true表示外部表\",{\"1\":{\"117\":1}}],[\"true动态添加\",{\"1\":{\"42\":1}}],[\"true\",{\"1\":{\"7\":1,\"8\":2,\"9\":8,\"42\":1,\"79\":1,\"93\":2,\"112\":2,\"117\":1,\"146\":1,\"156\":1,\"157\":1,\"184\":1,\"188\":4,\"195\":1,\"196\":2,\"301\":1,\"363\":1,\"417\":2,\"418\":2,\"422\":1,\"461\":2,\"467\":1,\"470\":1,\"485\":1,\"488\":1,\"491\":1,\"530\":5,\"533\":1,\"538\":1,\"634\":1,\"767\":1,\"777\":1,\"782\":1,\"783\":1,\"786\":1,\"791\":3,\"829\":1,\"833\":1,\"839\":1,\"854\":1,\"865\":1,\"867\":1,\"989\":1,\"993\":2,\"1015\":1,\"1049\":1,\"1050\":1,\"1051\":1,\"1054\":1,\"1090\":1,\"1092\":5,\"1113\":1,\"1114\":2,\"1115\":2,\"1120\":1,\"1135\":1,\"1226\":1,\"1228\":1,\"1269\":3,\"1535\":1,\"1536\":1,\"1613\":3,\"1653\":1,\"1672\":1,\"1675\":2,\"1791\":2,\"1854\":1,\"1870\":1,\"1871\":1}}],[\"trouterkey\",{\"1\":{\"417\":1}}],[\"treat\",{\"1\":{\"1664\":1}}],[\"treplytext\",{\"1\":{\"417\":1}}],[\"treplycode\",{\"1\":{\"417\":1}}],[\"treenode\",{\"1\":{\"1000\":1,\"1001\":2,\"1361\":2}}],[\"tree的变种\",{\"1\":{\"698\":1}}],[\"tree\",{\"1\":{\"697\":1,\"698\":3,\"1344\":1,\"1350\":5,\"1361\":1}}],[\"treemap\",{\"0\":{\"1495\":1},\"1\":{\"305\":1,\"1495\":1,\"1496\":1}}],[\"treemultimap\",{\"1\":{\"67\":1}}],[\"treemultiset\",{\"1\":{\"66\":1}}],[\"treeset\",{\"1\":{\"304\":1,\"1496\":1}}],[\"treerangemap\",{\"1\":{\"70\":1}}],[\"treerangeset\",{\"1\":{\"70\":1}}],[\"treebasedtable\",{\"1\":{\"69\":1}}],[\"treekeys\",{\"1\":{\"67\":1}}],[\"traversal\",{\"1\":{\"1860\":2}}],[\"travel\",{\"1\":{\"1722\":1}}],[\"trailing\",{\"1\":{\"1567\":1}}],[\"trailer部分4byte\",{\"1\":{\"739\":1}}],[\"trailer\",{\"1\":{\"688\":1,\"691\":1,\"740\":1}}],[\"track\",{\"1\":{\"1338\":1,\"1669\":2,\"1670\":3,\"1672\":4,\"1673\":3,\"1674\":3,\"1675\":8,\"1676\":3,\"1677\":4,\"1861\":3}}],[\"tracked\",{\"1\":{\"1326\":1}}],[\"traceroute\",{\"1\":{\"1427\":2}}],[\"trace即优化过程\",{\"1\":{\"729\":1}}],[\"trace=\",{\"1\":{\"729\":2}}],[\"trace表记录了内部具体的优化策略过程\",{\"1\":{\"729\":1}}],[\"trace\",{\"1\":{\"234\":1,\"355\":2,\"384\":2,\"390\":1,\"729\":1,\"1095\":5,\"1567\":2}}],[\"traffic\",{\"1\":{\"1304\":1}}],[\"translation\",{\"1\":{\"1443\":1}}],[\"transantional\",{\"1\":{\"1059\":1}}],[\"transactioninfo\",{\"1\":{\"1059\":2}}],[\"transactioninterceptor\",{\"1\":{\"1059\":8,\"1060\":1}}],[\"transactionisolationlevel\",{\"1\":{\"542\":1}}],[\"transactionoperations\",{\"1\":{\"1054\":1}}],[\"transactionattribute\",{\"1\":{\"1059\":1}}],[\"transactionattributesource\",{\"1\":{\"1059\":11}}],[\"transactionaspectsupport\",{\"1\":{\"1059\":1}}],[\"transactionadvisor\",{\"0\":{\"1059\":1},\"1\":{\"1059\":1}}],[\"transactionautoconfiguration\",{\"1\":{\"1054\":1}}],[\"transactional的aop\",{\"1\":{\"1611\":1}}],[\"transactional的aop声明式\",{\"1\":{\"1276\":1}}],[\"transactionalinterceptor\",{\"1\":{\"1059\":1}}],[\"transactionalmanagement\",{\"0\":{\"1057\":1}}],[\"transactional\",{\"0\":{\"1056\":1},\"1\":{\"461\":2,\"1040\":3,\"1045\":1,\"1050\":2,\"1055\":1,\"1056\":2,\"1058\":1,\"1059\":1,\"1060\":1,\"1061\":2,\"1276\":1,\"1383\":2,\"1608\":1,\"1611\":1}}],[\"transactionexception\",{\"1\":{\"1047\":3,\"1049\":1,\"1050\":1,\"1051\":1,\"1055\":1}}],[\"transactions\",{\"1\":{\"1283\":1}}],[\"transactionsynchronization\",{\"1\":{\"1050\":1,\"1051\":1}}],[\"transactionsynchronizationmanager可以对当前线程的事务添加transactionsynchronization回调\",{\"1\":{\"1045\":1}}],[\"transactionsynchronizationmanager\",{\"0\":{\"1045\":1},\"1\":{\"1045\":3,\"1383\":2}}],[\"transactionstatus表示的是逻辑事务的状态\",{\"1\":{\"1044\":1}}],[\"transactionstatus\",{\"0\":{\"1044\":1},\"1\":{\"1038\":2,\"1039\":4,\"1042\":3,\"1044\":4,\"1047\":3,\"1049\":1,\"1050\":1,\"1051\":1,\"1055\":1,\"1059\":2,\"1060\":1,\"1383\":1}}],[\"transactioncallback\",{\"1\":{\"1055\":1}}],[\"transactioncallback<object>\",{\"1\":{\"1039\":1}}],[\"transactioncallback<t>\",{\"1\":{\"1039\":1,\"1055\":1}}],[\"transactioncallbackwithoutresult\",{\"1\":{\"1039\":3}}],[\"transactiontemplate\",{\"0\":{\"1039\":1},\"1\":{\"1039\":6,\"1054\":4,\"1055\":4,\"1383\":1}}],[\"transactiondefinition\",{\"0\":{\"1043\":1},\"1\":{\"1038\":7,\"1039\":2,\"1042\":3,\"1043\":2,\"1047\":1,\"1049\":8,\"1055\":1,\"1059\":2,\"1060\":1,\"1383\":1}}],[\"transactionmanagementconfigutils\",{\"1\":{\"1058\":2,\"1059\":1}}],[\"transactionmanagementconfigurationselector\",{\"1\":{\"1057\":2,\"1058\":2}}],[\"transactionmanagercustomizers\",{\"1\":{\"1054\":2}}],[\"transactionmanager\",{\"0\":{\"525\":1,\"1038\":1,\"1046\":1},\"1\":{\"1038\":4,\"1042\":1,\"1047\":3,\"1054\":8,\"1055\":9,\"1059\":5,\"1060\":1,\"1383\":2}}],[\"transactionmanager>\",{\"1\":{\"524\":1}}],[\"transactionmanger\",{\"1\":{\"1038\":2,\"1059\":2}}],[\"transaction参数\",{\"1\":{\"550\":1}}],[\"transactionfactory\",{\"1\":{\"542\":4}}],[\"transaction\",{\"1\":{\"461\":1,\"511\":1,\"542\":6,\"545\":1,\"684\":1,\"734\":1,\"737\":2,\"739\":2,\"1033\":1,\"1044\":1,\"1045\":1,\"1049\":8,\"1050\":3,\"1051\":2,\"1058\":3,\"1059\":1,\"1287\":2,\"1383\":1,\"1557\":2,\"1559\":1}}],[\"transmission\",{\"1\":{\"839\":1}}],[\"transmittablethreadlocal\",{\"1\":{\"154\":1,\"1514\":1}}],[\"transform\",{\"1\":{\"1213\":1}}],[\"transformedoptional\",{\"1\":{\"58\":2}}],[\"transfer\",{\"1\":{\"1363\":1,\"1640\":1}}],[\"transferavflightreqs\",{\"1\":{\"1363\":1}}],[\"transferfrom\",{\"1\":{\"801\":1}}],[\"transferto\",{\"0\":{\"801\":1},\"1\":{\"777\":1,\"801\":2,\"802\":1}}],[\"trans为真\",{\"1\":{\"749\":1}}],[\"trans\",{\"1\":{\"749\":1}}],[\"transport\",{\"1\":{\"405\":1,\"407\":1,\"433\":1,\"1125\":3}}],[\"transportclient客户端\",{\"1\":{\"38\":1}}],[\"transient4\",{\"1\":{\"1615\":1}}],[\"transient3\",{\"1\":{\"1615\":1}}],[\"transient2\",{\"1\":{\"1615\":1}}],[\"transient1\",{\"1\":{\"1615\":1}}],[\"transient修饰的成员变量不参与序列化\",{\"1\":{\"321\":1}}],[\"transient\",{\"1\":{\"3\":5,\"187\":1,\"1608\":1,\"1615\":4}}],[\"tryterminate\",{\"1\":{\"1116\":4}}],[\"tryoptimisticread\",{\"1\":{\"158\":1}}],[\"trylock\",{\"1\":{\"9\":1,\"156\":2,\"1114\":2,\"1264\":2}}],[\"tryinitializehead\",{\"1\":{\"6\":1,\"8\":1}}],[\"try\",{\"1\":{\"6\":1,\"8\":1,\"14\":2,\"93\":1,\"161\":1,\"183\":1,\"188\":1,\"196\":3,\"241\":1,\"317\":1,\"318\":1,\"346\":3,\"461\":1,\"507\":2,\"514\":1,\"541\":2,\"767\":1,\"788\":1,\"791\":2,\"792\":2,\"796\":1,\"797\":2,\"822\":1,\"864\":1,\"865\":1,\"870\":1,\"871\":1,\"873\":1,\"1008\":1,\"1009\":1,\"1015\":2,\"1038\":1,\"1049\":1,\"1055\":1,\"1059\":1,\"1061\":1,\"1090\":2,\"1096\":2,\"1114\":2,\"1115\":4,\"1116\":4,\"1135\":1,\"1136\":1,\"1263\":2,\"1264\":1,\"1284\":4,\"1533\":5,\"1713\":2,\"1858\":1}}],[\"tryreleaseshared\",{\"1\":{\"5\":1}}],[\"tryrelease\",{\"1\":{\"5\":1,\"7\":1}}],[\"tryrelease方法修改\",{\"1\":{\"5\":1}}],[\"tryacquireshared\",{\"1\":{\"5\":1,\"6\":1}}],[\"tryacquire\",{\"1\":{\"5\":1,\"6\":1,\"9\":3,\"159\":1}}],[\"tryacquirenanos\",{\"1\":{\"5\":1}}],[\"pwd\",{\"1\":{\"1862\":1}}],[\"pnpm\",{\"1\":{\"1791\":4}}],[\"pnr\",{\"1\":{\"1738\":2}}],[\"pnrpassenger\",{\"1\":{\"1738\":1}}],[\"png\",{\"1\":{\"913\":1,\"1400\":1}}],[\"pps\",{\"1\":{\"1490\":2,\"1631\":1}}],[\"p操作减1\",{\"1\":{\"1463\":1}}],[\"pkt\",{\"1\":{\"1422\":1}}],[\"pkey\",{\"1\":{\"130\":1}}],[\"pb\",{\"1\":{\"1212\":1}}],[\"pzxid\",{\"1\":{\"1174\":1}}],[\"pc2\",{\"1\":{\"1861\":2}}],[\"pc1\",{\"1\":{\"1861\":2}}],[\"pc\",{\"1\":{\"1861\":7}}],[\"pcb\",{\"1\":{\"1450\":1,\"1454\":1}}],[\"pcap\",{\"1\":{\"1396\":1}}],[\"pcall函数的错误报告辅助函数\",{\"1\":{\"963\":1}}],[\"pct控制\",{\"1\":{\"732\":1}}],[\"pfail疑似下线标记\",{\"1\":{\"948\":1}}],[\"pfxnn\",{\"1\":{\"720\":1}}],[\"pt站的这种方式阻挡了大部分低素质伸手党\",{\"1\":{\"1810\":1}}],[\"pthread\",{\"1\":{\"1487\":1}}],[\"ptm\",{\"1\":{\"1059\":3}}],[\"pttl\",{\"1\":{\"908\":1}}],[\"ptr\",{\"1\":{\"895\":1,\"1792\":2}}],[\"p开头的命令单位ms\",{\"1\":{\"908\":1}}],[\"p2143\",{\"1\":{\"675\":2}}],[\"p2p\",{\"1\":{\"403\":1,\"1625\":1}}],[\"p1234\",{\"1\":{\"675\":2}}],[\"p123456\",{\"1\":{\"675\":1}}],[\"p1l\",{\"1\":{\"634\":1}}],[\"p5\",{\"1\":{\"631\":2}}],[\"p4\",{\"1\":{\"631\":2}}],[\"plex\",{\"0\":{\"1809\":1},\"1\":{\"1809\":1}}],[\"please\",{\"1\":{\"1336\":1}}],[\"pluginall\",{\"1\":{\"542\":1}}],[\"pluginelement\",{\"1\":{\"541\":1}}],[\"plugin>\",{\"1\":{\"523\":1}}],[\"plugins>\",{\"1\":{\"523\":1}}],[\"plugins\",{\"0\":{\"523\":1},\"1\":{\"541\":1}}],[\"player\",{\"1\":{\"1870\":2}}],[\"plain\",{\"1\":{\"503\":1}}],[\"platformclassloader\",{\"1\":{\"1528\":1}}],[\"platformtransactionmanager事务管理器执行流程\",{\"1\":{\"1059\":1}}],[\"platformtransactionmanager\",{\"0\":{\"1047\":1},\"1\":{\"1038\":1,\"1042\":2,\"1047\":2,\"1054\":1,\"1055\":1,\"1059\":1}}],[\"platformdependent\",{\"1\":{\"866\":1}}],[\"platform\",{\"1\":{\"238\":1,\"439\":1,\"1135\":1}}],[\"pythonanywhere\",{\"1\":{\"667\":1}}],[\"python\",{\"1\":{\"434\":1,\"435\":1,\"1223\":1}}],[\"p3c\",{\"1\":{\"392\":1}}],[\"pdai\",{\"1\":{\"283\":1,\"367\":1}}],[\"phase\",{\"1\":{\"1283\":1}}],[\"phantomreference\",{\"1\":{\"194\":1,\"195\":2,\"1136\":1}}],[\"phantomreference<t>\",{\"1\":{\"194\":1}}],[\"phantomreference<>\",{\"1\":{\"183\":1}}],[\"phantomreference<object>\",{\"1\":{\"183\":1,\"195\":1}}],[\"phantomref\",{\"1\":{\"183\":3}}],[\"phantom\",{\"1\":{\"183\":4}}],[\"phpmyadmin\",{\"1\":{\"666\":2}}],[\"php\",{\"1\":{\"434\":1,\"435\":1}}],[\"phone手机号字段的值非空\",{\"1\":{\"701\":1}}],[\"phoneexistexception\",{\"1\":{\"14\":1}}],[\"phone\",{\"1\":{\"14\":7,\"701\":2,\"703\":2}}],[\"picture\",{\"1\":{\"1856\":3}}],[\"picutre是canvas元素\",{\"1\":{\"1856\":1}}],[\"pinpoint\",{\"1\":{\"1109\":1}}],[\"ping\",{\"1\":{\"939\":1,\"949\":2,\"1422\":2,\"1427\":1,\"1589\":1,\"1698\":1}}],[\"ping命令直接基于网络层icmp协议\",{\"1\":{\"341\":1}}],[\"pivot\",{\"1\":{\"989\":4,\"1653\":4}}],[\"pid记录执行持久化的子进程\",{\"1\":{\"928\":1}}],[\"pid\",{\"1\":{\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"234\":1,\"461\":1,\"928\":1,\"1170\":2,\"1367\":2,\"1446\":1,\"1464\":2,\"1529\":2,\"1631\":1,\"1699\":1}}],[\"pipe\",{\"0\":{\"1456\":1,\"1457\":1},\"1\":{\"672\":1}}],[\"pipedinputstream\",{\"1\":{\"137\":1}}],[\"pipedoutputstream\",{\"1\":{\"137\":1}}],[\"pipedreader\",{\"1\":{\"137\":1}}],[\"pipedwriter\",{\"1\":{\"137\":1}}],[\"pipeline\",{\"0\":{\"823\":1},\"1\":{\"93\":1,\"811\":3,\"812\":1,\"814\":4,\"818\":3,\"819\":1,\"820\":1,\"823\":2,\"829\":2,\"842\":1,\"843\":1,\"846\":2,\"865\":2,\"873\":6}}],[\"pi\",{\"1\":{\"129\":1}}],[\"peer\",{\"1\":{\"1860\":1,\"1861\":2}}],[\"peek\",{\"1\":{\"71\":1,\"986\":1,\"987\":1,\"988\":1}}],[\"peekingiterator\",{\"1\":{\"71\":1}}],[\"peach\",{\"1\":{\"1867\":1}}],[\"peaceiris\",{\"1\":{\"1791\":1}}],[\"peak\",{\"1\":{\"928\":1}}],[\"pexpireat\",{\"1\":{\"908\":1}}],[\"pexpire\",{\"1\":{\"908\":1}}],[\"permuteunique\",{\"1\":{\"1675\":2}}],[\"permission\",{\"1\":{\"1088\":1,\"1095\":1}}],[\"permit\",{\"1\":{\"362\":1}}],[\"perforce等\",{\"1\":{\"1309\":1}}],[\"performance\",{\"1\":{\"552\":1,\"673\":2,\"788\":1,\"807\":1}}],[\"performinitialization\",{\"1\":{\"383\":1}}],[\"persist\",{\"1\":{\"908\":1}}],[\"persistent\",{\"1\":{\"720\":1,\"1615\":4}}],[\"persistent变量\",{\"1\":{\"719\":1}}],[\"personaltoken\",{\"1\":{\"1791\":1}}],[\"personal\",{\"1\":{\"1791\":4}}],[\"personresultmap\",{\"1\":{\"530\":1}}],[\"person\",{\"1\":{\"515\":3,\"530\":1}}],[\"per\",{\"1\":{\"445\":1,\"462\":4,\"639\":2,\"673\":1,\"678\":2,\"729\":1,\"917\":1,\"928\":1,\"1050\":1,\"1051\":1,\"1490\":1}}],[\"perl\",{\"1\":{\"434\":1,\"435\":1}}],[\"period\",{\"1\":{\"334\":2,\"353\":1,\"1110\":1}}],[\"percent\",{\"1\":{\"127\":1,\"1226\":1}}],[\"people\",{\"1\":{\"296\":2}}],[\"pendinglist\",{\"1\":{\"188\":5}}],[\"pending\",{\"1\":{\"186\":2,\"188\":6}}],[\"p\",{\"1\":{\"53\":1,\"93\":5,\"388\":2,\"515\":8,\"538\":1,\"546\":1,\"550\":1,\"569\":4,\"570\":1,\"614\":1,\"672\":1,\"675\":6,\"991\":7,\"1083\":1,\"1121\":2,\"1151\":1,\"1218\":6,\"1278\":2,\"1304\":1,\"1322\":1,\"1350\":4,\"1460\":2,\"1618\":2,\"1631\":1,\"1682\":1,\"1735\":1}}],[\"pow\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"pop\",{\"1\":{\"986\":1,\"988\":1,\"1343\":1}}],[\"pop指令用于将栈顶元素弹出\",{\"1\":{\"241\":1}}],[\"pong\",{\"1\":{\"949\":2}}],[\"pojo\",{\"1\":{\"503\":1,\"506\":1}}],[\"policy=low\",{\"1\":{\"1148\":1}}],[\"policy这样下划线拼接的变量则是validate\",{\"1\":{\"1148\":1}}],[\"policy\",{\"1\":{\"1148\":2}}],[\"policy的取值控制\",{\"1\":{\"477\":1}}],[\"policytool\",{\"1\":{\"228\":1}}],[\"policies>\",{\"1\":{\"388\":1}}],[\"polltimeout\",{\"1\":{\"450\":1}}],[\"poll\",{\"1\":{\"183\":1,\"184\":2,\"450\":1,\"483\":1,\"485\":3,\"488\":1,\"791\":1,\"987\":1,\"988\":2,\"1001\":1,\"1115\":3,\"1395\":1,\"1478\":1,\"1487\":3}}],[\"polling\",{\"1\":{\"172\":1}}],[\"pointcutexpression\",{\"1\":{\"1018\":1}}],[\"pointcutprimitive\",{\"1\":{\"1018\":1}}],[\"pointcut\",{\"0\":{\"1018\":1},\"1\":{\"1023\":1,\"1380\":1}}],[\"pointer字段指向旧的undo日志\",{\"1\":{\"753\":1}}],[\"pointer指向旧的roll\",{\"1\":{\"747\":1}}],[\"pointer指向该行记录对应的undo日志\",{\"1\":{\"744\":1}}],[\"pointers\",{\"1\":{\"215\":1}}],[\"pointers把回收集里的存活对象复制到未被使用的region\",{\"1\":{\"178\":1}}],[\"pointer\",{\"1\":{\"215\":1,\"684\":1,\"747\":1,\"1074\":1,\"1521\":2,\"1557\":1,\"1792\":1}}],[\"point\",{\"1\":{\"172\":1}}],[\"poolnumber\",{\"1\":{\"1108\":2}}],[\"pool同理\",{\"1\":{\"739\":1}}],[\"pool的缓存命中率\",{\"1\":{\"732\":1}}],[\"pool的使用\",{\"1\":{\"732\":1}}],[\"pool结构\",{\"0\":{\"731\":1}}],[\"pool刷新到磁盘前\",{\"1\":{\"639\":1}}],[\"pool数据的查询\",{\"1\":{\"638\":1}}],[\"pool中的flush链表中的脏页按照修改发生的时间顺序排序\",{\"1\":{\"740\":1}}],[\"pool中\",{\"1\":{\"638\":2}}],[\"pooledbytebufallocator\",{\"1\":{\"860\":2}}],[\"pooledbytebuf\",{\"1\":{\"829\":1}}],[\"pooledconnection\",{\"1\":{\"545\":1}}],[\"pooleddatasource\",{\"1\":{\"545\":1}}],[\"pooled\",{\"1\":{\"506\":1,\"518\":1,\"524\":1,\"526\":1}}],[\"pool\",{\"1\":{\"153\":2,\"211\":1,\"240\":4,\"638\":1,\"731\":3,\"1108\":1,\"1555\":3}}],[\"porperties\",{\"1\":{\"382\":2}}],[\"port＞\",{\"1\":{\"940\":2}}],[\"port=3306\",{\"1\":{\"1155\":1}}],[\"port=33333\",{\"1\":{\"940\":1}}],[\"port=22222\",{\"1\":{\"940\":1}}],[\"port=11111\",{\"1\":{\"940\":1}}],[\"port=p\",{\"1\":{\"675\":1}}],[\"port=port\",{\"1\":{\"675\":2}}],[\"port>错误信息\",{\"1\":{\"947\":1}}],[\"port>\",{\"1\":{\"946\":1}}],[\"port>命令的底层实现步骤\",{\"1\":{\"936\":1}}],[\"port>实现主从复制\",{\"1\":{\"933\":1}}],[\"port\",{\"1\":{\"92\":1,\"93\":1,\"233\":2,\"342\":2,\"343\":2,\"417\":1,\"936\":1,\"940\":2,\"945\":1,\"1301\":2}}],[\"poros客户端\",{\"1\":{\"38\":1}}],[\"possible\",{\"1\":{\"728\":1}}],[\"position\",{\"1\":{\"768\":4,\"772\":2,\"773\":2,\"777\":3,\"788\":2,\"1154\":1}}],[\"position=pos2\",{\"1\":{\"675\":1}}],[\"position=pos1\",{\"1\":{\"675\":1}}],[\"positive\",{\"1\":{\"83\":1}}],[\"pos\",{\"1\":{\"649\":2,\"777\":1,\"1280\":1,\"1555\":1,\"1619\":1}}],[\"pos=547\",{\"1\":{\"1155\":1}}],[\"pos=\",{\"1\":{\"649\":1}}],[\"postmapping\",{\"1\":{\"1608\":1}}],[\"postconstruct注解的方法\",{\"1\":{\"1597\":1}}],[\"post请求url也可以有参数\",{\"1\":{\"1405\":1}}],[\"post都不安全\",{\"1\":{\"1405\":1}}],[\"postprocesspropertyvalues\",{\"1\":{\"1025\":1}}],[\"postprocessbeforeinstantiation\",{\"1\":{\"1023\":1}}],[\"postvisitdirectory\",{\"1\":{\"779\":2}}],[\"posts\",{\"1\":{\"546\":1}}],[\"postspins\",{\"1\":{\"6\":3}}],[\"postbindcleanup\",{\"1\":{\"383\":1}}],[\"post\",{\"0\":{\"1405\":1},\"1\":{\"15\":1,\"47\":1,\"50\":1,\"84\":1,\"538\":2,\"546\":1,\"565\":1,\"1117\":1,\"1121\":1,\"1144\":1,\"1345\":6,\"1405\":3,\"1640\":1,\"1793\":1}}],[\"pair\",{\"1\":{\"1860\":1}}],[\"pairs部分\",{\"1\":{\"913\":1}}],[\"pairs\",{\"1\":{\"913\":1}}],[\"paws\",{\"1\":{\"1410\":1}}],[\"passenger\",{\"1\":{\"1723\":1}}],[\"passwd\",{\"1\":{\"1692\":1}}],[\"passwords\",{\"1\":{\"1344\":1}}],[\"password的插件实现\",{\"1\":{\"1148\":1}}],[\"password组件提供的功能\",{\"1\":{\"1148\":1}}],[\"password=\",{\"1\":{\"649\":1,\"1155\":1}}],[\"password\",{\"1\":{\"417\":1,\"506\":4,\"515\":1,\"518\":3,\"524\":2,\"526\":1,\"530\":4,\"531\":1,\"532\":3,\"590\":1,\"649\":2,\"675\":3,\"1148\":12,\"1154\":1}}],[\"pass\",{\"1\":{\"1366\":1}}],[\"paxos\",{\"0\":{\"1280\":1,\"1619\":1},\"1\":{\"1280\":5,\"1619\":5}}],[\"paxos算法\",{\"1\":{\"1207\":1}}],[\"paper\",{\"1\":{\"1214\":1}}],[\"pa\",{\"1\":{\"1136\":1}}],[\"palindrome\",{\"1\":{\"993\":1}}],[\"padding\",{\"1\":{\"848\":1,\"849\":1}}],[\"pad\",{\"1\":{\"593\":2}}],[\"packaging\",{\"1\":{\"1632\":1}}],[\"package\",{\"1\":{\"541\":1,\"1024\":1}}],[\"packet\",{\"1\":{\"342\":2,\"1404\":1,\"1490\":1}}],[\"pack200\",{\"1\":{\"228\":1}}],[\"pause指令\",{\"1\":{\"1468\":1}}],[\"pause\",{\"1\":{\"148\":1,\"1858\":1}}],[\"pat\",{\"1\":{\"1791\":6}}],[\"patch\",{\"1\":{\"1322\":1,\"1640\":1}}],[\"patern\",{\"1\":{\"146\":1}}],[\"pattern>\",{\"1\":{\"969\":2,\"971\":2}}],[\"patterns的访问\",{\"1\":{\"957\":1}}],[\"patterns列表\",{\"1\":{\"956\":1}}],[\"patterns列表中\",{\"1\":{\"955\":1}}],[\"patterns\",{\"1\":{\"929\":1,\"955\":1}}],[\"pattern=\",{\"1\":{\"388\":3}}],[\"pattern\",{\"1\":{\"146\":1,\"353\":1,\"354\":2,\"373\":1,\"374\":1,\"375\":1,\"957\":1,\"1007\":1,\"1067\":4,\"1226\":1,\"1608\":1}}],[\"path记录执行命令的搜索路径\",{\"1\":{\"1701\":1}}],[\"pathvariable\",{\"1\":{\"1608\":1}}],[\"pathwithparent\",{\"1\":{\"1181\":4}}],[\"path1\",{\"1\":{\"1181\":1}}],[\"paths\",{\"1\":{\"778\":6,\"779\":1,\"796\":1,\"1503\":1}}],[\"path\",{\"0\":{\"778\":1},\"1\":{\"105\":1,\"107\":1,\"109\":1,\"113\":2,\"118\":1,\"120\":1,\"121\":1,\"550\":1,\"639\":1,\"778\":9,\"779\":7,\"1008\":2,\"1173\":1,\"1174\":2,\"1175\":1,\"1176\":2,\"1181\":4,\"1192\":1,\"1701\":1}}],[\"paypwd\",{\"1\":{\"124\":1}}],[\"paytime\",{\"1\":{\"124\":1}}],[\"paytype\",{\"1\":{\"124\":1}}],[\"payload\",{\"1\":{\"37\":1,\"413\":1,\"1628\":1,\"1862\":1}}],[\"page页号集合\",{\"1\":{\"751\":1}}],[\"page页号\",{\"1\":{\"751\":1}}],[\"page会填充undo\",{\"1\":{\"749\":1}}],[\"page中存有undo\",{\"1\":{\"749\":1}}],[\"pagesize\",{\"1\":{\"1143\":1}}],[\"pages\",{\"1\":{\"720\":1,\"1446\":6,\"1790\":3,\"1791\":2,\"1793\":1}}],[\"pages变量采样一定数量的页面\",{\"1\":{\"720\":1}}],[\"pagecachepagecache\",{\"1\":{\"1486\":1}}],[\"pagecache\",{\"1\":{\"478\":1,\"1486\":4}}],[\"page\",{\"0\":{\"690\":1,\"1479\":1},\"1\":{\"51\":1,\"638\":3,\"640\":2,\"688\":2,\"691\":1,\"693\":1,\"731\":1,\"739\":1,\"742\":2,\"745\":1,\"747\":1,\"749\":12,\"1446\":2,\"1448\":2,\"1479\":9,\"1871\":2}}],[\"parition\",{\"1\":{\"1567\":1}}],[\"partial\",{\"1\":{\"1525\":1}}],[\"partition的数据\",{\"1\":{\"494\":1}}],[\"partition组成\",{\"1\":{\"494\":1}}],[\"partitionfetchinfo\",{\"1\":{\"471\":1}}],[\"partitioner\",{\"1\":{\"453\":2}}],[\"partitioned\",{\"1\":{\"113\":3,\"118\":1,\"1228\":1}}],[\"partition是consumer消费的最小粒度\",{\"1\":{\"450\":1}}],[\"partition是消息的集合\",{\"1\":{\"450\":1}}],[\"partitions\",{\"1\":{\"446\":1,\"465\":1,\"472\":1,\"485\":1,\"728\":1}}],[\"partitions=1\",{\"1\":{\"445\":1}}],[\"partition表\",{\"1\":{\"118\":1}}],[\"partition\",{\"1\":{\"113\":1,\"118\":19,\"119\":6,\"120\":6,\"130\":2,\"430\":1,\"443\":6,\"452\":5,\"453\":6,\"456\":2,\"461\":2,\"467\":1,\"470\":1,\"474\":1,\"475\":3,\"496\":2,\"1206\":2,\"1228\":1,\"1278\":1,\"1567\":1,\"1618\":1,\"1626\":3}}],[\"parent\",{\"1\":{\"254\":1,\"541\":3,\"816\":1,\"870\":2,\"1088\":9,\"1099\":1,\"1181\":2}}],[\"parnew收集器\",{\"1\":{\"174\":1}}],[\"parnew\",{\"0\":{\"174\":1},\"1\":{\"172\":1,\"174\":1,\"175\":1,\"1525\":1}}],[\"parallelold收集器\",{\"1\":{\"175\":1}}],[\"parallelsetall\",{\"1\":{\"153\":1}}],[\"parallelsort\",{\"1\":{\"153\":1}}],[\"parallelstream\",{\"1\":{\"153\":1,\"1067\":1}}],[\"parallel\",{\"0\":{\"175\":1},\"1\":{\"153\":3,\"172\":2,\"175\":4,\"1525\":3}}],[\"parametermap=\",{\"1\":{\"530\":1}}],[\"parametertype=\",{\"1\":{\"530\":4}}],[\"parameterize\",{\"1\":{\"523\":1}}],[\"parameterhandler\",{\"1\":{\"523\":1,\"540\":1,\"544\":2}}],[\"parameter\",{\"1\":{\"348\":1,\"509\":7,\"544\":2}}],[\"paramtypes\",{\"1\":{\"309\":2}}],[\"params\",{\"1\":{\"15\":3,\"130\":3,\"311\":2}}],[\"param\",{\"1\":{\"15\":7,\"130\":3,\"418\":3,\"420\":3,\"421\":5,\"453\":6,\"530\":2,\"1002\":1}}],[\"parseconfiguration\",{\"1\":{\"541\":2}}],[\"parse\",{\"1\":{\"353\":1,\"541\":7,\"1341\":1}}],[\"parseint\",{\"1\":{\"73\":1}}],[\"parser\",{\"1\":{\"53\":1,\"541\":2}}],[\"parseobject\",{\"1\":{\"15\":2,\"48\":1,\"51\":1,\"1261\":1}}],[\"parselong\",{\"1\":{\"14\":1}}],[\"parker\",{\"1\":{\"366\":1}}],[\"parkuntil\",{\"1\":{\"363\":1}}],[\"parkblocker阻塞对象和tid线程id\",{\"1\":{\"362\":1}}],[\"parkblocker\",{\"1\":{\"362\":5,\"1087\":1}}],[\"parknanos\",{\"1\":{\"6\":1,\"363\":1}}],[\"park\",{\"0\":{\"140\":1,\"363\":1},\"1\":{\"6\":5,\"134\":1,\"362\":1,\"363\":7,\"364\":1,\"365\":2,\"366\":2,\"1074\":1,\"1138\":3,\"1826\":1}}],[\"pulsar\",{\"1\":{\"1213\":1,\"1625\":1}}],[\"pullscenicpoiandcomputenearairport\",{\"1\":{\"1360\":1}}],[\"pullout\",{\"1\":{\"726\":1}}],[\"pull\",{\"1\":{\"410\":1,\"435\":4,\"1326\":2,\"1338\":1,\"1634\":1,\"1790\":1}}],[\"punsubscribe等命令实现\",{\"1\":{\"953\":1}}],[\"punsubscribe\",{\"1\":{\"939\":1}}],[\"purgeinterval=1\",{\"1\":{\"1164\":1}}],[\"purge\",{\"1\":{\"640\":2,\"643\":2,\"747\":1,\"749\":1,\"1554\":1}}],[\"push运行期间\",{\"1\":{\"1345\":1}}],[\"push在git\",{\"1\":{\"1345\":1}}],[\"pushes\",{\"1\":{\"1326\":1}}],[\"push均支持\",{\"1\":{\"435\":3}}],[\"push\",{\"0\":{\"1328\":1},\"1\":{\"407\":1,\"986\":2,\"1326\":3,\"1328\":2,\"1329\":4,\"1338\":3,\"1343\":1,\"1351\":4,\"1791\":5}}],[\"push指令用于将常量或变量推入栈顶\",{\"1\":{\"241\":1}}],[\"pubsub命令本质上都是对pubsub\",{\"1\":{\"957\":1}}],[\"pubsub\",{\"1\":{\"403\":1,\"929\":1,\"954\":2,\"955\":2,\"957\":3,\"1625\":1,\"1626\":1,\"1628\":1}}],[\"publishrepo\",{\"1\":{\"1791\":1}}],[\"publishevent\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"publisher\",{\"1\":{\"406\":1,\"417\":1,\"420\":1,\"421\":1}}],[\"publish\",{\"1\":{\"940\":1,\"949\":2,\"1791\":4}}],[\"publishservice\",{\"1\":{\"92\":1}}],[\"public\",{\"1\":{\"3\":3,\"7\":1,\"8\":1,\"14\":3,\"15\":2,\"24\":5,\"40\":1,\"61\":1,\"73\":1,\"77\":4,\"78\":2,\"83\":1,\"84\":5,\"90\":2,\"93\":1,\"98\":2,\"153\":1,\"154\":1,\"163\":19,\"183\":1,\"184\":4,\"187\":1,\"188\":3,\"189\":6,\"192\":4,\"193\":3,\"194\":3,\"195\":2,\"196\":5,\"290\":5,\"291\":2,\"292\":2,\"296\":2,\"306\":3,\"332\":1,\"348\":1,\"357\":1,\"362\":3,\"363\":4,\"364\":1,\"383\":1,\"391\":2,\"417\":4,\"418\":6,\"420\":1,\"421\":1,\"450\":1,\"452\":3,\"453\":2,\"456\":1,\"457\":1,\"489\":2,\"506\":3,\"507\":4,\"515\":3,\"520\":1,\"522\":1,\"523\":3,\"541\":1,\"542\":1,\"543\":3,\"544\":2,\"779\":2,\"791\":5,\"792\":4,\"796\":2,\"797\":11,\"811\":3,\"812\":2,\"818\":3,\"820\":1,\"821\":1,\"822\":4,\"823\":5,\"842\":1,\"843\":1,\"844\":1,\"849\":2,\"851\":3,\"865\":1,\"871\":1,\"873\":4,\"989\":1,\"990\":1,\"993\":2,\"994\":1,\"995\":1,\"996\":1,\"1002\":3,\"1008\":3,\"1009\":5,\"1010\":1,\"1015\":9,\"1016\":5,\"1028\":1,\"1038\":1,\"1039\":5,\"1040\":1,\"1044\":1,\"1045\":1,\"1047\":1,\"1049\":1,\"1050\":1,\"1051\":1,\"1054\":1,\"1055\":1,\"1057\":1,\"1058\":1,\"1059\":6,\"1067\":2,\"1073\":5,\"1087\":4,\"1089\":1,\"1090\":2,\"1091\":2,\"1092\":3,\"1095\":11,\"1096\":1,\"1098\":3,\"1099\":1,\"1106\":1,\"1108\":1,\"1110\":3,\"1113\":3,\"1114\":1,\"1116\":2,\"1120\":11,\"1135\":4,\"1136\":8,\"1137\":3,\"1138\":2,\"1139\":4,\"1140\":6,\"1141\":2,\"1142\":3,\"1143\":2,\"1180\":3,\"1181\":4,\"1188\":1,\"1192\":2,\"1261\":1,\"1263\":1,\"1264\":2,\"1369\":1,\"1382\":1,\"1383\":1,\"1645\":6,\"1651\":6,\"1652\":1,\"1653\":1,\"1654\":2,\"1662\":1,\"1663\":1,\"1664\":2,\"1665\":2,\"1666\":2,\"1669\":1,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1,\"1709\":2,\"1711\":1,\"1714\":2,\"1715\":2,\"1718\":2,\"1791\":6,\"1792\":1}}],[\"putmapping\",{\"1\":{\"1608\":1}}],[\"put放入元素的时候\",{\"1\":{\"1497\":1}}],[\"putorderedobject\",{\"1\":{\"1140\":1}}],[\"putobject\",{\"1\":{\"83\":1,\"1140\":1}}],[\"putreferenceopaque\",{\"1\":{\"362\":1}}],[\"putint\",{\"1\":{\"83\":1}}],[\"putstring\",{\"1\":{\"83\":2}}],[\"putlong\",{\"1\":{\"83\":1}}],[\"put\",{\"1\":{\"15\":6,\"42\":1,\"45\":1,\"50\":1,\"67\":4,\"68\":1,\"69\":4,\"70\":3,\"83\":1,\"162\":1,\"453\":1,\"456\":3,\"459\":4,\"460\":2,\"461\":3,\"462\":1,\"488\":4,\"771\":2,\"773\":1,\"774\":1,\"788\":2,\"1002\":3,\"1015\":1,\"1028\":1,\"1218\":1,\"1363\":1,\"1382\":1,\"1640\":1,\"1651\":2,\"1663\":1}}],[\"pss不是一个单一的系统\",{\"1\":{\"1723\":1}}],[\"pss\",{\"0\":{\"1723\":1},\"1\":{\"1723\":1}}],[\"pseudo\",{\"1\":{\"1087\":1}}],[\"psubscribe\",{\"1\":{\"939\":1,\"953\":1}}],[\"psync通信协议\",{\"1\":{\"935\":1}}],[\"psync分两种模式\",{\"1\":{\"935\":1}}],[\"ps\",{\"1\":{\"10\":1,\"71\":1,\"82\":1,\"544\":3,\"1083\":1,\"1136\":3,\"1631\":1,\"1634\":1,\"1699\":1,\"1808\":1}}],[\"prune\",{\"1\":{\"1634\":1}}],[\"practice\",{\"1\":{\"1119\":1}}],[\"prngs\",{\"1\":{\"1087\":1}}],[\"privdata\",{\"1\":{\"882\":1}}],[\"privileges\",{\"1\":{\"591\":1,\"1148\":1,\"1151\":1,\"1154\":1}}],[\"private等方法的支持不够完善\",{\"1\":{\"1707\":1}}],[\"private修饰\",{\"1\":{\"292\":1}}],[\"private\",{\"1\":{\"3\":6,\"7\":1,\"8\":1,\"184\":6,\"187\":4,\"188\":3,\"189\":2,\"192\":2,\"194\":1,\"195\":7,\"196\":8,\"240\":1,\"290\":2,\"291\":1,\"296\":2,\"362\":6,\"383\":2,\"391\":2,\"417\":1,\"476\":1,\"507\":1,\"523\":1,\"541\":2,\"542\":1,\"788\":1,\"791\":4,\"797\":7,\"844\":1,\"864\":1,\"870\":1,\"871\":1,\"873\":1,\"989\":3,\"993\":1,\"1002\":5,\"1009\":1,\"1015\":6,\"1016\":4,\"1028\":2,\"1038\":1,\"1045\":2,\"1054\":1,\"1058\":1,\"1087\":19,\"1088\":1,\"1090\":1,\"1092\":1,\"1093\":1,\"1095\":3,\"1096\":3,\"1097\":3,\"1098\":3,\"1099\":1,\"1108\":5,\"1112\":11,\"1114\":2,\"1115\":1,\"1135\":3,\"1180\":5,\"1188\":1,\"1382\":2,\"1383\":2,\"1645\":6,\"1651\":8,\"1653\":3,\"1709\":1,\"1718\":1,\"1791\":6}}],[\"primary\",{\"1\":{\"417\":1,\"598\":2,\"634\":1,\"699\":1,\"728\":1,\"1357\":1,\"1358\":1}}],[\"primitivesink\",{\"1\":{\"83\":2}}],[\"priorityblockingqueue\",{\"1\":{\"1107\":1,\"1499\":1,\"1511\":1}}],[\"priorityqueue实现了带优先级的队列\",{\"1\":{\"987\":1}}],[\"priorityqueue<scheduledfuturetask<\",{\"1\":{\"869\":1}}],[\"priority\",{\"1\":{\"188\":1,\"196\":1,\"413\":1,\"940\":1,\"1087\":4,\"1088\":2,\"1108\":2,\"1628\":1,\"1629\":1}}],[\"printwriter\",{\"1\":{\"1502\":1}}],[\"printwriter支持写字符\",{\"1\":{\"322\":1}}],[\"printstream\",{\"1\":{\"322\":1,\"1502\":1}}],[\"printstream支持写字节\",{\"1\":{\"322\":1}}],[\"printstacktrace\",{\"1\":{\"161\":1,\"183\":1,\"456\":1,\"767\":1,\"788\":1,\"792\":2,\"796\":2,\"797\":3,\"822\":1,\"1095\":1,\"1263\":1}}],[\"print\",{\"1\":{\"228\":1,\"322\":1,\"1631\":1,\"1652\":1}}],[\"println\",{\"1\":{\"43\":1,\"51\":2,\"58\":1,\"69\":1,\"70\":2,\"73\":2,\"77\":4,\"78\":2,\"79\":1,\"83\":1,\"84\":2,\"153\":1,\"183\":9,\"263\":2,\"290\":1,\"296\":3,\"301\":3,\"418\":2,\"420\":2,\"421\":1,\"456\":1,\"488\":1,\"489\":1,\"773\":6,\"778\":1,\"779\":3,\"782\":1,\"789\":2,\"811\":1,\"826\":3,\"990\":1,\"996\":1,\"1015\":2,\"1016\":2,\"1106\":1,\"1125\":3,\"1181\":4,\"1188\":6,\"1368\":2,\"1536\":2,\"1781\":1}}],[\"price\",{\"1\":{\"51\":2,\"348\":1}}],[\"problem\",{\"1\":{\"1752\":1}}],[\"problems\",{\"1\":{\"1661\":1,\"1663\":1,\"1666\":1}}],[\"probability\",{\"1\":{\"83\":1}}],[\"provided\",{\"1\":{\"1632\":1}}],[\"providerslist\",{\"1\":{\"383\":4}}],[\"providerlist\",{\"1\":{\"383\":4}}],[\"provider\",{\"1\":{\"382\":1,\"383\":3,\"432\":1,\"864\":2,\"870\":2}}],[\"proactor\",{\"1\":{\"1488\":4}}],[\"progit\",{\"1\":{\"1351\":1}}],[\"programdata\",{\"1\":{\"1314\":1}}],[\"program\",{\"1\":{\"202\":1}}],[\"proc实现函数\",{\"1\":{\"927\":1}}],[\"proc\",{\"1\":{\"856\":2,\"1409\":1,\"1437\":1,\"1446\":4,\"1464\":3,\"1474\":1}}],[\"procedure\",{\"1\":{\"628\":3,\"631\":2,\"634\":1,\"1623\":1}}],[\"proceedwithinvocation\",{\"1\":{\"1059\":2}}],[\"proceed\",{\"1\":{\"523\":1,\"1019\":1,\"1021\":1,\"1022\":1,\"1059\":1,\"1602\":1}}],[\"processing\",{\"1\":{\"1214\":1}}],[\"processworkerexit\",{\"1\":{\"1115\":1}}],[\"processqueue\",{\"1\":{\"1097\":1}}],[\"processcommit\",{\"1\":{\"1050\":2}}],[\"processrollback\",{\"1\":{\"1050\":2,\"1051\":2}}],[\"processor负责对客户端的请求做出响应\",{\"1\":{\"1126\":1}}],[\"processor<hello\",{\"1\":{\"1125\":1}}],[\"processor等\",{\"1\":{\"1125\":1}}],[\"processor\",{\"1\":{\"1012\":2,\"1125\":1,\"1488\":1}}],[\"processselectedkey\",{\"1\":{\"873\":2}}],[\"processselectedkeys\",{\"1\":{\"872\":1}}],[\"process\",{\"1\":{\"229\":1,\"1450\":1}}],[\"processpendingreferences\",{\"1\":{\"188\":3,\"195\":1}}],[\"processpendingactive\",{\"1\":{\"187\":1,\"188\":2}}],[\"processpendinglock\",{\"1\":{\"187\":1,\"188\":5}}],[\"promise\",{\"0\":{\"822\":1},\"1\":{\"822\":14,\"823\":6,\"865\":1}}],[\"projects\",{\"1\":{\"778\":5}}],[\"pro\",{\"0\":{\"1307\":1},\"1\":{\"634\":3,\"666\":1,\"701\":1,\"705\":3,\"1307\":1,\"1819\":1,\"1828\":2}}],[\"profession=\",{\"1\":{\"705\":3}}],[\"profession\",{\"1\":{\"634\":4,\"701\":1,\"702\":1,\"703\":3}}],[\"profiling\",{\"1\":{\"612\":2}}],[\"profiling参数查看当前mysql是否支持profile操作\",{\"1\":{\"612\":1}}],[\"profile等文件中\",{\"1\":{\"1701\":1}}],[\"profiles\",{\"1\":{\"612\":1}}],[\"profile\",{\"1\":{\"612\":3,\"1367\":1,\"1529\":1}}],[\"produce\",{\"1\":{\"457\":2}}],[\"producerconfig\",{\"1\":{\"453\":1,\"456\":3,\"459\":4,\"460\":2,\"461\":3,\"462\":1}}],[\"producerrecord<>\",{\"1\":{\"456\":1,\"461\":1}}],[\"producerrecord<string\",{\"1\":{\"456\":1,\"461\":1}}],[\"producerrecord\",{\"1\":{\"452\":3,\"456\":2,\"461\":2}}],[\"producer发送消息到broker时\",{\"1\":{\"451\":1}}],[\"producerbatch\",{\"1\":{\"450\":1}}],[\"producer生成消息发送到broker\",{\"1\":{\"450\":1}}],[\"producer将消息分发到多个本地partition的消息队列中\",{\"1\":{\"450\":1}}],[\"producer和consumer都原生自动支持分布式\",{\"1\":{\"431\":1}}],[\"producer\",{\"0\":{\"449\":1},\"1\":{\"84\":1,\"413\":1,\"414\":2,\"419\":1,\"420\":1,\"427\":2,\"430\":1,\"433\":1,\"443\":1,\"446\":1,\"453\":1,\"456\":3,\"457\":2,\"461\":10,\"462\":1,\"475\":1,\"1626\":2,\"1628\":2,\"1629\":1}}],[\"proxyobject\",{\"1\":{\"1532\":1}}],[\"proxy等\",{\"1\":{\"1299\":1}}],[\"proxyserver\",{\"1\":{\"1222\":2}}],[\"proxybeanmethods\",{\"1\":{\"1059\":1}}],[\"proxytransactionmanagementconfiguration\",{\"1\":{\"1058\":1,\"1059\":2}}],[\"proxytargetclass\",{\"1\":{\"1057\":2}}],[\"proxycreator\",{\"0\":{\"1058\":1}}],[\"proxyclasslookup\",{\"1\":{\"1015\":1}}],[\"proxyfactory\",{\"0\":{\"1020\":1},\"1\":{\"1023\":1,\"1380\":1}}],[\"proxygenerator\",{\"1\":{\"1015\":4}}],[\"proxy\",{\"1\":{\"349\":2,\"1015\":12,\"1016\":3,\"1057\":6,\"1058\":1,\"1366\":2,\"1532\":2,\"1601\":1}}],[\"protestantism\",{\"0\":{\"1763\":1}}],[\"protectiondomain\",{\"1\":{\"1139\":2}}],[\"protected\",{\"1\":{\"9\":2,\"78\":2,\"93\":1,\"153\":1,\"291\":2,\"811\":1,\"812\":1,\"818\":1,\"820\":1,\"829\":1,\"846\":1,\"849\":1,\"865\":1,\"866\":1,\"867\":1,\"872\":1,\"873\":1,\"1028\":1,\"1039\":2,\"1058\":1,\"1059\":1,\"1382\":1,\"1707\":1}}],[\"prototype\",{\"1\":{\"1596\":1,\"1599\":1,\"1614\":1}}],[\"protocal\",{\"1\":{\"1461\":1}}],[\"protocolfactory\",{\"1\":{\"1125\":1}}],[\"protocolversion\",{\"1\":{\"846\":1}}],[\"protocol=socket参数\",{\"1\":{\"672\":1}}],[\"protocol=memory参数开启\",{\"1\":{\"672\":1}}],[\"protocol=pipe\",{\"1\":{\"672\":1}}],[\"protocol\",{\"1\":{\"404\":1,\"408\":1,\"409\":1,\"807\":1,\"846\":1,\"848\":1,\"1125\":2,\"1301\":1,\"1461\":1,\"1625\":1,\"1860\":1}}],[\"protobuf\",{\"1\":{\"848\":1}}],[\"protostuff\",{\"1\":{\"91\":1}}],[\"proposer\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"proposal\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"propagtion\",{\"1\":{\"1041\":1}}],[\"propagation\",{\"1\":{\"1038\":1,\"1039\":1,\"1040\":2,\"1049\":5,\"1061\":1,\"1276\":7,\"1611\":7}}],[\"propagateifpossible\",{\"1\":{\"62\":1}}],[\"propagateifinstanceof\",{\"1\":{\"62\":1}}],[\"propagate\",{\"1\":{\"62\":2}}],[\"propertysource\",{\"1\":{\"1608\":1}}],[\"propertyvalues\",{\"1\":{\"1026\":1}}],[\"propertyplaceholderconfigurer\",{\"0\":{\"1026\":1}}],[\"property\",{\"1\":{\"1016\":1}}],[\"property=\",{\"1\":{\"532\":3}}],[\"propertieselement\",{\"1\":{\"541\":1}}],[\"properties>\",{\"1\":{\"518\":1}}],[\"properties\",{\"0\":{\"518\":1},\"1\":{\"36\":1,\"42\":2,\"45\":1,\"305\":1,\"382\":1,\"418\":1,\"445\":1,\"446\":1,\"453\":1,\"456\":7,\"459\":4,\"460\":2,\"461\":7,\"462\":1,\"488\":8,\"518\":3,\"522\":2,\"523\":7,\"541\":5}}],[\"props\",{\"1\":{\"518\":1}}],[\"preparation\",{\"1\":{\"1527\":1}}],[\"preparetransactionstatus\",{\"1\":{\"1049\":1}}],[\"preparestatement\",{\"1\":{\"544\":1,\"1539\":1}}],[\"prepared\",{\"1\":{\"530\":5,\"749\":1}}],[\"preparedstatementhandler\",{\"1\":{\"544\":2}}],[\"preparedstatement\",{\"1\":{\"521\":1,\"530\":1,\"544\":2}}],[\"prepare\",{\"1\":{\"523\":1,\"1283\":1,\"1345\":1,\"1556\":3}}],[\"pre\",{\"1\":{\"1345\":6,\"1402\":1}}],[\"pretty=format\",{\"1\":{\"1322\":1}}],[\"pretty=\",{\"1\":{\"1322\":2}}],[\"precommit\",{\"1\":{\"1283\":1}}],[\"preconditions提供了若干前置条件判断的使用方法\",{\"1\":{\"59\":1}}],[\"preconditions\",{\"0\":{\"59\":1}}],[\"precedence\",{\"1\":{\"1057\":1}}],[\"precision\",{\"0\":{\"1666\":1},\"1\":{\"976\":2}}],[\"presence\",{\"1\":{\"409\":1}}],[\"present\",{\"1\":{\"58\":1}}],[\"preinstantiatesingletons\",{\"1\":{\"91\":1,\"1012\":1,\"1379\":1}}],[\"prefix=bak\",{\"1\":{\"1350\":1}}],[\"prefix=\",{\"1\":{\"537\":2}}],[\"prefixoverrides=\",{\"1\":{\"537\":1}}],[\"prefixoverrides\",{\"1\":{\"537\":1}}],[\"prefix\",{\"1\":{\"14\":2,\"537\":1,\"729\":1,\"1180\":1,\"1269\":1,\"1608\":2,\"1613\":1}}],[\"predestroy注解的方法\",{\"1\":{\"1597\":1}}],[\"predicate\",{\"1\":{\"1068\":3}}],[\"pred\",{\"1\":{\"6\":10}}],[\"previous\",{\"1\":{\"892\":1}}],[\"prev\",{\"1\":{\"3\":2,\"6\":4,\"195\":9,\"196\":6,\"749\":1,\"1002\":8,\"1516\":1,\"1651\":8}}],[\"i帧\",{\"1\":{\"1868\":1}}],[\"iah举例\",{\"1\":{\"1752\":1}}],[\"iadd指令用于将栈顶两个整数相加\",{\"1\":{\"241\":1}}],[\"ice\",{\"0\":{\"1860\":1},\"1\":{\"1860\":2}}],[\"icao\",{\"1\":{\"1741\":1}}],[\"ics\",{\"1\":{\"1723\":1}}],[\"icmp\",{\"0\":{\"1427\":1},\"1\":{\"1427\":5}}],[\"icmpgt指令用于比较栈顶两个整数并根据比较结果进行条件跳转\",{\"1\":{\"241\":1}}],[\"ii\",{\"1\":{\"1674\":1,\"1675\":1}}],[\"iiop\",{\"1\":{\"228\":1}}],[\"igmp\",{\"0\":{\"1429\":1},\"1\":{\"1429\":1}}],[\"ignored\",{\"1\":{\"722\":1,\"1049\":1}}],[\"ignore\",{\"1\":{\"196\":2,\"705\":2,\"1090\":1,\"1154\":2}}],[\"ibn\",{\"1\":{\"1767\":1}}],[\"ibe+\",{\"1\":{\"1728\":1}}],[\"ib\",{\"1\":{\"739\":1}}],[\"ibd文件即表空间文件\",{\"1\":{\"695\":1}}],[\"ibd2sdi\",{\"1\":{\"678\":1}}],[\"ibd\",{\"1\":{\"678\":2}}],[\"ibm\",{\"1\":{\"407\":1}}],[\"ix\",{\"1\":{\"560\":2,\"564\":1}}],[\"illegalargument\",{\"1\":{\"1533\":1}}],[\"illegalargumentexception\",{\"1\":{\"1091\":1,\"1120\":1}}],[\"illegalaccessexception\",{\"1\":{\"1009\":1,\"1015\":2,\"1135\":1}}],[\"illegalthreadstateexception\",{\"1\":{\"1090\":1,\"1114\":1}}],[\"illegaltransactionstateexception\",{\"1\":{\"1049\":1,\"1050\":1,\"1051\":1}}],[\"illegalstateexception\",{\"1\":{\"58\":1}}],[\"iloggerfactory\",{\"1\":{\"383\":4}}],[\"iloggerfacotry\",{\"1\":{\"383\":1}}],[\"i2f指令用于将整数转换为浮点数\",{\"1\":{\"241\":1}}],[\"ip4\",{\"1\":{\"1862\":2}}],[\"iphone\",{\"1\":{\"1819\":2}}],[\"ipc\",{\"1\":{\"1459\":1}}],[\"ipv6\",{\"1\":{\"1422\":1,\"1428\":1,\"1461\":1,\"1792\":2}}],[\"ipv4双栈的四层网关服务\",{\"1\":{\"1301\":1}}],[\"ipv4\",{\"1\":{\"839\":1,\"856\":1,\"1409\":1,\"1422\":2,\"1792\":1}}],[\"iptables\",{\"1\":{\"1409\":2}}],[\"ipaddr\",{\"1\":{\"1264\":1}}],[\"ip＞\",{\"1\":{\"940\":2}}],[\"ip=127\",{\"1\":{\"940\":3}}],[\"ip>\",{\"1\":{\"933\":1,\"936\":1,\"946\":1,\"947\":1}}],[\"ip的通信\",{\"1\":{\"570\":1}}],[\"ip网络\",{\"1\":{\"407\":1}}],[\"ip协议的封装\",{\"1\":{\"341\":1}}],[\"ip\",{\"0\":{\"1393\":1,\"1421\":1,\"1422\":1,\"1423\":1},\"1\":{\"92\":1,\"339\":1,\"657\":1,\"672\":1,\"839\":3,\"845\":1,\"945\":1,\"1152\":1,\"1220\":1,\"1301\":2,\"1394\":4,\"1396\":4,\"1412\":1,\"1418\":1,\"1422\":2,\"1423\":4,\"1425\":2,\"1426\":2,\"1427\":2,\"1490\":1,\"1563\":1,\"1631\":2,\"1698\":1,\"1792\":3}}],[\"ip地址\",{\"0\":{\"339\":1},\"1\":{\"36\":1,\"1394\":1,\"1424\":1}}],[\"i++\",{\"1\":{\"83\":1,\"456\":1,\"788\":1,\"789\":1,\"791\":1,\"842\":1,\"843\":1,\"993\":2,\"994\":1,\"996\":1,\"1001\":1,\"1106\":1,\"1188\":2,\"1654\":2,\"1662\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1672\":1,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1,\"1677\":1}}],[\"image2\",{\"1\":{\"1878\":1}}],[\"image等\",{\"1\":{\"1640\":1}}],[\"image\",{\"1\":{\"1400\":1,\"1634\":3}}],[\"imagesservice\",{\"1\":{\"1369\":1}}],[\"images\",{\"1\":{\"1369\":2,\"1634\":1}}],[\"imagefuture\",{\"1\":{\"1369\":2}}],[\"im即时消息以及在线现场探测\",{\"1\":{\"409\":1}}],[\"im场景\",{\"1\":{\"407\":1}}],[\"impl<\",{\"1\":{\"382\":2,\"383\":1}}],[\"implementation\",{\"1\":{\"1088\":1}}],[\"implementor\",{\"1\":{\"375\":1}}],[\"implements\",{\"1\":{\"3\":2,\"73\":1,\"362\":1,\"453\":1,\"523\":1,\"791\":1,\"797\":3,\"1009\":2,\"1015\":3,\"1016\":1,\"1039\":1,\"1087\":1,\"1099\":1,\"1108\":1,\"1114\":1}}],[\"importbeandefinitionregistrar\",{\"1\":{\"1026\":1}}],[\"importselector\",{\"1\":{\"1026\":1,\"1058\":1,\"1059\":1,\"1598\":1}}],[\"importing\",{\"1\":{\"946\":2}}],[\"import\",{\"1\":{\"91\":1,\"263\":2,\"1026\":1,\"1057\":1,\"1598\":2}}],[\"immutablecollections\",{\"1\":{\"304\":1}}],[\"immutablelist3\",{\"1\":{\"64\":1}}],[\"immutablelist2\",{\"1\":{\"64\":1}}],[\"immutablelist\",{\"1\":{\"64\":4}}],[\"immutablelist1\",{\"1\":{\"64\":1}}],[\"immutablelist<string>\",{\"1\":{\"64\":4}}],[\"immutable\",{\"0\":{\"64\":1},\"1\":{\"64\":1}}],[\"it\",{\"1\":{\"1008\":1,\"1104\":1,\"1368\":1,\"1634\":1}}],[\"items\",{\"1\":{\"917\":1,\"1227\":3}}],[\"item=\",{\"1\":{\"538\":1}}],[\"item\",{\"1\":{\"538\":3,\"1227\":1,\"1369\":1}}],[\"iter\",{\"1\":{\"450\":4,\"786\":4,\"791\":8}}],[\"iterate\",{\"1\":{\"633\":1,\"1067\":1}}],[\"iterate使用\",{\"1\":{\"633\":1}}],[\"iterator<selectionkey>\",{\"1\":{\"786\":1,\"791\":2}}],[\"iterator<slf4jserviceprovider>\",{\"1\":{\"383\":1}}],[\"iterator<node>\",{\"1\":{\"450\":1}}],[\"iterator\",{\"1\":{\"61\":1,\"304\":2,\"383\":4,\"450\":1,\"786\":1,\"791\":2}}],[\"iterable<string>\",{\"1\":{\"79\":1}}],[\"iterables\",{\"1\":{\"71\":1}}],[\"iterable\",{\"1\":{\"61\":1,\"817\":1}}],[\"itheima\",{\"1\":{\"124\":21,\"125\":4,\"126\":13,\"127\":5,\"128\":4}}],[\"itcast\",{\"1\":{\"47\":1}}],[\"ik\",{\"1\":{\"42\":1}}],[\"i\",{\"0\":{\"1487\":1},\"1\":{\"33\":1,\"77\":1,\"82\":1,\"83\":3,\"324\":1,\"388\":1,\"418\":1,\"456\":3,\"549\":1,\"638\":1,\"675\":1,\"716\":1,\"788\":4,\"789\":2,\"791\":4,\"822\":1,\"831\":1,\"842\":3,\"843\":2,\"873\":4,\"919\":1,\"924\":1,\"983\":1,\"989\":3,\"991\":8,\"993\":11,\"994\":9,\"996\":23,\"1001\":2,\"1106\":2,\"1119\":1,\"1188\":6,\"1249\":1,\"1343\":1,\"1344\":1,\"1396\":1,\"1470\":1,\"1478\":4,\"1481\":1,\"1484\":3,\"1486\":2,\"1487\":2,\"1504\":5,\"1563\":4,\"1574\":5,\"1634\":1,\"1652\":17,\"1653\":3,\"1654\":4,\"1655\":11,\"1662\":3,\"1663\":6,\"1666\":17,\"1669\":4,\"1670\":4,\"1671\":4,\"1672\":6,\"1673\":7,\"1674\":8,\"1675\":18,\"1676\":5,\"1677\":5,\"1735\":1,\"1868\":6,\"1877\":1,\"1878\":5}}],[\"istypesupported\",{\"1\":{\"1858\":1}}],[\"istrue\",{\"1\":{\"15\":1}}],[\"islam\",{\"0\":{\"1764\":1}}],[\"islocalrollbackonly\",{\"1\":{\"1050\":1}}],[\"isnotnull\",{\"1\":{\"1712\":1}}],[\"isnotempty\",{\"1\":{\"1244\":1}}],[\"isnull\",{\"1\":{\"1244\":1,\"1712\":1}}],[\"isnewtransaction\",{\"1\":{\"1044\":2}}],[\"isinterrupted\",{\"1\":{\"1092\":1,\"1115\":1}}],[\"isvavrtry\",{\"1\":{\"1059\":1}}],[\"isvalid\",{\"1\":{\"867\":1}}],[\"isglobalrollbackonly\",{\"1\":{\"1050\":1}}],[\"iswarnenabled\",{\"1\":{\"1049\":1}}],[\"iswritable\",{\"1\":{\"786\":2,\"789\":1}}],[\"isdaemon\",{\"1\":{\"1088\":1,\"1108\":1}}],[\"isdebug\",{\"1\":{\"1050\":2}}],[\"isdebugenabled\",{\"1\":{\"1049\":1}}],[\"isdone\",{\"1\":{\"822\":1}}],[\"iss53\",{\"1\":{\"1336\":2}}],[\"issu47\",{\"1\":{\"1333\":1}}],[\"issuccess\",{\"1\":{\"822\":1,\"873\":1}}],[\"issystemdomainloader\",{\"1\":{\"1135\":3}}],[\"issingleton\",{\"1\":{\"1010\":1}}],[\"isac\",{\"1\":{\"1862\":1}}],[\"isacceptable\",{\"1\":{\"786\":2,\"787\":1,\"788\":1,\"789\":1,\"791\":1}}],[\"isabsolute\",{\"1\":{\"1138\":1}}],[\"isalive\",{\"1\":{\"1091\":4,\"1095\":2}}],[\"isannotationpresent\",{\"1\":{\"348\":1}}],[\"iso\",{\"1\":{\"1799\":1}}],[\"isolation\",{\"1\":{\"735\":1,\"737\":2,\"1032\":1,\"1038\":1,\"1039\":1,\"1040\":2,\"1049\":3,\"1612\":5}}],[\"isordered\",{\"1\":{\"61\":1}}],[\"isccloverridden\",{\"1\":{\"1088\":2,\"1097\":1}}],[\"iscanceled\",{\"1\":{\"822\":1}}],[\"iscompleted\",{\"1\":{\"1044\":1,\"1050\":1,\"1051\":1}}],[\"isconnectable\",{\"1\":{\"786\":1,\"789\":1}}],[\"iscollection\",{\"1\":{\"522\":1}}],[\"isclosed\",{\"1\":{\"523\":1}}],[\"isrunning\",{\"1\":{\"1113\":2,\"1114\":1,\"1116\":1}}],[\"isrollbackonly\",{\"1\":{\"1044\":1}}],[\"isreadable\",{\"1\":{\"786\":2,\"788\":1,\"789\":1,\"791\":1}}],[\"isreachable\",{\"1\":{\"339\":1}}],[\"isr里应答的最小副本数量大于等于2\",{\"1\":{\"461\":1}}],[\"isr\",{\"1\":{\"450\":1,\"460\":2,\"465\":1,\"466\":2,\"467\":1,\"469\":1,\"470\":8,\"471\":3}}],[\"isexistingtransaction\",{\"1\":{\"1049\":1}}],[\"iservice\",{\"1\":{\"1015\":10,\"1016\":3}}],[\"isempty\",{\"1\":{\"383\":1,\"1001\":1,\"1114\":1,\"1115\":2,\"1116\":1,\"1120\":1,\"1244\":1,\"1261\":1}}],[\"isenqueued\",{\"1\":{\"189\":1}}],[\"ispay\",{\"1\":{\"124\":4}}],[\"ispresent\",{\"1\":{\"58\":1,\"1058\":1,\"1093\":1}}],[\"is\",{\"1\":{\"73\":1,\"78\":2,\"83\":1,\"391\":1,\"560\":2,\"564\":1,\"583\":3,\"807\":1,\"941\":1,\"942\":2,\"993\":1,\"1008\":3,\"1050\":2,\"1051\":1,\"1091\":1,\"1858\":1}}],[\"isheldexclusively\",{\"1\":{\"5\":1}}],[\"id`\",{\"1\":{\"1357\":3,\"1358\":2}}],[\"id从小到大递增\",{\"1\":{\"920\":1}}],[\"id则说明该事务还是活跃的\",{\"1\":{\"754\":1,\"1557\":1}}],[\"id在m\",{\"1\":{\"754\":1,\"1557\":1}}],[\"id属性值\",{\"1\":{\"754\":1}}],[\"id为被访问版本的trx\",{\"1\":{\"754\":1}}],[\"id即事务id\",{\"1\":{\"744\":1}}],[\"id和page\",{\"1\":{\"742\":1}}],[\"idx\",{\"1\":{\"701\":4,\"705\":3,\"707\":1}}],[\"idb文件\",{\"1\":{\"673\":1}}],[\"id<=15\",{\"1\":{\"623\":1}}],[\"id是小于等于\",{\"1\":{\"623\":1}}],[\"id的sql语句的cpu使用情况\",{\"1\":{\"612\":1}}],[\"id的sql语句各个阶段的耗时情况\",{\"1\":{\"612\":1}}],[\"ideal\",{\"1\":{\"1854\":1}}],[\"idea中也有现成的导出导入操作\",{\"1\":{\"1154\":1}}],[\"identified\",{\"1\":{\"590\":5,\"1148\":1,\"1151\":1,\"1154\":1}}],[\"idempotence\",{\"1\":{\"461\":2}}],[\"idcard\",{\"1\":{\"583\":5}}],[\"id+topic+分区号仅保留最新数据\",{\"1\":{\"490\":1}}],[\"id+topic+分区号\",{\"1\":{\"490\":1}}],[\"id=2\",{\"1\":{\"1155\":1}}],[\"id=1\",{\"1\":{\"1154\":1}}],[\"id=\",{\"1\":{\"506\":2,\"524\":1,\"530\":4,\"531\":2,\"532\":2,\"535\":1,\"536\":1,\"537\":1,\"538\":1,\"1336\":2,\"1855\":1,\"1870\":1}}],[\"id=test\",{\"1\":{\"489\":1}}],[\"id=0\",{\"1\":{\"445\":1}}],[\"ids存在trx\",{\"1\":{\"754\":1,\"1557\":1}}],[\"ids中\",{\"1\":{\"754\":1,\"1557\":1}}],[\"ids\",{\"1\":{\"465\":1,\"754\":1,\"1557\":1}}],[\"idl\",{\"1\":{\"228\":1,\"1125\":1}}],[\"idlestatehandler\",{\"0\":{\"94\":1},\"1\":{\"93\":1,\"100\":1}}],[\"id值\",{\"1\":{\"49\":1}}],[\"id唯一标识\",{\"1\":{\"42\":1,\"598\":1}}],[\"id><version><network\",{\"1\":{\"1862\":1}}],[\"id>让接收到命令的节点成为指定节点的从节点\",{\"1\":{\"948\":1}}],[\"id>命令\",{\"1\":{\"946\":3}}],[\"id>\",{\"1\":{\"15\":1}}],[\"id\",{\"0\":{\"1622\":1},\"1\":{\"15\":5,\"47\":1,\"48\":1,\"113\":5,\"118\":1,\"119\":3,\"126\":8,\"391\":1,\"408\":2,\"461\":3,\"485\":1,\"488\":1,\"506\":3,\"509\":1,\"510\":2,\"515\":12,\"524\":1,\"530\":9,\"531\":1,\"532\":7,\"538\":1,\"541\":1,\"544\":1,\"579\":1,\"584\":1,\"598\":1,\"599\":4,\"602\":1,\"603\":2,\"604\":2,\"605\":2,\"608\":2,\"609\":2,\"611\":1,\"612\":2,\"618\":9,\"620\":1,\"622\":4,\"623\":7,\"634\":2,\"684\":3,\"728\":1,\"739\":1,\"749\":2,\"754\":12,\"820\":3,\"920\":1,\"940\":2,\"1068\":1,\"1077\":6,\"1087\":1,\"1203\":4,\"1204\":1,\"1226\":1,\"1227\":2,\"1228\":1,\"1256\":2,\"1367\":1,\"1368\":1,\"1374\":4,\"1404\":1,\"1515\":2,\"1557\":17,\"1564\":1,\"1567\":2,\"1579\":2,\"1608\":1,\"1622\":3,\"1692\":1,\"1862\":1}}],[\"ie\",{\"1\":{\"8\":1}}],[\"ifstat\",{\"1\":{\"1631\":1}}],[\"ifconfig\",{\"1\":{\"1490\":1,\"1631\":1}}],[\"iface>\",{\"1\":{\"1125\":1}}],[\"ifavailable\",{\"1\":{\"1054\":1}}],[\"ifnull\",{\"1\":{\"596\":5}}],[\"if>\",{\"1\":{\"535\":2,\"537\":2}}],[\"if\",{\"0\":{\"535\":1,\"630\":1},\"1\":{\"6\":19,\"7\":2,\"8\":14,\"9\":13,\"14\":2,\"15\":3,\"58\":1,\"83\":1,\"105\":1,\"107\":2,\"108\":2,\"153\":1,\"154\":2,\"184\":4,\"188\":1,\"192\":1,\"195\":7,\"196\":6,\"241\":1,\"290\":1,\"362\":1,\"363\":1,\"364\":1,\"383\":1,\"420\":1,\"450\":1,\"453\":2,\"456\":1,\"476\":2,\"535\":1,\"537\":1,\"541\":5,\"542\":3,\"574\":2,\"575\":1,\"596\":3,\"622\":1,\"628\":1,\"630\":2,\"631\":2,\"634\":2,\"767\":1,\"783\":2,\"786\":3,\"787\":1,\"788\":5,\"789\":6,\"791\":4,\"797\":2,\"818\":1,\"865\":1,\"866\":1,\"867\":2,\"872\":1,\"873\":5,\"989\":2,\"991\":3,\"993\":5,\"994\":2,\"995\":3,\"996\":2,\"998\":11,\"1000\":1,\"1001\":2,\"1002\":3,\"1008\":2,\"1009\":2,\"1015\":1,\"1016\":2,\"1028\":3,\"1049\":5,\"1050\":5,\"1051\":1,\"1055\":1,\"1059\":5,\"1088\":8,\"1090\":3,\"1091\":3,\"1092\":3,\"1093\":2,\"1095\":4,\"1108\":2,\"1113\":9,\"1114\":10,\"1115\":5,\"1116\":3,\"1120\":4,\"1135\":1,\"1136\":1,\"1226\":1,\"1244\":1,\"1250\":2,\"1261\":1,\"1263\":2,\"1368\":1,\"1382\":3,\"1399\":2,\"1567\":3,\"1645\":3,\"1651\":3,\"1652\":3,\"1653\":2,\"1654\":2,\"1663\":1,\"1669\":2,\"1671\":1,\"1672\":2,\"1673\":1,\"1674\":3,\"1675\":5,\"1676\":2,\"1677\":1,\"1858\":1,\"1871\":1}}],[\"injectmocks注解的字段\",{\"1\":{\"1709\":1}}],[\"injectmock\",{\"1\":{\"1708\":1}}],[\"inject\",{\"1\":{\"1595\":1}}],[\"inorderofmock\",{\"1\":{\"1714\":3,\"1715\":3}}],[\"inorder\",{\"1\":{\"1714\":8,\"1715\":8}}],[\"inode\",{\"1\":{\"1474\":5,\"1477\":1,\"1696\":1}}],[\"inout\",{\"1\":{\"631\":2}}],[\"inheritthreadlocals\",{\"1\":{\"1088\":2}}],[\"inheritedaccesscontrolcontext\",{\"1\":{\"1087\":1,\"1088\":1,\"1093\":1}}],[\"inheritablethreadlocals\",{\"1\":{\"1087\":1,\"1088\":3,\"1093\":1}}],[\"inheritablethreadlocal\",{\"1\":{\"154\":2,\"1514\":2}}],[\"ineventloop\",{\"1\":{\"816\":1,\"818\":1}}],[\"inet6\",{\"1\":{\"1461\":1}}],[\"inet\",{\"1\":{\"1461\":1}}],[\"inetsocketaddress\",{\"1\":{\"782\":2,\"783\":1,\"786\":1,\"791\":1,\"792\":4,\"797\":1,\"812\":1,\"820\":1,\"863\":1}}],[\"inetaddress\",{\"1\":{\"93\":1,\"339\":1,\"342\":1}}],[\"inbound\",{\"1\":{\"814\":1}}],[\"in子查询如果不符合semi\",{\"1\":{\"726\":1}}],[\"in子查询如果符合semi\",{\"1\":{\"726\":1}}],[\"ini\",{\"1\":{\"569\":1,\"1154\":1}}],[\"initmocks\",{\"1\":{\"1709\":2}}],[\"initmethod\",{\"1\":{\"1180\":1}}],[\"initservice\",{\"1\":{\"1361\":1}}],[\"initserver函数\",{\"1\":{\"929\":1}}],[\"initserverconfig函数\",{\"1\":{\"929\":1}}],[\"initlimit=10\",{\"1\":{\"1164\":1,\"1196\":1}}],[\"initlevel\",{\"1\":{\"196\":1}}],[\"initiated\",{\"1\":{\"1049\":1}}],[\"initialdelay\",{\"1\":{\"1110\":2}}],[\"initializingbean\",{\"1\":{\"1381\":1}}],[\"initialization\",{\"1\":{\"383\":4,\"1527\":1}}],[\"initializebean\",{\"1\":{\"1012\":1}}],[\"initialize\",{\"1\":{\"8\":1,\"383\":2,\"1870\":1}}],[\"initialtrylock\",{\"1\":{\"9\":5}}],[\"initapplicationeventmulticaster\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"initandregister\",{\"1\":{\"863\":1,\"864\":1}}],[\"init\",{\"0\":{\"864\":1},\"1\":{\"863\":1,\"864\":3,\"1347\":1}}],[\"inittransactions\",{\"1\":{\"461\":1}}],[\"initrabbittemplate\",{\"1\":{\"417\":2}}],[\"initcause\",{\"1\":{\"188\":1}}],[\"initchannel\",{\"1\":{\"93\":1,\"811\":1,\"812\":1,\"818\":1,\"820\":1}}],[\"include\",{\"1\":{\"1343\":1,\"1366\":1,\"1792\":1}}],[\"include>\",{\"1\":{\"531\":2}}],[\"increment=1\",{\"1\":{\"1567\":1}}],[\"increment=7589\",{\"1\":{\"1358\":1}}],[\"increment=7762\",{\"1\":{\"1357\":1}}],[\"increment\",{\"1\":{\"598\":1,\"615\":1,\"634\":1,\"708\":1,\"1357\":1,\"1358\":1}}],[\"increment修饰的列递增赋值\",{\"1\":{\"562\":1}}],[\"inc\",{\"1\":{\"564\":1}}],[\"inc锁还是采用一个轻量级锁生成列值\",{\"1\":{\"562\":1}}],[\"inc锁\",{\"0\":{\"562\":1}}],[\"innodb在查询时使用临键锁来保证数据的一致性和避免幻读问题\",{\"1\":{\"1561\":1}}],[\"innodb在聚簇索引中分两步处理\",{\"1\":{\"748\":1}}],[\"innodb使用临键锁对查询范围加锁以防止幻读\",{\"1\":{\"1557\":1}}],[\"innodb每次执行增删改某个记录时\",{\"1\":{\"745\":1}}],[\"innodb会定期以表为单位\",{\"1\":{\"719\":1}}],[\"innodb会开始寻找邻近页\",{\"1\":{\"615\":1}}],[\"innodb选择b+tree索引结构的原因有\",{\"1\":{\"698\":1}}],[\"innodb具有自适应hash功能\",{\"1\":{\"698\":1}}],[\"innodb中聚簇索引行记录除了用户数据外\",{\"1\":{\"744\":1}}],[\"innodb中对于段的管理\",{\"1\":{\"694\":1}}],[\"innodb中索引即数据\",{\"1\":{\"688\":1}}],[\"innodb逻辑存储结构\",{\"1\":{\"692\":1}}],[\"innodb设计了多种类型的页\",{\"1\":{\"688\":1}}],[\"innodb设计了四种行格式\",{\"1\":{\"683\":1}}],[\"innodb将数据划分为若干页\",{\"1\":{\"683\":1}}],[\"innodb支持外键\",{\"1\":{\"681\":1}}],[\"innodb支持行锁和表锁\",{\"1\":{\"681\":1}}],[\"innodb支持事务\",{\"1\":{\"681\":1}}],[\"innodb是默认的mysql引擎\",{\"1\":{\"678\":1}}],[\"innodb是一种兼顾高可靠性和高性能的通用存储引擎\",{\"1\":{\"678\":1}}],[\"innodb引擎的每张表都会对应这样一个独立表空间文件\",{\"1\":{\"678\":1}}],[\"innodb引擎中\",{\"1\":{\"673\":1}}],[\"innodb引擎将数据页从buffer\",{\"1\":{\"639\":1}}],[\"innodb引擎会遍历整张表把每一行的字段值都取出来\",{\"1\":{\"619\":2}}],[\"innodb引擎会遍历整张表\",{\"1\":{\"619\":1}}],[\"innodb磁盘结构\",{\"1\":{\"639\":1}}],[\"innodb的自适应哈希索引\",{\"1\":{\"638\":1}}],[\"innodb存储引擎中\",{\"1\":{\"699\":1}}],[\"innodb存储引擎会监控对表上各索引页的查询\",{\"1\":{\"638\":1}}],[\"innodb存储架构\",{\"1\":{\"637\":1}}],[\"innodb内存结构\",{\"1\":{\"638\":1}}],[\"innodb整体业务逻辑\",{\"1\":{\"637\":1}}],[\"innodb不支持\",{\"1\":{\"599\":1}}],[\"innodb\",{\"0\":{\"637\":1,\"678\":1,\"683\":1,\"688\":1,\"692\":1,\"719\":1,\"730\":1,\"1541\":1},\"1\":{\"549\":1,\"550\":1,\"554\":1,\"557\":1,\"558\":1,\"560\":2,\"562\":1,\"619\":3,\"620\":1,\"638\":2,\"639\":2,\"640\":1,\"673\":1,\"678\":2,\"681\":1,\"682\":2,\"693\":1,\"695\":1,\"697\":1,\"699\":1,\"720\":3,\"721\":1,\"730\":1,\"739\":1,\"741\":1,\"1540\":1,\"1541\":5,\"1542\":1,\"1546\":2,\"1555\":1,\"1556\":1,\"1558\":1,\"1567\":1,\"1568\":1}}],[\"innodb按照锁的粒度分为以下三类\",{\"1\":{\"549\":1}}],[\"inner\",{\"1\":{\"295\":2,\"296\":2,\"515\":1,\"603\":2}}],[\"innerclasses\",{\"1\":{\"240\":1}}],[\"inactive\",{\"1\":{\"184\":1,\"186\":1,\"196\":3,\"782\":1,\"1446\":1,\"1448\":3}}],[\"inputparams\",{\"1\":{\"391\":1}}],[\"inputstreamreader\",{\"1\":{\"320\":1,\"1502\":1}}],[\"inputstream\",{\"1\":{\"317\":1,\"319\":1,\"320\":1,\"321\":1,\"324\":1,\"507\":3,\"541\":12,\"1008\":4,\"1502\":1}}],[\"input\",{\"1\":{\"128\":5,\"1229\":1,\"1877\":1,\"1878\":1}}],[\"inpath\",{\"1\":{\"118\":1,\"120\":1,\"124\":2,\"126\":1,\"1226\":1,\"1228\":1}}],[\"infrastructure\",{\"1\":{\"1059\":1}}],[\"infrastructureadvisorautoproxycreator\",{\"1\":{\"1058\":1}}],[\"infimum\",{\"1\":{\"688\":1,\"689\":1}}],[\"infile为1\",{\"1\":{\"614\":1}}],[\"infile\",{\"1\":{\"614\":5}}],[\"inf\",{\"1\":{\"91\":1,\"383\":1,\"1598\":1}}],[\"infofuture\",{\"1\":{\"1369\":2}}],[\"info2\",{\"1\":{\"1368\":1}}],[\"info1\",{\"1\":{\"1368\":1}}],[\"info字段包含了执行计划的成本\",{\"1\":{\"729\":1}}],[\"information\",{\"1\":{\"628\":1,\"673\":1,\"729\":1}}],[\"info结尾用来描述有层次关系的复合数据结构\",{\"1\":{\"240\":1}}],[\"info\",{\"1\":{\"47\":1,\"93\":1,\"231\":1,\"240\":4,\"355\":4,\"384\":2,\"388\":3,\"389\":1,\"390\":1,\"417\":1,\"418\":4,\"675\":1,\"928\":1,\"939\":1,\"1192\":1,\"1227\":1,\"1343\":1,\"1349\":1,\"1369\":3}}],[\"invert\",{\"1\":{\"1855\":3}}],[\"inverse\",{\"1\":{\"68\":3}}],[\"inventory\",{\"1\":{\"1723\":1}}],[\"invocationcallback\",{\"1\":{\"1059\":1}}],[\"invocationtargetexception\",{\"1\":{\"1009\":1}}],[\"invocation\",{\"1\":{\"523\":3,\"1059\":5}}],[\"invocationhandler\",{\"1\":{\"99\":1,\"349\":2,\"1015\":7,\"1021\":2,\"1532\":2}}],[\"invoked\",{\"1\":{\"1714\":1,\"1715\":1}}],[\"invokedynamic调用在运行时动态解析的方法\",{\"1\":{\"241\":1}}],[\"invokecleaner\",{\"1\":{\"1136\":1}}],[\"invokechannelread\",{\"1\":{\"818\":4}}],[\"invokeany\",{\"1\":{\"1113\":2}}],[\"invokeall\",{\"1\":{\"1113\":2}}],[\"invokewithintransaction\",{\"1\":{\"1059\":4}}],[\"invokebeanfactorypostprocessor\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"invokebeanfactorypostprocessors\",{\"1\":{\"91\":1}}],[\"invokesuper\",{\"1\":{\"1016\":2,\"1022\":1}}],[\"invokespecial调用一些需要特殊处理的实例方法\",{\"1\":{\"241\":1}}],[\"invokestatic调用静态方法\",{\"1\":{\"241\":1}}],[\"invokeinterface调用接口方法\",{\"1\":{\"241\":1}}],[\"invokevirtual调用实例方法\",{\"1\":{\"241\":1}}],[\"invokefinalize\",{\"1\":{\"196\":1}}],[\"invoke\",{\"1\":{\"99\":1,\"101\":1,\"153\":2,\"311\":1,\"349\":1,\"543\":1,\"544\":1,\"1015\":5,\"1016\":4,\"1019\":1,\"1021\":4,\"1022\":2,\"1059\":4,\"1060\":1,\"1125\":1,\"1532\":1}}],[\"invalidated\",{\"1\":{\"1435\":1}}],[\"invalidate\",{\"1\":{\"73\":1}}],[\"instructables\",{\"1\":{\"1873\":1}}],[\"install\",{\"1\":{\"1694\":2,\"1791\":1}}],[\"instantiationawarebeanpostprocessor\",{\"1\":{\"1023\":1,\"1597\":1}}],[\"instantiationexception\",{\"1\":{\"1009\":1}}],[\"instantiationstrategy\",{\"1\":{\"1009\":5}}],[\"instantiate\",{\"1\":{\"1009\":3}}],[\"instantiated\",{\"1\":{\"1002\":1}}],[\"instantaneous\",{\"1\":{\"928\":1}}],[\"instant\",{\"1\":{\"353\":1}}],[\"instancelock\",{\"1\":{\"1073\":1}}],[\"instances控制缓冲池实例个数\",{\"1\":{\"731\":1}}],[\"instanceof\",{\"1\":{\"184\":2,\"188\":1,\"196\":1,\"1008\":1,\"1055\":1,\"1059\":2,\"1713\":2}}],[\"instance\",{\"1\":{\"70\":1,\"290\":4,\"357\":1,\"408\":1,\"541\":2,\"1531\":1,\"1645\":6}}],[\"instace\",{\"1\":{\"290\":1}}],[\"inspect\",{\"1\":{\"1634\":1}}],[\"insync\",{\"1\":{\"460\":4}}],[\"inside\",{\"1\":{\"128\":8,\"1229\":2}}],[\"insert操作仅对本事务可见\",{\"1\":{\"1554\":1}}],[\"insert>\",{\"1\":{\"530\":1}}],[\"insertauthor\",{\"1\":{\"530\":1}}],[\"insertpersonsql\",{\"1\":{\"515\":1}}],[\"insert等等\",{\"1\":{\"510\":1}}],[\"insert\",{\"0\":{\"614\":1,\"746\":1},\"1\":{\"14\":1,\"118\":2,\"119\":1,\"120\":2,\"121\":2,\"126\":1,\"509\":1,\"515\":1,\"529\":1,\"530\":3,\"533\":1,\"558\":1,\"561\":2,\"564\":1,\"578\":4,\"591\":1,\"607\":1,\"623\":1,\"634\":1,\"636\":2,\"640\":1,\"739\":1,\"746\":2,\"748\":1,\"749\":2,\"750\":1,\"754\":1,\"1226\":2,\"1228\":2,\"1554\":1}}],[\"industry\",{\"1\":{\"1870\":1}}],[\"indices\",{\"1\":{\"42\":1,\"43\":1,\"44\":1}}],[\"index可以标记\",{\"1\":{\"828\":1}}],[\"index++\",{\"1\":{\"791\":1}}],[\"indexes\",{\"1\":{\"695\":1}}],[\"index=\",{\"1\":{\"538\":1}}],[\"indexsearcher\",{\"1\":{\"53\":2}}],[\"indexsort\",{\"1\":{\"37\":1}}],[\"indexreader\",{\"1\":{\"53\":1}}],[\"indexrequest\",{\"1\":{\"47\":2}}],[\"indexwriter\",{\"1\":{\"53\":2}}],[\"indexname\",{\"1\":{\"47\":1}}],[\"index\",{\"1\":{\"34\":1,\"36\":1,\"42\":2,\"47\":1,\"59\":1,\"130\":1,\"467\":2,\"475\":2,\"476\":1,\"538\":2,\"546\":1,\"615\":1,\"616\":2,\"638\":1,\"643\":1,\"699\":2,\"701\":10,\"705\":6,\"706\":2,\"707\":1,\"710\":1,\"711\":1,\"717\":1,\"720\":3,\"728\":5,\"772\":1,\"791\":1,\"827\":2,\"828\":1,\"1281\":1,\"1336\":2,\"1344\":1,\"1349\":1,\"1350\":1,\"1567\":8,\"1620\":1,\"1871\":3}}],[\"ingest节点\",{\"1\":{\"33\":1}}],[\"in\",{\"1\":{\"3\":1,\"15\":1,\"83\":1,\"242\":1,\"295\":1,\"296\":1,\"434\":1,\"460\":1,\"462\":4,\"538\":1,\"558\":1,\"583\":2,\"609\":2,\"610\":2,\"611\":2,\"618\":2,\"631\":2,\"634\":1,\"635\":1,\"698\":1,\"739\":1,\"796\":2,\"797\":1,\"849\":9,\"1119\":1,\"1192\":1,\"1557\":1,\"1562\":1,\"1571\":1,\"1714\":1,\"1715\":1,\"1792\":7,\"1859\":1,\"1862\":1}}],[\"int>\",{\"1\":{\"1227\":1}}],[\"int>数据为\",{\"1\":{\"122\":1}}],[\"int32\",{\"1\":{\"892\":1}}],[\"int16\",{\"1\":{\"892\":1}}],[\"int64\",{\"1\":{\"882\":1,\"892\":1}}],[\"intbuffer\",{\"1\":{\"761\":1}}],[\"intrinsiccandidate\",{\"1\":{\"194\":1}}],[\"into\",{\"1\":{\"83\":2,\"113\":2,\"118\":2,\"119\":3,\"120\":2,\"124\":2,\"126\":1,\"515\":3,\"530\":1,\"578\":4,\"614\":1,\"623\":1,\"634\":3,\"1226\":2,\"1228\":2}}],[\"intset编码和集合\",{\"1\":{\"913\":1}}],[\"intset\",{\"1\":{\"899\":2,\"913\":1}}],[\"ints\",{\"1\":{\"80\":1,\"215\":1}}],[\"intel\",{\"1\":{\"1444\":1}}],[\"integhr\",{\"1\":{\"661\":1}}],[\"integerstream2\",{\"1\":{\"1067\":1}}],[\"integerstream\",{\"1\":{\"1067\":1}}],[\"integerstream1\",{\"1\":{\"1067\":1,\"1068\":2}}],[\"integers\",{\"1\":{\"846\":1}}],[\"integer>>\",{\"1\":{\"69\":2,\"822\":2}}],[\"integer>\",{\"1\":{\"67\":2,\"68\":1,\"69\":1,\"73\":3,\"822\":2,\"990\":1,\"1663\":1}}],[\"integer\",{\"1\":{\"9\":1,\"36\":1,\"45\":1,\"73\":2,\"146\":1,\"153\":1,\"263\":1,\"450\":1,\"452\":1,\"506\":1,\"791\":1,\"796\":1,\"797\":2,\"822\":2,\"827\":1,\"1067\":1,\"1068\":3,\"1110\":3,\"1112\":1,\"1663\":3,\"1712\":1}}],[\"intention等\",{\"1\":{\"564\":1}}],[\"intention\",{\"1\":{\"560\":2,\"561\":1}}],[\"interactive\",{\"1\":{\"1860\":1}}],[\"interprocesslock\",{\"1\":{\"1188\":8}}],[\"interprocessreadwritelock\",{\"1\":{\"1188\":8}}],[\"interpreter\",{\"1\":{\"242\":1}}],[\"intermediate\",{\"1\":{\"1068\":8}}],[\"interestops\",{\"0\":{\"867\":1},\"1\":{\"789\":4,\"863\":1,\"867\":5,\"873\":2}}],[\"intersection合并\",{\"1\":{\"711\":1}}],[\"intercept\",{\"1\":{\"523\":1,\"1016\":5,\"1022\":1,\"1532\":2}}],[\"intercepts\",{\"1\":{\"523\":1}}],[\"interceptorchain\",{\"1\":{\"542\":1}}],[\"interceptor\",{\"1\":{\"523\":2,\"1059\":4}}],[\"interceptor=\",{\"1\":{\"523\":1}}],[\"interval\",{\"1\":{\"230\":2,\"467\":2,\"483\":1,\"485\":3,\"491\":1,\"595\":2,\"1567\":1}}],[\"internal\",{\"1\":{\"1135\":6,\"1137\":1,\"1139\":1}}],[\"internalerror\",{\"1\":{\"196\":1}}],[\"intern\",{\"1\":{\"211\":1,\"300\":1,\"1536\":1}}],[\"interfaces\",{\"1\":{\"240\":3,\"349\":1}}],[\"interface\",{\"1\":{\"71\":1,\"224\":1,\"306\":1,\"348\":1,\"383\":1,\"506\":1,\"522\":1,\"1010\":1,\"1015\":1,\"1039\":1,\"1044\":1,\"1047\":1,\"1057\":1,\"1096\":1}}],[\"interruptworkers\",{\"1\":{\"1116\":1}}],[\"interruptidleworkers\",{\"1\":{\"1114\":1,\"1116\":2,\"1120\":1}}],[\"interruptiblechannel\",{\"1\":{\"1092\":1}}],[\"interruptible\",{\"1\":{\"6\":3,\"1087\":1,\"1092\":1,\"1095\":1}}],[\"interrupt0\",{\"1\":{\"1092\":3}}],[\"interrupt\",{\"0\":{\"1092\":1},\"1\":{\"6\":1,\"8\":1,\"143\":1,\"156\":1,\"172\":1,\"330\":1,\"1092\":3,\"1093\":1,\"1095\":1,\"1115\":1}}],[\"interruptedexception\",{\"1\":{\"8\":4,\"93\":1,\"98\":1,\"161\":1,\"183\":1,\"188\":1,\"196\":2,\"418\":1,\"812\":1,\"1091\":1,\"1092\":1,\"1115\":1,\"1263\":1,\"1369\":1}}],[\"interrupted\",{\"1\":{\"6\":6,\"8\":6,\"1087\":1,\"1092\":9,\"1115\":1}}],[\"int\",{\"1\":{\"3\":5,\"5\":5,\"6\":2,\"7\":1,\"8\":1,\"9\":6,\"59\":2,\"77\":1,\"80\":2,\"83\":2,\"112\":1,\"113\":2,\"118\":1,\"122\":1,\"124\":5,\"153\":3,\"263\":1,\"287\":2,\"296\":3,\"332\":4,\"334\":1,\"421\":1,\"453\":1,\"456\":1,\"509\":3,\"530\":1,\"598\":2,\"631\":1,\"634\":2,\"661\":1,\"767\":1,\"771\":1,\"772\":1,\"777\":1,\"783\":1,\"785\":3,\"788\":4,\"789\":3,\"791\":1,\"799\":1,\"822\":1,\"828\":8,\"842\":2,\"843\":2,\"844\":1,\"849\":3,\"867\":1,\"872\":1,\"873\":6,\"896\":2,\"913\":1,\"986\":1,\"987\":1,\"989\":12,\"990\":1,\"991\":3,\"993\":9,\"994\":7,\"995\":8,\"996\":9,\"998\":15,\"1001\":2,\"1002\":10,\"1009\":1,\"1015\":1,\"1057\":1,\"1068\":1,\"1087\":8,\"1095\":2,\"1099\":4,\"1106\":3,\"1112\":14,\"1113\":2,\"1114\":3,\"1115\":2,\"1116\":1,\"1120\":6,\"1136\":1,\"1137\":2,\"1139\":2,\"1140\":2,\"1141\":2,\"1143\":2,\"1180\":4,\"1188\":2,\"1226\":1,\"1227\":2,\"1357\":1,\"1358\":2,\"1461\":4,\"1511\":2,\"1516\":1,\"1651\":11,\"1652\":15,\"1653\":12,\"1654\":11,\"1662\":4,\"1663\":2,\"1664\":3,\"1665\":3,\"1666\":6,\"1669\":4,\"1670\":3,\"1671\":4,\"1672\":2,\"1673\":4,\"1674\":7,\"1675\":7,\"1676\":7,\"1677\":2,\"1711\":1,\"1712\":1}}],[\"iostat\",{\"1\":{\"1631\":1,\"1700\":1}}],[\"io效率\",{\"1\":{\"1484\":1}}],[\"io压力大的场景\",{\"1\":{\"1483\":1}}],[\"io请求\",{\"1\":{\"1483\":2,\"1484\":1}}],[\"ioc\",{\"0\":{\"1005\":1,\"1377\":1,\"1592\":1,\"1593\":1},\"1\":{\"1004\":1,\"1593\":1}}],[\"iocp\",{\"1\":{\"795\":1}}],[\"ioratio\",{\"1\":{\"872\":4}}],[\"ior指令用于执行按位或运算\",{\"1\":{\"241\":1}}],[\"io事件\",{\"1\":{\"871\":1}}],[\"io成本\",{\"1\":{\"729\":1}}],[\"io瓶颈\",{\"1\":{\"651\":1}}],[\"iotime\",{\"1\":{\"872\":1}}],[\"iot\",{\"1\":{\"615\":1}}],[\"iotxing\",{\"1\":{\"10\":1}}],[\"ioexception\",{\"1\":{\"507\":2,\"767\":1,\"779\":3,\"788\":1,\"791\":4,\"792\":2,\"796\":1,\"797\":3,\"864\":1,\"870\":1,\"1008\":4,\"1533\":1}}],[\"ioutils\",{\"1\":{\"323\":1}}],[\"io\",{\"0\":{\"82\":1,\"316\":1,\"323\":1,\"793\":1,\"799\":1,\"1478\":1,\"1484\":1,\"1501\":1,\"1502\":1,\"1503\":1,\"1504\":1},\"1\":{\"3\":1,\"82\":1,\"212\":1,\"323\":1,\"445\":2,\"525\":1,\"546\":1,\"565\":1,\"640\":2,\"784\":2,\"791\":1,\"794\":5,\"795\":4,\"796\":2,\"797\":1,\"799\":4,\"800\":1,\"814\":2,\"816\":1,\"817\":2,\"818\":1,\"829\":1,\"855\":2,\"864\":2,\"865\":2,\"866\":1,\"867\":1,\"869\":1,\"870\":2,\"871\":1,\"872\":4,\"873\":7,\"1119\":1,\"1155\":1,\"1446\":1,\"1477\":1,\"1478\":10,\"1479\":3,\"1480\":1,\"1481\":3,\"1482\":1,\"1483\":2,\"1486\":1,\"1488\":1,\"1511\":2,\"1546\":2,\"1563\":2,\"1571\":2,\"1572\":1,\"1631\":1,\"1859\":4}}],[\"等天黑的过程中\",{\"1\":{\"1839\":1}}],[\"等上班了高低整一辆\",{\"1\":{\"1818\":1}}],[\"等同clear\",{\"1\":{\"1690\":1}}],[\"等时间到了重置\",{\"1\":{\"1637\":1}}],[\"等返回\",{\"1\":{\"1567\":1}}],[\"等当前读\",{\"1\":{\"1557\":1}}],[\"等框架大量使用反射机制\",{\"1\":{\"1531\":1}}],[\"等系统调用减少cpu使用\",{\"1\":{\"1504\":1}}],[\"等到了另一个观景台\",{\"1\":{\"1843\":1}}],[\"等到锁被释放后\",{\"1\":{\"1468\":1}}],[\"等到对端发送数据恢复\",{\"1\":{\"1420\":1}}],[\"等非法访问内存\",{\"1\":{\"1465\":1}}],[\"等进程退出后再归还\",{\"1\":{\"1445\":1}}],[\"等服务端把这些数据都处理发送完\",{\"1\":{\"1410\":1}}],[\"等服务端处理完数据后\",{\"1\":{\"1410\":1}}],[\"等分布式事务方案\",{\"1\":{\"1370\":1}}],[\"等公式算法\",{\"1\":{\"1280\":1,\"1619\":1}}],[\"等方式实现\",{\"1\":{\"1262\":1}}],[\"等方法都是配置\",{\"1\":{\"863\":1}}],[\"等方法\",{\"1\":{\"9\":1,\"134\":1,\"792\":1}}],[\"等业务经过一段时间验证新集群的读取没有问题\",{\"1\":{\"1236\":1}}],[\"等版本\",{\"1\":{\"1140\":2}}],[\"等关于\",{\"1\":{\"1137\":1}}],[\"等价于mock方法\",{\"1\":{\"1711\":1}}],[\"等价于\",{\"1\":{\"1634\":1}}],[\"等价于下面三个命令的组合\",{\"1\":{\"1321\":1}}],[\"等价于下面的\",{\"1\":{\"537\":2}}],[\"等价于形式2\",{\"1\":{\"1073\":1}}],[\"等价于形式1\",{\"1\":{\"1073\":1}}],[\"等后续获取对象时再处理代理对象\",{\"1\":{\"1028\":1}}],[\"等等\",{\"1\":{\"1008\":1,\"1114\":1,\"1244\":1,\"1473\":1}}],[\"等参数则保持不变\",{\"1\":{\"967\":1}}],[\"等有需要时再真正释放\",{\"1\":{\"879\":1}}],[\"等有需要再学习吧\",{\"1\":{\"75\":1}}],[\"等都是无限等待的\",{\"1\":{\"855\":1}}],[\"等级\",{\"1\":{\"729\":1}}],[\"等值传递\",{\"1\":{\"724\":1}}],[\"等值匹配称单点区间\",{\"1\":{\"710\":1}}],[\"等于sds保存字符串的长度\",{\"1\":{\"878\":1}}],[\"等于容量\",{\"1\":{\"768\":1}}],[\"等于\",{\"1\":{\"583\":1}}],[\"等于0表示下个等待节点可能获取锁失败\",{\"1\":{\"5\":1}}],[\"等引擎来说\",{\"1\":{\"552\":1}}],[\"等该\",{\"1\":{\"471\":1}}],[\"等环境\",{\"1\":{\"242\":1}}],[\"等包装类型\",{\"1\":{\"146\":1}}],[\"等不可变的类\",{\"1\":{\"146\":1}}],[\"等调用\",{\"1\":{\"73\":1}}],[\"等信息\",{\"1\":{\"37\":1}}],[\"等工具通过\",{\"1\":{\"1224\":1}}],[\"等工具\",{\"1\":{\"8\":1}}],[\"等待10分钟让\",{\"1\":{\"1792\":1}}],[\"等待出票\",{\"1\":{\"1722\":1}}],[\"等待状态\",{\"1\":{\"1509\":1}}],[\"等待状态一致\",{\"1\":{\"564\":1}}],[\"等待数据\",{\"1\":{\"1487\":1}}],[\"等待数据阶段\",{\"1\":{\"794\":1}}],[\"等待的时间越长\",{\"1\":{\"1470\":1}}],[\"等待下一次保活时机到来\",{\"1\":{\"1419\":1}}],[\"等待进程调用\",{\"1\":{\"1414\":1}}],[\"等待足够的时间以确保第四次挥手的\",{\"1\":{\"1410\":1}}],[\"等待所有任务都完成在返回\",{\"1\":{\"1369\":1}}],[\"等待所有检索完成再返回\",{\"1\":{\"1369\":1}}],[\"等待获取写锁对象\",{\"1\":{\"1188\":1}}],[\"等待获取读锁对象\",{\"1\":{\"1188\":1}}],[\"等待获取同步状态的线程将有机会获取同步状态\",{\"1\":{\"5\":1}}],[\"等待服务器的回调\",{\"1\":{\"1171\":1}}],[\"等待服务器将结果返回给客户端\",{\"1\":{\"965\":1}}],[\"等待另一线程执行操作的状态\",{\"1\":{\"1089\":1}}],[\"等待被唤醒\",{\"1\":{\"1074\":1}}],[\"等待被其它事务重用\",{\"1\":{\"749\":1}}],[\"等待执行服务器传来的lua脚本\",{\"1\":{\"963\":1}}],[\"等待文件事件产生调用的是aeapipoll\",{\"1\":{\"921\":1}}],[\"等待结果\",{\"1\":{\"822\":1}}],[\"等待任务结束\",{\"1\":{\"822\":2}}],[\"等待连接建立\",{\"1\":{\"813\":1}}],[\"等待时间增加提高优先级\",{\"1\":{\"1470\":1}}],[\"等待时间与计算时间的比率\",{\"1\":{\"1119\":1}}],[\"等待时间\",{\"1\":{\"459\":1,\"1470\":2}}],[\"等待接收消息的程序\",{\"1\":{\"413\":1}}],[\"等待接收客户端的socket通信连接\",{\"1\":{\"343\":1}}],[\"等待入队的引用实例\",{\"1\":{\"188\":1}}],[\"等待一段时间\",{\"1\":{\"183\":1}}],[\"等待线程\",{\"1\":{\"160\":1}}],[\"等待计数归零\",{\"1\":{\"160\":1}}],[\"等待处理任务的线程执行完毕\",{\"1\":{\"153\":1}}],[\"等待\",{\"1\":{\"137\":1,\"139\":1,\"156\":2,\"186\":1,\"839\":1,\"1410\":1,\"1511\":1}}],[\"等待其它线程的一些特殊事件\",{\"1\":{\"1509\":1}}],[\"等待其它线程\",{\"1\":{\"6\":1}}],[\"等待队列为空\",{\"1\":{\"9\":2}}],[\"等待队列中\",{\"1\":{\"8\":1}}],[\"等待队列的队尾\",{\"1\":{\"3\":1}}],[\"等待队列的对头\",{\"1\":{\"3\":1}}],[\"等待队列\",{\"1\":{\"2\":1,\"4\":1,\"1463\":1}}],[\"等\",{\"1\":{\"2\":1,\"24\":1,\"137\":2,\"172\":1,\"362\":1,\"404\":1,\"412\":1,\"624\":1,\"657\":1,\"1221\":1,\"1254\":1,\"1259\":1,\"1264\":1,\"1540\":1,\"1688\":1,\"1792\":1}}],[\"c=<network\",{\"1\":{\"1862\":1}}],[\"c=in\",{\"1\":{\"1862\":1}}],[\"c=连接信息\",{\"1\":{\"1862\":2}}],[\"cc\",{\"1\":{\"1698\":1}}],[\"cfs\",{\"1\":{\"1436\":2}}],[\"cfg\",{\"0\":{\"1196\":1},\"1\":{\"1164\":1,\"1165\":4,\"1198\":4}}],[\"cwnd重置为1\",{\"1\":{\"1413\":1}}],[\"cwnd超过慢启动门限后\",{\"1\":{\"1413\":1}}],[\"cwnd\",{\"1\":{\"1413\":11}}],[\"cwnd+1\",{\"1\":{\"1413\":1}}],[\"cwiki\",{\"1\":{\"117\":1}}],[\"c6\",{\"1\":{\"1336\":2}}],[\"c5\",{\"1\":{\"1336\":2}}],[\"c4\",{\"1\":{\"1335\":1,\"1336\":2,\"1337\":3}}],[\"cvs\",{\"1\":{\"1309\":1}}],[\"cversion\",{\"1\":{\"1168\":1}}],[\"cdn厂商花费大价钱在全国各地建立cdn的服务站点\",{\"1\":{\"1251\":1}}],[\"cdn服务一般是由第三方提供的内容分发网络服务\",{\"1\":{\"1251\":1}}],[\"cdn\",{\"0\":{\"1251\":1},\"1\":{\"1375\":1,\"1792\":2}}],[\"cdwra\",{\"1\":{\"1177\":1}}],[\"cdata\",{\"1\":{\"357\":1}}],[\"czxid\",{\"1\":{\"1174\":1}}],[\"ctrl\",{\"1\":{\"1690\":7}}],[\"ctrl+d退回上一个用户\",{\"1\":{\"1691\":1}}],[\"ctrl+c\",{\"1\":{\"1462\":1}}],[\"ctrl+z\",{\"1\":{\"1462\":1}}],[\"ctlof\",{\"1\":{\"1112\":2,\"1116\":2}}],[\"ctl\",{\"0\":{\"1112\":1},\"1\":{\"1112\":4,\"1113\":3,\"1114\":3,\"1115\":3,\"1116\":3,\"1120\":1,\"1487\":1}}],[\"ctor\",{\"1\":{\"1009\":6}}],[\"ctime\",{\"1\":{\"923\":1,\"1174\":1}}],[\"ctx\",{\"1\":{\"811\":1,\"818\":3,\"823\":10,\"829\":2,\"846\":4,\"849\":2,\"873\":1}}],[\"cx\",{\"1\":{\"914\":1}}],[\"cip\",{\"1\":{\"1698\":1}}],[\"cipher\",{\"1\":{\"1402\":2}}],[\"cidr\",{\"1\":{\"1422\":1}}],[\"cid\",{\"1\":{\"1228\":2}}],[\"ci\",{\"1\":{\"674\":3}}],[\"citypinyin\",{\"1\":{\"1355\":1}}],[\"city\",{\"1\":{\"51\":2,\"675\":1,\"1357\":1,\"1358\":1}}],[\"cj\",{\"1\":{\"506\":2}}],[\"c0\",{\"1\":{\"495\":1}}],[\"cglib2aopproxy\",{\"0\":{\"1022\":1}}],[\"cglib$emptyargs\",{\"1\":{\"1016\":1}}],[\"cglib$bind\",{\"1\":{\"1016\":2}}],[\"cglib$hello$0\",{\"1\":{\"1016\":2}}],[\"cglib$hello$0$proxy\",{\"1\":{\"1016\":3}}],[\"cglib$hello$0$method\",{\"1\":{\"1016\":3}}],[\"cglib$callback\",{\"1\":{\"1016\":3}}],[\"cglib$statichook1\",{\"1\":{\"1016\":2}}],[\"cglib$static\",{\"1\":{\"1016\":1}}],[\"cglibsubclassinginstantiationstrategy\",{\"1\":{\"1009\":1}}],[\"cglib\",{\"0\":{\"1016\":1},\"1\":{\"1009\":1,\"1014\":1,\"1016\":3,\"1023\":1,\"1057\":2,\"1378\":1,\"1380\":1,\"1532\":3}}],[\"cg\",{\"1\":{\"481\":1}}],[\"c++实现的顶层加载器\",{\"1\":{\"1528\":1}}],[\"c++\",{\"1\":{\"434\":1,\"435\":2,\"1451\":1}}],[\"certificate\",{\"1\":{\"1402\":1}}],[\"centeraround\",{\"1\":{\"993\":3}}],[\"ceil\",{\"1\":{\"594\":2}}],[\"ceki\",{\"1\":{\"376\":2,\"382\":1}}],[\"cell\",{\"1\":{\"150\":1}}],[\"cellset\",{\"1\":{\"69\":1}}],[\"cell<r\",{\"1\":{\"69\":1}}],[\"c语言层面\",{\"1\":{\"366\":1}}],[\"c10k\",{\"1\":{\"1487\":1}}],[\"c1提供的性能监控信息\",{\"1\":{\"269\":1}}],[\"c1\",{\"1\":{\"267\":1,\"495\":1}}],[\"c1编译\",{\"1\":{\"267\":3}}],[\"cp\",{\"1\":{\"240\":1,\"623\":1,\"1200\":1,\"1206\":1,\"1207\":1,\"1218\":1,\"1278\":1,\"1618\":1,\"1634\":1}}],[\"cpp\",{\"1\":{\"209\":1}}],[\"cpu占用率等\",{\"1\":{\"1631\":1}}],[\"cpu等\",{\"1\":{\"1222\":1}}],[\"cpu的数量\",{\"1\":{\"1119\":1}}],[\"cpu友好\",{\"1\":{\"908\":1}}],[\"cpu成本\",{\"1\":{\"716\":1}}],[\"cpu出现瓶颈\",{\"1\":{\"651\":1}}],[\"cpu瓶颈\",{\"1\":{\"651\":1}}],[\"cpu分时轮询执行\",{\"1\":{\"335\":1}}],[\"cpus\",{\"1\":{\"93\":1}}],[\"cpu\",{\"0\":{\"1435\":1,\"1436\":1},\"1\":{\"6\":1,\"33\":1,\"134\":3,\"139\":1,\"142\":2,\"143\":1,\"144\":2,\"148\":1,\"149\":1,\"153\":1,\"270\":1,\"549\":1,\"612\":1,\"782\":1,\"783\":1,\"791\":8,\"799\":5,\"801\":3,\"802\":4,\"809\":1,\"1079\":2,\"1095\":1,\"1119\":9,\"1137\":2,\"1249\":2,\"1395\":1,\"1432\":1,\"1434\":1,\"1435\":9,\"1437\":3,\"1440\":1,\"1443\":2,\"1444\":1,\"1446\":3,\"1450\":1,\"1454\":3,\"1468\":2,\"1470\":6,\"1481\":4,\"1482\":1,\"1486\":3,\"1488\":1,\"1511\":4,\"1513\":1,\"1573\":3,\"1700\":2}}],[\"cmd>的结构\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"cmd\",{\"1\":{\"923\":1,\"1690\":1,\"1701\":1}}],[\"cmd数量的键\",{\"1\":{\"917\":1}}],[\"cms收集器\",{\"1\":{\"176\":1}}],[\"cms\",{\"0\":{\"176\":1},\"1\":{\"172\":1,\"176\":3,\"1525\":3}}],[\"cmpxchg\",{\"1\":{\"148\":1}}],[\"c3\",{\"1\":{\"122\":1,\"1337\":1}}],[\"c2同时工作\",{\"1\":{\"267\":1}}],[\"c2编译\",{\"1\":{\"267\":1}}],[\"c2\",{\"1\":{\"122\":1,\"495\":1,\"1335\":1,\"1336\":1,\"1337\":1}}],[\"c中三选一\",{\"1\":{\"105\":1}}],[\"cutting\",{\"1\":{\"1214\":1}}],[\"customize\",{\"1\":{\"1054\":1}}],[\"customizers\",{\"1\":{\"1054\":2}}],[\"custom\",{\"1\":{\"254\":1,\"1049\":1,\"1304\":1}}],[\"customshutdownhook\",{\"1\":{\"93\":1}}],[\"curl\",{\"1\":{\"1698\":2}}],[\"cur\",{\"1\":{\"1669\":3,\"1671\":5}}],[\"curatorframeworkfactory\",{\"1\":{\"1180\":1}}],[\"curatorframework\",{\"1\":{\"1180\":2,\"1181\":9,\"1188\":1,\"1192\":2}}],[\"curatorconfig\",{\"1\":{\"1180\":1}}],[\"curator<\",{\"1\":{\"1179\":2}}],[\"curator\",{\"0\":{\"1178\":1,\"1188\":1,\"1192\":1},\"1\":{\"1178\":3,\"1179\":1,\"1180\":6,\"1181\":7,\"1192\":3}}],[\"cursor\",{\"1\":{\"634\":8}}],[\"cursor<t>\",{\"1\":{\"509\":1}}],[\"curdate\",{\"1\":{\"595\":1}}],[\"curtime\",{\"1\":{\"14\":2,\"595\":1}}],[\"currenttimemillis\",{\"1\":{\"14\":2,\"989\":1,\"1653\":1}}],[\"currentthread\",{\"1\":{\"6\":1,\"8\":1,\"9\":5,\"154\":1,\"188\":1,\"196\":1,\"330\":1,\"363\":3,\"791\":1,\"871\":1,\"1088\":1,\"1092\":2,\"1095\":4,\"1108\":1,\"1115\":1}}],[\"current\",{\"1\":{\"6\":3,\"9\":9,\"110\":1,\"129\":3,\"453\":1,\"1357\":3,\"1358\":3}}],[\"chrome\",{\"1\":{\"1867\":1}}],[\"chronounit\",{\"1\":{\"353\":1}}],[\"christianity\",{\"0\":{\"1759\":1}}],[\"chinese\",{\"1\":{\"1246\":1}}],[\"childgroup\",{\"1\":{\"873\":1}}],[\"child\",{\"1\":{\"541\":6,\"811\":1,\"873\":5,\"928\":2,\"1168\":1}}],[\"childhandler\",{\"1\":{\"93\":1,\"811\":1,\"813\":1,\"818\":1,\"863\":2,\"873\":1}}],[\"childoption\",{\"1\":{\"93\":2,\"854\":2}}],[\"chmod\",{\"1\":{\"1218\":1,\"1631\":1,\"1693\":2}}],[\"chown\",{\"1\":{\"1218\":1,\"1693\":3}}],[\"choose>\",{\"1\":{\"536\":1}}],[\"choose\",{\"0\":{\"536\":1}}],[\"chdf\",{\"1\":{\"1121\":1}}],[\"chengxulvtu\",{\"1\":{\"1156\":1}}],[\"cheng\",{\"1\":{\"1083\":1}}],[\"checkout\",{\"1\":{\"1329\":1,\"1332\":1,\"1333\":1,\"1338\":3,\"1344\":3,\"1345\":2,\"1346\":1,\"1351\":1,\"1791\":1}}],[\"checkshutdownaccess\",{\"1\":{\"1116\":2}}],[\"checksum\",{\"1\":{\"739\":1}}],[\"checkaccess\",{\"1\":{\"1088\":1,\"1092\":1}}],[\"checkargument\",{\"1\":{\"59\":1}}],[\"checked\",{\"1\":{\"1055\":1}}],[\"checkelementindex\",{\"1\":{\"59\":1}}],[\"checkpermission\",{\"1\":{\"1088\":1,\"1095\":1}}],[\"checkpoint2中选择较大的checkpoint\",{\"1\":{\"742\":1}}],[\"checkpoint序号\",{\"1\":{\"739\":1}}],[\"checkpoint\",{\"0\":{\"741\":1},\"1\":{\"739\":1,\"741\":1,\"742\":1,\"1555\":1}}],[\"checkphone\",{\"1\":{\"14\":1}}],[\"check\",{\"1\":{\"598\":2,\"622\":3,\"623\":3,\"913\":1,\"914\":1,\"1148\":1,\"1219\":1}}],[\"checknotnull\",{\"1\":{\"59\":1,\"818\":1}}],[\"checkusername\",{\"1\":{\"14\":1}}],[\"chunk\",{\"1\":{\"731\":1}}],[\"ch\",{\"1\":{\"93\":2,\"380\":1,\"392\":1,\"842\":1,\"843\":1,\"846\":2,\"873\":6}}],[\"challenge\",{\"1\":{\"1420\":2}}],[\"chatgpt\",{\"1\":{\"1330\":1}}],[\"chatting\",{\"1\":{\"852\":1}}],[\"chatset\",{\"1\":{\"315\":1}}],[\"channle\",{\"1\":{\"777\":1,\"957\":1}}],[\"channelactive\",{\"1\":{\"867\":2}}],[\"channelexception\",{\"1\":{\"864\":1,\"870\":1}}],[\"channelfactory\",{\"1\":{\"864\":1}}],[\"channelfuturelistener\",{\"1\":{\"820\":2,\"821\":1,\"873\":1}}],[\"channelfuture\",{\"0\":{\"820\":1},\"1\":{\"93\":1,\"820\":11,\"821\":2,\"873\":1}}],[\"channelduplexhandler\",{\"1\":{\"851\":1}}],[\"channelpromise\",{\"1\":{\"823\":2}}],[\"channelpipeline\",{\"1\":{\"93\":1,\"823\":1}}],[\"channeloutboundhandleradapter\",{\"1\":{\"823\":6}}],[\"channeloption\",{\"1\":{\"93\":3,\"854\":3,\"855\":1,\"856\":1,\"858\":1}}],[\"channelhandler\",{\"1\":{\"823\":4,\"829\":1,\"851\":4}}],[\"channelhandlercontext\",{\"1\":{\"811\":1,\"818\":2,\"823\":5,\"826\":1,\"846\":1,\"849\":2,\"873\":1}}],[\"channelread0\",{\"1\":{\"846\":1}}],[\"channelread\",{\"1\":{\"811\":1,\"818\":2,\"823\":5,\"873\":3}}],[\"channels和pubsub\",{\"1\":{\"957\":1}}],[\"channels字典中\",{\"1\":{\"954\":1}}],[\"channels\",{\"1\":{\"782\":3,\"783\":3,\"869\":1,\"873\":1,\"929\":1,\"954\":1,\"956\":1,\"957\":1}}],[\"channelinitializer\",{\"1\":{\"813\":3,\"864\":1,\"865\":1,\"873\":1}}],[\"channelinitializer<niosocketchannel>\",{\"1\":{\"812\":1,\"820\":1}}],[\"channelinitializer<>\",{\"1\":{\"811\":1,\"818\":1,\"863\":1}}],[\"channelinitializer<socketchannel>\",{\"1\":{\"93\":1}}],[\"channelinboundhandleradapter\",{\"1\":{\"97\":1,\"811\":1,\"818\":2,\"823\":6}}],[\"channel\",{\"0\":{\"760\":1,\"818\":1,\"819\":1},\"1\":{\"93\":2,\"324\":2,\"418\":3,\"422\":3,\"760\":9,\"765\":4,\"767\":3,\"771\":3,\"772\":3,\"775\":1,\"776\":3,\"777\":10,\"782\":2,\"783\":4,\"784\":1,\"785\":4,\"786\":4,\"787\":1,\"788\":6,\"789\":8,\"791\":3,\"792\":6,\"794\":1,\"796\":2,\"801\":1,\"811\":6,\"812\":4,\"813\":1,\"814\":4,\"816\":1,\"817\":2,\"818\":6,\"819\":5,\"820\":12,\"821\":3,\"823\":5,\"829\":1,\"844\":2,\"850\":5,\"851\":4,\"863\":2,\"864\":3,\"865\":2,\"866\":1,\"867\":1,\"870\":2,\"872\":1,\"873\":7,\"1092\":1,\"1504\":1,\"1629\":1}}],[\"changed\",{\"1\":{\"1181\":1,\"1192\":1}}],[\"changebuffer\",{\"1\":{\"638\":1}}],[\"change\",{\"1\":{\"576\":2,\"638\":2,\"649\":1,\"1155\":1,\"1402\":2,\"1563\":1,\"1625\":1}}],[\"chanper\",{\"1\":{\"83\":2,\"506\":3,\"507\":1,\"521\":2,\"528\":1,\"541\":1,\"553\":1,\"779\":1,\"1016\":2,\"1154\":2,\"1155\":1,\"1177\":1,\"1688\":2,\"1693\":1,\"1701\":1}}],[\"charat\",{\"1\":{\"990\":2,\"993\":4,\"996\":3}}],[\"characters\",{\"1\":{\"1148\":2}}],[\"characteristic可选值有\",{\"1\":{\"635\":1}}],[\"characteristic\",{\"1\":{\"635\":1}}],[\"character\",{\"1\":{\"130\":5,\"146\":1,\"674\":5,\"1712\":1}}],[\"charbuffer\",{\"1\":{\"761\":1}}],[\"charsequence\",{\"1\":{\"828\":1}}],[\"charset=utf\",{\"1\":{\"1398\":1}}],[\"charset=utf8mb4\",{\"1\":{\"1357\":1,\"1358\":1}}],[\"charset\",{\"1\":{\"315\":1,\"320\":2,\"574\":1,\"674\":1,\"774\":2,\"789\":1,\"797\":2,\"828\":2}}],[\"charsets\",{\"1\":{\"79\":1}}],[\"charstreams\",{\"1\":{\"82\":1}}],[\"chars\",{\"1\":{\"80\":1,\"215\":1}}],[\"char\",{\"1\":{\"80\":2,\"112\":1,\"287\":3,\"318\":1,\"598\":2,\"663\":1,\"767\":1,\"773\":6,\"828\":1,\"842\":1,\"843\":1,\"990\":2,\"1140\":2,\"1148\":1,\"1357\":1,\"1358\":2,\"1361\":1,\"1536\":1,\"1712\":1}}],[\"charmatcher\",{\"1\":{\"79\":2}}],[\"charmatchers\",{\"1\":{\"79\":1}}],[\"cname\",{\"1\":{\"1228\":1,\"1792\":2}}],[\"cnf文件\",{\"1\":{\"671\":1}}],[\"cnf\",{\"1\":{\"569\":1,\"1150\":1,\"1155\":1}}],[\"cnt++\",{\"1\":{\"1654\":4}}],[\"cnt\",{\"1\":{\"1226\":1,\"1567\":1,\"1654\":1}}],[\"cnt2\",{\"1\":{\"66\":1}}],[\"cnt1\",{\"1\":{\"66\":1}}],[\"cnblogs\",{\"1\":{\"53\":1,\"565\":1,\"1083\":1,\"1121\":2,\"1304\":1}}],[\"cn\",{\"1\":{\"47\":1,\"546\":1,\"565\":1,\"846\":1,\"1117\":1,\"1121\":1,\"1144\":1,\"1661\":1,\"1663\":1,\"1666\":1,\"1793\":1}}],[\"crs\",{\"1\":{\"1723\":1}}],[\"credentials\",{\"1\":{\"1871\":1}}],[\"credential\",{\"1\":{\"1347\":1}}],[\"creatingparentsifneeded\",{\"1\":{\"1181\":1}}],[\"creating\",{\"1\":{\"1049\":1}}],[\"creator\",{\"1\":{\"754\":2,\"1557\":2}}],[\"createanswer\",{\"1\":{\"1861\":1}}],[\"createofffer\",{\"1\":{\"1861\":1}}],[\"createmode\",{\"1\":{\"1181\":1}}],[\"createnode\",{\"1\":{\"1181\":1}}],[\"createnewfile\",{\"1\":{\"314\":1}}],[\"createinheritedmap\",{\"1\":{\"1088\":1}}],[\"createindexrequest\",{\"1\":{\"42\":2}}],[\"createbean\",{\"1\":{\"1012\":1,\"1023\":1,\"1025\":1}}],[\"createbinding\",{\"1\":{\"418\":1}}],[\"createproducerequests\",{\"1\":{\"450\":1}}],[\"createqueue\",{\"1\":{\"418\":1}}],[\"createdirectories\",{\"1\":{\"779\":1}}],[\"createdirectory\",{\"1\":{\"779\":1}}],[\"createdms\",{\"1\":{\"450\":1}}],[\"created\",{\"1\":{\"418\":3}}],[\"createexchange\",{\"1\":{\"418\":1}}],[\"createtransactionifnecessary\",{\"1\":{\"1059\":1}}],[\"createtransactionmanager\",{\"1\":{\"1054\":2}}],[\"createtime\",{\"1\":{\"124\":2}}],[\"createthreadfactory\",{\"1\":{\"93\":1}}],[\"create\",{\"1\":{\"34\":1,\"40\":1,\"42\":1,\"66\":1,\"68\":1,\"69\":1,\"70\":2,\"83\":1,\"105\":1,\"107\":1,\"112\":1,\"113\":4,\"114\":1,\"115\":1,\"118\":1,\"119\":1,\"124\":3,\"126\":1,\"195\":2,\"446\":1,\"522\":2,\"574\":1,\"575\":2,\"590\":4,\"591\":1,\"598\":1,\"599\":1,\"622\":4,\"623\":3,\"628\":2,\"631\":2,\"634\":2,\"635\":1,\"636\":1,\"639\":3,\"674\":1,\"675\":2,\"677\":2,\"701\":5,\"707\":1,\"1009\":2,\"1016\":2,\"1136\":1,\"1151\":1,\"1154\":1,\"1168\":1,\"1169\":6,\"1173\":1,\"1177\":1,\"1181\":5,\"1191\":1,\"1226\":2,\"1227\":3,\"1228\":2,\"1264\":1,\"1347\":2,\"1357\":1,\"1358\":1,\"1487\":2,\"1567\":1,\"1858\":1,\"1870\":1}}],[\"crane\",{\"1\":{\"1245\":1}}],[\"crashes\",{\"1\":{\"494\":1}}],[\"crc16\",{\"1\":{\"947\":1}}],[\"crc32校验值\",{\"1\":{\"474\":1}}],[\"crc32\",{\"1\":{\"474\":1}}],[\"crc32等等\",{\"1\":{\"83\":1}}],[\"cross\",{\"1\":{\"531\":1}}],[\"crud\",{\"0\":{\"530\":1},\"1\":{\"33\":1,\"509\":1,\"553\":1,\"1099\":1,\"1487\":1}}],[\"csv\",{\"1\":{\"1540\":1}}],[\"cscan\",{\"1\":{\"1472\":2}}],[\"css\",{\"1\":{\"1400\":2}}],[\"csrf\",{\"1\":{\"26\":1,\"1642\":1}}],[\"csdn博客\",{\"1\":{\"1873\":1}}],[\"csdn\",{\"1\":{\"10\":2,\"1069\":1,\"1156\":2}}],[\"c\",{\"1\":{\"9\":9,\"61\":1,\"64\":2,\"69\":2,\"105\":2,\"113\":3,\"119\":3,\"122\":1,\"126\":2,\"143\":2,\"391\":1,\"434\":1,\"435\":1,\"515\":3,\"772\":2,\"773\":3,\"779\":1,\"831\":1,\"842\":3,\"843\":3,\"908\":2,\"909\":1,\"960\":1,\"983\":1,\"990\":2,\"1000\":4,\"1108\":1,\"1112\":4,\"1113\":4,\"1114\":10,\"1115\":5,\"1116\":6,\"1119\":2,\"1139\":2,\"1168\":1,\"1169\":1,\"1173\":1,\"1228\":1,\"1278\":3,\"1302\":1,\"1322\":1,\"1330\":1,\"1347\":2,\"1445\":1,\"1472\":1,\"1618\":4,\"1631\":2,\"1685\":1,\"1688\":3,\"1698\":2,\"1712\":3,\"1735\":3,\"1736\":1,\"1740\":1,\"1799\":1,\"1862\":1,\"1868\":6}}],[\"cyclicbarrier\",{\"0\":{\"161\":1},\"1\":{\"8\":1,\"161\":6,\"1516\":1}}],[\"ca1515\",{\"1\":{\"1722\":1}}],[\"ca\",{\"1\":{\"1401\":1,\"1403\":5}}],[\"cart\",{\"1\":{\"1368\":1}}],[\"cac0cab\",{\"1\":{\"1351\":1}}],[\"caching\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"cachingexecutor\",{\"1\":{\"542\":2}}],[\"cachingconnectionfactory\",{\"1\":{\"416\":1}}],[\"cacheinfo\",{\"1\":{\"1350\":1}}],[\"cacheput\",{\"1\":{\"1269\":2,\"1613\":2}}],[\"cacheevict\",{\"1\":{\"1269\":2,\"1368\":1,\"1613\":2}}],[\"cacheenabled\",{\"1\":{\"542\":1}}],[\"cachenames\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"cacheable\",{\"1\":{\"1269\":5,\"1368\":1,\"1613\":5}}],[\"cacheautoconfiguration\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"cacheconfig\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"cacheconfigurationimportselector\",{\"1\":{\"1269\":2,\"1613\":2}}],[\"cachemanager\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"caches\",{\"1\":{\"1097\":1}}],[\"cachedthreadpool\",{\"1\":{\"1110\":2}}],[\"cached两个缓存链表\",{\"1\":{\"751\":1}}],[\"cached\",{\"1\":{\"749\":1,\"1317\":1,\"1319\":1}}],[\"cacheloader<string\",{\"1\":{\"73\":1}}],[\"cachebuilder\",{\"1\":{\"73\":2}}],[\"cache\",{\"0\":{\"533\":1,\"1269\":1,\"1435\":1,\"1479\":1,\"1613\":1},\"1\":{\"14\":2,\"72\":1,\"73\":1,\"512\":2,\"529\":2,\"533\":3,\"545\":1,\"1002\":7,\"1250\":1,\"1253\":3,\"1269\":7,\"1347\":1,\"1368\":1,\"1399\":1,\"1412\":1,\"1434\":1,\"1435\":23,\"1446\":1,\"1448\":1,\"1479\":8,\"1556\":1,\"1613\":6,\"1651\":5,\"1791\":1}}],[\"caffeinecache\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"caffeine\",{\"1\":{\"1253\":1}}],[\"catholicism\",{\"0\":{\"1761\":1}}],[\"catiteminfo>>\",{\"1\":{\"1368\":1}}],[\"cat\",{\"1\":{\"1218\":1,\"1350\":1,\"1437\":1}}],[\"catch块用于捕获和处理异常\",{\"1\":{\"241\":1}}],[\"catch\",{\"1\":{\"6\":1,\"8\":2,\"14\":3,\"93\":1,\"161\":1,\"183\":1,\"188\":1,\"196\":3,\"346\":2,\"461\":1,\"507\":1,\"767\":1,\"788\":1,\"791\":2,\"792\":2,\"796\":1,\"797\":2,\"822\":1,\"864\":1,\"865\":1,\"870\":1,\"871\":1,\"873\":1,\"1008\":1,\"1009\":1,\"1015\":4,\"1038\":1,\"1049\":1,\"1055\":2,\"1059\":1,\"1061\":1,\"1090\":1,\"1096\":2,\"1115\":2,\"1135\":1,\"1136\":1,\"1263\":1,\"1533\":4,\"1713\":2,\"1853\":1,\"1854\":1,\"1858\":1}}],[\"captor和\",{\"1\":{\"1709\":1}}],[\"cap定理\",{\"1\":{\"1278\":1}}],[\"cap\",{\"0\":{\"1206\":1,\"1278\":1,\"1618\":1},\"1\":{\"1136\":5,\"1207\":2,\"1279\":2,\"1618\":3}}],[\"capacity可以利用位运算\",{\"1\":{\"1494\":1}}],[\"capacity\",{\"1\":{\"768\":1,\"788\":1,\"827\":5,\"828\":1,\"1002\":6,\"1493\":1,\"1651\":5}}],[\"cause\",{\"1\":{\"417\":2,\"420\":4,\"822\":1,\"873\":1}}],[\"calculatestrategy\",{\"1\":{\"872\":1}}],[\"calendar\",{\"1\":{\"353\":2}}],[\"caller\",{\"1\":{\"1135\":2}}],[\"callersensitive\",{\"1\":{\"1135\":1}}],[\"callersrunspolicy\",{\"1\":{\"1109\":1,\"1511\":1}}],[\"callerrunspolicy\",{\"1\":{\"332\":1}}],[\"called\",{\"1\":{\"1002\":1}}],[\"calls执行次数\",{\"1\":{\"927\":1}}],[\"callbackpreferringplatformtransactionmanager\",{\"1\":{\"1055\":2,\"1059\":2}}],[\"callbacks\",{\"1\":{\"1016\":3}}],[\"callback\",{\"1\":{\"282\":1,\"456\":1,\"1016\":1}}],[\"call\",{\"1\":{\"77\":1,\"628\":1,\"631\":2,\"822\":2,\"1050\":1,\"1051\":1,\"1263\":2,\"1508\":1,\"1623\":1}}],[\"callable可以返回结果\",{\"1\":{\"1511\":1}}],[\"callable可以获取到返回值\",{\"1\":{\"1508\":1}}],[\"callable任务通过submit\",{\"1\":{\"1106\":1}}],[\"callable<t>>\",{\"1\":{\"1113\":4}}],[\"callable<t>\",{\"1\":{\"1113\":2}}],[\"callable<integer>\",{\"1\":{\"822\":2}}],[\"callable<string>\",{\"1\":{\"77\":1}}],[\"callablestatementhandler\",{\"1\":{\"544\":1}}],[\"callable\",{\"1\":{\"73\":2,\"332\":1,\"530\":1,\"1113\":1,\"1508\":1,\"1511\":2}}],[\"camel\",{\"1\":{\"79\":4}}],[\"cas+失败重试\",{\"1\":{\"1521\":1}}],[\"cas已打开\",{\"1\":{\"960\":1}}],[\"cas标识\",{\"1\":{\"960\":1}}],[\"cassandra\",{\"1\":{\"808\":1}}],[\"case\",{\"0\":{\"632\":1},\"1\":{\"532\":1,\"596\":4,\"632\":5,\"872\":3,\"1000\":1,\"1058\":2,\"1148\":1,\"1567\":2}}],[\"caseformat\",{\"1\":{\"79\":3}}],[\"cas就是一种典型的基于乐观锁的同步机制\",{\"1\":{\"148\":1}}],[\"cas\",{\"0\":{\"148\":1,\"1137\":1,\"1513\":1},\"1\":{\"148\":3,\"149\":2,\"150\":1,\"158\":1,\"162\":1,\"214\":1,\"1076\":4,\"1077\":3,\"1114\":1,\"1116\":1,\"1137\":2,\"1175\":1,\"1176\":1,\"1468\":1,\"1497\":2,\"1499\":2,\"1500\":1,\"1510\":1,\"1513\":4,\"1515\":1}}],[\"cast\",{\"1\":{\"129\":1}}],[\"castail\",{\"1\":{\"6\":1,\"8\":1}}],[\"cascaded\",{\"1\":{\"622\":3,\"623\":3}}],[\"cascade\",{\"1\":{\"108\":2,\"599\":1,\"623\":1,\"1226\":1}}],[\"canon\",{\"1\":{\"1799\":1}}],[\"canonical\",{\"1\":{\"1792\":1}}],[\"candidate等等\",{\"1\":{\"1860\":1}}],[\"candidates\",{\"1\":{\"1674\":3,\"1676\":3}}],[\"candidate\",{\"1\":{\"1281\":4,\"1620\":4,\"1860\":1}}],[\"canal\",{\"1\":{\"1266\":1,\"1269\":1,\"1584\":1,\"1613\":1}}],[\"cannot\",{\"1\":{\"1008\":1,\"1088\":1}}],[\"canreacquire\",{\"1\":{\"8\":1}}],[\"cancel\",{\"1\":{\"786\":1,\"788\":2,\"822\":1,\"1284\":3}}],[\"cancelacquire\",{\"1\":{\"6\":2}}],[\"cancelledkeyexception\",{\"1\":{\"865\":1}}],[\"cancelledkeys\",{\"1\":{\"786\":1}}],[\"cancelled\",{\"1\":{\"3\":1,\"8\":3}}],[\"coe\",{\"1\":{\"1786\":1}}],[\"coins\",{\"1\":{\"1655\":1}}],[\"cost\",{\"1\":{\"729\":5}}],[\"cost两张表中\",{\"1\":{\"716\":1}}],[\"cost和server\",{\"1\":{\"716\":1}}],[\"coding\",{\"1\":{\"525\":1}}],[\"code`\",{\"1\":{\"1357\":3,\"1358\":3}}],[\"codecs=vp9\",{\"1\":{\"1858\":1}}],[\"codec\",{\"1\":{\"95\":1}}],[\"codec|compress|\",{\"1\":{\"95\":1}}],[\"code\",{\"0\":{\"1243\":1},\"1\":{\"14\":13,\"15\":9,\"95\":2,\"239\":1,\"240\":1,\"729\":1,\"1050\":2,\"1055\":1,\"1073\":5}}],[\"cors\",{\"1\":{\"1871\":1}}],[\"coroutinesinvocationcallback\",{\"1\":{\"1059\":1}}],[\"correlationdata\",{\"1\":{\"417\":2,\"418\":2,\"420\":3}}],[\"core<\",{\"1\":{\"1707\":1}}],[\"core\",{\"1\":{\"355\":1,\"376\":1,\"382\":1,\"856\":1,\"1114\":2,\"1217\":1}}],[\"corepoolsize\",{\"1\":{\"332\":2,\"334\":1,\"1106\":2,\"1113\":4,\"1114\":1,\"1115\":1,\"1120\":10,\"1511\":1}}],[\"coc\",{\"1\":{\"383\":1}}],[\"course2\",{\"1\":{\"126\":1}}],[\"course\",{\"1\":{\"113\":1,\"119\":1,\"126\":13}}],[\"counting\",{\"1\":{\"1068\":1}}],[\"count的用法\",{\"1\":{\"619\":1}}],[\"counter\",{\"1\":{\"202\":1,\"366\":6,\"1637\":1}}],[\"countedcompleter\",{\"1\":{\"153\":1}}],[\"countdown\",{\"1\":{\"160\":1}}],[\"countdownlatch\",{\"0\":{\"160\":1},\"1\":{\"2\":1,\"9\":1,\"160\":4,\"1516\":1}}],[\"count\",{\"0\":{\"619\":1,\"1568\":1},\"1\":{\"9\":3,\"66\":1,\"124\":2,\"126\":1,\"128\":1,\"129\":1,\"230\":2,\"240\":10,\"312\":1,\"584\":3,\"585\":5,\"619\":15,\"624\":1,\"675\":2,\"707\":4,\"785\":3,\"789\":2,\"827\":1,\"1068\":2,\"1112\":9,\"1114\":1,\"1148\":3,\"1226\":1,\"1464\":1,\"1567\":2,\"1568\":5,\"1663\":2,\"1664\":3}}],[\"colname\",{\"1\":{\"1226\":1}}],[\"col\",{\"1\":{\"105\":1,\"113\":11,\"119\":2,\"120\":1,\"675\":1,\"701\":1,\"1226\":6}}],[\"col2\",{\"1\":{\"69\":2,\"112\":1,\"1567\":1}}],[\"col1\",{\"1\":{\"69\":2,\"112\":1,\"1567\":1}}],[\"columnn\",{\"1\":{\"707\":1}}],[\"columnb\",{\"1\":{\"585\":1}}],[\"columna\",{\"1\":{\"585\":1}}],[\"column=\",{\"1\":{\"532\":3}}],[\"columns\",{\"1\":{\"130\":1,\"515\":1,\"695\":1}}],[\"columnkeyset\",{\"1\":{\"69\":1}}],[\"columnedkeyset\",{\"1\":{\"69\":1}}],[\"columnmap\",{\"1\":{\"69\":2}}],[\"column\",{\"1\":{\"69\":1,\"130\":5,\"530\":3,\"674\":1,\"1608\":1}}],[\"collation\",{\"1\":{\"674\":3}}],[\"collate\",{\"1\":{\"574\":1,\"674\":2}}],[\"collabpage\",{\"1\":{\"39\":1}}],[\"collect\",{\"1\":{\"312\":1,\"1068\":9}}],[\"collectors\",{\"1\":{\"312\":2,\"1068\":8}}],[\"collector包括collectors\",{\"1\":{\"312\":1}}],[\"collector\",{\"1\":{\"179\":1,\"1068\":1}}],[\"collectionutils\",{\"1\":{\"1244\":1}}],[\"collection<\",{\"1\":{\"1113\":4}}],[\"collection<integer>>\",{\"1\":{\"67\":1}}],[\"collection=\",{\"1\":{\"538\":1}}],[\"collection\",{\"0\":{\"304\":1},\"1\":{\"71\":1,\"263\":1,\"532\":1,\"538\":1,\"1227\":3,\"1712\":1}}],[\"collections2\",{\"1\":{\"71\":1}}],[\"collections提供了很多实用的功能\",{\"1\":{\"71\":1}}],[\"collections\",{\"1\":{\"64\":2,\"162\":9,\"304\":1}}],[\"copymemory\",{\"1\":{\"1136\":2}}],[\"copydirectorytodirectory\",{\"1\":{\"323\":1}}],[\"copyfiletodirectory\",{\"1\":{\"323\":1}}],[\"copyonwritearraylist\",{\"0\":{\"1498\":1},\"1\":{\"1498\":1}}],[\"copyonwrite\",{\"1\":{\"162\":1}}],[\"copyof\",{\"1\":{\"64\":2}}],[\"copy\",{\"1\":{\"64\":1,\"146\":2,\"162\":1,\"169\":1,\"323\":1,\"431\":1,\"779\":1,\"832\":1,\"1486\":1,\"1523\":1,\"1631\":1}}],[\"coordinator节点号\",{\"1\":{\"483\":1}}],[\"coordinator\",{\"1\":{\"483\":8,\"485\":2,\"1280\":1,\"1287\":1,\"1619\":1}}],[\"coordinating节点\",{\"1\":{\"33\":1}}],[\"cooperativestickey\",{\"1\":{\"497\":1}}],[\"cooperativesticky\",{\"1\":{\"494\":2}}],[\"cooperative\",{\"1\":{\"282\":1}}],[\"cookie尽量加密放到服务端解密\",{\"1\":{\"1642\":1}}],[\"cookieserializer\",{\"1\":{\"24\":6,\"25\":1}}],[\"cookie\",{\"1\":{\"17\":4,\"20\":3,\"27\":4,\"1642\":6,\"1643\":4}}],[\"combinationsum\",{\"1\":{\"1676\":1}}],[\"combinationsum2\",{\"1\":{\"1674\":1}}],[\"commmit\",{\"1\":{\"1350\":1}}],[\"command\",{\"1\":{\"675\":1,\"1110\":3,\"1113\":8}}],[\"commit参数控制刷盘策略\",{\"1\":{\"1555\":1}}],[\"commits\",{\"1\":{\"1347\":2}}],[\"commitsync\",{\"1\":{\"492\":1}}],[\"commit整个提交过程完成后运行\",{\"1\":{\"1345\":1}}],[\"commit键入提交信息前运行\",{\"1\":{\"1345\":1}}],[\"commit>\",{\"1\":{\"1344\":2}}],[\"commited\",{\"1\":{\"1035\":1,\"1275\":1,\"1310\":1,\"1552\":1,\"1557\":1,\"1612\":1}}],[\"commit变量控制事务提交时的redo日志行为\",{\"1\":{\"739\":1}}],[\"committed事务每次select查询前都会生成独立的readview\",{\"1\":{\"754\":1}}],[\"committed无法禁止不可重复读问题\",{\"1\":{\"754\":1}}],[\"committed和repeatable\",{\"1\":{\"754\":2}}],[\"committed\",{\"1\":{\"555\":1,\"737\":1,\"1035\":1,\"1281\":1,\"1620\":1,\"1633\":1}}],[\"committransactionafterreturning\",{\"1\":{\"1059\":1}}],[\"committransaction\",{\"1\":{\"461\":1}}],[\"commitasync\",{\"1\":{\"492\":1}}],[\"commit\",{\"0\":{\"1318\":1},\"1\":{\"461\":1,\"485\":2,\"491\":2,\"511\":2,\"523\":1,\"638\":1,\"734\":2,\"1033\":1,\"1038\":1,\"1047\":1,\"1049\":1,\"1050\":4,\"1051\":1,\"1055\":1,\"1059\":1,\"1283\":1,\"1318\":1,\"1323\":2,\"1344\":1,\"1345\":2,\"1350\":3,\"1383\":1,\"1556\":3,\"1561\":1,\"1633\":1,\"1634\":1}}],[\"comment=\",{\"1\":{\"622\":1}}],[\"comments\",{\"1\":{\"305\":1}}],[\"comment\",{\"1\":{\"107\":4,\"113\":8,\"117\":2,\"118\":1,\"124\":17,\"130\":2,\"575\":5,\"576\":4,\"598\":5}}],[\"commons\",{\"1\":{\"323\":1,\"376\":2}}],[\"commonpool\",{\"1\":{\"163\":1,\"1369\":1}}],[\"common\",{\"1\":{\"14\":2,\"75\":1,\"89\":1,\"456\":2,\"457\":2,\"489\":1,\"1228\":1}}],[\"compile\",{\"1\":{\"1067\":1,\"1632\":1}}],[\"compiler对热点代码进行编译优化\",{\"1\":{\"242\":1}}],[\"compiler的优点是执行速度快\",{\"1\":{\"242\":1}}],[\"compiler会根据程序的运行情况进行动态优化\",{\"1\":{\"242\":1}}],[\"compiler\",{\"1\":{\"242\":3,\"270\":1}}],[\"compoent\",{\"1\":{\"1608\":1}}],[\"compositebuffer\",{\"1\":{\"833\":1}}],[\"compositebytebuf\",{\"1\":{\"833\":2,\"834\":1}}],[\"componentscan三个注解的集合\",{\"1\":{\"1608\":1}}],[\"componentscan\",{\"1\":{\"1026\":1,\"1598\":1}}],[\"component中\",{\"1\":{\"418\":1}}],[\"component\",{\"1\":{\"91\":1,\"99\":1,\"833\":2,\"1024\":2,\"1180\":1,\"1594\":1}}],[\"comp\",{\"1\":{\"739\":1}}],[\"complie\",{\"1\":{\"354\":1}}],[\"complete\",{\"1\":{\"1752\":1}}],[\"completetransactionafterthrowing\",{\"1\":{\"1059\":1}}],[\"completedabruptly\",{\"1\":{\"1115\":3}}],[\"completedtasks++\",{\"1\":{\"1115\":1}}],[\"completedtasks\",{\"1\":{\"1114\":1}}],[\"completedfetches\",{\"1\":{\"484\":1}}],[\"completed\",{\"1\":{\"77\":1,\"796\":1,\"797\":3,\"1050\":1,\"1051\":1}}],[\"completionhandler<asynchronoussocketchannel\",{\"1\":{\"797\":1}}],[\"completionhandler<integer\",{\"1\":{\"796\":1,\"797\":2}}],[\"completionstage<void>\",{\"1\":{\"163\":6}}],[\"completionstage<u>\",{\"1\":{\"163\":3}}],[\"completionstage\",{\"1\":{\"163\":1}}],[\"completablefuture<skuinfoentity>\",{\"1\":{\"1369\":1}}],[\"completablefuture<t>\",{\"1\":{\"163\":4}}],[\"completablefuture<u>\",{\"1\":{\"163\":5}}],[\"completablefuture<void>\",{\"1\":{\"163\":2,\"1363\":1,\"1369\":2}}],[\"completablefuture\",{\"1\":{\"163\":1,\"1363\":3,\"1369\":7}}],[\"company\",{\"1\":{\"515\":3}}],[\"compact行格式\",{\"1\":{\"684\":1}}],[\"compactfields\",{\"1\":{\"215\":1}}],[\"compact\",{\"0\":{\"684\":1},\"1\":{\"170\":1,\"477\":1,\"490\":1,\"683\":1,\"767\":1,\"768\":1,\"788\":1,\"1523\":1}}],[\"comparator\",{\"1\":{\"1068\":1}}],[\"compareandswaplong\",{\"1\":{\"1137\":2}}],[\"compareandswapint\",{\"1\":{\"1137\":1}}],[\"compareandsetlong\",{\"1\":{\"1137\":2}}],[\"compareandsetint\",{\"1\":{\"1137\":1}}],[\"compareandset\",{\"1\":{\"1116\":1}}],[\"compareandsetstate\",{\"1\":{\"9\":5}}],[\"compareanddecrementworkercount\",{\"1\":{\"1115\":1}}],[\"compareandincrementworkercount\",{\"1\":{\"1114\":1}}],[\"compare\",{\"1\":{\"60\":3,\"214\":1,\"1068\":2}}],[\"comparisonchain\",{\"1\":{\"60\":1}}],[\"computer\",{\"1\":{\"1723\":1}}],[\"compute\",{\"1\":{\"153\":2,\"453\":1}}],[\"compressed\",{\"0\":{\"687\":1},\"1\":{\"683\":1}}],[\"compression\",{\"1\":{\"459\":2}}],[\"compress\",{\"1\":{\"91\":1,\"95\":1}}],[\"com\",{\"1\":{\"10\":2,\"14\":6,\"15\":5,\"24\":1,\"39\":1,\"53\":1,\"75\":1,\"85\":1,\"283\":4,\"357\":1,\"391\":1,\"392\":1,\"453\":1,\"506\":5,\"507\":1,\"521\":2,\"528\":1,\"532\":1,\"541\":1,\"546\":3,\"565\":1,\"612\":1,\"666\":5,\"667\":3,\"788\":1,\"846\":1,\"852\":1,\"1004\":2,\"1016\":2,\"1083\":2,\"1121\":2,\"1144\":1,\"1156\":1,\"1246\":1,\"1304\":6,\"1314\":3,\"1326\":2,\"1330\":1,\"1336\":2,\"1347\":1,\"1351\":1,\"1791\":2,\"1792\":12,\"1793\":2,\"1870\":1,\"1877\":4}}],[\"con\",{\"1\":{\"1008\":4}}],[\"convert\",{\"1\":{\"1120\":1}}],[\"convertandsend\",{\"1\":{\"418\":1}}],[\"convention\",{\"1\":{\"383\":1}}],[\"connectivity\",{\"1\":{\"1860\":1}}],[\"connections\",{\"1\":{\"1194\":1}}],[\"connectiontimeoutms\",{\"1\":{\"1180\":1}}],[\"connectiontimeoutms=5000\",{\"1\":{\"1180\":1}}],[\"connection字符集\",{\"1\":{\"674\":1}}],[\"connection\",{\"1\":{\"462\":1,\"1045\":3,\"1383\":1,\"1398\":1,\"1859\":1}}],[\"connection<=5\",{\"1\":{\"462\":1}}],[\"connection=1\",{\"1\":{\"462\":2}}],[\"connectionfactory\",{\"1\":{\"417\":3}}],[\"connectstring\",{\"1\":{\"1180\":1}}],[\"connectstring=localhost\",{\"1\":{\"1180\":1}}],[\"connect\",{\"0\":{\"855\":1},\"1\":{\"782\":1,\"785\":1,\"812\":1,\"813\":1,\"820\":2,\"855\":1,\"873\":2}}],[\"connector\",{\"1\":{\"433\":3,\"1190\":2}}],[\"connected\",{\"1\":{\"70\":1,\"791\":1}}],[\"concat\",{\"1\":{\"312\":1,\"593\":2,\"1567\":3}}],[\"concurrency\",{\"1\":{\"752\":1,\"1119\":1}}],[\"concurrencylevel\",{\"1\":{\"73\":1}}],[\"concurrentskiplistmap\",{\"0\":{\"1500\":1}}],[\"concurrenthashmap\",{\"0\":{\"1497\":1},\"1\":{\"1495\":1,\"1497\":1}}],[\"concurrenthashmap<>\",{\"1\":{\"1028\":1,\"1382\":1,\"1599\":1}}],[\"concurrentmapcache\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"concurrentmapcachemanager\",{\"1\":{\"1269\":2,\"1613\":2}}],[\"concurrentmap实现\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"concurrentmap<\",{\"1\":{\"1097\":1}}],[\"concurrentmap<k\",{\"1\":{\"73\":1}}],[\"concurrentmap<string\",{\"1\":{\"73\":1}}],[\"concurrentlinkedqueue\",{\"1\":{\"1499\":1}}],[\"concurrentlinkedqueue<>\",{\"1\":{\"791\":1}}],[\"concurrentlinkedqueue<runnable>\",{\"1\":{\"791\":1}}],[\"concurrentlinkeddeque\",{\"1\":{\"988\":1}}],[\"concurrent\",{\"1\":{\"162\":1,\"176\":1,\"871\":1,\"1113\":3,\"1115\":2,\"1525\":1}}],[\"contact\",{\"1\":{\"1336\":2}}],[\"container\",{\"1\":{\"1128\":1,\"1169\":2,\"1173\":1,\"1634\":1}}],[\"contains\",{\"1\":{\"129\":1,\"985\":1,\"1781\":1}}],[\"contains判断是否包含指定数据\",{\"1\":{\"122\":2}}],[\"contextconfiguration注解\",{\"1\":{\"1718\":1}}],[\"contextclassloader\",{\"1\":{\"1087\":1,\"1088\":3}}],[\"context\",{\"1\":{\"507\":2,\"826\":1,\"1607\":1}}],[\"content三部分组成\",{\"1\":{\"892\":1}}],[\"contents\",{\"1\":{\"888\":1}}],[\"content\",{\"1\":{\"418\":4,\"844\":2,\"846\":2,\"892\":1,\"1398\":5,\"1567\":2}}],[\"controls><\",{\"1\":{\"1870\":1}}],[\"controlleradvice\",{\"1\":{\"1608\":1}}],[\"controller层\",{\"1\":{\"1604\":1}}],[\"controller\",{\"1\":{\"448\":6,\"465\":2,\"466\":4,\"470\":4,\"471\":1,\"1245\":1,\"1594\":1,\"1604\":1,\"1608\":2}}],[\"control是一个基于插件的可扩展应用程序\",{\"1\":{\"238\":1}}],[\"control可以监视java应用程序中的线程状态\",{\"1\":{\"238\":1}}],[\"control可以捕获并分析java应用程序中的各种事件\",{\"1\":{\"238\":1}}],[\"control集成了堆转储分析工具\",{\"1\":{\"238\":1}}],[\"control支持飞行记录\",{\"1\":{\"238\":1}}],[\"control提供了实时的性能监控功能\",{\"1\":{\"238\":1}}],[\"control的一些主要功能和特点\",{\"1\":{\"238\":1}}],[\"control\",{\"0\":{\"238\":1},\"1\":{\"238\":1,\"572\":1,\"752\":1,\"1168\":1,\"1250\":1,\"1399\":1,\"1642\":1,\"1723\":2,\"1871\":7}}],[\"continuereading\",{\"1\":{\"873\":2}}],[\"continue\",{\"1\":{\"6\":2,\"196\":2,\"634\":1,\"872\":2,\"1114\":1,\"1115\":1,\"1672\":1,\"1673\":1,\"1674\":1,\"1675\":3}}],[\"conf文件中的server段\",{\"1\":{\"1871\":1}}],[\"conf\",{\"1\":{\"1150\":1,\"1155\":1,\"1164\":1,\"1366\":3}}],[\"conf命令启动sentinel\",{\"1\":{\"939\":1}}],[\"confirms=true\",{\"1\":{\"420\":1}}],[\"confirmcallback\",{\"0\":{\"420\":1},\"1\":{\"420\":4,\"1374\":1}}],[\"confirm\",{\"1\":{\"417\":1,\"420\":1,\"1284\":3,\"1629\":1}}],[\"configs\",{\"1\":{\"1861\":1}}],[\"config中会自动添加一个小节\",{\"1\":{\"1351\":1}}],[\"configlocations\",{\"1\":{\"1012\":1}}],[\"configepoch\",{\"1\":{\"945\":1}}],[\"configured\",{\"1\":{\"1326\":2}}],[\"configureblocking\",{\"1\":{\"783\":2,\"785\":1,\"786\":1,\"788\":1,\"789\":1,\"791\":2,\"863\":1}}],[\"configurableenvironment\",{\"1\":{\"1607\":1}}],[\"configurableapplicationcontext\",{\"1\":{\"507\":1,\"1607\":1}}],[\"configurationproperties\",{\"1\":{\"1180\":1,\"1608\":2}}],[\"configuration>\",{\"1\":{\"387\":1,\"506\":1}}],[\"configuration\",{\"0\":{\"387\":1},\"1\":{\"24\":1,\"231\":1,\"383\":1,\"417\":1,\"489\":1,\"506\":1,\"540\":2,\"541\":10,\"542\":5,\"543\":3,\"544\":4,\"1058\":2,\"1059\":1,\"1180\":1,\"1594\":1,\"1608\":1}}],[\"config\",{\"1\":{\"391\":1,\"445\":1,\"453\":1,\"456\":3,\"459\":4,\"460\":2,\"461\":3,\"476\":1,\"488\":4,\"506\":3,\"507\":1,\"518\":1,\"541\":1,\"866\":2,\"1264\":5,\"1311\":5,\"1347\":1,\"1349\":1,\"1363\":1}}],[\"confluence\",{\"1\":{\"117\":1}}],[\"consitency\",{\"1\":{\"1207\":1}}],[\"consistency\",{\"1\":{\"735\":1,\"1032\":1,\"1206\":2,\"1207\":1,\"1278\":1,\"1618\":1}}],[\"consistent\",{\"1\":{\"734\":1,\"1279\":1,\"1618\":1}}],[\"consistenthashloadbalance\",{\"1\":{\"91\":1}}],[\"consume\",{\"1\":{\"489\":1}}],[\"consumerack\",{\"1\":{\"1374\":1}}],[\"consumer会在消费完一条消息后递增该offset\",{\"1\":{\"490\":1}}],[\"consumerlistener\",{\"1\":{\"489\":1}}],[\"consumerrecord<string\",{\"1\":{\"488\":1}}],[\"consumerrecords<string\",{\"1\":{\"488\":1}}],[\"consumerconfig\",{\"1\":{\"488\":4}}],[\"consumernetworkclient\",{\"1\":{\"484\":1}}],[\"consumer工作流程\",{\"1\":{\"483\":1}}],[\"consumergroup\",{\"1\":{\"481\":1}}],[\"consumer组成\",{\"1\":{\"481\":1}}],[\"consumer\",{\"0\":{\"422\":1,\"479\":1},\"1\":{\"406\":2,\"413\":1,\"419\":1,\"422\":1,\"427\":2,\"430\":3,\"433\":1,\"443\":3,\"446\":1,\"480\":2,\"481\":1,\"483\":4,\"484\":1,\"485\":1,\"488\":4,\"489\":2,\"490\":4,\"494\":3,\"496\":1,\"499\":1,\"1068\":1,\"1626\":2,\"1629\":2}}],[\"consumer<\",{\"1\":{\"163\":3,\"184\":1,\"304\":1}}],[\"console>\",{\"1\":{\"388\":1}}],[\"console\",{\"1\":{\"388\":1,\"389\":1,\"446\":2,\"1858\":2}}],[\"consoleappender\",{\"1\":{\"388\":1}}],[\"const\",{\"1\":{\"710\":1,\"728\":1}}],[\"constraints\",{\"1\":{\"1854\":2,\"1858\":1}}],[\"constraint\",{\"1\":{\"599\":4}}],[\"constructorargs\",{\"1\":{\"522\":1}}],[\"constructorargtypes\",{\"1\":{\"522\":1}}],[\"constructor均已实现\",{\"1\":{\"348\":1}}],[\"constructor\",{\"1\":{\"309\":2,\"348\":1,\"532\":1,\"1009\":2}}],[\"constantvalue\",{\"1\":{\"240\":1}}],[\"constant\",{\"1\":{\"79\":1,\"211\":1,\"240\":4}}],[\"conditional\",{\"1\":{\"1598\":1}}],[\"conditionalonmissingbean\",{\"1\":{\"1054\":2}}],[\"condition2\",{\"1\":{\"632\":1}}],[\"condition1\",{\"1\":{\"632\":1}}],[\"conditionobject\",{\"1\":{\"3\":1,\"8\":2,\"156\":1}}],[\"condition\",{\"1\":{\"3\":4,\"8\":1,\"134\":1,\"156\":1,\"161\":1,\"362\":1,\"634\":3,\"706\":1,\"1226\":2,\"1269\":1,\"1463\":1,\"1511\":1,\"1613\":1}}],[\"conditionnode\",{\"1\":{\"3\":3,\"6\":1,\"8\":5}}],[\"cond\",{\"1\":{\"3\":1,\"8\":5,\"156\":5,\"366\":3}}],[\"clxering\",{\"1\":{\"1246\":1}}],[\"cli\",{\"1\":{\"1224\":1}}],[\"clientport=2181\",{\"1\":{\"1164\":1,\"1196\":1}}],[\"clientproxy\",{\"1\":{\"91\":1,\"99\":1}}],[\"client属性中\",{\"1\":{\"924\":1}}],[\"clients\",{\"1\":{\"807\":1,\"929\":1}}],[\"clients<\",{\"1\":{\"455\":1,\"487\":1}}],[\"client字符集\",{\"1\":{\"674\":1}}],[\"client组用于所有客户端程序\",{\"1\":{\"671\":1}}],[\"clientrequest\",{\"1\":{\"450\":1}}],[\"clienthandler\",{\"1\":{\"101\":1}}],[\"client<\",{\"1\":{\"39\":2}}],[\"client\",{\"0\":{\"100\":1},\"1\":{\"15\":6,\"38\":3,\"39\":1,\"40\":1,\"42\":1,\"43\":1,\"44\":1,\"47\":1,\"48\":1,\"51\":1,\"89\":1,\"91\":1,\"101\":2,\"238\":1,\"373\":1,\"408\":1,\"433\":1,\"450\":3,\"671\":1,\"792\":1,\"813\":3,\"856\":4,\"927\":1,\"1125\":7,\"1188\":3,\"1337\":2,\"1402\":3}}],[\"cls\",{\"1\":{\"1140\":1,\"1690\":1}}],[\"cl\",{\"1\":{\"195\":22,\"1097\":1}}],[\"clazz\",{\"1\":{\"188\":3,\"1009\":4}}],[\"classname\",{\"1\":{\"1855\":1}}],[\"classnotfoundexception\",{\"1\":{\"188\":1,\"1015\":1}}],[\"classifier\",{\"1\":{\"1632\":1}}],[\"classic<\",{\"1\":{\"382\":1}}],[\"classic\",{\"1\":{\"355\":1,\"382\":2}}],[\"classlock\",{\"1\":{\"1073\":1}}],[\"classloaderwrapper\",{\"1\":{\"545\":1}}],[\"classloaderofloggerfactory\",{\"1\":{\"383\":2}}],[\"classloader由c++实现\",{\"1\":{\"254\":1}}],[\"classloader\",{\"1\":{\"254\":7,\"349\":1,\"380\":1,\"383\":1,\"1008\":1,\"1087\":1,\"1135\":2,\"1139\":1,\"1528\":1,\"1531\":1,\"1532\":1}}],[\"classutils\",{\"1\":{\"1058\":1}}],[\"class配置\",{\"1\":{\"1057\":1}}],[\"classfilter\",{\"1\":{\"1018\":1}}],[\"classfile\",{\"1\":{\"240\":1}}],[\"classforname\",{\"1\":{\"541\":1}}],[\"class=\",{\"1\":{\"528\":1}}],[\"class加锁\",{\"1\":{\"331\":1}}],[\"classpathbeandefinitionscanner\",{\"1\":{\"1024\":1}}],[\"classpathresource\",{\"1\":{\"1008\":2}}],[\"classpath\",{\"1\":{\"254\":1,\"506\":1,\"1008\":1,\"1632\":3}}],[\"class对象作为锁对象\",{\"1\":{\"331\":1}}],[\"class对象\",{\"1\":{\"249\":1,\"1527\":2}}],[\"class文件版本号\",{\"1\":{\"1526\":1}}],[\"class文件\",{\"1\":{\"254\":1}}],[\"class文件的编译过程中不包含传统程序语言编译的连接步骤\",{\"1\":{\"243\":1}}],[\"class文件的资源仓库\",{\"1\":{\"240\":1}}],[\"class文件的头4个字节是固定的魔数\",{\"1\":{\"240\":1}}],[\"class文件结构\",{\"1\":{\"240\":1}}],[\"class<t>\",{\"1\":{\"510\":1,\"522\":3,\"543\":3}}],[\"class<\",{\"1\":{\"188\":1,\"349\":1,\"541\":1,\"1010\":1,\"1059\":1,\"1097\":2,\"1135\":1,\"1139\":3,\"1140\":1,\"1141\":2}}],[\"classtoinstancemap\",{\"1\":{\"70\":1}}],[\"class\",{\"0\":{\"1139\":1},\"1\":{\"3\":4,\"9\":3,\"24\":3,\"25\":1,\"48\":1,\"51\":1,\"70\":1,\"71\":1,\"73\":1,\"78\":1,\"84\":1,\"90\":2,\"93\":1,\"98\":2,\"153\":1,\"154\":2,\"184\":3,\"187\":1,\"188\":3,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":3,\"240\":9,\"247\":1,\"255\":1,\"270\":1,\"296\":2,\"297\":1,\"306\":3,\"308\":2,\"309\":2,\"310\":2,\"311\":2,\"348\":3,\"355\":1,\"362\":4,\"383\":2,\"384\":1,\"388\":1,\"391\":4,\"417\":1,\"418\":1,\"453\":2,\"456\":2,\"475\":1,\"488\":4,\"489\":1,\"506\":1,\"507\":4,\"520\":1,\"523\":4,\"541\":3,\"543\":1,\"544\":1,\"791\":2,\"792\":2,\"797\":4,\"811\":2,\"812\":2,\"818\":1,\"820\":1,\"849\":1,\"851\":3,\"863\":1,\"989\":1,\"993\":2,\"1002\":2,\"1009\":3,\"1014\":1,\"1015\":11,\"1016\":6,\"1039\":1,\"1040\":1,\"1045\":1,\"1054\":3,\"1057\":1,\"1058\":5,\"1059\":1,\"1067\":1,\"1073\":1,\"1074\":1,\"1087\":1,\"1097\":2,\"1099\":1,\"1108\":1,\"1114\":1,\"1135\":3,\"1144\":1,\"1180\":2,\"1181\":1,\"1188\":1,\"1263\":1,\"1383\":1,\"1531\":2,\"1532\":2,\"1645\":4,\"1651\":2,\"1652\":1,\"1653\":1,\"1654\":1,\"1662\":1,\"1663\":1,\"1664\":1,\"1665\":1,\"1666\":1,\"1669\":1,\"1708\":2,\"1709\":3,\"1711\":1,\"1712\":1,\"1713\":1,\"1714\":3,\"1715\":3,\"1718\":2}}],[\"cluster实现\",{\"1\":{\"1622\":1}}],[\"clusters\",{\"1\":{\"1214\":1}}],[\"clusterstate保存槽指派信息\",{\"1\":{\"946\":1}}],[\"clusterstate\",{\"1\":{\"945\":2,\"946\":1}}],[\"clustermeet\",{\"1\":{\"945\":1}}],[\"clusterlink\",{\"1\":{\"945\":2}}],[\"clusternode指针数组\",{\"1\":{\"946\":2}}],[\"clusternode保存槽指派信息\",{\"1\":{\"946\":1}}],[\"clusternode\",{\"1\":{\"945\":1,\"946\":2}}],[\"cluster\",{\"1\":{\"119\":1,\"120\":1,\"420\":1,\"450\":4,\"453\":4,\"945\":2,\"946\":1,\"947\":1,\"948\":1,\"1226\":1,\"1228\":1,\"1626\":1}}],[\"clustered\",{\"1\":{\"113\":3,\"119\":2,\"699\":1,\"720\":1,\"1228\":1}}],[\"cloudera\",{\"1\":{\"480\":1}}],[\"cloud\",{\"1\":{\"283\":1,\"546\":2,\"1298\":1,\"1304\":1,\"1621\":1}}],[\"clock\",{\"1\":{\"192\":5,\"1468\":1}}],[\"clo3\",{\"1\":{\"112\":1}}],[\"closechannel\",{\"1\":{\"797\":4}}],[\"close=\",{\"1\":{\"538\":1}}],[\"closeable\",{\"1\":{\"317\":1,\"318\":1,\"346\":1}}],[\"close操作包括flush\",{\"1\":{\"317\":1,\"318\":1}}],[\"close\",{\"1\":{\"317\":1,\"318\":1,\"456\":1,\"461\":1,\"514\":1,\"523\":1,\"634\":3,\"777\":3,\"785\":1,\"797\":1,\"819\":1,\"821\":2,\"1410\":3,\"1420\":3,\"1475\":1}}],[\"closefuture\",{\"0\":{\"821\":1},\"1\":{\"93\":1,\"819\":1,\"821\":5}}],[\"closedbyinterruptexception\",{\"1\":{\"1092\":1}}],[\"closedopen\",{\"1\":{\"70\":2,\"81\":1}}],[\"closed\",{\"1\":{\"70\":3,\"81\":2}}],[\"clone\",{\"0\":{\"1314\":1},\"1\":{\"64\":1,\"1314\":4,\"1326\":1,\"1338\":1,\"1345\":1}}],[\"clearinterruptevent\",{\"1\":{\"1092\":1}}],[\"clearinactivefinalreference\",{\"1\":{\"196\":2}}],[\"clearcache\",{\"1\":{\"512\":1}}],[\"clear0\",{\"1\":{\"189\":4}}],[\"clear\",{\"1\":{\"189\":2,\"196\":3,\"767\":2,\"768\":1,\"782\":1,\"783\":1,\"789\":1,\"797\":1}}],[\"clearall\",{\"1\":{\"93\":1}}],[\"clearstatus\",{\"1\":{\"6\":1,\"8\":1}}],[\"clean链表管理未解压页\",{\"1\":{\"731\":1}}],[\"cleanuptransactioninfo\",{\"1\":{\"1059\":1}}],[\"cleanup\",{\"1\":{\"477\":1}}],[\"cleaner\",{\"0\":{\"195\":1},\"1\":{\"188\":5,\"195\":14,\"196\":1,\"212\":1,\"640\":2,\"1136\":5}}],[\"cleansomeslots\",{\"1\":{\"154\":2,\"1514\":2}}],[\"clean\",{\"1\":{\"8\":1,\"188\":2,\"195\":1,\"638\":1,\"1343\":1,\"1632\":1}}],[\"cleanqueue方法源码分析\",{\"1\":{\"6\":1}}],[\"cleanqueue\",{\"1\":{\"6\":1,\"7\":1}}],[\"clh锁\",{\"1\":{\"10\":1}}],[\"clh\",{\"1\":{\"1\":1,\"2\":1,\"1114\":1,\"1516\":4}}],[\"使多线程安全\",{\"1\":{\"1536\":1}}],[\"使程序恢复运行\",{\"1\":{\"1533\":1}}],[\"使其免受外在环境差异的影响\",{\"1\":{\"1634\":1}}],[\"使其倾向于回收文件页\",{\"1\":{\"1446\":1}}],[\"使其有机会获取锁\",{\"1\":{\"2\":1}}],[\"使之包含在下次提交的快照中\",{\"1\":{\"1310\":1,\"1633\":1}}],[\"使之更易用\",{\"1\":{\"809\":1}}],[\"使两者良好的结合从而执行并行任务\",{\"1\":{\"1111\":1}}],[\"使强引用失效\",{\"1\":{\"183\":1}}],[\"使一个或多个线程等待其他线程完成操作\",{\"1\":{\"160\":1}}],[\"使缓存无效\",{\"1\":{\"145\":1}}],[\"使失效\",{\"1\":{\"73\":1}}],[\"使用mp4dash对已fragment的视频进行切片\",{\"1\":{\"1869\":1}}],[\"使用bento4的mp4fragment对视频进行fragment\",{\"1\":{\"1869\":1}}],[\"使用体验上\",{\"1\":{\"1805\":1}}],[\"使用伪头部和伪尾部节点\",{\"1\":{\"1651\":1}}],[\"使用信道\",{\"1\":{\"1629\":1}}],[\"使用后端数据库默认的隔离级别\",{\"1\":{\"1612\":1}}],[\"使用过程中不太容易了解底层\",{\"1\":{\"1610\":1}}],[\"使用过的内存放一边\",{\"1\":{\"214\":1}}],[\"使用单个线程处理请求\",{\"1\":{\"1571\":1}}],[\"使用缓存\",{\"1\":{\"1548\":1}}],[\"使用哈希表存储每个数字和该数字出现的次数\",{\"1\":{\"1663\":1}}],[\"使用哈希表存储元素\",{\"1\":{\"1496\":1}}],[\"使用哈希表可以把检索单个数据的复杂度近似为o\",{\"1\":{\"1546\":1}}],[\"使用操作系统的互斥量\",{\"1\":{\"1515\":1}}],[\"使用最少线程\",{\"1\":{\"1510\":1}}],[\"使用事件驱动的机制\",{\"1\":{\"1487\":1}}],[\"使用基于\",{\"1\":{\"1404\":1,\"1571\":1}}],[\"使用长连接减少连接建立释放的开销\",{\"1\":{\"1404\":1}}],[\"使用分支意味着可以把正在进行的工作从开发主线上分离开来\",{\"1\":{\"1331\":1}}],[\"使用分布式事务的成本也比较低\",{\"1\":{\"1283\":1}}],[\"使用心跳机制来触发\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"使用较多的分布式存储引擎\",{\"1\":{\"1213\":1}}],[\"使用非常广泛的\",{\"1\":{\"1213\":1}}],[\"使用非阻塞方式\",{\"1\":{\"1130\":1}}],[\"使用堆外内存可以避免频繁的垃圾回收对性能的影响\",{\"1\":{\"1136\":1}}],[\"使用堆外内存\",{\"1\":{\"1136\":1}}],[\"使用执行zlib压缩\",{\"1\":{\"1130\":1}}],[\"使用内存i\",{\"1\":{\"1130\":1}}],[\"使用堵塞式i\",{\"1\":{\"1130\":1}}],[\"使用json的数据编码协议进行数据传输\",{\"1\":{\"1129\":1}}],[\"使用variable\",{\"1\":{\"1129\":1}}],[\"使用拒绝策略链\",{\"1\":{\"1109\":1}}],[\"使用自定义线程池时\",{\"1\":{\"1107\":1}}],[\"使用线程池可以进行统一的分配\",{\"1\":{\"1104\":1}}],[\"使用线程池可以带来一系列好处\",{\"1\":{\"1104\":1}}],[\"使用线程池中的空闲线程异步提交任务\",{\"1\":{\"153\":1}}],[\"使用时会匹配符合匹配条件的最新声明的匹配\",{\"1\":{\"1712\":1}}],[\"使用时要注意\",{\"1\":{\"1099\":1}}],[\"使用时注意\",{\"1\":{\"84\":1}}],[\"使用方式\",{\"0\":{\"1073\":1}}],[\"使用方便\",{\"1\":{\"1040\":1}}],[\"使用空间换时间的思想对最终的方法调用进行优化\",{\"1\":{\"1014\":1}}],[\"使用redis自制的随机函数替换原有的随机函数\",{\"1\":{\"963\":1}}],[\"使用auth进行身份验证\",{\"1\":{\"936\":1}}],[\"使用zset\",{\"1\":{\"900\":1}}],[\"使用整数集合实现\",{\"1\":{\"899\":1}}],[\"使用字典实现\",{\"1\":{\"898\":1,\"899\":1}}],[\"使用双端链表实现\",{\"1\":{\"897\":1}}],[\"使用压缩列表实现\",{\"1\":{\"897\":1,\"898\":1,\"900\":1}}],[\"使用object\",{\"1\":{\"895\":1}}],[\"使用type\",{\"1\":{\"895\":1}}],[\"使用sqlmap等代码检测工具\",{\"1\":{\"1539\":1}}],[\"使用sentinel专用代码\",{\"1\":{\"939\":1}}],[\"使用sds\",{\"1\":{\"878\":1}}],[\"使用some的地方都可以使用any\",{\"1\":{\"609\":1}}],[\"使用它调整超时时间\",{\"1\":{\"855\":1}}],[\"使用完毕要注意主动释放\",{\"1\":{\"831\":1}}],[\"使用完应及时关闭\",{\"1\":{\"507\":1}}],[\"使用直接内存\",{\"1\":{\"829\":1,\"1520\":1}}],[\"使用直接内存作为数据缓冲区\",{\"1\":{\"212\":1}}],[\"使用引用计数来跟踪缓冲区的引用次数\",{\"1\":{\"825\":1,\"827\":1}}],[\"使用的无界的延迟阻塞队列delayedworkqueue\",{\"1\":{\"1110\":1}}],[\"使用的是同步队列\",{\"1\":{\"1110\":1}}],[\"使用的是无界的\",{\"1\":{\"1110\":1}}],[\"使用的是操作系统内存\",{\"1\":{\"800\":1}}],[\"使用的类型\",{\"1\":{\"1068\":1}}],[\"使用的\",{\"1\":{\"800\":1}}],[\"使用的索引记录的最大长度\",{\"1\":{\"728\":1}}],[\"使用姿势\",{\"0\":{\"767\":1}}],[\"使用到某个缓存页时将它调整到链表头部\",{\"1\":{\"732\":1}}],[\"使用步骤\",{\"0\":{\"1125\":1},\"1\":{\"729\":1}}],[\"使用索引覆盖\",{\"1\":{\"728\":1}}],[\"使用索引获取某些范围区间可能用到\",{\"1\":{\"728\":1}}],[\"使用索引加快连接速度\",{\"1\":{\"714\":1}}],[\"使用intersection\",{\"1\":{\"728\":1}}],[\"使用insert性能较低\",{\"1\":{\"614\":1}}],[\"使用多个索引来完成一次查询的执行方法\",{\"1\":{\"711\":1}}],[\"使用全表扫描执行查询的方式\",{\"1\":{\"710\":1}}],[\"使用任何存储引擎的\",{\"1\":{\"643\":1}}],[\"使用会话临时表空间和全局临时表空间\",{\"1\":{\"639\":1}}],[\"使用示例\",{\"1\":{\"593\":1,\"594\":1,\"595\":1,\"596\":1}}],[\"使用临键锁进行搜索和索引扫描\",{\"1\":{\"557\":1}}],[\"使用数据库连接池\",{\"1\":{\"526\":1}}],[\"使用标准的\",{\"1\":{\"526\":1}}],[\"使用两种缓存\",{\"1\":{\"512\":1}}],[\"使用发需要获取日志的\",{\"1\":{\"476\":1}}],[\"使用发布\",{\"1\":{\"407\":1}}],[\"使用这个自定义的\",{\"1\":{\"417\":1}}],[\"使用手动确认模式\",{\"1\":{\"417\":1}}],[\"使用默认交换机\",{\"1\":{\"414\":1}}],[\"使用erlang语言编写\",{\"1\":{\"412\":1}}],[\"使用路径表达式来定位元素节点或属性节点\",{\"1\":{\"357\":1}}],[\"使用组播地址\",{\"1\":{\"342\":1}}],[\"使用广播地址\",{\"1\":{\"342\":1}}],[\"使用总结\",{\"1\":{\"318\":1}}],[\"使用协程可以节省内存和线程调度开销\",{\"1\":{\"282\":1}}],[\"使用协程可以避免回调地狱\",{\"1\":{\"282\":1}}],[\"使用反射创建类的实例\",{\"1\":{\"247\":1}}],[\"使用类的静态方法\",{\"1\":{\"247\":1}}],[\"使用情况等等\",{\"1\":{\"1234\":1}}],[\"使用情况\",{\"1\":{\"232\":1}}],[\"使用读屏障\",{\"1\":{\"179\":1}}],[\"使用场景需要基于应用的实际需求\",{\"1\":{\"1543\":1}}],[\"使用场景\",{\"1\":{\"154\":1,\"289\":2,\"1390\":1,\"1514\":1}}],[\"使用弱引用可以防止长期存在的线程\",{\"1\":{\"154\":1,\"1514\":1}}],[\"使用cascade可以强制删除数据库\",{\"1\":{\"108\":1}}],[\"使用术语\",{\"1\":{\"82\":1}}],[\"使用上通常分两步\",{\"1\":{\"79\":1}}],[\"使用哪种分词器\",{\"1\":{\"36\":1}}],[\"使用\",{\"0\":{\"24\":1,\"73\":1,\"504\":1,\"507\":1,\"1105\":1},\"1\":{\"137\":1,\"143\":1,\"247\":1,\"355\":1,\"356\":1,\"391\":1,\"407\":1,\"417\":1,\"418\":2,\"530\":1,\"778\":1,\"785\":1,\"799\":1,\"801\":1,\"802\":2,\"808\":1,\"829\":1,\"897\":1,\"898\":1,\"899\":1,\"900\":1,\"1115\":1,\"1200\":1,\"1223\":1,\"1264\":1,\"1269\":1,\"1368\":2,\"1402\":1,\"1411\":1,\"1426\":1,\"1516\":1,\"1527\":1,\"1543\":1,\"1547\":1,\"1626\":1,\"1713\":1,\"1717\":1}}],[\"使得服务器端资源状态的改变\",{\"1\":{\"1640\":1}}],[\"使得其它bean能够引用到\",{\"1\":{\"1599\":1}}],[\"使得其能够获取相关资源\",{\"1\":{\"15\":1}}],[\"使得新的\",{\"1\":{\"1577\":1}}],[\"使得集合中元素可以按分值进行有序排列\",{\"1\":{\"1570\":1}}],[\"使得索引紧凑\",{\"1\":{\"1567\":1}}],[\"使得处理任务时充分利用\",{\"1\":{\"1511\":1}}],[\"使得进程之间的内存地址不受影响\",{\"1\":{\"1443\":1}}],[\"使得无论怎么加载\",{\"1\":{\"1435\":1}}],[\"使得ip包长度不会大于mtu\",{\"1\":{\"1416\":1}}],[\"使得旧连接的数据包在网络中都自然消失\",{\"1\":{\"1410\":1}}],[\"使得报文能够加密传输\",{\"1\":{\"1401\":1}}],[\"使得本地锁策略失效\",{\"1\":{\"1262\":1}}],[\"使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作\",{\"1\":{\"1142\":1}}],[\"使得堆内存可以更好地服务于其他\",{\"1\":{\"1136\":1}}],[\"使得java这种安全的语言变得不再\",{\"1\":{\"1134\":1}}],[\"使得下层的具体实现只要关注具体执行任务的方法即可\",{\"1\":{\"1111\":1}}],[\"使得脚本超时运行时\",{\"1\":{\"965\":1}}],[\"使得程序能够以o\",{\"1\":{\"946\":1}}],[\"使得程序结束更加优雅\",{\"1\":{\"821\":1}}],[\"使得传播某个节点的槽指派信息变得高效\",{\"1\":{\"946\":1}}],[\"使得\",{\"1\":{\"870\":1,\"1420\":1,\"1511\":1}}],[\"使得读写操作没有冲突\",{\"1\":{\"752\":1}}],[\"使得单一数据库\",{\"1\":{\"651\":1}}],[\"使得用户可以方便的进行监控和消息的管理\",{\"1\":{\"412\":1}}],[\"使得a系统与需要关心订单创建事件的系统解耦开\",{\"1\":{\"399\":1}}],[\"使得系统难以维护\",{\"1\":{\"399\":1}}],[\"使得它们可以独立地变化\",{\"1\":{\"375\":2}}],[\"使得客户端可以调用目标接口中定义的方法\",{\"1\":{\"374\":1}}],[\"使得子系统更加易用\",{\"1\":{\"373\":1}}],[\"使得代码更加易于维护和调试\",{\"1\":{\"282\":1}}],[\"使得代码更加清晰和易于理解\",{\"1\":{\"282\":1}}],[\"使得哈希分布更均匀\",{\"1\":{\"154\":1,\"1514\":1}}],[\"使得事件的发布者\",{\"1\":{\"84\":1}}],[\"使得长期未拿到资源的线程有更多自旋机会\",{\"1\":{\"6\":1}}],[\"使得开发人员能够相对容易地构建各种形式的同步器\",{\"1\":{\"2\":1}}],[\"当惹雍措\",{\"1\":{\"1849\":1}}],[\"当晚就乘飞机回长沙了\",{\"1\":{\"1848\":1}}],[\"当雄\",{\"1\":{\"1833\":1}}],[\"当推送到\",{\"1\":{\"1791\":1}}],[\"当可售座位数小于10时\",{\"1\":{\"1740\":1}}],[\"当旅客或ota发起订票请求时\",{\"1\":{\"1722\":1}}],[\"当所依赖的服务恶化或者调用失败次数达到某个阈值的时候就迅速失败\",{\"1\":{\"1638\":1}}],[\"当所有线程到达屏障时\",{\"1\":{\"1463\":1}}],[\"当消费速度大于生产速度且\",{\"1\":{\"1629\":1}}],[\"当消息在一个队列中变成死信\",{\"1\":{\"1629\":1}}],[\"当消息处理器第一次写入消息时\",{\"1\":{\"789\":1}}],[\"当严重影响性能\",{\"1\":{\"1612\":1}}],[\"当做run方法的返回对象\",{\"1\":{\"1607\":1}}],[\"当b创建完后\",{\"1\":{\"1599\":1}}],[\"当b系统需要下线\",{\"1\":{\"399\":1}}],[\"当主节点宕机时\",{\"1\":{\"1588\":1}}],[\"当子进程完成创建新\",{\"1\":{\"1577\":1}}],[\"当事务回滚或者发生其他异常时\",{\"1\":{\"1554\":1}}],[\"当事务提交之后会把所有修改信息存到该日志中\",{\"1\":{\"639\":1}}],[\"当需要读一条记录的时候\",{\"1\":{\"1546\":1}}],[\"当需要同时对多个\",{\"1\":{\"69\":1}}],[\"当代理类调用方法的时候\",{\"1\":{\"1532\":1}}],[\"当动态代理对象调用一个方法时\",{\"1\":{\"1532\":1}}],[\"当初始化一个类时\",{\"1\":{\"1527\":1}}],[\"当初次执行提交时\",{\"1\":{\"1332\":1}}],[\"当某一线程获取锁后\",{\"1\":{\"1517\":1}}],[\"当某个节点开始故障转移\",{\"1\":{\"948\":1}}],[\"当某个\",{\"1\":{\"466\":1,\"1487\":1}}],[\"当冲突链表达到一定长度时\",{\"1\":{\"1497\":1}}],[\"当添加元素超过当前的\",{\"1\":{\"1493\":1}}],[\"当添加一个新元素时\",{\"1\":{\"889\":1}}],[\"当被监控的\",{\"1\":{\"1487\":2}}],[\"当发现内核缓存的数据太多的时候\",{\"1\":{\"1478\":1}}],[\"当发送与数据键相关命令时\",{\"1\":{\"947\":1}}],[\"当发送的数据超过\",{\"1\":{\"839\":1}}],[\"当发送上下文切换时\",{\"1\":{\"134\":1}}],[\"当文件被访问时进入内存\",{\"1\":{\"1474\":2}}],[\"当出现缺页异常\",{\"1\":{\"1471\":1}}],[\"当两个线程是属于同一个进程\",{\"1\":{\"1454\":1}}],[\"当两个线程不是属于同一个进程\",{\"1\":{\"1454\":1}}],[\"当两个消息各自的部分内容被分到同一个\",{\"1\":{\"1417\":1}}],[\"当有多个同时执行的\",{\"1\":{\"1435\":1}}],[\"当有序集合对象同时满足以下两个条件时\",{\"1\":{\"900\":1}}],[\"当接收方发现一个乱序到达的报文段\",{\"1\":{\"1413\":1}}],[\"当cwnd\",{\"1\":{\"1413\":1}}],[\"当收到三个相同的\",{\"1\":{\"1411\":1}}],[\"当超过指定的时间后\",{\"1\":{\"1411\":1}}],[\"当我们修改了文件为\",{\"1\":{\"1344\":1}}],[\"当我们对仓库里的文件做一些修改\",{\"1\":{\"1332\":1}}],[\"当用户下单时\",{\"1\":{\"1288\":1,\"1370\":1}}],[\"当用户再次启动数据库的时候\",{\"1\":{\"1034\":1}}],[\"当服务器与客户端\",{\"1\":{\"1487\":1}}],[\"当服务器运行在复制模式下\",{\"1\":{\"967\":1}}],[\"当服务端监听到有数据变化\",{\"1\":{\"1190\":1}}],[\"当这个\",{\"1\":{\"1189\":1}}],[\"当这些引用实例所引用的对象被垃圾回收器回收时\",{\"1\":{\"188\":1}}],[\"当启动一个\",{\"1\":{\"1188\":1}}],[\"当容器中没有任何子节点\",{\"1\":{\"1169\":1}}],[\"当容量\",{\"1\":{\"154\":1,\"1514\":1}}],[\"当线程池执行\",{\"1\":{\"1114\":1}}],[\"当线程池中的线程已经达到最大线程数\",{\"1\":{\"1109\":1}}],[\"当线程资源紧张时\",{\"1\":{\"1107\":1}}],[\"当线程数量超过corepoolsize后\",{\"1\":{\"1106\":1,\"1511\":1}}],[\"当退出临界区解锁时\",{\"1\":{\"1076\":1}}],[\"当对象提供非确定的结果\",{\"1\":{\"1706\":1}}],[\"当对象在新生代经过多次\",{\"1\":{\"1524\":1}}],[\"当对象完全创建完成后\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"当对象的引用计数器为\",{\"1\":{\"223\":1}}],[\"当其他\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"当程序需要\",{\"1\":{\"1006\":1}}],[\"当客户端执行publish\",{\"1\":{\"956\":1}}],[\"当选为新主节点\",{\"1\":{\"948\":1}}],[\"当从节点发现所属的主节点已下线时\",{\"1\":{\"948\":1}}],[\"当数据库的16384个槽有进行指派后\",{\"1\":{\"947\":1}}],[\"当数据库出现任何故障导致无法正常使用时\",{\"1\":{\"642\":1}}],[\"当旧主服务器重新上线时\",{\"1\":{\"943\":1}}],[\"当同意该主服务器已下线的sentinel总数$>=quorum$\",{\"1\":{\"941\":1}}],[\"当时间事件到达时\",{\"1\":{\"920\":1}}],[\"当时这个消息用哪个路由键\",{\"1\":{\"421\":1}}],[\"当时这个消息发给哪个交换机\",{\"1\":{\"421\":1}}],[\"当上一个套接字产生的事件被处理完毕之后\",{\"1\":{\"919\":1}}],[\"当集合对象同时满足以下两个条件时\",{\"1\":{\"899\":1}}],[\"当哈希对象同时满足以下两个条件时\",{\"1\":{\"898\":1}}],[\"当列表对象同时满足以下两个条件时\",{\"1\":{\"897\":1}}],[\"当滑动窗口中缓冲了多个报文就会粘包\",{\"1\":{\"839\":1}}],[\"当包装\",{\"1\":{\"834\":1}}],[\"当计数为\",{\"1\":{\"829\":1}}],[\"当引用计数为零时\",{\"1\":{\"827\":1}}],[\"当引用计数为零时将被自动释放\",{\"1\":{\"825\":1}}],[\"当调用一次\",{\"1\":{\"794\":1}}],[\"当删除事务提交后\",{\"1\":{\"747\":1}}],[\"当删除一行记录时\",{\"1\":{\"615\":1}}],[\"当它第一次对某个表执行增删改时会自动分配一个事务id\",{\"1\":{\"744\":1}}],[\"当它第一次对用户创建的临时表执行增删改时会自动分配一个事务id\",{\"1\":{\"744\":1}}],[\"当脏页刷新到磁盘后\",{\"1\":{\"741\":1}}],[\"当优化器知道每列是否包含null值时\",{\"1\":{\"708\":1}}],[\"当字段类型为字符串\",{\"1\":{\"707\":1}}],[\"当业务操作的时候直接操作的是内存缓冲区\",{\"1\":{\"637\":1}}],[\"当条件处理程序的处理的状态码为02000的时候\",{\"1\":{\"634\":1}}],[\"当页中删除的记录达到\",{\"1\":{\"615\":1}}],[\"当在父表中删除\",{\"1\":{\"599\":4}}],[\"当在一个线程里调用\",{\"1\":{\"363\":1}}],[\"当第一个字段值相同时\",{\"1\":{\"586\":1}}],[\"当第一次有线程获取不到锁\",{\"1\":{\"4\":1}}],[\"当申请的是排他锁时\",{\"1\":{\"553\":1}}],[\"当查询一个表中的数据时\",{\"1\":{\"553\":1}}],[\"当sentinel判定主服务器客观下线\",{\"1\":{\"942\":1}}],[\"当segment的大小达到阈值\",{\"1\":{\"476\":1}}],[\"当survivor不足以容纳一次gc的存活对象时\",{\"1\":{\"171\":1}}],[\"当kafka中unclean\",{\"1\":{\"470\":1}}],[\"当isr中的副本数量小于min\",{\"1\":{\"460\":1}}],[\"当\",{\"1\":{\"450\":1,\"470\":1,\"493\":1,\"513\":1,\"658\":1,\"827\":1,\"1524\":1,\"1599\":2}}],[\"当系统a中在订单创建后\",{\"1\":{\"399\":1}}],[\"当链表长度超过8自动转为红黑树\",{\"1\":{\"304\":1}}],[\"当回边计数器溢出时\",{\"1\":{\"268\":1}}],[\"当java进程不响应时\",{\"1\":{\"232\":1,\"234\":1}}],[\"当内存不足以容纳新写入数据时\",{\"1\":{\"1574\":2}}],[\"当内存不足时\",{\"1\":{\"192\":1}}],[\"当内存十分紧张\",{\"1\":{\"1478\":1}}],[\"当内存空间不足时\",{\"1\":{\"191\":1}}],[\"当此循环结束前唤醒阻塞的其它线程\",{\"1\":{\"188\":1}}],[\"当一个接口存在多个实现类\",{\"1\":{\"1595\":1}}],[\"当一个节点获得超过半数选票则自动成为集群里的\",{\"1\":{\"1202\":1}}],[\"当一个runnable\",{\"1\":{\"1106\":1}}],[\"当一个校验和出现在\",{\"1\":{\"967\":1}}],[\"当一个事务执行完毕后\",{\"1\":{\"961\":1}}],[\"当一个事务准备在某条记录上加行级排他锁时\",{\"1\":{\"560\":1}}],[\"当一个事务准备在某条记录上加行级共享锁时\",{\"1\":{\"560\":1}}],[\"当一个客户端处于事务状态\",{\"1\":{\"959\":1}}],[\"当一个从节点发现自己正在复制的主节点已下线时\",{\"1\":{\"948\":1}}],[\"当一个主服务器被判定客观下线\",{\"1\":{\"942\":1}}],[\"当一个\",{\"1\":{\"851\":1}}],[\"当一个线程访问同步块并获得锁时\",{\"1\":{\"1515\":1}}],[\"当一个线程在一段时间内多次重复获得同一个锁\",{\"1\":{\"1081\":1}}],[\"当一个线程执行\",{\"1\":{\"1076\":1}}],[\"当一个线程需要访问资源时\",{\"1\":{\"159\":1}}],[\"当一个线程修改了共享变量的值\",{\"1\":{\"144\":1,\"1506\":1}}],[\"当一个线程尝试获取锁但失败时\",{\"1\":{\"2\":1}}],[\"当一块内存用完\",{\"1\":{\"169\":1,\"1523\":1}}],[\"当读操作远远高于写操作时\",{\"1\":{\"157\":1}}],[\"当threadlocal不再使用需要回收时\",{\"1\":{\"154\":1,\"1514\":1}}],[\"当然这对在校生来说更好了\",{\"1\":{\"1810\":1}}],[\"当然不差钱的可以选择infuse\",{\"1\":{\"1808\":1}}],[\"当然在安卓平台上经常有此类的app传播\",{\"1\":{\"1804\":1}}],[\"当然也有平时运动的原因\",{\"1\":{\"1786\":1}}],[\"当然也可以通过继承\",{\"1\":{\"61\":1,\"522\":1}}],[\"当然http\",{\"1\":{\"1623\":1}}],[\"当然系统也提供了参数\",{\"1\":{\"1444\":1}}],[\"当然\",{\"1\":{\"1406\":1}}],[\"当然上面讨论的只是一个非常极端的场景\",{\"1\":{\"1240\":1}}],[\"当然原子工具类已经帮我们处理好了\",{\"1\":{\"148\":1}}],[\"当前读\",{\"1\":{\"1557\":1}}],[\"当前节点在队列中的状态\",{\"1\":{\"1516\":1}}],[\"当前在\",{\"1\":{\"1337\":1}}],[\"当前分支所在的版本在上面\",{\"1\":{\"1336\":1}}],[\"当前处在\",{\"1\":{\"1335\":1}}],[\"当前所处分支\",{\"1\":{\"1326\":1}}],[\"当前机器单独启停服务\",{\"1\":{\"1222\":1}}],[\"当前\",{\"1\":{\"1168\":3}}],[\"当前不存在事务\",{\"1\":{\"1049\":1}}],[\"当前已存在的会话无效\",{\"1\":{\"737\":1}}],[\"当前记录真实数据到下一条记录真实数据的地址偏移量\",{\"1\":{\"689\":1}}],[\"当前记录类型\",{\"1\":{\"689\":1}}],[\"当前记录在本页中的位置\",{\"1\":{\"689\":1}}],[\"当前数据库服务器的binlog日志的前缀\",{\"1\":{\"643\":1}}],[\"当前表与自身的连接查询\",{\"1\":{\"605\":1}}],[\"当前加锁的客户端可读可写\",{\"1\":{\"552\":1}}],[\"当前消息的唯一关联数据\",{\"1\":{\"420\":1}}],[\"当前类\",{\"1\":{\"240\":1,\"1526\":1}}],[\"当前是链表表头\",{\"1\":{\"196\":1}}],[\"当前容器并添加元素\",{\"1\":{\"162\":1}}],[\"当前日期\",{\"1\":{\"129\":1}}],[\"当前时间戳\",{\"1\":{\"129\":1}}],[\"当前线程所执行的字节码的行号指示器\",{\"1\":{\"1520\":1}}],[\"当前线程自己调用\",{\"1\":{\"1095\":1}}],[\"当前线程正在忙等\",{\"1\":{\"1095\":1}}],[\"当前线程是否持有该对象的\",{\"1\":{\"1095\":1}}],[\"当前线程已存在事务\",{\"1\":{\"1049\":1}}],[\"当前线程开启状态的所有数据库连接\",{\"1\":{\"1045\":1,\"1383\":1}}],[\"当前线程先检查\",{\"1\":{\"366\":2}}],[\"当前线程\",{\"1\":{\"156\":1}}],[\"当前线程清除\",{\"1\":{\"6\":1}}],[\"当前线程需要关联一个节点入队\",{\"1\":{\"6\":1}}],[\"当前同步器是否在独占模式下被线程占用\",{\"1\":{\"5\":1}}],[\"当执行某个阶段的时候\",{\"1\":{\"1632\":1}}],[\"当执行完\",{\"1\":{\"1344\":2}}],[\"当执行加行锁的语句时会自动尝试获取意向锁\",{\"1\":{\"560\":1}}],[\"当执行\",{\"1\":{\"5\":1,\"366\":2,\"1119\":1}}],[\"当持有锁的线程释放锁时\",{\"1\":{\"2\":1}}],[\"jpg\",{\"1\":{\"1878\":1}}],[\"jpa\",{\"0\":{\"1615\":1},\"1\":{\"1608\":1}}],[\"jprofile\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"jps\",{\"0\":{\"229\":1},\"1\":{\"229\":1}}],[\"jta\",{\"1\":{\"1049\":1,\"1058\":1}}],[\"jellyfin等可以连接一个共有的\",{\"1\":{\"1809\":1}}],[\"jellyfin\",{\"0\":{\"1809\":1}}],[\"jedis\",{\"1\":{\"1368\":1}}],[\"jetbrains\",{\"1\":{\"1218\":1}}],[\"jemalloc\",{\"1\":{\"826\":1}}],[\"jenkov\",{\"1\":{\"788\":1}}],[\"j++\",{\"1\":{\"788\":1,\"994\":1,\"996\":1,\"1654\":2}}],[\"j\",{\"1\":{\"788\":2,\"831\":1,\"989\":3,\"991\":14,\"993\":1,\"994\":4,\"996\":22,\"1108\":1,\"1652\":3,\"1653\":3,\"1654\":4,\"1655\":8,\"1735\":1}}],[\"john\",{\"1\":{\"1718\":1}}],[\"jol\",{\"1\":{\"1083\":1}}],[\"jobs\",{\"1\":{\"1791\":1}}],[\"jobhistoryserver\",{\"1\":{\"1222\":1}}],[\"job\",{\"1\":{\"611\":2,\"1245\":1}}],[\"joinpointidentification\",{\"1\":{\"1059\":2}}],[\"join条件\",{\"1\":{\"726\":1}}],[\"join半连接条件\",{\"1\":{\"726\":1}}],[\"joingroup负责绑定组播ip\",{\"1\":{\"342\":1}}],[\"join框架会将任务分配给线程池中的线程\",{\"1\":{\"153\":1}}],[\"join流程图\",{\"1\":{\"153\":1}}],[\"join\",{\"0\":{\"1091\":1},\"1\":{\"79\":1,\"124\":2,\"134\":1,\"137\":1,\"143\":3,\"150\":1,\"153\":5,\"330\":1,\"515\":1,\"531\":1,\"603\":2,\"604\":4,\"605\":2,\"611\":1,\"728\":1,\"729\":1,\"1091\":7,\"1092\":1,\"1221\":1,\"1228\":1,\"1509\":1,\"1512\":1,\"1564\":1,\"1859\":1}}],[\"joined\",{\"1\":{\"79\":1,\"1859\":1}}],[\"joiner\",{\"1\":{\"79\":5}}],[\"jndi\",{\"1\":{\"526\":1}}],[\"jni\",{\"1\":{\"209\":1}}],[\"jxta等\",{\"1\":{\"434\":1}}],[\"jgroups\",{\"1\":{\"434\":1}}],[\"j2ee\",{\"1\":{\"432\":1}}],[\"jcl\",{\"0\":{\"379\":1},\"1\":{\"376\":3,\"379\":1,\"380\":3,\"382\":3}}],[\"jconsole是一个基于jmx的插件化应用程序\",{\"1\":{\"236\":1}}],[\"jconsole是java自带的一种监控和管理工具\",{\"1\":{\"236\":1}}],[\"jconsole提供了一些基本的管理功能\",{\"1\":{\"236\":1}}],[\"jconsole提供了一个直观的图形化界面\",{\"1\":{\"236\":1}}],[\"jconsole支持通过jmx\",{\"1\":{\"236\":1}}],[\"jconsole可以帮助开发人员分析java应用程序的性能瓶颈和优化机会\",{\"1\":{\"236\":1}}],[\"jconsole\",{\"0\":{\"236\":1},\"1\":{\"1367\":1,\"1529\":1}}],[\"jruby\",{\"1\":{\"255\":1}}],[\"jrunscript\",{\"1\":{\"228\":1}}],[\"judaism\",{\"0\":{\"1758\":1}}],[\"junio\",{\"1\":{\"1322\":2}}],[\"junit的测试有自动隔离\",{\"1\":{\"1711\":1}}],[\"junit\",{\"1\":{\"1015\":1}}],[\"junit单元测试框架\",{\"1\":{\"356\":1}}],[\"juejin\",{\"1\":{\"546\":1,\"565\":1,\"1117\":1,\"1121\":1,\"1144\":1,\"1793\":1}}],[\"jul\",{\"1\":{\"376\":3,\"378\":1,\"382\":1}}],[\"just\",{\"1\":{\"242\":1}}],[\"juc\",{\"1\":{\"9\":2,\"77\":1,\"162\":1,\"1083\":1,\"1137\":1,\"1261\":1}}],[\"jhsdb工具集提供了丰富的功能\",{\"1\":{\"235\":1}}],[\"jhsdb提供了以下几个主要的命令行工具\",{\"1\":{\"235\":1}}],[\"jhsdb\",{\"0\":{\"235\":1},\"1\":{\"235\":7}}],[\"jhat\",{\"0\":{\"233\":1},\"1\":{\"228\":1,\"233\":3}}],[\"j<option>\",{\"1\":{\"233\":1}}],[\"jit线程\",{\"1\":{\"1087\":1}}],[\"jit\",{\"1\":{\"242\":5,\"255\":1,\"266\":1,\"268\":1,\"270\":1,\"271\":1}}],[\"jit编译情况等\",{\"1\":{\"230\":1}}],[\"jinfo\",{\"0\":{\"231\":1},\"1\":{\"228\":1,\"231\":1,\"235\":1}}],[\"jjs\",{\"1\":{\"228\":1}}],[\"jar\",{\"1\":{\"1224\":1,\"1632\":3}}],[\"jarsigner\",{\"1\":{\"228\":1}}],[\"jackson2jsonmessageconverter\",{\"1\":{\"417\":1}}],[\"jakarta\",{\"1\":{\"376\":2}}],[\"java常用的mock测试包是mockito\",{\"1\":{\"1707\":1}}],[\"java使用selector\",{\"1\":{\"1504\":1}}],[\"java线程池实现原理及其在美团业务中的实践\",{\"1\":{\"1120\":1,\"1121\":1}}],[\"java线程thread类详解\",{\"1\":{\"1100\":1}}],[\"java多线程之uncaughtexceptionhandler\",{\"1\":{\"1100\":1}}],[\"javasuo\",{\"1\":{\"1083\":1}}],[\"java对象内存布局\",{\"1\":{\"1083\":1}}],[\"javax\",{\"1\":{\"1058\":1}}],[\"java层面的逻辑抽象\",{\"1\":{\"1044\":1}}],[\"javaversion\",{\"1\":{\"866\":1}}],[\"javaee\",{\"1\":{\"808\":1}}],[\"javatype=resultset\",{\"1\":{\"530\":1}}],[\"javatype=\",{\"1\":{\"521\":1}}],[\"java配置代码\",{\"1\":{\"508\":1}}],[\"java配置信息工具\",{\"1\":{\"231\":1}}],[\"java客户端\",{\"0\":{\"454\":1,\"486\":1}}],[\"java消息服务的一套\",{\"1\":{\"403\":1,\"1625\":1}}],[\"java主要的日志组件都已经出场了\",{\"1\":{\"376\":1}}],[\"java参数传递机制\",{\"1\":{\"359\":1}}],[\"java定义了6中状态\",{\"1\":{\"336\":1}}],[\"java的mock测试一般配合\",{\"1\":{\"1709\":1}}],[\"java的协程通常使用协程库或框架来实现\",{\"1\":{\"282\":1}}],[\"java的协程是一种轻量级的线程替代方案\",{\"1\":{\"282\":1}}],[\"java的语法糖是指在java编程语言中为了简化代码书写和提高可读性而添加的一些语法特性\",{\"1\":{\"263\":1}}],[\"java提供了不同硬件和os平台下对线程操作的统一处理\",{\"1\":{\"277\":1}}],[\"java并发编程之thread类详解\",{\"1\":{\"1100\":1}}],[\"java并发编程\",{\"1\":{\"1100\":1}}],[\"java并发\",{\"1\":{\"275\":1,\"1100\":1}}],[\"java最初都是通过解释器执行的\",{\"1\":{\"266\":1}}],[\"java类加载器采用双亲委派模型\",{\"1\":{\"254\":1}}],[\"java中的runnnable状态包含os层面线程的ready和running两个状态\",{\"1\":{\"1509\":1}}],[\"java中的三种常见io模型\",{\"1\":{\"1504\":1}}],[\"java中的类加载器主要有以下几种\",{\"1\":{\"254\":1}}],[\"java中\",{\"1\":{\"246\":1,\"1664\":1}}],[\"java中有四种引用类型\",{\"1\":{\"183\":1}}],[\"java程序可以在不同的操作系统和硬件平台上运行\",{\"1\":{\"239\":1}}],[\"java堆栈跟踪工具\",{\"1\":{\"234\":1}}],[\"java堆中划分一块内存作为句柄池\",{\"1\":{\"216\":1}}],[\"java内存映像工具\",{\"1\":{\"232\":1}}],[\"javaws\",{\"1\":{\"228\":1}}],[\"javap\",{\"1\":{\"228\":1}}],[\"javadoc\",{\"1\":{\"228\":1}}],[\"javachannel\",{\"1\":{\"865\":1,\"866\":2,\"873\":1}}],[\"javac编译过程的最后一个阶段\",{\"1\":{\"264\":1}}],[\"javac编译过程\",{\"1\":{\"255\":1}}],[\"javac本身是由java语言编写的程序\",{\"1\":{\"255\":1}}],[\"javac\",{\"1\":{\"228\":1,\"255\":1}}],[\"java虚拟机\",{\"1\":{\"228\":1,\"242\":1}}],[\"java通过栈上的reference来操作堆上的具体对象\",{\"1\":{\"216\":1}}],[\"java基础\",{\"1\":{\"211\":1}}],[\"java几种引用及源码简析\",{\"1\":{\"197\":1}}],[\"javalangaccess\",{\"1\":{\"196\":2}}],[\"javalangrefaccess\",{\"1\":{\"188\":1}}],[\"javaletter\",{\"1\":{\"79\":1}}],[\"javaguide\",{\"1\":{\"90\":1,\"98\":1}}],[\"javaisocontrol\",{\"1\":{\"79\":1}}],[\"java\",{\"0\":{\"133\":1,\"182\":1,\"219\":1,\"238\":1,\"286\":1,\"370\":1,\"758\":1,\"1246\":1,\"1491\":1,\"1502\":1},\"1\":{\"2\":1,\"3\":1,\"38\":4,\"80\":1,\"136\":3,\"137\":1,\"142\":3,\"144\":1,\"145\":2,\"149\":1,\"153\":2,\"154\":3,\"158\":1,\"163\":1,\"188\":1,\"193\":1,\"195\":1,\"196\":1,\"197\":1,\"203\":1,\"224\":1,\"225\":1,\"228\":3,\"231\":1,\"232\":1,\"234\":1,\"235\":1,\"236\":1,\"238\":7,\"254\":3,\"255\":1,\"263\":1,\"270\":2,\"277\":1,\"281\":1,\"283\":2,\"324\":1,\"343\":1,\"345\":1,\"352\":1,\"362\":1,\"367\":2,\"372\":1,\"376\":7,\"378\":1,\"382\":1,\"383\":1,\"391\":1,\"403\":1,\"410\":1,\"418\":6,\"435\":5,\"503\":3,\"507\":1,\"515\":1,\"520\":2,\"521\":4,\"529\":1,\"536\":1,\"540\":1,\"545\":1,\"784\":1,\"788\":1,\"791\":1,\"799\":4,\"800\":3,\"801\":2,\"802\":3,\"808\":1,\"829\":1,\"863\":2,\"864\":1,\"865\":1,\"866\":1,\"867\":2,\"869\":1,\"870\":1,\"873\":2,\"1014\":1,\"1015\":4,\"1065\":2,\"1072\":1,\"1077\":1,\"1086\":2,\"1089\":1,\"1090\":2,\"1093\":1,\"1104\":2,\"1113\":3,\"1115\":2,\"1119\":1,\"1125\":1,\"1134\":3,\"1136\":13,\"1144\":1,\"1221\":1,\"1223\":1,\"1246\":1,\"1264\":1,\"1367\":1,\"1466\":1,\"1499\":1,\"1506\":1,\"1509\":1,\"1513\":1,\"1520\":1,\"1529\":1,\"1535\":1,\"1781\":1,\"1796\":3},\"2\":{\"11\":1,\"164\":1,\"180\":1,\"198\":1,\"217\":1,\"284\":1,\"360\":1,\"368\":1,\"393\":1,\"803\":1,\"835\":1,\"874\":1,\"1029\":1,\"1062\":1,\"1070\":1,\"1084\":1,\"1101\":1,\"1122\":1,\"1145\":1,\"1241\":1,\"1659\":1}}],[\"js也放入html文件夹中\",{\"1\":{\"1870\":1}}],[\"js​\",{\"1\":{\"1870\":1}}],[\"js\",{\"1\":{\"1400\":1,\"1791\":1,\"1867\":1,\"1870\":2}}],[\"jsoup\",{\"1\":{\"357\":1}}],[\"jsonpath\",{\"1\":{\"1717\":1}}],[\"jsonpath提供了强大的断言能力\",{\"1\":{\"1716\":1}}],[\"jsonassert\",{\"1\":{\"1717\":1}}],[\"jsonunwrapped\",{\"1\":{\"1608\":1}}],[\"jsonutils\",{\"1\":{\"1244\":3,\"1245\":1}}],[\"jsonformat\",{\"1\":{\"1608\":1}}],[\"jsonignoreproperties\",{\"1\":{\"1608\":1}}],[\"json数据处理\",{\"1\":{\"1608\":1}}],[\"json\",{\"1\":{\"15\":2,\"26\":1,\"42\":1,\"47\":2,\"48\":1,\"51\":3,\"391\":1,\"417\":1,\"848\":1,\"849\":1,\"1008\":1,\"1261\":2,\"1368\":1}}],[\"jsonobject\",{\"1\":{\"15\":5}}],[\"jstack\",{\"0\":{\"234\":1},\"1\":{\"234\":1,\"235\":2,\"1466\":1}}],[\"jstat\",{\"0\":{\"230\":1},\"1\":{\"228\":1,\"230\":1,\"235\":1}}],[\"jshell\",{\"1\":{\"228\":1}}],[\"jmeter\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"jmx\",{\"1\":{\"432\":1}}],[\"jmsjava\",{\"1\":{\"1625\":1}}],[\"jms1\",{\"1\":{\"432\":1}}],[\"jms\",{\"0\":{\"403\":1},\"1\":{\"404\":1,\"432\":1,\"1625\":1}}],[\"jmc是基于eclipse\",{\"1\":{\"238\":1}}],[\"jmc\",{\"1\":{\"238\":1}}],[\"jmapjstack\",{\"1\":{\"1367\":1,\"1529\":1}}],[\"jmap\",{\"0\":{\"232\":1},\"1\":{\"228\":1,\"232\":1,\"235\":1,\"1367\":1,\"1529\":1}}],[\"jmods目录下\",{\"1\":{\"228\":1}}],[\"jmm\",{\"0\":{\"142\":1},\"1\":{\"142\":2,\"143\":2,\"145\":2}}],[\"jla\",{\"1\":{\"196\":4}}],[\"jquery\",{\"1\":{\"125\":1}}],[\"jvm层面上\",{\"1\":{\"1532\":1}}],[\"jvm可能会将这个锁扩展到包含整个循环的代码块\",{\"1\":{\"1081\":1}}],[\"jvm可能会将这个锁的粒度从对象级别提升到更高的级别\",{\"1\":{\"1081\":1}}],[\"jvm退出等\",{\"1\":{\"345\":1}}],[\"jvm在编译器未完成编译前\",{\"1\":{\"269\":1}}],[\"jvm中第一个被执行<clinit>\",{\"1\":{\"253\":1}}],[\"jvm字节码执行引擎能够在不同的平台上执行java程序\",{\"1\":{\"242\":1}}],[\"jvm字节码执行引擎的工作流程如下\",{\"1\":{\"242\":1}}],[\"jvm加载java类文件\",{\"1\":{\"242\":1}}],[\"jvm必须拒绝执行超过其版本号的class文件\",{\"1\":{\"240\":1}}],[\"jvm语言无关性\",{\"1\":{\"239\":1}}],[\"jvmflags\",{\"1\":{\"231\":1}}],[\"jvmti等等\",{\"1\":{\"224\":1}}],[\"jvm内存区\",{\"1\":{\"359\":1}}],[\"jvm内存演进\",{\"0\":{\"201\":1}}],[\"jvm内部的引用\",{\"1\":{\"224\":1}}],[\"jvm对性能的全部优化集中在运行期的jit中\",{\"1\":{\"255\":1}}],[\"jvm对象已产生\",{\"1\":{\"214\":1}}],[\"jvm对对象进行必要设置\",{\"1\":{\"214\":1}}],[\"jvm将该内存空间初始化为0\",{\"1\":{\"214\":1}}],[\"jvm规范没有描述的信息\",{\"1\":{\"208\":1}}],[\"jvm实现通过引用应完成两件事\",{\"1\":{\"204\":1}}],[\"jvm通过索引定位的方法使用局部变量表\",{\"1\":{\"204\":1}}],[\"jvm\",{\"0\":{\"166\":1,\"200\":1,\"228\":1,\"1367\":1,\"1519\":1},\"1\":{\"37\":1,\"134\":1,\"171\":1,\"191\":1,\"196\":2,\"209\":1,\"210\":1,\"211\":3,\"212\":1,\"220\":1,\"224\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"233\":1,\"242\":1,\"283\":4,\"782\":2,\"791\":1,\"800\":2,\"802\":1,\"826\":1,\"829\":1,\"1014\":1,\"1074\":3,\"1075\":1,\"1077\":2,\"1092\":1,\"1093\":1,\"1095\":1,\"1099\":2,\"1136\":2,\"1465\":3,\"1520\":1,\"1524\":3,\"1532\":2,\"1533\":1},\"2\":{\"181\":1,\"199\":1,\"218\":1,\"285\":1}}],[\"jwt\",{\"0\":{\"26\":1}}],[\"jdom\",{\"1\":{\"357\":1}}],[\"jdb\",{\"1\":{\"228\":1}}],[\"jdbctransactionmanager\",{\"1\":{\"1052\":1,\"1054\":1}}],[\"jdbctype=cursor\",{\"1\":{\"530\":1}}],[\"jdbctype=\",{\"1\":{\"521\":1}}],[\"jdbc\",{\"1\":{\"24\":1,\"503\":1,\"506\":5,\"508\":1,\"519\":1,\"521\":3,\"524\":1,\"525\":2,\"526\":1,\"540\":4,\"544\":2,\"545\":1,\"1045\":1,\"1224\":1,\"1563\":2}}],[\"jdk6\",{\"1\":{\"1515\":2}}],[\"jdkdynamicaopproxy\",{\"0\":{\"1021\":1}}],[\"jdk7\",{\"1\":{\"778\":1}}],[\"jdk层面的线程实现见\",{\"1\":{\"277\":1}}],[\"jdk14<\",{\"1\":{\"382\":1}}],[\"jdk11移除\",{\"1\":{\"228\":1}}],[\"jdk17\",{\"1\":{\"6\":1}}],[\"jdk8\",{\"1\":{\"211\":2}}],[\"jdk9引入取代ext\",{\"1\":{\"1528\":1}}],[\"jdk9\",{\"1\":{\"177\":1}}],[\"jdk动态代理接口\",{\"1\":{\"99\":1}}],[\"jdk\",{\"0\":{\"151\":1,\"1015\":1},\"1\":{\"1\":4,\"8\":1,\"58\":2,\"59\":2,\"64\":1,\"71\":7,\"79\":1,\"82\":2,\"83\":1,\"137\":2,\"148\":1,\"149\":1,\"150\":1,\"153\":1,\"155\":1,\"157\":1,\"254\":1,\"292\":1,\"324\":1,\"353\":1,\"376\":1,\"382\":2,\"383\":1,\"417\":1,\"784\":1,\"791\":1,\"822\":4,\"848\":1,\"849\":1,\"1009\":1,\"1014\":1,\"1015\":3,\"1021\":1,\"1023\":1,\"1057\":3,\"1074\":1,\"1075\":1,\"1077\":1,\"1093\":1,\"1113\":1,\"1134\":1,\"1135\":7,\"1380\":1,\"1494\":2,\"1497\":2,\"1511\":1,\"1520\":2,\"1528\":1,\"1532\":3,\"1595\":1}}],[\"是雪山\",{\"1\":{\"1833\":1}}],[\"是的\",{\"1\":{\"1782\":1}}],[\"是我太单纯了\",{\"1\":{\"1773\":1}}],[\"是伊斯兰教内的一种宗教修行和灵性实践的方式\",{\"1\":{\"1767\":1}}],[\"是东仪天主教会的23个成员之一\",{\"1\":{\"1762\":1}}],[\"是天主教会的一部分\",{\"1\":{\"1762\":1}}],[\"是国际机票业务核心的基础服务\",{\"1\":{\"1751\":1}}],[\"是世界航空业通过国际民航组织\",{\"1\":{\"1741\":1}}],[\"是某一个舱等下的细分舱位\",{\"1\":{\"1739\":1}}],[\"是某个远程仓库引用\",{\"1\":{\"1333\":1}}],[\"是库存系统技术上最大的挑战之一\",{\"1\":{\"1737\":1}}],[\"是旅客购买机票实际支付的价格\",{\"1\":{\"1733\":1}}],[\"是指航司为了提高销量或客座率\",{\"1\":{\"1732\":1}}],[\"是航司发布出去\",{\"1\":{\"1732\":1}}],[\"是航空公司it架构中最核心的部分\",{\"1\":{\"1723\":1}}],[\"是没有折扣的说法的\",{\"1\":{\"1732\":1}}],[\"是给机场工作人员使用的\",{\"1\":{\"1723\":1}}],[\"是给航空公司工作人员使用的系统\",{\"1\":{\"1723\":1}}],[\"是给代理商分销使用的订座系统\",{\"1\":{\"1723\":1}}],[\"是因为把相同元素形成的排列视为了不同的序列\",{\"1\":{\"1675\":1}}],[\"是内部网络使用rpc的主要原因\",{\"1\":{\"1623\":1}}],[\"是能收发数据\",{\"1\":{\"1623\":1}}],[\"是有状态还是无状态\",{\"1\":{\"1614\":1}}],[\"是模型\",{\"1\":{\"1604\":1}}],[\"是记录锁和间隙锁的组合\",{\"1\":{\"1561\":1}}],[\"是已经刷盘的位置\",{\"1\":{\"1555\":1}}],[\"是聚集索引\",{\"1\":{\"1541\":1}}],[\"是所有异常和错误的超类\",{\"1\":{\"1533\":1}}],[\"是强引用不会被自动回收\",{\"1\":{\"1514\":1}}],[\"是thread类的静态方法\",{\"1\":{\"1512\":1}}],[\"是不区分核心\",{\"1\":{\"1511\":1}}],[\"是不是\",{\"1\":{\"998\":2}}],[\"是统计学上\",{\"1\":{\"1494\":1}}],[\"是异步网络模式\",{\"1\":{\"1488\":1}}],[\"是异步监听\",{\"1\":{\"819\":1}}],[\"是多\",{\"1\":{\"1488\":1}}],[\"是多个核心各自独有的\",{\"1\":{\"1435\":1}}],[\"是多个双端队列的本地缓冲区\",{\"1\":{\"450\":1}}],[\"是始终匆忙的状态\",{\"1\":{\"1470\":1}}],[\"是速度最快的\",{\"1\":{\"1459\":1}}],[\"是由内核管理的线程\",{\"1\":{\"1451\":1}}],[\"是由用户态的线程库来完成线程的管理\",{\"1\":{\"1451\":1}}],[\"是由很多个\",{\"1\":{\"1435\":1}}],[\"是混合型内核\",{\"1\":{\"1441\":1}}],[\"是宏内核设计\",{\"1\":{\"1441\":1}}],[\"是面向字节流的协议\",{\"1\":{\"1417\":1}}],[\"是面向行的\",{\"1\":{\"693\":1}}],[\"是响应\",{\"1\":{\"1400\":1}}],[\"是默认的代理创建器\",{\"1\":{\"1380\":1}}],[\"是默认的远程仓库引用\",{\"1\":{\"1338\":1}}],[\"是被动的\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"是基于红黑树实现的有序键值对集合\",{\"1\":{\"1495\":1}}],[\"是基于\",{\"1\":{\"1279\":1,\"1516\":1,\"1618\":1}}],[\"是根据锁键来进行灰度\",{\"1\":{\"1240\":1}}],[\"是单机程序\",{\"1\":{\"1225\":1}}],[\"是分散\",{\"1\":{\"1221\":1}}],[\"是信息化时代的基础支撑\",{\"1\":{\"1211\":1}}],[\"是事务id\",{\"1\":{\"1174\":1}}],[\"是cpu或编译器在对内存随机访问的操作中的一个同步点\",{\"1\":{\"1142\":1}}],[\"是保证当线程由于页缺失故障\",{\"1\":{\"1119\":1}}],[\"是保存相对\",{\"1\":{\"475\":1}}],[\"是把\",{\"1\":{\"1115\":1}}],[\"是真正意义上提交任务到线程池去执行\",{\"1\":{\"1113\":1}}],[\"是其中最为重要的实现之一\",{\"1\":{\"1104\":1}}],[\"是通过\",{\"1\":{\"1074\":1,\"1791\":1}}],[\"是方法名\",{\"1\":{\"1059\":1}}],[\"是日常开发中使用的事务管理器\",{\"1\":{\"1052\":1}}],[\"是在一个容器里运行的\",{\"1\":{\"1791\":1}}],[\"是在spring\",{\"1\":{\"1716\":1}}],[\"是在原有提交的基础上将差异内容反映进去\",{\"1\":{\"1633\":1}}],[\"是在内部设置一个\",{\"1\":{\"1041\":1}}],[\"是在插入数据行之前\",{\"1\":{\"561\":1}}],[\"是实际开发中的首选\",{\"1\":{\"1040\":1}}],[\"是实际的代理目标对象\",{\"1\":{\"1019\":1}}],[\"是将移出窗口的字符\",{\"1\":{\"990\":1}}],[\"是将移入窗口的字符\",{\"1\":{\"990\":1}}],[\"是长度为16384的clusternode指针数组\",{\"1\":{\"946\":1}}],[\"是redis的高可用性解决方案\",{\"1\":{\"938\":1}}],[\"是如何完成这几个步骤的\",{\"1\":{\"863\":1}}],[\"是登录\",{\"1\":{\"848\":1}}],[\"是最大段长度\",{\"1\":{\"839\":1}}],[\"是从当前节点找上一个出站处理器\",{\"1\":{\"823\":1}}],[\"是按照\",{\"1\":{\"823\":2}}],[\"是原材料\",{\"1\":{\"823\":1}}],[\"是个未连接的通道对象\",{\"1\":{\"820\":1}}],[\"是什么\",{\"0\":{\"807\":1}}],[\"是用户的订单号\",{\"1\":{\"1240\":1}}],[\"是用于集群搭建的\",{\"1\":{\"1170\":1}}],[\"是用于操作文件的\",{\"1\":{\"775\":1}}],[\"是用来实现事务的持久性\",{\"1\":{\"639\":1}}],[\"是用来存储查询结果集的数据类型\",{\"1\":{\"634\":1}}],[\"是无尽的头痛\",{\"1\":{\"1833\":1}}],[\"是无连接的\",{\"1\":{\"792\":1}}],[\"是无边界的数据缓冲区\",{\"1\":{\"768\":1}}],[\"是无状态的\",{\"1\":{\"490\":1,\"851\":1}}],[\"是非线程安全的\",{\"1\":{\"768\":1}}],[\"是写入位置\",{\"1\":{\"768\":1}}],[\"是平时最常使用的\",{\"1\":{\"768\":1}}],[\"是双向的\",{\"1\":{\"760\":1}}],[\"是读写数据的双向通道\",{\"1\":{\"760\":1}}],[\"是比较合适的选择\",{\"1\":{\"682\":1}}],[\"是null\",{\"1\":{\"583\":1}}],[\"是生成的\",{\"1\":{\"541\":1}}],[\"是生产者id\",{\"1\":{\"461\":1}}],[\"是对zookeeper\",{\"1\":{\"1178\":1}}],[\"是对操作系统线程的封装\",{\"1\":{\"1086\":1}}],[\"是对应的\",{\"1\":{\"541\":1}}],[\"是对索引库中文档的约束\",{\"1\":{\"36\":1}}],[\"是全限定接口名+方法名构成的\",{\"1\":{\"541\":1}}],[\"是当前记录的位置\",{\"1\":{\"1555\":1}}],[\"是当前所在分支\",{\"1\":{\"1333\":1}}],[\"是当前\",{\"1\":{\"490\":1}}],[\"是当前线程所执行的字节码的行号指示器\",{\"1\":{\"202\":1}}],[\"是以日志分段\",{\"1\":{\"476\":1}}],[\"是以开发者思维被设计的\",{\"1\":{\"434\":1}}],[\"是物理上的概念\",{\"1\":{\"475\":1}}],[\"是逻辑上的概念\",{\"1\":{\"475\":1}}],[\"是使用\",{\"1\":{\"411\":1,\"508\":1,\"1628\":1}}],[\"是大型分布式系统不可缺少的中间件\",{\"1\":{\"396\":1}}],[\"是现今最普遍使用的搭配组合\",{\"1\":{\"382\":1}}],[\"是类的5大成分之一\",{\"1\":{\"289\":1}}],[\"是jvm自身的一部分\",{\"1\":{\"254\":1}}],[\"是java\",{\"1\":{\"235\":1}}],[\"是负责加载类文件\",{\"1\":{\"254\":1}}],[\"是oracle提供的一款强大的java应用程序性能监控和管理工具\",{\"1\":{\"238\":1}}],[\"是垃圾回收器管理的主要区域\",{\"1\":{\"210\":1}}],[\"是除强引用外\",{\"1\":{\"185\":1}}],[\"是经典的串行垃圾收集器\",{\"1\":{\"173\":1}}],[\"是经典的消息摘要算法\",{\"1\":{\"14\":1}}],[\"是众多\",{\"1\":{\"155\":1}}],[\"是弱引用\",{\"1\":{\"154\":1}}],[\"是该线程内部的变量值\",{\"1\":{\"154\":1,\"1514\":1}}],[\"是共享的\",{\"1\":{\"154\":1}}],[\"是就返回true\",{\"1\":{\"129\":1}}],[\"是下一个段号\",{\"1\":{\"37\":1}}],[\"是一款开源的分布式事务解决方案\",{\"1\":{\"1287\":1}}],[\"是一款优秀的持久层框架\",{\"1\":{\"503\":1}}],[\"是一类同步屏障指令\",{\"1\":{\"1142\":1}}],[\"是一段可以传递的代码\",{\"1\":{\"298\":1}}],[\"是一组\",{\"1\":{\"817\":1}}],[\"是一组以8字节为基础单位的二进制流\",{\"1\":{\"240\":1}}],[\"是一组活跃的引用\",{\"1\":{\"224\":1}}],[\"是一种逻辑日志\",{\"1\":{\"1556\":1}}],[\"是一种通过硬件实现的乐观锁并发安全的技术\",{\"1\":{\"1513\":1}}],[\"是一种通过建立倒排索引\",{\"1\":{\"697\":1}}],[\"是一种粗暴的关闭方式\",{\"1\":{\"1420\":1}}],[\"是一种业务侵入式较强的事务方案\",{\"1\":{\"1284\":1}}],[\"是一种分布式协调服务\",{\"1\":{\"1161\":1}}],[\"是一种接口描述语言和二进制通讯协议\",{\"1\":{\"1124\":1}}],[\"是一种重量级的操作\",{\"1\":{\"799\":1}}],[\"是一种硬件单元\",{\"1\":{\"799\":1}}],[\"是一种虚拟存在的表\",{\"1\":{\"621\":1}}],[\"是一种特殊的间隙锁\",{\"1\":{\"561\":1}}],[\"是一种为\",{\"1\":{\"408\":1}}],[\"是一种基于轻量级代理的\",{\"1\":{\"407\":1}}],[\"是一种具有现代特征的二进制协议\",{\"1\":{\"404\":1}}],[\"是一种结构型设计模式\",{\"1\":{\"373\":1}}],[\"是一种将\",{\"1\":{\"270\":1}}],[\"是一种由red\",{\"1\":{\"178\":1}}],[\"是一种面向服务端应用的垃圾收集器\",{\"1\":{\"177\":1}}],[\"是一种以低停顿时间为目标的垃圾收集器\",{\"1\":{\"176\":1}}],[\"是一种以吞吐量为主要设计目标的并行垃圾收集器\",{\"1\":{\"175\":1}}],[\"是一种适合老年区的移动式算法\",{\"1\":{\"170\":1}}],[\"是一种实现无锁的思想\",{\"1\":{\"149\":1}}],[\"是一种悲观锁\",{\"1\":{\"148\":1}}],[\"是一种替换\",{\"1\":{\"26\":1}}],[\"是一个机票搜索功能\",{\"1\":{\"1732\":1}}],[\"是一个物理硬件层抽象\",{\"1\":{\"1634\":1}}],[\"是一个专门用于监控\",{\"1\":{\"1589\":1}}],[\"是一个\",{\"1\":{\"1570\":1}}],[\"是一个虚拟的双向队列\",{\"1\":{\"1516\":1}}],[\"是一个修正值\",{\"1\":{\"1436\":1}}],[\"是一个域名\",{\"1\":{\"1422\":1}}],[\"是一个内容寻址文件系统\",{\"1\":{\"1348\":1}}],[\"是一个特殊指针\",{\"1\":{\"1332\":1}}],[\"是一个文件\",{\"1\":{\"1310\":1}}],[\"是一个四层的概念\",{\"1\":{\"1301\":1}}],[\"是一个提供10g\",{\"1\":{\"1301\":1}}],[\"是一个在\",{\"1\":{\"1264\":1}}],[\"是一个实现了blockingqueue接口的对象\",{\"1\":{\"1107\":1}}],[\"是一个假工厂直接返回该对象\",{\"1\":{\"1028\":1,\"1382\":1}}],[\"是一个无边界的流式协议\",{\"1\":{\"839\":1}}],[\"是一个工具类\",{\"1\":{\"834\":1}}],[\"是一个组合的\",{\"1\":{\"833\":1}}],[\"是一个指针\",{\"1\":{\"827\":2,\"1344\":1}}],[\"是一个异步的\",{\"1\":{\"807\":1}}],[\"是一个重操作\",{\"1\":{\"550\":1}}],[\"是一个单调递增且不变的值\",{\"1\":{\"490\":1}}],[\"是一个抽象模型\",{\"1\":{\"142\":1}}],[\"是一个新的集合类型\",{\"1\":{\"66\":1}}],[\"是一个分布式流式处理平台\",{\"1\":{\"1626\":1}}],[\"是一个分布式\",{\"1\":{\"31\":1}}],[\"是一个业界标准的授权协议\",{\"1\":{\"15\":1}}],[\"是服务端存储\",{\"1\":{\"17\":1}}],[\"是客户端存储\",{\"1\":{\"17\":1}}],[\"是否只保留最新的提交记录\",{\"1\":{\"1791\":1}}],[\"是否使用长连接\",{\"1\":{\"1398\":1}}],[\"是否使用默认事务配置\",{\"1\":{\"1049\":1}}],[\"是否回滚\",{\"1\":{\"1383\":1}}],[\"是否参与秒杀优惠\",{\"1\":{\"1369\":1}}],[\"是否需要初始化\",{\"1\":{\"1139\":1}}],[\"是否存活\",{\"1\":{\"1095\":1}}],[\"是否存在于\",{\"1\":{\"998\":1}}],[\"是否继承父线程私有变量\",{\"1\":{\"1088\":1}}],[\"是否已经初始化\",{\"1\":{\"1139\":1}}],[\"是否已经按排序器有序\",{\"1\":{\"61\":1}}],[\"是否已完成\",{\"1\":{\"1044\":1}}],[\"是否为需要回滚\",{\"1\":{\"1044\":1}}],[\"是否有缓存\",{\"1\":{\"1261\":1}}],[\"是否有保存点\",{\"1\":{\"1044\":1}}],[\"是否有效\",{\"1\":{\"27\":2,\"1643\":2}}],[\"是否仅只读\",{\"1\":{\"1040\":1}}],[\"是否是新的事务\",{\"1\":{\"1044\":1}}],[\"是否是单例\",{\"1\":{\"1010\":1}}],[\"是否是可共享的\",{\"1\":{\"851\":1}}],[\"是否在rehash\",{\"1\":{\"882\":1}}],[\"是否开启\",{\"1\":{\"792\":1}}],[\"是否开启驼峰命名自动映射\",{\"1\":{\"519\":1}}],[\"是否可以将用户名用作密码\",{\"1\":{\"1148\":1}}],[\"是否可以回滚等等\",{\"1\":{\"1042\":1}}],[\"是否可以访问\",{\"1\":{\"754\":1,\"1557\":1}}],[\"是否可中断\",{\"1\":{\"6\":1}}],[\"是否重用的条件\",{\"1\":{\"750\":1}}],[\"是否小于等于15\",{\"1\":{\"623\":1}}],[\"是否利用索引等\",{\"1\":{\"570\":1}}],[\"是否自动周期性地向服务器提交偏移量\",{\"1\":{\"491\":1}}],[\"是否传递给父级\",{\"1\":{\"389\":1}}],[\"是否所有受查异常都被正确处理了等问题\",{\"1\":{\"262\":1}}],[\"是否等于\",{\"1\":{\"148\":1}}],[\"是否支付\",{\"1\":{\"124\":1}}],[\"是否包含值并取值\",{\"1\":{\"58\":1}}],[\"是否创建索引\",{\"1\":{\"36\":1}}],[\"是否索引\",{\"1\":{\"34\":1}}],[\"是否超时\",{\"1\":{\"6\":1}}],[\"是\",{\"1\":{\"2\":1,\"9\":1,\"62\":1,\"84\":1,\"134\":1,\"139\":2,\"153\":1,\"156\":1,\"157\":1,\"158\":1,\"173\":1,\"174\":1,\"175\":1,\"188\":2,\"195\":1,\"196\":1,\"362\":1,\"490\":1,\"532\":1,\"541\":1,\"643\":1,\"657\":1,\"679\":1,\"818\":1,\"824\":2,\"827\":1,\"839\":3,\"858\":1,\"868\":1,\"1054\":1,\"1077\":1,\"1134\":1,\"1178\":1,\"1214\":1,\"1221\":1,\"1222\":1,\"1281\":1,\"1302\":1,\"1338\":1,\"1368\":1,\"1400\":1,\"1411\":1,\"1435\":1,\"1478\":1,\"1511\":1,\"1514\":1,\"1608\":1,\"1620\":1,\"1790\":2}}],[\"a创建offer\",{\"1\":{\"1861\":1}}],[\"a收到后\",{\"1\":{\"1861\":1}}],[\"a收到b返回的pong消息后\",{\"1\":{\"945\":1}}],[\"a收集所有candidate后通过信令传给peer\",{\"1\":{\"1860\":1}}],[\"ajax等封装成统一的接口\",{\"1\":{\"1859\":1}}],[\"a6400\",{\"1\":{\"1799\":1}}],[\"aaaa\",{\"1\":{\"1792\":2}}],[\"af\",{\"1\":{\"1461\":4}}],[\"afterthrowing\",{\"1\":{\"1602\":1}}],[\"afterreturning\",{\"1\":{\"1602\":1}}],[\"afterpropertiesset\",{\"1\":{\"1381\":1}}],[\"afterexecute\",{\"1\":{\"1115\":2}}],[\"aftereach\",{\"1\":{\"356\":1}}],[\"aftercompletion\",{\"1\":{\"1045\":1}}],[\"aftercommit\",{\"1\":{\"1045\":1}}],[\"afterclass\",{\"1\":{\"356\":1}}],[\"afterall\",{\"1\":{\"356\":1}}],[\"after\",{\"1\":{\"183\":4,\"356\":1,\"471\":1,\"636\":1,\"941\":1,\"943\":1,\"1016\":1,\"1602\":2}}],[\"airpods\",{\"1\":{\"1828\":1}}],[\"airport`\",{\"1\":{\"1358\":1}}],[\"airports`\",{\"1\":{\"1358\":1}}],[\"airports\",{\"0\":{\"1358\":1}}],[\"airport\",{\"1\":{\"1355\":1,\"1358\":2}}],[\"air\",{\"1\":{\"1741\":1}}],[\"aioserver\",{\"1\":{\"797\":1}}],[\"aio\",{\"0\":{\"795\":1,\"796\":1,\"797\":1},\"1\":{\"783\":1,\"795\":1,\"796\":1,\"1478\":1,\"1488\":2,\"1504\":1}}],[\"a删除缓存\",{\"1\":{\"1267\":1,\"1585\":1}}],[\"a参数指定包的类加载器\",{\"1\":{\"1135\":1}}],[\"audio\",{\"1\":{\"1854\":1}}],[\"auditsubclass\",{\"1\":{\"1097\":1}}],[\"autopurge\",{\"1\":{\"1164\":2}}],[\"autoproxyregistrar\",{\"1\":{\"1058\":2}}],[\"autoinc\",{\"1\":{\"562\":1}}],[\"autoconfigurationimportselector\",{\"1\":{\"1598\":1}}],[\"autoconfigurationpackage\",{\"1\":{\"1598\":1}}],[\"autoconfigure\",{\"1\":{\"1054\":1}}],[\"autocommit\",{\"1\":{\"511\":1,\"542\":3,\"734\":2,\"1033\":1}}],[\"autocloseable\",{\"1\":{\"317\":1,\"318\":1,\"346\":1}}],[\"auto\",{\"0\":{\"562\":1},\"1\":{\"422\":1,\"467\":1,\"485\":2,\"491\":2,\"564\":1,\"598\":1,\"615\":1,\"634\":1,\"720\":1,\"721\":1,\"1345\":1,\"1357\":2,\"1358\":2,\"1567\":1}}],[\"autodelete\",{\"1\":{\"418\":2}}],[\"autowiredannotationbeanpostprocessor\",{\"1\":{\"1025\":1}}],[\"autowired\",{\"1\":{\"418\":2,\"1025\":1,\"1038\":1,\"1039\":1,\"1180\":1,\"1181\":1,\"1188\":1,\"1595\":1,\"1608\":1,\"1718\":1}}],[\"autoboxing\",{\"1\":{\"263\":1}}],[\"authenticated\",{\"1\":{\"923\":1}}],[\"author=\",{\"1\":{\"1322\":1}}],[\"authormapper\",{\"1\":{\"528\":2}}],[\"author\",{\"1\":{\"348\":1,\"520\":4,\"530\":6,\"535\":4,\"536\":4}}],[\"authorization\",{\"1\":{\"15\":3}}],[\"authsessionconfig\",{\"1\":{\"24\":1}}],[\"authserverconstant\",{\"1\":{\"14\":2,\"15\":1}}],[\"auth\",{\"1\":{\"15\":2,\"948\":2,\"1177\":1}}],[\"a为b创建clusternode\",{\"1\":{\"945\":1}}],[\"aes\",{\"1\":{\"1401\":1}}],[\"ae\",{\"1\":{\"919\":2,\"920\":1}}],[\"aop要重写方法\",{\"1\":{\"1061\":1}}],[\"aopautoconfiguration\",{\"1\":{\"1057\":1}}],[\"aopproxy\",{\"1\":{\"1020\":1}}],[\"aop\",{\"0\":{\"1013\":1,\"1017\":1,\"1023\":1,\"1380\":1,\"1600\":1,\"1601\":1},\"1\":{\"1004\":1,\"1021\":1,\"1028\":1,\"1057\":2,\"1059\":1,\"1060\":1,\"1532\":1,\"1599\":2,\"1601\":1}}],[\"aof重写\",{\"1\":{\"1577\":1}}],[\"aof同步\",{\"1\":{\"927\":1}}],[\"aof伪客户端\",{\"1\":{\"924\":1}}],[\"aof\",{\"0\":{\"915\":1,\"917\":1,\"1577\":1},\"1\":{\"917\":1,\"928\":1,\"961\":1,\"1170\":1,\"1219\":1,\"1576\":1,\"1577\":9}}],[\"aof持久化\",{\"1\":{\"908\":1,\"929\":1}}],[\"aot\",{\"1\":{\"255\":1,\"270\":2,\"271\":3,\"272\":3,\"273\":1}}],[\"ahead\",{\"1\":{\"732\":2}}],[\"axis等web\",{\"1\":{\"434\":1}}],[\"am命令调用\",{\"1\":{\"1345\":1}}],[\"amend\",{\"0\":{\"1323\":1},\"1\":{\"1323\":1}}],[\"amqpadvanced\",{\"1\":{\"1625\":1}}],[\"amqpadmin\",{\"1\":{\"416\":1,\"418\":6}}],[\"amqp等\",{\"1\":{\"434\":1}}],[\"amqp<\",{\"1\":{\"416\":1}}],[\"amqp模型\",{\"1\":{\"406\":1}}],[\"amqp架构\",{\"1\":{\"405\":1}}],[\"amqp\",{\"0\":{\"404\":1},\"1\":{\"406\":1,\"410\":1,\"411\":1,\"435\":2,\"1628\":1}}],[\"amp\",{\"1\":{\"357\":1}}],[\"avi\",{\"1\":{\"1868\":5}}],[\"avc格式\",{\"1\":{\"1868\":1}}],[\"avc\",{\"1\":{\"1868\":1}}],[\"av在eterm里是个指令\",{\"1\":{\"1734\":1}}],[\"av\",{\"0\":{\"1734\":1},\"1\":{\"1363\":1,\"1732\":1}}],[\"available\",{\"1\":{\"1207\":1,\"1279\":1,\"1466\":1,\"1618\":1,\"1740\":1}}],[\"availableprocessors\",{\"1\":{\"791\":2}}],[\"availability的前两个字母缩写\",{\"1\":{\"1734\":1}}],[\"availability\",{\"1\":{\"1206\":2,\"1278\":1,\"1618\":1}}],[\"averagingdouble\",{\"1\":{\"1068\":1}}],[\"average\",{\"1\":{\"1068\":1}}],[\"avg\",{\"1\":{\"124\":4,\"584\":1}}],[\"avoid\",{\"1\":{\"8\":1}}],[\"ag\",{\"1\":{\"1692\":1}}],[\"ago\",{\"1\":{\"1341\":1}}],[\"agent\",{\"1\":{\"1722\":1}}],[\"age\",{\"1\":{\"83\":1,\"583\":9,\"585\":2,\"586\":1,\"598\":3,\"634\":1,\"701\":3,\"702\":1,\"1077\":2,\"1227\":2,\"1567\":3,\"1871\":1}}],[\"aggregationbuilders\",{\"1\":{\"51\":1}}],[\"aggregation\",{\"1\":{\"51\":1}}],[\"ad350\",{\"1\":{\"1796\":2}}],[\"adj调整被杀掉的概率\",{\"1\":{\"1446\":1}}],[\"adj\",{\"1\":{\"1446\":1}}],[\"admin\",{\"1\":{\"1164\":1,\"1168\":1}}],[\"advancerunstate\",{\"1\":{\"1116\":2}}],[\"advanced\",{\"1\":{\"404\":1}}],[\"advisor\",{\"1\":{\"1058\":1,\"1059\":9}}],[\"advisedsupport\",{\"0\":{\"1019\":1},\"1\":{\"1020\":1,\"1380\":1}}],[\"advicemodeimportselector<enabletransactionmanagement>\",{\"1\":{\"1058\":1}}],[\"advicemode\",{\"1\":{\"1057\":2,\"1058\":3}}],[\"advice\",{\"1\":{\"1023\":1,\"1380\":1}}],[\"adaptation\",{\"1\":{\"1866\":1}}],[\"adaptiverecvbytebufallocator\",{\"1\":{\"861\":1}}],[\"adaptive\",{\"1\":{\"638\":1}}],[\"adaptee\",{\"1\":{\"374\":1}}],[\"adapter\",{\"1\":{\"374\":2}}],[\"adler32\",{\"1\":{\"83\":2}}],[\"add后\",{\"1\":{\"1351\":1}}],[\"addnodelistener\",{\"1\":{\"1192\":1}}],[\"addworkerfailed\",{\"1\":{\"1114\":1}}],[\"addworker\",{\"0\":{\"1114\":1},\"1\":{\"1113\":4,\"1114\":2,\"1115\":1,\"1120\":1}}],[\"addunstarted\",{\"1\":{\"1088\":1}}],[\"addtrack\",{\"1\":{\"1857\":1,\"1861\":1}}],[\"addtohead\",{\"1\":{\"1002\":3,\"1651\":3}}],[\"addtask\",{\"1\":{\"153\":5}}],[\"add方法会抛出一个illegalstateexception异常\",{\"1\":{\"987\":1}}],[\"addd\",{\"1\":{\"985\":1}}],[\"adddocument\",{\"1\":{\"53\":1}}],[\"add和remove都是o\",{\"1\":{\"984\":1,\"985\":1}}],[\"addslots\",{\"1\":{\"946\":2}}],[\"addr命令之后\",{\"1\":{\"942\":1}}],[\"addr命令\",{\"1\":{\"942\":1}}],[\"addr\",{\"1\":{\"941\":1,\"1792\":1}}],[\"addresssize\",{\"1\":{\"1143\":1}}],[\"address\",{\"1\":{\"42\":1,\"585\":2,\"792\":2,\"1136\":5,\"1150\":2,\"1792\":2}}],[\"addcomponents\",{\"1\":{\"833\":1}}],[\"addcallback\",{\"1\":{\"77\":1}}],[\"addmapper\",{\"1\":{\"541\":1}}],[\"addmappers\",{\"1\":{\"541\":1}}],[\"additivity=\",{\"1\":{\"389\":2,\"391\":1}}],[\"addauth\",{\"1\":{\"1177\":1}}],[\"addargument\",{\"1\":{\"384\":1}}],[\"addall\",{\"1\":{\"304\":1}}],[\"addfinalrefcount\",{\"1\":{\"184\":2}}],[\"addlinstener\",{\"1\":{\"822\":1}}],[\"addlistener\",{\"1\":{\"77\":1,\"819\":1,\"820\":1,\"821\":1,\"822\":2,\"873\":1,\"1192\":1}}],[\"addlast\",{\"1\":{\"93\":4,\"811\":3,\"812\":1,\"818\":3,\"820\":1,\"823\":2,\"842\":1,\"843\":1,\"846\":2,\"873\":1,\"1670\":1,\"1672\":1,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1}}],[\"addvalue\",{\"1\":{\"60\":1}}],[\"add\",{\"0\":{\"1315\":1},\"1\":{\"60\":1,\"64\":1,\"66\":3,\"70\":4,\"118\":1,\"129\":1,\"195\":2,\"488\":2,\"576\":2,\"595\":3,\"599\":3,\"639\":1,\"675\":3,\"782\":1,\"783\":1,\"849\":1,\"873\":1,\"985\":2,\"987\":1,\"988\":1,\"1001\":3,\"1068\":3,\"1090\":1,\"1114\":1,\"1315\":2,\"1319\":1,\"1321\":1,\"1326\":1,\"1338\":1,\"1344\":1,\"1347\":1,\"1350\":2,\"1567\":2,\"1633\":1,\"1669\":2,\"1670\":1,\"1671\":2,\"1672\":1,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1,\"1677\":2,\"1718\":1,\"1791\":1,\"1871\":5}}],[\"att\",{\"1\":{\"1136\":1}}],[\"attach\",{\"1\":{\"788\":1,\"789\":2}}],[\"attachment\",{\"1\":{\"788\":2,\"789\":1,\"796\":4,\"797\":13,\"865\":1}}],[\"attrs\",{\"1\":{\"779\":2}}],[\"attr=val\",{\"1\":{\"357\":1}}],[\"attr\",{\"1\":{\"357\":2}}],[\"attribute\",{\"1\":{\"240\":2}}],[\"attributes\",{\"1\":{\"240\":3,\"474\":1}}],[\"at\",{\"1\":{\"461\":2,\"638\":1,\"739\":1,\"1287\":1,\"1336\":1,\"1555\":1}}],[\"aterror\",{\"1\":{\"384\":1}}],[\"athrow指令用于抛出异常\",{\"1\":{\"241\":1}}],[\"atmostonce\",{\"1\":{\"461\":1}}],[\"atmost\",{\"1\":{\"81\":1,\"1714\":1,\"1715\":1}}],[\"atleastonce\",{\"1\":{\"461\":1}}],[\"atleast\",{\"1\":{\"81\":1,\"1714\":2,\"1715\":2}}],[\"atomicity\",{\"1\":{\"735\":1,\"1032\":1}}],[\"atomicintegerfieldupdater\",{\"1\":{\"150\":1}}],[\"atomicintegerarray\",{\"1\":{\"150\":1}}],[\"atomicinteger\",{\"1\":{\"150\":1,\"1108\":4,\"1112\":3}}],[\"atomicmarkablereference\",{\"1\":{\"150\":1}}],[\"atomiclongfieldupdater\",{\"1\":{\"150\":1}}],[\"atomiclongarray\",{\"1\":{\"150\":1}}],[\"atomiclong\",{\"1\":{\"150\":1,\"476\":1}}],[\"atomicboolean\",{\"1\":{\"150\":1}}],[\"atomicreferencefieldupdater\",{\"1\":{\"150\":1}}],[\"atomicreferencearray\",{\"1\":{\"150\":1}}],[\"atomicreference\",{\"1\":{\"148\":1,\"150\":1}}],[\"atomicstampedreference\",{\"1\":{\"148\":1,\"150\":1}}],[\"atomic\",{\"1\":{\"3\":1,\"779\":1,\"1200\":1}}],[\"abd\",{\"1\":{\"1767\":1}}],[\"about\",{\"1\":{\"1144\":1}}],[\"aborttransaction\",{\"1\":{\"461\":1}}],[\"abortpolicy\",{\"1\":{\"332\":1,\"1109\":1,\"1369\":1,\"1511\":1}}],[\"aba\",{\"1\":{\"148\":1,\"150\":1,\"1513\":1}}],[\"abs\",{\"1\":{\"129\":1}}],[\"abstractexecutorservice\",{\"1\":{\"1111\":1,\"1113\":3}}],[\"abstracttransactionmanagementconfiguration\",{\"1\":{\"1059\":1}}],[\"abstracttask\",{\"1\":{\"153\":1}}],[\"abstractplatformtransactionmanager\",{\"0\":{\"1048\":1},\"1\":{\"1048\":1}}],[\"abstractbeanfactory\",{\"1\":{\"1025\":1}}],[\"abstractbootstrap\",{\"1\":{\"864\":1}}],[\"abstractautowirecapablebeanfactory\",{\"1\":{\"1009\":1,\"1023\":1}}],[\"abstractniomessagechannel\",{\"1\":{\"873\":1}}],[\"abstractniochannel\",{\"1\":{\"865\":1,\"867\":1,\"873\":3}}],[\"abstractniobytechannel\",{\"1\":{\"829\":1,\"873\":1}}],[\"abstractunsafe\",{\"1\":{\"865\":1}}],[\"abstractchannel\",{\"1\":{\"865\":1}}],[\"abstractchannelhandlercontext\",{\"1\":{\"818\":2}}],[\"abstractcache\",{\"1\":{\"73\":1}}],[\"abstraction\",{\"1\":{\"375\":1}}],[\"abstractiterator\",{\"1\":{\"71\":1}}],[\"abstract等\",{\"1\":{\"240\":1}}],[\"abstractservice\",{\"1\":{\"78\":3}}],[\"abstractmap<k\",{\"1\":{\"73\":1}}],[\"abstractownablesynchronizer\",{\"1\":{\"3\":2}}],[\"abstract\",{\"1\":{\"3\":3,\"9\":2,\"187\":1,\"292\":1,\"829\":1,\"1039\":2,\"1045\":1,\"1383\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"2\":1,\"3\":1,\"9\":1,\"1114\":1,\"1516\":1}}],[\"abcde\",{\"1\":{\"1422\":1}}],[\"abcdef\",{\"1\":{\"839\":2}}],[\"abcdefg\",{\"1\":{\"79\":2}}],[\"abcd\",{\"1\":{\"1177\":1,\"1701\":1}}],[\"abchhhabc\",{\"1\":{\"79\":1}}],[\"abc\",{\"1\":{\"79\":5,\"301\":6,\"839\":2,\"1330\":1,\"1547\":1}}],[\"a=group\",{\"1\":{\"1862\":1}}],[\"a=rtcpmux\",{\"1\":{\"1862\":1}}],[\"a=rtcp\",{\"1\":{\"1862\":1}}],[\"a=rtpmap\",{\"1\":{\"1862\":2}}],[\"a=ice\",{\"1\":{\"1862\":2}}],[\"a=crypto\",{\"1\":{\"1862\":1}}],[\"a=candidate\",{\"1\":{\"1862\":1}}],[\"a=<type>\",{\"1\":{\"1862\":1}}],[\"a=fingerprint\",{\"1\":{\"1862\":1}}],[\"a=fmtp\",{\"1\":{\"1862\":2}}],[\"a=framerate\",{\"1\":{\"1862\":1}}],[\"a=会话属性\",{\"1\":{\"1862\":1}}],[\"a=全局属性\",{\"1\":{\"1862\":1}}],[\"a=\",{\"1\":{\"67\":1}}],[\"anp\",{\"1\":{\"1698\":1}}],[\"anonymous\",{\"1\":{\"1446\":1}}],[\"another\",{\"1\":{\"1214\":1}}],[\"ans\",{\"1\":{\"993\":5,\"994\":4,\"1662\":3,\"1669\":2,\"1671\":1,\"1673\":2,\"1674\":2,\"1675\":4,\"1676\":2}}],[\"an命令结果中展示为\",{\"1\":{\"856\":2}}],[\"an\",{\"1\":{\"807\":1,\"1322\":1,\"1664\":1,\"1868\":6}}],[\"anycollection\",{\"1\":{\"1712\":1}}],[\"anychar\",{\"1\":{\"1712\":1}}],[\"anymap\",{\"1\":{\"1712\":1}}],[\"anylist\",{\"1\":{\"1712\":1}}],[\"anylong\",{\"1\":{\"1712\":1}}],[\"anyset\",{\"1\":{\"1712\":1}}],[\"anystring\",{\"1\":{\"1712\":1}}],[\"anyshort\",{\"1\":{\"1712\":1}}],[\"anybyte\",{\"1\":{\"1712\":1}}],[\"anyboolean\",{\"1\":{\"1712\":1}}],[\"anyfloat\",{\"1\":{\"1712\":1}}],[\"anydouble\",{\"1\":{\"1712\":1}}],[\"anyint\",{\"1\":{\"1711\":1,\"1712\":2,\"1714\":2,\"1715\":2}}],[\"any\",{\"1\":{\"609\":2,\"726\":1,\"1712\":2}}],[\"anyof\",{\"1\":{\"79\":2}}],[\"annotated\",{\"1\":{\"1329\":1}}],[\"annotatedelement\",{\"1\":{\"348\":1}}],[\"annotationtransactionattributesource\",{\"1\":{\"1059\":1}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"90\":2,\"98\":2}}],[\"annotation\",{\"1\":{\"90\":1,\"348\":1}}],[\"android\",{\"1\":{\"826\":1}}],[\"and\",{\"1\":{\"69\":1,\"93\":1,\"196\":2,\"214\":1,\"263\":1,\"391\":1,\"409\":1,\"471\":1,\"535\":3,\"536\":4,\"537\":3,\"583\":6,\"632\":1,\"1002\":1,\"1148\":2,\"1396\":1,\"1665\":2,\"1791\":2}}],[\"anenum\",{\"1\":{\"60\":2}}],[\"anint\",{\"1\":{\"60\":2}}],[\"analyze\",{\"1\":{\"1567\":1}}],[\"analyzeandvalidatemessageset\",{\"1\":{\"476\":1}}],[\"analyzer\",{\"1\":{\"34\":1,\"36\":1,\"42\":1}}],[\"analysis\",{\"1\":{\"233\":1}}],[\"analyer\",{\"1\":{\"53\":1}}],[\"asvpf\",{\"1\":{\"1862\":1}}],[\"asia\",{\"1\":{\"1697\":1}}],[\"asplatformtransactionmanager\",{\"1\":{\"1059\":1}}],[\"aspect\",{\"1\":{\"1058\":2}}],[\"aspectjexpressionpointcutadvisor\",{\"1\":{\"1023\":2,\"1380\":2}}],[\"aspectjexpressionpointcut\",{\"1\":{\"1018\":1,\"1019\":1}}],[\"aspectj\",{\"1\":{\"1018\":1,\"1057\":2,\"1058\":1}}],[\"asm\",{\"1\":{\"1009\":1,\"1014\":1}}],[\"asmap\",{\"1\":{\"67\":1,\"73\":1}}],[\"ask错误只是两个节点在迁移槽的过程中使用的一种临时措施\",{\"1\":{\"947\":1}}],[\"asking一次性标记\",{\"1\":{\"947\":1}}],[\"ask与asking\",{\"1\":{\"947\":1}}],[\"assc\",{\"1\":{\"797\":9}}],[\"association\",{\"1\":{\"532\":1}}],[\"assignment\",{\"1\":{\"494\":1}}],[\"assign\",{\"1\":{\"488\":1}}],[\"assignoffsets\",{\"1\":{\"476\":2}}],[\"assigned\",{\"1\":{\"469\":1}}],[\"assertj\",{\"1\":{\"1716\":1,\"1717\":1}}],[\"asserttrue\",{\"1\":{\"1713\":2}}],[\"assertequals\",{\"1\":{\"1711\":6,\"1712\":4,\"1713\":2}}],[\"assert\",{\"1\":{\"15\":1,\"184\":1,\"196\":1,\"871\":1,\"1055\":1,\"1711\":6,\"1712\":4,\"1713\":6}}],[\"assertasstring\",{\"1\":{\"14\":2}}],[\"asd\",{\"1\":{\"301\":2}}],[\"ast能够表示一个结构正确的源程序\",{\"1\":{\"262\":1}}],[\"ast是一种用来描述程序代码语法结构的树形表示形式\",{\"1\":{\"258\":1}}],[\"astring\",{\"1\":{\"60\":2}}],[\"asynchronous\",{\"1\":{\"807\":1}}],[\"asynchronoussocketchannel\",{\"1\":{\"797\":7}}],[\"asynchronousserversocketchannel\",{\"1\":{\"797\":5}}],[\"asynchronousfilechannel\",{\"1\":{\"796\":3}}],[\"asyncappender\",{\"1\":{\"388\":1}}],[\"async\",{\"1\":{\"163\":1,\"1264\":1}}],[\"as\",{\"1\":{\"115\":1,\"124\":1,\"126\":1,\"129\":1,\"582\":2,\"596\":1,\"603\":4,\"611\":2,\"618\":2,\"622\":5,\"623\":3,\"1002\":1,\"1050\":1,\"1226\":1,\"1567\":3,\"1664\":1}}],[\"aslist\",{\"1\":{\"64\":1,\"1067\":1,\"1263\":1}}],[\"asc|desc\",{\"1\":{\"969\":1}}],[\"ascii\",{\"1\":{\"315\":1}}],[\"asc\",{\"1\":{\"51\":1,\"105\":1,\"586\":2,\"616\":1,\"797\":20}}],[\"aps\",{\"1\":{\"1799\":1}}],[\"apt=106\",{\"1\":{\"1862\":1}}],[\"apt\",{\"1\":{\"1694\":1}}],[\"apendtofile\",{\"1\":{\"1218\":1}}],[\"ap\",{\"1\":{\"1206\":1,\"1207\":1,\"1278\":1,\"1618\":1}}],[\"apos\",{\"1\":{\"357\":1}}],[\"apache\",{\"1\":{\"117\":1,\"376\":4,\"382\":2,\"383\":1,\"385\":1,\"426\":2,\"429\":1,\"432\":1,\"455\":1,\"456\":2,\"457\":2,\"487\":1,\"489\":1,\"809\":1,\"1179\":3,\"1214\":1}}],[\"appclassloader\",{\"1\":{\"1528\":1}}],[\"appel式回收\",{\"1\":{\"1523\":1}}],[\"appendfsync\",{\"1\":{\"961\":1,\"1577\":2}}],[\"appendfsync选项为always时\",{\"1\":{\"961\":1}}],[\"appendinfo\",{\"1\":{\"476\":6}}],[\"append\",{\"1\":{\"476\":2,\"789\":1,\"843\":2,\"915\":1,\"996\":1}}],[\"append=\",{\"1\":{\"388\":1}}],[\"appenders>\",{\"1\":{\"388\":1}}],[\"appenders\",{\"0\":{\"388\":1},\"1\":{\"389\":1}}],[\"applicationlistener\",{\"1\":{\"1012\":2,\"1379\":2}}],[\"applicationcontex\",{\"1\":{\"1012\":1,\"1379\":1}}],[\"applicationcontext结构\",{\"1\":{\"1011\":1}}],[\"applicationcontext\",{\"0\":{\"1011\":1,\"1379\":1},\"1\":{\"90\":2,\"98\":2,\"1011\":1,\"1379\":1}}],[\"application\",{\"1\":{\"254\":1,\"506\":1,\"807\":1,\"1596\":1}}],[\"applypatch\",{\"1\":{\"1345\":3}}],[\"apply\",{\"1\":{\"61\":1,\"1343\":2,\"1633\":1}}],[\"app2\",{\"1\":{\"27\":7,\"1643\":7}}],[\"app1\",{\"1\":{\"27\":6,\"1643\":6}}],[\"apisix\",{\"1\":{\"1621\":1}}],[\"api网关聚合服务\",{\"1\":{\"1300\":1}}],[\"api接口等\",{\"1\":{\"1297\":1}}],[\"api添加了一个新的抽象称为流stream\",{\"1\":{\"1065\":1}}],[\"apidocs\",{\"1\":{\"125\":1}}],[\"api\",{\"0\":{\"384\":1,\"504\":1,\"769\":1,\"777\":1,\"785\":1,\"1181\":1,\"1298\":1,\"1621\":1,\"1857\":1},\"1\":{\"9\":1,\"14\":2,\"15\":1,\"38\":1,\"61\":1,\"62\":2,\"80\":1,\"82\":1,\"89\":1,\"139\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"355\":1,\"357\":1,\"376\":1,\"379\":1,\"380\":2,\"382\":4,\"384\":2,\"403\":1,\"507\":1,\"508\":1,\"760\":2,\"808\":1,\"809\":3,\"819\":1,\"824\":1,\"1120\":1,\"1161\":1,\"1234\":1,\"1298\":5,\"1303\":1,\"1304\":1,\"1540\":1,\"1625\":1}}],[\"aclversion\",{\"1\":{\"1168\":1,\"1174\":1}}],[\"acl\",{\"1\":{\"1168\":2,\"1173\":1}}],[\"aclass\",{\"1\":{\"62\":4}}],[\"actor\",{\"1\":{\"1791\":1}}],[\"actual\",{\"1\":{\"1049\":1}}],[\"activeprofiles\",{\"1\":{\"1608\":1}}],[\"activecount\",{\"1\":{\"1095\":2}}],[\"activeexpirecycle函数实现\",{\"1\":{\"908\":1}}],[\"activesegment\",{\"1\":{\"476\":5}}],[\"activemq代理可以组成一个集群来提供服务\",{\"1\":{\"434\":1}}],[\"activemq模型\",{\"1\":{\"432\":1}}],[\"activemq\",{\"0\":{\"432\":1},\"1\":{\"403\":1,\"410\":1,\"432\":1,\"433\":2,\"434\":3,\"435\":1,\"1109\":1,\"1625\":1}}],[\"active\",{\"1\":{\"186\":1,\"535\":1,\"536\":1,\"749\":1,\"1446\":1,\"1448\":3}}],[\"actions\",{\"0\":{\"1789\":1},\"1\":{\"1790\":4,\"1791\":6}}],[\"action一致\",{\"1\":{\"599\":1}}],[\"action\",{\"1\":{\"163\":9,\"184\":1,\"304\":1,\"599\":2,\"634\":2,\"1055\":3,\"1791\":3,\"1793\":1}}],[\"acid\",{\"0\":{\"735\":1,\"1032\":1},\"1\":{\"678\":1,\"1282\":1,\"1612\":1}}],[\"acc\",{\"1\":{\"1088\":3}}],[\"accpt\",{\"1\":{\"873\":1}}],[\"accpet\",{\"1\":{\"856\":1,\"873\":1}}],[\"account\",{\"1\":{\"515\":1,\"677\":1,\"734\":3}}],[\"accumulator\",{\"1\":{\"450\":2}}],[\"accepttcphandler函数\",{\"1\":{\"919\":1}}],[\"acceptor\",{\"1\":{\"873\":1,\"1280\":1,\"1488\":2,\"1619\":1}}],[\"accepthandler\",{\"1\":{\"797\":3}}],[\"accept\",{\"0\":{\"787\":1},\"1\":{\"343\":1,\"388\":2,\"782\":2,\"783\":2,\"785\":2,\"786\":1,\"787\":1,\"788\":1,\"789\":1,\"791\":3,\"797\":3,\"855\":1,\"856\":2,\"863\":1,\"867\":2,\"873\":5,\"1398\":3,\"1414\":3,\"1461\":1}}],[\"accesscontroller\",{\"1\":{\"1088\":1}}],[\"accesscontrolcontext\",{\"1\":{\"1087\":1,\"1088\":1}}],[\"accesstoken\",{\"1\":{\"15\":4}}],[\"access\",{\"1\":{\"15\":7,\"240\":2,\"355\":1,\"799\":1,\"1168\":1,\"1446\":1,\"1486\":1,\"1631\":1,\"1642\":1,\"1791\":5,\"1871\":7}}],[\"ack在\",{\"1\":{\"1411\":1}}],[\"ack+fin\",{\"1\":{\"1410\":1}}],[\"ack消息\",{\"1\":{\"948\":1}}],[\"acks\",{\"1\":{\"460\":1}}],[\"ack设为0\",{\"1\":{\"461\":1}}],[\"ack设为\",{\"1\":{\"460\":1,\"461\":1}}],[\"ack1\",{\"1\":{\"460\":1}}],[\"ack0\",{\"1\":{\"460\":1}}],[\"ack\",{\"0\":{\"422\":1},\"1\":{\"417\":2,\"420\":3,\"422\":2,\"450\":1,\"460\":9,\"461\":2,\"462\":1,\"839\":2,\"856\":3,\"937\":1,\"1205\":2,\"1395\":1,\"1409\":5,\"1410\":8,\"1411\":3,\"1412\":1,\"1413\":2,\"1414\":2,\"1418\":1,\"1420\":2,\"1426\":1}}],[\"acknowledge\",{\"1\":{\"417\":1,\"422\":1}}],[\"acquireuninterruptibly\",{\"1\":{\"159\":1}}],[\"acquires\",{\"1\":{\"9\":4}}],[\"acquired\",{\"1\":{\"6\":4}}],[\"acquire\",{\"0\":{\"6\":1},\"1\":{\"6\":1,\"8\":1,\"9\":1,\"159\":1,\"1137\":1,\"1188\":2,\"1264\":1}}],[\"acquireinterruptibly\",{\"1\":{\"5\":1}}],[\"al几个中纠结了好久\",{\"1\":{\"1796\":1}}],[\"al\",{\"1\":{\"1767\":1,\"1796\":1}}],[\"already\",{\"1\":{\"1050\":1,\"1051\":1}}],[\"alpha\",{\"1\":{\"969\":1,\"971\":1}}],[\"always\",{\"1\":{\"916\":1,\"961\":1,\"1049\":1,\"1577\":1}}],[\"alter\",{\"1\":{\"109\":1,\"117\":2,\"118\":3,\"130\":4,\"575\":1,\"576\":6,\"590\":1,\"591\":1,\"599\":5,\"622\":2,\"1148\":1,\"1226\":1,\"1567\":4}}],[\"alist\",{\"0\":{\"1807\":1}}],[\"alive\",{\"1\":{\"1398\":1}}],[\"alias\",{\"1\":{\"520\":2,\"531\":5}}],[\"alias=\",{\"1\":{\"520\":1,\"532\":1}}],[\"aliases\",{\"1\":{\"42\":2}}],[\"alibaba\",{\"1\":{\"392\":1}}],[\"aliyun\",{\"1\":{\"14\":6}}],[\"allfuture\",{\"1\":{\"1363\":2}}],[\"allentries\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"allequalordering\",{\"1\":{\"61\":1}}],[\"allkeys\",{\"1\":{\"1259\":1,\"1574\":3}}],[\"allow\",{\"1\":{\"1871\":4}}],[\"allowcorethreadtimeout\",{\"1\":{\"1115\":1}}],[\"allof\",{\"1\":{\"1363\":1,\"1369\":2}}],[\"allochandle\",{\"1\":{\"873\":6}}],[\"alloc\",{\"1\":{\"826\":1,\"846\":1}}],[\"allocator\",{\"0\":{\"860\":1,\"861\":1},\"1\":{\"826\":1,\"860\":1,\"873\":1}}],[\"allocateinstance\",{\"1\":{\"1140\":1}}],[\"allocatememory\",{\"1\":{\"1136\":2}}],[\"allocatedirect\",{\"1\":{\"770\":1,\"800\":1}}],[\"allocate\",{\"1\":{\"767\":1,\"770\":2,\"772\":3,\"773\":1,\"774\":1,\"782\":1,\"783\":1,\"788\":4,\"789\":1,\"791\":1,\"792\":1,\"796\":1,\"797\":2,\"800\":1,\"873\":1}}],[\"allocation\",{\"1\":{\"210\":1,\"1466\":1}}],[\"allmatch\",{\"1\":{\"1068\":1}}],[\"all<\",{\"1\":{\"810\":1}}],[\"all子查询可以转换\",{\"1\":{\"726\":1}}],[\"all直接将结果合并\",{\"1\":{\"606\":1}}],[\"all\",{\"0\":{\"606\":1},\"1\":{\"8\":2,\"51\":1,\"81\":1,\"126\":2,\"389\":1,\"390\":1,\"450\":1,\"460\":2,\"591\":2,\"606\":1,\"609\":2,\"624\":1,\"675\":1,\"710\":1,\"728\":1,\"1151\":1,\"1226\":1,\"1328\":1,\"1338\":1,\"1634\":1,\"1870\":2}}],[\"around\",{\"1\":{\"1602\":2,\"1860\":1}}],[\"arpa\",{\"1\":{\"1792\":1}}],[\"arp\",{\"0\":{\"1425\":1},\"1\":{\"1394\":1,\"1425\":2}}],[\"arity参数个数\",{\"1\":{\"927\":1}}],[\"ar\",{\"1\":{\"469\":2,\"470\":1,\"471\":1,\"472\":1,\"1322\":1}}],[\"area\",{\"1\":{\"211\":1}}],[\"arr\",{\"1\":{\"153\":2}}],[\"arrayindexoutofbounds\",{\"1\":{\"1533\":1}}],[\"arrayindexscale\",{\"1\":{\"1141\":1}}],[\"array<string>\",{\"1\":{\"1227\":1}}],[\"array<类型>\",{\"1\":{\"122\":1}}],[\"arrayclass\",{\"1\":{\"1141\":2}}],[\"arraybaseoffset\",{\"1\":{\"1141\":1}}],[\"arrayblockingqueue\",{\"1\":{\"1107\":1,\"1499\":1,\"1511\":1}}],[\"arraydeque<>\",{\"1\":{\"1001\":1}}],[\"arraydeque<integer>\",{\"1\":{\"986\":1}}],[\"arraydeque基于数组实现了双端队列\",{\"1\":{\"988\":1}}],[\"arraydeque实现了deque\",{\"1\":{\"986\":1}}],[\"arraydeque\",{\"0\":{\"986\":1}}],[\"array或arraylist\",{\"0\":{\"984\":1}}],[\"arraylist底层是可以动态扩展的\",{\"1\":{\"1493\":1}}],[\"arraylist添加元素不必考虑越界\",{\"1\":{\"984\":1}}],[\"arraylist\",{\"0\":{\"1493\":1},\"1\":{\"304\":1,\"383\":1}}],[\"arraylist<user>\",{\"1\":{\"1068\":1}}],[\"arraylist<string>\",{\"1\":{\"263\":1}}],[\"arraylist<>\",{\"1\":{\"263\":1,\"488\":2,\"782\":1,\"783\":1,\"1068\":1,\"1671\":1}}],[\"arraylistvalues\",{\"1\":{\"67\":1}}],[\"array\",{\"1\":{\"112\":2,\"122\":3,\"129\":5,\"788\":1,\"1067\":3,\"1227\":2}}],[\"arrays\",{\"1\":{\"79\":1,\"153\":2,\"312\":1,\"842\":1,\"846\":1,\"1067\":2,\"1263\":1,\"1673\":1,\"1674\":1,\"1675\":2,\"1676\":1}}],[\"arraytable\",{\"1\":{\"69\":1}}],[\"arbitrary\",{\"1\":{\"61\":1}}],[\"artifactid\",{\"1\":{\"1632\":1}}],[\"artifactid>\",{\"1\":{\"24\":2,\"39\":1,\"382\":8,\"383\":1,\"416\":1,\"455\":2,\"487\":2,\"505\":2,\"810\":1,\"1179\":3,\"1707\":1,\"1717\":1}}],[\"articles\",{\"1\":{\"380\":1,\"565\":1}}],[\"article\",{\"1\":{\"10\":2,\"283\":1,\"546\":2,\"1069\":1,\"1156\":2,\"1304\":1}}],[\"archives\",{\"1\":{\"10\":1}}],[\"argc\",{\"1\":{\"923\":1,\"926\":1}}],[\"argv\",{\"1\":{\"923\":1,\"1263\":1}}],[\"arguments\",{\"1\":{\"418\":1}}],[\"args\",{\"1\":{\"24\":2,\"90\":1,\"98\":1,\"183\":1,\"263\":1,\"311\":1,\"349\":1,\"507\":3,\"523\":1,\"791\":1,\"792\":2,\"797\":1,\"811\":1,\"812\":1,\"823\":1,\"844\":1,\"1009\":4,\"1015\":3,\"1016\":3,\"1022\":1,\"1067\":1,\"1125\":2,\"1532\":2}}],[\"arg\",{\"1\":{\"6\":3,\"7\":2,\"362\":2,\"384\":2,\"965\":2,\"967\":1}}],[\"awk\",{\"1\":{\"1631\":2}}],[\"awkward\",{\"1\":{\"69\":1}}],[\"awesome\",{\"1\":{\"1338\":4}}],[\"aws\",{\"1\":{\"1213\":1}}],[\"aware\",{\"1\":{\"1011\":1,\"1012\":1,\"1379\":1,\"1381\":1}}],[\"awaitinitlevel\",{\"1\":{\"196\":1}}],[\"awaituninterruptibly\",{\"1\":{\"156\":1}}],[\"awaitstopped\",{\"1\":{\"78\":1}}],[\"awaithealthy\",{\"1\":{\"78\":1}}],[\"await\",{\"1\":{\"8\":1,\"156\":1,\"160\":1,\"161\":1,\"822\":2}}],[\"awoke\",{\"1\":{\"8\":1}}],[\"a\",{\"1\":{\"3\":1,\"60\":2,\"61\":1,\"64\":2,\"66\":5,\"67\":4,\"68\":2,\"79\":5,\"81\":15,\"105\":2,\"112\":5,\"122\":2,\"143\":6,\"263\":2,\"301\":2,\"355\":2,\"418\":2,\"515\":4,\"605\":6,\"618\":2,\"675\":1,\"681\":1,\"772\":2,\"773\":2,\"778\":1,\"789\":1,\"831\":1,\"864\":1,\"870\":1,\"1041\":1,\"1091\":3,\"1168\":1,\"1214\":1,\"1278\":3,\"1304\":1,\"1316\":1,\"1318\":1,\"1321\":4,\"1329\":1,\"1330\":3,\"1333\":1,\"1567\":2,\"1599\":10,\"1618\":4,\"1634\":2,\"1636\":3,\"1662\":8,\"1690\":1,\"1712\":2,\"1735\":11,\"1736\":1,\"1740\":1,\"1792\":4}}],[\"aqs源码分析\",{\"1\":{\"10\":1}}],[\"aqs\",{\"0\":{\"1\":1,\"155\":1,\"1516\":1},\"1\":{\"1\":2,\"2\":4,\"3\":2,\"4\":1,\"5\":3,\"6\":2,\"7\":2,\"8\":5,\"9\":8,\"10\":1,\"155\":2,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"1114\":3,\"1137\":1,\"1499\":1,\"1516\":3,\"1517\":1,\"1518\":1}}],[\"锁是对自旋锁的一种改进\",{\"1\":{\"1516\":1}}],[\"锁是计算机协调多个进程或线程并发访问某一资源的机制\",{\"1\":{\"549\":1}}],[\"锁实现的\",{\"1\":{\"1516\":1}}],[\"锁就会膨胀为重量级锁\",{\"1\":{\"1515\":1}}],[\"锁时间\",{\"1\":{\"1264\":1}}],[\"锁粗化\",{\"0\":{\"1081\":1}}],[\"锁消除是一种编译器优化技术\",{\"1\":{\"1080\":1}}],[\"锁消除\",{\"0\":{\"1080\":1}}],[\"锁记录\",{\"1\":{\"1076\":1}}],[\"锁为括号里面的对象\",{\"1\":{\"1073\":1}}],[\"锁为当前class对象\",{\"1\":{\"1073\":1}}],[\"锁为当前\",{\"1\":{\"1073\":1}}],[\"锁为当前实例\",{\"1\":{\"1073\":2}}],[\"锁信息\",{\"1\":{\"730\":1}}],[\"锁所在的事务信息\",{\"1\":{\"564\":1}}],[\"锁内存结构\",{\"1\":{\"564\":1}}],[\"锁定的相关信息\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"锁定成功后向延迟队列发送消息\",{\"1\":{\"1290\":1,\"1372\":1}}],[\"锁定右侧边界\",{\"1\":{\"998\":1}}],[\"锁定左侧边界\",{\"1\":{\"998\":1}}],[\"锁定单个行记录\",{\"1\":{\"555\":1,\"1561\":1}}],[\"锁定粒度最小\",{\"1\":{\"554\":1}}],[\"锁定数据库中的所有表\",{\"1\":{\"549\":1}}],[\"锁冲突的概率高\",{\"1\":{\"551\":1}}],[\"锁冲突也是影响数据库并发访问性能的一个重要因素\",{\"1\":{\"549\":1}}],[\"锁资源的竞争并没有那么激烈\",{\"1\":{\"1075\":1}}],[\"锁资源\",{\"1\":{\"365\":1}}],[\"锁对象\",{\"1\":{\"331\":1}}],[\"锁对象processpendinglock外\",{\"1\":{\"187\":1}}],[\"锁优化\",{\"0\":{\"281\":1,\"1075\":1}}],[\"锁状态\",{\"1\":{\"215\":1,\"1074\":1,\"1521\":2}}],[\"锁接口的默认实现\",{\"1\":{\"156\":1}}],[\"锁比\",{\"1\":{\"145\":1}}],[\"锁规则\",{\"1\":{\"143\":1}}],[\"锁机制⭐\",{\"0\":{\"755\":1}}],[\"锁机制\",{\"0\":{\"549\":1,\"1072\":1,\"1260\":1,\"1468\":1,\"1515\":1,\"1558\":1},\"1\":{\"138\":1,\"148\":1,\"156\":1,\"281\":1,\"681\":1,\"755\":1}}],[\"锁的种类\",{\"0\":{\"1183\":1}}],[\"锁的类型\",{\"1\":{\"564\":1}}],[\"锁的模式\",{\"1\":{\"564\":1}}],[\"锁的内存结构\",{\"0\":{\"564\":1}}],[\"锁的\",{\"1\":{\"2\":1}}],[\"锁\",{\"1\":{\"1\":1,\"137\":1,\"560\":2,\"1095\":1,\"1463\":1}}],[\"1按原比例缩放\",{\"1\":{\"1878\":1}}],[\"1月\",{\"1\":{\"1815\":1}}],[\"1控制元素不复选\",{\"1\":{\"1677\":1}}],[\"1使得下一层递归时不可复选元素\",{\"1\":{\"1676\":1}}],[\"1会把n末尾的0变1\",{\"1\":{\"1665\":1}}],[\"1亿整数\",{\"1\":{\"1658\":1}}],[\"1背包\",{\"1\":{\"1655\":1}}],[\"1ms\",{\"1\":{\"1487\":1}}],[\"1mb\",{\"1\":{\"788\":1,\"879\":2,\"1167\":1}}],[\"1xx\",{\"1\":{\"1398\":1}}],[\"1a410efbd\",{\"1\":{\"1351\":1}}],[\"1c002d\",{\"1\":{\"1341\":1}}],[\"1c002dd4b536e7479f\",{\"1\":{\"1341\":1}}],[\"1c002dd4b536e7479fe34593e72e6c6c1819e53b\",{\"1\":{\"1341\":1}}],[\"1台节点宕机\",{\"1\":{\"1202\":1}}],[\"1=127\",{\"1\":{\"1196\":1}}],[\"1=61\",{\"1\":{\"240\":1}}],[\"1$之间\",{\"1\":{\"1387\":1}}],[\"1$个\",{\"1\":{\"1387\":1}}],[\"1$\",{\"1\":{\"975\":2,\"1112\":1}}],[\"1下线\",{\"1\":{\"941\":1}}],[\"1请求进行完整重同步\",{\"1\":{\"935\":1}}],[\"1通过\",{\"1\":{\"923\":1}}],[\"1的整数即普通客户端\",{\"1\":{\"923\":1}}],[\"1的内核线程模型\",{\"1\":{\"277\":1}}],[\"1字节长有符号整数\",{\"1\":{\"892\":1}}],[\"1字节的有符号整数\",{\"1\":{\"112\":1}}],[\"1tb\",{\"1\":{\"788\":1}}],[\"1~4\",{\"1\":{\"767\":1}}],[\"1|2|3|4byte\",{\"1\":{\"739\":1}}],[\"1对应最小\",{\"1\":{\"689\":1}}],[\"1为自动提交\",{\"1\":{\"734\":1}}],[\"1为null\",{\"1\":{\"684\":1}}],[\"1为gzip\",{\"1\":{\"474\":1}}],[\"1或2个字节\",{\"1\":{\"663\":1}}],[\"1表示value为空\",{\"1\":{\"474\":1}}],[\"1表示key为空\",{\"1\":{\"474\":1}}],[\"1个字节\",{\"1\":{\"661\":1}}],[\"1个字节存储1个字符\",{\"1\":{\"315\":1}}],[\"1个副本同时宕机\",{\"1\":{\"460\":1}}],[\"1<=m<=255\",{\"1\":{\"663\":2}}],[\"1<\",{\"1\":{\"455\":1,\"487\":1,\"1179\":1}}],[\"1g\",{\"1\":{\"445\":1,\"1444\":1}}],[\"1和j2ee\",{\"1\":{\"434\":1}}],[\"19\",{\"1\":{\"665\":1}}],[\"1970\",{\"1\":{\"665\":1}}],[\"1901\",{\"1\":{\"665\":1}}],[\"198\",{\"1\":{\"631\":1}}],[\"1996年开始开发\",{\"1\":{\"376\":1}}],[\"1920x1080\",{\"1\":{\"1868\":2,\"1869\":1}}],[\"1920×1080\",{\"1\":{\"1868\":1}}],[\"192\",{\"1\":{\"40\":1,\"506\":2,\"1792\":3}}],[\"180°\",{\"1\":{\"1799\":1}}],[\"18133011\",{\"1\":{\"1304\":1}}],[\"1810426\",{\"1\":{\"283\":1}}],[\"18\",{\"1\":{\"631\":1,\"1791\":1}}],[\"188\",{\"1\":{\"125\":2}}],[\"1k\",{\"1\":{\"127\":1}}],[\"1kb数据\",{\"1\":{\"127\":1}}],[\"1l\",{\"1\":{\"112\":1}}],[\"1s\",{\"1\":{\"112\":1,\"1448\":1}}],[\"1y\",{\"1\":{\"112\":1}}],[\"1byte\",{\"1\":{\"485\":1,\"849\":3}}],[\"1b\",{\"1\":{\"95\":4,\"474\":2}}],[\"132kb\",{\"1\":{\"1445\":1}}],[\"13895226\",{\"1\":{\"1083\":1}}],[\"137\",{\"1\":{\"506\":2}}],[\"13<\",{\"1\":{\"505\":1}}],[\"13\",{\"1\":{\"95\":1,\"445\":1}}],[\"11min\",{\"1\":{\"1420\":1}}],[\"1190000041317227\",{\"1\":{\"1304\":1}}],[\"11572889\",{\"1\":{\"1121\":1}}],[\"111\",{\"1\":{\"1112\":1,\"1862\":1}}],[\"11111111111111111111111111111\",{\"1\":{\"1112\":1}}],[\"1111\",{\"1\":{\"976\":2}}],[\"118cccf\",{\"1\":{\"1346\":1}}],[\"118017032\",{\"1\":{\"1069\":1}}],[\"11887\",{\"1\":{\"940\":1}}],[\"1143\",{\"1\":{\"996\":1}}],[\"11版本以后\",{\"1\":{\"461\":1}}],[\"11<\",{\"1\":{\"382\":1}}],[\"110\",{\"1\":{\"296\":2}}],[\"11中首次发布\",{\"1\":{\"179\":1}}],[\"11\",{\"0\":{\"1846\":1},\"1\":{\"70\":9,\"95\":1,\"129\":9,\"1322\":1,\"1357\":1,\"1358\":2,\"1631\":1,\"1675\":1,\"1796\":2,\"1815\":1}}],[\"1127183403\",{\"1\":{\"39\":1}}],[\"1517年\",{\"1\":{\"1767\":1}}],[\"15次\",{\"1\":{\"1524\":1}}],[\"15s\",{\"1\":{\"1420\":1}}],[\"1598555\",{\"1\":{\"546\":1}}],[\"15\",{\"1\":{\"70\":3,\"95\":1,\"703\":1,\"1077\":1,\"1259\":1,\"1347\":1,\"1409\":2,\"1666\":1,\"1722\":1,\"1819\":1}}],[\"1500\",{\"1\":{\"839\":2}}],[\"150\",{\"1\":{\"40\":1,\"51\":1,\"296\":2}}],[\"154950909\",{\"1\":{\"14\":1}}],[\"10s\",{\"1\":{\"1878\":1}}],[\"1080p\",{\"1\":{\"1868\":6,\"1869\":2}}],[\"106\",{\"1\":{\"1862\":1}}],[\"104\",{\"1\":{\"1862\":1}}],[\"103\",{\"1\":{\"1862\":3}}],[\"10月\",{\"1\":{\"1815\":1}}],[\"10出现多次\",{\"1\":{\"1658\":1}}],[\"10m\",{\"1\":{\"1464\":1}}],[\"10w\",{\"1\":{\"1434\":1}}],[\"1024k\",{\"1\":{\"782\":1}}],[\"1024\",{\"1\":{\"340\":1,\"789\":2,\"839\":1,\"843\":1,\"844\":1,\"850\":1,\"857\":1,\"1862\":1}}],[\"1023\",{\"1\":{\"340\":1}}],[\"100块的门票在室内二十多分钟就结束了\",{\"1\":{\"1847\":1}}],[\"100km\",{\"1\":{\"1827\":1}}],[\"10086\",{\"1\":{\"1366\":1}}],[\"100755\",{\"1\":{\"1350\":1}}],[\"100644\",{\"1\":{\"1350\":2}}],[\"100g处理能力并且支持ipv6\",{\"1\":{\"1301\":1}}],[\"100w次事务\",{\"1\":{\"1219\":1}}],[\"100ms\",{\"1\":{\"459\":1}}],[\"100\",{\"1\":{\"51\":2,\"68\":2,\"127\":1,\"348\":1,\"388\":1,\"522\":1,\"523\":1,\"634\":4,\"809\":1,\"850\":3,\"872\":1,\"940\":1,\"1188\":2,\"1446\":1,\"1658\":1,\"1711\":1,\"1714\":6,\"1715\":6,\"1799\":1}}],[\"1000000\",{\"1\":{\"594\":1}}],[\"10000\",{\"1\":{\"124\":1,\"912\":1,\"1369\":1}}],[\"1000\",{\"1\":{\"14\":1,\"73\":1,\"83\":1,\"128\":1,\"183\":1,\"614\":1,\"665\":2,\"734\":2,\"822\":3,\"1106\":2,\"1367\":1,\"1434\":1,\"1529\":1}}],[\"101\",{\"1\":{\"40\":1,\"1077\":1}}],[\"10\",{\"0\":{\"1845\":1,\"1862\":1},\"1\":{\"14\":1,\"70\":17,\"73\":1,\"95\":1,\"127\":2,\"129\":4,\"530\":1,\"587\":4,\"595\":1,\"598\":1,\"618\":5,\"622\":2,\"631\":1,\"703\":1,\"767\":1,\"773\":1,\"791\":1,\"800\":2,\"831\":1,\"842\":2,\"854\":2,\"892\":1,\"912\":1,\"943\":1,\"1087\":2,\"1106\":2,\"1322\":2,\"1367\":1,\"1369\":1,\"1434\":2,\"1529\":1,\"1711\":2,\"1792\":2,\"1796\":2,\"1858\":1,\"1867\":1,\"1873\":1,\"1878\":1}}],[\"12月\",{\"1\":{\"1815\":1,\"1824\":1}}],[\"122583888\",{\"1\":{\"1156\":1}}],[\"122360248\",{\"1\":{\"1156\":1}}],[\"122327493795\",{\"1\":{\"112\":1}}],[\"12267274\",{\"1\":{\"1121\":1}}],[\"122\",{\"1\":{\"987\":2}}],[\"12500\",{\"1\":{\"610\":1}}],[\"120000\",{\"1\":{\"1350\":1}}],[\"120\",{\"1\":{\"598\":1,\"1854\":1}}],[\"120598020\",{\"1\":{\"10\":1}}],[\"123\",{\"1\":{\"417\":1,\"620\":2,\"850\":1,\"1781\":2}}],[\"123456789\",{\"1\":{\"1687\":1}}],[\"123456\",{\"1\":{\"14\":1,\"518\":1,\"590\":3,\"1151\":2,\"1177\":2}}],[\"127\",{\"1\":{\"146\":3,\"569\":1,\"661\":1,\"771\":1,\"820\":4,\"940\":1,\"1218\":1,\"1366\":1,\"1422\":2,\"1438\":1,\"1862\":1}}],[\"12\",{\"1\":{\"95\":1,\"129\":4,\"595\":1,\"665\":2,\"850\":1,\"986\":1,\"1179\":2,\"1687\":1,\"1811\":1,\"1826\":1,\"1873\":1}}],[\"1280x720\",{\"1\":{\"1868\":2,\"1869\":1}}],[\"1280×720\",{\"1\":{\"1868\":1}}],[\"128kb\",{\"1\":{\"1445\":2}}],[\"128g\",{\"1\":{\"1444\":1}}],[\"128t\",{\"1\":{\"1444\":2}}],[\"128~127\",{\"1\":{\"112\":1}}],[\"128\",{\"1\":{\"14\":2,\"93\":1,\"146\":2,\"661\":1,\"788\":1,\"839\":2,\"856\":1,\"1422\":1}}],[\"129959583\",{\"1\":{\"10\":1}}],[\"16000\",{\"1\":{\"1862\":1}}],[\"16byte\",{\"1\":{\"1445\":1}}],[\"16bit\",{\"1\":{\"340\":1}}],[\"16位表键需要几百kb\",{\"1\":{\"976\":1}}],[\"16版本后\",{\"1\":{\"598\":1}}],[\"16383\",{\"1\":{\"947\":1}}],[\"16384bit\",{\"1\":{\"946\":1}}],[\"16384\",{\"1\":{\"459\":1}}],[\"163\",{\"1\":{\"829\":1}}],[\"1635907476\",{\"1\":{\"465\":1}}],[\"16kb\",{\"1\":{\"450\":1,\"1448\":1,\"1546\":1}}],[\"168\",{\"1\":{\"40\":1,\"506\":2,\"1792\":3}}],[\"16\",{\"1\":{\"9\":1,\"95\":1,\"770\":2,\"774\":1,\"782\":1,\"783\":1,\"791\":1,\"792\":1,\"796\":1,\"797\":2,\"843\":1,\"867\":1,\"913\":1,\"986\":1,\"1494\":1,\"1599\":2,\"1666\":1,\"1799\":1}}],[\"1\",{\"0\":{\"19\":1,\"295\":1,\"327\":1,\"1853\":1,\"1866\":1},\"1\":{\"3\":2,\"6\":4,\"9\":7,\"10\":1,\"14\":1,\"24\":2,\"42\":2,\"43\":1,\"44\":1,\"47\":2,\"48\":1,\"51\":2,\"58\":1,\"67\":6,\"69\":1,\"70\":14,\"77\":4,\"93\":1,\"95\":1,\"112\":12,\"122\":3,\"124\":6,\"127\":1,\"129\":1,\"130\":1,\"153\":3,\"184\":3,\"196\":1,\"223\":2,\"240\":1,\"268\":1,\"287\":1,\"318\":1,\"324\":1,\"357\":1,\"366\":4,\"376\":2,\"382\":4,\"383\":4,\"431\":1,\"432\":2,\"434\":2,\"445\":1,\"446\":2,\"450\":2,\"456\":2,\"459\":1,\"460\":6,\"461\":2,\"465\":5,\"469\":1,\"476\":2,\"488\":2,\"495\":3,\"506\":5,\"507\":1,\"536\":1,\"544\":1,\"569\":1,\"579\":1,\"587\":1,\"593\":1,\"594\":3,\"598\":3,\"610\":1,\"612\":1,\"614\":1,\"619\":4,\"620\":1,\"622\":1,\"623\":2,\"638\":1,\"640\":2,\"663\":1,\"665\":1,\"689\":1,\"698\":1,\"707\":1,\"716\":1,\"724\":1,\"729\":2,\"739\":1,\"767\":1,\"771\":1,\"772\":1,\"774\":4,\"777\":1,\"778\":4,\"782\":1,\"783\":1,\"786\":1,\"788\":2,\"797\":1,\"801\":1,\"811\":1,\"817\":1,\"818\":1,\"820\":4,\"821\":1,\"822\":3,\"823\":1,\"826\":1,\"829\":3,\"834\":1,\"842\":1,\"843\":1,\"844\":4,\"848\":3,\"849\":3,\"850\":2,\"863\":2,\"873\":1,\"879\":1,\"882\":2,\"883\":13,\"892\":3,\"900\":1,\"912\":1,\"923\":1,\"940\":4,\"946\":1,\"974\":1,\"975\":1,\"984\":1,\"985\":1,\"989\":4,\"991\":6,\"993\":10,\"994\":4,\"995\":1,\"996\":20,\"998\":22,\"999\":1,\"1000\":4,\"1002\":2,\"1040\":1,\"1049\":2,\"1050\":1,\"1067\":5,\"1068\":1,\"1074\":1,\"1075\":1,\"1076\":1,\"1087\":2,\"1092\":1,\"1106\":1,\"1108\":2,\"1112\":4,\"1113\":1,\"1114\":8,\"1115\":2,\"1119\":3,\"1136\":2,\"1148\":2,\"1155\":1,\"1156\":1,\"1181\":1,\"1188\":2,\"1196\":4,\"1197\":1,\"1203\":1,\"1218\":1,\"1225\":2,\"1226\":1,\"1261\":1,\"1263\":4,\"1280\":1,\"1283\":1,\"1309\":1,\"1329\":1,\"1332\":2,\"1341\":1,\"1343\":1,\"1351\":1,\"1366\":1,\"1369\":2,\"1387\":2,\"1390\":4,\"1404\":5,\"1409\":1,\"1410\":1,\"1413\":3,\"1420\":1,\"1422\":2,\"1438\":2,\"1445\":1,\"1460\":2,\"1463\":1,\"1487\":1,\"1494\":2,\"1497\":1,\"1499\":1,\"1511\":2,\"1546\":1,\"1555\":1,\"1556\":1,\"1567\":6,\"1568\":1,\"1619\":1,\"1634\":4,\"1651\":1,\"1652\":2,\"1653\":5,\"1654\":5,\"1655\":4,\"1657\":4,\"1658\":4,\"1662\":1,\"1663\":3,\"1664\":2,\"1665\":4,\"1666\":2,\"1669\":2,\"1670\":1,\"1671\":2,\"1673\":2,\"1674\":2,\"1675\":4,\"1677\":1,\"1688\":1,\"1711\":2,\"1712\":1,\"1714\":2,\"1715\":2,\"1736\":2,\"1791\":1,\"1792\":6,\"1799\":1,\"1824\":1,\"1855\":3,\"1860\":1,\"1862\":1,\"1873\":1,\"1878\":3}}],[\"1728000\",{\"1\":{\"1871\":1}}],[\"172\",{\"1\":{\"1155\":1}}],[\"17799990015\",{\"1\":{\"703\":1}}],[\"17093719\",{\"1\":{\"53\":1}}],[\"17\",{\"1\":{\"1\":2,\"382\":1,\"385\":1,\"465\":1,\"623\":1}}],[\"144p\",{\"1\":{\"1868\":1,\"1869\":2}}],[\"14553\",{\"1\":{\"1464\":1}}],[\"146\",{\"1\":{\"1002\":1}}],[\"1460\",{\"1\":{\"839\":1}}],[\"14955475\",{\"1\":{\"565\":1}}],[\"1430026\",{\"1\":{\"546\":1}}],[\"1415926\",{\"1\":{\"129\":2}}],[\"14\",{\"1\":{\"1\":1,\"95\":1,\"665\":1,\"892\":1,\"1144\":1,\"1828\":1}}],[\"有个服务员小哥就是尼泊尔人\",{\"1\":{\"1846\":1}}],[\"有藏族小伙唱歌\",{\"1\":{\"1834\":1}}],[\"有种很奇妙的感觉\",{\"1\":{\"1834\":1}}],[\"有种和一个已逝的人对话的奇妙感受\",{\"1\":{\"1817\":1}}],[\"有幸福\",{\"1\":{\"1829\":1}}],[\"有被共情到\",{\"1\":{\"1826\":1}}],[\"有各种不如意\",{\"1\":{\"1818\":1}}],[\"有点后悔没去新裤子的长沙演唱会\",{\"1\":{\"1817\":1}}],[\"有教皇\",{\"1\":{\"1761\":1}}],[\"有重不可复选有两种特殊解法\",{\"1\":{\"1677\":1}}],[\"有重不可复选通过判断\",{\"1\":{\"1677\":1}}],[\"有具体业务含义\",{\"1\":{\"1622\":1}}],[\"有线程安全的控制策略\",{\"1\":{\"1614\":1}}],[\"有时需要在项目中扩展一些功能就需要手动配置\",{\"1\":{\"1610\":1}}],[\"有时候某一国会提出较高的交换条件或收取补偿费以适当保护该国航空企业的权益\",{\"1\":{\"1741\":1}}],[\"有时候我们也会模糊流量网关和业务网关\",{\"1\":{\"1300\":1}}],[\"有时候不清楚\",{\"1\":{\"829\":1}}],[\"有时候需要索引很长的字符串\",{\"1\":{\"707\":1}}],[\"有利于社区的长久发展\",{\"1\":{\"1810\":1}}],[\"有利于未来的可拓展性和可维护性\",{\"1\":{\"1601\":1}}],[\"有利于项目日志的维护\",{\"1\":{\"391\":1}}],[\"有异常情况\",{\"1\":{\"1539\":1}}],[\"有界队列\",{\"1\":{\"1499\":1}}],[\"有界任务队列\",{\"1\":{\"1107\":1,\"1511\":1}}],[\"有独立的物理资源\",{\"1\":{\"1446\":1}}],[\"有独立的读索引和写索引\",{\"1\":{\"825\":1}}],[\"有规律的条件分支语句可以充分利用\",{\"1\":{\"1435\":1}}],[\"有限缓存\",{\"1\":{\"1425\":1}}],[\"有限等待\",{\"1\":{\"139\":1,\"1509\":1}}],[\"有损压缩\",{\"1\":{\"1400\":1}}],[\"有以下几种选项\",{\"1\":{\"1347\":1}}],[\"有冲突时需要先拉取合并\",{\"1\":{\"1328\":1}}],[\"有若干正巧在灰度边界上的订单号并发请求打进来\",{\"1\":{\"1240\":1}}],[\"有哪些数据被重复接收了\",{\"1\":{\"1411\":1}}],[\"有哪些\",{\"1\":{\"1217\":1}}],[\"有更多的\",{\"1\":{\"1137\":1}}],[\"有更高优先级的线程需要运行\",{\"1\":{\"134\":1}}],[\"有状态\",{\"1\":{\"1068\":4}}],[\"有返回值\",{\"1\":{\"1039\":1}}],[\"有返回值的\",{\"1\":{\"153\":1}}],[\"有一些方式可以恢复丢失的提交数据\",{\"1\":{\"1346\":1}}],[\"有一个\",{\"1\":{\"1060\":1}}],[\"有一个活动页面\",{\"1\":{\"400\":1}}],[\"有一定的开销\",{\"1\":{\"844\":1}}],[\"有助于\",{\"1\":{\"800\":1}}],[\"有助于提高性能\",{\"1\":{\"532\":1}}],[\"有事件发生时\",{\"1\":{\"785\":1,\"1487\":1}}],[\"有事件发生时线程才去处理\",{\"1\":{\"784\":1}}],[\"有剩余空间的碎片区\",{\"1\":{\"693\":1}}],[\"有\",{\"1\":{\"681\":2,\"761\":1,\"1203\":4,\"1281\":1,\"1620\":1}}],[\"有not\",{\"1\":{\"619\":1}}],[\"有任意一个满足即可\",{\"1\":{\"609\":1}}],[\"有身份证\",{\"1\":{\"583\":1}}],[\"有些符号占4字节\",{\"1\":{\"574\":1}}],[\"有四个实现类\",{\"1\":{\"544\":1}}],[\"有四个成员变量\",{\"1\":{\"187\":1}}],[\"有三种模式\",{\"1\":{\"1629\":1}}],[\"有三种数据源类型\",{\"1\":{\"526\":1}}],[\"有三个关键功能\",{\"1\":{\"1626\":1}}],[\"有三个属性\",{\"1\":{\"1057\":1}}],[\"有三个重要属性\",{\"1\":{\"768\":1}}],[\"有三个主要角色\",{\"1\":{\"373\":1}}],[\"有三个值\",{\"1\":{\"148\":1}}],[\"有参构造方法来实例化目标类\",{\"1\":{\"522\":1}}],[\"有效像素\",{\"1\":{\"1799\":1}}],[\"有效期可以长一点\",{\"1\":{\"1791\":1}}],[\"有效期可以无限\",{\"1\":{\"1791\":1}}],[\"有效期最多一年\",{\"1\":{\"1791\":1}}],[\"有效期为一年\",{\"1\":{\"1738\":1}}],[\"有效期等\",{\"1\":{\"1403\":1}}],[\"有效避免了消息丢失的风险\",{\"1\":{\"1626\":1}}],[\"有效位\",{\"1\":{\"1435\":1}}],[\"有效回复\",{\"1\":{\"941\":1}}],[\"有效性和完整性\",{\"1\":{\"598\":1}}],[\"有效性是所有数据库必须解决的一个问题\",{\"1\":{\"549\":1}}],[\"有效值\",{\"1\":{\"519\":1}}],[\"有效减少锁竞争\",{\"1\":{\"157\":1}}],[\"有可能会导致分区分配的不均匀\",{\"1\":{\"496\":1}}],[\"有多个\",{\"1\":{\"494\":1}}],[\"有较低的概率丢失数据\",{\"1\":{\"435\":1}}],[\"有了代理资质就有了office号和航协号\",{\"1\":{\"1727\":1}}],[\"有了池化\",{\"1\":{\"826\":1}}],[\"有了readview后\",{\"1\":{\"754\":1}}],[\"有了\",{\"1\":{\"638\":1}}],[\"有了多种日志实现之后\",{\"1\":{\"379\":1}}],[\"有了较大的改进\",{\"1\":{\"1\":1}}],[\"有两个核心接口\",{\"1\":{\"1613\":1}}],[\"有两个系统调用\",{\"1\":{\"1420\":1}}],[\"有两个独立的维度\",{\"1\":{\"375\":1}}],[\"有两票\",{\"1\":{\"1203\":1}}],[\"有两种方式\",{\"1\":{\"1250\":1}}],[\"有两种创建方式\",{\"1\":{\"800\":1}}],[\"有两种退出方法执行的方式\",{\"1\":{\"206\":1}}],[\"有索引\",{\"1\":{\"304\":1}}],[\"有且仅有一个抽象方法的接口\",{\"1\":{\"298\":1}}],[\"有用但非必须的对象缓存\",{\"1\":{\"183\":1}}],[\"有竞争则进入阻塞队列\",{\"1\":{\"156\":1}}],[\"有着与锁相同的内存语义\",{\"1\":{\"145\":1}}],[\"有序递增\",{\"1\":{\"1622\":1}}],[\"有序接收\",{\"1\":{\"1418\":1}}],[\"有序集合\",{\"1\":{\"913\":1,\"1570\":1}}],[\"有序集合保存的所有元素成员的长度都小于64字节\",{\"1\":{\"900\":1}}],[\"有序集合保存的元素数量小于128个\",{\"1\":{\"900\":1}}],[\"有序集合每个元素的成员都是一个字符串对象\",{\"1\":{\"900\":1}}],[\"有序集合对象的编码有两种\",{\"1\":{\"900\":1}}],[\"有序集合对象\",{\"0\":{\"900\":1},\"1\":{\"913\":1}}],[\"有序集合对象五种类型\",{\"1\":{\"895\":1}}],[\"有序且不重复\",{\"1\":{\"887\":1}}],[\"有序\",{\"1\":{\"304\":2,\"921\":1,\"1140\":1}}],[\"有序性原理\",{\"1\":{\"145\":1}}],[\"有序性\",{\"1\":{\"144\":1,\"1506\":1}}],[\"有序的的同类型的集合\",{\"1\":{\"112\":1}}],[\"有则取值\",{\"1\":{\"72\":1}}],[\"有很多相似的地方\",{\"1\":{\"34\":1}}],[\"有的也不错\",{\"1\":{\"1804\":1}}],[\"有的小数无法用\",{\"1\":{\"1438\":1}}],[\"有的可能负责多个\",{\"1\":{\"33\":1}}],[\"有的负责一个\",{\"1\":{\"33\":1}}],[\"有长度限制\",{\"1\":{\"20\":1}}],[\"有氧\",{\"1\":{\"0\":1}}],[\"8y\",{\"1\":{\"1878\":2}}],[\"8800\",{\"1\":{\"1871\":1,\"1872\":1}}],[\"896x504\",{\"1\":{\"1868\":2,\"1869\":1}}],[\"8999\",{\"1\":{\"1125\":2}}],[\"8月\",{\"1\":{\"1815\":1}}],[\"8a2e\",{\"1\":{\"1792\":1}}],[\"8折\",{\"1\":{\"1739\":1}}],[\"8后理想情况下\",{\"1\":{\"1497\":1}}],[\"83baae618040\",{\"1\":{\"1350\":1}}],[\"838\",{\"1\":{\"665\":2}}],[\"8388607\",{\"1\":{\"661\":1}}],[\"8388608\",{\"1\":{\"661\":1}}],[\"8中引入\",{\"1\":{\"1142\":1}}],[\"8中已废弃\",{\"1\":{\"672\":1}}],[\"8之后是jdk\",{\"1\":{\"1015\":1}}],[\"8位的汉明重量\",{\"1\":{\"976\":1}}],[\"8开始使用psync代替sync执行复制时的同步操作\",{\"1\":{\"935\":1}}],[\"8byte对齐\",{\"1\":{\"1521\":1}}],[\"8byte\",{\"1\":{\"1074\":1}}],[\"8byte有符号整数\",{\"1\":{\"913\":1}}],[\"8byte整数倍\",{\"1\":{\"215\":1}}],[\"8k\",{\"1\":{\"788\":2}}],[\"854×480\",{\"1\":{\"1868\":1}}],[\"85a3\",{\"1\":{\"1792\":1}}],[\"85\",{\"1\":{\"631\":1}}],[\"8编码\",{\"1\":{\"357\":1}}],[\"8编码的字符串值\",{\"1\":{\"240\":1}}],[\"8新增日期时间api\",{\"1\":{\"353\":1}}],[\"8个字节\",{\"1\":{\"240\":1,\"661\":1}}],[\"80\",{\"1\":{\"340\":1,\"822\":1,\"1347\":2,\"1366\":1,\"1401\":1,\"1714\":3,\"1715\":3}}],[\"8080\",{\"1\":{\"233\":1,\"340\":1,\"782\":2,\"783\":1,\"786\":1,\"791\":1,\"797\":1,\"811\":1,\"812\":1,\"818\":1,\"820\":3,\"863\":2,\"1631\":1}}],[\"8020\",{\"1\":{\"113\":1,\"1218\":1}}],[\"8字节\",{\"1\":{\"688\":1}}],[\"8字节双精度浮点数\",{\"1\":{\"112\":1}}],[\"8字节带符号整数\",{\"1\":{\"112\":1}}],[\"8\",{\"0\":{\"1843\":1,\"1860\":1},\"1\":{\"1\":1,\"58\":2,\"79\":1,\"83\":2,\"95\":1,\"153\":1,\"158\":1,\"163\":1,\"287\":1,\"292\":1,\"315\":1,\"357\":1,\"382\":1,\"383\":4,\"506\":2,\"529\":1,\"570\":1,\"598\":1,\"649\":5,\"662\":1,\"664\":1,\"665\":1,\"687\":1,\"771\":3,\"774\":4,\"792\":1,\"842\":2,\"974\":1,\"975\":1,\"1015\":1,\"1065\":1,\"1143\":1,\"1148\":1,\"1156\":1,\"1398\":1,\"1444\":1,\"1494\":2,\"1497\":1,\"1503\":1,\"1520\":2,\"1666\":1,\"1791\":1,\"1796\":3,\"1862\":1}}],[\"的平均码率都已经超过5mbps\",{\"1\":{\"1803\":1}}],[\"的2公里通勤\",{\"1\":{\"1796\":1}}],[\"的根目录直接部署即可\",{\"1\":{\"1792\":1}}],[\"的根对象出发\",{\"1\":{\"224\":1}}],[\"的鉴权了\",{\"1\":{\"1791\":1}}],[\"的读写权限\",{\"1\":{\"1791\":1}}],[\"的读写权限即可\",{\"1\":{\"1791\":1}}],[\"的读写模式决定\",{\"1\":{\"776\":1}}],[\"的目录\",{\"1\":{\"1791\":1}}],[\"的构建流程\",{\"1\":{\"1791\":1}}],[\"的构造方式\",{\"1\":{\"351\":1}}],[\"的构造器\",{\"1\":{\"195\":1}}],[\"的部署流程\",{\"1\":{\"1790\":1}}],[\"的部分截断\",{\"1\":{\"471\":1}}],[\"的意见\",{\"1\":{\"1783\":1}}],[\"的需求\",{\"1\":{\"1781\":1}}],[\"的阿里及其直系后裔为正统继承人\",{\"1\":{\"1765\":1}}],[\"的权利\",{\"1\":{\"1747\":1}}],[\"的写入\",{\"1\":{\"1658\":1}}],[\"的小顶堆求\",{\"1\":{\"1658\":1}}],[\"的小版本号\",{\"1\":{\"240\":1}}],[\"的组合方式\",{\"1\":{\"1655\":1}}],[\"的安全性更高\",{\"1\":{\"1642\":1}}],[\"的故障问题\",{\"1\":{\"1636\":1}}],[\"的超长执行\",{\"1\":{\"1636\":1}}],[\"的超级用户是启动\",{\"1\":{\"1218\":1}}],[\"的队列就称之为死信队列\",{\"1\":{\"1629\":1}}],[\"的队列同步加锁\",{\"1\":{\"1487\":1}}],[\"的并发安全取决于\",{\"1\":{\"1614\":1}}],[\"的并发量还是很困难的\",{\"1\":{\"1487\":1}}],[\"的集合\",{\"1\":{\"1608\":1}}],[\"的集合用于事件处理\",{\"1\":{\"1379\":1}}],[\"的简写\",{\"1\":{\"1604\":1}}],[\"的简化\",{\"1\":{\"1338\":1}}],[\"的同时又会去调用getbean\",{\"1\":{\"1599\":1}}],[\"的同步状态\",{\"1\":{\"1517\":1}}],[\"的同步队列\",{\"1\":{\"1499\":1}}],[\"的同步阻塞\",{\"1\":{\"822\":1}}],[\"的结果集\",{\"1\":{\"1598\":1}}],[\"的结果作为错误消息\",{\"1\":{\"59\":1}}],[\"的类的全类名\",{\"1\":{\"1598\":1}}],[\"的类型转换\",{\"1\":{\"545\":1}}],[\"的帮助下自动导入一些bean来实现某些功能\",{\"1\":{\"1598\":1}}],[\"的自动装配通过注解或者一些简单的配置就能在\",{\"1\":{\"1598\":1}}],[\"的自动配置机制\",{\"1\":{\"1053\":1}}],[\"的列表\",{\"1\":{\"1594\":1}}],[\"的思想就是将原本在程序中手动创建对象的控制权\",{\"1\":{\"1593\":1}}],[\"的性能\",{\"1\":{\"1571\":1}}],[\"的前后条件中有一个列没有索引\",{\"1\":{\"1547\":1}}],[\"的前提下的最大价值\",{\"1\":{\"1655\":1}}],[\"的前提下\",{\"1\":{\"1278\":1,\"1618\":1}}],[\"的后备方案\",{\"1\":{\"1525\":1}}],[\"的堆内存分为新生代\",{\"1\":{\"1524\":1}}],[\"的堆内存结构就是基于分代的设计\",{\"1\":{\"171\":1}}],[\"的可重入功能基于\",{\"1\":{\"1517\":1}}],[\"的可写事件\",{\"1\":{\"789\":1}}],[\"的重量级锁机制\",{\"1\":{\"1515\":1}}],[\"的重要贡献者\",{\"1\":{\"807\":1}}],[\"的共享内存模型\",{\"1\":{\"1506\":1}}],[\"的元素\",{\"1\":{\"1497\":1}}],[\"的元数据\",{\"1\":{\"462\":1,\"1629\":1}}],[\"的叫做\",{\"1\":{\"1486\":1}}],[\"的调度\",{\"1\":{\"1483\":1}}],[\"的调用链是\",{\"1\":{\"873\":1}}],[\"的通信方式包括\",{\"1\":{\"1481\":1}}],[\"的通知\",{\"1\":{\"909\":2}}],[\"的块数据\",{\"1\":{\"1479\":1}}],[\"的页面置换\",{\"1\":{\"1471\":1}}],[\"的利用率\",{\"1\":{\"1470\":1}}],[\"的默认信号\",{\"1\":{\"1465\":1}}],[\"的轻量级方式\",{\"1\":{\"1462\":1}}],[\"的轻量级锁\",{\"1\":{\"1076\":2}}],[\"的门槛\",{\"1\":{\"1448\":1}}],[\"的内存申请\",{\"1\":{\"1445\":2}}],[\"的内存区域可以分为四个部分\",{\"1\":{\"827\":1}}],[\"的库函数\",{\"1\":{\"1445\":1}}],[\"的问题\",{\"1\":{\"1443\":1}}],[\"的二分之一会直接分配在\",{\"1\":{\"1524\":1}}],[\"的二进制来表示\",{\"1\":{\"1438\":1}}],[\"的二次开发和优化\",{\"1\":{\"863\":1}}],[\"的四种不同状态\",{\"1\":{\"1435\":1}}],[\"的是\",{\"1\":{\"1422\":1}}],[\"的缓存\",{\"1\":{\"1412\":1}}],[\"的缓存机制实现\",{\"1\":{\"1250\":1}}],[\"的设定\",{\"1\":{\"1411\":1}}],[\"的设计\",{\"1\":{\"1\":1,\"480\":1}}],[\"的语义是根据请求体对指定的资源做出处理\",{\"1\":{\"1405\":1}}],[\"的语义是从服务器获取指定的资源\",{\"1\":{\"1405\":1}}],[\"的语法来引用\",{\"1\":{\"263\":1}}],[\"的语法来定义一个接受两个参数并返回它们之和的\",{\"1\":{\"263\":1}}],[\"的语法来声明一个未知类型的泛型集合\",{\"1\":{\"263\":1}}],[\"的语法来创建泛型集合\",{\"1\":{\"263\":1}}],[\"的语法来遍历集合中的元素\",{\"1\":{\"263\":1}}],[\"的语法定义可变参数方法\",{\"1\":{\"263\":1}}],[\"的多路复用都是同步调用\",{\"1\":{\"1478\":1}}],[\"的多路复用协议\",{\"1\":{\"1404\":1}}],[\"的多线程版本\",{\"1\":{\"174\":1}}],[\"的生成可以使用\",{\"1\":{\"1374\":1}}],[\"的原因在于2bit最多表示3个1\",{\"1\":{\"1666\":1}}],[\"的原因\",{\"1\":{\"1368\":1}}],[\"的原子操作\",{\"1\":{\"1263\":1,\"1582\":1}}],[\"的上下架管理使用\",{\"1\":{\"1365\":1}}],[\"的上下线\",{\"1\":{\"470\":1}}],[\"的map集合\",{\"1\":{\"1361\":1}}],[\"的三方合并或快进\",{\"1\":{\"1337\":1}}],[\"的三篇\",{\"1\":{\"1214\":1}}],[\"的指针\",{\"1\":{\"1332\":1}}],[\"的文件描述符传递给线程函数\",{\"1\":{\"1487\":1}}],[\"的文件\",{\"1\":{\"1319\":1,\"1474\":1,\"1683\":1}}],[\"的配置分为三级\",{\"1\":{\"1311\":1}}],[\"的配置信息\",{\"1\":{\"1155\":1}}],[\"的延迟队列和死信队列实现系统的最终一致性\",{\"1\":{\"1288\":1}}],[\"的应用场景变得非常狭隘\",{\"1\":{\"1283\":1}}],[\"的心跳\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"的心跳和日志同步数据\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"的选举\",{\"1\":{\"1281\":1,\"1620\":1}}],[\"的基本工作流程是这样的\",{\"1\":{\"1310\":1}}],[\"的基本类型包括8个\",{\"1\":{\"80\":1}}],[\"的基础上\",{\"1\":{\"1498\":1}}],[\"的基础上实现的\",{\"1\":{\"1264\":1}}],[\"的基础架构\",{\"1\":{\"1224\":1}}],[\"的好处\",{\"1\":{\"1223\":1}}],[\"的那一个\",{\"1\":{\"1220\":1}}],[\"的那一套流程上去\",{\"1\":{\"1059\":1}}],[\"的那一套机制了\",{\"1\":{\"1055\":1}}],[\"的操作性能\",{\"1\":{\"1228\":1}}],[\"的操作命令\",{\"1\":{\"1218\":1}}],[\"的操作分为两类\",{\"1\":{\"1068\":1}}],[\"的创始人是雅虎的\",{\"1\":{\"1214\":1}}],[\"的单调递增保证顺序一致性\",{\"1\":{\"1207\":1}}],[\"的客户端会接收到\",{\"1\":{\"1189\":1}}],[\"的压力非常大\",{\"1\":{\"1186\":1}}],[\"的两个网络之间进行通信传输\",{\"1\":{\"1423\":1}}],[\"的两个设备之间通信\",{\"1\":{\"1423\":1}}],[\"的两个工人轮流在第二道工序处理\",{\"1\":{\"818\":1}}],[\"的两个工人轮流在第一道工序处理\",{\"1\":{\"818\":1}}],[\"的两种持久化机制默认都是开启的\",{\"1\":{\"1170\":1}}],[\"的有效期\",{\"1\":{\"1169\":1}}],[\"的acl版本\",{\"1\":{\"1168\":1}}],[\"的api\",{\"1\":{\"492\":1}}],[\"的用户\",{\"1\":{\"1151\":1,\"1218\":1}}],[\"的交换值后返回原有值\",{\"1\":{\"1137\":1}}],[\"的交互处理\",{\"1\":{\"852\":1}}],[\"的交互\",{\"1\":{\"80\":1}}],[\"的掩码\",{\"1\":{\"1112\":1}}],[\"的低\",{\"1\":{\"1112\":1}}],[\"的高性能网络程序都是\",{\"1\":{\"1488\":1}}],[\"的高\",{\"1\":{\"1112\":1}}],[\"的直接返回降级数据\",{\"1\":{\"1636\":1}}],[\"的直接子线程组\",{\"1\":{\"1099\":1}}],[\"的直接后继\",{\"1\":{\"6\":2}}],[\"的状态\",{\"1\":{\"1089\":1,\"1487\":1}}],[\"的状态转换关系如下\",{\"1\":{\"186\":1}}],[\"的地址\",{\"1\":{\"1076\":1}}],[\"的地位\",{\"0\":{\"808\":1}}],[\"的锁\",{\"1\":{\"1092\":1}}],[\"的锁机制\",{\"1\":{\"1075\":1}}],[\"的锁资源\",{\"1\":{\"139\":1}}],[\"的作用就是向容器中导入两个配置类\",{\"1\":{\"1058\":1}}],[\"的使用基于\",{\"1\":{\"1053\":1}}],[\"的定义\",{\"1\":{\"1042\":1}}],[\"的定义里是\",{\"1\":{\"460\":1}}],[\"的事务模型主要关注原子性和隔离性\",{\"1\":{\"1571\":1}}],[\"的事务id\",{\"1\":{\"1557\":1}}],[\"的事务归根到底还是执行了底层数据库的事务相关语句\",{\"1\":{\"1033\":1}}],[\"的事件循环是否与当前的事件循环是同一个线程\",{\"1\":{\"818\":1}}],[\"的监听器集合中\",{\"1\":{\"1012\":1}}],[\"的全限定类名\",{\"1\":{\"1006\":1}}],[\"的全局唯一编号\",{\"1\":{\"445\":1}}],[\"的各个项\",{\"1\":{\"970\":1}}],[\"的数量\",{\"1\":{\"1464\":1}}],[\"的数量与大小\",{\"1\":{\"1194\":1}}],[\"的数字\",{\"1\":{\"1204\":1}}],[\"的数组\",{\"1\":{\"946\":1}}],[\"的数据持久性\",{\"1\":{\"1556\":1}}],[\"的数据是按数据页为单位来读写的\",{\"1\":{\"1546\":1}}],[\"的数据存储方式\",{\"1\":{\"1540\":1}}],[\"的数据填满整个网络\",{\"1\":{\"1413\":1}}],[\"的数据填满\",{\"1\":{\"1412\":1}}],[\"的数据达到\",{\"1\":{\"839\":1}}],[\"的数据可靠性是依赖\",{\"1\":{\"460\":1}}],[\"的数据\",{\"1\":{\"14\":1}}],[\"的形式命名\",{\"1\":{\"1338\":1}}],[\"的形式保存\",{\"1\":{\"913\":7}}],[\"的形式进行统计查询\",{\"1\":{\"584\":1}}],[\"的长字符串\",{\"1\":{\"896\":1}}],[\"的长度有限制\",{\"1\":{\"1405\":1}}],[\"的长度是否小于len\",{\"1\":{\"975\":1}}],[\"的长度\",{\"1\":{\"844\":1}}],[\"的短字符串\",{\"1\":{\"896\":1}}],[\"的启动类开启注解功能\",{\"1\":{\"1269\":1,\"1613\":1}}],[\"的启动\",{\"1\":{\"873\":1}}],[\"的一句话\",{\"1\":{\"1819\":1}}],[\"的一部分\",{\"1\":{\"1626\":1}}],[\"的一个专门芯片\",{\"1\":{\"1443\":1}}],[\"的一个核心类\",{\"1\":{\"868\":1}}],[\"的一半\",{\"1\":{\"1413\":1}}],[\"的一幅图\",{\"1\":{\"1117\":1}}],[\"的一些严重\",{\"1\":{\"382\":1}}],[\"的一些重要缺陷\",{\"1\":{\"380\":1}}],[\"的5个关键步骤\",{\"1\":{\"867\":1}}],[\"的第5步注册感兴趣事件\",{\"1\":{\"867\":1}}],[\"的第4步\",{\"1\":{\"866\":1}}],[\"的第3步\",{\"1\":{\"865\":1}}],[\"的第2步\",{\"1\":{\"864\":1}}],[\"的第1步\",{\"1\":{\"863\":1,\"870\":1}}],[\"的开启\",{\"1\":{\"863\":1}}],[\"的开发范式\",{\"1\":{\"863\":1}}],[\"的开发迭代更迅速\",{\"1\":{\"809\":1}}],[\"的大小为第一个$>=ht\",{\"1\":{\"883\":2}}],[\"的大小\",{\"1\":{\"859\":2}}],[\"的大版本号\",{\"1\":{\"240\":1}}],[\"的参数\",{\"1\":{\"857\":1}}],[\"的其它\",{\"1\":{\"851\":1}}],[\"的编解码器\",{\"1\":{\"846\":1}}],[\"的编排依次处理数据\",{\"1\":{\"814\":1}}],[\"的复制\",{\"1\":{\"830\":1}}],[\"的零拷贝指的是对\",{\"1\":{\"830\":1}}],[\"的总容量\",{\"1\":{\"827\":1}}],[\"的核心\",{\"1\":{\"1054\":1}}],[\"的核心组件之一\",{\"1\":{\"824\":1}}],[\"的核心acquire\",{\"1\":{\"5\":1}}],[\"的逆序执行的\",{\"1\":{\"823\":1}}],[\"的顺序执行的\",{\"1\":{\"823\":1}}],[\"的处理顺序\",{\"1\":{\"823\":1}}],[\"的关闭\",{\"1\":{\"819\":1}}],[\"的待处理任务\",{\"1\":{\"814\":1}}],[\"的加工\",{\"1\":{\"814\":1}}],[\"的请求\",{\"1\":{\"813\":2,\"1281\":1,\"1620\":1}}],[\"的依赖\",{\"1\":{\"810\":1}}],[\"的依赖传递产生问题\",{\"1\":{\"382\":1}}],[\"的能力\",{\"1\":{\"791\":1,\"817\":1}}],[\"的注册\",{\"1\":{\"789\":1}}],[\"的话\",{\"1\":{\"788\":1}}],[\"的位置\",{\"1\":{\"773\":1}}],[\"的影响\",{\"1\":{\"770\":1}}],[\"的头记录中的n\",{\"1\":{\"690\":1}}],[\"的伪记录\",{\"1\":{\"689\":1}}],[\"的缺陷是对表的大小有限制\",{\"1\":{\"682\":1}}],[\"的流量\",{\"1\":{\"657\":1}}],[\"的工厂\",{\"1\":{\"1020\":1}}],[\"的工作压力\",{\"1\":{\"640\":1}}],[\"的工具类\",{\"1\":{\"25\":1}}],[\"的取值有\",{\"1\":{\"634\":2}}],[\"的条件\",{\"1\":{\"623\":1}}],[\"的行锁是针对索引加锁\",{\"1\":{\"620\":1}}],[\"的行为\",{\"1\":{\"42\":1}}],[\"的任何一个\",{\"1\":{\"607\":1}}],[\"的区别\",{\"1\":{\"585\":1}}],[\"的争用以外\",{\"1\":{\"549\":1}}],[\"的绑定模块\",{\"1\":{\"545\":1}}],[\"的执行\",{\"1\":{\"544\":1}}],[\"的接口去真正地执行\",{\"1\":{\"544\":1}}],[\"的代理对象\",{\"1\":{\"543\":1,\"1028\":1}}],[\"的封装\",{\"1\":{\"540\":1,\"1368\":1}}],[\"的强大功能之一\",{\"1\":{\"534\":1}}],[\"的字段\",{\"1\":{\"532\":1}}],[\"的字符串\",{\"1\":{\"14\":1}}],[\"的提交和回滚功能\",{\"1\":{\"525\":1}}],[\"的枚举序号\",{\"1\":{\"521\":1}}],[\"的时机\",{\"1\":{\"1524\":1}}],[\"的时候才对数据进行过期检查\",{\"1\":{\"1573\":1}}],[\"的时候需要用\",{\"1\":{\"1423\":1}}],[\"的时候返回的就是\",{\"1\":{\"1010\":1}}],[\"的时候\",{\"1\":{\"1006\":1,\"1012\":1,\"1115\":1}}],[\"的时候会直接返回这个数\",{\"1\":{\"619\":1}}],[\"的时候也不会再增加许可证\",{\"1\":{\"366\":1}}],[\"的时间间隔\",{\"1\":{\"491\":1}}],[\"的分支预测器\",{\"1\":{\"1435\":1}}],[\"的分布式锁\",{\"1\":{\"1234\":1}}],[\"的分组\",{\"1\":{\"617\":1}}],[\"的分区数\",{\"1\":{\"485\":1,\"500\":1}}],[\"的分隔符可以将键值对的串解析为\",{\"1\":{\"79\":1}}],[\"的频率\",{\"1\":{\"485\":1}}],[\"的不同变量\",{\"1\":{\"1435\":1}}],[\"的不同\",{\"1\":{\"477\":1}}],[\"的不足\",{\"1\":{\"324\":1}}],[\"的最后\",{\"1\":{\"1478\":1}}],[\"的最后一个版本\",{\"1\":{\"382\":1}}],[\"的最大长度\",{\"1\":{\"856\":1}}],[\"的最大容量\",{\"1\":{\"827\":1}}],[\"的最大\",{\"1\":{\"476\":1}}],[\"的稀疏索引\",{\"1\":{\"475\":1}}],[\"的变更同步至zookeeper\",{\"1\":{\"470\":1}}],[\"的副本作用是提高数据的可靠性\",{\"1\":{\"469\":1}}],[\"的滑动窗口\",{\"1\":{\"462\":1}}],[\"的传递语义\",{\"1\":{\"461\":1}}],[\"的情况下\",{\"1\":{\"452\":3}}],[\"的线程池是一种基于池化思想\",{\"1\":{\"1104\":1}}],[\"的线程对象\",{\"1\":{\"869\":1}}],[\"的线程来调用\",{\"1\":{\"818\":1}}],[\"的线程数量\",{\"1\":{\"445\":1}}],[\"的线程取出并执行它的\",{\"1\":{\"196\":1}}],[\"的从节点\",{\"1\":{\"443\":1}}],[\"的主体\",{\"1\":{\"1494\":1}}],[\"的主从同步使用\",{\"1\":{\"1365\":1}}],[\"的主题\",{\"1\":{\"446\":1}}],[\"的主节点\",{\"1\":{\"443\":1}}],[\"的主要接口\",{\"1\":{\"508\":1}}],[\"的主要作用是为客户端应用提供一种通信机制\",{\"1\":{\"433\":1}}],[\"的主要目标是提供一种灵活的\",{\"1\":{\"2\":1}}],[\"的功能\",{\"1\":{\"440\":1,\"822\":1,\"1011\":1,\"1178\":1,\"1379\":1}}],[\"的功能包括创建索引和搜索两步\",{\"1\":{\"53\":1}}],[\"的系统开销下进行消息持久化\",{\"1\":{\"431\":1}}],[\"的洗礼并有稳定出色表现的国产中间件\",{\"1\":{\"426\":1}}],[\"的顶级项目\",{\"1\":{\"426\":1}}],[\"的过程是\",{\"1\":{\"1524\":1}}],[\"的过程中\",{\"1\":{\"1060\":1}}],[\"的过程中都可能丢失\",{\"1\":{\"419\":1}}],[\"的过期策略\",{\"1\":{\"25\":1}}],[\"的回调是由\",{\"1\":{\"820\":1}}],[\"的回调\",{\"1\":{\"417\":1,\"420\":1}}],[\"的序列化器\",{\"1\":{\"417\":1}}],[\"的消息拷贝导致额外开销的问题\",{\"1\":{\"1459\":1}}],[\"的消息时\",{\"1\":{\"476\":1}}],[\"的消息路由到所有与它绑定的\",{\"1\":{\"414\":1,\"1628\":1}}],[\"的消息主题\",{\"1\":{\"408\":1}}],[\"的路由规则\",{\"1\":{\"413\":1}}],[\"的协议\",{\"1\":{\"409\":1}}],[\"的实例\",{\"1\":{\"408\":1,\"1594\":1}}],[\"的实现里就是\",{\"1\":{\"865\":1}}],[\"的实现是一个\",{\"1\":{\"823\":1}}],[\"的实现打印日志\",{\"1\":{\"382\":1}}],[\"的实现\",{\"1\":{\"158\":1,\"376\":1,\"813\":2}}],[\"的卓越性能\",{\"1\":{\"391\":1}}],[\"的桥接包是\",{\"1\":{\"383\":1}}],[\"的市场\",{\"1\":{\"380\":1}}],[\"的所有核心服务\",{\"1\":{\"1540\":1}}],[\"的所有键值对都会被rehash至ht\",{\"1\":{\"883\":1}}],[\"的所有内容\",{\"1\":{\"832\":1}}],[\"的所有配置信息都维护在\",{\"1\":{\"540\":1}}],[\"的所有特性\",{\"1\":{\"376\":1}}],[\"的所有工具类都并非直接继承自\",{\"1\":{\"9\":1}}],[\"的值自增1\",{\"1\":{\"948\":1}}],[\"的值在三次握手时通知对方自己\",{\"1\":{\"839\":1}}],[\"的值为\",{\"1\":{\"839\":1}}],[\"的值\",{\"1\":{\"366\":2,\"490\":1,\"839\":1}}],[\"的值设置为\",{\"1\":{\"148\":1}}],[\"的机制\",{\"1\":{\"362\":1}}],[\"的ip地址对象\",{\"1\":{\"339\":1}}],[\"的串\",{\"1\":{\"301\":1}}],[\"的优化包括\",{\"1\":{\"1486\":1}}],[\"的优化过程则是支撑了程序员的编码效率和语言使用者幸福感的提升\",{\"1\":{\"255\":1}}],[\"的优势\",{\"0\":{\"809\":1,\"1542\":1}}],[\"的优点是并发收集\",{\"1\":{\"176\":1}}],[\"的<clinit>\",{\"1\":{\"253\":1}}],[\"的标志位\",{\"1\":{\"240\":1}}],[\"的访问标记\",{\"1\":{\"240\":1}}],[\"的常量值等\",{\"1\":{\"211\":1}}],[\"的规范\",{\"1\":{\"211\":1}}],[\"的特殊方法\",{\"1\":{\"196\":1}}],[\"的特点包括\",{\"1\":{\"156\":1}}],[\"的子类不能共享\",{\"1\":{\"851\":1}}],[\"的子类\",{\"1\":{\"195\":1,\"823\":2}}],[\"的引用不应再入队了\",{\"1\":{\"196\":1}}],[\"的引用\",{\"1\":{\"188\":1}}],[\"的引用实例能够入队的高优先级线程\",{\"1\":{\"188\":1}}],[\"的老年代版本\",{\"1\":{\"173\":1,\"175\":1}}],[\"的semaphore\",{\"1\":{\"159\":1}}],[\"的公平锁\",{\"1\":{\"156\":1,\"157\":1}}],[\"的公有方法而破坏同步器的状态\",{\"1\":{\"9\":1}}],[\"的非公平锁\",{\"1\":{\"156\":1,\"157\":1}}],[\"的清理\",{\"1\":{\"154\":1,\"1514\":2}}],[\"的哈希定位槽位\",{\"1\":{\"1514\":1}}],[\"的哈希定位\",{\"1\":{\"154\":1}}],[\"的哈希\",{\"1\":{\"154\":1,\"1514\":1}}],[\"的方案\",{\"1\":{\"1268\":1,\"1586\":1}}],[\"的方法\",{\"1\":{\"139\":1,\"163\":1,\"863\":1,\"1111\":1,\"1269\":1,\"1613\":1}}],[\"的方式来通知进程\",{\"1\":{\"1462\":1}}],[\"的方式更加简洁高效\",{\"1\":{\"510\":1}}],[\"的方式\",{\"1\":{\"67\":1}}],[\"的入站处理\",{\"1\":{\"97\":1}}],[\"的localcache成员存储实际的\",{\"1\":{\"73\":1}}],[\"的逻辑中\",{\"1\":{\"1025\":1}}],[\"的逻辑日志\",{\"1\":{\"643\":1}}],[\"的逻辑\",{\"1\":{\"72\":1}}],[\"的转换\",{\"1\":{\"71\":1}}],[\"的双键映射\",{\"1\":{\"69\":1}}],[\"的映射关系\",{\"1\":{\"1006\":1,\"1378\":1}}],[\"的映射\",{\"1\":{\"68\":2,\"70\":2,\"1010\":1,\"1378\":1}}],[\"的视图\",{\"1\":{\"67\":1}}],[\"的含义\",{\"1\":{\"58\":1}}],[\"的optional<t>是用来处理可能为\",{\"1\":{\"58\":1}}],[\"的身份验证方法\",{\"1\":{\"26\":1}}],[\"的完整功能\",{\"1\":{\"25\":1}}],[\"的具体逻辑\",{\"1\":{\"25\":1}}],[\"的具体策略\",{\"1\":{\"25\":1}}],[\"的源码分析\",{\"1\":{\"197\":1}}],[\"的源码\",{\"1\":{\"9\":1}}],[\"的源码为例\",{\"1\":{\"1\":1}}],[\"的等待队列中\",{\"1\":{\"1511\":1}}],[\"的等待队列为空才可以去加锁\",{\"1\":{\"9\":1}}],[\"的等待队列里\",{\"1\":{\"8\":1}}],[\"的等待队列\",{\"1\":{\"8\":1}}],[\"的release\",{\"1\":{\"5\":1}}],[\"的\",{\"1\":{\"1\":1,\"9\":1,\"27\":1,\"58\":1,\"64\":1,\"69\":1,\"77\":1,\"78\":1,\"82\":1,\"83\":1,\"92\":1,\"99\":1,\"139\":2,\"146\":1,\"153\":1,\"154\":2,\"160\":1,\"161\":1,\"380\":1,\"383\":2,\"384\":1,\"422\":1,\"424\":2,\"425\":1,\"452\":1,\"461\":1,\"465\":1,\"470\":2,\"471\":3,\"478\":1,\"480\":2,\"481\":1,\"521\":2,\"529\":1,\"543\":1,\"544\":1,\"647\":1,\"760\":1,\"765\":1,\"771\":1,\"772\":1,\"777\":2,\"787\":1,\"788\":4,\"799\":1,\"814\":1,\"816\":1,\"817\":2,\"822\":2,\"828\":3,\"839\":1,\"851\":2,\"867\":2,\"883\":2,\"1010\":1,\"1012\":2,\"1015\":1,\"1018\":1,\"1021\":1,\"1045\":1,\"1054\":2,\"1060\":1,\"1061\":1,\"1074\":2,\"1076\":2,\"1077\":2,\"1086\":1,\"1114\":2,\"1135\":1,\"1138\":2,\"1152\":1,\"1155\":1,\"1170\":1,\"1189\":1,\"1203\":2,\"1221\":1,\"1269\":2,\"1281\":1,\"1283\":1,\"1347\":1,\"1355\":1,\"1369\":1,\"1404\":1,\"1411\":1,\"1446\":1,\"1513\":1,\"1514\":2,\"1518\":1,\"1532\":1,\"1540\":1,\"1567\":1,\"1596\":1,\"1599\":2,\"1613\":2,\"1620\":1,\"1643\":1,\"1677\":1,\"1712\":8,\"1791\":1}}],[\"城中肉眼可见高耸的光秃秃的大山\",{\"1\":{\"1834\":1}}],[\"城市拼音简称\",{\"1\":{\"1361\":1}}],[\"城\",{\"1\":{\"0\":1}}],[\"撸铁\",{\"1\":{\"0\":1}}],[\"战争\",{\"1\":{\"0\":1}}],[\"历史书还是挺有意思的\",{\"1\":{\"1817\":1}}],[\"历史原因\",{\"1\":{\"1444\":1}}],[\"历史信息记录服务\",{\"1\":{\"1222\":1}}],[\"历史\",{\"1\":{\"0\":1}}],[\">sepia<\",{\"1\":{\"1855\":1}}],[\">sync\",{\"1\":{\"156\":1,\"157\":1}}],[\">invert<\",{\"1\":{\"1855\":1}}],[\">id\",{\"1\":{\"34\":1}}],[\">grayscale<\",{\"1\":{\"1855\":1}}],[\">blur<\",{\"1\":{\"1855\":1}}],[\">none<\",{\"1\":{\"1855\":1}}],[\">nonfairsync\",{\"1\":{\"156\":1,\"157\":1}}],[\">步骤执行\",{\"1\":{\"1221\":1}}],[\">汇总模式的分布式计算框架\",{\"1\":{\"1221\":1}}],[\">汇总\",{\"1\":{\"1221\":1}}],[\">父线程\",{\"1\":{\"1088\":1}}],[\">proc\",{\"1\":{\"927\":1}}],[\">cmd\",{\"1\":{\"927\":1}}],[\">read\",{\"1\":{\"828\":1}}],[\"><property\",{\"1\":{\"531\":2}}],[\"><\",{\"1\":{\"389\":2,\"531\":2,\"1870\":1}}],[\">>>\",{\"1\":{\"1664\":1,\"1666\":5}}],[\">>>=\",{\"1\":{\"1664\":1}}],[\">>>>>>>\",{\"1\":{\"1336\":1}}],[\">>定时任务\",{\"1\":{\"869\":1}}],[\">>\",{\"1\":{\"154\":1,\"522\":1,\"1028\":2,\"1097\":3,\"1225\":2,\"1382\":2,\"1599\":1,\"1654\":1,\"1664\":1,\"1685\":2}}],[\">2\",{\"1\":{\"79\":1}}],[\">1\",{\"1\":{\"79\":1}}],[\">doc1\",{\"1\":{\"34\":2}}],[\">dosignal方法\",{\"1\":{\"8\":1}}],[\">=mss\",{\"1\":{\"1412\":1}}],[\">=10\",{\"1\":{\"623\":2}}],[\">=核心线程数\",{\"1\":{\"332\":1}}],[\">=\",{\"1\":{\"6\":1,\"471\":1,\"476\":1,\"583\":2,\"585\":1,\"608\":1,\"623\":1,\"631\":2,\"702\":1,\"866\":1,\"989\":3,\"993\":2,\"996\":2,\"1113\":1,\"1114\":1,\"1412\":1,\"1413\":1,\"1567\":1,\"1652\":2,\"1653\":3,\"1654\":1,\"1676\":1}}],[\">\",{\"0\":{\"1266\":1,\"1267\":1,\"1584\":1,\"1585\":1},\"1\":{\"0\":3,\"5\":1,\"6\":1,\"14\":1,\"24\":1,\"58\":4,\"61\":3,\"68\":2,\"70\":2,\"71\":1,\"73\":3,\"77\":2,\"79\":2,\"95\":1,\"96\":1,\"97\":2,\"118\":2,\"121\":2,\"122\":1,\"124\":1,\"153\":3,\"154\":1,\"161\":1,\"183\":1,\"184\":2,\"187\":1,\"188\":3,\"189\":3,\"255\":3,\"263\":2,\"287\":9,\"332\":3,\"349\":1,\"353\":2,\"357\":4,\"363\":1,\"378\":2,\"382\":4,\"383\":4,\"387\":1,\"388\":16,\"389\":3,\"391\":2,\"417\":2,\"419\":2,\"455\":2,\"487\":2,\"505\":1,\"506\":15,\"518\":4,\"519\":4,\"520\":2,\"521\":6,\"522\":2,\"523\":2,\"524\":11,\"528\":8,\"530\":8,\"531\":2,\"532\":9,\"533\":2,\"535\":3,\"536\":3,\"537\":9,\"538\":2,\"541\":2,\"544\":2,\"550\":1,\"569\":2,\"583\":1,\"585\":2,\"588\":6,\"598\":1,\"608\":1,\"609\":2,\"610\":1,\"611\":1,\"698\":1,\"699\":2,\"702\":3,\"726\":1,\"736\":3,\"754\":1,\"774\":2,\"777\":2,\"779\":1,\"783\":1,\"791\":1,\"817\":3,\"822\":1,\"865\":2,\"873\":2,\"879\":1,\"971\":4,\"989\":1,\"993\":3,\"994\":1,\"996\":2,\"998\":3,\"1002\":1,\"1010\":1,\"1012\":4,\"1015\":3,\"1016\":4,\"1022\":1,\"1028\":1,\"1054\":1,\"1055\":1,\"1059\":1,\"1067\":1,\"1068\":9,\"1091\":2,\"1095\":1,\"1097\":3,\"1098\":3,\"1106\":4,\"1110\":3,\"1114\":1,\"1115\":6,\"1116\":3,\"1120\":3,\"1135\":1,\"1139\":3,\"1140\":1,\"1141\":2,\"1179\":2,\"1197\":4,\"1218\":1,\"1222\":2,\"1226\":1,\"1261\":3,\"1263\":2,\"1302\":3,\"1333\":1,\"1336\":5,\"1355\":2,\"1361\":1,\"1363\":3,\"1366\":1,\"1367\":6,\"1368\":2,\"1369\":3,\"1379\":3,\"1382\":1,\"1394\":1,\"1395\":5,\"1396\":1,\"1409\":10,\"1422\":1,\"1424\":5,\"1425\":5,\"1428\":2,\"1433\":3,\"1436\":2,\"1443\":2,\"1446\":2,\"1475\":2,\"1482\":6,\"1486\":4,\"1488\":2,\"1502\":1,\"1506\":5,\"1520\":3,\"1521\":3,\"1529\":6,\"1553\":4,\"1554\":1,\"1557\":1,\"1567\":6,\"1602\":5,\"1631\":4,\"1632\":3,\"1641\":5,\"1645\":2,\"1651\":1,\"1653\":1,\"1658\":4,\"1673\":1,\"1674\":2,\"1675\":1,\"1685\":2,\"1791\":6,\"1792\":1,\"1799\":4,\"1825\":3,\"1855\":5}}],[\"科幻\",{\"1\":{\"0\":1}}],[\"豆瓣\",{\"1\":{\"0\":1}}],[\"酷安好物是一个好物推荐和购物商城\",{\"1\":{\"1365\":1}}],[\"酷安好物\",{\"0\":{\"1365\":1}}],[\"酷安\",{\"1\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
