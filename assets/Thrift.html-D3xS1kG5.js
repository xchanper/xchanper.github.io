import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as l,o as t}from"./app-CHBNztBQ.js";const n={};function e(h,i){return t(),a("div",null,i[0]||(i[0]=[l(`<p>Thrift 是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务，被当作一个远程过程调用（RPC）框架来使用。</p><h2 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤"><span>使用步骤</span></a></h2><ul><li>通过 IDL 定义需要远程方法调用的接口</li><li>通过 thrift 编译器生成代码，包含接口定义、Client、Processor等，用于结构化数据的解析、发送、接受 <code>thrift -r -gen java file</code></li><li>创建实现类定义具体的远程执行逻辑</li><li>Server 端通过定义具体的远程执行逻辑，创建服务器<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;服务端开启......&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TProcessor</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tProcessor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Processor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Iface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HelloImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TServerSocket</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> serverSocket </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TServerSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8999</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TServer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Args</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tArgs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> TServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(serverSocket);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">tArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">processor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tProcessor);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">tArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">protocolFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TBinaryProtocol.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TServer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> server </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TSimpleServer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(tArgs)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">serve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Client 端通过创建实现了指定接口的Client调用对应的远程方法<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;客户端启动.....&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TTransport</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> transport </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8999</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30000</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 协议要和服务端一致</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TProtocol</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> protocol </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TBinaryProtocol</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(transport)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Hello</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Client</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> client </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(protocol);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">transport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">helloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Client invoke -- &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="框架层次" tabindex="-1"><a class="header-anchor" href="#框架层次"><span>框架层次</span></a></h2><ul><li>Thrift是一种C/S的架构体系.在最上层是用户自行实现的业务逻辑代码</li><li>第二层是由Thrift编译器自动生成的代码，主要用于结构化数据的解析，发送和接收。 <ul><li>TServer主要任务是高效的接受客户端请求，并将请求转发Processor处理。</li><li>Processor负责对客户端的请求做出响应，包括RPC请求转发，调用参数解析和用户逻辑调用，返回值写回等处理。</li></ul></li><li>从TProtocol以下部分是thirft的传输协议和底层I/O通信。 <ul><li>TProtocol是用于数据类型解析的，将结构化数据转化为字节流给TTransport进行传输。</li><li>TTransport是与底层数据传输密切相关的传输层，负责以字节流方式接收和发送消息体，不关注是什么数据类型。</li><li>底层IO负责实际的数据传输，包括socket、文件和压缩数据流等。</li></ul></li></ul><h2 id="传输形式" tabindex="-1"><a class="header-anchor" href="#传输形式"><span>传输形式</span></a></h2><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><ul><li>Base Types：基本类型</li><li>Struct：结构体类型</li><li>Container：容器类型，即List、Set、Map</li><li>Exception：异常类型</li><li>Service： 定义对象的接口，和一系列方法</li></ul><h3 id="协议" tabindex="-1"><a class="header-anchor" href="#协议"><span>协议</span></a></h3><p>总体上分 文本text 和 二进制binary 两种格式，一般为了节省带宽使用 binary。</p><ul><li>TBinaryProtocol – 二进制编码格式进行数据传输。</li><li>TCompactProtocol – 这种协议非常有效的，使用Variable-Length Quantity (VLQ) 编码对数据进行压缩。</li><li>TJSONProtocol – 使用JSON的数据编码协议进行数据传输。</li><li>TSimpleJSONProtocol – 这种节约只提供JSON只写的协议，适用于通过脚本语言解析。</li><li>TDebugProtocol – 在开发的过程中帮助开发人员调试用的，以文本的形式展现方便阅读。</li></ul><h3 id="传输层" tabindex="-1"><a class="header-anchor" href="#传输层"><span>传输层</span></a></h3><ul><li>TSocket- 使用堵塞式I/O进行传输，也是最常见的模式。</li><li>TFramedTransport- 使用非阻塞方式，按块的大小，进行传输，类似于Java中的NIO。</li><li>TFileTransport- 顾名思义按照文件的方式进程传输，虽然这种方式不提供Java的实现，但是实现起来非常简单。</li><li>TMemoryTransport- 使用内存I/O，就好比Java中的ByteArrayOutputStream实现。</li><li>TZlibTransport- 使用执行zlib压缩，不提供Java的实现。</li></ul><h3 id="服务端类型" tabindex="-1"><a class="header-anchor" href="#服务端类型"><span>服务端类型</span></a></h3><ul><li>TSimpleServer - 单线程服务器端使用标准的堵塞式I/O。</li><li>TThreadPoolServer - 多线程服务器端使用标准的堵塞式I/O。</li><li>TNonblockingServer – 多线程服务器端使用非堵塞式I/O，并且实现了Java中的NIO通道。</li></ul>`,15)]))}const p=s(n,[["render",e]]),d=JSON.parse('{"path":"/coding/Thrift.html","title":"RPC-Thrift","lang":"zh-CN","frontmatter":{"title":"RPC-Thrift","date":"2023-06-07T00:00:00.000Z","category":["分布式"],"tag":["RPC"],"description":"Thrift 是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务，被当作一个远程过程调用（RPC）框架来使用。 使用步骤 通过 IDL 定义需要远程方法调用的接口 通过 thrift 编译器生成代码，包含接口定义、Client、Processor等，用于结构化数据的解析、发送、接受 thrift -r -gen java file 创建...","head":[["meta",{"property":"og:url","content":"https://xchanper.github.io/coding/Thrift.html"}],["meta",{"property":"og:site_name","content":"chanper"}],["meta",{"property":"og:title","content":"RPC-Thrift"}],["meta",{"property":"og:description","content":"Thrift 是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务，被当作一个远程过程调用（RPC）框架来使用。 使用步骤 通过 IDL 定义需要远程方法调用的接口 通过 thrift 编译器生成代码，包含接口定义、Client、Processor等，用于结构化数据的解析、发送、接受 thrift -r -gen java file 创建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-22T07:34:10.000Z"}],["meta",{"property":"article:tag","content":"RPC"}],["meta",{"property":"article:published_time","content":"2023-06-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-22T07:34:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RPC-Thrift\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-22T07:34:10.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用步骤","slug":"使用步骤","link":"#使用步骤","children":[]},{"level":2,"title":"框架层次","slug":"框架层次","link":"#框架层次","children":[]},{"level":2,"title":"传输形式","slug":"传输形式","link":"#传输形式","children":[{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"协议","slug":"协议","link":"#协议","children":[]},{"level":3,"title":"传输层","slug":"传输层","link":"#传输层","children":[]},{"level":3,"title":"服务端类型","slug":"服务端类型","link":"#服务端类型","children":[]}]}],"git":{"createdTime":1750577650000,"updatedTime":1750577650000,"contributors":[{"name":"chanper","email":"qianchaosolo@gmail.com","commits":1}]},"filePathRelative":"coding/Thrift.md","localizedDate":"2023年6月7日","autoDesc":true}');export{p as comp,d as data};
