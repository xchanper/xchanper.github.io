import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-CHBNztBQ.js";const e="/img/JVM%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png",t="/img/Monitor%E7%BB%93%E6%9E%84.png",h="/img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%811.png",r="/img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%812.png",p="/img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%814.png",o="/img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%813.png",d="/img/%E5%81%8F%E5%90%91%E9%94%81.png",c="/img/synchronized%E9%94%81%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6.png",k={};function g(A,i){return l(),a("div",null,i[0]||(i[0]=[n(`<p>为了避免临界区的竞态条件发生，可以用非阻塞式的原子变量，也可以用阻塞式的锁。Java 多线程的锁都是<strong>对象锁</strong>，采用互斥的方式让同一时刻只有一个线程能够持有对象锁，从而进入临界区，而其它线程只能阻塞等待，因此不用担心线程上下文切换造成共享资源错乱。</p><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式"><span>使用方式</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 形式1：关键字在实例方法上，锁为当前实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> instanceLock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // code</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 形式2：关键字在静态方法上，锁为当前 Class 对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> classLock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // code</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 形式3：关键字在代码块上，锁为括号里面的对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> blockLock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> o </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (o) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // code</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 等价于形式1，锁为当前实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> blockLock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // code</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 等价于形式2，锁为当前Class对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> blockLock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // code</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原理-monitor" tabindex="-1"><a class="header-anchor" href="#原理-monitor"><span>原理 - Monitor</span></a></h2><p>了解 Monitor 之前首先要知道对象在 JVM 中的内存布局，主要包括：</p><ul><li>对象头：存储对象的基础信息，GC状态、元数据等 <ul><li>Mark Word：对象标记字段，存储一些标记位，如哈希码、锁状态，分代年龄等</li><li>Klass Pointer：指向对象对应的 Class 对象</li></ul></li><li>实例数据：存储对象实例数据</li><li>对齐填充：填充至 8Byte 整数倍</li></ul><p>其中跟锁相关的数据在对象头的 Mark Word 中。</p><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>JVM 中的每个对象都会关联一个 Monitor 监视器，或者叫管程，一旦某个线程使用 synchronized 给对象上锁（重量级锁），该对象的 Mark Word 中就会记录下对应的 Monitor 指针，同时 Monitor 对象内部的 Owner 字段也会设置为该线程，就像图中的 Thead-2。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果后续有其它线程试图对同一个对象进行上锁，首先会进行自旋重试上锁，如果一直失败就会被封装成 ObjectWaiter 附在 Monitor 的 EntryList 列表中，然后调用 park 挂起进入阻塞状态，等待被唤醒。而当 Thread-2 退出临界区之后，就会根据某种策略通过 unpark 主动唤醒 EntryList 中的某个线程。</p><p>从字节码角度看，JVM 是通过 monitorenter/monitorexit 两个指令实现上锁和解锁的，底层依赖于 OS 的 Mutex Lock，需要额外的用户态到内核态切换的开销，因此称这种上锁为重量级锁，也是 JDK 1.6 之前 synchronized 关键字基本的上锁原理。</p><h2 id="锁优化" tabindex="-1"><a class="header-anchor" href="#锁优化"><span>锁优化</span></a></h2><p>在 JDK 1.6 之前，synchronized 只有上述基于 Monitor 的锁机制，但是经调研发现，实际的程序在运行过程中，锁资源的竞争并没有那么激烈，如果每次都关联 Monitor 修改 Mark Word 操作会很浪费性能，因此 JVM 后续做了很多优化措施，来提高没有多线程竞争或基本没有竞争的场景下的并发性能。</p><h3 id="轻量级锁" tabindex="-1"><a class="header-anchor" href="#轻量级锁"><span>轻量级锁</span></a></h3><p>我们先退一步，假设一个锁资源被多个线程共享，但它们加锁的事件是错开的，即不存在竞争，那么可以用轻量级锁来优化，在轻量级锁中不涉及 Monitor 对象。在此之前，需要知道每个线程的栈帧里都会包含一个 Lock Record 锁记录，其中主要有两部分：</p><ul><li>地址：该 Lock Record 的地址</li><li>Object Reference：对象引用</li></ul><p><strong>进入临界区</strong></p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当一个线程执行 synchronized 对某个 object 上锁时，首先会尝试 CAS 交换 Lock Record 地址和该 object 的 Mark Word，如果替换成功，表示由该线程给 object 上了锁。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而如果替换失败，那么会对应两种情况：</p><ol><li>其它线程已经持有该 object 的轻量级锁，表示有竞争，那么会进入<strong>锁膨胀</strong><ul><li>为 object 申请 Monitor 对象，并让 Mark Word 指向该 Monitor</li><li>然后自己进入 Monitor 的 EntryList 转为阻塞状态</li></ul></li></ol><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>如果是自己已经持有 该 object 的轻量级锁，表示重入，那么会再创建一条 Lock Record 作为重入的计数器，并且该锁记录的地址字段为 null</li></ol><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>退出临界区</strong></p><p>当退出临界区解锁时，也有两种情况：</p><ol><li>如果锁记录取值为 null，表示有重入，重入计数 -1</li><li>如果锁记录不为 null，那么 CAS 交换回 Mark Word 和 Lock Record 地址，此时有两种结果 <ul><li>CAS 成功，解锁完成</li><li>CAS 失败，说明轻量级锁进行了锁膨胀，升级为了重量级锁，之后进入重量级锁解锁流程</li></ul></li></ol><p>轻量级锁适用于两个线程交替执行的场景，如果有竞争，直接膨胀为重量级锁，没有自旋操作。</p><h3 id="偏向锁" tabindex="-1"><a class="header-anchor" href="#偏向锁"><span>偏向锁</span></a></h3><p>我们再退一步，如果一个共享资源竞争很少，一直由某个线程上锁，那么轻量级锁就没有必要每次都 CAS 交换 Lock Record 地址和 object 的 Mark Word 了，因此可以进一步优化：第一次上锁时使用 CAS 交换 Thread ID 和 Mark Word，后续只要校验 object 的 Mark Word 里存储的 Thread ID 仍是自己，判断没有发生竞争，这个对象就归该线程所持有，这样就仅需要一次 CAS 操作了。从机制上也能发现，偏向锁解锁后对象头里依然存储着线程 ID，并且这里的 ID 是 OS 分配的，和 Java 层面的线程ID 并不一致。。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要注意的是：</p><ul><li>偏向锁开启时，即对象创建后，Mark Word 后三位为 101，thread/epoch/age 都为 0</li><li>如果用<code>-XX:-UseBiasedLocking</code>禁用偏向锁，那么对象创建后，Mark Word 后三位为 001，hashcode/age 都为 0，直到第一次用到 hashcode 时才会赋值</li><li>偏向锁的对象头里存储了线程 ID，没有空间存储 hashcode 了，所以如果调用 hashCode 会撤销偏向锁，恢复为无锁状态 <ul><li>轻量级锁在锁记录存储 hashcode</li><li>重量级锁在 Monitor 中存储 hashcode</li></ul></li><li>如果校验时发现线程不一致，说明有竞争，偏向锁将会被撤销，升级为轻量级锁 <ul><li>撤销超过 20 次，JVM 会重偏向至加锁的 Thread ID</li><li>撤销超过 40 次，JVM 会将该类的所有对象设为不可偏向，包括新建对象</li></ul></li><li>如果调用 wait/notify，会撤销偏向锁升级为重量级锁</li><li>偏向锁有延迟机制，默认4s，防止初始阶段大量初始化工作产生大量锁撤销和锁升级，影响启动效率，可以通过<code>-XX:BiasedLockingStartupDelay=0</code>禁用延迟</li></ul><p>如果业务存在大量线程竞争，由于偏向锁撤销存在一定开销，并不能提高性能，反而会影响并发性能，因此偏向锁适用于单个线程重入的场景，在 JDK 15 之后已经默认关闭了偏向锁。</p><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它"><span>其它</span></a></h2><h3 id="自旋锁" tabindex="-1"><a class="header-anchor" href="#自旋锁"><span>自旋锁</span></a></h3><p>在竞争重量级锁时，如果一个线程尝试获取一个被其他线程持有的锁时，它不会立即进入阻塞状态，而是会在原地进行自旋等待，如果自旋期间持锁线程正好退出同步块释放了锁，那么该线程就可以拿到锁资源而不用进入阻塞再恢复，进行上下文切换了。</p><ul><li>自旋会占用 CPU 时间，因此适合多 CPU 环境</li><li>自旋锁是自适应的，自旋成功次数多，自旋的机会也会越多</li></ul><h3 id="锁消除" tabindex="-1"><a class="header-anchor" href="#锁消除"><span>锁消除</span></a></h3><p>锁消除是一种编译器优化技术，用于消除不必要的锁竞争。编译器通过分析代码的语义和数据流来确定哪些锁是不必要的，并消除这些锁。例如，如果一个线程在获取一个锁后执行了一个不可能产生并发异常的代码段，那么这个锁就是不必要的，在这种情况下，编译器可能会消除这个锁，从而提高并发性能。</p><h3 id="锁粗化" tabindex="-1"><a class="header-anchor" href="#锁粗化"><span>锁粗化</span></a></h3><p>当一个线程在一段时间内多次重复获得同一个锁，JVM可能会将这个锁的粒度从对象级别提升到更高的级别，例如一个方法或一个类。这种技术被称为锁粗化，可以减少线程对锁的请求频率，从而减少线程上下文切换的开销，提高并发性能。例如，如果一个线程在循环中多次访问同一个对象并获取该对象的锁，JVM可能会将这个锁扩展到包含整个循环的代码块，而不是每次迭代都获取和释放锁。</p><h2 id="完整流程" tabindex="-1"><a class="header-anchor" href="#完整流程"><span>完整流程</span></a></h2><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ol><li><a href="https://wilson-he.gitee.io/jvm/jol/" target="_blank" rel="noopener noreferrer">Java对象内存布局(JOL)</a></li><li><a href="https://www.cnblogs.com/xiaofuge/p/13895226.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/xiaofuge/p/13895226.html</a></li><li><a href="https://www.bilibili.com/video/BV16J411h7Rd/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click" target="_blank" rel="noopener noreferrer">黑马程序员 JUC</a> （PS：满老师YYDS）</li><li><a href="https://tech.youzan.com/javasuo-yu-xian-cheng-de-na-xie-shi/" target="_blank" rel="noopener noreferrer">https://tech.youzan.com/javasuo-yu-xian-cheng-de-na-xie-shi/</a></li></ol>',48)]))}const u=s(k,[["render",g]]),E=JSON.parse('{"path":"/coding/Synchronized.html","title":"Synchronized 锁机制","lang":"zh-CN","frontmatter":{"title":"Synchronized 锁机制","date":"2024-01-05T00:00:00.000Z","category":["Java"],"tag":["并发"],"description":"为了避免临界区的竞态条件发生，可以用非阻塞式的原子变量，也可以用阻塞式的锁。Java 多线程的锁都是对象锁，采用互斥的方式让同一时刻只有一个线程能够持有对象锁，从而进入临界区，而其它线程只能阻塞等待，因此不用担心线程上下文切换造成共享资源错乱。 使用方式 原理 - Monitor 了解 Monitor 之前首先要知道对象在 JVM 中的内存布局，主要包...","head":[["meta",{"property":"og:url","content":"https://xchanper.github.io/coding/Synchronized.html"}],["meta",{"property":"og:site_name","content":"chanper"}],["meta",{"property":"og:title","content":"Synchronized 锁机制"}],["meta",{"property":"og:description","content":"为了避免临界区的竞态条件发生，可以用非阻塞式的原子变量，也可以用阻塞式的锁。Java 多线程的锁都是对象锁，采用互斥的方式让同一时刻只有一个线程能够持有对象锁，从而进入临界区，而其它线程只能阻塞等待，因此不用担心线程上下文切换造成共享资源错乱。 使用方式 原理 - Monitor 了解 Monitor 之前首先要知道对象在 JVM 中的内存布局，主要包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xchanper.github.io/img/JVM%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-22T07:34:10.000Z"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:published_time","content":"2024-01-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-22T07:34:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Synchronized 锁机制\\",\\"image\\":[\\"https://xchanper.github.io/img/JVM%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png\\",\\"https://xchanper.github.io/img/Monitor%E7%BB%93%E6%9E%84.png\\",\\"https://xchanper.github.io/img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%811.png\\",\\"https://xchanper.github.io/img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%812.png\\",\\"https://xchanper.github.io/img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%814.png\\",\\"https://xchanper.github.io/img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%813.png\\",\\"https://xchanper.github.io/img/%E5%81%8F%E5%90%91%E9%94%81.png\\",\\"https://xchanper.github.io/img/synchronized%E9%94%81%E4%BC%98%E5%8C%96%E6%9C%BA%E5%88%B6.png\\"],\\"datePublished\\":\\"2024-01-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-22T07:34:10.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用方式","slug":"使用方式","link":"#使用方式","children":[]},{"level":2,"title":"原理 - Monitor","slug":"原理-monitor","link":"#原理-monitor","children":[]},{"level":2,"title":"锁优化","slug":"锁优化","link":"#锁优化","children":[{"level":3,"title":"轻量级锁","slug":"轻量级锁","link":"#轻量级锁","children":[]},{"level":3,"title":"偏向锁","slug":"偏向锁","link":"#偏向锁","children":[]}]},{"level":2,"title":"其它","slug":"其它","link":"#其它","children":[{"level":3,"title":"自旋锁","slug":"自旋锁","link":"#自旋锁","children":[]},{"level":3,"title":"锁消除","slug":"锁消除","link":"#锁消除","children":[]},{"level":3,"title":"锁粗化","slug":"锁粗化","link":"#锁粗化","children":[]}]},{"level":2,"title":"完整流程","slug":"完整流程","link":"#完整流程","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1750577650000,"updatedTime":1750577650000,"contributors":[{"name":"chanper","email":"qianchaosolo@gmail.com","commits":1}]},"filePathRelative":"coding/Synchronized.md","localizedDate":"2024年1月5日","autoDesc":true}');export{u as comp,E as data};
