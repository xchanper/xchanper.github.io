import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-CHBNztBQ.js";const t="/img/MQ.svg",e="/img/MQ%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86.svg",h="/img/MQ%E5%BA%94%E7%94%A8%E8%A7%A3%E8%80%A61.svg",k="/img/MQ%E5%BA%94%E7%94%A8%E8%A7%A3%E8%80%A62.svg",p="/img/MQ%E5%BA%94%E7%94%A8%E8%A7%A3%E8%80%A63.svg",r="/img/MQ%E6%B5%81%E9%87%8F%E5%89%8A%E5%B3%B0.svg",d="/img/AMQP%E6%9E%B6%E6%9E%84.svg",g="/img/AMQP%E6%A8%A1%E5%9E%8B.svg",A="/img/MQTT%E6%A8%A1%E5%9E%8B.svg",c="/img/Stomp%E5%8D%8F%E8%AE%AE.png",y="/img/rabbitmq.png",B="/img/exchange.png",o="/img/RocketMQ%E6%A8%A1%E5%9E%8B.svg",u="/img/Kafka%E6%A8%A1%E5%9E%8B.svg",b="/img/ActiveMQ%E6%A8%A1%E5%9E%8B.svg",m={};function v(F,i){return l(),a("div",null,i[0]||(i[0]=[n('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>消息队列是一种进程间通信或同一进程的不同线程间的通信方式，主要解决应用耦合、异步消息、流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。</p><figure><img src="'+t+'" alt="MQ" tabindex="0" loading="lazy"><figcaption>MQ</figcaption></figure><h2 id="作用和问题" tabindex="-1"><a class="header-anchor" href="#作用和问题"><span>作用和问题</span></a></h2><h3 id="异步处理" tabindex="-1"><a class="header-anchor" href="#异步处理"><span>异步处理</span></a></h3><p>比如从第三方平台中接收数据，数据中包含了很多的图片，将图片保存到云上耗时比较久，后续还有计算分数等耗时比较久的操作。如果我们通过消息队列异步处理后，主流程只需要100ms，其他的都通过异步的方式进行处理，可以提高系统性能，减少响应时间</p><figure><img src="'+e+'" alt="MQ异步处理" tabindex="0" loading="lazy"><figcaption>MQ异步处理</figcaption></figure><h3 id="应用解耦" tabindex="-1"><a class="header-anchor" href="#应用解耦"><span>应用解耦</span></a></h3><p>当系统A中在订单创建后，需要通知B系统和C系统，然后B系统和C系统再做出相应的处理。</p><figure><img src="'+h+'" alt="MQ应用解耦1" tabindex="0" loading="lazy"><figcaption>MQ应用解耦1</figcaption></figure><p>此时A系统是强依赖B系统和C系统，当B系统需要下线，或者需要重新加入D系统，则需要需改代码：</p><figure><img src="'+k+'" alt="MQ应用解耦2" tabindex="0" loading="lazy"><figcaption>MQ应用解耦2</figcaption></figure><p>如此这样反复的添加和删除依赖的系统，使得系统难以维护，此时可以通过MQ进行解耦，使得A系统与需要关心订单创建事件的系统解耦开，不再关心下游有哪些系统，也不用受下游系统可用性的影响。</p><figure><img src="'+p+'" alt="MQ应用解耦3" tabindex="0" loading="lazy"><figcaption>MQ应用解耦3</figcaption></figure><h3 id="流量削峰" tabindex="-1"><a class="header-anchor" href="#流量削峰"><span>流量削峰</span></a></h3><p>有一个活动页面，平时大概就50qps，但每天有一段高峰期流量能达到1000qps，但压测发现当前系统的处理能力为100qps。整个活动大部分时间流量都不太高，扩充太多的机器利用率又太低，这个时候可以通过MQ来进行削峰，均匀处理消息任务</p><figure><img src="'+r+'" alt="MQ流量削峰" tabindex="0" loading="lazy"><figcaption>MQ流量削峰</figcaption></figure><h3 id="新的问题" tabindex="-1"><a class="header-anchor" href="#新的问题"><span>新的问题</span></a></h3><p>虽然 MQ 能帮助解决很多服务之间的问题，但同时也带来了新的问题：</p><ul><li>系统可用性降低：例如消息丢失，MQ宕机等问题</li><li>系统复杂性提高：需要保证无重复消费、消息丢失、消息传递顺序性等问题</li><li>一致性问题：消费者没有正确消费消息的情况</li></ul><h2 id="mq-协议" tabindex="-1"><a class="header-anchor" href="#mq-协议"><span>MQ 协议</span></a></h2><h3 id="jms" tabindex="-1"><a class="header-anchor" href="#jms"><span>JMS</span></a></h3><p>Java Message Service - Java消息服务的一套 API 规范。实现有 ActiveMQ、RocketMQ</p><ul><li>消息格式：StreamMessage, MapMessage, TextMessage, ObjectMessage, BytesMessage</li><li>消息模型：P2P 点对点、PubSub 订阅模型</li></ul><h3 id="amqp" tabindex="-1"><a class="header-anchor" href="#amqp"><span>AMQP</span></a></h3><p>Advanced Message Queuing Protocol 高级消息队列协议，应用层协议的一个开放标准，统一了数据交互格式，是一种具有现代特征的二进制协议（多通道的、协商的、异步的、安全便携高效的）。支持跨平台、跨语言，兼容 JMS。实现有 RabbitMQ</p><ul><li>仅支持 byte[] 消息格式</li><li>基于 Exchange 提供的路由算法，提供多种消息模型，例如 direct, fanout, topic, headers, system 等</li></ul><h5 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h5><figure><img src="'+d+'" alt="AMQP架构" tabindex="0" loading="lazy"><figcaption>AMQP架构</figcaption></figure><ul><li>Model 模型层：定义了一套命令，按功能分类，客户端应用可以利用这些命令来实现它的业务功能</li><li>Session 会话层：负责将命令从客户端应用传递给服务器，再将服务器的应答传递给客户端应用，会话层为这个传递过程提供可靠性、同步机制和错误处理</li><li>Transport 传输层：提供帧处理、信道复用、错误检测和数据表示</li></ul><h5 id="模型" tabindex="-1"><a class="header-anchor" href="#模型"><span>模型</span></a></h5><p>消息（Message）被发布者（Publisher）发送给交换机（Exchange），交换机类似邮局/邮箱。交换机将收到的消息按照路由规则分发到绑定的队列（Queue）中，最后 AMQP 代理会将消息投递给订阅了此队列的消费者（Consumer），或者消费者（Consumer）按需获取。</p><figure><img src="'+g+'" alt="AMQP模型" tabindex="0" loading="lazy"><figcaption>AMQP模型</figcaption></figure><h3 id="mqtt" tabindex="-1"><a class="header-anchor" href="#mqtt"><span>MQTT</span></a></h3><p>Message Queuing Telemetry Transport 消息队列遥测传输，IBM 开发的一个即时通讯协议，是一种基于轻量级代理的，发布/订阅模式的消息传输协议，运行在TCP协议栈之上，为其提供有序、可靠、双向连接的网络连接保证。该协议支持所有平台，几乎可以把所有联网物品和外部连接起来，被用来当做传感器和致动器的通信协议。</p><p>特点：格式简洁、占用带宽小、移动端通信、PUSH、嵌入式系统。</p><figure><img src="'+A+'" alt="MQTT模型" tabindex="0" loading="lazy"><figcaption>MQTT模型</figcaption></figure><ul><li>使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合。</li><li>小型传输，开销很小（头部仅2Byte），协议交换最小化，以降低网络流量。</li><li>使用 Last Will（遗言机制）和 Testament（遗嘱机制）特性处理相关客户端异常中断。</li><li>支持三种消息发布方式： <ul><li>至多一次：消息发布完全依赖底层TCP/IP网络，可能发生消息丢失</li><li>至少一次：确保消息到达，但消息重复可能会发生</li><li>只有一次：确保消息到达一次，适用于计费/IM场景</li></ul></li></ul><h3 id="stomp" tabindex="-1"><a class="header-anchor" href="#stomp"><span>STOMP</span></a></h3><p>Streaming Text Orientated Message Protocol 流文本定向消息协议，是一种为 MOM(Message Oriented Middleware，面向消息的中间件)设计的简单文本协议。STOMP提供一个可互操作的连接格式，允许客户端与任意 STOMP Broker 进行交互。</p><figure><img src="'+c+'" alt="Stomp协议" tabindex="0" loading="lazy"><figcaption>Stomp协议</figcaption></figure><ul><li>Topic：即消息队列 MQ 的消息主题，一级消息类型，通过 Topic 对消息进行分类以及权限管理</li><li>Destination：STOMP 协议里面的消息目的地，形式如 “/t/t1”，其中一级字符串 “t” 即为 Topic</li><li>Instance ID：消息队列 MQ 的实例</li><li>Client ID：发送端或订阅端的唯一标识，便于日志查询</li></ul><h3 id="xmpp" tabindex="-1"><a class="header-anchor" href="#xmpp"><span>XMPP</span></a></h3><p>Extensible Messaging and Presence Protocol 可扩展消息处理现场协议，基于 XML 的协议，多用于 IM即时消息以及在线现场探测，适用于服务器之间的准即时操作。核心是基于 XML 流传输，这个协议可能最终允许因特网用户向因特网上的其他任何人发送即时消息，即使其操作系统和浏览器不同。</p><p>协议特点：通用公开、兼容性强、可扩展、安全性高，但 XML 编码格式占用带宽大</p><h3 id="常见-mq" tabindex="-1"><a class="header-anchor" href="#常见-mq"><span>常见 MQ</span></a></h3><ul><li>ActiveMQ：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性较低的概率丢失数据。但维护渐少</li><li>Kafka：为大数据而生的消息中间件，吞吐量百万级，性能卓越，基于 Pull 模式消费消息，适合大量的数据/日志采集业务。</li><li>RocketMQ：阿里巴巴参考 Kafka 用 Java 实现的 MQ，吞吐量十万级，消息 0 丢失，适用于可靠性要求很高的场景，例如电商、金融互联网等。但支持客户端语言不多</li><li>RabbitMQ：在 AMQP 协议基础上基于 Erlang 开发的高并发主流 MQ，支持多种语言。适合中小型公司。</li></ul><h2 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq"><span>RabbitMQ</span></a></h2><p>RabbitMQ 是使用 Erlang 语言实现的，基于 AMQP 协议的消息中间件，由 RabbitMQ Technologies Ltd 开发并且提供商业支持，最初起源于金融系统。在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p><figure><img src="'+y+'" alt="rabbitmq" tabindex="0" loading="lazy"><figcaption>rabbitmq</figcaption></figure><h3 id="主要特性" tabindex="-1"><a class="header-anchor" href="#主要特性"><span>主要特性</span></a></h3><ul><li>可靠性：提供了多种技术可以在性能和可靠性之间进行权衡，如持久性机制、投递确认、发布确认和高可用性机制</li><li>灵活的路由：消息在到达队列之前，通过Exchange进行路由。支持自定义Exchange</li><li>消息集群：在相同局域网中的多个 RabbitMQ 服务器聚合在一起，形成一个逻辑 Broker</li><li>高可用：队列可以在集群中的机器上进行镜像，以确保在硬件问题下还保证消息安全</li><li>多协议：支持多种消息队列协议, 如 STOMP、MQTT 等</li><li>多语言：使用Erlang语言编写，客户端几乎支持所有常用语言</li><li>管理界面： RabbitMQ有一个易用的web用户界面，使得用户可以方便的进行监控和消息的管理</li><li>跟踪机制：RabbitMQ提供消息跟踪机制</li><li>插件机制：提供了许多的插件来进行扩展，也支持自定义插件的开发</li></ul><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><ul><li>消息： <ul><li>消息头：一系列可选属性，也叫标签。例如 routing-key 路由键, priority 优先权，delivery-mode 持久性存储...</li><li>消息体：不透明的 payload</li></ul></li><li>Producer：产生数据发送消息的程序</li><li>Broker：消息队列服务器实体</li><li>Virtual Host：虚拟主机，内部划分的独立域，包含一批交换机、消息队列和相关对象。彼此之间互不影响</li><li>Exchange：负责接收和转发消息，并将消息推送到队列中</li><li>Queue：负责存储消息，本质上是一个大的消息缓冲区</li><li>Binding：绑定，基于路由键将消息队列和交换机关联（多对多）的路由规则</li><li>Consumer：等待接收消息的程序</li></ul><h3 id="路由规则" tabindex="-1"><a class="header-anchor" href="#路由规则"><span>路由规则</span></a></h3><p>简单工作模式（一个生产者，一个消费者）和 工作队列模式（一个生产者，多个消费者）使用默认交换机。除此之外，RabbitMQ 中的消息必须先经过 Exchange，并通过 Binding 将 Exchange 和 Queue 绑定关联，然后指定一个 BindingKey 作为路由规则。Producer 发送消息时需要指定 RoutingKey，与 BindingKey 匹配时就会路由到对应的消息队列中。具体路由还依赖于交换器类型。如果路由不到，可能返回给 Producer 或直接丢弃。</p><p><strong>四种策略</strong></p><ul><li><code>direct</code>：把消息路由到那些 Bindingkey 与 RoutingKey 完全匹配的 Queue 中。常用于处理有优先级的任务</li><li><code>fanout</code>：把发送到该 Exchange 的消息路由到所有与它绑定的 Queue 中，不判断任何键，因此速度最快</li><li><code>topic</code>：将消息路由到 BindingKey 和 RoutingKey 模式匹配的队列中，其中 * 匹配一个单词，# 匹配零/多个单词</li><li><code>headers</code>：路由规则不依赖于路由键的匹配规则，而是根据发送的消息内容中的 headers 属性进行匹配，完全匹配才会路由</li></ul><figure><img src="'+B+`" alt="exchange" tabindex="0" loading="lazy"><figcaption>exchange</figcaption></figure><h3 id="spring-整合" tabindex="-1"><a class="header-anchor" href="#spring-整合"><span>Spring 整合</span></a></h3><h4 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖"><span>引入依赖</span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-amqp&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RabbitAutoConfiguration 生效，给容器自动配置了很多类，例如 RabbitTemplate、AmqpAdmin、CachingConnectionFactory、RabbitMessagingTemplate</p><h4 id="配置-rabbitmq" tabindex="-1"><a class="header-anchor" href="#配置-rabbitmq"><span>配置 RabbitMQ</span></a></h4><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  rabbitmq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">49.123.73.45</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5672</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">guest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    password</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">guest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    virtual-host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    publisher-returns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 开启发送确认</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      mandatory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       # 只要抵达队列，优先回调 return confirm</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    listener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      simple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        acknowledge-mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">manual</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 使用手动确认模式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyRabbitConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RabbitTemplate</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //告诉 spring 使用这个自定义的 RabbitTemplate</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Primary</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RabbitTemplate</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> rabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ConnectionFactory</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> connectionFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">rabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(connectionFactory);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        rabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setMessageConverter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">messageConverter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        initRabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rabbitTemplate;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 使用 json 格式的序列化器，否则使用 jdk 的序列化器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MessageConverter</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> messageConverter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Jackson2JsonMessageConverter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 配置确认回调</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initRabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 消息到达 broker 的回调</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        rabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setConfirmCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(((correlationData, ack, cause)</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">                -&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">broker收到消息: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> correlationData </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ack: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ack </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cause： &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cause)));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 消息投递队列失败的回调</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        rabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setReturnCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((message, replyCode, replyText, exchange, routerKey)</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">                -&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Fail Message [&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> message </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;]&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">replyCode: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> replyCode </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">replyText:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> replyText </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">exchange:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> exchange </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">routerKey:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> routerKey));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h4><ol><li><p>主启动类开启 <code>@EnableRabbit</code> (发送消息可以不添加，监听消息必须添加)</p></li><li><p>使用 amqpAdmin 创建 Exchange、Queue、Binding</p></li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AmqpAdmin</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> amqpAdmin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createExchange</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // DirectExchange(String name, boolean durable, boolean autoDelete)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    amqpAdmin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">declareExchange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DirectExchange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello-java-exchange&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Exchange created&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Queue(String name, boolean durable, boolean exclusive, boolean autoDelete)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    amqpAdmin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">declareQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Queue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello-java-queue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Queue created&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createBinding</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Binding(String destination, DestinationType destinationType, String exchange, String routingKey, Map&lt;String, Object&gt; arguments)</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Binding</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> binding </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Binding</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello-java-queue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Binding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DestinationType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">QUEUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello-java-exchange&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello.java&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    amqpAdmin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">declareBinding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(binding);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Binding Created&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用 rabbitTemplate 发送消息</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RabbitTemplate</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sendMsg</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Order</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> entity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Order</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;orderReturnEntity-&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    rabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">convertAndSend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a-exchange&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a-routingKey&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, entity, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CorrelationData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">UUID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">randomUUID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;消息发送完成&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CorrelationData 用于唯一确定一条消息。</p><ol start="4"><li>监听消息队列</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RabbitListener</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">queues</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello-java-queue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TestReceive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 接收消息的方法</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   原生消息详细信息，消息头+消息体</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> content</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   消息内容</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> channel</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   传输数据的通道</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RabbitHandler</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> receiveMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Message</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Order</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Channel</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;接收到消息 =&gt; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> content);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MessageProperties</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> properties</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessageProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        byte</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBody</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;消息处理完成 =&gt; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>要想监听消息，主启动类必须添加<code>@EnableRabbit</code></li><li>监听方法必须放在<code>@Component</code>中</li><li><code>@RabbitListener(queues={&quot;some-queue&quot;})</code>放在类上，用于指定监听的队列</li><li><code>@RabbitHandler</code>放在方法上，用于重载处理不同类型的消息</li></ul><h3 id="消息确认" tabindex="-1"><a class="header-anchor" href="#消息确认"><span>消息确认</span></a></h3><p>一条消息从 Producer -&gt; MQ Broker -&gt; Consumer 的过程中都可能丢失。为了保证消息不丢失，可靠抵达，可以使用事务消息，但是性能会下降 250 倍，为此 RabbitMQ 引入了消息确认机制，用于保证消息的可靠到达。</p><h4 id="confirmcallback" tabindex="-1"><a class="header-anchor" href="#confirmcallback"><span>ConfirmCallback</span></a></h4><p>消息从 Producer 成功到达 Exchange 的回调</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 配置：rabbitmq.publisher-confirms=true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义 ConfirmCallback</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">rabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setConfirmCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RabbitTemplate.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ConfirmCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * @param correlationData 当前消息的唯一关联数据（消息的唯一id）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * @param ack   消息是否成功收到</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * @param cause 失败的原因</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> confirm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CorrelationData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> correlationData, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ack, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cause) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ack) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 接收成功</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;接收成功消息&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cause);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 接收失败</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;接收失败消息&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cause);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 做一些处理，让消息再次发送。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>消息只要被 Broker 接收到就会执行 confirmCallback</li><li>如果是 cluster 模式，需要所有 Broker 接收到才会调用 confirmCallback</li><li>如果消息和队列是可持久化的，那么确认消息会在将该消息写入磁盘后发出</li><li>被 Broker 接收到只能表示 message 已经到达服务器，并不能保证消息一定会被投递到目标 Queue 里</li></ul><h4 id="returncallback" tabindex="-1"><a class="header-anchor" href="#returncallback"><span>ReturnCallback</span></a></h4><p>消息从 Exchange 到 Queue 投递失败的回调。可以记录下详细的投递数据，定期的巡检或者自动纠错都需要这些数据。</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">spring.rabbitmq.template.mandatory=true</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">spring.rabbitmq.publisher-returns=true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义 ReturnCallback</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">rabbitTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setReturnCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RabbitTemplate.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ReturnCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * @param message    投递失败的消息对象</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * @param replyCode  回复的状态码</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * @param replyText  回复的文本内容</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * @param exchange   当时这个消息发给哪个交换机</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * @param routingKey 当时这个消息用哪个路由键</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> returnedMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> message, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> replyCode, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> replyText, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> exchange, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> routingKey) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Fail Message[&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> message </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;]==&gt;replyCode[&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> replyCode </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;]==&gt;replyText[&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> replyText </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;]===&gt;exchange[&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> exchange </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;]===&gt;routingKey[&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> routingKey </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;]&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="consumer-ack" tabindex="-1"><a class="header-anchor" href="#consumer-ack"><span>Consumer Ack</span></a></h4><p>Consumer 收到消息后的确认方式。</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 可选值：none 不管处理成功与否；manual 手动处理确认；auto 根据消息处理逻辑是否抛出异常自动处理</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">spring.rabbitmq.listener.simple.acknowledge-mode=manual</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">basicAck</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deliveryTag, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // 签收，并指定是否累积确认。Broker 将移除确认的消息</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">basicNack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deliveryTag, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 拒签，并指定是否批量、重入队</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">basicReject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deliveryTag, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 拒签，并指定是否重入队</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认自动 ack，消息被消费者收到，就会从 broker 的 queue 中移除</li><li>如果消息一直没有被 ack/nack，Broker 认为此消息正在被处理，不会投递给别人，此时客户端断开，消息不会被 Broker 移除，会投递给别人</li></ul><h3 id="延迟队列" tabindex="-1"><a class="header-anchor" href="#延迟队列"><span>延迟队列</span></a></h3><p>消息被发送出去后，并不想让消费者立即拿到消息，而是等待指定时间后，消费者才拿到这个进行消费。RabbitMQ 中可以通过设置 TTL 和 死信路由实现延迟队列。</p><h4 id="ttl" tabindex="-1"><a class="header-anchor" href="#ttl"><span>TTL</span></a></h4><p>通过设置 Queue 的 x-expires 属性或 Message 的 x-message-ttl 属性控制消息的生存时间，如果超时(两者同时设置以最先到期的时间为准)，则消息变为 Dead Letter，将被发送到死信交换机中。</p><ul><li>如果给队列设置 TTL，那么一旦消息过期就会被队列丢弃（到死信交换机）</li><li>如果给消息设置 TTL，由于消息是否过期是在投递到消费者之前判定的，因此不一定会被立即丢弃。对于严重消息积压的情况，已过期消息可能还能存活较长时间</li><li>不设置 TTL 则消息永不过期</li><li>TTL 设为 0 则除非此时可以直接投递到消费者，否则该消息将被直接丢弃</li></ul><h4 id="死信" tabindex="-1"><a class="header-anchor" href="#死信"><span>死信</span></a></h4><p>通过设置 Queue 的 x-dead-letter-exchange 和 x-dead-letter-routing-key 两个属性，死信将被发送到指定的 DLX（Dead Letter Exchange 死信交换机）中，并重新设置关联的路由键，最终路由到对应的死信队列中（本质上和普通交换机、队列一样）。</p><p><strong>成为死信的情况</strong></p><ul><li>队列消息长度达到限制</li><li>消费者拒签消息，且不重新入队</li><li>消息达到超时时间未被消费</li></ul><h2 id="rocketmq" tabindex="-1"><a class="header-anchor" href="#rocketmq"><span>RocketMQ</span></a></h2><p>阿里巴巴在2012年开源的分布式消息中间件，目前已经捐赠给 Apache 软件基金会，并于2017年9月25日成为 Apache 的顶级项目。作为经历过多次阿里巴巴双十一这种“超级工程”的洗礼并有稳定出色表现的国产中间件，以其高性能、低延时和高可靠等特性近年来已经也被越来越多的国内企业使用。</p><figure><img src="`+o+'" alt="RocketMQ模型" tabindex="0" loading="lazy"><figcaption>RocketMQ模型</figcaption></figure><h3 id="基本组件" tabindex="-1"><a class="header-anchor" href="#基本组件"><span>基本组件</span></a></h3><ul><li><p>生产者组（Producer） 负责产生消息，RocketMQ 提供 同步、异步和单向 三种消息发送方式。</p></li><li><p>消费者组（Consumer） 负责消费消息，消费者从消息服务器拉取信息并将其输入用户应用程序。</p></li><li><p>名称服务器（NameServer） 用来保存 Broker 相关元信息并给 Producer 和 Consumer 查找信息，类似 Zookeeper。几乎无状态的，支持可以横向扩展。</p></li><li><p>消息服务器（Broker） 消息存储中心，以及其它与消息相关的元数据，包括用户组、消费进度偏移量、队列信息等。分可读写的 Master 和只读不写的 Slave。</p></li></ul><h3 id="主要特性-1" tabindex="-1"><a class="header-anchor" href="#主要特性-1"><span>主要特性</span></a></h3><ul><li>灵活可扩展性：天然支持集群，其核心组件都可以在没有单点故障的情况下进行水平扩展</li><li>海量消息堆积：采用零拷贝原理实现超大的消息堆积能力</li><li>顺序消息：支持按时间顺序消费，分全局有序和局部有序</li><li>消息过滤：分服务器端过滤和消费端过滤。</li><li>事务消息：支持事务消息</li><li>消息回溯：支持重新消费已经被消费成功的消息，可以向前回溯，也可以向后回溯</li></ul><h2 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka"><span>Kafka</span></a></h2><p>Kafka是由 Apache 软件基金会开发的一个开源分布式流处理平台，由Scala和Java编写，用作消息队列和数据处理。</p><figure><img src="'+u+'" alt="Kafka模型" tabindex="0" loading="lazy"><figcaption>Kafka模型</figcaption></figure><h3 id="基本组件-1" tabindex="-1"><a class="header-anchor" href="#基本组件-1"><span>基本组件</span></a></h3><ul><li><p>Broker 消息中间件处理节点，一个Kafka节点就是一个Broker，一个或者多个Broker可以组成一个Kafka集群</p></li><li><p>Topic 每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。</p></li><li><p>Partition 用于存放消息的队列，存放的消息都是有序的，同一主题可以分多个Partition。</p></li><li><p>Producer 消息生产者，向Broker发送消息的客户端</p></li><li><p>Consumer 消息消费者，从Broker读取消息的客户端，通过offset标识消息被消费的位置</p></li><li><p>Consumer Group 每个Consumer属于一个特定的 Consumer Group，一条消息可以发送到多个不同的Consumer Group，但是同一个Consumer Group中只能有一个Consumer能够消费该消息</p></li></ul><h3 id="主要特性-2" tabindex="-1"><a class="header-anchor" href="#主要特性-2"><span>主要特性</span></a></h3><ul><li>快速持久化：可以在 O(1) 的系统开销下进行消息持久化</li><li>高吞吐：在一台普通的服务器上即可以达到10W/s的吞吐速率</li><li>完全的分布式系统：Broker、Producer和Consumer都原生自动支持分布式，自动实现负载均衡</li><li>零拷贝技术(zero-copy)：减少IO操作步骤，提高系统吞吐量</li><li>支持同步和异步复制两种高可用机制</li><li>丰富的消息拉取模型，支持数据批量发送和拉取</li><li>数据迁移、扩容对用户透明</li><li>无需停机即可扩展机器</li><li>高效订阅者水平扩展、实时的消息订阅、亿级的消息堆积能力、定期删除机制</li></ul><h2 id="activemq" tabindex="-1"><a class="header-anchor" href="#activemq"><span>ActiveMQ</span></a></h2><p>ActiveMQ 也是由 Apache 出品，旨在为应用程序提供高效、可扩展、稳定、安全的企业级消息通信，它是一个完全支持 JMS1.1 和 J2EE 1.4 规范的 JMS Provider 实现，比如 JMX 管理、主从管理、消息组通信、消息优先级、延迟接收消息、虚拟接收者、消息持久化、消息队列监控等等。支持多种语言的客户端和协议，而且可以非常容易的嵌入到企业的应用环境中，并有许多高级功能。</p><figure><img src="'+b+'" alt="ActiveMQ模型" tabindex="0" loading="lazy"><figcaption>ActiveMQ模型</figcaption></figure><h3 id="基本组成" tabindex="-1"><a class="header-anchor" href="#基本组成"><span>基本组成</span></a></h3><ul><li>Broker</li><li>Producer</li><li>Consumer</li><li>Topic</li><li>Queue</li><li>Message</li></ul><ul><li>连接器 Connector ActiveMQ Broker 的主要作用是为客户端应用提供一种通信机制，为此 ActiveMQ 提供了一种连接机制，并用连接器来描述这种连接机制。连接器分两种：client-broker 之间的传输连接器（transport connector）、broker-broker 之间的网络连接器（network connector）。</li></ul><h3 id="主要特性-3" tabindex="-1"><a class="header-anchor" href="#主要特性-3"><span>主要特性</span></a></h3><ul><li>服从JMS规范：完全支持JMS 1.1和J2EE 1.4规范，包括同步或异步的消息分发，一次和仅一次的消息分发，分布式事务消息、消息接收、订阅、持久化等等</li><li>连接灵活性：ActiveMQ 提供了多种连接模式，例如 in-VM、TCP、SSL、NIO、UDP、多播、JGroups、JXTA等</li><li>多协议：OpenWire、STOMP、REST、XMPP、AMQP等</li><li>多语言：支持Java、C/C++、.NET、Perl、PHP、Python、Ruby等</li><li>代理集群：多个 ActiveMQ代理可以组成一个集群来提供服务</li><li>简单的管理：ActiveMQ 是以开发者思维被设计的，所以它并不需要专门的管理员，提供了简单又实用的管理特性。</li><li>易于整合：ActiveMQ 可以通过 Spring 配置文件的方式很容易嵌入到Spring应用中，也可以轻松地与CXF、Axis等Web Service技术整合，以提供可靠的消息传递</li></ul><h2 id="mq-对比" tabindex="-1"><a class="header-anchor" href="#mq-对比"><span>MQ 对比</span></a></h2><table><thead><tr><th>特性</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th><th>ActiveMQ</th></tr></thead><tbody><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Scala&amp;Java</td><td>Java</td></tr><tr><td>客户端支持</td><td>几乎所有常用语言</td><td>Java、C++</td><td>社区支持多语言 ｜ Java、C/C++、Python、PHP、Perl、.net等</td><td></td></tr><tr><td>协议支持</td><td>AMQP、XMPP、SMTP、SMTOP</td><td>自定义协议，社区提供JMS</td><td>自定义协议，社区提供了HTTP协议支持</td><td>OpenWire、SMTOP、REST、XMPP、AMQP</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用</td><td>很高，分布式架构</td><td>很高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td><td>高，基于主从架构实现高可用</td></tr><tr><td>集群</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>负载均衡</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>十万级</td><td>十万级</td><td>万级</td></tr><tr><td>topic数量对吞吐量的影响</td><td>-</td><td>topic达到几百/几千的级别后，吞吐量会有较小幅度的下降，在同等机器下，可以支撑大量的 topic</td><td>topic从几十到几百个时候，吞吐量会大幅度下降，因为Kafka的每个Topic、每个分区都会对应一个物理文件，若需要支撑大规模的topic，则需要增加更多的机器资源</td><td>-</td></tr><tr><td>消息批量操作</td><td>不支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>消息推拉模式</td><td>pull/push均支持</td><td>pull/push均支持</td><td>pull</td><td>pull/push均支持</td></tr><tr><td>消息可靠性</td><td>可以做到不丢失</td><td>可以做到不丢失</td><td>可以做到不丢失</td><td>有较低的概率丢失数据</td></tr><tr><td>消息延迟</td><td>微秒级 (最快)</td><td>毫秒级</td><td>毫秒级</td><td>毫秒级</td></tr><tr><td>持久化能力</td><td>内存、文件，支持数据堆积，但影响生产速率</td><td>磁盘文件</td><td>磁盘文件，只要容量够，可以做到无限堆积</td><td>内存、文件、数据库</td></tr><tr><td>事务消息</td><td>不支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>管理界面</td><td>web管理界面</td><td>web管理界面</td><td>web管理界面</td><td>web管理界面</td></tr></tbody></table>',123)]))}const f=s(m,[["render",v]]),M=JSON.parse('{"path":"/coding/MQ_Abstract.html","title":"消息队列概述","lang":"zh-CN","frontmatter":{"title":"消息队列概述","date":"2023-04-19T00:00:00.000Z","category":["分布式"],"tag":["MQ"],"excerpt":"消息队列模块设计","description":"介绍 消息队列是一种进程间通信或同一进程的不同线程间的通信方式，主要解决应用耦合、异步消息、流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。 MQMQ 作用和问题 异...","head":[["meta",{"property":"og:url","content":"https://xchanper.github.io/coding/MQ_Abstract.html"}],["meta",{"property":"og:site_name","content":"chanper"}],["meta",{"property":"og:title","content":"消息队列概述"}],["meta",{"property":"og:description","content":"介绍 消息队列是一种进程间通信或同一进程的不同线程间的通信方式，主要解决应用耦合、异步消息、流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。 MQMQ 作用和问题 异..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xchanper.github.io/img/MQ.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-22T07:34:10.000Z"}],["meta",{"property":"article:tag","content":"MQ"}],["meta",{"property":"article:published_time","content":"2023-04-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-22T07:34:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息队列概述\\",\\"image\\":[\\"https://xchanper.github.io/img/MQ.svg\\",\\"https://xchanper.github.io/img/MQ%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86.svg\\",\\"https://xchanper.github.io/img/MQ%E5%BA%94%E7%94%A8%E8%A7%A3%E8%80%A61.svg\\",\\"https://xchanper.github.io/img/MQ%E5%BA%94%E7%94%A8%E8%A7%A3%E8%80%A62.svg\\",\\"https://xchanper.github.io/img/MQ%E5%BA%94%E7%94%A8%E8%A7%A3%E8%80%A63.svg\\",\\"https://xchanper.github.io/img/MQ%E6%B5%81%E9%87%8F%E5%89%8A%E5%B3%B0.svg\\",\\"https://xchanper.github.io/img/AMQP%E6%9E%B6%E6%9E%84.svg\\",\\"https://xchanper.github.io/img/AMQP%E6%A8%A1%E5%9E%8B.svg\\",\\"https://xchanper.github.io/img/MQTT%E6%A8%A1%E5%9E%8B.svg\\",\\"https://xchanper.github.io/img/Stomp%E5%8D%8F%E8%AE%AE.png\\",\\"https://xchanper.github.io/img/rabbitmq.png\\",\\"https://xchanper.github.io/img/exchange.png\\",\\"https://xchanper.github.io/img/RocketMQ%E6%A8%A1%E5%9E%8B.svg\\",\\"https://xchanper.github.io/img/Kafka%E6%A8%A1%E5%9E%8B.svg\\",\\"https://xchanper.github.io/img/ActiveMQ%E6%A8%A1%E5%9E%8B.svg\\"],\\"datePublished\\":\\"2023-04-19T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-22T07:34:10.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"作用和问题","slug":"作用和问题","link":"#作用和问题","children":[{"level":3,"title":"异步处理","slug":"异步处理","link":"#异步处理","children":[]},{"level":3,"title":"应用解耦","slug":"应用解耦","link":"#应用解耦","children":[]},{"level":3,"title":"流量削峰","slug":"流量削峰","link":"#流量削峰","children":[]},{"level":3,"title":"新的问题","slug":"新的问题","link":"#新的问题","children":[]}]},{"level":2,"title":"MQ 协议","slug":"mq-协议","link":"#mq-协议","children":[{"level":3,"title":"JMS","slug":"jms","link":"#jms","children":[]},{"level":3,"title":"AMQP","slug":"amqp","link":"#amqp","children":[]},{"level":3,"title":"MQTT","slug":"mqtt","link":"#mqtt","children":[]},{"level":3,"title":"STOMP","slug":"stomp","link":"#stomp","children":[]},{"level":3,"title":"XMPP","slug":"xmpp","link":"#xmpp","children":[]},{"level":3,"title":"常见 MQ","slug":"常见-mq","link":"#常见-mq","children":[]}]},{"level":2,"title":"RabbitMQ","slug":"rabbitmq","link":"#rabbitmq","children":[{"level":3,"title":"主要特性","slug":"主要特性","link":"#主要特性","children":[]},{"level":3,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":3,"title":"路由规则","slug":"路由规则","link":"#路由规则","children":[]},{"level":3,"title":"Spring 整合","slug":"spring-整合","link":"#spring-整合","children":[]},{"level":3,"title":"消息确认","slug":"消息确认","link":"#消息确认","children":[]},{"level":3,"title":"延迟队列","slug":"延迟队列","link":"#延迟队列","children":[]}]},{"level":2,"title":"RocketMQ","slug":"rocketmq","link":"#rocketmq","children":[{"level":3,"title":"基本组件","slug":"基本组件","link":"#基本组件","children":[]},{"level":3,"title":"主要特性","slug":"主要特性-1","link":"#主要特性-1","children":[]}]},{"level":2,"title":"Kafka","slug":"kafka","link":"#kafka","children":[{"level":3,"title":"基本组件","slug":"基本组件-1","link":"#基本组件-1","children":[]},{"level":3,"title":"主要特性","slug":"主要特性-2","link":"#主要特性-2","children":[]}]},{"level":2,"title":"ActiveMQ","slug":"activemq","link":"#activemq","children":[{"level":3,"title":"基本组成","slug":"基本组成","link":"#基本组成","children":[]},{"level":3,"title":"主要特性","slug":"主要特性-3","link":"#主要特性-3","children":[]}]},{"level":2,"title":"MQ 对比","slug":"mq-对比","link":"#mq-对比","children":[]}],"git":{"createdTime":1750577650000,"updatedTime":1750577650000,"contributors":[{"name":"chanper","email":"qianchaosolo@gmail.com","commits":1}]},"filePathRelative":"coding/MQ_Abstract.md","localizedDate":"2023年4月19日","autoDesc":true}');export{f as comp,M as data};
