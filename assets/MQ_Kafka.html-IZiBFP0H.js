import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-CHBNztBQ.js";const t="/img/kafka%E6%97%A5%E5%BF%97%E5%90%8C%E6%AD%A5.svg",e="/img/kafka%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97.svg",h="/img/%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84.jpg",k="/img/EFAK.png",p="/img/Kraft.png",r="/img/kafka%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81.svg",d="/img/%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B.png",g="/img/RecordAccumulator.svg",o="/img/ack0.png",c="/img/ack1.png",A="/img/ack-1.png",B="/img/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D.png",y="/img/%E5%B9%82%E7%AD%89%E6%80%A7%E5%8E%9F%E7%90%86.png",u="/img/kafka%E4%BA%8B%E5%8A%A1.png",E="/img/%E6%95%B0%E6%8D%AE%E6%9C%89%E5%BA%8F.png",f="/img/kafka-zk-data-structure.png",F="/img/Broker%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png",m="/img/kafka%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.svg",v="/img/%E5%89%AF%E6%9C%ACLEO.svg",C="/img/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86.png",b="/img/kafka%E5%B4%A9%E6%BA%83%E6%81%A2%E5%A4%8D.svg",D="/img/record%E7%BB%93%E6%9E%84.svg",x="/img/%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8.png",_="/img/%E6%97%A5%E5%BF%97%E7%B4%A2%E5%BC%95.png",S="/img/%E6%B6%88%E8%B4%B9%E6%96%B9%E5%BC%8F.png",R="/img/ConsumerGroup.png",K="/img/Consumer%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png",P="/img/%E6%B6%88%E8%B4%B9%E6%B5%81%E7%A8%8B.png",I="/img/consumer-offset.svg",L="/img/Range%E7%AD%96%E7%95%A5.png",q="/img/RoundRobin%E7%AD%96%E7%95%A5.png",O={};function z(T,i){return l(),a("div",null,i[0]||(i[0]=[n('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Kafka是一个分布式的基于发布/订阅模式的消息队列，主要应用于大数据实时处理领域。同时也是一个开源的分布式事件流平台（Event Streaming Platform），用于高性能数据管道、流分析、数据集成和关键任务应用。</p><p>更多关于消息队列的介绍见：<a href="https://xchanper.github.io/coding/MQ_Abstract.html" target="_blank" rel="noopener noreferrer">消息队列概述</a></p><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><p>除了传统 MQ 的功能：流量削峰、应用解耦、异步通信之外，Kafka 还可以用于日志同步和实时计算等场景。</p><h4 id="日志同步" tabindex="-1"><a class="header-anchor" href="#日志同步"><span>日志同步</span></a></h4><p>大规模分布式系统中的机器非常多而且分散在不同机房中，分布式系统带来的一个明显问题就是业务日志的查看、追踪和分析等行为变得十分困难，对于集群规模在百台以上的系统，查询线上日志很恐怖。为了应对这种场景统一日志系统应运而生，日志数据都是海量数据，通常为了不给系统带来额外负担一般会采用异步上报，这里Kafka以其高吞吐量在日志处理中得到了很好的应用。</p><figure><img src="'+t+'" alt="kafka日志同步" tabindex="0" loading="lazy"><figcaption>kafka日志同步</figcaption></figure><h4 id="实时计算" tabindex="-1"><a class="header-anchor" href="#实时计算"><span>实时计算</span></a></h4><p>随着据量的增加，离线的计算会越来越慢，难以满足用户在某些场景下的实时性要求，因此很多解决方案中引入了实时计算。很多时候，即使是海量数据，我们也希望即时去查看一些数据指标，实时流计算应运而生。实时流计算有两个特点，一个是实时，随时可以看数据；另一个是流。下面是Kafka在某个典型实时计算系统中的应用。</p><figure><img src="'+e+'" alt="kafka实时计算" tabindex="0" loading="lazy"><figcaption>kafka实时计算</figcaption></figure><h3 id="基础架构" tabindex="-1"><a class="header-anchor" href="#基础架构"><span>基础架构</span></a></h3><figure><img src="'+h+`" alt="基本架构" tabindex="0" loading="lazy"><figcaption>基本架构</figcaption></figure><ul><li><strong>Producer</strong>：消息生产者，向 Kafka Broker 发消息的客户端。</li><li><strong>Consumer</strong>：消息消费者，向 Kafka Broker 取消息的客户端。</li><li><strong>Consumer Group</strong>：消费者组，由多个 Consumer 组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。任何消费者都属于某个消费者组，因此消费者组是逻辑上的一个订阅者。</li><li><strong>Broker</strong>：单个 Kafka 实例就是一个 Broker。一个 Kafka 集群由多个 Broker 组成，一个 Broker 里可以容纳多个 Topic。</li><li><strong>Topic</strong>：主题，可以理解为一个队列，生产者和消费者面向的都是一个 Topic</li><li><strong>Partition</strong>：分区。为了提高吞吐量，一个 Topic 可以分为多个 Partition 并分布在多个 Broker 上，每个 Partition 都是一个有序的队列。</li><li><strong>Replica</strong>：副本。为了提高可用性，每个 Partition 都有若干个副本，包括 Leader 和若干个 Follower</li><li><strong>Leader</strong>：Partition 的主节点，发送/消费数据都只针对 Leader</li><li><strong>Follower</strong>：Partition 的从节点，实时同步 Leader 数据，Leader 发生故障时进行选举。</li></ul><h2 id="安装使用" tabindex="-1"><a class="header-anchor" href="#安装使用"><span>安装使用</span></a></h2><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p>kafka_2.13-3.5.1/config/server.properties</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#broker 的全局唯一编号，不能重复，只能是数字。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">broker.id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">0</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#处理网络请求的线程数量 </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">num.network.threads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#用来处理磁盘 IO 的线程数量 </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">num.io.threads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">8 </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#发送套接字的缓冲区大小 </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">socket.send.buffer.bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">102400</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#接收套接字的缓冲区大小 </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">socket.receive.buffer.bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">102400</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#请求套接字的缓冲区大小</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">socket.request.max.bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">104857600</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#kafka 运行日志(数据)存放的路径，可以配置多个，用&quot;,&quot;分隔 </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">log.dirs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">/opt/module/kafka/datas</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#topic 在当前 broker 上的分区个数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">num.partitions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#用来恢复和清理 data 下数据的线程数量 </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">num.recovery.threads.per.data.dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 每个topic创建时的副本数，默认时1个副本 </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">offsets.topic.replication.factor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#segment 文件保留的最长时间，超时将被删除</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">log.retention.hours</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">168</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#每个 segment 文件的大小，默认最大 1G </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">log.segment.bytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">1073741824</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令"><span>命令</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动 zk</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./zkServer.sh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动kafka服务器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./kafka-server-start.sh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> server.properties</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建一个名为 firstTopic 的主题，需要指定broker、分区数、副本数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./kafka-topics.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --bootstrap-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localhost:9092</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --create</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --partitions</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --replication-factor</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --topic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> firstTopic</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看某个 broker 下的所有主题</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./kafka-topics.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --bootstrap-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localhost:9092</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 生产者连接到broker，然后可以发送消息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./kafka-console-producer.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --bootstrap-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localhost:9092</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --topic</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> firstTopic</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 消费者连接到broker，然后可以（从头）接收消息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./kafka-console-consumer.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --bootstrap-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localhost:9092</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --topic</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --from-beginning</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> firstTopic</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>停止 Kafka 集群时，一定要等 Kafka 所有节点进程全部停止后再停止 Zookeeper 集群。因为 Zookeeper 集群当中记录着 Kafka 集群相关信息，Zookeeper 集群一旦先停止， Kafka 集群就没有办法再获取停止进程的信息，只能手动杀死 Kafka 进程了。</p><h3 id="监控工具" tabindex="-1"><a class="header-anchor" href="#监控工具"><span>监控工具</span></a></h3><p>EFAK 提供了管理查看 Kafka 数据的 Web 页面</p><figure><img src="`+k+'" alt="EFAK" tabindex="0" loading="lazy"><figcaption>EFAK</figcaption></figure><h3 id="kraft" tabindex="-1"><a class="header-anchor" href="#kraft"><span>Kraft</span></a></h3><p>Kafka 现有架构的元数据存储在 zookeeper 中，运行时动态选举 controller 进行 Kafka 集群管理。而新版的 kraft 模式架构不再依赖 zookeeper 集群， 而是用三台 controller 节点代替 zookeeper，元数据保存在 controller 中，由 controller 直接进行 Kafka 集群管理。</p><figure><img src="'+p+'" alt="Kraft" tabindex="0" loading="lazy"><figcaption>Kraft</figcaption></figure><p><strong>优点：</strong></p><ul><li>Kafka不再依赖外部框架，而是能够独立运行</li><li>controller 管理集群时，不再需要从 zookeeper 中先读取数据，集群性能上升</li><li>由于不依赖zookeeper，集群扩展时不再受到zookeeper读写能力限制</li><li>controller 不再动态选举，而是由配置文件规定</li></ul><h2 id="producer" tabindex="-1"><a class="header-anchor" href="#producer"><span>Producer</span></a></h2><h3 id="发送流程" tabindex="-1"><a class="header-anchor" href="#发送流程"><span>发送流程</span></a></h3><p>Kafka的消息是一个一个的键值对，键可以设置为默认的null。键有两个用途，可以作为消息的附加信息，也可以用来决定该消息被写入到哪个Partition。Topic的数据被分成一个或多个Partition，Partition是消息的集合，Partition是Consumer消费的最小粒度。</p><p>Kafka通过将Topic划分成多个Partition，Producer将消息分发到多个本地Partition的消息队列中，每个Partition消息队列中的消息会写入到不同的Leader节点。</p><figure><img src="'+r+'" alt="kafka消息发送" tabindex="0" loading="lazy"><figcaption>kafka消息发送</figcaption></figure><p>Producer生成消息发送到Broker，涉及到大量的网络传输，如果一次网络传输只发送一条消息，会带来严重的网络消耗。为了解决这个问题，Kafka采用批量发送的方式。在消息发送的过程中，涉及到了两个线程：main 线程和 sender 线程。</p><figure><img src="'+d+'" alt="生产者发送流程" tabindex="0" loading="lazy"><figcaption>生产者发送流程</figcaption></figure><ul><li><p>main 线程将外部数据发送至 RecordAccumulator 记录收集器(RA)，过程如下：</p><ul><li>拦截器做增加处理</li><li>序列化器</li><li>分区器将数据切片发送至 RA <ul><li>RA 是多个双端队列的本地缓冲区，队列的每个元素是一个批记录ProducerBatch <ul><li>createdMs：批记录的创建时间</li><li>topicPartion：对应的Partition元数据</li><li>recordsBuilder：暂存的实际数据</li></ul></li><li>RA 默认 32MB，每个队列默认 16KB <img src="'+g+`" alt="RecordAccumulator" loading="lazy"></li></ul></li></ul></li><li><p>sender 线程从 RA 中拉取消息发送到 Broker：</p><ul><li>当 RA 中的 ProducerBatch 满足数据累积到<code>batch.size</code>，或等待<code>linger.ms</code>后，将拉取数据组成 request <ul><li><code>batch.size</code>默认16KB，适当增加可以提高吞吐量，但延迟加大</li><li><code>linger.ms</code>默认0ms，即无延迟立即发送</li></ul></li><li>经 Selector 发送至 Broker，并根据返回的 ack 做出应答： <ul><li>0: 生产的消息不需要等 broker 应答，传输效率高，但可靠性差</li><li>1: 生产的消息要等 Leader 收到数据并确认，如果 Leader 宕机数据可能丢失</li><li>-1/all: 默认值，生产的消息要等 Leader 和 ISR 所有节点的确认，可靠性最高，但不完全保证数据不丢失（如仅一台 Leader）</li></ul></li><li>消息发送异常将自动重试，次数为 Integer.MAX_VALUE;</li></ul></li></ul><p><strong>核心源码</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//Sender读取记录收集器，按照节点分组，创建客户端请求，发送请求</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> now) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Cluster</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cluster </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //获取准备发送的所有分区</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  ReadCheckResult</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> accumulator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ready</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cluster, now);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //建立到Leader节点的网络连接，移除还没有准备好的节点</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Iterator</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> iter </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">readyNodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Node</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> node </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(node, now)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //读取记录收集器，返回的每个Leader节点对应的批记录列表，每个批记录对应一个分区</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RecordBatch</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> batches </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> accumulator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">drain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cluster, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">readyNodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">maxRequestSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, now);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //以节点为级别的生产请求列表，即每个节点只有一个客户端请求</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ClientRequest</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> requests </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createProduceRequests</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(batches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> now)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ClientRequest</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> request </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> requests) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, now);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //这里才会执行真正的网络读写，比如将上面的客户端请求发送出去</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(pollTimeout, now);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分区策略" tabindex="-1"><a class="header-anchor" href="#分区策略"><span>分区策略</span></a></h3><p>Producer发送消息到Broker时，会根据Paritition机制选择将消息存储到哪一个Partition。如果Partition机制设置合理，所有消息可以均匀分布到不同的Partition里，这样就实现了负载均衡。如果一个Topic对应一个文件，那这个文件所在的机器I/O将会成为这个Topic的性能瓶颈，而有了Partition后，不同的消息可以并行写入不同的Partition中，极大的提高了吞吐率。所谓的Partition机制也就是Poducer消息partitioning策略</p><h4 id="defaultpartitioner" tabindex="-1"><a class="header-anchor" href="#defaultpartitioner"><span>DefaultPartitioner</span></a></h4><p>分三种情况：</p><ul><li><p>指定 partition 的情况下，直接取指定的partition值 <code>public ProducerRecord(String topic, Integer partition, K key, V value)</code></p></li><li><p>没有指定 partition 但有 key 的情况下，将 key 的 hash 值模上分区数取余得到partition值 <code>public ProducerRecord(String topic, K key, V value)</code></p></li><li><p>既没有指定 partition 也没有 key 的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），模上分区数取余得到 partition 值，也即 round-robin 轮询 <code>public ProducerRecord(String topic, V value)</code></p></li></ul><h4 id="自定义分区器" tabindex="-1"><a class="header-anchor" href="#自定义分区器"><span>自定义分区器</span></a></h4><p>可以根据实际的业务需要，实现Partitioner接口，重写partition方法来自定义分区器。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyPartitioner</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Partitioner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * Compute the partition for the given record.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> topic</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> The topic name</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> The key to partition on (or null if no key)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> keyBytes</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> The serialized key to partition on( or null if no key)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> The value to partition on or null</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> valueBytes</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> The serialized value to partition on or null</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> cluster</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> The current cluster metadata</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> partition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> topic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">keyBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">valueBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Cluster</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> cluster</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 具体规则</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 指定分区器</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PARTITIONER_CLASS_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.example.kafka.producer.MyPartitioner&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java客户端" tabindex="-1"><a class="header-anchor" href="#java客户端"><span>Java客户端</span></a></h3><h4 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖"><span>引入依赖</span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 原生客户端 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.apache.kafka&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;kafka-clients&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;3.5.1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- SpringBoot 整合 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.kafka&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-kafka&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="原生客户端" tabindex="-1"><a class="header-anchor" href="#原生客户端"><span>原生客户端</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 配置参数</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Properties</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> properties </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Properties</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">BOOTSTRAP_SERVERS_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost:9092&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">KEY_SERIALIZER_CLASS_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">VALUE_SERIALIZER_CLASS_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 创建生产者</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">KafkaProducer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> producer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> KafkaProducer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(properties)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3. 发送消息（至 RecordAccumulator 缓冲区）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3.1 默认异步</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3.2 如果需要同步发送，对send()返回的Future调用get()</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ProducerRecord</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> producerRecord </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ProducerRecord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;firstTopic&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello-&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(producerRecord, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Callback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 4. 处理响应</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onCompletion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RecordMetadata</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> recordMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (e </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;消息发送成功：topic: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> recordMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">topic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">                        +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;, partition: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> recordMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">partition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 5. 关闭生产者</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="springboot-客户端" tabindex="-1"><a class="header-anchor" href="#springboot-客户端"><span>SpringBoot 客户端</span></a></h4><p><strong>配置</strong></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">spring.kafka.bootstrap-servers=localhost:9092</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>KafkaTemplate</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">KafkaTemplate</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> kafkaTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;produce&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> produce</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> msg) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    kafkaTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;firstTopic&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, msg);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Success&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生产经验" tabindex="-1"><a class="header-anchor" href="#生产经验"><span>生产经验</span></a></h3><h4 id="提高吞吐量" tabindex="-1"><a class="header-anchor" href="#提高吞吐量"><span>提高吞吐量</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// batch.size: 批次大小，默认16K</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">BATCH_SIZE_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16384</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// linger.ms: 等待时间，默认0。建议 5-100ms</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LINGER_MS_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// buffer.memory: RecordAccumulator 缓冲区大小，默认32M:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">BUFFER_MEMORY_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">33554432</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// compression.type: 压缩，默认 none，可配置 gzip/snappy/lz4/zstd</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">COMPRESSION_TYPE_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;snappy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据可靠" tabindex="-1"><a class="header-anchor" href="#数据可靠"><span>数据可靠</span></a></h4><p>Kafka 的数据可靠性是依赖 ACK 机制实现的。</p><ul><li><p><strong>ack = 0</strong>，生产者发送过来的数据，不需要等数据落盘应答</p><figure><img src="`+o+'" alt="ack0" tabindex="0" loading="lazy"><figcaption>ack0</figcaption></figure><p>发送完消息之后如果 Leader 挂了，那么数据就直接丢了。可靠性差，但效率最高。</p><br></li><li><p><strong>ack = 1</strong>，生产者发送过来的数据，Leader收到数据后应答。</p><figure><img src="'+c+'" alt="ack1" tabindex="0" loading="lazy"><figcaption>ack1</figcaption></figure><p>Leader 收到消息后返回 ack，然后准备同步 Follower，此时 Leader 挂了，那么新 Leader 就丢失了该消息。可靠性中等，效率一般。一般用于传输普通日志，允许丢个别数据。</p><br></li><li><p><strong>ack = -1/all</strong>，生产者发送过来的数据，Leader 和 ISR 集合里面的所有节点收齐数据后应答。</p><figure><img src="'+A+`" alt="ack-1" tabindex="0" loading="lazy"><figcaption>ack-1</figcaption></figure><p>Leader 和所有 Follower 都接收到消息后才返回 ack，因此能够确保数据的可靠性。但无疑会增加响应的延迟，响应时间取决于最慢的机器。适合可靠性要求高的场景。</p><br><p>进一步的，我们考虑一种特殊情况：Kafka同步时，某个Follower由于某种故障一直无法同步，那么此时消息响应就会一直停滞❓</p><br><p>为了解决这一问题，Kafka 引入了 <strong>ISR：In-Sync Replica Set</strong>，即和 Leader 保持同步的 Leader+Follower 集合。如果某个Follower长时间未向Leader发送通信请求或同步数据，则该Follower将被踢出ISR，该时间阈值由<code>replica.lag.time.max.ms</code>参数设定，默认30s。这样就不用等长期联系不上或者已经故障的节点，因此在 ack = -1 的定义里是 Leader+ISR 全部收到数据后即返回响应。</p></li></ul><p>Broker的配置项<code>min.insync.replicas</code>(默认值为1)代表了正常写入生产者数据所需要的最少ISR个数，当ISR中的副本数量小于<code>min.insync.replicas</code>时，Leader停止写入生产者生产的消息，并向生产者抛出NotEnoughReplicas异常，阻塞等待更多的Follower赶上并重新进入ISR。被Leader应答的消息都至少有<code>min.insync.replicas</code>个副本，因此能够容忍<code>min.insync.replicas - 1</code>个副本同时宕机。</p><p>根据上面的分析，我们可以得出：</p><div class="hint-container tip"><p class="hint-container-title">结论</p><p>数据完全可靠条件 = ACK设为-1 + 分区副本大于等于2 + 应答最小副本数大于等于2</p></div><p>后文如无特殊说明，统一 ack = -1</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 设置acks </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ACKS_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;all&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 重试次数retries，默认是int最大值，2147483647 </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RETRIES_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据重复" tabindex="-1"><a class="header-anchor" href="#数据重复"><span>数据重复</span></a></h4><p>考虑一种情况，原先的 Leader 响应 ack 后挂了，而且该 ack 中途丢失了，那么 Producer 会再次发送这条消息。进而，新选举出的 Leader 将有两条同样的消息，导致消息重复的问题。</p><figure><img src="`+B+'" alt="数据重复" tabindex="0" loading="lazy"><figcaption>数据重复</figcaption></figure><p><strong>数据传递语义</strong></p><ul><li>至少一次 (AtLeastOnce) = ACK设为-1 + 分区副本大于等于2 + ISR里应答的最小副本数量大于等于2</li><li>最多一次 (AtMostOnce) = ACK设为0</li></ul><p>其中，At Least Once 可以保证数据不丢失，但是不能保证数据不重复; At Most Once 可以保证数据不重复，但是不能保证数据不丢失。</p><p>但是实际生产中，存在一些重要数据，要求既不能重复也不能丢失，这两者并不能解决我们的问题。Kafka 0.11版本以后，引入了一项重大特性: 幂等性和事务来实现“精确一次”的传递语义。</p><p><strong>幂等性</strong></p><p>在 Kafka 中指Producer不论向Broker发送多少次重复数据，Broker端都只会持久化一条，保证了不重复。</p><ul><li>精确一次 (Exactly Once): 幂等性 + 至少一次</li></ul><figure><img src="'+y+`" alt="幂等性原理" tabindex="0" loading="lazy"><figcaption>幂等性原理</figcaption></figure><p>实现原理上，Kafka 把<code>&lt;PID, Partition, SeqNumber&gt;</code>作为判断重复数据的主键。相同主键的消息提交时，Broker只会持久化一条。其中 PID 是生产者ID，Kafka 每次重启都会重新分配；Partition 表示分区号；Sequence Number是单调自增的序列号。也因此，幂等性只能保证在单分区单会话内消息不重复。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 开启幂等性，默认即true开启</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ENABLE_IDEMPOTENCE_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>事务</strong></p><p>幂等性只能保证在单分区单会话内消息不重复，而为了保证多会话、多分区内的消息不重复，需要使用 Kafka事务。</p><figure><img src="`+u+`" alt="kafka事务" tabindex="0" loading="lazy"><figcaption>kafka事务</figcaption></figure><ul><li>开启事务，必须开启幂等性。且 Producer 必须先自定义一个全局唯一的 <code>transactional.id</code></li><li>由事务协调器负责接收 Producer 的 commit 消息，并持久化到一个特殊的事务Topic（记录事务状态）</li><li>然后开始落盘实际的消息数据，完成后更新事务Topic</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Properties</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> properties </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Properties</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// broker、序列化器等省略</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 开启幂等性</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ENABLE_IDEMPOTENCE_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 设置事务id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TRANSACTIONAL_ID_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;transaction_id_0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">KafkaProducer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> producer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> KafkaProducer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(properties)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 初始化事务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">initTransactions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 开启事务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">beginTransaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ProducerRecord</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> producerRecord </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ProducerRecord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;firstTopic&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;message&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(producerRecord);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3. 提交事务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">commitTransaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 3. 出现异常回滚事务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">abortTransaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    producer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据有序" tabindex="-1"><a class="header-anchor" href="#数据有序"><span>数据有序</span></a></h4><p>消费者在消费消息时，希望能够有序消费，而Kafka能够保证单分区内有序，至于多分区有序消费可以由具体的消费者去实现。</p><p>Kafka保证单分区内的有序性类似 TCP 的滑动窗口，即控制发送窗口的大小，在窗口内通过排序保证消息的有序：</p><ul><li>Kafka在1.x版本之前保证数据单分区有序，需满足： <code>max.in.flight.requests.per.connection=1</code> 即限制发送窗口为1，只有上一个 request 收到 ack 后才能继续发送，尽管能保证有序，但效率低下</li><li>Kafka在1.x及以后版本保证数据单分区有序，需满足: <ul><li>未开启幂等性（同上） <code>max.in.flight.requests.per.connection=1</code></li><li>开启幂等性 <code>max.in.flight.requests.per.connection&lt;=5</code> 因为在新版 Kafka 启用幂等后，Broker 会缓存 Producer 发来的最近5个 request 的元数据，因此可以保证最近5个request的数据都是有序的。</li></ul></li></ul><figure><img src="`+E+'" alt="数据有序" tabindex="0" loading="lazy"><figcaption>数据有序</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ProducerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;5&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="broker" tabindex="-1"><a class="header-anchor" href="#broker"><span>Broker</span></a></h2><h3 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程"><span>工作流程</span></a></h3><h4 id="zk-存储数据" tabindex="-1"><a class="header-anchor" href="#zk-存储数据"><span>ZK 存储数据</span></a></h4><p>Kafka 基于 Zookeeper 存储相关数据，结构如图：</p><figure><img src="'+f+'" alt="kafka-zk-data-structure" tabindex="0" loading="lazy"><figcaption>kafka-zk-data-structure</figcaption></figure><ul><li><code>/kafka/brokers/topics</code> 记录所有主题信息 <ul><li>如 <code>/firstTopic/partitions/0/state</code> 存储<code>{&quot;controller_epoch&quot;:21,&quot;leader&quot;:1,&quot;version&quot;:1,&quot; leader_epoch&quot;:17,&quot;isr&quot;:[1,0,2]}</code></li></ul></li><li><code>/kafka/brokers/ids</code> 记录所有服务器 <ul><li>如<code>{0,1,2}</code></li></ul></li><li><code>/kafka/controller</code> 记录用于辅助选举 Leader 的 Broker <ul><li>例如<code>{&quot;version&quot;:1 ,&quot;brokerid&quot;:0, &quot;timestamp&quot;:&quot;1635907476&quot;}</code></li></ul></li></ul><h4 id="整理流程" tabindex="-1"><a class="header-anchor" href="#整理流程"><span>整理流程</span></a></h4><figure><img src="'+F+'" alt="Broker工作流程" tabindex="0" loading="lazy"><figcaption>Broker工作流程</figcaption></figure><ol><li>Broker 启动后自动注册到 ZK</li><li>集群中的某个 Broker 成为 Controller，负责监听 brokers 节点变化，辅助 Leader 选举</li><li>Controller 将节点的具体信息上传至 ZK</li><li>其它 Controller 从 ZK 同步相关信息</li><li>然后就可以开始接收/应答消息了</li><li>当某个 Broker 宕机，Controller 会监听到节点变化。然后从 ZK 获取 ISR 按上述规则选举新 Leader，最后更新 Leader 及 ISR</li></ol><h4 id="重要参数" tabindex="-1"><a class="header-anchor" href="#重要参数"><span>重要参数</span></a></h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://replica.lag.time.max.ms" target="_blank" rel="noopener noreferrer">replica.lag.time.max.ms</a></td><td>Follower 向 Leader 发送请求的超时时间，超时将被踢出 ISR，默认30s</td></tr><tr><td>auto.leader.rebalance.enable</td><td>自动 Leader Partition 平衡，默认是 true</td></tr><tr><td>log.segment.bytes</td><td>Kafka 日志分块存储的大小，默认1G。</td></tr><tr><td>log.index.interval.bytes</td><td>kafka 每当写入了固定大小的日志，然后就往 index 文件里面记录一个索引，默认 4kb</td></tr><tr><td>og.retention.hours/minutes/ms</td><td>Kafka 中数据保存的时间，默认 7 天</td></tr><tr><td><a href="http://log.flush.interval.ms" target="_blank" rel="noopener noreferrer">log.flush.interval.ms</a></td><td>刷盘间隔，默认是 null，立刻刷盘</td></tr></tbody></table><h3 id="副本" tabindex="-1"><a class="header-anchor" href="#副本"><span>副本</span></a></h3><h4 id="基本信息" tabindex="-1"><a class="header-anchor" href="#基本信息"><span>基本信息</span></a></h4><ul><li>Kafka 的副本作用是提高数据的可靠性</li><li>默认 1 个，增加副本可以提高可靠性，但也会增加存储空间、网络传输等</li><li>副本分 Leader 和 Follower，仅 Leader 负责收发消息，Follower 负责同步</li><li>分区中的所有副本统称 AR(Assigned Replicas)，AR = ISR (正常同步的) + OSR (延迟过多的)</li></ul><figure><img src="'+m+'" alt="kafka主从同步" tabindex="0" loading="lazy"><figcaption>kafka主从同步</figcaption></figure><p>同一Partition的Replica不应存储在同一个Broker上，因为一旦该Broker宕机，对应Partition的所有Replica都无法工作，这就达不到高可用的效果。为了做好负载均衡并提高容错能力，Kafka会尽量将所有的Partition以及各Partition的副本均匀地分配到整个集群上。</p><h4 id="选举" tabindex="-1"><a class="header-anchor" href="#选举"><span>选举</span></a></h4><p>Kafka 集群中的第一个注册的 Broker 会成为 Controller，负责管理集群 Broker 的上下线、分区副本分配、Leader选举等工作。当 Leader 发生宕机后：</p><ul><li>Controller 会监测到节点变化</li><li>选举规则：按 AR 列表的顺序，遍历到的第一个在 ISR 中存活的 Broker 将成为新 Leader</li><li>Controller 负责更新 Leader 及 ISR</li><li>其它 Controller 从 zk 同步数据</li></ul><p>各 Partition 的 Leader 负责维护 ISR 列表并将 ISR 的变更同步至ZooKeeper，被移出 ISR 的 Follower 会继续向 Leader 发 FetchRequest 请求，试图再次跟上 Leader 重新进入 ISR。通常只有 ISR 里的成员才可能被选为Leader。当Kafka中<code>unclean.leader.election.enable</code>配置为 true(默认false) 且 ISR 中所有副本均宕机的情况下，才允许ISR外的副本被选为Leader，但此时会丢失部分已应答的数据。</p><h4 id="故障恢复" tabindex="-1"><a class="header-anchor" href="#故障恢复"><span>故障恢复</span></a></h4><p>每个Kafka副本对象都有两个重要属性：</p><ul><li>LEO (Log End Offset): 日志末端偏移，指向了副本日志中下一条消息的偏移量，即下一条消息的写入位置</li><li>HW (High Watermark): 已同步消息标识，也叫高水位线（因其类似于木桶效应中短板决定水位高度，故取名高水位线） <ul><li>高水位线以下消息都是备份过的，消费者仅可消费各分区 Leader 高水位线以下的消息</li><li>对于任何一个副本对象而言其 HW 值不会大于 LEO 值</li><li>Leader 的 HW 值由 ISR 中的所有备份的 LEO 最小值决定</li><li>Follower 在发送 FetchRequest 时会在 PartitionFetchInfo 中携带 Follower 的 LEO</li></ul></li></ul><figure><img src="'+v+'" alt="副本LEO" tabindex="0" loading="lazy"><figcaption>副本LEO</figcaption></figure><p>Kafka 原本使用 HW 来记录副本的备份进度，HW 值的更新通常需要额外一轮 FetchRequest 才能完成，存在一些边缘案例导致备份数据丢失或导致多个备份间的数据不一致。Kafka 新引入了 Leader epoch 解决 HW 截断产生的问题，可参考：<a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-279%3A+Fix+log+divergence+between+leader+and+follower+after+fast+leader+fail+over" target="_blank" rel="noopener noreferrer">KIP-279: Fix log divergence between leader and follower after fast leader fail over</a></p><p><strong>如果 Follower 发生故障：</strong></p><ol><li>Follower 会被临时踢出 ISR</li><li>期间 Leader/Follower 继续接收数据</li><li>等该 Folloewr 恢复后，会读取本地磁盘记录的 HW，将 log 文件中高于 HW 的部分截断，然后从 HW 开始重新从 Leader 那同步过来</li><li>直到该 Follower 的 LEO &gt;= 该分区的 HW 后就可以重新加入 ISR 了</li></ol><figure><img src="'+C+'" alt="故障处理" tabindex="0" loading="lazy"><figcaption>故障处理</figcaption></figure><p><strong>如果 Leader 发生故障：</strong></p><ol><li>Controller 从 AR 中选出一个新 Leader</li><li>其余 Follower 会先将各自的 log 文件高于HW的部分截断，然后从新的 Leader 那同步数据。这样可以保证多个副本之间的数据一致性，但并不保证数据不丢失/不重复</li></ol><figure><img src="'+b+'" alt="kafka崩溃恢复" tabindex="0" loading="lazy"><figcaption>kafka崩溃恢复</figcaption></figure><h4 id="副本分配" tabindex="-1"><a class="header-anchor" href="#副本分配"><span>副本分配</span></a></h4><ul><li>Kafka 默认会把分区的 Leader 均匀分散在各个机器上，实现负载均衡，不同分区的 AR 排列错开来提高可靠性</li><li><a href="http://kafka-reassign-partitions.sh" target="_blank" rel="noopener noreferrer">kafka-reassign-partitions.sh</a> 可以执行手动分配副本/增加副本因子</li></ul><h3 id="持久化" tabindex="-1"><a class="header-anchor" href="#持久化"><span>持久化</span></a></h3><h4 id="消息结构" tabindex="-1"><a class="header-anchor" href="#消息结构"><span>消息结构</span></a></h4><figure><img src="'+D+'" alt="record结构" tabindex="0" loading="lazy"><figcaption>record结构</figcaption></figure><p>Kafka 中存储磁盘、网络传输、压缩的基本单元是消息集，其中包含若干条消息。一条完整的消息包含：</p><ul><li>offset：标识在 Partition 中的偏移量(逻辑值)</li><li>message size：消息的大小</li><li>RECORD： <ul><li>crc32：4B，crc32校验值，校验范围为magic至value之间</li><li>magic：1B，消息格式版本号，0.9.X版本的magic值为0</li><li>attributes：1B，消息的属性，总共占1个字节，低3位表示压缩类型：0为NONE、1为GZIP、2为SNAPPY、3为LZ4，其余位保留。</li><li>key length：4B，表示消息的key的长度。-1表示key为空</li><li>key：消息键，可选</li><li>value length（4B）：4B，实际消息体的长度。-1表示value为空</li><li>value：消息体，可选</li></ul></li></ul><h4 id="日志结构" tabindex="-1"><a class="header-anchor" href="#日志结构"><span>日志结构</span></a></h4><p>在 Kafka 中，Topic 是逻辑上的概念，而 Partition 是物理上的概念，每个 Partition 对应一组日志文件，Producer 生产的数据会追加到日志文件末尾。</p><figure><img src="'+x+'" alt="持久化存储" tabindex="0" loading="lazy"><figcaption>持久化存储</figcaption></figure><p>为防止日志文件过大导致数据定位效率低下，Kafka采取了分片和索引机制， 将每个 Partition 分为多个 Segment。每个 Segment 包括:</p><ul><li><code>.log</code>: 日志文件</li><li><code>.index</code>: 偏移量索引，是保存相对 offset 的稀疏索引，log每写入4kb会新增一条索引项</li><li><code>.timeindex</code>: 时间戳索引文件</li></ul><p>这些文件位于同一个文件夹下，该文件夹的命名规则为 <code>topic名称+分区序号</code>，例如<code>firstTopic-0</code>。分片日志名为当前 Segment 第一条消息的 offset。日志里存储的是序列化后的数据，可以通过： <code>kafka-run-class.sh kafka.tools.DumpLogSegments --files ./00000000000000004096.index</code> 查看日志具体信息。</p><h4 id="索引定位" tabindex="-1"><a class="header-anchor" href="#索引定位"><span>索引定位</span></a></h4><p>Broker将每个Partition的消息追加到日志中，是以日志分段(Segment)为单位的。当Segment的大小达到阈值(默认是1G)时，会新创建一个Segment保存新的消息，每个Segment都有一个基准偏移量(baseOffset，每个Segment保存的第一个消息的绝对偏移量)，通过这个基准偏移量，就可以计算出每条消息在Partition中的绝对偏移量。 每个日志分段由数据文件和索引文件组，数据文件(文件名以log结尾)保存了消息集的具体内容，索引文件(文件名以index结尾)保存了消息偏移量到物理位置的索引。</p><p>在查找某个 offset 的消息时（类似OS虚拟内存）：</p><ol><li>首先根据目标 offset 定位 Segment 分片日志文件</li><li>从 index 索引文件中找到小于等于目标 offset 的最大 offset 对应的索引项</li><li>根据索引项定位到 log 文件</li><li>向后遍历找到目标记录</li></ol><figure><img src="'+_+`" alt="日志索引" tabindex="0" loading="lazy"><figcaption>日志索引</figcaption></figure><p><strong>核心代码</strong></p><div class="language-scala line-numbers-mode" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@volatile </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nextOffsetMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LogOffsetMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(activeSegment.nextOffset(), </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                                        activeSegment.baseOffset, activeSegment.size.toInt);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(messages:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ByteBufferMessageSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, assignOffsets:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //LogAppendInfo对象，代表这批消息的概要信息，然后对消息进行验证</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> appendInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> analyzeAndValidateMessageSet(messages)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> validMessages</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> trimInvalidBytes(messages, appendInfo)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //获取最新的”下一个偏移量“作为第一条消息的绝对偏移量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    appendInfo.firstOffset </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nextOffsetMetadata.messageOffset</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (assignOffsets) { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//如果每条消息的偏移量都是递增的</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //消息的起始偏移量来自于最新的”下一个偏移量“，而不是消息自带的顺序值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> offset</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AtomicLong</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nextOffsetMetadata.messageOffset);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //基于起始偏移量，为有效的消息集的每条消息重新分配绝对偏移量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      validMessages </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> validMessages.validateMessagesAndAssignOffsets(offset);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      appendInfo.lastOffset </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> offset.get </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //最后一条消息的绝对偏移量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> segment</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maybeRoll(validMessages.sizeInBytes) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//如果达到Segment大小的阈值，需要创建新的Segment</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    segment.append(appendInfo.firstOffset,validMessages) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//追加消息到当前分段</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    updateLogEndOffset(appendInfo.lastOffset </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//修改最新的”下一个偏移量“</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (unflushedMessages </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> config.flushInterval) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      flush() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//如果没有刷新的消息数大于配置的，那么将消息刷入到磁盘</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//更新日志的”最近的偏移量“，传入的参数一般是最后一条消息的偏移量加上1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//使用发需要获取日志的”最近的量“时，就不需要再做加一的操作了</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> updateLogEndOffset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(messageOffset:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    nextOffsetMetadata </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LogOffsetMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(messageOffset, activeSegment.baseOffset,activeSegment.size.toInt)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="日志清理" tabindex="-1"><a class="header-anchor" href="#日志清理"><span>日志清理</span></a></h4><p>Kafka 中默认的日志保存时间为 7 天，可以通过调整参数 <code>log.retention.hours/minutes/ms</code> 修改保存时间。日志过期后有两种处理策略，由参数<code>log.cleanup.policy</code>的取值控制：</p><ul><li>delete: 删除日志，又分两个模式： <ul><li>默认基于时间，以 Segment 中所有记录的最大时间戳作为该文件的时间戳</li><li>基于大小，默认删除最早的 Segment</li></ul></li><li>compact：压缩日志 <ul><li>对于相同 key 的不同 value 值，只保留最后一个版本。</li><li>压缩后的offset可能是不连续的，导致按 key 取值错位。因此这种策略只适合特殊场景，比如消息的key是用户ID，value是用户的资料，通过这种压缩策略，整个消息集里就保存了所有用户最新的资料。</li></ul></li></ul><h3 id="高效读写" tabindex="-1"><a class="header-anchor" href="#高效读写"><span>高效读写</span></a></h3><ul><li>Kafka 本身是分布式集群，可以采用分区技术，并行度高</li><li>读数据采用稀疏索引，可以快速定位要消费的数据</li><li>索引条目的偏移量存储的是相对于“基准偏移量”的“相对偏移量” ，不是消息的“绝对偏移量”</li><li>顺序写磁盘</li><li>PageCache + 零拷贝技术，Broker应用层不关心存储的数据，发送不用走应用层，传输效率高</li></ul><h2 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer"><span>Consumer</span></a></h2><h3 id="消费方式" tabindex="-1"><a class="header-anchor" href="#消费方式"><span>消费方式</span></a></h3><p>通常在消息系统中，消息的发送方式有两种，一种是<strong>Push</strong>，比如 Facebook 的 Scribe 和 Cloudera 的 Flume，由 Broker 主动发送消息，目标是尽可能以最快速度传递消息，但无法适应消费速率不同的消费者，可能导致拒绝服务以及网络拥塞。</p><figure><img src="`+S+'" alt="消费方式" tabindex="0" loading="lazy"><figcaption>消费方式</figcaption></figure><p>Kafka Consumer 采用的是另一种方式<strong>Pull</strong>，由 Consumer 主动从 Broker 拉取数据，可以适应不同速率的消费者，简化了 Broker 的设计，既可批量消费也可逐条消费，还能选择不同的提交方式从而实现不同的传输语义。缺点是可能会在没有数据时一直拉取空数据。</p><h3 id="消费规则" tabindex="-1"><a class="header-anchor" href="#消费规则"><span>消费规则</span></a></h3><ul><li>一个消费者可以消费多个分区数据</li><li>消费者组（Consumer Group, CG），由多个具有相同 groupId 的 Consumer组成</li><li>消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费</li><li>如果组内消费者超过主题分区数量，那么会有一部分消费者处于空闲状态，不会接收任何消息。</li><li>消费者组之间互不影响，任何消费者都属于某个消费者组，因此消费者组是逻辑上的一个订阅者</li></ul><figure><img src="'+R+`" alt="ConsumerGroup" tabindex="0" loading="lazy"><figcaption>ConsumerGroup</figcaption></figure><h3 id="工作流程-1" tabindex="-1"><a class="header-anchor" href="#工作流程-1"><span>工作流程</span></a></h3><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h4><p>首先得先介绍 Coordinator，每个消费者组对应的实现消费者组初始化和分区分配的协调器。每个 Kafka Broker 内部都有一个 Coordinator，消费者组选择的方式是：</p><pre><code>Coordinator节点号 = hash(groupId) % _consumer_offsets分区数
</code></pre><p>其中，_consumer_offsets 分区数默认是50。计算结果对应的 Broker 就是 Coordinator 所在节点。组内所有消费者提交 offset 时就往这个分区去提交offset。</p><figure><img src="`+K+'" alt="Consumer工作流程" tabindex="0" loading="lazy"><figcaption>Consumer工作流程</figcaption></figure><p><strong>初始化流程：</strong></p><ol><li>选出 Coordinator</li><li>Coordinator 在组内选择一个消费者 Leader，并发送 Topic 信息</li><li>Consumer Leader 指定消费方案，即消费的分区分配，并发回 Coordinator</li><li>Coordinator 同步方案给所有 Consumer，就可以开始消费消息了</li></ol><p>每个消费者都会和 Coordinator 保持心跳（默认3s），一旦超过 <a href="http://session.timeout.ms" target="_blank" rel="noopener noreferrer">session.timeout.ms</a> (默认45s)，或者处理消息超过 <a href="http://max.poll.interval.ms" target="_blank" rel="noopener noreferrer">max.poll.interval.ms</a> (默认5min)，该消费者会被移除，并触发再平衡。</p><h4 id="拉取消息" tabindex="-1"><a class="header-anchor" href="#拉取消息"><span>拉取消息</span></a></h4><ol><li>Consumer::sendFetches 发送消费请求（拉取消息）</li><li>ConsumerNetworkClient::send 从 Broker 请求消息</li><li>成功拉取到消息存入 completedFetches 缓存队列中</li><li>经反序列化、拦截器后交付消费者，做具体处理</li></ol><figure><img src="'+P+`" alt="消费流程" tabindex="0" loading="lazy"><figcaption>消费流程</figcaption></figure><h3 id="消费参数" tabindex="-1"><a class="header-anchor" href="#消费参数"><span>消费参数</span></a></h3><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://group.id" target="_blank" rel="noopener noreferrer">group.id</a></td><td>标记消费者所属的消费者组</td></tr><tr><td>enable.auto.commit</td><td>默认为 true，消费者自动周期性地向服务器提交偏移量。</td></tr><tr><td><a href="http://auto.commit.interval.ms" target="_blank" rel="noopener noreferrer">auto.commit.interval.ms</a></td><td>默认5s，消费者向 Kafka 提交 offset 的频率</td></tr><tr><td>offsets.topic.num.partitions</td><td>默认50个，__consumer_offsets 的分区数</td></tr><tr><td><a href="http://heartbeat.interval.ms" target="_blank" rel="noopener noreferrer">heartbeat.interval.ms</a></td><td>默认 3s，Kafka 消费者和 coordinator 之间的心跳时间。</td></tr><tr><td><a href="http://session.timeout.ms" target="_blank" rel="noopener noreferrer">session.timeout.ms</a></td><td>默认 45s，Kafka 消费者和 coordinator 之间连接超时时间。</td></tr><tr><td><a href="http://max.poll.interval.ms" target="_blank" rel="noopener noreferrer">max.poll.interval.ms</a></td><td>默认5min，消费者处理消息的最大时长。</td></tr><tr><td>fetch.min.bytes</td><td>默认 1Byte，消费者获取服务器端一批消息最小的字节数。</td></tr><tr><td><a href="http://fetch.max.wait.ms" target="_blank" rel="noopener noreferrer">fetch.max.wait.ms</a></td><td>默认 500ms，获取一批数据的最大时间</td></tr><tr><td>fetch.max.bytes</td><td>默认50MB，消费者获取服务器端一批消息最大的字节数</td></tr><tr><td>max.poll.records</td><td>默认 500条，一次 poll 拉取数据返回消息的最大条数</td></tr></tbody></table><h3 id="java客户端-1" tabindex="-1"><a class="header-anchor" href="#java客户端-1"><span>Java客户端</span></a></h3><h4 id="引入依赖-1" tabindex="-1"><a class="header-anchor" href="#引入依赖-1"><span>引入依赖</span></a></h4><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 原生客户端 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.apache.kafka&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;kafka-clients&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;3.5.1&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- SpringBoot 整合 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.kafka&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-kafka&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="原生客户端-1" tabindex="-1"><a class="header-anchor" href="#原生客户端-1"><span>原生客户端</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. Kafka 属性配置</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Properties</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> properties </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Properties</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ConsumerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">BOOTSTRAP_SERVERS_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;localhost:9092&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ConsumerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">KEY_DESERIALIZER_CLASS_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">StringDeserializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ConsumerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">VALUE_DESERIALIZER_CLASS_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">StringDeserializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 配置消费者组，必须的</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ConsumerConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">GROUP_ID_CONFIG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 创建消费者</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">KafkaConsumer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> consumer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> KafkaConsumer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(properties)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 可以指定消费的主题分区</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// List&lt;TopicPartition&gt; topicPartitions = new ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// topicPartitions.add(new TopicPartition(&quot;firstTopic&quot;, 0));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// consumer.assign(topicPartitions);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 3. 注册要消费的主题</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> topics </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">topics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;firstTopic&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">consumer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">subscribe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(topics);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 4. 拉取数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ConsumerRecords</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> records </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> consumer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">poll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Duration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ofSeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ConsumerRecord</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> record </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> records) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(record);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="springboot-客户端-1" tabindex="-1"><a class="header-anchor" href="#springboot-客户端-1"><span>SpringBoot 客户端</span></a></h4><p><strong>配置</strong></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">spring.kafka.bootstrap-servers=localhost:9092</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">spring.kafka.consumer.group-id=test</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>KafkaListener</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ConsumerListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">KafkaListener</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">topics</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;firstTopic&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> consume</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">       System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Kafka message: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> msg);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="offset" tabindex="-1"><a class="header-anchor" href="#offset"><span>Offset</span></a></h3><p>offset 表示分区中每条消息的位置信息，是一个单调递增且不变的值。Kafka 0.9 之前会把消费完的 offset 存入 ZK，容易导致网络传输开销大。</p><p>而在 Kafka 0.9 中，offset 存入了 Broker 中的一个特殊主题 _consumer_offsets，该主题默认有 50个分区，里面采用 KV 方式存储数据，其中 key 是 <code>group.id+topic+分区号</code>，value 是当前 offset 的值。每隔一段时间，Kafka 内部会对这个 topic 进行 compact，也就是每个 group.id+topic+分区号仅保留最新数据。</p><figure><img src="`+I+'" alt="consumer-offset" tabindex="0" loading="lazy"><figcaption>consumer-offset</figcaption></figure><p>offset 由 Consumer 控制，Consumer会在消费完一条消息后递增该offset，也可以指定 offset 来重新消费一些消息。因为 offet 由 Consumer 控制，所以 Kafka Broker 是无状态的，不需要标记消息是否被消费过，也不需要通过Broker去保证同一个Consumer Group只有一个Consumer能消费某一条消息，因此也就不需要锁机制，从而保证了Kafka的高吞吐率。</p><h4 id="自动提交" tabindex="-1"><a class="header-anchor" href="#自动提交"><span>自动提交</span></a></h4><p>两个参数：</p><ul><li>enable.auto.commit：是否自动周期性地向服务器提交偏移量，默认是 true</li><li><a href="http://auto.commit.interval.ms" target="_blank" rel="noopener noreferrer">auto.commit.interval.ms</a>：自动提交 offset 的时间间隔，默认是 5s</li></ul><h4 id="手动提交" tabindex="-1"><a class="header-anchor" href="#手动提交"><span>手动提交</span></a></h4><p>自动提交虽然简单方便，但由于是基于时间提交的，开发者难以把握offset提交的时机。因此 Kafka 也提供了手动提交 offset 的API，分两种:</p><ul><li>commitSync(同步提交)：阻塞当前线程，直到提交成功，并且会自动失败重试</li><li>commitAsync(异步提交)：提交 offset 更新请求后就开始消费下一批数据，没有失败重试</li></ul><h4 id="指定-offset" tabindex="-1"><a class="header-anchor" href="#指定-offset"><span>指定 offset</span></a></h4><p>当 Kafka 中偏移量不存在时（消费者组第一次消费/该数据已被删除），由配置<code>auto.offset.reset</code>决定消费策略：</p><ul><li>earliest：自动将偏移量重置为最早的偏移量，即CLI中的 --from-beginning</li><li>latest：默认值，自动将偏移量重置为最新偏移量</li><li>none：向消费者抛出异常。</li></ul><p>此外，Kafka 还支持指定时间设置 offset 来消费。</p><h3 id="分区分配" tabindex="-1"><a class="header-anchor" href="#分区分配"><span>分区分配</span></a></h3><p>一个 Consumer Group 中有多个 Consumer，一个 topic 有多个 Partition组成，现在的问题是，到底由哪个consumer来消费哪个 partition的数据，即消费分区分配的问题。以下三种情况会触发分区分配：</p><ul><li>同一个 Consumer Group 内新增消费者</li><li>消费者离开当前所属的 Group，包括 Shuts Down 或 Crashes</li><li>订阅的主题新增Partition</li></ul><p>Kafka有四种主流的分区分配策略：Range、RoundRobin、Sticky、CooperativeSticky。通过配置参数<code>partition.assignment.strategy</code>指定，默认策略是 Range+ CooperativeSticky，可以同时使用多个分区分配策略。</p><h4 id="range" tabindex="-1"><a class="header-anchor" href="#range"><span>Range</span></a></h4><p>Range 针对的是每个 topic：</p><ul><li>首先对同一个 topic 里面的分区按序号排序，并对消费者按字典序排序。例如7个分区，3个消费者，排序后的分区即 0,1,2,3,4,5,6；消费者即 C0,C1,C2</li><li>通过<strong>分区数/消费者数</strong>来决定每个消费者应消费几个分区，余下的由前面几个消费者负责。</li></ul><p>存在的问题：如果只是针对 1 个 topic 而言，头部消费者多消费 1 个分区影响不大。但如果有 N 个 topic，那么头部消费者将多消费 N 个分区，容易产生数据倾斜。</p><figure><img src="'+L+'" alt="Range策略" tabindex="0" loading="lazy"><figcaption>Range策略</figcaption></figure><h4 id="roundrobin" tabindex="-1"><a class="header-anchor" href="#roundrobin"><span>RoundRobin</span></a></h4><p>RoundRobin 针对的是集群中所有Topic：</p><ul><li>把所有的 partition（TopicAndPartition） 和所有的 consumer 都列出来，按 hashcode 排序</li><li>通过轮询算法来分配 partition 给各个消费者</li></ul><figure><img src="'+q+'" alt="RoundRobin策略" tabindex="0" loading="lazy"><figcaption>RoundRobin策略</figcaption></figure><p>轮询策略如果同一消费组内，所有的消费者订阅的消息都是相同的，那么 RoundRobin 策略的分区分配会是均匀的。否则分区分配就不是完全的轮询分配，有可能会导致分区分配的不均匀。</p><h4 id="sticky" tabindex="-1"><a class="header-anchor" href="#sticky"><span>Sticky</span></a></h4><p>粘性分配，尽量均衡的放置分区到消费者上面，在出现同一消费者组内消费者出现问题的时候，会尽量保持原有分配的分区不变化。</p><p>而 CooperativeStickey 类似 Sticky，并支持渐进重平衡过程，这个过程可以允许消费者继续保留当前的分区不变化，然后等待协调者重新分配增量的分区。</p><h3 id="生产经验-1" tabindex="-1"><a class="header-anchor" href="#生产经验-1"><span>生产经验</span></a></h3><h4 id="消费者事务" tabindex="-1"><a class="header-anchor" href="#消费者事务"><span>消费者事务</span></a></h4><p>生产中的问题：</p><ul><li>重复消费: 已经消费了数据，但 offset 没提交</li><li>漏消费: 先提交 offset 后消费，可能会造成数据的漏消费</li></ul><p>如果想完成 Consumer 端的精准一次性消费，那么需要 Kafka 消费端将消费过程和提交 offset 过程做原子绑定。此时我们需要将Kafka的offset保存到支持事务的自定义介质(比如 MySQL)。TODO</p><h4 id="数据积压" tabindex="-1"><a class="header-anchor" href="#数据积压"><span>数据积压</span></a></h4><p>主要目的是要提高消费者的吞吐量，例如：</p><ul><li>增加 Topic 的分区数，并且同时提升消费组的消费者数量，而这缺一不可</li><li>如果是下游的数据处理不及时，可以提高每批次拉取的数量，减少网络浪费</li></ul>',220)]))}const N=s(O,[["render",z]]),j=JSON.parse('{"path":"/coding/MQ_Kafka.html","title":"MQ-Kafka","lang":"zh-CN","frontmatter":{"title":"MQ-Kafka","date":"2023-08-01T00:00:00.000Z","category":["分布式"],"tag":["MQ"],"description":"简介 Kafka是一个分布式的基于发布/订阅模式的消息队列，主要应用于大数据实时处理领域。同时也是一个开源的分布式事件流平台（Event Streaming Platform），用于高性能数据管道、流分析、数据集成和关键任务应用。 更多关于消息队列的介绍见：消息队列概述 应用场景 除了传统 MQ 的功能：流量削峰、应用解耦、异步通信之外，Kafka 还...","head":[["meta",{"property":"og:url","content":"https://xchanper.github.io/coding/MQ_Kafka.html"}],["meta",{"property":"og:site_name","content":"chanper"}],["meta",{"property":"og:title","content":"MQ-Kafka"}],["meta",{"property":"og:description","content":"简介 Kafka是一个分布式的基于发布/订阅模式的消息队列，主要应用于大数据实时处理领域。同时也是一个开源的分布式事件流平台（Event Streaming Platform），用于高性能数据管道、流分析、数据集成和关键任务应用。 更多关于消息队列的介绍见：消息队列概述 应用场景 除了传统 MQ 的功能：流量削峰、应用解耦、异步通信之外，Kafka 还..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xchanper.github.io/img/kafka%E6%97%A5%E5%BF%97%E5%90%8C%E6%AD%A5.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-22T07:34:10.000Z"}],["meta",{"property":"article:tag","content":"MQ"}],["meta",{"property":"article:published_time","content":"2023-08-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-22T07:34:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MQ-Kafka\\",\\"image\\":[\\"https://xchanper.github.io/img/kafka%E6%97%A5%E5%BF%97%E5%90%8C%E6%AD%A5.svg\\",\\"https://xchanper.github.io/img/kafka%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97.svg\\",\\"https://xchanper.github.io/img/%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84.jpg\\",\\"https://xchanper.github.io/img/EFAK.png\\",\\"https://xchanper.github.io/img/Kraft.png\\",\\"https://xchanper.github.io/img/kafka%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81.svg\\",\\"https://xchanper.github.io/img/%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B.png\\",\\"https://xchanper.github.io/img/RecordAccumulator.svg\\",\\"https://xchanper.github.io/img/ack0.png\\",\\"https://xchanper.github.io/img/ack1.png\\",\\"https://xchanper.github.io/img/ack-1.png\\",\\"https://xchanper.github.io/img/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D.png\\",\\"https://xchanper.github.io/img/%E5%B9%82%E7%AD%89%E6%80%A7%E5%8E%9F%E7%90%86.png\\",\\"https://xchanper.github.io/img/kafka%E4%BA%8B%E5%8A%A1.png\\",\\"https://xchanper.github.io/img/%E6%95%B0%E6%8D%AE%E6%9C%89%E5%BA%8F.png\\",\\"https://xchanper.github.io/img/kafka-zk-data-structure.png\\",\\"https://xchanper.github.io/img/Broker%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\\",\\"https://xchanper.github.io/img/kafka%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.svg\\",\\"https://xchanper.github.io/img/%E5%89%AF%E6%9C%ACLEO.svg\\",\\"https://xchanper.github.io/img/%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86.png\\",\\"https://xchanper.github.io/img/kafka%E5%B4%A9%E6%BA%83%E6%81%A2%E5%A4%8D.svg\\",\\"https://xchanper.github.io/img/record%E7%BB%93%E6%9E%84.svg\\",\\"https://xchanper.github.io/img/%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8.png\\",\\"https://xchanper.github.io/img/%E6%97%A5%E5%BF%97%E7%B4%A2%E5%BC%95.png\\",\\"https://xchanper.github.io/img/%E6%B6%88%E8%B4%B9%E6%96%B9%E5%BC%8F.png\\",\\"https://xchanper.github.io/img/ConsumerGroup.png\\",\\"https://xchanper.github.io/img/Consumer%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\\",\\"https://xchanper.github.io/img/%E6%B6%88%E8%B4%B9%E6%B5%81%E7%A8%8B.png\\",\\"https://xchanper.github.io/img/consumer-offset.svg\\",\\"https://xchanper.github.io/img/Range%E7%AD%96%E7%95%A5.png\\",\\"https://xchanper.github.io/img/RoundRobin%E7%AD%96%E7%95%A5.png\\"],\\"datePublished\\":\\"2023-08-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-22T07:34:10.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"基础架构","slug":"基础架构","link":"#基础架构","children":[]}]},{"level":2,"title":"安装使用","slug":"安装使用","link":"#安装使用","children":[{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"命令","slug":"命令","link":"#命令","children":[]},{"level":3,"title":"监控工具","slug":"监控工具","link":"#监控工具","children":[]},{"level":3,"title":"Kraft","slug":"kraft","link":"#kraft","children":[]}]},{"level":2,"title":"Producer","slug":"producer","link":"#producer","children":[{"level":3,"title":"发送流程","slug":"发送流程","link":"#发送流程","children":[]},{"level":3,"title":"分区策略","slug":"分区策略","link":"#分区策略","children":[]},{"level":3,"title":"Java客户端","slug":"java客户端","link":"#java客户端","children":[]},{"level":3,"title":"生产经验","slug":"生产经验","link":"#生产经验","children":[]}]},{"level":2,"title":"Broker","slug":"broker","link":"#broker","children":[{"level":3,"title":"工作流程","slug":"工作流程","link":"#工作流程","children":[]},{"level":3,"title":"副本","slug":"副本","link":"#副本","children":[]},{"level":3,"title":"持久化","slug":"持久化","link":"#持久化","children":[]},{"level":3,"title":"高效读写","slug":"高效读写","link":"#高效读写","children":[]}]},{"level":2,"title":"Consumer","slug":"consumer","link":"#consumer","children":[{"level":3,"title":"消费方式","slug":"消费方式","link":"#消费方式","children":[]},{"level":3,"title":"消费规则","slug":"消费规则","link":"#消费规则","children":[]},{"level":3,"title":"工作流程","slug":"工作流程-1","link":"#工作流程-1","children":[]},{"level":3,"title":"消费参数","slug":"消费参数","link":"#消费参数","children":[]},{"level":3,"title":"Java客户端","slug":"java客户端-1","link":"#java客户端-1","children":[]},{"level":3,"title":"Offset","slug":"offset","link":"#offset","children":[]},{"level":3,"title":"分区分配","slug":"分区分配","link":"#分区分配","children":[]},{"level":3,"title":"生产经验","slug":"生产经验-1","link":"#生产经验-1","children":[]}]}],"git":{"createdTime":1750577650000,"updatedTime":1750577650000,"contributors":[{"name":"chanper","email":"qianchaosolo@gmail.com","commits":1}]},"filePathRelative":"coding/MQ_Kafka.md","localizedDate":"2023年8月1日","autoDesc":true}');export{N as comp,j as data};
